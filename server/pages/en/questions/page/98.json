{"pageProps":{"data":{"count":610,"rows":[{"id":125,"title":"What is an IndexOutOfRangeException / ArgumentOutOfRangeException and how do I fix it?","slug":"what-is-an-indexoutofrangeexception-argumentoutofrangeexception-and-how-do-i-fix-it-1657384697159","postType":"QUESTION","createdAt":"2022-07-09T16:38:17.000Z","updatedAt":"2022-07-09T16:38:17.000Z","tags":[{"id":457,"name":"indexoutofrangeexception","slug":"indexoutofrangeexception","createdAt":"2022-07-09T16:38:17.000Z","updatedAt":"2022-07-09T16:38:17.000Z","Questions_Tags":{"questionId":125,"tagId":457}}]},{"id":124,"title":"How do I convert an existing callback API to promises?","slug":"how-do-i-convert-an-existing-callback-api-to-promises-1657384694006","postType":"QUESTION","createdAt":"2022-07-09T16:38:14.000Z","updatedAt":"2022-07-09T16:38:14.000Z","tags":[]},{"id":123,"title":"Syntax error due to using a reserved word as a table or column name in MySQL","slug":"syntax-error-due-to-using-a-reserved-word-as-a-table-or-column-name-in-mysql-1657384689274","postType":"QUESTION","createdAt":"2022-07-09T16:38:09.000Z","updatedAt":"2022-07-09T16:38:09.000Z","tags":[{"id":449,"name":"reserved-words","slug":"reserved-words","createdAt":"2022-07-09T16:38:09.000Z","updatedAt":"2022-07-09T16:38:09.000Z","Questions_Tags":{"questionId":123,"tagId":449}}]},{"id":122,"title":"Why don't flex items shrink past content size?","slug":"why-don't-flex-items-shrink-past-content-size-1657384687282","postType":"QUESTION","createdAt":"2022-07-09T16:38:07.000Z","updatedAt":"2022-07-09T16:38:07.000Z","tags":[]},{"id":121,"title":"How do I pass variables and data from PHP to JavaScript?","slug":"how-do-i-pass-variables-and-data-from-php-to-javascript-1657384684553","postType":"QUESTION","createdAt":"2022-07-09T16:38:04.000Z","updatedAt":"2022-07-09T16:38:04.000Z","tags":[]}]},"answers":{"121":["\n&lt;p&gt;There are actually several approaches to do this. Some require more overhead than others, and some are considered better than others.&lt;/p&gt;\n\n&lt;p&gt;In no particular order:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use AJAX to get the data you need from the server.&lt;/li&gt;\n&lt;li&gt;Echo the data into the page somewhere, and use JavaScript to get the information from the DOM.&lt;/li&gt;\n&lt;li&gt;Echo the data directly to JavaScript.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In this post, we&apos;ll examine each of the above methods, and see the pros and cons of each, as well as how to implement them.&lt;/p&gt;\n\n&lt;h1&gt;1. Use AJAX to get the data you need from the server&lt;/h1&gt;\n\n&lt;p&gt;This method is considered the best, because &lt;strong&gt;your server side and client side scripts are completely separate&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Pros&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Better separation between layers&lt;/strong&gt; - If tomorrow you stop using PHP, and want to move to a servlet, a REST API, or some other service, you don&apos;t have to change much of the JavaScript code.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;More readable&lt;/strong&gt; - JavaScript is JavaScript, PHP is PHP. Without mixing the two, you get more readable code on both languages.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Allows for asynchronous data transfer&lt;/strong&gt; - Getting the information from PHP might be time/resources expensive. Sometimes you just don&apos;t want to wait for the information, load the page, and have the information reach whenever.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Data is not directly found on the markup&lt;/strong&gt; - This means that your markup is kept clean of any additional data, and only JavaScript sees it.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Cons&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Latency&lt;/strong&gt; - AJAX creates an HTTP request, and HTTP requests are carried over network and have network latencies.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt; - Data fetched via a separate HTTP request won&apos;t include any information from the HTTP request that fetched the HTML document. You may need this information (e.g., if the HTML document is generated in response to a form submission) and, if you do, will have to transfer it across somehow. If you have ruled out embedding the data in the page (which you have if you are using this technique) then that limits you to cookies/sessions which may be subject to race conditions.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Implementation Example&lt;/h2&gt;\n\n&lt;p&gt;With AJAX, you need two pages, one is where PHP generates the output, and the second is where JavaScript gets that output:&lt;/p&gt;\n\n&lt;h3&gt;get-data.php&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Do some operation here, like talk to the database, the file-session\n * The world beyond, limbo, the city of shimmers, and Canada.\n *\n * AJAX generally uses strings, but you can output JSON, HTML and XML as well.\n * It all depends on the Content-type header that you send with your AJAX\n * request. */&lt;/span&gt;\n\necho &lt;span class=&quot;hljs-built_in&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// In the end, you need to echo the result.&lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// All data should be json_encode()d.&lt;/span&gt;\n\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// You can json_encode() any value in PHP, arrays, strings,&lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;//even objects.&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;index.php (or whatever the actual page is named like)&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reqListener&lt;/span&gt; () {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; oReq = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// New request object&lt;/span&gt;\n    oReq.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// This is where you handle what to do with the response.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// The actual data is found on this.responseText&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Will alert: 42&lt;/span&gt;\n    };\n    oReq.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;get-data.php&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//                               ^ Don&apos;t block the rest of the execution.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//                                 Don&apos;t wait until the request finishes to&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//                                 continue.&lt;/span&gt;\n    oReq.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above combination of the two files will alert &lt;code&gt;42&lt;/code&gt; when the file finishes loading.&lt;/p&gt;\n\n&lt;h2&gt;Some more reading material&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;Using XMLHttpRequest - MDN&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest object reference - MDN&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-ajax-call&quot;&gt;How do I return the response from an asynchronous call?&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;2. Echo the data into the page somewhere, and use JavaScript to get the information from the DOM&lt;/h1&gt;\n\n&lt;p&gt;This method is less preferable to AJAX, but it still has its advantages. It&apos;s still &lt;em&gt;relatively&lt;/em&gt; separated between PHP and JavaScript in a sense that there is no PHP directly in the JavaScript.&lt;/p&gt;\n\n&lt;h3&gt;Pros&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - DOM operations are often quick, and you can store and access a lot of data relatively quickly.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Cons&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Potentially Unsemantic Markup&lt;/strong&gt; - Usually, what happens is that you use some sort of &lt;code&gt;&amp;lt;input type=hidden&amp;gt;&lt;/code&gt; to store the information, because it&apos;s easier to get the information out of &lt;code&gt;inputNode.value&lt;/code&gt;, but doing so means that you have a meaningless element in your HTML. HTML has the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element for data about the document, and HTML 5 introduces &lt;code&gt;data-*&lt;/code&gt; attributes for data specifically for reading with JavaScript that can be associated with particular elements.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Dirties up the Source&lt;/strong&gt; - Data that PHP generates is outputted directly to the HTML source, meaning that you get a bigger and less focused HTML source.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Harder to get structured data&lt;/strong&gt; - Structured data will have to be valid HTML, otherwise you&apos;ll have to escape and convert strings yourself.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Tightly couples PHP to your data logic&lt;/strong&gt; - Because PHP is used in presentation, you can&apos;t separate the two cleanly.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Implementation Example&lt;/h2&gt;\n\n&lt;p&gt;With this, the idea is to create some sort of element which will not be displayed to the user, but is visible to JavaScript.&lt;/p&gt;\n\n&lt;h3&gt;index.php&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dom-target&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;display: none;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;42&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Again, do some operation, get the output.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;htmlspecialchars&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* You have to escape because the result\n                                           will not be valid HTML otherwise. */&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; div = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dom-target&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myData = div.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt;;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;3. Echo the data directly to JavaScript&lt;/h1&gt;\n\n&lt;p&gt;This is probably the easiest to understand.&lt;/p&gt;\n\n&lt;h3&gt;Pros&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Very easily implemented&lt;/strong&gt; - It takes very little to implement this, and understand.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Does not dirty source&lt;/strong&gt; - Variables are outputted directly to JavaScript, so the DOM is not affected.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Cons&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Tightly couples PHP to your data logic&lt;/strong&gt; - Because PHP is used in presentation, you can&apos;t separate the two cleanly.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Implementation Example&lt;/h2&gt;\n\n&lt;p&gt;Implementation is relatively straightforward:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;42&quot;&lt;/span&gt;, JSON_HEX_TAG); &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t forget the extra semicolon!&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- snip --&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Good luck!&lt;/p&gt;\n    ","\n&lt;p&gt;I usually use data-* attributes in HTML.&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;service-container&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;data-service&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;?= htmlspecialchars($myService-&amp;gt;getValue()) ?&amp;gt;&quot;&lt;/span&gt;\n&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.service-container&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; container = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; service = container.&lt;span class=&quot;hljs-title function_&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;service&apos;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Var &quot;service&quot; now contains the value of $myService-&amp;gt;getValue();&lt;/span&gt;\n        });\n    });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This example uses jQuery, but it can be adapted for another library or vanilla JavaScript.&lt;/p&gt;\n&lt;p&gt;You can read more about the dataset property here: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m going to try a simpler answer:&lt;/p&gt;\n&lt;h2&gt;Explanation of the problem&lt;/h2&gt;\n&lt;p&gt;First, let&apos;s understand the flow of events when a page is served from our server:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;First PHP is run, it generates the HTML that is served to the client.&lt;/li&gt;\n&lt;li&gt;Then, the HTML is delivered to the client, after PHP is done with it, I&apos;d like to emphasize that once the code leaves the server - PHP is done with it and can no longer access it.&lt;/li&gt;\n&lt;li&gt;Then, the HTML with JavaScript reaches the client, which can execute JavaScript on that HTML.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So really, the core thing to remember here is that &lt;strong&gt;HTTP is stateless&lt;/strong&gt;. Once a request left the server, the server can not touch it. So, that leaves our options to:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Send more requests from the client &lt;em&gt;after&lt;/em&gt; the initial request is done.&lt;/li&gt;\n&lt;li&gt;Encode what the server had to say in the initial request.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;Solutions&lt;/h2&gt;\n&lt;p&gt;That&apos;s the core question you should be asking yourself is:&lt;/p&gt;\n&lt;h2&gt;Am I writing a website or an application?&lt;/h2&gt;\n&lt;p&gt;Websites are mainly page based, and the page load times needs to be as fast as possible (for example - Wikipedia). Web applications are more AJAX heavy and perform a lot of round trips to get the client fast information (for example - a stock dashboard).&lt;/p&gt;\n&lt;h3&gt;Website&lt;/h3&gt;\n&lt;p&gt;Sending more requests from the client after the initial request is done is &lt;strong&gt;slow&lt;/strong&gt; as it requires more HTTP requests which have significant overhead. Moreover, it requires &lt;em&gt;asynchronousity&lt;/em&gt; as making an AJAX request requires a handler for when it&apos;s complete.&lt;/p&gt;\n&lt;p&gt;I would &lt;em&gt;not&lt;/em&gt; recommend making another request &lt;em&gt;unless your site is an application&lt;/em&gt; for getting that information from the server.&lt;/p&gt;\n&lt;p&gt;You want fast response times which have a &lt;em&gt;huge&lt;/em&gt; impact on conversion and load times. Making Ajax requests is slow for the initial uptime in this case and unneeded.&lt;/p&gt;\n&lt;p&gt;You have two ways to tackle the issue&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Set a cookie&lt;/strong&gt; - cookies are headers sent in HTTP requests that both the server and client can read.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Encode the variable as JSON&lt;/strong&gt; - JSON looks very close to JavaScript objects and &lt;em&gt;most&lt;/em&gt; JSON objects are valid JavaScript variables.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.php.net/manual/en/function.setcookie.php&quot; rel=&quot;noreferrer&quot;&gt;Setting a cookie&lt;/a&gt; is really not very difficult, you just assign it a value:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setcookie&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyCookie&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Sets the cookie to the value, remember, do not&lt;/span&gt;\n                               &lt;span class=&quot;hljs-comment&quot;&gt;// Set it with HTTP only to true.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, you can &lt;a href=&quot;https://stackoverflow.com/questions/5639346/shortest-function-for-reading-a-cookie-in-javascript&quot;&gt;read it with JavaScript&lt;/a&gt; using &lt;code&gt;document.cookie&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;Here is a short hand rolled parser, but the answer I linked to right above this has better tested ones:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cookies = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cookie&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;;&quot;&lt;/span&gt;).\n    &lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; el.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;=&quot;&lt;/span&gt;); }).\n    &lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prev,cur&lt;/span&gt;){ prev[cur[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] = cur[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prev },{});\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(cookies[&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyCookie&quot;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// Value set with PHP.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Cookies are good for a little data. This is what tracking services often do.&lt;/p&gt;\n&lt;p&gt;Once we have more data, we can encode it with JSON inside a JavaScript variable instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myServerData = &amp;lt;?=&lt;span class=&quot;hljs-title function_&quot;&gt;json_encode&lt;/span&gt;($value)?&amp;gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t forget to sanitize&lt;/span&gt;\n                                                 &lt;span class=&quot;hljs-comment&quot;&gt;//server data&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Assuming &lt;code&gt;$value&lt;/code&gt; is &lt;code&gt;json_encode&lt;/code&gt;able on the PHP side (it usually is). This technique is what Stack Overflow does with its chat for example (only using .NET instead of PHP).&lt;/p&gt;\n&lt;h3&gt;Application&lt;/h3&gt;\n&lt;p&gt;If you&apos;re writing an application - suddenly the initial load time isn&apos;t always as important as the ongoing performance of the application, and it starts to pay off to load data and code separately.&lt;/p&gt;\n&lt;p&gt;My answer &lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-do-i-return-the-response-from-an-asynchronous-call/16825593#16825593&quot;&gt;here&lt;/a&gt; explains how to load data using AJAX in JavaScript:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// What do I do with the response?&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; httpRequest = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;;\nhttpRequest.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (httpRequest.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Request is done&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (httpRequest.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// successfully&lt;/span&gt;\n            &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(httpRequest.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// We&apos;re calling our method&lt;/span&gt;\n        }\n    }\n};\nhttpRequest.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/echo/json&quot;&lt;/span&gt;);\nhttpRequest.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or with jQuery:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/your/url&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// What do I do with the data?&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, the server just needs to contain a &lt;code&gt;/your/url&lt;/code&gt; route/file that contains code that grabs the data and does something with it, in your case:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt; = myService-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getValue&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Makes an API and database call&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;header&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Advise client of response type&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Write it to the output&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This way, our JavaScript file asks for the data and shows it rather than asking for code or for layout. This is cleaner and starts to pay off as the application gets higher. It&apos;s also better separation of concerns and it allows testing the client side code without any server side technology involved which is another plus.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Postscript:&lt;/strong&gt; You have to be &lt;em&gt;very&lt;/em&gt; aware of XSS attack vectors when you inject anything from PHP to JavaScript. It&apos;s &lt;em&gt;very&lt;/em&gt; hard to escape values properly and it&apos;s context sensitive. If you&apos;re unsure how to deal with XSS, or unaware of it - please read &lt;a href=&quot;https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)&quot; rel=&quot;noreferrer&quot;&gt;this OWASP article&lt;/a&gt;, &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;this one&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/71328/what-are-the-best-practices-for-avoiding-xss-attacks-in-a-php-site&quot;&gt;this question&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; jsvar = &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$PHPVar&lt;/span&gt;); &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;json_encode() requires:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;PHP 5.2.0 or more&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$PHPVar&lt;/code&gt; encoded as UTF-8, Unicode.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Simply use one of the following methods.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; js_variable  = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$php_variable&lt;/span&gt;;&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&apos;;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; js_variable = &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$php_variable&lt;/span&gt;); &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;; \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I quite like the way the WordPress works with its &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/wp_enqueue_script&quot; rel=&quot;nofollow noreferrer&quot;&gt;enqueue&lt;/a&gt; and &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/wp_localize_script&quot; rel=&quot;nofollow noreferrer&quot;&gt;localize&lt;/a&gt; functions, so following that model, I wrote a simple class for putting a scripts into page according to the script dependencies, and for making additional data available for the script.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mHeader&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$scripts&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $id        Unique script identifier\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $src      Script src attribute\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; array  $deps       An array of dependencies ( script identifiers ).\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; array  $data       An array, data that will be json_encoded and available to the script.\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;enqueue_script&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$src&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;scripts[&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;src&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$src&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;deps&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dependencies&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;deps&apos;&lt;/span&gt;]) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dependencies&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_intersect_key&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;scripts, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_flip&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;deps&apos;&lt;/span&gt;])));\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_unset&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;] = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;scripts[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;unset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;]);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;flattern&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;) &lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) ? &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_unset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;) : &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;flattern&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;);\n        }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;print_scripts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;scripts)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dependencies&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;scripts);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;)\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;flattern&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$deps&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$js&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$js&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script&amp;gt; var %s = %s; &amp;lt;/script&amp;gt;&quot;&lt;/span&gt; . PHP_EOL, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;current&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$script&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;])));\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script id=\\&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$key&lt;/span&gt;-js\\&quot; src=\\&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$script&lt;/span&gt;[src]\\&quot; type=\\&quot;text/javascript\\&quot;&amp;gt;&amp;lt;/script&amp;gt;&quot;&lt;/span&gt; . PHP_EOL;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The call to the &lt;code&gt;enqueue_script()&lt;/code&gt; function is for adding script, setting the source and dependencies on other scripts, and additional data needed for the script.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mHeader&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;enqueue_script&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jquery-ui&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jquery&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;enqueue_script&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jquery&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;enqueue_script&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;custom-script&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;//custom-script.min.js&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jquery-ui&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mydata&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)));\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$header&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_scripts&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And, &lt;code&gt;print_scripts()&lt;/code&gt; method of the above example will send this output:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jquery-js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jquery-ui-js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mydata = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;}; &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;custom-script-js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//custom-script.min.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Regardless the fact that the script &apos;jquery&apos; is enqueued after the &apos;jquery-ui&apos;, it is printed before because it is defined in &apos;jquery-ui&apos; that it depends on &apos;jquery&apos;.\nAdditional data for the &apos;custom-script&apos; are inside a new script block and are placed in front of it, it contains &lt;code&gt;mydata&lt;/code&gt; object that holds additional data, now available to &apos;custom-script&apos;.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script&amp;gt; var x = &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$phpVariable&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--&lt;/p&gt;\n\n&lt;p&gt;-After trying this for a while&lt;/p&gt;\n\n&lt;p&gt;Although it works, however it slows down the performance. As PHP is a server-side script while JavaScript is a user side.&lt;/p&gt;\n    ","\n&lt;p&gt;I have come out with an easy method to assign JavaScript variables using PHP.&lt;/p&gt;\n&lt;p&gt;It uses HTML5 data attributes to store PHP variables and then it&apos;s assigned to JavaScript on page load.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$variable_1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;QNimate&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$variable_2&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;QScutter&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;storage&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-variable-one&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$variable_1&lt;/span&gt;; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;data-variable-two&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$variable_2&lt;/span&gt;; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is the JavaScript code&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; variable_1 = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; variable_2 = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    variable_1 = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;storage&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data-variable-one&quot;&lt;/span&gt;);\n    variable_2 = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;storage&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data-variable-two&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Convert the data into &lt;em&gt;JSON&lt;/em&gt; &lt;/li&gt;\n&lt;li&gt;Call &lt;em&gt;AJAX&lt;/em&gt; to recieve &lt;em&gt;JSON&lt;/em&gt; file&lt;/li&gt;\n&lt;li&gt;Convert &lt;em&gt;JSON&lt;/em&gt; into &lt;em&gt;Javascript&lt;/em&gt; object&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-variable&quot;&gt;$servername&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable&quot;&gt;$dbname&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$servername&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$dbname&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;connect_error) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connection failed: &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;connect_error);\n   } \n\n   &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT id, name, image FROM phone&quot;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetch_assoc&lt;/span&gt;()){ \n      &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;[] = &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;;    \n   }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;close&lt;/span&gt;();\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;showUser&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fnc&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhttp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n\n   xhttp.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-comment&quot;&gt;// STEP 3    &lt;/span&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n      }\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;myPlugin.start($&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Tried this, didn&apos;t work&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It doesn&apos;t work because &lt;code&gt;$val&lt;/code&gt; is undefined as far as JavaScript is concerned, i.e. the PHP code did not output anything for &lt;code&gt;$val&lt;/code&gt;. Try viewing the source in your browser and here is what you&apos;ll see:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;myPlugin&lt;span class=&quot;hljs-selector-class&quot;&gt;.start&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// I tried this, and it didn&apos;t work&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; myPlugin.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;start&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;); &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// This didn&apos;t work either&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This doesn&apos;t work because PHP will try to treat &lt;code&gt;myPlugin&lt;/code&gt; as a constant and when that fails it will try to treat it as the string &lt;code&gt;&apos;myPlugin&apos;&lt;/code&gt; which it will try to concatenate with the output of the PHP function &lt;code&gt;start()&lt;/code&gt; and since that is undefined it will produce a fatal error.&lt;/p&gt;\n\n&lt;p&gt;And&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt; myPlugin.start(&amp;lt;?=$&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt;?&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// This works sometimes, but sometimes it fails&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this is most likely to work, since the PHP code is producing valid JavaScript with the expected arguments, if it fails, chances are it&apos;s because &lt;code&gt;myPlugin&lt;/code&gt; isn&apos;t ready yet. Check your order of execution.&lt;/p&gt;\n\n&lt;p&gt;Also you should note that the PHP code output is insecure and should be filtered with &lt;code&gt;json_encode()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Because I didn&apos;t notice the missing parenthesis in &lt;code&gt;myPlugin.start(&amp;lt;?=$val?&amp;gt;&lt;/code&gt; :-\\&lt;/p&gt;\n\n&lt;p&gt;As @Second Rikudo points out, for it to work correctly &lt;code&gt;$val&lt;/code&gt; would need to contain the closing parenthesis, for example: &lt;code&gt;$val=&quot;42);&quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Meaning that the PHP will now produce &lt;code&gt;myPlugin.start(42);&lt;/code&gt; and will work as expected when executed by the JavaScript code.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is is the trick:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Here is your &lt;strong&gt;&apos;PHP&apos;&lt;/strong&gt; to use that variable:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;PHP variable&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;script&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var name = &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/script&amp;gt;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Now you have a JavaScript variable called &lt;code&gt;&apos;name&apos;&lt;/code&gt;, and here is your JavaScript code to use that variable:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n     &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am everywhere &quot;&lt;/span&gt; + name);\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Let&apos;s say your variable is always integer. In that case this is easier:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?&lt;/span&gt;PHP\n    &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;script&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var number = &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;alert(number);&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/script&amp;gt;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; number = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(number);&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s say your variable is not an integer, but if you try above method you will get something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; number = abcd;&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(number);&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But in JavaScript this is a syntax error.&lt;/p&gt;\n\n&lt;p&gt;So in PHP we have a function call &lt;code&gt;json_encode&lt;/code&gt; that encode string to a JSON object.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?&lt;/span&gt;PHP\n    &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;abcd&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;script&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var number = &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;alert(number);&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/script&amp;gt;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since &lt;code&gt;abcd&lt;/code&gt; in JSON is &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;, it looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; number = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;;&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(number);&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use same method for arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?&lt;/span&gt;PHP\n    &lt;span class=&quot;hljs-variable&quot;&gt;$details&lt;/span&gt; = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;supun&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;weight&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;55&apos;&lt;/span&gt;\n    ];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;script&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var details = &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$details&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;alert(details);&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;console.log(details);&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/script&amp;gt;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And your JavaScript code looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; details = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;supun&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;weight&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;55&quot;&lt;/span&gt;};&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(details);&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(details);&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Console output&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/q4sHw.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/q4sHw.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ll assume that the data to transmit is a string.&lt;/p&gt;\n\n&lt;p&gt;As other commenters have stated, AJAX is one possible solution, but the cons outweigh the pros: it has a latency and it is harder to program (it needs the code to retrieve the value both server- and client-side), when a simpler escaping function should suffice.&lt;/p&gt;\n\n&lt;p&gt;So, we&apos;re back to escaping. &lt;code&gt;json_encode($string)&lt;/code&gt; works &lt;em&gt;if&lt;/em&gt; you encode the source string as UTF-8 first in case it is not already, because &lt;code&gt;json_encode&lt;/code&gt; requires UTF-8 data. If the string is in ISO-8859-1 then you can simply use &lt;code&gt;json_encode(utf8_encode($string))&lt;/code&gt;; otherwise you can always use &lt;code&gt;iconv&lt;/code&gt; to do the conversion first.&lt;/p&gt;\n\n&lt;p&gt;But there&apos;s a big gotcha. If you&apos;re using it in events, you need to run &lt;code&gt;htmlspecialchars()&lt;/code&gt; on the result in order to make it correct code. And then you have to either be careful to use double quotes to enclose the event, or always add &lt;code&gt;ENT_QUOTES&lt;/code&gt; to htmlspecialchars. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$myvar&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m in \\&quot;UTF-8\\&quot; encoding and I have &amp;lt;script&amp;gt;script tags&amp;lt;/script&amp;gt; &amp;amp; ampersand!&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Fails:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//echo &apos;&amp;lt;body onload=&quot;alert(&apos;, json_encode($myvar), &apos;);&quot;&amp;gt;&apos;;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Fails:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;&amp;lt;body onload=&apos;alert(&quot;, json_encode($myvar), &quot;);&apos;&amp;gt;&quot;;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Fails:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;&amp;lt;body onload=&apos;alert(&quot;, htmlspecialchars(json_encode($myvar)), &quot;);&apos;&amp;gt;&quot;;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Works:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;&amp;lt;body onload=&apos;alert(&quot;, htmlspecialchars(json_encode($myvar), ENT_QUOTES), &quot;);&apos;&amp;gt;&quot;;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Works:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;body onload=&quot;alert(&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;htmlspecialchars&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myvar&lt;/span&gt;)), &lt;span class=&quot;hljs-string&quot;&gt;&apos;);&quot;&amp;gt;&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/body&amp;gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, you can&apos;t use &lt;code&gt;htmlspecialchars&lt;/code&gt; on regular JavaScript code (code enclosed in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;...&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tags). That makes use of this function prone to mistakes, by forgetting to &lt;code&gt;htmlspecialchars&lt;/code&gt; the result when writing event code.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s possible to write a function that does not have that problem, and can be used both in events and in regular JavaScript code, as long as you enclose your events always in single quotes, or always in double quotes. Here is my proposal, requiring them to be in double quotes (which I prefer):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Optionally pass the encoding of the source string, if not UTF-8&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;escapeJSString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$encoding&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;/span&gt;)\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$encoding&lt;/span&gt; != &lt;span class=&quot;hljs-string&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;iconv&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$encoding&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$flags&lt;/span&gt; = JSON_HEX_TAG|JSON_HEX_AMP|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_UNESCAPED_SLASHES;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$flags&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&lt;span class=&quot;hljs-subst&quot;&gt;$string&lt;/span&gt;&apos;&quot;&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function requires PHP 5.4+. Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$myvar&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m in \\&quot;UTF-8\\&quot; encoding and I have &amp;lt;script&amp;gt;script tags&amp;lt;/script&amp;gt; &amp;amp; ampersand!&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note use of double quotes to enclose the event definition!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;body onload=&quot;alert(&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;escapeJSString&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myvar&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;);&quot;&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Example with regular code:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;script&amp;gt;alert(&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;escapeJSString&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myvar&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;);&amp;lt;/script&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/body&amp;gt;&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;After much research, I found the easiest method is to pass all kinds of variables easily.&lt;/p&gt;\n\n&lt;p&gt;In the server script, you have two variables, and you are trying to send them to the client scripts:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$php_var1&lt;/span&gt; =&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$php_var2&lt;/span&gt; =&lt;span class=&quot;hljs-string&quot;&gt;&quot;Helloow&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;script&amp;gt;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var js_variable1= &apos;&lt;/span&gt; . json_encode(&lt;span class=&quot;hljs-variable&quot;&gt;$php_var1&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var js_variable2= &apos;&lt;/span&gt; . json_encode(&lt;span class=&quot;hljs-variable&quot;&gt;$php_var2&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/script&amp;gt;&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In any of your JavaScript code called on the page, simply call those variables.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$fruits&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;yellow&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;strawberry&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;kiwi&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;);\n&amp;lt;script&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; color = &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$fruits&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;;\n&amp;lt;/script&amp;gt;\n&amp;lt;script src=&lt;span class=&quot;hljs-string&quot;&gt;&quot;../yourexternal.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;JS&lt;/strong&gt; &lt;em&gt;(yourexternal.js)&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;alert(&quot;The apple &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt; is&quot; + &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;apple&apos;&lt;/span&gt;]&lt;/span&gt; + &quot;, the strawberry &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt; is &quot; + &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;strawberry&apos;&lt;/span&gt;]&lt;/span&gt; + &quot; and the kiwi &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt; is &quot; + &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;kiwi&apos;&lt;/span&gt;]&lt;/span&gt; + &quot;.&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;OUTPUT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The apple color is yellow, the strawberry color is red and the kiwi\n  color is green.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;As per your code&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-variable&quot;&gt;$php&lt;/span&gt;\n     &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$myService&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getValue&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Makes an API and database call&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;span id=&quot;value&quot;&amp;gt;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/span&amp;gt;&apos;&lt;/span&gt;;\n$&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can get value using DOM, use innerHTML of span id, in this case you don&apos;t need to do any call to server, or Ajax or another thing.&lt;/p&gt;\n\n&lt;p&gt;Your page will print it using PHP, and you JavaScript will get value using DOM.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$myService&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getValue&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Makes an API and database call&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\n        &amp;lt;script&amp;gt;\n            myPlugin.start(&lt;span class=&quot;hljs-subst&quot;&gt;{$val}&lt;/span&gt;);\n        &amp;lt;/script&amp;gt; &quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;we also can do it in this way for some usecases:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    \n&lt;span class=&quot;hljs-variable&quot;&gt;$inPhpVar&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;i am php var&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$ScriptInline&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&amp;lt;JS\n&amp;lt;script&amp;gt;\nalert(&apos;&lt;span class=&quot;hljs-subst&quot;&gt;{$inPhpVar}&lt;/span&gt; that used in js code&apos;);\n&amp;lt;/script&amp;gt;\nJS&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ScriptInline&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you need to get some important data in your script, that is available in php, you can automatically echo a complete script before your script where the data is needed, with some globals with that information.&lt;/p&gt;\n&lt;p&gt;In your scirpt imports on your html:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script&amp;gt;\n                const importantData = &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$php_data&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;;\n        &amp;lt;/script&amp;gt;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;../assets/js/your_script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So then you can access that information through the const named &apos;importantData&apos; from your_script.js&lt;/p&gt;\n    "],"122":["\n&lt;h3&gt;The Automatic Minimum Size of Flex Items&lt;/h3&gt;\n\n&lt;p&gt;You&apos;re encountering a flexbox default setting.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;A flex item cannot be smaller than the size of its content along the main axis.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The defaults are...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;min-width: auto&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;min-height: auto&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;...for flex items in row-direction and column-direction, respectively.&lt;/p&gt;\n\n&lt;p&gt;You can override these defaults by setting flex items to:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;min-width: 0&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;min-height: 0&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;overflow: hidden&lt;/code&gt; (or any other value, except &lt;code&gt;visible&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Flexbox Specification&lt;/h3&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/#min-size-auto&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;4.5. Automatic Minimum Size of Flex\n  Items&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n  \n  &lt;p&gt;To provide a more reasonable default minimum size for flex items, this\n  specification introduces a new &lt;code&gt;auto&lt;/code&gt; value as the initial value of\n  the &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;min-height&lt;/code&gt; properties defined in CSS 2.1.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;With regard to the &lt;code&gt;auto&lt;/code&gt; value...&lt;/em&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;On a flex item whose &lt;code&gt;overflow&lt;/code&gt; is &lt;code&gt;visible&lt;/code&gt; in the main axis, when specified on the flex items main-axis min-size property, specifies an &lt;em&gt;automatic minimum size&lt;/em&gt;. It otherwise computes to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In other words:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The &lt;code&gt;min-width: auto&lt;/code&gt; and &lt;code&gt;min-height: auto&lt;/code&gt; defaults apply only when &lt;code&gt;overflow&lt;/code&gt; is &lt;code&gt;visible&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If the &lt;code&gt;overflow&lt;/code&gt; value is not &lt;code&gt;visible&lt;/code&gt;, the value of the min-size property is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Hence, &lt;code&gt;overflow: hidden&lt;/code&gt; can be a substitute for &lt;code&gt;min-width: 0&lt;/code&gt; and &lt;code&gt;min-height: 0&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;and...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The minimum sizing algorithm applies only on the main axis.&lt;/li&gt;\n&lt;li&gt;For example, a flex item in a row-direction container does not get &lt;code&gt;min-height: auto&lt;/code&gt; by default.&lt;/li&gt;\n&lt;li&gt;For a more detailed explanation see this post:\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/40407619/3597276&quot;&gt;min-width rendering differently in flex-direction: row and flex-direction: column&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;You&apos;ve applied min-width: 0 and the item still doesn&apos;t shrink?&lt;/h3&gt;\n\n&lt;p&gt;&lt;em&gt;Nested Flex Containers&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re dealing with flex items on multiple levels of the HTML structure, it may be necessary to override the default &lt;code&gt;min-width: auto&lt;/code&gt; / &lt;code&gt;min-height: auto&lt;/code&gt; on items at higher levels.&lt;/p&gt;\n\n&lt;p&gt;Basically, a higher level flex item with &lt;code&gt;min-width: auto&lt;/code&gt; can prevent shrinking on items nested below with &lt;code&gt;min-width: 0&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/47456839/3597276&quot;&gt;Flex item is not shrinking smaller than its content&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/44826555/3597276&quot;&gt;Fitting child into parent&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/49897730/3597276&quot;&gt;white-space css property is creating issues with flex&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Browser Rendering Notes&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Chrome vs. Firefox / Edge&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Since at least 2017, it appears that Chrome is either (1) reverting back to the &lt;code&gt;min-width: 0&lt;/code&gt; / &lt;code&gt;min-height: 0&lt;/code&gt; defaults, or (2) automatically applying the &lt;code&gt;0&lt;/code&gt; defaults in certain situations based on a mystery algorithm. (This could be what they call an &lt;a href=&quot;https://github.com/WICG/interventions&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;intervention&lt;/strong&gt;&lt;/a&gt;.) As a result, many people are seeing their layout (especially desired scrollbars) work as expected in Chrome, but not in Firefox / Edge. This issue is covered in more detail here: &lt;a href=&quot;https://stackoverflow.com/q/49575838/3597276&quot;&gt;flex-shrink discrepancy between Firefox and Chrome&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;IE11&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;As noted in the spec, the &lt;code&gt;auto&lt;/code&gt; value for the &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;min-height&lt;/code&gt; properties is &quot;new&quot;. This means that some browsers may still render a &lt;code&gt;0&lt;/code&gt; value by default, because they implemented flex layout before the value was updated and because &lt;code&gt;0&lt;/code&gt; is the initial value for &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;min-height&lt;/code&gt; in &lt;a href=&quot;http://www.w3.org/TR/CSS2/visudet.html#min-max-widths&quot; rel=&quot;noreferrer&quot;&gt;CSS 2.1&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/40052987/flexbox-flex-basis-0px-in-chrome&quot;&gt;One such browser is IE11.&lt;/a&gt; Other browsers have updated to the newer &lt;code&gt;auto&lt;/code&gt; value as defined in the &lt;a href=&quot;http://www.w3.org/TR/css-flexbox-1/#min-size-auto&quot; rel=&quot;noreferrer&quot;&gt;flexbox spec&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Revised Demo&lt;/h3&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.col&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;word-break&lt;/span&gt;: break-word\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.col1&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: orange;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;/* NEW */&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.col2&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.col3&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: skyblue\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.col4&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col col1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col col2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col col3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col col4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/78h8wv4o/4/&quot; rel=&quot;noreferrer&quot;&gt;jsFiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m finding this has bitten me repeatedly over the years for both flex and grid, so I&apos;m going to suggest the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;* { min-width: 0; min-height: 0; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and then just use &lt;code&gt;min-width: auto&lt;/code&gt; or &lt;code&gt;min-height: auto&lt;/code&gt; if you need that behaviour.&lt;/p&gt;\n&lt;p&gt;In fact, throw in box-sizing as well to make all layout more sane:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;* { box-sizing: border-box; min-width: 0; min-height: 0; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Does anyone know if there are any odd consequences? I&apos;ve not encountered anything in several years of using a mix of the above. In fact, I can&apos;t think of any cases where I&apos;d want to layout from content outwards to the flex/grid, rather than flex/grid inwards to the content --- and surely if they exist, they&apos;re rare. So this feels like a bad default. But maybe I&apos;m missing something?&lt;/p&gt;\n    ","\n&lt;p&gt;For this code below, adding &lt;code&gt;width: 100%&lt;/code&gt; solved my problem.&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.post-cover&lt;/span&gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.inner&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;flex-wrap&lt;/span&gt;: wrap;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-content&lt;/span&gt;: flex-start;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: flex-start;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;word-break&lt;/span&gt;: break-all;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.post-cover&lt;/span&gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.article-page&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0.875em&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: hidden;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-overflow&lt;/span&gt;: ellipsis;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Add this */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The pure answer to your question is that by default, browsers tend to display as much information as possible to the reader (and not to hide anything).&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;That happens by default, and even includes showing default black color fonts on a white background (for maximum page contrast and readability), adding a scroll bar where content is larger than the viewport height (or width) or still showing content from a markup (or the background color) even if this was mistakenly placed after &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; or even &lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt; tags in the html file.&lt;/p&gt;\n&lt;p&gt;In context of CSS, this applies as well, but you also are allowed to play with many customizations on top of that.&lt;/p&gt;\n&lt;p&gt;Even in a screen if using a huge font (like &lt;code&gt;font-size: 50em;&lt;/code&gt;) this initially acts as an overflowing element (and placing the font inside a flexible child container by using &lt;code&gt;display: flex&lt;/code&gt; doesn&apos;t change this default behaviour unless you use &lt;code&gt;overflow: hidden&lt;/code&gt; or resize the element in some way.&lt;/p&gt;\n&lt;p&gt;An elegant solution is to use a dynamic resizing of the letters, for example&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;font-size: calc(0.5em + 2vw)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;which works great even in a responsive scenario.&lt;/p&gt;\n&lt;p&gt;As a previous answer mentioned, &lt;em&gt;A flex item cannot be smaller than the size of its content along the main axis&lt;/em&gt; (for the same reason, that is not only specific to the flexbox model implemented in CSS but because of the inner browser way of working). Even a long word is displayed with a scrollbar if it&apos;s longer than display width as if being a block type element with a fixed size instead.&lt;/p&gt;\n&lt;p&gt;This is mentioned in old html 4.01 specifications as&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&quot;By convention, visual HTML user agents wrap text lines to fit within\nthe available margins. Wrapping algorithms depend on the script being\nformatted.&lt;/p&gt;\n&lt;p&gt;In Western scripts, for example, text should only be wrapped at white\nspace. &quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;as seen &lt;a href=&quot;https://www.w3.org/TR/html401/struct/text.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; in paragraph 9.5.3. This means that, since then, the text had to be continuously displayed by default (unless we decide to split it but not at single character level: a single non-white character shown at 120em size will trigger scrollbars displaying on the browser).&lt;/p&gt;\n&lt;p&gt;Words are also clearly defined in paragraph 9.1 in the same source:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;we use the term &quot;word&quot; here to mean &quot;sequences of non-white space\ncharacters&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The purpose of displaying the original format of any word is to not destroy, hide or distort the original information, the meaning or intent of the code author. As such, we also have &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; for keeping in same line two words that are connected - when breaking them might be disruptive (such as New York, 10 PM, 10 km/h, § 10, etc)&lt;/p&gt;\n    ","\n&lt;p&gt;I tried everything, even putting the below code in the index.css.&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;* {\n  min-width: 0;\n  min-height: 0;\n  box-sizing: border-box;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But nothing worked.&lt;/p&gt;\n&lt;p&gt;finally I made the div I wanted to shrink past it&apos;s content to have &lt;code&gt;position: absolute;&lt;/code&gt;. Then it started shrinking.\nIt&apos;s parent div would need a defined height and width. This might not be the best solution for every scenario but if this works for you, good!&lt;/p&gt;\n    "],"123":["\n&lt;h1&gt;The Problem&lt;/h1&gt;\n&lt;p&gt;In MySQL, certain words like &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; etc. are reserved words. Since they have a special meaning, MySQL treats it as a syntax error whenever you use them as a table name, column name, or other kind of identifier - unless you surround the identifier with backticks.&lt;/p&gt;\n&lt;p&gt;As noted in the official docs, in section &lt;a href=&quot;http://dev.mysql.com/doc/en/identifiers.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;10.2 Schema Object Names&lt;/em&gt;&lt;/a&gt; (emphasis added):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Certain objects within MySQL, including database, table, index, column, alias, view, stored procedure, partition, tablespace, and other object names are known as &lt;em&gt;&lt;strong&gt;identifiers&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n&lt;p&gt;If an identifier contains special characters or is a &lt;em&gt;&lt;strong&gt;reserved word&lt;/strong&gt;&lt;/em&gt;, you &lt;em&gt;must&lt;/em&gt; quote it whenever you refer to it.&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n&lt;p&gt;The identifier quote character is the &lt;em&gt;&lt;strong&gt;backtick&lt;/strong&gt;&lt;/em&gt; (&quot;&lt;code&gt;`&lt;/code&gt;&quot;):&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;A complete list of keywords and reserved words can be found in section &lt;a href=&quot;http://dev.mysql.com/doc/en/keywords.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;10.3 Keywords and Reserved Words&lt;/em&gt;&lt;/a&gt;. In that page, words followed by &quot;(R)&quot; are reserved words. Some reserved words are listed below, including many that tend to cause this issue.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;ADD&lt;/li&gt;\n&lt;li&gt;AND&lt;/li&gt;\n&lt;li&gt;BEFORE&lt;/li&gt;\n&lt;li&gt;BY&lt;/li&gt;\n&lt;li&gt;CALL&lt;/li&gt;\n&lt;li&gt;CASE&lt;/li&gt;\n&lt;li&gt;CONDITION&lt;/li&gt;\n&lt;li&gt;DELETE&lt;/li&gt;\n&lt;li&gt;DESC&lt;/li&gt;\n&lt;li&gt;DESCRIBE&lt;/li&gt;\n&lt;li&gt;FROM&lt;/li&gt;\n&lt;li&gt;GROUP&lt;/li&gt;\n&lt;li&gt;IN&lt;/li&gt;\n&lt;li&gt;INDEX&lt;/li&gt;\n&lt;li&gt;INSERT&lt;/li&gt;\n&lt;li&gt;INTERVAL&lt;/li&gt;\n&lt;li&gt;IS&lt;/li&gt;\n&lt;li&gt;KEY&lt;/li&gt;\n&lt;li&gt;LIKE&lt;/li&gt;\n&lt;li&gt;LIMIT&lt;/li&gt;\n&lt;li&gt;LONG&lt;/li&gt;\n&lt;li&gt;MATCH&lt;/li&gt;\n&lt;li&gt;NOT&lt;/li&gt;\n&lt;li&gt;OPTION&lt;/li&gt;\n&lt;li&gt;OR&lt;/li&gt;\n&lt;li&gt;ORDER&lt;/li&gt;\n&lt;li&gt;PARTITION&lt;/li&gt;\n&lt;li&gt;RANK&lt;/li&gt;\n&lt;li&gt;REFERENCES&lt;/li&gt;\n&lt;li&gt;SELECT&lt;/li&gt;\n&lt;li&gt;TABLE&lt;/li&gt;\n&lt;li&gt;TO&lt;/li&gt;\n&lt;li&gt;UPDATE&lt;/li&gt;\n&lt;li&gt;WHERE&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;The Solution&lt;/h1&gt;\n&lt;p&gt;You have two options.&lt;/p&gt;\n&lt;h2&gt;1. Don&apos;t use reserved words as identifiers&lt;/h2&gt;\n&lt;p&gt;The simplest solution is simply to avoid using reserved words as identifiers. You can probably find another reasonable name for your column that is not a reserved word.&lt;/p&gt;\n&lt;p&gt;Doing this has a couple of advantages:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It eliminates the possibility that you or another developer using your database will accidentally write a syntax error due to forgetting - or not knowing - that a particular identifier is a reserved word. There are many reserved words in MySQL and most developers are unlikely to know all of them. By not using these words in the first place, you avoid leaving traps for yourself or future developers.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The means of quoting identifiers differs between SQL dialects. While MySQL uses backticks for quoting identifiers by default, ANSI-compliant SQL (and indeed MySQL in ANSI SQL mode, as noted &lt;a href=&quot;https://stackoverflow.com/a/2889884/1709587&quot;&gt;here&lt;/a&gt;) uses double quotes for quoting identifiers. As such, queries that quote identifiers with backticks are less easily portable to other SQL dialects.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Purely for the sake of reducing the risk of future mistakes, this is usually a wiser course of action than backtick-quoting the identifier.&lt;/p&gt;\n&lt;h2&gt;2. Use backticks&lt;/h2&gt;\n&lt;p&gt;If renaming the table or column isn&apos;t possible, wrap the offending identifier in backticks (&lt;code&gt;`&lt;/code&gt;) as described in the earlier quote from &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/identifiers.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;10.2 Schema Object Names&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;An example to demonstrate the usage (taken from &lt;a href=&quot;http://dev.mysql.com/doc/en/keywords.html&quot; rel=&quot;noreferrer&quot;&gt;10.3 Keywords and Reserved Words&lt;/a&gt;):&lt;/p&gt;\n&lt;blockquote&gt;&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;interval&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;);\nERROR &lt;span class=&quot;hljs-number&quot;&gt;1064&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;42000&lt;/span&gt;): You have an error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; your &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt; syntax.\nnear &lt;span class=&quot;hljs-string&quot;&gt;&apos;interval (begin INT, end INT)&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;p class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; `&lt;span class=&quot;hljs-type&quot;&gt;interval&lt;/span&gt;` (&lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;INT&lt;/span&gt;);\nQuery OK, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;rows&lt;/span&gt; affected (&lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; sec)&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Similarly, the query from the question can be fixed by wrapping the keyword &lt;code&gt;key&lt;/code&gt; in backticks, as shown below:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; user_details (username, location, `key`)\n&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Tim&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Florida&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;)&quot;;               ^   ^\n&lt;/code&gt;&lt;/pre&gt;\n    "],"124":["\n&lt;p&gt;Promises have state, they start as pending and can settle to:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;fulfilled&lt;/strong&gt; meaning that the computation completed successfully.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;rejected&lt;/strong&gt; meaning that the computation failed.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Promise returning functions &lt;a href=&quot;https://stackoverflow.com/q/21887856/1048572&quot;&gt;&lt;em&gt;should never throw&lt;/em&gt;&lt;/a&gt;, they should return rejections instead. Throwing from a promise returning function will force you to use both a &lt;code&gt;} catch {&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; a &lt;code&gt;.catch&lt;/code&gt;. People using promisified APIs do not expect promises to throw. If you&apos;re not sure how async APIs work in JS - please &lt;a href=&quot;https://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-asynchronous-call/16825593#16825593&quot;&gt;see this answer&lt;/a&gt; first.&lt;/p&gt;\n\n&lt;h3&gt;1. DOM load or other one time event:&lt;/h3&gt;\n\n&lt;p&gt;So, creating promises generally means specifying when they settle - that means when they move to the fulfilled or rejected phase to indicate the data is available (and can be accessed with &lt;code&gt;.then&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;With modern promise implementations that support the &lt;code&gt;Promise&lt;/code&gt; constructor like native ES6 promises:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = resolve;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would then use the resulting promise like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do things after onload&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With libraries that support deferred (Let&apos;s use $q for this example here, but we&apos;ll also use jQuery later):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;load&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = $q.&lt;span class=&quot;hljs-title function_&quot;&gt;defer&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(); };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or with a jQuery like API, hooking on an event happening once:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;();\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#myObject&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;once&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;2. Plain callback:&lt;/h3&gt;\n\n&lt;p&gt;These APIs are rather common since well callbacks are common in JS. Let&apos;s look at the common case of having &lt;code&gt;onSuccess&lt;/code&gt; and &lt;code&gt;onFail&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId, onLoad, onFail&lt;/span&gt;) { \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With modern promise implementations that support the &lt;code&gt;Promise&lt;/code&gt; constructor like native ES6 promises:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserDataAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(userId, resolve, reject);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With libraries that support deferred (Let&apos;s use jQuery for this example here, but we&apos;ve also used $q above):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserDataAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(userId, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;){ d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(res); }, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;){ d.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err); });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;jQuery also offers a &lt;code&gt;$.Deferred(fn)&lt;/code&gt; form, which has the advantage of allowing us to write an expression that emulates very closely the &lt;code&gt;new Promise(fn)&lt;/code&gt; form, as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getUserDataAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;userId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;dfrd&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;getUserData&lt;/span&gt;(userId, dfrd.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt;, dfrd.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt;);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;promise&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: Here we exploit the fact that a jQuery deferred&apos;s &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; methods are &quot;detachable&quot;; ie. they are bound to the &lt;em&gt;instance&lt;/em&gt; of a jQuery.Deferred(). Not all libs offer this feature.&lt;/p&gt;\n\n&lt;h3&gt;3. Node style callback (&quot;nodeback&quot;):&lt;/h3&gt;\n\n&lt;p&gt;Node style callbacks (nodebacks) have a particular format where the callbacks is always the last argument and its first parameter is an error. Let&apos;s first promisify one manually:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataParam&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) { \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getStuffAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(param, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(data);\n        });\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With deferreds you can do the following (let&apos;s use Q for this example, although Q now supports the new syntax &lt;a href=&quot;https://stackoverflow.com/q/28687566/1048572&quot;&gt;which you should prefer&lt;/a&gt;): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getStuffAsync&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;param&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = Q.&lt;span class=&quot;hljs-title function_&quot;&gt;defer&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getStuff&lt;/span&gt;(param, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) d.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(data);\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;;   \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In general, you should not promisify things manually too much, most promise libraries that were designed with Node in mind as well as native promises in Node 8+ have a built in method for promisifying nodebacks. For example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getStuffAsync = &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(getStuff); &lt;span class=&quot;hljs-comment&quot;&gt;// Bluebird&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getStuffAsync = Q.&lt;span class=&quot;hljs-title function_&quot;&gt;denodeify&lt;/span&gt;(getStuff); &lt;span class=&quot;hljs-comment&quot;&gt;// Q&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getStuffAsync = util.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(getStuff); &lt;span class=&quot;hljs-comment&quot;&gt;// Native promises, node only&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;4. A whole library with node style callbacks:&lt;/h3&gt;\n\n&lt;p&gt;There is no golden rule here, you promisify them one by one. However, some promise implementations allow you to do this in bulk, for example in Bluebird, converting a nodeback API to a promise API is as simple as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;promisifyAll&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or with &lt;em&gt;native promises&lt;/em&gt; in &lt;strong&gt;Node&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { promisify } = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promiseAPI = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;API&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[key, v]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({key, &lt;span class=&quot;hljs-attr&quot;&gt;fn&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(v)}))\n                         .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;(o, {[p.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;]: p.&lt;span class=&quot;hljs-property&quot;&gt;fn&lt;/span&gt;}), {});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Of course, when you are in a &lt;code&gt;.then&lt;/code&gt; handler you do not need to promisify things. Returning a promise from a &lt;code&gt;.then&lt;/code&gt; handler will resolve or reject with that promise&apos;s value. Throwing from a &lt;code&gt;.then&lt;/code&gt; handler is also good practice and will reject the promise - this is the famous promise throw safety. &lt;/li&gt;\n&lt;li&gt;In an actual &lt;code&gt;onload&lt;/code&gt; case, you should use &lt;code&gt;addEventListener&lt;/code&gt; rather than &lt;code&gt;onX&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Today, I can use &lt;code&gt;Promise&lt;/code&gt; in &lt;code&gt;Node.js&lt;/code&gt; as a plain Javascript method.&lt;/p&gt;\n\n&lt;p&gt;A simple and basic example to &lt;code&gt;Promise&lt;/code&gt; (with &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot; rel=&quot;noreferrer&quot;&gt;KISS&lt;/a&gt;&lt;/strong&gt; way):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Plain&lt;/strong&gt; Javascript Async API code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;divisionAPI&lt;/span&gt; (number, divider, successCallback, errorCallback) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (divider == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;errorCallback&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;) )\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;successCallback&lt;/span&gt;( number / divider )\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/strong&gt; Javascript Async API code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;divisionAPI&lt;/span&gt; (number, divider) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (divider == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rejected&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;) )\n        }\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( number / divider )\n\n     })\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(I recommend visiting &lt;a href=&quot;http://exploringjs.com/es6/ch_promises.html&quot; rel=&quot;noreferrer&quot;&gt;this beautiful source&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;Also &lt;code&gt;Promise&lt;/code&gt; can be used with together &lt;code&gt;async\\await&lt;/code&gt; in &lt;code&gt;ES7&lt;/code&gt; to make the program flow wait for a &lt;code&gt;fullfiled&lt;/code&gt; result like the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt; () {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// wait 3000 milliseconds before calling fulfilled() method&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt; ( \n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( name )\n            }, \n            &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;\n        )\n\n    })\n\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; () {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// awaits for a fulfilled result!&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(name); &lt;span class=&quot;hljs-comment&quot;&gt;// the console writes &quot;John Doe&quot; after 3000 milliseconds&lt;/span&gt;\n\n}\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// calling the foo() method to run the code&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another usage with the same code by using &lt;code&gt;.then()&lt;/code&gt; method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt; () {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// wait 3000 milliseconds before calling fulfilled() method&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt; ( \n            &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( name )\n            }, \n            &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;\n        )\n\n    })\n\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the console writes &quot;John Doe&quot; after 3000 milliseconds&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;){ &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(name) })\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; can also be used on any platform that is based on Node.js like &lt;code&gt;react-native&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: An &lt;strong&gt;hybrid&lt;/strong&gt; method &lt;br&gt;\n(The callback method is assumed to have two parameters as error and result)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;divisionAPI&lt;/span&gt; (number, divider, callback) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;fulfilled, rejected&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (divider == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Division by zero&quot;&lt;/span&gt;)\n            callback &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;( error )\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rejected&lt;/span&gt;( error )\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = number / divider\n        callback &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;( &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, result )\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fulfilled&lt;/span&gt;( result )\n\n     })\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above method can respond result for old fashion callback and Promise usages.&lt;/p&gt;\n\n&lt;p&gt;Hope this helps.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Before converting a function as promise In Node.JS&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//http wrapped module&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url, callback&lt;/span&gt;) {\n    request.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, response&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(err);\n      }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, response);             \n      }      \n    })\n}\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(err, response)\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;After Converting It&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//returning promise&lt;/span&gt;\n    request.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, response&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err); &lt;span class=&quot;hljs-comment&quot;&gt;//promise reject&lt;/span&gt;\n      }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(response); &lt;span class=&quot;hljs-comment&quot;&gt;//promise resolve&lt;/span&gt;\n      }\n    })\n  })\n}\n\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/1&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response) &lt;span class=&quot;hljs-comment&quot;&gt;//resolve callback(success)&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error) &lt;span class=&quot;hljs-comment&quot;&gt;//reject callback(failure)&lt;/span&gt;\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Incase you need to handle multiple request&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; allRequests = [];\nallRequests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/1&apos;&lt;/span&gt;)) \nallRequests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/2&apos;&lt;/span&gt;))\nallRequests.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;requestWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:8080/promise_request/5&apos;&lt;/span&gt;))    \n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;(allRequests).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(results);&lt;span class=&quot;hljs-comment&quot;&gt;//result will be array which contains each promise response&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(err)\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I don&apos;t think the &lt;code&gt;window.onload&lt;/code&gt; suggestion by @Benjamin will work all the time, as it doesn&apos;t detect whether it is called after the load. I have been bitten by that many times. Here is a version which should always work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseDOMready&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;complete&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;();\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;, resolve);\n    });\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;promiseDOMready&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(initOnLoad);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Node.js 8.0.0 includes a new &lt;code&gt;util.promisify()&lt;/code&gt; API that allows standard Node.js callback style APIs to be wrapped in a function that returns a Promise. An example use of &lt;code&gt;util.promisify()&lt;/code&gt; is shown below.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; util = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFile = util.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/some/file&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://nodejs.org/en/blog/release/v8.0.0/#improved-support-for-promises&quot; rel=&quot;nofollow noreferrer&quot;&gt;Improved support for Promises&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;A simple generic function I normally use.&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;fn, ...args&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...args, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n      }\n      &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(data);\n    });\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;How to use it&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;The function &lt;code&gt;promisify&lt;/code&gt; accepts a function with a callback:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;`The result is &lt;span class=&quot;hljs-subst&quot;&gt;${result}&lt;/span&gt;`&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a, b, cb&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = a + b;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(result); &lt;span class=&quot;hljs-comment&quot;&gt;// passing args to the callback function&lt;/span&gt;\n   }\n\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// using the util&lt;/span&gt;\n  promise = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(sum, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, cb);\n  promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x)) &lt;span class=&quot;hljs-comment&quot;&gt;// 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You are probably not looking for this answer, but this will help understand the inner workings of the available utils&lt;/p&gt;\n    ","\n&lt;p&gt;In release candidate for Node.js 8.0.0, there&apos;s a new utility, &lt;code&gt;util.promisify&lt;/code&gt; (I&apos;ve written about &lt;a href=&quot;https://brunoscopelliti.com/new-util-promisify-in-nodejs/&quot; rel=&quot;noreferrer&quot;&gt;util.promisify&lt;/a&gt;), that encapsulates the capacity of promisifying whatever function.&lt;/p&gt;\n\n&lt;p&gt;It is not much different from the approaches suggested in the other answers, but has the advantage of being a core method, and not requiring additional dependencies. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; util = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;util&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readFile = util.&lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(fs.&lt;span class=&quot;hljs-property&quot;&gt;readFile&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you&apos;ve a &lt;code&gt;readFile&lt;/code&gt; method that returns a native &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./notes.txt&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;txt&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(txt))\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(...);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use JavaScript native promises with Node JS.&lt;/p&gt;\n\n&lt;p&gt;My Cloud 9 code link: &lt;a href=&quot;https://ide.c9.io/adx2803/native-promises-in-node&quot; rel=&quot;noreferrer&quot;&gt;https://ide.c9.io/adx2803/native-promises-in-node&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n* Created by dixit-lab on 20/6/16.\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;express&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;request&apos;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;//Simplified HTTP request client.&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;hljs-title function_&quot;&gt;express&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        request.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(url, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;error, response, body&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!error &amp;amp;&amp;amp; response.&lt;span class=&quot;hljs-property&quot;&gt;statusCode&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(body);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error);\n            }\n        })\n    });\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//get all the albums of a user who have posted post 100&lt;/span&gt;\napp.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/listAlbums&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;req, res&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//get the post with post id 100&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://jsonplaceholder.typicode.com/posts/100&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(result);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://jsonplaceholder.typicode.com/users/&apos;&lt;/span&gt; + obj.&lt;span class=&quot;hljs-property&quot;&gt;userId&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/albums&apos;&lt;/span&gt;)\n    })\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e);\n    })\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n        res.&lt;span class=&quot;hljs-title function_&quot;&gt;end&lt;/span&gt;(result);\n    })\n})\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; server = app.&lt;span class=&quot;hljs-title function_&quot;&gt;listen&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8081&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; host = server.&lt;span class=&quot;hljs-title function_&quot;&gt;address&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;address&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; port = server.&lt;span class=&quot;hljs-title function_&quot;&gt;address&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;port&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Example app listening at http://%s:%s&quot;&lt;/span&gt;, host, port)\n})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//run webservice on browser : http://localhost:8081/listAlbums&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With plain old vanilla javaScript, here&apos;s a solution to promisify an api callback.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;url, callback&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;get&apos;&lt;/span&gt;, url);\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;readystatechange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xhr.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xhr.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;successful ... should call callback ... &apos;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(xhr.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;));\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;error ... callback with error data ... &apos;&lt;/span&gt;);\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(xhr, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                }\n            }\n        });\n        xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@function&lt;/span&gt; promisify: convert api based callbacks to promises\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@description&lt;/span&gt; takes in a factory function and promisifies it\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@params&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} input function to promisify\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@params&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;} an array of inputs to the function to be promisified\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} promisified function\n     * */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n                fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, args.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n                }));\n            });\n        }\n    }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; get_promisified = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(get);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; promise = &lt;span class=&quot;hljs-title function_&quot;&gt;get_promisified&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;some_url&apos;&lt;/span&gt;);\npromise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// corresponds to the resolve function&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;successful operation: &apos;&lt;/span&gt;, data);\n}, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(error);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Q library by kriskowal includes callback-to-promise functions.\nA method like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dosomething&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;params, cb&lt;/span&gt;) {\n  ...blah blah...\n  &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(error, results);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can be converted with Q.ninvoke&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;Q.&lt;span class=&quot;hljs-title function_&quot;&gt;ninvoke&lt;/span&gt;(obj,&lt;span class=&quot;hljs-string&quot;&gt;&quot;dosomething&quot;&lt;/span&gt;,params).\n&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;results&lt;/span&gt;) {\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you have a few functions that take a callback and you want them to return a promise instead you can use this function to do the conversion.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callbackToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;func&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// change this to use what ever promise lib you are using&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// In this case i&apos;m using angular $q that I exposed on a util module&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; defered = util.&lt;span class=&quot;hljs-property&quot;&gt;$q&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defer&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;) =&amp;gt; {\n            defered.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(val);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n        args.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(cb);    \n        func.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, args);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; defered.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Under node v7.6+ which has built in promises and async:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// promisify.js&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt; = fn =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...args, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n        })\n    );\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;exports&lt;/span&gt; = promisify;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How to use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; readdir = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;readdir&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; promisify = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;./promisify&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; readdirP = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(readdir);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myAsyncFn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; entries = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;readdirP&lt;/span&gt;(path);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; entries;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Node.js 8 you can &lt;strong&gt;promisify&lt;/strong&gt; object methods &lt;em&gt;on the fly&lt;/em&gt; using this npm module:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/doasync&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.npmjs.com/package/doasync&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It uses &lt;strong&gt;util.promisify&lt;/strong&gt; and &lt;strong&gt;Proxies&lt;/strong&gt; so that your objects stay unchanged. &lt;strong&gt;Memoization&lt;/strong&gt; is also done with the use of WeakMaps). Here are some examples:&lt;/p&gt;\n\n&lt;p&gt;With objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; doAsync = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;doasync&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;doAsync&lt;/span&gt;(fs).&lt;span class=&quot;hljs-title function_&quot;&gt;readFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;package.json&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;utf8&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;dir&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(result), {&lt;span class=&quot;hljs-attr&quot;&gt;colors&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n  });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;doAsync&lt;/span&gt;(request)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://www.google.com&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;{body}&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(body);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n  });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can even use native &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; to bind some context:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;doAsync&lt;/span&gt;(myFunc).&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(context, params)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/*...*/&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;strong&gt;native Promise&lt;/strong&gt; in ES6, for exemple dealing with setTimeout:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;enqueue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// returns the Promise&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt; {\n                queue.&lt;span class=&quot;hljs-property&quot;&gt;source&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(data);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(queue); &lt;span class=&quot;hljs-comment&quot;&gt;//call native resolve when finish&lt;/span&gt;\n            }\n            , &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// resolve() will be called in 10 ms&lt;/span&gt;\n    });\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this exemple, the Promise has no reason to fail, so &lt;code&gt;reject()&lt;/code&gt; is never called.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;callback style&lt;/strong&gt; function always like this(almost all function in node.js is this style):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//fs.readdir(path[, options], callback)&lt;/span&gt;\nfs.&lt;span class=&quot;hljs-title function_&quot;&gt;readdir&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mypath&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err,files&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(files))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This style has same feature: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;the callback function is passed by last argument. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;the callback function always accept the error object as it&apos;s first argument. &lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;So, you could write a function for convert a function with this style like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; R =&lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ramda&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * A convenient function for handle error in callback function.\n * Accept two function res(resolve) and rej(reject) ,\n * return a wrap function that accept a list arguments,\n * the first argument as error, if error is null,\n * the res function will call,else the rej function.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} res the function which will call when no error throw\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} rej the function which will call when  error occur\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} return a function that accept a list arguments,\n * the first argument as error, if error is null, the res function\n * will call,else the rej function\n **/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkErr&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;res, rej&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, ...data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; R.&lt;span class=&quot;hljs-title function_&quot;&gt;ifElse&lt;/span&gt;(\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;propEq&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;err&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;),\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(\n        res,\n        R.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;)\n    ),\n    R.&lt;span class=&quot;hljs-title function_&quot;&gt;compose&lt;/span&gt;(\n        rej,\n        R.&lt;span class=&quot;hljs-title function_&quot;&gt;prop&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;err&apos;&lt;/span&gt;)\n    )\n)({err, data})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * wrap the callback style function to Promise style function,\n * the callback style function must restrict by convention:\n * 1. the function must put the callback function where the last of arguments,\n * such as (arg1,arg2,arg3,arg...,callback)\n * 2. the callback function must call as callback(err,arg1arg2,arg...)\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} fun the callback style function to transform\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;function&lt;/span&gt;} return the new function that will return a Promise,\n * while the origin function throw a error, the Promise will be Promise.reject(error),\n * while the origin function work fine, the Promise will be Promise.resolve(args: array),\n * the args is which callback function accept\n * */&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;fun&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(\n    &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res, rej&lt;/span&gt;) =&amp;gt;&lt;/span&gt; R.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(\n        fun,\n        R.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title function_&quot;&gt;checkErr&lt;/span&gt;(res, rej),\n            args\n        )\n    )\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more concise, above example used ramda.js. Ramda.js is a excellent library for functional programming. In above code, we used it&apos;s &lt;strong&gt;apply&lt;/strong&gt;(like javascript &lt;code&gt;function.prototype.apply&lt;/code&gt;) and append(like javascript &lt;code&gt;function.prototype.push&lt;/code&gt; ).\nSo, we could convert the a callback style function to promise style function now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {readdir} = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fs&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; readdirP = &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt;(readdir)\n&lt;span class=&quot;hljs-title function_&quot;&gt;readdir&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(\n        &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;files&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(files),\n        &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(err)\n    )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;toPromise&lt;/strong&gt; and &lt;strong&gt;checkErr&lt;/strong&gt; function is own by &lt;a href=&quot;https://github.com/jituanlin/berserk&quot; rel=&quot;nofollow noreferrer&quot;&gt;berserk&lt;/a&gt; library, it&apos;s a functional programming library fork by &lt;strong&gt;ramda.js&lt;/strong&gt;(create by me).&lt;/p&gt;\n\n&lt;p&gt;Hope this answer is useful for you.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;es6-promisify&lt;/code&gt; converts callback-based functions to Promise-based functions.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promisify = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;es6-promisify&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promisedFn = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(callbackedFn, args);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ref: &lt;a href=&quot;https://www.npmjs.com/package/es6-promisify&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.npmjs.com/package/es6-promisify&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can do something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// @flow&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;f: (any) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;&amp;lt;any&amp;gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result)\n      })\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(e)\n    }\n  })\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; toPromise\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then use it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loadData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; friends = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toPromise&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;FriendsManager&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;loadFriends&lt;/span&gt;)\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(friends)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My promisify version of a &lt;code&gt;callback&lt;/code&gt; function is the &lt;code&gt;P&lt;/code&gt; function:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; P = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; method = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; params = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (method &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(method) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n      params.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(state)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n      });\n      method.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(self, params);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;not a function&apos;&lt;/span&gt;));\n  });\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; callback = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;par, callback&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rnd = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rnd &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, par) : &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;trap&quot;&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n&lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; err ? &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(err) : &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(state))\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))\n&lt;span class=&quot;hljs-title function_&quot;&gt;P&lt;/span&gt;(callback, &lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v)).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(e))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;P&lt;/code&gt; function requires that the callback signature must be &lt;code&gt;callback(error,result)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Below is the implementation of how a function (callback API) can be converted to a promise.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;functionToExec&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n      array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(resolve)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n         functionToExec.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, array);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n         &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error)\n      }\n    })\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// USE SCENARIO&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;apiFunction&lt;/span&gt; (path, callback) { &lt;span class=&quot;hljs-comment&quot;&gt;// Not a promise&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Logic&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; promisedFunction = &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(apiFunction);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;promisedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Receive the result here (callback)&lt;/span&gt;\n})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Or use it with await like this&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisedFunction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;path&apos;&lt;/span&gt;);\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Perhaps already answered, but this is how I do it typically:&lt;br&gt;&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// given you&apos;ve defined this `Future` fn somewhere:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Future&lt;/span&gt; = fn =&amp;gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r,t&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(r,t))}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// define an eventFn that takes a promise `resolver`&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eventFn&lt;/span&gt; = resolve =&amp;gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do event related closure actions here. When finally done, call `resolve()`&lt;/span&gt;\n  something.&lt;span class=&quot;hljs-property&quot;&gt;oneventfired&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(e)}\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// invoke eventFn in an `async` workflowFn using `Future`&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// to obtain a `promise` wrapper&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;workflowFn&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;(eventFn)}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Especially for things like &lt;code&gt;indexedDb&lt;/code&gt; event wrappers to simplify usage.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Or you might find this variation of &lt;code&gt;Future&lt;/code&gt; to be more general purpose&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PromiseEx&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Promise&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,...a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settledValue&lt;/span&gt; = v;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve_&lt;/span&gt;(v,...a))\n  }\n  &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,...a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settled&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;settledValue&lt;/span&gt; = v;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reject_&lt;/span&gt;(v,...a))\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;(fn,...args) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; r,t,ft = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PromiseEx&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r_,t_&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {r=r_;t=t_})\n    ft.&lt;span class=&quot;hljs-property&quot;&gt;resolve_&lt;/span&gt; = r; ft.&lt;span class=&quot;hljs-property&quot;&gt;reject_&lt;/span&gt; = t; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(ft,...args);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(ft)\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Necromancing a little, bit this &lt;a href=&quot;https://gist.github.com/jonathan-annett/1a8ae0cc504427317ba2912d2620aae5&quot; rel=&quot;nofollow noreferrer&quot;&gt;link&lt;/a&gt; may be useful....&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;TLDR; look at the snippet example at the end of this answer&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h1&gt;write/convert functions that can be called expecting&lt;/h1&gt;\n&lt;h1&gt;a &lt;code&gt;cb(error,result)&lt;/code&gt; or &lt;code&gt;new Promise (...)&lt;/code&gt; format&lt;/h1&gt;\n&lt;hr&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;promiseToCB&lt;/code&gt; converts and exports an existing function that&apos;s been previously coded to return a promise&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;cbToPromise&lt;/code&gt; converts and exports an existing function that&apos;s been previously coded to call the last argument with (error,result)\n&lt;ul&gt;\n&lt;li&gt;if wrapped function supplies more than 1 result, the result will be an array of results&lt;/li&gt;\n&lt;li&gt;eg &lt;code&gt;cb(undefined,path,stat)&lt;/code&gt; ---&amp;gt; &lt;code&gt;resolve([path,stat])&lt;/code&gt; / &lt;code&gt;cb(undefined,[path,stat])&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;asPromise&lt;/code&gt; lets you code a new function to return a promise, but it can be called either way&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;asCallback&lt;/code&gt; lets you code a new function to call &lt;code&gt;cb(err,result)&lt;/code&gt;, but it can be invoked either way&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;sample functions&lt;/h2&gt;\n&lt;p&gt;each sample takes 2 arguments, and resolves/rejects/errors based on random number.&lt;/p&gt;\n&lt;p&gt;arg2 can be also be used to force pass or fail. (looks for &quot;-pass&quot; or &quot;-fail&quot;).&lt;/p&gt;\n&lt;h2&gt;wrap existing functions&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;exports the function to current &quot;this&quot; (or use &lt;code&gt;promiseToCB(function myFunc(){},newThis);&lt;/code&gt; )&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       \n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n    \n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n        });\n    });\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someOtherName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2,cb&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    },local);\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;or code new functions, which embed a wrapper.&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;     &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;test scipt for above functions&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; local = {}; \n    &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       \n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n    \n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n        });\n    });\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someOtherName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2,cb&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    },local);\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n       &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n       \n       &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n               &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n               &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n               &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n           }\n       },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        \n    });}\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; log=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),info=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),error=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n    \n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n    local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cpArgs = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;call&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt; (nm,fn,&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; nm===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=fn;fn=nm;nm=fn.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;||&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; func = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; args = &lt;span class=&quot;hljs-title function_&quot;&gt;cpArgs&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cb = args.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt;){\n                   cb (&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,r);\n                }).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(cb);  \n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args);\n            }\n        };\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(func,&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:nm,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm]) &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm];\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,nm,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:func,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt; (nm,fn,&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; nm===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=fn;fn=nm;nm=fn.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;=&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;||&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; func = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; args = &lt;span class=&quot;hljs-title function_&quot;&gt;cpArgs&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n                    \n                    args.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err,result&lt;/span&gt;){\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n                             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n                          }\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;cpArgs&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n                    });\n                              \n                    fn.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,args);\n                    \n                });\n            }\n        };\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(func,&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:nm,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm]) &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;[nm];\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;THIS&lt;/span&gt;,nm,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:func,&lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; func;\n\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt; (args,resolver,no_err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cb = args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n        promise  = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(resolver);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cb===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)  ? promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(no_err,result)}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(cb) : promise;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt; (args,wrap,no_err) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; cb = args[args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n        promise=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolver&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrap (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err,result&lt;/span&gt;) {\n                 &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n                 &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n            });\n        });\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cb===&lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)  ? promise.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(no_err,result)}).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(cb) : promise;\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cbPromiseTest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*global sampleFunc1,sampleFunc2*/&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; local = {}; \n        &lt;span class=&quot;hljs-title function_&quot;&gt;promiseToCB&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n           \n               &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n               \n               &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n        \n                       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                       &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                       &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n                   }\n               },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n            });\n        });\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;cbToPromise&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;sampleFunc2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;someOtherName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2,cb&lt;/span&gt;) {\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n        },local);\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asPromise&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve,reject&lt;/span&gt;){\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n        });}\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg1,arg2&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asCallback&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cb&lt;/span&gt;){\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;deciding:&quot;&lt;/span&gt;,arg1,arg2);\n           &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; timer = &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){&lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;([arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ouch&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));},&lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;);\n           \n           &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n               &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-pass&quot;&lt;/span&gt;) || (!arg2.&lt;span class=&quot;hljs-title function_&quot;&gt;endsWith&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-fail&quot;&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;)) {\n                   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;complete:&quot;&lt;/span&gt;,arg1,arg2);\n                   &lt;span class=&quot;hljs-built_in&quot;&gt;clearTimeout&lt;/span&gt;(timer);\n                   &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,[arg1,arg2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;all good&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;));\n               }\n           },&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n            \n        });}\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; log=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),info=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;),error=&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;);\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,info);\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-pass&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-pass&quot;&lt;/span&gt;,info);\n        \n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;promise-fail&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; (log).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(error);\n        \n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc1&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n        local.&lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc2&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample2&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc3&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;sampleFunc4&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sample4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;callback-fail&quot;&lt;/span&gt;,info);\n     \n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;cbPromiseTest&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Promises always have a &lt;code&gt;resolve&lt;/code&gt; and a &lt;code&gt;reject&lt;/code&gt;. When you write an async wrapper, just call the resolve and there you go.&lt;/p&gt;\n&lt;p&gt;You can write a wrapper function for pretty much any function taking a callback like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myAsyncWrapper&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; \n    &lt;span class=&quot;hljs-title function_&quot;&gt;someFunctionWithCallback&lt;/span&gt;(...params, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error, response&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n      error ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(response)\n    )\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can take this further to write a conversion function of callbacks to promises:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt; =\n  (&lt;span class=&quot;hljs-params&quot;&gt;functionWithCallback&lt;/span&gt;) =&amp;gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;functionWithCallback&lt;/span&gt;(...params, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error, response&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n        error ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(response)\n      )\n    );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This concept of wrapper functions is especially useful when using older libraries or SDKs. For example, consider the Facebook Graph API&apos;s JavaScript SDK, which uses a similar callback structure for making API requests.&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(apiURL, options, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (request.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt; || !request) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// handle request&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In modern applications, it is much more useful to use a promise-based API.\nIf you use a function only once or twice, it may be better to promisify the response individually:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// in an async function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(apiURL, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(res)))\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you use the function a lot, you can use the same wrapper concept to write a function like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;apiWrapper&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; \n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(...params, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(res?.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(res)))\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although promisifiers are great sometimes, they won&apos;t work for specific instances like this. In times like these, look on Github for a modern wrapper, or write your own like this.&lt;/p&gt;\n    ","\n&lt;p&gt;since we know the characteristics of a callback-based function in advance,\nwe can create a function that transforms a callback-based function\ninto an equivalent function returning a Promise.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The callback is the last argument of the function&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If there is an error, it always the first argument passed to the callback&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Any return value is passed after the error to the callback&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;yourCallbackApi&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promisified&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// newArgs=[..args,callback]&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArgs = [\n          ...args,\n          &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;err, result&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (err) {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(err);\n            }\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(result);\n          },\n        ];\n        &lt;span class=&quot;hljs-comment&quot;&gt;// invoke yourCallbackApi with the new list of arguments&lt;/span&gt;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;yourCallbackApi&lt;/span&gt;(...newArgs);\n      });\n    };\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;It is like 5 years late, but I wanted to post here my promesify version which takes functions from callbacks API and turns them into promises&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promesify&lt;/span&gt; = fn =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...params&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({\n    &lt;span class=&quot;hljs-attr&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;cbThen&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({\n      &lt;span class=&quot;hljs-attr&quot;&gt;catch&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;cbCatch&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...params, cbThen, cbCatch);\n      }\n    })\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Take a look to this very simple version here:\n&lt;a href=&quot;https://gist.github.com/jdtorregrosas/aeee96dd07558a5d18db1ff02f31e21a&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://gist.github.com/jdtorregrosas/aeee96dd07558a5d18db1ff02f31e21a&lt;/a&gt;&lt;/p&gt;\n    "],"125":["\n&lt;h2&gt;What Is It?&lt;/h2&gt;\n\n&lt;p&gt;This exception means that you&apos;re trying to access a collection item by index, using an invalid index. An index is invalid when it&apos;s lower than the collection&apos;s lower bound or greater than or equal to the number of elements it contains.&lt;/p&gt;\n\n&lt;h2&gt;When It Is Thrown&lt;/h2&gt;\n\n&lt;p&gt;Given an array declared as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can access this array from 0 to 3, values outside this range will cause &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; to be thrown. Remember this when you create and access an array. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Array Length&lt;/strong&gt;&lt;br&gt;\nIn C#, usually, arrays are 0-based. It means that first element has index 0 and last element has index &lt;code&gt;Length - 1&lt;/code&gt; (where &lt;code&gt;Length&lt;/code&gt; is total number of items in the array) so this code doesn&apos;t work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;array[array.Length] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Moreover please note that if you have a multidimensional array then you can&apos;t use &lt;code&gt;Array.Length&lt;/code&gt; for both dimension, you have to use &lt;code&gt;Array.GetLength()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[,] data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; data.GetLength(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); ++i) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; data.GetLength(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); ++j) {\n        data[i, j] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Upper Bound Is Not Inclusive&lt;/strong&gt;&lt;br&gt;\nIn the following example we create a raw bidimensional array of &lt;code&gt;Color&lt;/code&gt;. Each item represents a pixel, indices are from &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(imageWidth - 1, imageHeight - 1)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Color[,] pixels = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Color[imageWidth, imageHeight];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; x &amp;lt;= imageWidth; ++x) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; y &amp;lt;= imageHeight; ++y) {\n        pixels[x, y] = backgroundColor;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code will then fail because array is 0-based and last (bottom-right) pixel in the image is &lt;code&gt;pixels[imageWidth - 1, imageHeight - 1]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;pixels[imageWidth, imageHeight] = Color.Black;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In another scenario you may get &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt; for this code (for example if you&apos;re using &lt;code&gt;GetPixel&lt;/code&gt; method on a &lt;code&gt;Bitmap&lt;/code&gt; class).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Arrays Do Not Grow&lt;/strong&gt;&lt;br&gt;\nAn array is fast. Very fast in linear search compared to every other collection. It is because items are contiguous in memory so memory address can be calculated (and increment is just an addition). No need to follow a node list, simple math! You pay this with a limitation: they can&apos;t grow, if you need more elements you need to reallocate that array (this may take a relatively long time if old items must be copied to a new block). You resize them with &lt;code&gt;Array.Resize&amp;lt;T&amp;gt;()&lt;/code&gt;, this example adds a new entry to an existing array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Array.Resize(&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt; array, array.Length + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Don&apos;t forget that valid indices are from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;Length - 1&lt;/code&gt;. If you simply try to assign an item at &lt;code&gt;Length&lt;/code&gt; you&apos;ll get &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; (this behavior may confuse you if you think they may increase with a syntax similar to &lt;code&gt;Insert&lt;/code&gt; method of other collections).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Special&lt;/em&gt; Arrays With Custom Lower Bound&lt;/strong&gt;&lt;br&gt;\n&lt;em&gt;First item in arrays has always index 0&lt;/em&gt;. This is not always true because you can create an array with a custom lower bound:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = Array.CreateInstance(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; }, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In that example, array indices are valid from 1 to 4. Of course, upper bound cannot be changed. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Wrong Arguments&lt;/strong&gt;&lt;br&gt;\nIf you access an array using unvalidated arguments (from user input or from function user) you may get this error:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] RomanNumbers =\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;II&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;III&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;IV&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;V&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Romanize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; RomanNumbers[number];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Unexpected Results&lt;/strong&gt;&lt;br&gt;\nThis exception may be thrown for another reason too: by convention, many &lt;em&gt;search functions&lt;/em&gt; will return -1 (nullables has been introduced with .NET 2.0 and anyway it&apos;s also a well-known convention in use from many years) if they didn&apos;t find anything. Let&apos;s imagine you have an array of objects comparable with a string. You may think to write this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Items comparable with a string&lt;/span&gt;\nConsole.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First item equals to &apos;Debug&apos; is &apos;{0}&apos;.&quot;&lt;/span&gt;,\n    myArray[Array.IndexOf(myArray, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;)]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Arbitrary objects&lt;/span&gt;\nConsole.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First item equals to &apos;Debug&apos; is &apos;{0}&apos;.&quot;&lt;/span&gt;,\n    myArray[Array.FindIndex(myArray, x =&amp;gt; x.Type == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;)]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will fail if no items in &lt;code&gt;myArray&lt;/code&gt; will satisfy search condition because &lt;code&gt;Array.IndexOf()&lt;/code&gt; will return -1 and then array access will throw. &lt;/p&gt;\n\n&lt;p&gt;Next example is a naive example to calculate occurrences of a given set of numbers (knowing maximum number and returning an array where item at index 0 represents number 0, items at index 1 represents number 1 and so on):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;CountOccurences&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; maximum, IEnumerable&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; numbers&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[maximum + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Includes 0&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; numbers)\n        ++result[number];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, it&apos;s a pretty terrible implementation but what I want to show is that it&apos;ll fail for negative numbers and numbers above &lt;code&gt;maximum&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How it applies to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Same cases as array - range of valid indexes - 0 (&lt;code&gt;List&lt;/code&gt;&apos;s indexes always start with 0) to &lt;code&gt;list.Count&lt;/code&gt; - accessing elements outside of this range will cause the exception.&lt;/p&gt;\n\n&lt;p&gt;Note that &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; throws &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt; for the same cases where arrays use &lt;code&gt;IndexOutOfRangeException&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Unlike arrays, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; starts empty - so trying to access items of just created list lead to this exception.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Common case is to populate list with indexing (similar to &lt;code&gt;Dictionary&amp;lt;int, T&amp;gt;&lt;/code&gt;) will cause exception:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;list[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// exception&lt;/span&gt;\nlist.Add(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// correct&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;IDataReader and Columns&lt;/strong&gt;&lt;br&gt;\nImagine you&apos;re trying to read data from a database with this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; connection = CreateConnection()) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; command = connection.CreateCommand()) {\n        command.CommandText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT MyColumn1, MyColumn2 FROM MyTable&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reader = command.ExecuteReader()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (reader.Read()) {\n                ProcessData(reader.GetString(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// Throws!&lt;/span&gt;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;GetString()&lt;/code&gt; will throw &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; because you&apos;re dataset has only two columns but you&apos;re trying to get a value from 3rd one (indices are &lt;em&gt;always&lt;/em&gt; 0-based).&lt;/p&gt;\n\n&lt;p&gt;Please note that this behavior is shared with most &lt;code&gt;IDataReader&lt;/code&gt; implementations (&lt;code&gt;SqlDataReader&lt;/code&gt;, &lt;code&gt;OleDbDataReader&lt;/code&gt; and so on).   &lt;/p&gt;\n\n&lt;p&gt;You can get the same exception also if you use the IDataReader overload of the indexer operator that takes a column name and pass an invalid column name.&lt;br&gt;\nSuppose for example that you have retrieved a column named &lt;em&gt;Column1&lt;/em&gt; but then you try to retrieve the value of that field with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = dr[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Colum1&quot;&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// Missing the n in Column1.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This happens because the indexer operator is implemented trying to retrieve the index of a &lt;em&gt;Colum1&lt;/em&gt; field that doesn&apos;t exist. The GetOrdinal method will throw this exception when its internal helper code returns a -1 as the index of &quot;Colum1&quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;br&gt;\nThere is another (documented) case when this exception is thrown: if, in &lt;code&gt;DataView&lt;/code&gt;, data column name being supplied to the &lt;code&gt;DataViewSort&lt;/code&gt; property is not valid.&lt;/p&gt;\n\n&lt;h2&gt;How to Avoid&lt;/h2&gt;\n\n&lt;p&gt;In this example, let me assume, for simplicity, that arrays are always monodimensional and 0-based. If you want to be strict (or you&apos;re developing a library), you may need to replace &lt;code&gt;0&lt;/code&gt; with &lt;code&gt;GetLowerBound(0)&lt;/code&gt; and &lt;code&gt;.Length&lt;/code&gt; with &lt;code&gt;GetUpperBound(0)&lt;/code&gt; (of course if you have parameters of type &lt;code&gt;System.Arra&lt;/code&gt;y, it doesn&apos;t apply for &lt;code&gt;T[]&lt;/code&gt;). Please note that in this case, upper bound is inclusive then this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.Length; ++i) { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Should be rewritten like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=array.GetLowerBound(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); i &amp;lt;= array.GetUpperBound(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); ++i) { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please note that this is not allowed (it&apos;ll throw &lt;code&gt;InvalidCastException&lt;/code&gt;), that&apos;s why if your parameters are &lt;code&gt;T[]&lt;/code&gt; you&apos;re safe about custom lower bound arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T[] array&lt;/span&gt;)&lt;/span&gt; { }\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This will throw InvalidCastException, cannot convert Int32[] to Int32[*]&lt;/span&gt;\n    foo((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)Array.CreateInstance(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;[] { &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Validate Parameters&lt;/strong&gt;&lt;br&gt;\nIf index comes from a parameter you should always validate them (throwing appropriate &lt;code&gt;ArgumentException&lt;/code&gt; or &lt;code&gt;ArgumentOutOfRangeException&lt;/code&gt;). In the next example, wrong parameters may cause &lt;code&gt;IndexOutOfRangeException&lt;/code&gt;, users of this function may expect this because they&apos;re passing an array but it&apos;s not always so obvious. I&apos;d suggest to always validate parameters for public functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetRange&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T[] array, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; length, Func&amp;lt;i, T&amp;gt; function&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&amp;gt;= array.Length)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentOutOfRangeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;from&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentOutOfRangeException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;length&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; + length &amp;gt; array.Length)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; + length; ++i)\n        array[i] = function(i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If function is private you may simply replace &lt;code&gt;if&lt;/code&gt; logic with &lt;code&gt;Debug.Assert()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Debug.Assert(&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;lt; array.Length);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check Object State&lt;/strong&gt;&lt;br&gt;\nArray index may not come directly from a parameter. It may be part of object state. In general is always a good practice to validate object state (by itself and with function parameters, if needed). You can use &lt;code&gt;Debug.Assert()&lt;/code&gt;, throw a proper exception (more descriptive about the problem) or handle that like in this example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Table&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; SelectedIndex { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Row[] Rows { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Row SelectedRow {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Rows == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// No or wrong selection, here we just return null for&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// this case (it may be the reason we use this property&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// instead of direct access)&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (SelectedIndex &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || SelectedIndex &amp;gt;= Rows.Length)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Rows[SelectedIndex];\n        }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Validate Return Values&lt;/strong&gt;&lt;br&gt;\nIn one of previous examples we directly used &lt;code&gt;Array.IndexOf()&lt;/code&gt; return value. If we know it may fail then it&apos;s better to handle that case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; index = myArray[Array.IndexOf(myArray, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) { } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;How to Debug&lt;/h2&gt;\n\n&lt;p&gt;In my opinion, most of the questions, here on SO, about this error can be simply avoided. The time you spend to write a proper question (with a small working example and a small explanation) could easily much more than the time you&apos;ll need to debug your code. First of all, read this Eric Lippert&apos;s blog post about &lt;a href=&quot;http://ericlippert.com/2014/03/05/how-to-debug-small-programs/&quot; rel=&quot;noreferrer&quot;&gt;debugging of small programs&lt;/a&gt;, I won&apos;t repeat his words here but it&apos;s absolutely a &lt;em&gt;must read&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;You have source code, you have exception message with a stack trace. Go there, pick right line number and you&apos;ll see:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;array[index] = newValue;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You found your error, check how &lt;code&gt;index&lt;/code&gt; increases. Is it right? Check how array is allocated, is coherent with how &lt;code&gt;index&lt;/code&gt; increases? Is it right according to your specifications? If you answer &lt;em&gt;yes&lt;/em&gt; to all these questions, then you&apos;ll find good help here on StackOverflow but please first check for that by yourself. You&apos;ll save your own time!&lt;/p&gt;\n\n&lt;p&gt;A good start point is to always use assertions and to validate inputs. You may even want to use code contracts. When something went wrong and you can&apos;t figure out what happens with a quick look at your code then you have to resort to an old friend: &lt;strong&gt;debugger&lt;/strong&gt;. Just run your application in debug inside Visual Studio (or your favorite IDE), you&apos;ll see exactly which line throws this exception, which array is involved and which index you&apos;re trying to use. Really, 99% of the times you&apos;ll solve it by yourself in a few minutes.&lt;/p&gt;\n\n&lt;p&gt;If this happens in production then you&apos;d better to add assertions in incriminated code, probably we won&apos;t see in your code what you can&apos;t see by yourself (but you can always bet).&lt;/p&gt;\n\n&lt;h2&gt;The VB.NET side of the story&lt;/h2&gt;\n\n&lt;p&gt;Everything that we have said in the C# answer is valid for VB.NET with the obvious syntax differences but there is an important point to consider when you deal with VB.NET arrays.&lt;/p&gt;\n\n&lt;p&gt;In VB.NET, arrays are declared setting the maximum valid index value for the array. It is not the count of the elements that we want to store in the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&apos; declares an array with space for 5 integer &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos; 4 is the maximum valid index starting from 0 to 4&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; myArray(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So this loop will fill the array with 5 integers without causing any &lt;strong&gt;IndexOutOfRangeException&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n    myArray(i) = i\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;The VB.NET rule&lt;/h2&gt;\n\n&lt;p&gt;This exception means that you&apos;re trying to access a collection item by index, using an invalid index. An index is invalid when it&apos;s lower than the collection&apos;s lower bound or greater than &lt;del&gt;equal to the number of elements it contains.&lt;/del&gt; the maximum allowed index defined in the array declaration&lt;/p&gt;\n    ","\n&lt;p&gt;Simple explanation about what a Index out of bound exception is:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Just think one train is there its compartments are D1,D2,D3.\nOne passenger came to enter the train and he have the ticket for D4.\nnow what will happen. the passenger want to enter a compartment that does not exist so obviously problem will arise.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;Same scenario: whenever we try to access an array list, etc. we can only access the existing indexes in the array. &lt;code&gt;array[0]&lt;/code&gt; and &lt;code&gt;array[1]&lt;/code&gt; are existing. If we try to access &lt;code&gt;array[3]&lt;/code&gt;, it&apos;s not there actually, so an index out of bound exception will arise.&lt;/p&gt;\n    ","\n&lt;p&gt;To easily understand the problem, imagine we wrote this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] test = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n    test[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]= &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello1&quot;&lt;/span&gt;;\n    test[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]= &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello2&quot;&lt;/span&gt;;\n    test[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]= &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello3&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++)\n    {\n        Console.WriteLine(test[i].ToString());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;hello1\nhello2\nhello3\n\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Size of array is 3 (indices 0, 1 and 2), but the for-loop loops 4 times (0, 1, 2 and 3). &lt;br&gt;So when it tries to access outside the bounds with (3) it throws the exception.&lt;/p&gt;\n    ","\n&lt;p&gt;A side from the very long complete accepted answer there is an important point to make about &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; compared with many other exception types, and that is:  &lt;/p&gt;\n\n&lt;p&gt;Often there is complex program state that maybe difficult to have control over at a particular point in code e.g a DB connection goes down so data for an input cannot be retrieved etc... This kind of issue often results in an Exception of some kind that has to bubble up to a higher level because where it occurs has no way of dealing with it at that point.  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;IndexOutOfRangeException&lt;/code&gt; is generally different in that it in most cases it is pretty trivial to check for at the point where the exception is being raised.  Generally this kind of exception get thrown by some code that could very easily deal with the issue at the place it is occurring - just by checking the actual length of the array.  You don&apos;t want to &apos;fix&apos; this by handling this exception higher up - but instead by ensuring its not thrown in the first instance - which in most cases is easy to do by checking the array length.  &lt;/p&gt;\n\n&lt;p&gt;Another way of putting this is that other exceptions can arise due to genuine lack of control over input or program state BUT &lt;code&gt;IndexOutOfRangeException&lt;/code&gt; more often than not is simply just pilot (programmer) error.&lt;/p&gt;\n    ","\n&lt;p&gt;These two exceptions are common in various programming languages and as others said it&apos;s when you access an element with an index greater than the size of the array. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-comment&quot;&gt;/* var lastElement = array[3] this will throw an exception, because indices \nstart from zero, length of the array is 3, but its last index is 2. */&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The main reason behind this is compilers usually don&apos;t check this stuff, hence they will only express themselves at runtime.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n    "]},"page":"98","randomQuestions":[{"title":"How do I get PHP errors to display?","slug":"how-do-i-get-php-errors-to-display-1657384570095"},{"title":"How do I sort a dictionary by value?","slug":"how-do-i-sort-a-dictionary-by-value-1657385485049"},{"title":"What causes a java.lang.ArrayIndexOutOfBoundsException and how do I prevent it?","slug":"what-causes-a-java.lang.arrayindexoutofboundsexception-and-how-do-i-prevent-it-1657384370848"},{"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467"},{"title":"Reference: What is variable scope, which variables are accessible from where and what are \"undefined variable\" errors?","slug":"reference:-what-is-variable-scope-which-variables-are-accessible-from-where-and-what-are-\"undefined-variable\"-errors-1657384644697"},{"title":"Is List<Dog> a subclass of List<Animal>? Why are Java generics not implicitly polymorphic?","slug":"is-listlessdoggreater-a-subclass-of-listlessanimalgreater-why-are-java-generics-not-implicitly-polymorphic-1657384766724"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"The Use of Multiple JFrames: Good or Bad Practice? [closed]","slug":"the-use-of-multiple-jframes:-good-or-bad-practice-closed-1657384478184"},{"title":"Are global variables thread-safe in Flask? How do I share data between requests?","slug":"are-global-variables-thread-safe-in-flask-how-do-i-share-data-between-requests-1657387949951"},{"title":"Is an array name a pointer?","slug":"is-an-array-name-a-pointer-1657387874827"},{"title":"Convert Rows to columns using 'Pivot' in SQL Server","slug":"convert-rows-to-columns-using-'pivot'-in-sql-server-1657388372528"},{"title":"Why does this UnboundLocalError occur (closure)? [duplicate]","slug":"why-does-this-unboundlocalerror-occur-(closure)-duplicate-1657388531538"},{"title":"What is dependency injection?","slug":"what-is-dependency-injection-1657387953056"},{"title":"CSS margin terror; Margin adds space outside parent element [duplicate]","slug":"css-margin-terror-margin-adds-space-outside-parent-element-duplicate-1657388142199"},{"title":"\"Least Astonishment\" and the Mutable Default Argument","slug":"\"least-astonishment\"-and-the-mutable-default-argument-1657384412508"},{"title":"How do I use reflection to call a generic method?","slug":"how-do-i-use-reflection-to-call-a-generic-method-1657387256751"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"Aggregate / summarize multiple variables per group (e.g. sum, mean)","slug":"aggregate-summarize-multiple-variables-per-group-(e.g.-sum-mean)-1657387764061"},{"title":"GUI not working after rewriting to MVC","slug":"gui-not-working-after-rewriting-to-mvc-1657388388035"}]},"__N_SSG":true}