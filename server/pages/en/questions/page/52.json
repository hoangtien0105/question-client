{"pageProps":{"data":{"count":610,"rows":[{"id":355,"title":"What is the difference between == and equals() in Java?","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654","postType":"QUESTION","createdAt":"2022-07-09T17:28:49.000Z","updatedAt":"2022-07-09T17:28:49.000Z","tags":[]},{"id":354,"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990","postType":"QUESTION","createdAt":"2022-07-09T17:28:46.000Z","updatedAt":"2022-07-09T17:28:46.000Z","tags":[{"id":1984,"name":"android-permissions","slug":"android-permissions","createdAt":"2022-07-09T17:28:47.000Z","updatedAt":"2022-07-09T17:28:47.000Z","Questions_Tags":{"questionId":354,"tagId":1984}}]},{"id":353,"title":"Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()","slug":"truth-value-of-a-series-is-ambiguous.-use-a.empty-a.bool()-a.item()-a.any()-or-a.all()-1657387724259","postType":"QUESTION","createdAt":"2022-07-09T17:28:44.000Z","updatedAt":"2022-07-09T17:28:44.000Z","tags":[{"id":1981,"name":"filtering","slug":"filtering","createdAt":"2022-07-09T17:28:44.000Z","updatedAt":"2022-07-09T17:28:44.000Z","Questions_Tags":{"questionId":353,"tagId":1981}}]},{"id":352,"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263","postType":"QUESTION","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","tags":[{"id":1974,"name":"uitableview","slug":"uitableview","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","Questions_Tags":{"questionId":352,"tagId":1974}},{"id":1975,"name":"autolayout","slug":"autolayout","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","Questions_Tags":{"questionId":352,"tagId":1975}},{"id":1976,"name":"row-height","slug":"row-height","createdAt":"2022-07-09T17:28:42.000Z","updatedAt":"2022-07-09T17:28:42.000Z","Questions_Tags":{"questionId":352,"tagId":1976}}]},{"id":351,"title":"Converting string into datetime","slug":"converting-string-into-datetime-1657387717295","postType":"QUESTION","createdAt":"2022-07-09T17:28:37.000Z","updatedAt":"2022-07-09T17:28:37.000Z","tags":[]}]},"answers":{"351":["\n&lt;p&gt;&lt;code&gt;datetime.strptime&lt;/code&gt; is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\ndatetime_object = datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The resulting &lt;code&gt;datetime&lt;/code&gt; object is timezone-naive.&lt;/p&gt;\n&lt;p&gt;Links:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Python documentation for &lt;code&gt;strptime&lt;/code&gt;: &lt;a href=&quot;https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime&quot; rel=&quot;noreferrer&quot; title=&quot;datetime.datetime.strptime&quot;&gt;Python 2&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime&quot; rel=&quot;noreferrer&quot;&gt;Python 3&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Python documentation for &lt;code&gt;strptime&lt;/code&gt;/&lt;code&gt;strftime&lt;/code&gt; format strings: &lt;a href=&quot;https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior&quot; rel=&quot;noreferrer&quot; title=&quot;strftime-and-strptime-behavior&quot;&gt;Python 2&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot; rel=&quot;noreferrer&quot;&gt;Python 3&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://strftime.org/&quot; rel=&quot;noreferrer&quot;&gt;strftime.org&lt;/a&gt; is also a really nice reference for strftime&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Notes:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;strptime&lt;/code&gt; = &quot;string parse time&quot;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;strftime&lt;/code&gt; = &quot;string format time&quot;&lt;/li&gt;\n&lt;li&gt;Pronounce it out loud today &amp;amp; you won&apos;t have to search for it again in 6 months.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Also, as seen in a comment made by @Izkata, if you want a date instead of a datetime, going through datetime handles it nicely:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y&apos;&lt;/span&gt;).date() == date(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the third party &lt;a href=&quot;https://dateutil.readthedocs.io&quot; rel=&quot;noreferrer&quot;&gt;dateutil&lt;/a&gt; library:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parser\nparser.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aug 28 1999 12:00AM&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# datetime.datetime(1999, 8, 28, 0, 0)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can handle most date formats, including the one you need to parse. It&apos;s more convenient than &lt;code&gt;strptime&lt;/code&gt; as it can guess the correct format most of the time.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s very useful for writing tests, where readability is more important than performance.&lt;/p&gt;\n\n&lt;p&gt;You can install it with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install python-dateutil\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Check out &lt;a href=&quot;http://docs.python.org/3/library/time.html#time.strptime&quot; rel=&quot;noreferrer&quot;&gt;strptime&lt;/a&gt; in the &lt;a href=&quot;http://docs.python.org/3/library/time.html&quot; rel=&quot;noreferrer&quot;&gt;time&lt;/a&gt; module.  It is the inverse of &lt;a href=&quot;http://docs.python.org/3/library/time.html#time.strftime&quot; rel=&quot;noreferrer&quot;&gt;strftime&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;my_time = time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\ntime.struct_time(tm_year=&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, tm_mon=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, tm_mday=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                 tm_hour=&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, tm_min=&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, tm_sec=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n                 tm_wday=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, tm_yday=&lt;span class=&quot;hljs-number&quot;&gt;152&lt;/span&gt;, tm_isdst=-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\ntimestamp = time.mktime(my_time)\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert time object to datetime&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\nmy_datetime = datetime.fromtimestamp(timestamp)\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert time object to date&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; date\nmy_date = date.fromtimestamp(timestamp)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Python &amp;gt;= 3.7&lt;/h2&gt;\n&lt;p&gt;to convert &lt;strong&gt;YYYY-MM-DD&lt;/strong&gt; string to datetime object, &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;datetime.fromisoformat&lt;/code&gt;&lt;/a&gt; could be used.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\ndate_string = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2012-12-12 10:10:10&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (datetime.fromisoformat(date_string))\n&lt;span class=&quot;hljs-number&quot;&gt;2012&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have put together a project that can convert some really neat expressions. Check out &lt;strong&gt;&lt;a href=&quot;http://github.com/stevepeak/timestring&quot; rel=&quot;noreferrer&quot;&gt;timestring&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;h2&gt;Here are some examples below:&lt;/h2&gt;\n&lt;code&gt;pip install timestring&lt;/code&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timestring\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timestring.Date(&lt;span class=&quot;hljs-string&quot;&gt;&apos;monday, aug 15th 2015 at 8:40 pm&apos;&lt;/span&gt;)\n&amp;lt;timestring.Date &lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;-08-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4491909392&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timestring.Date(&lt;span class=&quot;hljs-string&quot;&gt;&apos;monday, aug 15th 2015 at 8:40 pm&apos;&lt;/span&gt;).date\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timestring.Range(&lt;span class=&quot;hljs-string&quot;&gt;&apos;next week&apos;&lt;/span&gt;)\n&amp;lt;timestring.Range From 03/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; to 03/03/&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4496004880&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(timestring.Range(&lt;span class=&quot;hljs-string&quot;&gt;&apos;next week&apos;&lt;/span&gt;).start.date, timestring.Range(&lt;span class=&quot;hljs-string&quot;&gt;&apos;next week&apos;&lt;/span&gt;).end.date)\n(datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Remember this and you didn&apos;t need to get confused in datetime conversion again.&lt;/p&gt;\n\n&lt;p&gt;String to datetime object = &lt;code&gt;strptime&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;datetime object to other formats = &lt;code&gt;strftime&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Jun 1 2005  1:33PM&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;is equals to&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;%b %d %Y %I:%M%p&lt;/code&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;%b    Month as locales abbreviated name(Jun)&lt;/p&gt;\n  \n  &lt;p&gt;%d    Day of the month as a zero-padded decimal number(1)&lt;/p&gt;\n  \n  &lt;p&gt;%Y    Year with century as a decimal number(2015)&lt;/p&gt;\n  \n  &lt;p&gt;%I    Hour (12-hour clock) as a zero-padded decimal number(01)&lt;/p&gt;\n  \n  &lt;p&gt;%M    Minute as a zero-padded decimal number(33)&lt;/p&gt;\n  \n  &lt;p&gt;%p    Locales equivalent of either AM or PM(PM)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;so you need strptime i-e converting &lt;code&gt;string&lt;/code&gt; to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dates:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    date = datetime.strptime(d, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(date)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; date\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.datetime&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;-06-01 &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.datetime&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1999&lt;/span&gt;-08-&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What if you have different format of dates you can use panda or dateutil.parse&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dateutil\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates = []\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;12 1 2017&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1 1 2017&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1 12 2017&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dates.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;June 1 2017 1:30:00AM&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[parser.parse(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dates]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OutPut&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.&lt;/p&gt;\n&lt;p&gt;Python 3.2+:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;datetime.datetime.strptime(\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;March 5, 2014, 20:13:50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%B %d, %Y, %H:%M:%S&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This assumes you know the offset. If you don&apos;t, but you know e.g. the location, you can use the &lt;code&gt;pytz&lt;/code&gt; package to query the &lt;a href=&quot;https://www.iana.org/time-zones&quot; rel=&quot;nofollow noreferrer&quot;&gt;IANA time zone database&lt;/a&gt; for the offset. I&apos;ll use Tehran here as an example because it has a half-hour offset:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;tehran = pytz.timezone(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Asia/Tehran&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;local_time = tehran.localize(\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  datetime.datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;March 5, 2014, 20:13:50&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                             &lt;span class=&quot;hljs-string&quot;&gt;&quot;%B %d, %Y, %H:%M:%S&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;local_time\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, tzinfo=&amp;lt;DstTzInfo &lt;span class=&quot;hljs-string&quot;&gt;&apos;Asia/Tehran&apos;&lt;/span&gt; +0330+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; STD&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, &lt;code&gt;pytz&lt;/code&gt; has determined that the offset was +3:30 at that particular date. You can now convert this to UTC time, and it will apply the offset:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;utc_time = local_time.astimezone(pytz.utc)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;utc_time\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, tzinfo=&amp;lt;UTC&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that dates before the adoption of timezones will give you weird offsets. This is because the IANA has decided to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Local_mean_time&quot; rel=&quot;nofollow noreferrer&quot;&gt;Local Mean Time&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;chicago = pytz.timezone(&lt;span class=&quot;hljs-string&quot;&gt;&quot;America/Chicago&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;weird_time = chicago.localize(\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  datetime.datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;November 18, 1883, 11:00:00&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                             &lt;span class=&quot;hljs-string&quot;&gt;&quot;%B %d, %Y, %H:%M:%S&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;weird_time.astimezone(pytz.utc)\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;1883&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, tzinfo=&amp;lt;UTC&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The weird &quot;7 hours and 34 minutes&quot; are derived from the longitude of Chicago. I used this timestamp because it is right before &lt;a href=&quot;https://www.loc.gov/item/today-in-history/november-18/#time&quot; rel=&quot;nofollow noreferrer&quot;&gt;standardized time was adopted in Chicago&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If your string is in ISO8601 format and you have Python 3.7+ you can use the following simple code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\naDate = datetime.date.fromisoformat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2020-10-04&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for dates and&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\naDateTime = datetime.datetime.fromisoformat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2020-10-04 22:47:00&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;for strings containing date and time. If timestamps are included the function &lt;code&gt;datetime.datetime.isoformat()&lt;/code&gt; supports the following format&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where &lt;code&gt;*&lt;/code&gt; matches any single character. See also &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\ndates = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;2015-12-25&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2015-12-26&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1) Use a list comprehension.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[d.date() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pd.to_datetime(dates)]\n[datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;), datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2) Convert the dates to a DatetimeIndex and extract the python dates.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.DatetimeIndex(dates).date.tolist()\n[datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;), datetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Timings&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;dates = pd.DatetimeIndex(start=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2000-1-1&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2010-1-1&apos;&lt;/span&gt;, freq=&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;).date.tolist()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit [d.date() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pd.to_datetime(dates)]\n&lt;span class=&quot;hljs-comment&quot;&gt;# 100 loops, best of 3: 3.11 ms per loop&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit pd.DatetimeIndex(dates).date.tolist()\n&lt;span class=&quot;hljs-comment&quot;&gt;# 100 loops, best of 3: 6.85 ms per loop&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here is how to convert the OP&apos;s original date-time examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;datetimes = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.to_datetime(datetimes).to_pydatetime().tolist()\n[datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;), \n datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;1999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are many options for converting from the strings to Pandas Timestamps using &lt;code&gt;to_datetime&lt;/code&gt;, so check the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; if you need anything special.&lt;/p&gt;\n\n&lt;p&gt;Likewise, Timestamps have many &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/api.html#datetimelike-properties&quot; rel=&quot;noreferrer&quot;&gt;properties and methods&lt;/a&gt; that can be accessed in addition to &lt;code&gt;.date&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I personally like the solution using the &lt;code&gt;parser&lt;/code&gt; module, which is the second Answer to this question and is beautiful, as you don&apos;t have to construct any string literals to get it working. &lt;strong&gt;BUT&lt;/strong&gt;, one downside is that it is &lt;strong&gt;90% slower&lt;/strong&gt; than the accepted answer with &lt;code&gt;strptime&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parser\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dt&lt;/span&gt;():\n    dt = parser.parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jun 1 2005  1:33PM&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strptime&lt;/span&gt;():\n    datetime_object = datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(stmt=dt, number=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(timeit.timeit(stmt=strptime, number=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;10.70296801342902&lt;/span&gt;\n&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1.3627995655316933&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As long as you are not doing this &lt;em&gt;a million&lt;/em&gt; times over and over again, I still  think the &lt;code&gt;parser&lt;/code&gt; method is more convenient and will handle most of the time formats automatically.&lt;/p&gt;\n    ","\n&lt;p&gt;Something that isn&apos;t mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;num_suffix&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Returns the suffix for any given int\n    &apos;&apos;&apos;&lt;/span&gt;\n    suf = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;th&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;st&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;nd&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rd&apos;&lt;/span&gt;)\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;(n) &lt;span class=&quot;hljs-comment&quot;&gt;# wise guy&lt;/span&gt;\n    tens = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(n)[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:])\n    units = n % &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; tens &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; tens &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; suf[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# teens with &apos;th&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; units &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; suf[units]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; suf[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;th&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;day_suffix&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Returns the suffix of the given struct_time day\n    &apos;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; num_suffix(t.tm_mday)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Examples&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; num_suffix(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; num_suffix(&lt;span class=&quot;hljs-number&quot;&gt;3431&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; num_suffix(&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 Dec 00&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 Nov 01&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 Oct 02&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4 Sep 03&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;13 Nov 90&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; day_suffix(time.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&quot;14 Oct 10&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %b %y&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;]: _now = datetime.datetime.now()\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: _now\nOut[&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;432000&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; _now\n&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;-01-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; 09:&lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00.432000&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;]: _parsed = datetime.datetime.strptime(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(_now),&lt;span class=&quot;hljs-string&quot;&gt;&quot;%Y-%m-%d %H:%M:%S.%f&quot;&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: _parsed\nOut[&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;432000&lt;/span&gt;)\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; _now == _parsed\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Django Timezone aware datetime object example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; django.utils.timezone &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; get_current_timezone\ntz = get_current_timezone()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;\ndate_object = datetime.datetime.strptime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;)\ndate_obj = tz.localize(date_object)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This conversion is very important for Django and Python when you have &lt;code&gt;USE_TZ = True&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;RuntimeWarning: DateTimeField MyModel.created received a naive datetime (&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;-03-04 &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; time zone support &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; active.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Create a small utility function like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;datestr=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; datestr:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; datetime.today().date()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; datetime.strptime(datestr, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;).date()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is versatile enough:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&apos;t pass any arguments it will return today&apos;s date.&lt;/li&gt;\n&lt;li&gt;There&apos;s a date format as default that you can override.&lt;/li&gt;\n&lt;li&gt;You can easily modify it to return a datetime.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;It would do the helpful for converting string to datetime and also with time zone&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;convert_string_to_time&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;date_string, timezone&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pytz\n    date_time_obj = datetime.strptime(date_string[:&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;%Y-%m-%d %H:%M:%S.%f&apos;&lt;/span&gt;)\n    date_time_obj_timezone = pytz.timezone(timezone).localize(date_time_obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; date_time_obj_timezone\n\ndate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;2018-08-14 13:09:24.543953+00:00&apos;&lt;/span&gt;\nTIME_ZONE = &lt;span class=&quot;hljs-string&quot;&gt;&apos;UTC&apos;&lt;/span&gt;\ndate_time_obj_timezone = convert_string_to_time(date, TIME_ZONE)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;arrow&lt;/strong&gt; offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; arrow\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;dateStrings = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1  2005 1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt; ]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dateString &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dateStrings:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    dateString\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    arrow.get(dateString.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;MMM D YYYY H:mmA&apos;&lt;/span&gt;).datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    arrow.get(dateString.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;MMM D YYYY H:mmA&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ddd, Do MMM YYYY HH:mm&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    arrow.get(dateString.replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;  &apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;MMM D YYYY H:mmA&apos;&lt;/span&gt;).humanize(locale=&lt;span class=&quot;hljs-string&quot;&gt;&apos;de&apos;&lt;/span&gt;)\n...\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1  2005 1:33PM&apos;&lt;/span&gt;\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, tzinfo=tzutc())\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Wed, 1st Jun 2005 13:33&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;vor 11 Jahren&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;1999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, tzinfo=tzutc())\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Sat, 28th Aug 1999 00:00&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;vor 17 Jahren&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://arrow.readthedocs.io/en/latest/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://arrow.readthedocs.io/en/latest/&lt;/a&gt; for more.&lt;/p&gt;\n    ","\n&lt;p&gt;You can also check out &lt;a href=&quot;https://dateparser.readthedocs.io/en/latest/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dateparser&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://pypi.org/project/dateparser/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dateparser&lt;/code&gt;&lt;/a&gt; provides modules to easily parse localized dates in almost\n  any string formats commonly found on web pages.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Install:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ pip install dateparser\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is, I think, the easiest way you can parse dates.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The most straightforward way is to use the &lt;code&gt;dateparser.parse&lt;/code&gt; function,\n  that wraps around most of the functionality in the module.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;Sample Code:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dateparser\n\nt1 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;\nt2 = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aug 28 1999 12:00AM&apos;&lt;/span&gt;\n\ndt1 = dateparser.parse(t1)\ndt2 = dateparser.parse(t2)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dt1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dt2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;2005-06-01 13:33:00\n1999-08-28 00:00:00\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;a href=&quot;https://github.com/ralphavalon/easy_date&quot; rel=&quot;noreferrer&quot;&gt;easy_date&lt;/a&gt; to make it easy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; date_converter\nconverted_date = date_converter.string_to_datetime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;%b %d %Y %I:%M%p&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want only date format then you can manually convert it by passing your individual fields like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date = datetime.date(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2017&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;12&apos;&lt;/span&gt;),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;21&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;date\ndatetime.date(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(date)\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.date&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can pass your split string values to convert it into date type like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;selected_month_rec = &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-09-01&apos;&lt;/span&gt;\ndate_formate = datetime.date(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(selected_month_rec.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(selected_month_rec.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]),&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(selected_month_rec.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will get the resulting value in date format.&lt;/p&gt;\n    ","\n&lt;p&gt;Similar to Javed above, I just wanted date from string - so combining Simon and Javed&apos;s logic (above) we get:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parser\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\ns=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2021-03-04&apos;&lt;/span&gt;\n\nparser.parse(s).date()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;datetime.date(2021, 3, 4)&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;It seems using &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pandas Timestamp&lt;/a&gt; is the fastest&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd \n\nN = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n\nl = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jun 1 2005  1:33PM&apos;&lt;/span&gt;] * N\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(pd.to_datetime(l, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;))\n\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(pd.to_datetime(l, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;=&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;1.58&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;21.6&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Other solutions&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: datetime.strptime(x, &lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;), l))\n&lt;span class=&quot;hljs-number&quot;&gt;9.41&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;95.7&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil.parser &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parse\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: parse(x), l))\n&lt;span class=&quot;hljs-number&quot;&gt;73.8&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;1.14&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;If the string is ISO8601 string please use &lt;a href=&quot;https://pypi.org/project/ciso8601/&quot; rel=&quot;nofollow noreferrer&quot;&gt;csio8601&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ciso8601\n\nl = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;2014-01-09&apos;&lt;/span&gt;] * N\n\n%timeit _ = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: ciso8601.parse_datetime(x), l))\n&lt;span class=&quot;hljs-number&quot;&gt;186&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;4.13&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you &lt;code&gt;don&apos;t&lt;/code&gt; want to &lt;code&gt;explicitly specify&lt;/code&gt; which &lt;code&gt;format&lt;/code&gt; your string is in with respect to date time format you can use this &lt;code&gt;hack to by pass that step&lt;/code&gt; :-&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil.parser &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parse\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# function that&apos;ll guess the format and convert it into python datetime format&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;update_event&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, end_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, description=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start_datetime &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        new_start_time = parse(start_datetime)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new_start_time\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#sample input dates in different format&lt;/span&gt;\nd = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40:23.277000&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021&apos;&lt;/span&gt;]\n\nnew = [update_event(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; date &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; new:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(date)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# sample output dates in python datetime object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# 2014-04-23 00:00:00&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# 2013-04-24 00:00:00&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# 2014-04-25 00:00:00&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to convert it into some other datetime format just modify the last line with the format you like for example something like &lt;code&gt;date.strftime(&apos;%Y/%m/%d %H:%M:%S.%f&apos;)&lt;/code&gt; :-&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dateutil.parser &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; parse\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;update_event&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, end_datetime=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, description=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; start_datetime &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        new_start_time = parse(start_datetime)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; new_start_time\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#sample input dates in different format&lt;/span&gt;\nd = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40:23.277000&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021 06:40&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;06/07/2021&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# passing the dates one by one through the function&lt;/span&gt;\nnew = [update_event(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; date &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; new:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(date.strftime(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%Y/%m/%d %H:%M:%S.%f&apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# sample output dates in required python datetime object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#2021/06/07 06:40:23.277000&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#2021/06/07 06:40:00.000000&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;#2021/06/07 00:00:00.000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;try running the above sniipet to have a btter clarity. Thanks&lt;/p&gt;\n    ","\n&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446&quot;&gt;my answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In real-world data this is a real problem: multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats, often mixed freely in one dataset. It&apos;s not ok for production code to fail, let alone go exception-happy like a fox.&lt;/p&gt;\n\n&lt;p&gt;We need to try...catch multiple datetime formats fmt1,fmt2,...,fmtn and suppress/handle the exceptions (from &lt;code&gt;strptime()&lt;/code&gt;) for all those that mismatch (and in particular, avoid needing a yukky n-deep indented ladder of try..catch clauses). From &lt;a href=&quot;https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446&quot;&gt;my solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;try_strptime&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, fmts=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;%d-%b-%y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;%m/%d/%Y&apos;&lt;/span&gt;]&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; fmt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fmts:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; datetime.strptime(s, fmt)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# or reraise the ValueError if no format matched, if you prefer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;emp = pd.read_csv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\py\\\\programs\\\\pandas_2\\\\pandas\\\\employees.csv&quot;&lt;/span&gt;)\nemp.info()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it shows &quot;Start Date Time&quot; Column and &quot;Last Login Time&quot; both are &quot;object = strings&quot; in data-frame&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pandas.core.frame.DataFrame&apos;&lt;/span&gt;&amp;gt;\nRangeIndex: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; entries, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;\nData columns (total &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; columns):\nFirst Name           &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nGender               &lt;span class=&quot;hljs-number&quot;&gt;855&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Start Date           &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n\nLast Login Time      &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Salary               &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null int64\nBonus %              &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null float64\nSenior Management    &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nTeam                 &lt;span class=&quot;hljs-number&quot;&gt;957&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\ndtypes: float64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), int64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\nmemory usage: &lt;span class=&quot;hljs-number&quot;&gt;62.6&lt;/span&gt;+ KB\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using &lt;code&gt;parse_dates&lt;/code&gt; option in &lt;code&gt;read_csv&lt;/code&gt; mention you can convert your string datetime into pandas datetime format.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;emp = pd.read_csv(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\\\py\\\\programs\\\\pandas_2\\\\pandas\\\\employees.csv&quot;&lt;/span&gt;, parse_dates=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Start Date&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Last Login Time&quot;&lt;/span&gt;])\nemp.info()\n\n\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pandas.core.frame.DataFrame&apos;&lt;/span&gt;&amp;gt;\nRangeIndex: &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; entries, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;\nData columns (total &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; columns):\nFirst Name           &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nGender               &lt;span class=&quot;hljs-number&quot;&gt;855&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Start Date           &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null datetime64[ns]\nLast Login Time      &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null datetime64[ns]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Salary               &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null int64\nBonus %              &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; non-null float64\nSenior Management    &lt;span class=&quot;hljs-number&quot;&gt;933&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\nTeam                 &lt;span class=&quot;hljs-number&quot;&gt;957&lt;/span&gt; non-null &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\ndtypes: datetime64[ns](&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), float64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), int64(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\nmemory usage: &lt;span class=&quot;hljs-number&quot;&gt;62.6&lt;/span&gt;+ KB\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A short sample mapping a yyyy-mm-dd date string to a datetime.date object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; date\ndate_from_yyyy_mm_dd = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; δ : date(*[&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(_) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; δ.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)])\ndate_object = date_from_yyyy_mm_dd(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2021-02-15&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"352":["\n&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Don&apos;t like reading? Jump straight to the sample projects on GitHub:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayoutiOS8&quot; rel=&quot;noreferrer&quot;&gt;iOS 8 Sample Project&lt;/a&gt; - Requires iOS 8&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayout&quot; rel=&quot;noreferrer&quot;&gt;iOS 7 Sample Project&lt;/a&gt; - Works on iOS 7+&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Conceptual Description&lt;/h1&gt;\n&lt;p&gt;The first 2 steps below are applicable regardless of which iOS versions you are developing for.&lt;/p&gt;\n&lt;h2&gt;1. Set Up &amp;amp; Add Constraints&lt;/h2&gt;\n&lt;p&gt;In your &lt;code&gt;UITableViewCell&lt;/code&gt; subclass, add constraints so that the subviews of the cell have their edges pinned to the edges of the cell&apos;s &lt;strong&gt;contentView&lt;/strong&gt; (most importantly to the top AND bottom edges). &lt;strong&gt;NOTE: don&apos;t pin subviews to the cell itself; only to the cell&apos;s &lt;code&gt;contentView&lt;/code&gt;!&lt;/strong&gt; Let the intrinsic content size of these subviews drive the height of the table view cell&apos;s content view by making sure the &lt;em&gt;content compression resistance&lt;/em&gt; and &lt;em&gt;content hugging&lt;/em&gt; constraints in the vertical dimension for each subview are not being overridden by higher-priority constraints you have added. (&lt;a href=&quot;https://stackoverflow.com/questions/22599069/what-is-the-content-compression-resistance-and-content-hugging-of-a-uiview&quot;&gt;Huh? Click here.&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;Remember, the idea is to have the cell&apos;s subviews connected vertically to the cell&apos;s content view so that they can &quot;exert pressure&quot; and make the content view expand to fit them. Using an example cell with a few subviews, here is a visual illustration of what &lt;strong&gt;some&lt;/strong&gt; &lt;em&gt;(not all!)&lt;/em&gt; of your constraints would need to look like:&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/CTUPi.png&quot; alt=&quot;Example illustration of constraints on a table view cell.&quot;&gt;&lt;/p&gt;\n&lt;p&gt;You can imagine that as more text is added to the multi-line body label in the example cell above, it will need to grow vertically to fit the text, which will effectively force the cell to grow in height. (Of course, you need to get the constraints right in order for this to work correctly!)&lt;/p&gt;\n&lt;p&gt;Getting your constraints right is definitely the &lt;strong&gt;hardest and most important part&lt;/strong&gt; of getting dynamic cell heights working with Auto Layout. If you make a mistake here, it could prevent everything else from working -- so take your time! I recommend setting up your constraints in code because you know exactly which constraints are being added where, and it&apos;s a lot easier to debug when things go wrong. Adding constraints in code can be just as easy as and significantly more powerful than Interface Builder using layout anchors, or one of the fantastic open source APIs available on GitHub.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you&apos;re adding constraints in code, you should do this once from within the &lt;code&gt;updateConstraints&lt;/code&gt; method of your UITableViewCell subclass. Note that &lt;code&gt;updateConstraints&lt;/code&gt; may be called more than once, so to avoid adding the same constraints more than once, make sure to wrap your constraint-adding code within &lt;code&gt;updateConstraints&lt;/code&gt; in a check for a boolean property such as &lt;code&gt;didSetupConstraints&lt;/code&gt; (which you set to YES after you run your constraint-adding code once). On the other hand, if you have code that updates existing constraints (such as adjusting the &lt;code&gt;constant&lt;/code&gt; property on some constraints), place this in &lt;code&gt;updateConstraints&lt;/code&gt; but outside of the check for &lt;code&gt;didSetupConstraints&lt;/code&gt; so it can run every time the method is called.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;2. Determine Unique Table View Cell Reuse Identifiers&lt;/h2&gt;\n&lt;p&gt;For every unique set of constraints in the cell, use a unique cell reuse identifier. In other words, if your cells have more than one unique layout, each unique layout should receive its own reuse identifier. (A good hint that you need to use a new reuse identifier is when your cell variant has a different number of subviews, or the subviews are arranged in a distinct fashion.)&lt;/p&gt;\n&lt;p&gt;For example, if you were displaying an email message in each cell, you might have 4 unique layouts: messages with just a subject, messages with a subject and a body, messages with a subject and a photo attachment, and messages with a subject, body, and photo attachment. Each layout has completely different constraints required to achieve it, so once the cell is initialized and the constraints are added for one of these cell types, the cell should get a unique reuse identifier specific to that cell type. This means when you dequeue a cell for reuse, the constraints have already been added and are ready to go for that cell type.&lt;/p&gt;\n&lt;p&gt;Note that due to differences in intrinsic content size, cells with the same constraints (type) may still have varying heights! Don&apos;t confuse fundamentally different layouts (different constraints) with different calculated view frames (solved from identical constraints) due to different sizes of content.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Do not add cells with completely different sets of constraints to the same reuse pool (i.e. use the same reuse identifier) and then attempt to remove the old constraints and set up  new constraints from scratch after each dequeue. The internal Auto Layout engine is not designed to handle large scale changes in constraints, and you will see massive performance issues.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;For iOS 8 - Self-Sizing Cells&lt;/h2&gt;\n&lt;h3&gt;3. Enable Row Height Estimation&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To enable self-sizing table view cells, you must set the table views\nrowHeight property to UITableViewAutomaticDimension. You must also\nassign a value to the estimatedRowHeight property. As soon as both of\nthese properties are set, the system uses Auto Layout to calculate the\nrows actual height&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;Apple: &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithSelf-SizingTableViewCells.html&quot; rel=&quot;noreferrer&quot;&gt;Working with Self-Sizing Table View Cells&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;With iOS 8, Apple has internalized much of the work that previously had to be implemented by you prior to iOS 8. In order to allow the self-sizing cell mechanism to work, you must first set the &lt;code&gt;rowHeight&lt;/code&gt; property on the table view to the constant &lt;code&gt;UITableView.automaticDimension&lt;/code&gt;. Then, you simply need to enable row height estimation by setting the table view&apos;s &lt;code&gt;estimatedRowHeight&lt;/code&gt; property to a nonzero value, for example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;self.tableView.rowHeight&lt;/span&gt; = UITableView.automaticDimension&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;self.tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;; // set to whatever your &quot;average&quot; cell height is&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What this does is provide the table view with a temporary estimate/placeholder for the row heights of cells that are not yet onscreen. Then, when these cells are about to scroll on screen, the actual row height will be calculated. To determine the actual height for each row, the table view automatically asks each cell what height its &lt;code&gt;contentView&lt;/code&gt; needs to be based on the known fixed width of the content view (which is based on the table view&apos;s width, minus any additional things like a section index or accessory view) and the auto layout constraints you have added to the cell&apos;s content view and subviews. Once this actual cell height has been determined, the old estimated height for the row is updated with the new actual height (and any adjustments to the table view&apos;s contentSize/contentOffset are made as needed for you).&lt;/p&gt;\n&lt;p&gt;Generally speaking, the estimate you provide doesn&apos;t have to be very accurate -- it is only used to correctly size the scroll indicator in the table view, and the table view does a good job of adjusting the scroll indicator for incorrect estimates as you scroll cells onscreen. You should set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; property on the table view (in &lt;code&gt;viewDidLoad&lt;/code&gt; or similar) to a constant value that is the &quot;average&quot; row height. &lt;em&gt;Only if your row heights have extreme variability (e.g. differ by an order of magnitude) and you notice the scroll indicator &quot;jumping&quot; as you scroll should you bother implementing &lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt; to do the minimal calculation required to return a more accurate estimate for each row.&lt;/em&gt;&lt;/p&gt;\n&lt;h2&gt;For iOS 7 support (implementing auto cell sizing yourself)&lt;/h2&gt;\n&lt;h3&gt;3. Do a Layout Pass &amp;amp; Get The Cell Height&lt;/h3&gt;\n&lt;p&gt;First, instantiate an offscreen instance of a table view cell, &lt;em&gt;one instance for each reuse identifier&lt;/em&gt;, that is used strictly for height calculations. (Offscreen meaning the cell reference is stored in a property/ivar on the view controller and never returned from &lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt; for the table view to actually render onscreen.) Next, the cell must be configured with the exact content (e.g. text, images, etc) that it would hold if it were to be displayed in the table view.&lt;/p&gt;\n&lt;p&gt;Then, force the cell to immediately layout its subviews, and then use the &lt;code&gt;systemLayoutSizeFittingSize:&lt;/code&gt; method on the &lt;code&gt;UITableViewCell&lt;/code&gt;&apos;s &lt;code&gt;contentView&lt;/code&gt; to find out what the required height of the cell is. Use &lt;code&gt;UILayoutFittingCompressedSize&lt;/code&gt; to get the smallest size required to fit all the contents of the cell. The height can then be returned from the &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; delegate method.&lt;/p&gt;\n&lt;h3&gt;4. Use Estimated Row Heights&lt;/h3&gt;\n&lt;p&gt;If your table view has more than a couple dozen rows in it, you will find that doing the Auto Layout constraint solving can quickly bog down the main thread when first loading the table view, as &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; is called on each and every row upon first load (in order to calculate the size of the scroll indicator).&lt;/p&gt;\n&lt;p&gt;As of iOS 7, you can (and absolutely should) use the &lt;code&gt;estimatedRowHeight&lt;/code&gt; property on the table view. What this does is provide the table view with a temporary estimate/placeholder for the row heights of cells that are not yet onscreen. Then, when these cells are about to scroll on screen, the actual row height will be calculated (by calling &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;), and the estimated height updated with the actual one.&lt;/p&gt;\n&lt;p&gt;Generally speaking, the estimate you provide doesn&apos;t have to be very accurate -- it is only used to correctly size the scroll indicator in the table view, and the table view does a good job of adjusting the scroll indicator for incorrect estimates as you scroll cells onscreen. You should set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; property on the table view (in &lt;code&gt;viewDidLoad&lt;/code&gt; or similar) to a constant value that is the &quot;average&quot; row height. &lt;em&gt;Only if your row heights have extreme variability (e.g. differ by an order of magnitude) and you notice the scroll indicator &quot;jumping&quot; as you scroll should you bother implementing &lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt; to do the minimal calculation required to return a more accurate estimate for each row.&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;5. (If Needed) Add Row Height Caching&lt;/h3&gt;\n&lt;p&gt;If you&apos;ve done all the above and are still finding that performance is unacceptably slow when doing the constraint solving in &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;, you&apos;ll unfortunately need to implement some caching for cell heights. (This is the approach suggested by Apple&apos;s engineers.) The general idea is to let the Autolayout engine solve the constraints the first time, then cache the calculated height for that cell and use the cached value for all future requests for that cell&apos;s height. The trick of course is to make sure you clear the cached height for a cell when anything happens that could cause the cell&apos;s height to change -- primarily, this would be when that cell&apos;s content changes or when other important events occur (like the user adjusting the Dynamic Type text size slider).&lt;/p&gt;\n&lt;h3&gt;iOS 7 Generic Sample Code (with lots of juicy comments)&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView cellForRowAtIndexPath:(&lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)indexPath\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Determine which reuse identifier should be used for the cell at this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// index path, depending on the particular layout required (you may have&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// just one, or may have many).&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;reuseIdentifier &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Dequeue a cell for the reuse identifier.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note that this method will init and return a new cell if there isn&apos;t&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// one available in the reuse pool, so either way after this line of &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code you will have a cell with the correct constraints ready to go.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [tableView dequeueReusableCellWithIdentifier:reuseIdentifier];\n         \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Configure the cell with content for the given indexPath, for example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell.textLabel.text = someTextForThisCell;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Make sure the constraints have been set up for this cell, since it &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// may have just been created from scratch. Use the following lines, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// assuming you are setting up constraints from within the cell&apos;s &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// updateConstraints method:&lt;/span&gt;\n    [cell setNeedsUpdateConstraints];\n    [cell updateConstraintsIfNeeded];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If you are using multi-line UILabels, don&apos;t forget that the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preferredMaxLayoutWidth needs to be set correctly. Do it at this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// point if you are NOT doing it within the UITableViewCell subclass &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// -[layoutSubviews] method. For example: &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell.multiLineLabel.preferredMaxLayoutWidth = CGRectGetWidth(tableView.bounds);&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell;\n}\n\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView heightForRowAtIndexPath:(&lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)indexPath\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Determine which reuse identifier should be used for the cell at this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// index path.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;reuseIdentifier &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Use a dictionary of offscreen cells to get a cell for the reuse &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// identifier, creating a cell and storing it in the dictionary if one &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// hasn&apos;t already been added for the reuse identifier. WARNING: Don&apos;t &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// call the table view&apos;s dequeueReusableCellWithIdentifier: method here &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// because this will result in a memory leak as the cell is created but &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// never returned from the tableView:cellForRowAtIndexPath: method!&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.offscreenCells objectForKey:reuseIdentifier];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;cell) {\n        cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [[&lt;span class=&quot;hljs-type&quot;&gt;YourTableViewCellClass&lt;/span&gt; alloc] &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;];\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.offscreenCells setObject:cell forKey:reuseIdentifier];\n    }\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Configure the cell with content for the given indexPath, for example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell.textLabel.text = someTextForThisCell;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Make sure the constraints have been set up for this cell, since it &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// may have just been created from scratch. Use the following lines, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// assuming you are setting up constraints from within the cell&apos;s &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// updateConstraints method:&lt;/span&gt;\n    [cell setNeedsUpdateConstraints];\n    [cell updateConstraintsIfNeeded];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the width of the cell to match the width of the table view. This&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// is important so that we&apos;ll get the correct cell height for different&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// table view widths if the cell&apos;s height depends on its width (due to &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// multi-line UILabels word wrapping, etc). We don&apos;t need to do this &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// above in -[tableView:cellForRowAtIndexPath] because it happens &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// automatically when the cell is used in the table view. Also note, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the final width of the cell may not be the width of the table view in&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some cases, for example when a section index is displayed along &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the right side of the table view. You must account for the reduced &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// cell width.&lt;/span&gt;\n    cell.bounds &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;CGRectGetWidth&lt;/span&gt;(tableView.bounds), &lt;span class=&quot;hljs-type&quot;&gt;CGRectGetHeight&lt;/span&gt;(cell.bounds));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do the layout pass on the cell, which will calculate the frames for &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// all the views based on the constraints. (Note that you must set the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preferredMaxLayoutWidth on multiline UILabels inside the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// -[layoutSubviews] method of the UITableViewCell subclass, or do it &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// manually at this point before the below 2 lines!)&lt;/span&gt;\n    [cell setNeedsLayout];\n    [cell layoutIfNeeded];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get the actual height required for the cell&apos;s contentView&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; height &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [cell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-type&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Add an extra point to the height to account for the cell separator, &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// which is added between the bottom of the cell&apos;s contentView and the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// bottom of the table view cell.&lt;/span&gt;\n    height &lt;span class=&quot;hljs-operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; Set the table view&apos;s estimatedRowHeight property instead of &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// implementing the below method, UNLESS you have extreme variability in &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// your row heights and you notice the scroll indicator &quot;jumping&quot; &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// as you scroll.&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)tableView estimatedHeightForRowAtIndexPath:(&lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)indexPath\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do the minimal calculations required to be able to return an &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// estimated row height that&apos;s within an order of magnitude of the &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// actual height. For example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; isTallCellAtIndexPath:indexPath]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;350.0&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40.0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Sample Projects&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayoutiOS8&quot; rel=&quot;noreferrer&quot;&gt;iOS 8 Sample Project&lt;/a&gt; - Requires iOS 8&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/smileyborg/TableViewCellWithAutoLayout&quot; rel=&quot;noreferrer&quot;&gt;iOS 7 Sample Project&lt;/a&gt; - Works on iOS 7+&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;These projects are fully working examples of table views with variable row heights due to table view cells containing dynamic content in UILabels.&lt;/p&gt;\n&lt;h2&gt;Xamarin (C#/.NET)&lt;/h2&gt;\n&lt;p&gt;If you&apos;re using Xamarin, check out this &lt;a href=&quot;https://github.com/kentcb/TableViewCellWithAutoLayout_dotNET&quot; rel=&quot;noreferrer&quot;&gt;sample project&lt;/a&gt; put together by &lt;a href=&quot;https://stackoverflow.com/users/5380/kent-boogaart&quot;&gt;@KentBoogaart&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For iOS 8 above it&apos;s really simple:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But for iOS 7, the key is calculate the height after autolayout:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calculateHeightForConfiguredSizingCell&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cell&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;GSTableViewCell&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    cell.setNeedsLayout()\n    cell.layoutIfNeeded()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; height &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; cell.contentView.systemLayoutSizeFittingSize(&lt;span class=&quot;hljs-type&quot;&gt;UILayoutFittingExpandedSize&lt;/span&gt;).height &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If multiple lines labels, don&apos;t forget set the &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Don&apos;t forget &lt;code&gt;label.preferredMaxLayoutWidth = CGRectGetWidth(tableView.bounds)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The full example code is &lt;a href=&quot;https://github.com/williamhqs/GSTableViewDynamicHeight&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;Swift example of a variable height UITableViewCell&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;Updated for Swift 3&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;William Hu&apos;s Swift answer is good, but it helps me to have some simple yet detailed steps when learning to do something for the first time. The example below is my test project while learning to make a &lt;code&gt;UITableView&lt;/code&gt; with variable cell heights. I based it on &lt;a href=&quot;https://stackoverflow.com/a/33234181/3681880&quot;&gt;this basic UITableView example for Swift&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The finished project should look like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/lxUhH.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lxUhH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Create a new project&lt;/h1&gt;\n\n&lt;p&gt;It can be just a Single View Application.&lt;/p&gt;\n\n&lt;h1&gt;Add the code&lt;/h1&gt;\n\n&lt;p&gt;Add a new Swift file to your project. Name it MyCustomCell. This class will hold the outlets for the views that you add to your cell in the storyboard. In this basic example we will only have one label in each cell.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCustomCell&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewCell&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myCellLabel: &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;!\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We will connect this outlet later.&lt;/p&gt;\n\n&lt;p&gt;Open ViewController.swift and make sure you have the following content:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDelegate&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;UITableViewDataSource&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// These strings will be the data for the table view cells&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; animals: [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ten horses:  horse horse horse horse horse horse horse horse horse horse &quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three cows:  cow, cow, cow&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;One camel:  camel&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ninety-nine sheep:  sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep baaaa sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep sheep&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Thirty goats:  goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat goat &quot;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t forget to enter this in IB also&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cellReuseIdentifier &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;cell&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableView: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;!\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// delegate and data source&lt;/span&gt;\n        tableView.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n        tableView.dataSource &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Along with auto layout, these are the keys for enabling variable cell height&lt;/span&gt;\n        tableView.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;\n        tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// number of rows in table view&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;section&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.animals.count\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// create a cell for each table view row&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cell:&lt;span class=&quot;hljs-type&quot;&gt;MyCustomCell&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier) &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyCustomCell&lt;/span&gt;\n        cell.myCellLabel.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.animals[indexPath.row]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// method to run when table view cell is tapped&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You tapped cell number &lt;span class=&quot;hljs-subst&quot;&gt;\\(indexPath.row)&lt;/span&gt;.&quot;&lt;/span&gt;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It is the following two lines of code (along with auto layout) that make the variable cell height possible:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Setup the storyboard&lt;/h1&gt;\n\n&lt;p&gt;Add a Table View to your view controller and use auto layout to pin it to the four sides. Then drag a Table View Cell onto the Table View. And onto the Prototype cell, drag a Label. Use auto layout to pin the label to the four edges of the content view of the Table View Cell.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/KI5ky.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/KI5ky.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Auto layout works together with the important two lines of code I mentioned above. If you don&apos;t use auto layout it isn&apos;t going to work.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Other IB settings&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Custom class name and Identifier&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Select the Table View Cell and set the custom class to be &lt;code&gt;MyCustomCell&lt;/code&gt; (the name of the class in the Swift file we added). Also set the Identifier to be &lt;code&gt;cell&lt;/code&gt; (the same string that we used for the &lt;code&gt;cellReuseIdentifier&lt;/code&gt; in the code above.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/J7txO.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/J7txO.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Zero Lines for Label&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Set the number of lines to &lt;code&gt;0&lt;/code&gt; in your Label. This means multi-line and allows the label to resize itself based on its content.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/YbCl2.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YbCl2.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Hook Up the Outlets&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Control drag from the Table View in the storyboard to the &lt;code&gt;tableView&lt;/code&gt; variable in the &lt;code&gt;ViewController&lt;/code&gt; code. &lt;/li&gt;\n&lt;li&gt;Do the same for the Label in your Prototype cell to the &lt;code&gt;myCellLabel&lt;/code&gt; variable in the &lt;code&gt;MyCustomCell&lt;/code&gt; class.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Finished&lt;/h1&gt;\n\n&lt;p&gt;You should be able to run your project now and get cells with variable heights.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This example only works for iOS 8 and after. If you are still needing to support iOS 7 then this won&apos;t work for you.&lt;/li&gt;\n&lt;li&gt;Your own custom cells in your future projects will probably have more than a single label. Make sure that you get everything pinned right so that auto layout can determine the correct height to use. You may also have to use vertical compression resistance and hugging. See &lt;a href=&quot;http://useyourloaf.com/blog/table-view-cells-with-varying-row-heights/&quot; rel=&quot;noreferrer&quot;&gt;this article&lt;/a&gt; for more about that.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you are not pinning the leading and trailing (left and right) edges, you may also need to set the label&apos;s &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; so that it knows when to line wrap. For example, if you had added a Center Horizontally constraint to the label in the project above rather than pin the leading and trailing edges, then you would need to add this line to the &lt;code&gt;tableView:cellForRowAtIndexPath&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt; &lt;span class=&quot;hljs-attr&quot;&gt;cell.myCellLabel.preferredMaxLayoutWidth&lt;/span&gt; = tableView.bounds.width\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;See also&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.appcoda.com/self-sizing-cells/&quot; rel=&quot;noreferrer&quot;&gt;Understanding Self Sizing Cells and Dynamic Type in iOS 8&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://useyourloaf.com/blog/table-view-cells-with-varying-row-heights/&quot; rel=&quot;noreferrer&quot;&gt;Table View Cells with Varying Row Heights&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33234180/uitableview-example-for-swift&quot;&gt;UITableView example for Swift&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;I wrapped @smileyborg&apos;s iOS7 solution in a category&lt;/h1&gt;\n\n&lt;p&gt;I decided to wrap this clever solution by @smileyborg into a &lt;code&gt;UICollectionViewCell+AutoLayoutDynamicHeightCalculation&lt;/code&gt; category.&lt;/p&gt;\n\n&lt;p&gt;The category also rectifies the issues outlined in @wildmonkey&apos;s answer (loading a cell from a nib and &lt;code&gt;systemLayoutSizeFittingSize:&lt;/code&gt; returning &lt;code&gt;CGRectZero&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;It doesn&apos;t take into account any caching but suits my needs right now. Feel free to copy, paste and hack at it.&lt;/p&gt;\n\n&lt;h3&gt;UICollectionViewCell+AutoLayoutDynamicHeightCalculation.h&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#import &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; (^&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  A category on UICollectionViewCell to aid calculating dynamic heights based on AutoLayout contraints.\n *\n *  Many thanks to @smileyborg and @wildmonkey\n *\n *  @see stackoverflow.com/questions/18746929/using-auto-layout-in-uitableview-for-dynamic-cell-layouts-variable-row-heights\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UICollectionViewCell&lt;/span&gt; (&lt;span class=&quot;hljs-title&quot;&gt;AutoLayoutDynamicHeightCalculation&lt;/span&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Grab an instance of the receiving type to use in order to calculate AutoLayout contraint driven dynamic height. The method pulls the cell from a nib file and moves any Interface Builder defined contrainsts to the content view.\n *\n *  @param name Name of the nib file.\n *\n *  @return collection view cell for using to calculate content based height\n */&lt;/span&gt;\n+ (&lt;span class=&quot;hljs-keyword&quot;&gt;instancetype&lt;/span&gt;)heightCalculationCellFromNibWithName:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSString&lt;/span&gt; *)name;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Returns the height of the receiver after rendering with your model data and applying an AutoLayout pass\n *\n *  @param block Render the model data to your UI elements in this block\n *\n *  @return Calculated constraint derived height\n */&lt;/span&gt;\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block collectionViewWidth:(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)width;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *  Directly calls `heightAfterAutoLayoutPassAndRenderingWithBlock:collectionViewWidth` assuming a collection view width spanning the [UIScreen mainScreen] bounds\n */&lt;/span&gt;\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;UICollectionViewCell+AutoLayoutDynamicHeightCalculation.m&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#import &lt;span class=&quot;hljs-string&quot;&gt;&quot;UICollectionViewCell+AutoLayout.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UICollectionViewCell&lt;/span&gt; (&lt;span class=&quot;hljs-title&quot;&gt;AutoLayout&lt;/span&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; mark Dummy Cell Generator&lt;/span&gt;\n\n+ (&lt;span class=&quot;hljs-keyword&quot;&gt;instancetype&lt;/span&gt;)heightCalculationCellFromNibWithName:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSString&lt;/span&gt; *)name\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCell&lt;/span&gt; *heightCalculationCell = [[[&lt;span class=&quot;hljs-built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] loadNibNamed:name owner:&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; options:&lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;] lastObject];\n    [heightCalculationCell moveInterfaceBuilderLayoutConstraintsToContentView];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; heightCalculationCell;\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; mark Moving Constraints&lt;/span&gt;\n\n- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)moveInterfaceBuilderLayoutConstraintsToContentView\n{\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.constraints enumerateObjectsUsingBlock:^(&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; *constraint, &lt;span class=&quot;hljs-built_in&quot;&gt;NSUInteger&lt;/span&gt; idx, &lt;span class=&quot;hljs-type&quot;&gt;BOOL&lt;/span&gt; *stop) {\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; removeConstraint:constraint];\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; firstItem = constraint.firstItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : constraint.firstItem;\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; secondItem = constraint.secondItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : constraint.secondItem;\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView addConstraint:[&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintWithItem:firstItem\n                                                                     attribute:constraint.firstAttribute\n                                                                     relatedBy:constraint.relation\n                                                                        toItem:secondItem\n                                                                     attribute:constraint.secondAttribute\n                                                                    multiplier:constraint.multiplier\n                                                                      constant:constraint.constant]];\n    }];\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; mark Height&lt;/span&gt;\n\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; heightAfterAutoLayoutPassAndRenderingWithBlock:block\n                                            collectionViewWidth:&lt;span class=&quot;hljs-built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;([[&lt;span class=&quot;hljs-built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen] bounds])];\n}\n\n- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightAfterAutoLayoutPassAndRenderingWithBlock:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewCellAutoLayoutRenderBlock&lt;/span&gt;)block collectionViewWidth:(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)width\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;NSParameterAssert&lt;/span&gt;(block);\n\n    block();\n\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; setNeedsUpdateConstraints];\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; updateConstraintsIfNeeded];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.bounds = &lt;span class=&quot;hljs-built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;f, width, &lt;span class=&quot;hljs-built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.bounds));\n\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; setNeedsLayout];\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; layoutIfNeeded];\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt; calculatedSize = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calculatedSize.height;\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@end&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Usage example:&lt;/h3&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt;)collectionView:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionView&lt;/span&gt; *)collectionView layout:(&lt;span class=&quot;hljs-built_in&quot;&gt;UICollectionViewLayout&lt;/span&gt; *)collectionViewLayout sizeForItemAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath\n{\n    MYSweetCell *cell = [MYSweetCell heightCalculationCellFromNibWithName:&lt;span class=&quot;hljs-built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([MYSweetCell &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;])];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt; height = [cell heightAfterAutoLayoutPassAndRenderingWithBlock:^{\n        [(&lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt;&amp;lt;MYSweetCellRenderProtocol&amp;gt;)cell renderWithModel:someModel];\n    }];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.collectionView.bounds), height);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thankfully we won&apos;t have to do this jazz in iOS8, but there it is for now!&lt;/p&gt;\n    ","\n&lt;p&gt;Here is my solution:&lt;/p&gt;\n\n&lt;p&gt;You need to tell the &lt;code&gt;TableView&lt;/code&gt; the &lt;code&gt;estimatedHeight&lt;/code&gt; before it loads the view. Otherwise it wont be able to behave like expected.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;hljs-type&quot;&gt;BOOL&lt;/span&gt;)animated {\n    _messageField.delegate = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;;\n    _tableView.estimatedRowHeight = &lt;span class=&quot;hljs-number&quot;&gt;65.0&lt;/span&gt;;\n    _tableView.rowHeight = &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Update to &lt;strong&gt;Swift 4.2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewWillAppear&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;animated&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;) {\n    tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n    tableView.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;65.0&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The solution proposed by @smileyborg is almost perfect. If you have a custom cell and you want one or more &lt;code&gt;UILabel&lt;/code&gt; with dynamic heights then the &lt;em&gt;systemLayoutSizeFittingSize&lt;/em&gt; method combined with AutoLayout enabled returns a &lt;code&gt;CGSizeZero&lt;/code&gt; unless you move all your cell constraints from the cell to its contentView (as suggested by @TomSwift here &lt;a href=&quot;https://stackoverflow.com/questions/18118021/how-to-resize-superview-to-fit-all-subviews-with-autolayout&quot;&gt;How to resize superview to fit all subviews with autolayout?&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;To do so you need to insert the following code in your custom UITableViewCell implementation (thanks to @Adrian).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)awakeFromNib{\n    [&lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt; awakeFromNib];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; *cellConstraint &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.constraints) {\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; removeConstraint:cellConstraint];\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; firstItem = cellConstraint.firstItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : cellConstraint.firstItem;\n        &lt;span class=&quot;hljs-type&quot;&gt;id&lt;/span&gt; seccondItem = cellConstraint.secondItem == &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView : cellConstraint.secondItem;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; *contentViewConstraint =\n        [&lt;span class=&quot;hljs-built_in&quot;&gt;NSLayoutConstraint&lt;/span&gt; constraintWithItem:firstItem\n                                 attribute:cellConstraint.firstAttribute\n                                 relatedBy:cellConstraint.relation\n                                    toItem:seccondItem\n                                 attribute:cellConstraint.secondAttribute\n                                multiplier:cellConstraint.multiplier\n                                  constant:cellConstraint.constant];\n        [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.contentView addConstraint:contentViewConstraint];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Mixing @smileyborg answer with this should works.&lt;/p&gt;\n    ","\n&lt;p&gt;An important enough gotcha I just ran into to post as an answer.&lt;/p&gt;\n\n&lt;p&gt;@smileyborg&apos;s answer is mostly correct. However, if you have any code in the &lt;code&gt;layoutSubviews&lt;/code&gt; method of your custom cell class, for instance setting the &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;, then it won&apos;t be run with this code:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[cell.contentView setNeedsLayout]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-section&quot;&gt;[cell.contentView layoutIfNeeded]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It confounded me for awhile. Then I realized it&apos;s because those are only triggering layoutSubviews on the &lt;code&gt;contentView&lt;/code&gt;, not the cell itself.&lt;/p&gt;\n\n&lt;p&gt;My working code looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;TCAnswerDetailAppSummaryCell *cell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier:&lt;span class=&quot;hljs-string&quot;&gt;@&quot;TCAnswerDetailAppSummaryCell&quot;&lt;/span&gt;];\n[cell configureWithThirdPartyObject:&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.app];\n[cell layoutIfNeeded];\n&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt; height = [cell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you are creating a new cell, I&apos;m pretty sure you don&apos;t need to call &lt;code&gt;setNeedsLayout&lt;/code&gt; as it should already be set. In cases where you save a reference to a cell, you should probably call it. Either way it shouldn&apos;t hurt anything.&lt;/p&gt;\n\n&lt;p&gt;Another tip if you are using cell subclasses where you are setting things like &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;. As @smileyborg mentions, &quot;your table view cell hasn&apos;t yet had its width fixed to the table view&apos;s width&quot;. This is true, and trouble if you are doing your work in your subclass and not in the view controller. However you can simply set the cell frame at this point using the table width:&lt;/p&gt;\n\n&lt;p&gt;For instance in the calculation for height:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.summaryCell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier:&lt;span class=&quot;hljs-string&quot;&gt;@&quot;TCAnswerDetailDefaultSummaryCell&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;CGRect&lt;/span&gt; oldFrame = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.summaryCell.frame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.summaryCell.frame = &lt;span class=&quot;hljs-built_in&quot;&gt;CGRectMake&lt;/span&gt;(oldFrame.origin.x, oldFrame.origin.y, &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.frame.size.width, oldFrame.size.height);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(I happen to cache this particular cell for re-use, but that&apos;s irrelevant).&lt;/p&gt;\n    ","\n&lt;p&gt;(for Xcode 8.x / Xcode 9.x read at the bottom)&lt;/p&gt;\n\n&lt;p&gt;Beware of the following issue in in Xcode 7.x, which might be a source of confusion:&lt;/p&gt;\n\n&lt;p&gt;Interface Builder does not handle auto-sizing cell set-up properly. Even if your constraints are  absolutely valid, IB will still complain and give you confusing suggestions and errors. The reason is that IB is unwilling to change the row&apos;s height as your constraints dictate (so that the cell fits around your content). Instead, it keeps the row&apos;s height fixed and starts suggesting you change your constraints, which &lt;strong&gt;&lt;em&gt;you should ignore&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example, imagine you&apos;ve set up everything fine, no warnings, no errors, all works.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qafNl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qafNl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now if you change the font size (in this example I&apos;m changing the description label font size from 17.0 to 18.0).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/PSelQ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/PSelQ.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Because the font size increased, the label now wants to occupy 3 rows (before that it was occupying 2 rows).&lt;/p&gt;\n\n&lt;p&gt;If Interface Builder worked as expected, it would resize the cell&apos;s height to accommodate the new label height. However what actually happens is that IB displays the red auto-layout error icon and suggest that you modify hugging/compression priorities.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rUzCn.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rUzCn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You should ignore these warnings. What you can* do instead is to manually change the row&apos;s height in (select Cell &amp;gt; Size Inspector &amp;gt; Row Height).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/oC0pw.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/oC0pw.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I was changing this height one click at a time (using the up/down stepper) until the red arrow errors disappear! (you will actually get yellow warnings, at which point just go ahead and do &apos;update frames&apos;, it should all work).&lt;/p&gt;\n\n&lt;p&gt;* Note that you don&apos;t actually have to resolve these red errors or yellow warnings in Interface Builder - at runtime, everything will work correctly (even if IB shows errors/warnings). Just make sure that at runtime in the console log you&apos;re not getting any AutoLayout errors. \n&lt;br&gt;&lt;br&gt;\nIn fact trying to always update row height in IB is super annoying and sometimes close to impossible (because of fractional values).\n&lt;br&gt;&lt;br&gt;\nTo prevent the annoying IB warnings/errors, you can select the views involved and in &lt;code&gt;Size Inspector&lt;/code&gt; for the property &lt;code&gt;Ambiguity&lt;/code&gt; choose &lt;code&gt;Verify Position Only&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/LR7cI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/LR7cI.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Xcode 8.x / Xcode 9.x seems to (sometimes) be doing things differently than Xcode 7.x, but still incorrectly. For example even when &lt;code&gt;compression resistance priority&lt;/code&gt; / &lt;code&gt;hugging priority&lt;/code&gt; are set to required (1000), Interface Builder might stretch or clip a label to fit the cell (instead of resizing cell height to fit around the label). And in such a case it might not even show any AutoLayout warnings or errors. Or sometimes it does exactly what Xcode 7.x did, described above.&lt;/p&gt;\n    ","\n&lt;p&gt;In case people are still having trouble with this.  I wrote a quick blog post about using Autolayout with UITableViews &lt;a href=&quot;http://www.raizlabs.com/dev/2014/02/leveraging-auto-layout-for-dynamic-cell-heights/&quot;&gt;Leveraging Autolayout For Dynamic Cell Heights&lt;/a&gt; as well as an open source component to help make this more abstract and easier to implement.\n&lt;a href=&quot;https://github.com/Raizlabs/RZCellSizeManager&quot;&gt;https://github.com/Raizlabs/RZCellSizeManager&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As long as your layout in your cell is good.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;-(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; tableView:tableView cellForRowAtIndexPath:indexPath];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [cell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;].height;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Update:  You should use dynamic resizing introduced in iOS 8.&lt;/p&gt;\n    ","\n&lt;p&gt;To set automatic dimension for row height &amp;amp; estimated row height, ensure following steps to make, auto dimension effective for cell/row height layout. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Assign and implement tableview dataSource and delegate&lt;/li&gt;\n&lt;li&gt;Assign &lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt; to rowHeight &amp;amp; estimatedRowHeight&lt;/li&gt;\n&lt;li&gt;Implement delegate/dataSource methods (i.e. &lt;code&gt;heightForRowAt&lt;/code&gt; and return a value &lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt; to it)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;-&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Objective C:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// in ViewController.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#import &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ViewController&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;UIViewController&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;UITableViewDelegate&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;UITableViewDataSource&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;UITableView&lt;/span&gt; * table;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@end&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// in ViewController.m&lt;/span&gt;\n\n- (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)viewDidLoad {\n    [&lt;span class=&quot;hljs-variable language_&quot;&gt;super&lt;/span&gt; viewDidLoad];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.dataSource = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.delegate = &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.rowHeight = &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.table.estimatedRowHeight = &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n}\n\n-(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;hljs-built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Swift:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; table: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;!\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t forget to set dataSource and delegate for table&lt;/span&gt;\n    table.dataSource &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n    table.delegate &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set automatic dimensions for row height&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.2 onwards&lt;/span&gt;\n    table.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n    table.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.1 and below&lt;/span&gt;\n    table.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    table.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n\n}\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// UITableViewAutomaticDimension calculates height of label contents/text&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.2 onwards&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;.automaticDimension\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Swift 4.1 and below&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For label instance in UITableviewCell&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Set number of lines = 0 (&amp;amp; line break mode = truncate tail)&lt;/li&gt;\n&lt;li&gt;Set all constraints (top, bottom, right left) with respect to its superview/ cell container.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Optional&lt;/em&gt;: Set minimum height for label, if you want minimum vertical area covered by label, even if there is no data.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/T354s.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&apos;ve more than one labels (UIElements) with dynamic length, which should be adjusted according to its content size: Adjust &apos;Content Hugging and Compression Resistance Priority` for labels which you want to expand/compress with higher priority.&lt;/p&gt;\n    ","\n&lt;p&gt;Like &lt;a href=&quot;https://stackoverflow.com/users/287403/bob-spryn&quot;&gt;@Bob-Spryn&lt;/a&gt; I ran into an important enough gotcha that I&apos;m posting this as an answer.&lt;/p&gt;\n\n&lt;p&gt;I struggled with &lt;a href=&quot;https://stackoverflow.com/a/18746930/2591612&quot;&gt;@smileyborg&apos;s&lt;/a&gt; answer for a while. The gotcha that I ran into is if you&apos;ve defined your prototype cell in IB with additional elements (&lt;code&gt;UILabels&lt;/code&gt;, &lt;code&gt;UIButtons&lt;/code&gt;, etc.) in IB when you instantiate the cell with [&lt;code&gt;[YourTableViewCellClass alloc] init]&lt;/code&gt; it will not instantiate all the other elements within that cell unless you&apos;ve written code to do that. (I had a similar experience with &lt;code&gt;initWithStyle&lt;/code&gt;.)&lt;/p&gt;\n\n&lt;p&gt;To have the storyboard instantiate all the additional elements obtain your cell with &lt;code&gt;[tableView dequeueReusableCellWithIdentifier:@&quot;DoseNeeded&quot;]&lt;/code&gt; (Not &lt;code&gt;[tableView dequeueReusableCellWithIdentifier:forIndexPath:]&lt;/code&gt; as this&apos;ll cause interesting problems.) When you do this all the elements you defined in IB will be instantiated.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.raywenderlich.com/73602/dynamic-table-view-cell-height-auto-layout&quot;&gt;Dynamic Table View Cell Height and Auto Layout&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A good way to solve the problem with storyboard Auto Layout:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;- (&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)heightForImageCellAtIndexPath:(&lt;span class=&quot;hljs-built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; RWImageCell *sizingCell = &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^{\n    sizingCell = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier:RWImageCellIdentifier];\n  });\n\n  [sizingCell setNeedsLayout];\n  [sizingCell layoutIfNeeded];\n\n  &lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt; size = [sizingCell.contentView systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutFittingCompressedSize&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; size.height;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;343.0&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Xa4V8.jpg&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Xa4V8.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Another &quot;solution&quot;: skip all this frustration and use a UIScrollView instead to get a result that looks and feels identical to UITableView.&lt;/p&gt;\n&lt;p&gt;That was the painful &quot;solution&quot; for me, after having put in literally 20+ very frustrating hours total trying to build something like what smileyborg suggested and failing over many months and three versions of App Store releases.&lt;/p&gt;\n&lt;p&gt;My take is that if you really need iOS 7 support (for us, it&apos;s essential) then the technology is just too brittle and you&apos;ll pull your hair out trying. And that UITableView is complete overkill generally unless you&apos;re using some of the advanced row editing features and/or really need to support 1000+ &quot;rows&quot; (in our app, it&apos;s realistically never more than 20 rows).&lt;/p&gt;\n&lt;p&gt;The added bonus is that the code gets insanely simple versus all the delegate crap and back and forth that comes with UITableView. It&apos;s just one single loop of code in viewOnLoad that looks elegant and is easy to manage.&lt;/p&gt;\n&lt;p&gt;Here are some tips on how to do it:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Using either Storyboard or a nib file, create a ViewController and associated root view.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Drag over a UIScrollView onto your root view.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add constraints top, bottom, left, and right constraints to the top-level view so the UIScrollView fills the entire root view.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add a UIView inside the UIScrollView and call it &quot;container&quot;. Add top, bottom, left and right constraints to the UIScrollView (its parent). KEY TRICK: Also add an &quot;Equal widths&quot; constraint to link the UIScrollView and UIView.&lt;/p&gt;\n&lt;p&gt;NOTE: You will get an error &quot;scroll view has ambiguous scrollable content height&quot; and that your container UIView should have a height of 0 pixels. Neither error seems to matter when the app is running.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create nib files and controllers for each of your &quot;cells&quot;. Use UIView not UITableViewCell.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In your root ViewController, you essentially add all the &quot;rows&quot; to the container UIView and programmatically add constraints linking their left and right edges to the container view, their top edges to either the container view top (for the first item) or the previous cell. Then link the final cell to the container bottom.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;For us, each &quot;row&quot; is in a nib file. So the code looks something like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;YourRootViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; container: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;! &lt;span class=&quot;hljs-comment&quot;&gt;//container mentioned in step 4&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastView: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;?\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; yourDataSource {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;YourCellController&lt;/span&gt;(nibName: &lt;span class=&quot;hljs-string&quot;&gt;&quot;YourCellNibName&quot;&lt;/span&gt;, bundle: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n            &lt;span class=&quot;hljs-type&quot;&gt;UITools&lt;/span&gt;.addViewToTop(container, child: cell.view, sibling: lastView)\n            lastView &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; cell.view\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Insert code here to populate your cell&lt;/span&gt;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(lastView &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n            container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n                item: lastView&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;,\n                attribute: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Bottom&lt;/span&gt;,\n                relatedBy: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n                toItem: container,\n                attribute: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Bottom&lt;/span&gt;,\n                multiplier: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n                constant: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;///Add a refresh control, if you want - it seems to work fine in our app:&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; refreshControl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UIRefreshControl&lt;/span&gt;()\n        container.addSubview(refreshControl&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And here&apos;s the code for UITools.addViewToTop:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITools&lt;/span&gt; {\n    ///&lt;span class=&quot;hljs-type&quot;&gt;Add&lt;/span&gt; child to container, full width of the container and directly under sibling (&lt;span class=&quot;hljs-title&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; func addViewToTop(&lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UIView&lt;/span&gt;? = &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt;)\n    {\n        child.setTranslatesAutoresizingMaskIntoConstraints(&lt;span class=&quot;hljs-title&quot;&gt;false&lt;/span&gt;)\n        container.addSubview(&lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;)\n        \n        //&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; left and right constraints so fills full horz width:\n        \n        container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Leading&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;relatedBy&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;toItem&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Left&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;multiplier&lt;/span&gt;: 1,\n            &lt;span class=&quot;hljs-title&quot;&gt;constant&lt;/span&gt;: 0))\n        \n        container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Trailing&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;relatedBy&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;toItem&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Right&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;multiplier&lt;/span&gt;: 1,\n            &lt;span class=&quot;hljs-title&quot;&gt;constant&lt;/span&gt;: 0))\n        \n        //&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; vertical position from last item (&lt;span class=&quot;hljs-title&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;first&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;superview&lt;/span&gt;):\n        container.addConstraint(&lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title&quot;&gt;item&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;child&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Top&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;relatedBy&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutRelation&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Equal&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;toItem&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt; == &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt; ? &lt;span class=&quot;hljs-title&quot;&gt;container&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;attribute&lt;/span&gt;: &lt;span class=&quot;hljs-title&quot;&gt;sibling&lt;/span&gt; == &lt;span class=&quot;hljs-title&quot;&gt;nil&lt;/span&gt; ? &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Top&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutAttribute&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Bottom&lt;/span&gt;,\n            &lt;span class=&quot;hljs-title&quot;&gt;multiplier&lt;/span&gt;: 1,\n            &lt;span class=&quot;hljs-title&quot;&gt;constant&lt;/span&gt;: 0))\n    }\n}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The only &quot;gotcha&quot; I&apos;ve found with this approach so far is that UITableView has a nice feature of &quot;floating&quot; section headers at the top of the view as you scroll. The above solution won&apos;t do that unless you add more programming but for our particular case this feature wasn&apos;t 100% essential and nobody noticed when it went away.&lt;/p&gt;\n&lt;p&gt;If you want dividers between your cells, just add a 1 pixel high UIView at the bottom of your custom &quot;cell&quot; that looks like a divider.&lt;/p&gt;\n&lt;p&gt;Be sure to turn on &quot;bounces&quot; and &quot;bounce vertically&quot; for the refresh control to work and so it seems more like a tableview.&lt;/p&gt;\n&lt;p&gt;TableView shows some empty rows and dividers under your content, if it doesn&apos;t fill the full screen where as this solution doesn&apos;t. But personally, I prefer if those empty rows weren&apos;t there anyway - with variable cell height it always looked &quot;buggy&quot; to me anyway to have the empty rows in there.&lt;/p&gt;\n&lt;p&gt;Here&apos;s hoping some other programmer reads my post BEFORE wasting 20+ hours trying to figure it out with Table View in their own app. :)&lt;/p&gt;\n    ","\n&lt;p&gt;I had to use dynamic views (setup views and constraints by code) and when I wanted to set preferredMaxLayoutWidth label&apos;s width was 0. So I&apos;ve got wrong cell height.&lt;/p&gt;\n\n&lt;p&gt;Then I added &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[cell layoutSubviews]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before executing&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;[cell setNeedsUpdateConstraints]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;hljs-section&quot;&gt;[cell updateConstraintsIfNeeded]&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that label&apos;s width was as expected and dynamic height was calculating right.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s say you have a cell with a subview, and you want the cell&apos;s height to be high enough to encompass the subview + padding.&lt;/p&gt;\n\n&lt;p&gt;1) Set the subview&apos;s bottom constraint equal to the cell.contentView minus the padding you want. Do not set constraints on the cell or cell.contentView itself.&lt;/p&gt;\n\n&lt;p&gt;2) Set either the tableView&apos;s &lt;code&gt;rowHeight&lt;/code&gt; property or &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; to &lt;code&gt;UITableViewAutomaticDimension&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;3) Set either the tableView&apos;s &lt;code&gt;estimatedRowHeight&lt;/code&gt; property or &lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt; to a best guess of the height.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s it.&lt;/p&gt;\n    ","\n&lt;p&gt;If you do you layout programmatically, here is what to consider for iOS 10 using anchors in Swift.&lt;/p&gt;\n\n&lt;p&gt;There are three rules/ steps&lt;/p&gt;\n\n&lt;p&gt;NUMBER 1: set this two properties of tableview on viewDidLoad, the first one is telling to the tableview that should expect dynamic sizes on their cells, the second one is just to let the app calculate the size of the scrollbar indicator, so it helps for performance.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n    &lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;NUMBER 2: This is important you need to add the subviews to the contentView of the cell not to the view, and also use its layoutsmarginguide to anchor the subviews to the top and bottom, this is a working example of how to do it.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;override &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: UITableViewCellStyle, &lt;span class=&quot;hljs-attr&quot;&gt;reuseIdentifier&lt;/span&gt;: String?) {\n    super.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: style, &lt;span class=&quot;hljs-attr&quot;&gt;reuseIdentifier&lt;/span&gt;: reuseIdentifier)\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setUpViews&lt;/span&gt;()\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; func &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setUpViews&lt;/span&gt;() {\n\n    contentView.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;addSubview&lt;/span&gt;(movieImageView)\n    contentView.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;addSubview&lt;/span&gt;(descriptionLabel)\n    let marginGuide = contentView.layoutMarginsGuide\n\n    NSLayoutConstraint.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;activate&lt;/span&gt;([\n        movieImageView.heightAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalToConstant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;),\n        movieImageView.widthAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalToConstant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;),\n        movieImageView.leftAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.leftAnchor),\n        movieImageView.topAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.topAnchor, &lt;span class=&quot;hljs-attr&quot;&gt;constant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n\n        descriptionLabel.leftAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: movieImageView.rightAnchor, &lt;span class=&quot;hljs-attr&quot;&gt;constant&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;),\n        descriptionLabel.rightAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.rightAnchor),\n        descriptionLabel.bottomAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: marginGuide.bottomAnchor, &lt;span class=&quot;hljs-attr&quot;&gt;constant&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;),\n        descriptionLabel.topAnchor.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;constraint&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;equalTo&lt;/span&gt;: movieImageView.topAnchor)\n\n        ])\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create a method that will add the subviews and perform the layout, call it in the init method. &lt;/p&gt;\n\n&lt;p&gt;NUMBER 3: DON&apos;T CALL THE METHOD:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you do it you will override your implementation.&lt;/p&gt;\n\n&lt;p&gt;Follow this 3 rules for dynamic cells in tableviews.&lt;/p&gt;\n\n&lt;p&gt;here is a working implementation \n&lt;a href=&quot;https://github.com/jamesrochabrun/MinimalViewController&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/jamesrochabrun/MinimalViewController&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have a &lt;strong&gt;long&lt;/strong&gt; string. e.g. one which &lt;strong&gt;doesn&apos;t&lt;/strong&gt; have a line break. Then you you might run into some problems.&lt;/p&gt;\n\n&lt;p&gt;The &quot;alleged&quot; fix is mentioned by the accepted answer and few other answers. You just need to add&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;cell.myCellLabel.preferredMaxLayoutWidth&lt;/span&gt; = tableView.bounds.width\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I find &lt;a href=&quot;https://stackoverflow.com/a/36422189/5175709&quot;&gt;Suragh&apos;s answer&lt;/a&gt; the most complete and &lt;strong&gt;concise&lt;/strong&gt;, hence not confusing. &lt;/p&gt;\n\n&lt;p&gt;Though non explain &lt;strong&gt;why&lt;/strong&gt; these changes are needed. Let&apos;s do that. &lt;/p&gt;\n\n&lt;p&gt;Drop the following code in to a project. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; UIKit\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ViewController&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;UIViewController&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; label : &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; lbl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UILabel&lt;/span&gt;()\n        lbl.translatesAutoresizingMaskIntoConstraints &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n        lbl.backgroundColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .red\n        lbl.textColor &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .black\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lbl\n    }()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step0: (0.0, 0.0)&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;empty Text intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step1: (29.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiiiii&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hiiiii intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step2: (328.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;translatesAutoresizingMaskIntoConstraints&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 translate intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step3: (992.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;translatesAutoresizingMaskIntoConstraints translatesAutoresizingMaskIntoConstraints translatesAutoresizingMaskIntoConstraints&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step4: (328.0, 20.5)&lt;/span&gt;\n        label.text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;translatesAutoresizingMaskIntoConstraints&lt;span class=&quot;hljs-subst&quot;&gt;\\n&lt;/span&gt;translatesAutoresizingMaskIntoConstraints&lt;span class=&quot;hljs-subst&quot;&gt;\\n&lt;/span&gt;translatesAutoresizingMaskIntoConstraints&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate w/ line breaks (but the line breaks get ignored, because numberOfLines is defaulted to `1` and it will force it all to fit into one line! intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step5: (328.0, 61.0)&lt;/span&gt;\n        label.numberOfLines &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate w/ line breaks and &apos;0&apos; numberOfLines intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ----------&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// step6: (98.5, 243.5)&lt;/span&gt;\n        label.preferredMaxLayoutWidth &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3 translate w/ line breaks | &apos;0&apos; numberOfLines | preferredMaxLayoutWidth: 100 intrinsicContentSize: &lt;span class=&quot;hljs-subst&quot;&gt;\\(label.intrinsicContentSize)&lt;/span&gt;&quot;&lt;/span&gt;)\n\n        setupLayout()\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setupLayout&lt;/span&gt;(){\n        view.addSubview(label)\n        label.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n        label.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that I haven&apos;t added any &lt;em&gt;size&lt;/em&gt; constraints. I&apos;ve only added centerX, centerY constraints. But still the label will be sized correctly Why? &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Because of &lt;code&gt;contentSize&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To better process this, first keep step0, then comment out out steps 1-6. Let &lt;code&gt;setupLayout()&lt;/code&gt; stay. Observe the behavior. &lt;/p&gt;\n\n&lt;p&gt;Then uncomment step1, and observe.&lt;/p&gt;\n\n&lt;p&gt;Then uncomment step2 and observe. &lt;/p&gt;\n\n&lt;p&gt;Do this until you&apos;ve uncommented all 6 steps and observed their behaviors. &lt;/p&gt;\n\n&lt;h1&gt;What can conclude from all this? What factors can change the &lt;code&gt;contenSize&lt;/code&gt;?&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Text Length:&lt;/strong&gt; If you have a longer text then your intrinsicContentSize&apos;s &lt;em&gt;width&lt;/em&gt; will increase&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Line breaks:&lt;/strong&gt; If you add &lt;code&gt;\\n&lt;/code&gt; then the intrinsicContentSize&apos;s width will the maximum width of all lines. If one line has 25 characters, another has 2 characters and another has 21 characters then your width will be calculated based the 25 characters&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Number of allowed lines:&lt;/strong&gt; You must set the &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; otherwise the you won&apos;t have multiple lines. Your &lt;code&gt;numberOfLines&lt;/code&gt; will adjust your intrinsicContentSize&apos;s &lt;em&gt;height&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Making adjustments:&lt;/strong&gt; Imagine that based on your text, your intrinsicContentSize&apos;s width was &lt;code&gt;200&lt;/code&gt; and height was &lt;code&gt;100&lt;/code&gt;, but you wanted to limited the width to the label&apos;s container what are you going to do? The solution is to set it to a desired width. You do that by setting &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uilabel/1620534-preferredmaxlayoutwidth&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;130&lt;/code&gt; then your new intrinsicContentSize will have a width of roughly &lt;code&gt;130&lt;/code&gt;. The height would obviously be more than &lt;code&gt;100&lt;/code&gt; because you&apos;d need more lines. \nThat being said if your constraints are set correctly then you won&apos;t need to use this at all! For more on that see &lt;a href=&quot;https://stackoverflow.com/a/52709988/5175709&quot;&gt;this answer&lt;/a&gt; and its comments. You only need to use &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt; if you don&apos;t have constraints restricting the width/height as in one might say &quot;don&apos;t wrap the text unless it exceeds the &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;&quot;. But with 100% certainty if you set the leading/trailing and &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; then you&apos;re good! &lt;strong&gt;Long story short most answers here which recommend using it are WRONG! You don&apos;t need it. Needing it is a sign that your constraints are not set correctly or that you just don&apos;t have constraints&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Font Size:&lt;/strong&gt; Also note that if you increase your fontSize then the intrinsicContentSize&apos;s &lt;em&gt;height&lt;/em&gt; will increase. I didn&apos;t show that in my code. You can try that on your own.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;So back to your tableViewCell example:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;All you need to do is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;set the &lt;code&gt;numberOfLines&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;constrain the label correctly to the margins/edges&lt;/li&gt;\n&lt;li&gt;There is no need to set &lt;code&gt;preferredMaxLayoutWidth&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;In my case i have to create a custom cell with a image which is coming from server and can be of any width and height. And two UILabels with dynamic size(both width &amp;amp; height)&lt;/p&gt;\n\n&lt;p&gt;i have achieved the same here in my answer with autolayout and programmatically:&lt;/p&gt;\n\n&lt;p&gt;Basically above @smileyBorg answer helped but systemLayoutSizeFittingSize never worked for me, In my approach :&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;1. No use of automatic row height calculation property. 2.No use of estimated height 3.No need of unnecessary updateConstraints. 4.No use of Automatic Preferred Max Layout Width. 5. No use of &lt;strong&gt;systemLayoutSizeFittingSize&lt;/strong&gt; (should have use but not working for me, i dont know what it is doing internally), but instead my method -(float)getViewHeight working and i know what it&apos;s doing internally.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37235605/is-it-possible-to-have-differing-heights-in-a-uitableview-cell-when-i-use-severa/37236303#37236303&quot;&gt;Is it possible to have differing heights in a UITableView Cell when I use several different ways of displaying the cell?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In my case, the padding was because of the sectionHeader and sectionFooter heights, where storyboard allowed me to change it to minimum 1. So in viewDidLoad method:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.sectionHeaderHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.sectionFooterHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just did some dumb try and error with the 2 values of &lt;code&gt;rowHeight&lt;/code&gt; and &lt;code&gt;estimatedRowHeight&lt;/code&gt; and just thought it might provide some debugging insight:&lt;/p&gt;\n\n&lt;p&gt;If you set them both OR only set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; you will get the desired behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1.00001&lt;/span&gt; // MUST be greater than &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s suggested that you do your best to get the correct estimate, but the end result isn&apos;t different. It will just affect your performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/b8pfSl.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/b8pfSl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you only set the rowHeight ie only do:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;your end result would not be as desired:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/koQnPl.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/koQnPl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt; &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you set the &lt;code&gt;estimatedRowHeight&lt;/code&gt; to 1 or smaller then you will &lt;strong&gt;crash&lt;/strong&gt; regardless of the &lt;code&gt;rowHeight&lt;/code&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;tableView.rowHeight&lt;/span&gt; = UITableViewAutomaticDimension\n&lt;span class=&quot;hljs-attr&quot;&gt;tableView.estimatedRowHeight&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I crashed with the following error message:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-delphi&quot;&gt;Terminating app due &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; uncaught exception\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;NSInternalInconsistencyException&apos;&lt;/span&gt;, reason: &lt;span class=&quot;hljs-string&quot;&gt;&apos;table view row height\nmust not be negative - provided height for index path (&amp;lt;NSIndexPath:\n0xc000000000000016&amp;gt; {length = 2, path = 0 - 0}) is -1.000000&apos;&lt;/span&gt;\n    ...some other lines...\n\nlibc++abi.dylib: terminating &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; uncaught exception &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;\nNSException\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With regard to the accepted answer by @smileyborg, I have found&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to be unreliable in some cases where constraints are ambiguous.  Better to force the layout engine to calculate the height in one direction, by using the helper category on UIView below:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;-(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)systemLayoutHeightForWidth:(&lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt;)w{\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; setNeedsLayout];\n    [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; layoutIfNeeded];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGSize&lt;/span&gt; size = [&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; systemLayoutSizeFittingSize:&lt;span class=&quot;hljs-built_in&quot;&gt;CGSizeMake&lt;/span&gt;(w, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) withHorizontalFittingPriority:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutPriorityRequired&lt;/span&gt; verticalFittingPriority:&lt;span class=&quot;hljs-built_in&quot;&gt;UILayoutPriorityFittingSizeLevel&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;CGFloat&lt;/span&gt; h = size.height;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where w: is the width of the tableview&lt;/p&gt;\n    ","\n&lt;p&gt;Simply add these two functions in your viewcontroller it will solve your problem. Here, list is a string array which contain your string of every row.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, \n   &lt;span class=&quot;hljs-params&quot;&gt;estimatedHeightForRowAt&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;IndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n        tableView.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.calculateHeight(inString: list[indexPath.row])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (tableView.rowHeight) \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calculateHeight&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;inString&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; messageString &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; input.text\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; attributes : [&lt;span class=&quot;hljs-type&quot;&gt;NSAttributedStringKey&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;NSAttributedStringKey&lt;/span&gt;(rawValue: &lt;span class=&quot;hljs-type&quot;&gt;NSAttributedStringKey&lt;/span&gt;.font.rawValue) : &lt;span class=&quot;hljs-type&quot;&gt;UIFont&lt;/span&gt;.systemFont(ofSize: &lt;span class=&quot;hljs-number&quot;&gt;15.0&lt;/span&gt;)]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; attributedString : &lt;span class=&quot;hljs-type&quot;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSAttributedString&lt;/span&gt;(string: messageString&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, attributes: attributes)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; rect : &lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; attributedString.boundingRect(with: &lt;span class=&quot;hljs-type&quot;&gt;CGSize&lt;/span&gt;(width: &lt;span class=&quot;hljs-number&quot;&gt;222.0&lt;/span&gt;, height: &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;.greatestFiniteMagnitude), options: .usesLineFragmentOrigin, context: &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; requredSize:&lt;span class=&quot;hljs-type&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rect\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; requredSize.height\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;swift &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableViewHeightConstraint: &lt;span class=&quot;hljs-type&quot;&gt;NSLayoutConstraint&lt;/span&gt;!\n    &lt;span class=&quot;hljs-keyword&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tableView: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;!\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.tableView.addObserver(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, forKeyPath: &lt;span class=&quot;hljs-string&quot;&gt;&quot;contentSize&quot;&lt;/span&gt;, options: [.new,.prior], context: &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;context)\n    }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Added observer to adjust tableview height based on the content&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;observeValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;forKeyPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;keyPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?, &lt;span class=&quot;hljs-params&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;change&lt;/span&gt;: [&lt;span class=&quot;hljs-params&quot;&gt;NSKeyValueChangeKey&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;context&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UnsafeMutableRawPointer&lt;/span&gt;?) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; context &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.context{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; size &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; change&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;NSKeyValueChangeKey&lt;/span&gt;.newKey] &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CGSize&lt;/span&gt;{\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----&quot;&lt;/span&gt;)\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(size.height)\n                tableViewHeightConstraint.constant &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; size.height &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;\n            }\n        }\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Remove observer&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;deinit&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;NotificationCenter&lt;/span&gt;.default.removeObserver(&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;)\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the cell height is dynamic by the content, you should precisely count it out and then return the height value before the cell is rendered. An easy way is to define the counting method in the table view cell code for controller to call at the table cell height delegate method. Don&apos;t forget to count out the &lt;strong&gt;real cell frame width&lt;/strong&gt; (default is 320) if the height is rely on the width of the table or screen. That is, &lt;strong&gt;in the table cell height delegate method, use cell.frame to correct the cell width first, then call the counting height method defined in the cell to get the suitable value and return it&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;PS. The code for generating cell object could be defined in another method for different table view cell delegate method to call.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;UITableView.automaticDimension&lt;/code&gt; can be set via Interface Builder:&lt;/p&gt;\n\n&lt;p&gt;Xcode &amp;gt; Storyboard &amp;gt; Size Inspector&lt;/p&gt;\n\n&lt;p&gt;Table View Cell &amp;gt; Row Height &amp;gt; &lt;strong&gt;Automatic&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/FsczL.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/FsczL.png&quot; alt=&quot;Size Inspector&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;yet another iOs7+iOs8 solution in Swift&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cell2height:&lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()\n    theTable.rowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    theTable.estimatedRowHeight &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44.0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;cellForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewCell&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; cell &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;  tableView.dequeueReusableCellWithIdentifier(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myTableViewCell&quot;&lt;/span&gt;, forIndexPath: indexPath) &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; myTableViewCell\n    cell2height&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;cell.contentView.height\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tableView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;tableView&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;heightForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;indexPath&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;NSIndexPath&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;CGFloat&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;#available&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8.0&lt;/span&gt;, &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cell2height\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"353":["\n&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt; python statements require &lt;code&gt;truth&lt;/code&gt;-values. For &lt;code&gt;pandas&lt;/code&gt;, these are considered ambiguous so you should use &quot;bitwise&quot; &lt;code&gt;|&lt;/code&gt; (or) or &lt;code&gt;&amp;amp;&lt;/code&gt; (and) operations:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These are overloaded for these kinds of data structures to yield the element-wise &lt;code&gt;or&lt;/code&gt; or &lt;code&gt;and&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Just to add some more explanation to this statement:&lt;/p&gt;\n&lt;p&gt;The exception is thrown when you want to get the &lt;code&gt;bool&lt;/code&gt; of a &lt;code&gt;pandas.Series&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(x)\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What you hit was a place where the operator &lt;strong&gt;implicitly&lt;/strong&gt; converted the operands to &lt;code&gt;bool&lt;/code&gt; (you used &lt;code&gt;or&lt;/code&gt; but it also happens for &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; x\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; x\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fun&apos;&lt;/span&gt;)\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; x:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fun&apos;&lt;/span&gt;)\nValueError: The truth value of a Series &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; ambiguous. Use a.empty, a.&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(), a.item(), a.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; a.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;().\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Besides these 4 statements there are several python functions that hide some &lt;code&gt;bool&lt;/code&gt; calls (like &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, ...) these are normally not problematic with &lt;code&gt;pandas.Series&lt;/code&gt; but for completeness I wanted to mention these.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;In your case, the exception isn&apos;t really helpful, because it doesn&apos;t mention the &lt;strong&gt;right alternatives&lt;/strong&gt;. For &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;, if you want element-wise comparisons, you can use:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;numpy.logical_or&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n  &amp;gt;&amp;gt;&amp;gt; np.logical_or(x, y)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or simply the &lt;code&gt;|&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x | y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;numpy.logical_and&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; np.logical_and(x, y)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or simply the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x &amp;amp; y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you&apos;re using the operators, then be sure to set your parentheses correctly because of &lt;a href=&quot;https://docs.python.org/reference/expressions.html#operator-precedence&quot; rel=&quot;noreferrer&quot;&gt;operator precedence&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;There are &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/routines.logic.html&quot; rel=&quot;noreferrer&quot;&gt;several logical numpy functions&lt;/a&gt; which &lt;em&gt;should&lt;/em&gt; work on &lt;code&gt;pandas.Series&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The alternatives mentioned in the Exception are more suited if you encountered it when doing &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;. I&apos;ll shortly explain each of these:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you want to check if your Series is &lt;strong&gt;empty&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([])\n  &amp;gt;&amp;gt;&amp;gt; x.empty\n  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; x.empty\n  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python normally interprets the &lt;code&gt;len&lt;/code&gt;gth of containers (like &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, ...) as truth-value if it has no explicit boolean interpretation. So if you want the python-like check, you could do: &lt;code&gt;if x.size&lt;/code&gt; or &lt;code&gt;if not x.empty&lt;/code&gt; instead of &lt;code&gt;if x&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If your &lt;code&gt;Series&lt;/code&gt; contains &lt;strong&gt;one and only one&lt;/strong&gt; boolean value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; (x &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;()\n  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n  &amp;gt;&amp;gt;&amp;gt; (x &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;()\n  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to check the &lt;strong&gt;first and only item&lt;/strong&gt; of your Series (like &lt;code&gt;.bool()&lt;/code&gt; but works even for not boolean contents):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; x.item()\n  &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to check if &lt;strong&gt;all&lt;/strong&gt; or &lt;strong&gt;any&lt;/strong&gt; item is not-zero, not-empty or not-False:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &amp;gt;&amp;gt;&amp;gt; x = pd.Series([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])\n  &amp;gt;&amp;gt;&amp;gt; x.&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;()   &lt;span class=&quot;hljs-comment&quot;&gt;# because one element is zero&lt;/span&gt;\n  &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n  &amp;gt;&amp;gt;&amp;gt; x.&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;()   &lt;span class=&quot;hljs-comment&quot;&gt;# because one (or more) elements are non-zero&lt;/span&gt;\n  &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Well pandas use bitwise &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; and each condition should be wrapped in a &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;For example following works&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data_query = data[(data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt;) &amp;amp; (data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But the same query without proper brackets does not&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data_query = data[(data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;2005&lt;/span&gt; &amp;amp; data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;2010&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For boolean logic, use &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;np.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\ndf = pd.DataFrame(np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABC&apos;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.950088&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.151357&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.103219&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.443863&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df.loc[(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.443863&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To see what is happening, you get a column of booleans for each comparison, e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\nName: C, dtype: &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you have multiple criteria, you will get multiple columns returned.  This is why the join logic is ambiguous.  Using &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt; treats each column separately, so you first need to reduce that column to a single boolean value.  For example, to see if any value or all values in each of the columns is True.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Any value in either column is True?&lt;/span&gt;\n(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;()\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# All values in either column is True?&lt;/span&gt;\n(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;()\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;One convoluted way to achieve the same thing is to zip all of these columns together, and perform the appropriate logic.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;df[[&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;([a, b]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a, b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]]\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.443863&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more details, refer to &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing&quot; rel=&quot;noreferrer&quot;&gt;Boolean Indexing&lt;/a&gt; in the docs.&lt;/p&gt;\n    ","\n&lt;p&gt;Or, alternatively, you could use Operator module. More detailed information is here &lt;a href=&quot;https://docs.python.org/2/library/operator.html&quot; rel=&quot;noreferrer&quot;&gt;Python docs&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\nnp.random.seed(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\ndf = pd.DataFrame(np.random.randn(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABC&apos;&lt;/span&gt;))\ndf.loc[operator.or_(df.C &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, df.C &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n          A         B         C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.764052&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.400157&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.978738&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.240893&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.867558&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.977278&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.410599&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.144044&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.454274&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.761038&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.121675&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.4438&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/36922103/1878788&quot;&gt;This excellent answer&lt;/a&gt; explains very well what is happening and provides a solution. I would like to add another solution that might be suitable in similar cases: using the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df.query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(col &amp;gt; 0.25) or (col &amp;lt; -0.25)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See also &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-query&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-query&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;(Some tests with a dataframe I&apos;m currently working with suggest that this method is a bit slower than using the bitwise operators on series of booleans: 2 ms vs. 870 µs)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A piece of warning&lt;/strong&gt;: At least one situation where this is not straightforward is when column names happen to be python expressions. I had columns named &lt;code&gt;WT_38hph_IP_2&lt;/code&gt;, &lt;code&gt;WT_38hph_input_2&lt;/code&gt; and &lt;code&gt;log2(WT_38hph_IP_2/WT_38hph_input_2)&lt;/code&gt; and wanted to perform the following query: &lt;code&gt;&quot;(log2(WT_38hph_IP_2/WT_38hph_input_2) &amp;gt; 1) and (WT_38hph_IP_2 &amp;gt; 20)&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I obtained the following exception cascade:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;KeyError: &apos;log2&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;UndefinedVariableError: name &apos;log2&apos; is not defined&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ValueError: &quot;log2&quot; is not a supported function&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I guess this happened because the query parser was trying to make something from the first two columns instead of identifying the expression with the name of the third column.&lt;/p&gt;\n&lt;p&gt;A possible workaround is proposed &lt;a href=&quot;https://stackoverflow.com/a/40083013/1878788&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This is quite a common question for beginners when making multiple conditions in Pandas. Generally speaking, there are two possible conditions causing this error:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Condition 1: Python Operator Precedence&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There is a paragraph of &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#boolean-indexing&quot; rel=&quot;nofollow noreferrer&quot;&gt;Boolean indexing | Indexing and selecting data  pandas documentation&lt;/a&gt; explains this&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Another common operation is the use of boolean vectors to filter the data. The operators are: &lt;code&gt;|&lt;/code&gt; for &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; for &lt;code&gt;and&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; for &lt;code&gt;not&lt;/code&gt;. These &lt;strong&gt;must&lt;/strong&gt; be grouped by using &lt;strong&gt;parentheses&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;By default Python will evaluate an expression such as &lt;code&gt;df[&apos;A&apos;] &amp;gt; 2 &amp;amp; df[&apos;B&apos;] &amp;lt; 3&lt;/code&gt; as &lt;code&gt;df[&apos;A&apos;] &amp;gt; (2 &amp;amp; df[&apos;B&apos;]) &amp;lt; 3&lt;/code&gt;, while the desired evaluation order is &lt;code&gt;(df[&apos;A&apos;] &amp;gt; 2) &amp;amp; (df[&apos;B&apos;] &amp;lt; 3)&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Wrong&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt; | df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are some possible ways to get rid off the parentheses, I will cover this later.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Condition 2: Improper Operator/Statement&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;As is explained in previous quotation, you need use &lt;code&gt;|&lt;/code&gt; for &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; for &lt;code&gt;and&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; for &lt;code&gt;not&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Wrong&lt;/span&gt;\n(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Another possible situation is that you are using a boolean Series in &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Wrong&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pd.Series([&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s clear that Python &lt;code&gt;if&lt;/code&gt; statement accepts boolean like expression rather than Pandas Series. You should use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.any.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.any&lt;/code&gt;&lt;/a&gt; or methods listed in the error message to convert the Series to a value according to your need.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].eq(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;# If you want all column values equal to zero&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do something&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Right&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].eq(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;():\n    &lt;span class=&quot;hljs-comment&quot;&gt;# If you want at least one column value equal to zero&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do something&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Let&apos;s talk about ways to escape the parentheses in the first situation.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Use Pandas mathematical functions&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Pandas has defined a lot of mathematical functions including comparison as follows:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.lt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.lt()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;less than&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.gt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.gt()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;greater than&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.le.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.le()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;less and equal&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.ge.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.ge()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;greater and equal&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.ne.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.ne()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;not equal&lt;/em&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.eq.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.eq()&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;equal&lt;/em&gt;;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;As a result, you can use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].lt(-&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].gt(&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.Series.between.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.Series.between()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If you want to select rows in between two values, you can use &lt;code&gt;pandas.Series.between&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt;= df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt;= right)&lt;/code&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right, inclusive=&apos;left)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt;= df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt; right)&lt;/code&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right, inclusive=&apos;right&apos;)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt; df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt;= right)&lt;/code&gt;;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;df[&apos;col].between(left, right, inclusive=&apos;neither&apos;)&lt;/code&gt; is equal to &lt;br&gt;\n&lt;code&gt;(left &amp;lt; df[&apos;col&apos;]) &amp;amp; (df[&apos;col&apos;] &amp;lt; right)&lt;/code&gt;;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df[df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].between(-&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;, inclusive=&lt;span class=&quot;hljs-string&quot;&gt;&apos;neither&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.DataFrame.query()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Document referenced before has a chapter &lt;a href=&quot;https://pandas.pydata.org/docs/user_guide/indexing.html#the-query-method&quot; rel=&quot;nofollow noreferrer&quot;&gt;The &lt;code&gt;query()&lt;/code&gt; Method&lt;/a&gt; explains this well.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;pandas.DataFrame.query()&lt;/code&gt; can help you select a DataFrame with a condition string. Within the query string, you can use both bitwise operators(&lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;) and their boolean cousins(&lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;). Moreover, you can omit the parentheses, but I don&apos;t recommend for readable reason.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df.query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;col &amp;lt; -0.25 or col &amp;gt; 0.25&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Use &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.eval.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;pandas.DataFrame.eval()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;code&gt;pandas.DataFrame.eval()&lt;/code&gt; evaluates a string describing operations on DataFrame columns. Thus, we can use this method to build our multiple condition. The syntax is same with &lt;code&gt;pandas.DataFrame.query()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;lt; -&lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;) | (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.25&lt;/span&gt;)]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# is equal to&lt;/span&gt;\n\ndf = df[df.&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;col &amp;lt; -0.25 or col &amp;gt; 0.25&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;pandas.DataFrame.query()&lt;/code&gt; and &lt;code&gt;pandas.DataFrame.eval()&lt;/code&gt; can do more things than I describe here, you are recommended to read their documentation and have fun with them.&lt;/p&gt;\n    ","\n&lt;p&gt;If you have more than one value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If its only a single value:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;col&apos;&lt;/span&gt;].item()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I was getting error in this command:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But it worked when I changed it to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; df &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to use bitwise operators &lt;code&gt;|&lt;/code&gt; instead of &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; instead of &lt;code&gt;and&lt;/code&gt; in pandas, you can&apos;t simply use the bool statements from python.&lt;br&gt;\n&lt;br&gt;\nFor much complex filtering create a &lt;code&gt;mask&lt;/code&gt; and apply the mask on the dataframe.&lt;br&gt;\nPut all your query in the mask and apply it.&lt;br&gt;\nSuppose,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mask = (df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col1&quot;&lt;/span&gt;]&amp;gt;=df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;]) &amp;amp; (stock[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col1&quot;&lt;/span&gt;]&amp;lt;=df[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;])\ndf_new = df[mask]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ll try to give the benchmark of the three most common way (also mentioned above):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; repeat\n\nsetup = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nimport numpy as np;\nimport random;\nx = np.linspace(0,100);\nlb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()\n&quot;&quot;&quot;&lt;/span&gt;\nstmts = &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[(x &amp;gt; lb) * (x &amp;lt;= ub)]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stmts:\n        t = &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(repeat(stmt, setup, number=&lt;span class=&quot;hljs-number&quot;&gt;100_000&lt;/span&gt;))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%.4f&apos;&lt;/span&gt; % t, stmt)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.4808&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4726&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4904&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.4725&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4806&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.5002&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.4781&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4336&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.4974&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But, &lt;code&gt;*&lt;/code&gt; is not supported in Panda Series, and NumPy Array is faster than pandas data frame (arround 1000 times slower, see number):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; repeat\n\nsetup = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\nimport numpy as np;\nimport random;\nimport pandas as pd;\nx = pd.DataFrame(np.linspace(0,100));\nlb, ub = np.sort([random.random() * 100, random.random() * 100]).tolist()\n&quot;&quot;&quot;&lt;/span&gt;\nstmts = &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stmts:\n        t = &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(repeat(stmt, setup, number=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%.4f&apos;&lt;/span&gt; % t, stmt)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1964&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.1992&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.2018&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.1838&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.1871&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n&lt;span class=&quot;hljs-number&quot;&gt;0.1883&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note: adding one line of code &lt;code&gt;x = x.to_numpy()&lt;/code&gt; will need about 20 µs.&lt;/p&gt;\n&lt;p&gt;For those who prefer &lt;code&gt;%timeit&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\nlb, ub = np.sort([random.random() * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, random.random() * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;]).tolist()\nlb, ub\nx = pd.DataFrame(np.linspace(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asterik&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    x = x.to_numpy()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[(x &amp;gt; lb) * (x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;and_symbol&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    x = x.to_numpy()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[(x &amp;gt; lb) &amp;amp; (x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;numpy_logical&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    x = x.to_numpy()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[np.logical_and(x &amp;gt; lb, x &amp;lt;= ub)]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n    %timeit asterik(x)\n    %timeit and_symbol(x)\n    %timeit numpy_logical(x)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;3.62&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;35.6&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;9.53&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;31.3&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;8.9&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n\n\n&lt;span class=&quot;hljs-number&quot;&gt;21.4&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;3.35&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;21.9&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;1.02&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;21.7&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n\n\n&lt;span class=&quot;hljs-number&quot;&gt;25.1&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;3.71&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;36.8&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;18.3&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-number&quot;&gt;28.2&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;5.97&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I encountered the same error and got stalled with a pyspark dataframe for few days, &lt;strong&gt;&lt;em&gt;I was able to resolve it successfully by filling na values with 0&lt;/em&gt;&lt;/strong&gt; since I was comparing integer values from 2 fields.&lt;/p&gt;\n    ","\n&lt;p&gt;One minor thing, which wasted my time.&lt;/p&gt;\n&lt;p&gt;Put the conditions(if comparing using &quot; = &quot;, &quot; != &quot;) in parenthesis, failing to do so also raises this exception.\nThis will work&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[(some condition) conditional operator (some conditions)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will not&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[some condition conditional-operator some condition]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"354":["\n&lt;p&gt;&lt;sub&gt;(the following is extracted from &lt;a href=&quot;https://commonsware.com/blog/2015/08/31/hey-where-did-my-permission-go.html&quot; rel=&quot;noreferrer&quot;&gt;a blog post of mine about this&lt;/a&gt;)&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;The big reason for not getting your permission nowadays is because\nyour project has a &lt;code&gt;targetSdkVersion&lt;/code&gt; of 23 or higher, and the permission\nthat you are requesting is &quot;dangerous&quot;. In Android 6.0, this includes:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;ACCEPT_HANDOVER&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ACCESS_BACKGROUND_LOCATION&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ACCESS_MEDIA_LOCATION&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ACTIVITY_RECOGNITION&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ANSWER_PHONE_CALLS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ACCESS_COARSE_LOCATION&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ACCESS_FINE_LOCATION&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ADD_VOICEMAIL&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;BODY_SENSORS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;CALL_PHONE&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;CAMERA&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;GET_ACCOUNTS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;PROCESS_OUTGOING_CALLS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_CALENDAR&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_CALL_LOG&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_CELL_BROADCASTS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_CONTACTS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_PHONE_STATE&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;READ_SMS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;RECEIVE_MMS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;RECEIVE_SMS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;RECEIVE_WAP_PUSH&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;RECORD_AUDIO&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;SEND_SMS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;USE_SIP&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;WRITE_CALENDAR&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;WRITE_CALL_LOG&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;WRITE_CONTACTS&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For these permissions, not only does your &lt;code&gt;targetSdkVersion&lt;/code&gt; 23+ app\nneed to have the &lt;code&gt;&amp;lt;uses-permission&amp;gt;&lt;/code&gt; element(s), but you also have\nto ask for those permissions at runtime from the user on Android 6.0+\ndevices, using methods like &lt;code&gt;checkSelfPermission()&lt;/code&gt; and\n&lt;code&gt;requestPermissions()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;As a temporary workaround, drop your &lt;code&gt;targetSdkVersion&lt;/code&gt; below 23.&lt;/p&gt;\n&lt;p&gt;However, eventually, you will have some reason to want your\n&lt;code&gt;targetSdkVersion&lt;/code&gt; to be 23 or higher. At that time, you will need\nto adjust your app to use the new runtime permission system.\nThe Android documentation has\n&lt;a href=&quot;http://developer.android.com/training/permissions/requesting.html&quot; rel=&quot;noreferrer&quot;&gt;a page dedicated to this topic&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Above API level 23 you will be given programmatically pragmatically like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;PERMISSION_REQUEST_CODE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (android.os.Build.VERSION.SDK_INT &amp;gt;= android.os.Build.VERSION_CODES.M) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (checkSelfPermission(Manifest.permission.SEND_SMS)\n                == PackageManager.PERMISSION_DENIED) {\n\n            Log.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;permission&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;permission denied to SEND_SMS - requesting it&quot;&lt;/span&gt;);\n            String[] permissions = {Manifest.permission.SEND_SMS};\n\n            requestPermissions(permissions, PERMISSION_REQUEST_CODE);\n\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;request permission pragmatically (after API 23)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.SEND_SMS)\n    != PackageManager.PERMISSION_GRANTED) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Permission is not granted &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Ask for permision&lt;/span&gt;\n    ActivityCompat.requestPermissions(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { Manifest.permission.SEND_SMS}, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); \n} \n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n&lt;span class=&quot;hljs-comment&quot;&gt;// Permission has already been granted&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&quot;If the app has the permission, the method checkSelfPermission() returns PERMISSION_GRANTED, and the app can proceed with the operation. &lt;/p&gt;\n\n&lt;p&gt;If the app does not have the permission, the method returns PERMISSION_DENIED, and the app has to explicitly ask the user for permission. You need to prompt the user for that permission, as shown in the above code. Calling requestPermissions() brings up a standard Android dialog, which you cannot customize.&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;Please go through the link below, \n&lt;a href=&quot;https://developer.android.com/guide/topics/permissions/overview.html&quot; rel=&quot;noreferrer&quot;&gt;https://developer.android.com/guide/topics/permissions/overview.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Some samples are also available there to get start with the permissions.&lt;/p&gt;\n\n&lt;p&gt;To make android more secure now developers has to mention permission in manifest as well as they should have to ask user as well in run time to get the work done. They are permission categorized in dangerous permission section which are mention below&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;CALENDAR&lt;/strong&gt;    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;READ_CALENDAR\n\nWRITE_CALENDAR\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CAMERA&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;CAMERA\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CONTACTS&lt;/strong&gt;    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;READ_CONTACTS\nWRITE_CONTACTS\nGET_ACCOUNTS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;LOCATION&lt;/strong&gt;    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ACCESS_FINE_LOCATION\nACCESS_COARSE_LOCATION\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;MICROPHONE&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;RECORD_AUDIO\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PHONE&lt;/strong&gt;   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;READ_PHONE_STATE\nREAD_PHONE_NUMBERS\nCALL_PHONE\n&lt;span class=&quot;hljs-title function_&quot;&gt;ANSWER_PHONE_CALLS&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(must request at runtime)&lt;/span&gt;\nREAD_CALL_LOG\nWRITE_CALL_LOG\nADD_VOICEMAIL\nUSE_SIP\nPROCESS_OUTGOING_CALLS\nANSWER_PHONE_CALLS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;SENSORS&lt;/strong&gt;     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;BODY_SENSORS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;SMS&lt;/strong&gt;     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;SEND_SMS\nRECEIVE_SMS\nREAD_SMS\nRECEIVE_WAP_PUSH\nRECEIVE_MMS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;STORAGE&lt;/strong&gt;     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;READ_EXTERNAL_STORAGE\nWRITE_EXTERNAL_STORAGE\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are using sdk 23 or higher then you must check run time permissions.&lt;/p&gt;\n    ","\n&lt;p&gt;when you declare &lt;code&gt;permisson&lt;/code&gt; in &lt;code&gt;Manifest&lt;/code&gt; and it&apos;s not work means you are performing Task in &lt;code&gt;MarshMallow&lt;/code&gt; and for &lt;code&gt;MarshMallow&lt;/code&gt; you have set Permisson at &lt;code&gt;RunTime&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;like this way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ActivityCompat.requestPermissions();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are using Android version &quot;23&quot; or &quot;23+&quot;, then app will show you errors when you are trying to access anything which requires user&apos;s permission. You have to ask for permissions at run-time even if you have declared those permissions in Android manifest.&lt;/p&gt;\n\n&lt;p&gt;Check this: &lt;a href=&quot;https://developer.android.com/training/permissions/requesting.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.android.com/training/permissions/requesting.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;But if you have created your whole application and don&apos;t want to change at every place then a little cheat will be sufficient.&lt;/p&gt;\n\n&lt;p&gt;Go to &quot;Build.gradle&quot; file and change the target Sdk version to less than 23, like 22, 21.&lt;/p&gt;\n    ","\n&lt;p&gt;Along with CommonsWare&apos;s answer,&lt;/p&gt;\n\n&lt;p&gt;There is a Security Setting (I checked on CM13) to set SMS Message Limit. If you set this to &quot;None&quot;, OS will popup a Dialog for every SMS, even after obtaining SMS_SEND permission in the runtime. Best thing is to set this to maximum.&lt;/p&gt;\n\n&lt;p&gt;If the maximum is not enough, there are ways to increases the maximum rate on a rooted device.&lt;/p&gt;\n    ","\n&lt;p&gt;I added this to my MainActivity, that resolve my problem &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; MY_PERMISSIONS_REQUEST_READ_CONTACTS=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Here, thisActivity is the current activity&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ContextCompat.checkSelfPermission(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,\n                Manifest.permission.WRITE_EXTERNAL_STORAGE)\n                != PackageManager.PERMISSION_GRANTED) {\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Should we show an explanation?&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ActivityCompat.shouldShowRequestPermissionRationale(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,\n                    Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Show an expanation to the user *asynchronously* -- don&apos;t block&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// this thread waiting for the user&apos;s response! After the user&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// sees the explanation, try again to request the permission.&lt;/span&gt;\n\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// No explanation needed, we can request the permission.&lt;/span&gt;\n\n                ActivityCompat.requestPermissions(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},\n                        MY_PERMISSIONS_REQUEST_READ_CONTACTS);\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// app-defined int constant. The callback method gets the&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// result of the request.&lt;/span&gt;\n            }\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I hope the solution to write to external storage will be useful too&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkPermission&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)\n                    == PackageManager.PERMISSION_GRANTED) {\n                Timber.tag(LOG_TAG).e(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Permission error. You have permission&quot;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                Timber.tag(LOG_TAG).e(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Permission error. You have asked for permission&quot;&lt;/span&gt;);\n                ActivityCompat.requestPermissions(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { \n            &lt;span class=&quot;hljs-comment&quot;&gt;// for a stuff below api level 23&lt;/span&gt;\n            Timber.tag(LOG_TAG).e(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Permission error. You already have the permission&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use this code to access your messages&lt;/p&gt;\n\n&lt;p&gt;Open a Dialog using the code below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ActivityCompat.requestPermissions(MainActivity.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{Manifest.permission.READ_EXTERNAL_STORAGE},\n                    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Get the Activity result as below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; requestCode,\n                                       String permissions[], &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] grantResults)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (requestCode) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: {\n\n          &lt;span class=&quot;hljs-comment&quot;&gt;// If request is cancelled, the result arrays are empty.&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (grantResults.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n                    &amp;amp;&amp;amp; grantResults[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == PackageManager.PERMISSION_GRANTED) {\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// permission was granted, yay! Do the&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// contacts-related task you need to do.          &lt;/span&gt;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// permission denied, boo! Disable the&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// functionality that depends on this permission.&lt;/span&gt;\n                Toast.makeText(MainActivity.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Permission denied to read your External storage&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// other &apos;case&apos; lines to check for other&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// permissions this app might request&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or edit file &lt;code&gt;build.gradle&lt;/code&gt; and chanche number &lt;code&gt;targetSdkVersion&lt;/code&gt; less than &lt;code&gt;23&lt;/code&gt;\n&lt;br&gt;\nAnd no longer need the code above&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;\n&lt;br&gt;\n&lt;strong&gt;Of course this is not the case, and it&apos;s just an educational aspect&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;So i had to create an app to send and receive messages but the send action crashed whenever i clicked on send even though the permission was granted . I had requested runtime permissions and allowed them, still i faced a crash that the process doesnt have the requested permission to send SMS . \nI had checked the granted permissions from :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;adb shell dumpsys &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;-name&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The order of my request for permissions was &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;RECEIVE_SMS&lt;/li&gt;\n&lt;li&gt;SEND_SMS&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I reverted the order of request and it works fine . This was tested with a complete new app(uninstall-&amp;gt; install -&amp;gt; test). The answer may seem weird but just give it a shot . &lt;/p&gt;\n\n&lt;p&gt;(If it works in the shown way in a certain order, then Android might have a bug!!) &lt;/p&gt;\n    ","\n&lt;p&gt;List of All Permissions Can be Found with Explanation at&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/Manifest.permission&quot; rel=&quot;nofollow noreferrer&quot;&gt;Manifest.permission&lt;/a&gt;&lt;/p&gt;\n    "],"355":["\n&lt;p&gt;In general, the answer to  your question is &quot;yes&quot;, but...&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.equals(...)&lt;/code&gt; will only compare what it is written to compare, no more, no less.&lt;/li&gt;\n&lt;li&gt;If a class does not override the equals method, then it defaults to the &lt;code&gt;equals(Object o)&lt;/code&gt; method of the closest parent class that has overridden this method. &lt;/li&gt;\n&lt;li&gt;If no parent classes have provided an override, then it defaults to the method from the ultimate parent class, Object, and so you&apos;re left with the &lt;code&gt;Object#equals(Object o)&lt;/code&gt; method. Per the Object API this is the same as &lt;code&gt;==&lt;/code&gt;; that is, it returns true &lt;em&gt;if and only if&lt;/em&gt; both variables refer to the same object, if their references are one and the same. Thus you will be testing  for &lt;strong&gt;object equality&lt;/strong&gt; and not &lt;strong&gt;functional equality&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Always remember to override &lt;code&gt;hashCode&lt;/code&gt; if you override &lt;code&gt;equals&lt;/code&gt; so as not to &quot;break the contract&quot;. As per the API, the result returned from the &lt;code&gt;hashCode()&lt;/code&gt; method for two objects &lt;strong&gt;must&lt;/strong&gt; be the same if their &lt;code&gt;equals&lt;/code&gt; methods show that they are equivalent. The converse is &lt;em&gt;not&lt;/em&gt; necessarily true. &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;With respect to the String class:&lt;/p&gt;\n\n&lt;p&gt;The equals() &lt;strong&gt;method&lt;/strong&gt; compares the &quot;value&quot; inside String instances (on the heap) irrespective if the two object references refer to the same String instance or not. If any two object references of type String refer to the same String instance then great! If the two object references refer to two different String instances .. it doesn&apos;t make a difference. Its the &quot;value&quot; (that is: the contents of the character array) inside each String instance that is being compared.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, the &quot;==&quot; &lt;strong&gt;operator&lt;/strong&gt; compares the value of &lt;strong&gt;two object references&lt;/strong&gt; to see whether they refer to the same &lt;strong&gt;String instance&lt;/strong&gt;. If the value of both object references &quot;refer to&quot; the same String instance then the result of the boolean expression would be &quot;true&quot;..duh. If, on the other hand, the value of both object references &quot;refer to&quot; &lt;strong&gt;different String instances&lt;/strong&gt; (even though both String instances have identical &quot;values&quot;, that is, the contents of the character arrays of each String instance are the same) the result of the boolean expression would be &quot;false&quot;.&lt;/p&gt;\n\n&lt;p&gt;As with any explanation, let it sink in.&lt;/p&gt;\n\n&lt;p&gt;I hope this clears things up a bit.&lt;/p&gt;\n    ","\n&lt;p&gt;There are some small differences depending whether you are talking about &quot;primitives&quot; or &quot;Object Types&quot;; the same can be said if you are talking about &quot;static&quot; or &quot;non-static&quot; members; you can also mix all the above...&lt;/p&gt;\n\n&lt;p&gt;Here is an example (you can run it):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyEqualityTest&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( String args[] )&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt; );\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;Test&quot;&lt;/span&gt; );\n\n        System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n1 - PRIMITIVES &quot;&lt;/span&gt;);\n        System.out.println( s1 == s2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( s1.equals( s2 )); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;();\n\n        System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n2 - OBJECT TYPES / STATIC VARIABLE&quot;&lt;/span&gt; );\n        System.out.println( a1 == a2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( a1.s == a2.s ); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n        System.out.println( a1.s.equals( a2.s ) ); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;();\n\n        System.out.println( &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n3 - OBJECT TYPES / NON-STATIC VARIABLE&quot;&lt;/span&gt; );\n        System.out.println( b1 == b2 ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( b1.getS() == b2.getS() ); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n        System.out.println( b1.getS().equals( b2.getS() ) ); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// static&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String s;\n    A()\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.s = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;aTest&quot;&lt;/span&gt; );\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String s;\n    B()\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.s = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;aTest&quot;&lt;/span&gt; );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getS&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can compare the explanations for &quot;==&quot; (Equality Operator) and &quot;.equals(...)&quot; (method in the java.lang.Object class) through these links:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;==: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html&quot;&gt;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;.equals(...): &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The difference between == and equals confused me for sometime until I decided to have a closer look at it.\nMany of them say that for comparing string you should use &lt;code&gt;equals&lt;/code&gt; and not &lt;code&gt;==&lt;/code&gt;. Hope in this answer I will be able to say the difference.&lt;/p&gt;\n\n&lt;p&gt;The best way to answer this question will be by asking a few questions to yourself. so let&apos;s start:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What is the output for the below program:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\nSystem.out.println(mango != mango2);\nSystem.out.println(mango == mango2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if you say, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I will say you are &lt;em&gt;right&lt;/em&gt; but &lt;strong&gt;why did you say that&lt;/strong&gt;?\nand If you say the output is,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I will say you are &lt;em&gt;wrong&lt;/em&gt; but I will still ask you, why you think that is right?&lt;/p&gt;\n\n&lt;p&gt;Ok, Let&apos;s try to answer this one:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What is the output for the below program:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;);\nSystem.out.println(mango != mango3);\nSystem.out.println(mango == mango3);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now If you say,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I will say you are &lt;em&gt;wrong&lt;/em&gt; but &lt;strong&gt;why is it wrong now&lt;/strong&gt;?\nthe correct output for this program is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please compare the above program and try to think about it.&lt;/p&gt;\n\n&lt;p&gt;Ok. Now this might help (please read this : &lt;a href=&quot;https://stackoverflow.com/questions/18396927/how-to-print-the-address-of-an-object-if-you-have-redefined-tostring-method&quot;&gt;print the address of object&lt;/a&gt; - not possible but still we can use it.)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mango3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;);\nSystem.out.println(mango != mango2);\nSystem.out.println(mango == mango2);\nSystem.out.println(mango3 != mango2);\nSystem.out.println(mango3 == mango2);\n&lt;span class=&quot;hljs-comment&quot;&gt;// mango2 = &quot;mang&quot;;&lt;/span&gt;\nSystem.out.println(mango+&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;+ mango2);\nSystem.out.println(mango != mango2);\nSystem.out.println(mango == mango2);\n\nSystem.out.println(System.identityHashCode(mango));\nSystem.out.println(System.identityHashCode(mango2));\nSystem.out.println(System.identityHashCode(mango3));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can you just try to think about the output of the last three lines in the code above:\nfor me ideone printed this out (&lt;a href=&quot;https://ideone.com/JA6NgB&quot; rel=&quot;noreferrer&quot;&gt;you can check the code here&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\nmango mango\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;17225372&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;17225372&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5433634&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Oh! Now you see the &lt;strong&gt;identityHashCode(mango) is equal to identityHashCode(mango2) But it is not equal to identityHashCode(mango3)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Even though all the string variables - mango, mango2 and mango3 - have the &lt;strong&gt;same&lt;/strong&gt; value, which is &quot;mango&quot;, &lt;code&gt;identityHashCode()&lt;/code&gt; is still not the same for all.&lt;/p&gt;\n\n&lt;p&gt;Now try to uncomment this line &lt;code&gt;// mango2 = &quot;mang&quot;;&lt;/code&gt; and run it again this time you will see all three &lt;code&gt;identityHashCode()&lt;/code&gt; are different.\nHmm that is a helpful hint&lt;/p&gt;\n\n&lt;p&gt;we know that if &lt;code&gt;hashcode(x)=N&lt;/code&gt; and &lt;code&gt;hashcode(y)=N&lt;/code&gt; =&amp;gt; &lt;code&gt;x is equal to y&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I am not sure how java works internally but I assume this is what happened when I said:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango = &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;java created a string &lt;code&gt;&quot;mango&quot;&lt;/code&gt; which was pointed(referenced) by the variable &lt;code&gt;mango&lt;/code&gt; something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango ----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in the next line when I said:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango2 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It actually reused the same string &lt;code&gt;&quot;mango&quot;&lt;/code&gt; which looks something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango ----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt; &amp;lt;---- mango2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both mango and mango2 pointing to the same reference\nNow when I said &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango3 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It actually created a completely new reference(string) for &quot;mango&quot;. which looks something like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango -----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt; &amp;lt;------ mango2\n\nmango3 ------&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and that&apos;s why when I put out the values for &lt;code&gt;mango == mango2&lt;/code&gt;, it put out &lt;code&gt;true&lt;/code&gt;. and when I put out the value for &lt;code&gt;mango3 == mango2&lt;/code&gt;, it put out &lt;code&gt;false&lt;/code&gt; (even when the values were the same).&lt;/p&gt;\n\n&lt;p&gt;and when you uncommented the line &lt;code&gt;// mango2 = &quot;mang&quot;;&lt;/code&gt;\nIt actually created a string &quot;mang&quot; which turned our graph like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mango ----&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\nmango2 ----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mang&quot;&lt;/span&gt;\nmango3 -----&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is why the identityHashCode is not the same for all.&lt;/p&gt;\n\n&lt;p&gt;Hope this helps you guys.\nActually, I wanted to generate a test case where == fails and equals() pass.\nPlease feel free to comment and let me know If I am wrong.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;strong&gt;==&lt;/strong&gt; operator tests whether two variables have the &lt;strong&gt;same references\n  (aka pointer to a memory address)&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(foo==bar)\n&lt;span class=&quot;hljs-comment&quot;&gt;// False (The objects are not the same)&lt;/span&gt;\n\nbar = foo;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(foo==bar)\n&lt;span class=&quot;hljs-comment&quot;&gt;// True (Now the objects are the same)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Whereas the &lt;strong&gt;equals()&lt;/strong&gt; method tests whether two variables refer to objects\n  that have the &lt;strong&gt;same state (values)&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(foo.equals(bar))\n&lt;span class=&quot;hljs-comment&quot;&gt;// True (The objects are identical but not same)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Cheers :-)&lt;/p&gt;\n    ","\n&lt;p&gt;You will have to override the equals function (along with others) to use this with custom classes.&lt;/p&gt;\n\n&lt;p&gt;The equals method compares the objects.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; binary operator compares memory addresses.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; is an &lt;em&gt;operator&lt;/em&gt; and &lt;code&gt;equals()&lt;/code&gt; is a &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Operators are generally used for &lt;em&gt;primitive&lt;/em&gt; type comparisons and thus &lt;code&gt;==&lt;/code&gt; is used for memory address comparison and &lt;code&gt;equals()&lt;/code&gt; method is used for comparing &lt;em&gt;objects&lt;/em&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;Both == and .equals() refers to the same object if you don&apos;t override .equals(). &lt;/p&gt;\n\n&lt;p&gt;Its your wish  what you want to do once you override .equals(). You can compare the invoking object&apos;s state with the passed in object&apos;s state or you can just call super.equals()&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sarat&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sarat&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sarat&quot;&lt;/span&gt;);\n\n System.out.println(w1.hashCode());   &lt;span class=&quot;hljs-comment&quot;&gt;//3254818&lt;/span&gt;\n System.out.println(w2.hashCode());   &lt;span class=&quot;hljs-comment&quot;&gt;//3254818&lt;/span&gt;\n System.out.println(w3.hashCode());   &lt;span class=&quot;hljs-comment&quot;&gt;//3254818&lt;/span&gt;\n\n System.out.println(System.identityHashCode(w1)); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 705927765&lt;/span&gt;\n System.out.println(System.identityHashCode(w2)); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 705927765&lt;/span&gt;\n System.out.println(System.identityHashCode(w3)); &lt;span class=&quot;hljs-comment&quot;&gt;//prints 366712642&lt;/span&gt;\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(w1==w2)   &lt;span class=&quot;hljs-comment&quot;&gt;//  (705927765==705927765)&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-comment&quot;&gt;//prints true&lt;/span&gt;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(w2==w3)   &lt;span class=&quot;hljs-comment&quot;&gt;//  (705927765==366712642)&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-comment&quot;&gt;//prints false&lt;/span&gt;\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(w2.equals(w3))   &lt;span class=&quot;hljs-comment&quot;&gt;//  (Content of 705927765== Content of 366712642)&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-comment&quot;&gt;//prints true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just remember that &lt;code&gt;.equals(...)&lt;/code&gt; has to be implemented by the class you are trying to compare. Otherwise, there isn&apos;t much of a point; the version of the method for the Object class does the same thing as the comparison operation: &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Object.html#equals%28java.lang.Object%29&quot; rel=&quot;nofollow&quot;&gt;Object#equals&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The only time you really want to use the comparison operator for objects is wen you are comparing Enums. This is because there is only one instance of an Enum value at a time. For instance, given the enum&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooEnum&lt;/span&gt; {A, B, C}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will never have more than one instance of &lt;code&gt;A&lt;/code&gt; at a time, and the same for &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;. This means that you can actually write a method like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareFoos&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(FooEnum x, FooEnum y)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (x == y);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you will have no problems whatsoever.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Here is a general thumb of rule for the difference between &lt;strong&gt;&lt;code&gt;relational operator ==&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;the method .equals()&lt;/code&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;object1 == object2&lt;/code&gt; compares if the objects referenced by object1 and object2 refer to t&lt;strong&gt;he same memory location in Heap&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;object1.equals(object2)&lt;/code&gt; compares &lt;strong&gt;the values of object1 and object2 regardless of where they are located in memory&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;This can be demonstrated well using String&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Scenario 1&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Conditionals&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1 == str2 ? &quot;&lt;/span&gt; + (str1 == str2 ));\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1.equals(str2) ? &quot;&lt;/span&gt; + (str1.equals(str2 )));\n    }\n\n }\n\n\n\nThe result is\n      &lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= str2 ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n      is str1.equals(str2) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Scenario 2&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Conditionals&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1 == str2 ? &quot;&lt;/span&gt; + (str1 == str2 ));\n       System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is str1.equals(str2) ? &quot;&lt;/span&gt; + (str1.equals(str2 )));\n    }\n\n}\n\nThe result is \n  &lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= str2 ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  is str1.equals(str2) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This string comparison could be used as a basis for comparing other types of object.&lt;/p&gt;\n&lt;p&gt;For instance if I have &lt;strong&gt;a Person class&lt;/strong&gt;, I need to define the &lt;strong&gt;criteria base on which I will compare  two persons&lt;/strong&gt;. Let&apos;s say this person class has &lt;strong&gt;instance variables of height and weight.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;So creating person objects &lt;code&gt;person1 and person2&lt;/code&gt; and for comparing these two using the &lt;code&gt;.equals()&lt;/code&gt; I need to override the &lt;strong&gt;equals method of the person class&lt;/strong&gt; to define based on which instance variables(heigh or weight) the comparison will be.&lt;/p&gt;\n&lt;p&gt;However, the &lt;code&gt;== operator will still return results based on the memory location of the two objects(person1 and person2)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For ease of generalizing this person object comparison, I have created the following test class. &lt;strong&gt;Experimenting on these concepts will reveal tons of facts&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.tadtab.CS5044;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; height;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; weight;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; height)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.height = height;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; weight;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setWeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; weight)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.weight = weight;\n}\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; temp;\n    temp = Double.doubleToLongBits(height);\n    result = prime * result + (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) (temp ^ (temp &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * This method uses the height as a means of comparing person objects.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; weight is not part of the comparison criteria\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getClass() != obj.getClass())\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Person) obj;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Double.doubleToLongBits(height) != Double.doubleToLongBits(other.height))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person1.setHeight(&lt;span class=&quot;hljs-number&quot;&gt;5.50&lt;/span&gt;);\n    person1.setWeight(&lt;span class=&quot;hljs-number&quot;&gt;140.00&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person2.setHeight(&lt;span class=&quot;hljs-number&quot;&gt;5.70&lt;/span&gt;);\n    person2.setWeight(&lt;span class=&quot;hljs-number&quot;&gt;160.00&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person3 = person2;\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person4.setHeight(&lt;span class=&quot;hljs-number&quot;&gt;5.70&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person5&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;();\n    person5.setWeight(&lt;span class=&quot;hljs-number&quot;&gt;160.00&lt;/span&gt;);\n    \n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person1 == person2 ? &quot;&lt;/span&gt; + (person1 == person2)); &lt;span class=&quot;hljs-comment&quot;&gt;// false;&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2 == person3 ? &quot;&lt;/span&gt; + (person2 == person3)); &lt;span class=&quot;hljs-comment&quot;&gt;// true &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//this is because perosn3 and person to refer to the one person object in memory. They are aliases;&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2.equals(person3) ? &quot;&lt;/span&gt; + (person2.equals(person3))); &lt;span class=&quot;hljs-comment&quot;&gt;// true;&lt;/span&gt;\n    \n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2.equals(person4) ? &quot;&lt;/span&gt; + (person2.equals(person4))); &lt;span class=&quot;hljs-comment&quot;&gt;// true;&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// even if the person2 and person5 have the same weight, they are not equal.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// it is because their height is different&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;is person2.equals(person4) ? &quot;&lt;/span&gt; + (person2.equals(person5))); &lt;span class=&quot;hljs-comment&quot;&gt;// false;&lt;/span&gt;\n}\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result of this class execution is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person2 ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person3 ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nis person2.equals(person3) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nis person2.equals(person4) ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nis person2.equals(person4) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you evaluate the code, it is very clear that (==) compares according to memory address, while equals(Object o)  compares hashCode() of the instances. \nThat&apos;s why it is said do not break the contract between equals() and  hashCode() if you do not face surprises later. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ali&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Veli&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ali&quot;&lt;/span&gt;);\n\n    System.out.println(s1.hashCode());\n    System.out.println(s2.hashCode());\n    System.out.println(s3.hashCode());\n\n\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(s1==s2):&quot;&lt;/span&gt; + (s1 == s2));\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(s1==s3):&quot;&lt;/span&gt; + (s1 == s3));\n\n\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s1.equals(s2):&quot;&lt;/span&gt; + (s1.equals(s2)));\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s1.equal(s3):&quot;&lt;/span&gt; + (s1.equals(s3)));\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*Output \n    96670     \n    3615852\n    96670\n    (s1==s2):false\n    (s1==s3):false\n    s1.equals(s2):false\n    s1.equal(s3):true\n    */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The major difference between == and equals() is&lt;/p&gt;\n\n&lt;p&gt;1) == is used to compare primitives.&lt;/p&gt;\n\n&lt;p&gt;For example : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ravi&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Prakash&quot;&lt;/span&gt;);\n\n        System.out.println(string1 == string2); &lt;span class=&quot;hljs-comment&quot;&gt;// true because same reference in string pool&lt;/span&gt;\n        System.out.println(string1 == string3); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2) equals() is used to compare objects.\nFor example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;        System.out.println(string1.equals(string2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true equals() comparison of values in the objects&lt;/span&gt;\n        System.out.println(string1.equals(string3)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n        System.out.println(string1.equals(string4)); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also note that &lt;code&gt;.equals()&lt;/code&gt; normally contains &lt;code&gt;==&lt;/code&gt; for testing as this is the first thing you would wish to test for if you wanted to test if two objects are equal. &lt;/p&gt;\n\n&lt;p&gt;And &lt;code&gt;==&lt;/code&gt; actually does look at values for primitive types, for objects it checks the reference.&lt;/p&gt;\n    ","\n&lt;p&gt;== operator always reference is compared. But in case of &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;equals() method&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;it&apos;s depends&apos;s on implementation if we are overridden equals method than it compares object on basic of implementation given in overridden method. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n   String str;\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id,String str)&lt;/span&gt;\n     {\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id=id;\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.str=str;\n     }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String arg[])&lt;/span&gt;\n    {\n      A obj=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n      A obj1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n\n      obj.equals(obj1)&lt;span class=&quot;hljs-comment&quot;&gt;//fasle&lt;/span&gt;\n      obj==obj1 &lt;span class=&quot;hljs-comment&quot;&gt;// fasle&lt;/span&gt;\n    }\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in above code both obj and obj1 object contains same data but reference is not same so equals return false and == also.\nbut if we overridden equals method than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n   String str;\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id,String str)&lt;/span&gt;\n     {\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id=id;\n       &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.str=str;\n     }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt;\n    {\n       A a1=(A)obj;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id==a1.id;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String arg[])&lt;/span&gt;\n    {\n      A obj=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n      A obj1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;sam&quot;&lt;/span&gt;);\n\n      obj.equals(obj1)&lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n      obj==obj1 &lt;span class=&quot;hljs-comment&quot;&gt;// fasle&lt;/span&gt;\n    }\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;know check out it will return true and false for same case only we overridden &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;equals method .&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;it compare object on basic of content(id) of object&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;but ==&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;still compare references of object.&lt;/p&gt;\n    ","\n&lt;p&gt;Example 1 -&lt;/p&gt;\n&lt;p&gt;Both == and .equals methods are there for reference comparison only. It means whether both objects are referring to same object or not.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/lang/Object.java#l149&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object class equals method implementation&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n       &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;();\n       &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ob1;\n       System.out.println(ob1 == ob2); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n       System.out.println(ob1.equals(ob2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n     }    \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Nbha6.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Nbha6.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Example 2 -&lt;/p&gt;\n&lt;p&gt;But if we wants to compare objects content using equals method then class has to override object&apos;s class equals() method and provide implementation for content comparison. Here, String class has overrided equals method for content comparison. All wrapper classes have overrided equals method for content comparison.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/java/lang/String.java#l974&quot; rel=&quot;nofollow noreferrer&quot;&gt;String class equals method implementation&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;);\n       System.out.println(ob1 == ob2); &lt;span class=&quot;hljs-comment&quot;&gt;// false (Both references are referring two different objects)&lt;/span&gt;\n       System.out.println(ob1.equals(ob2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/HPVXk.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HPVXk.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Example 3 -&lt;/p&gt;\n&lt;p&gt;In case of String, there is one more usecase. Here when we assign any string to  String reference then string constant is created inside &lt;strong&gt;String constant pool&lt;/strong&gt;. If we assign same string to new String reference then no new string constant is created rather it will refer to existing string constant.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HelloWorld&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String []args)&lt;/span&gt;{\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ob2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;;\n       System.out.println(ob1 == ob2); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n       System.out.println(ob1.equals(ob2)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/wIglp.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/wIglp.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java API equals() method contract&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; can be used in many object types but you can use &lt;code&gt;Object.equals&lt;/code&gt; for any type , especially Strings and Google Map Markers.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringPool&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// will create reference in string pool of heap memory&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Cat&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//will create a object in heap memory&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using == will give us true because same reference in string pool&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1 == s2) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using == with reference and Object will give us False&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1 == s3) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using .equals method which refers to value&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1.equals(s3)) {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;False&quot;&lt;/span&gt;);\n    }\n\n    }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;----Output-----\n   true\n   false\n   true&lt;/p&gt;\n    ","\n&lt;p&gt;It may be worth adding that for wrapper objects for primitive types - i.e. Int, Long, Double - == will return true if the two values are equal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10L&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10L&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == b) {\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrapped primitives behave like values&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To contrast, putting the above two Longs into two separate ArrayLists, equals sees them as the same, but == doesn&apos;t.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ArrayList&amp;lt;Long&amp;gt; c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\nArrayList&amp;lt;Long&amp;gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\nc.add(a);\nd.add(b);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c == d) System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;No way!&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c.equals(d)) System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yes, this is true.&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The &lt;a href=&quot;https://stackoverflow.com/questions/2486191/what-is-the-java-string-pool-and-how-is-s-different-from-new-strings&quot;&gt;String pool&lt;/a&gt; (aka &lt;a href=&quot;https://stackoverflow.com/questions/10578984/what-is-string-interning&quot;&gt;interning&lt;/a&gt;) and &lt;a href=&quot;https://stackoverflow.com/questions/20877086/why-do-comparisons-with-integer-valueofstring-give-different-results-for-12&quot;&gt;Integer pool&lt;/a&gt;&lt;/strong&gt; blur the difference further, and may allow you to use &lt;code&gt;==&lt;/code&gt; for objects in some cases instead of &lt;code&gt;.equals&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This can give you greater performance (?), at the cost of greater complexity.&lt;/p&gt;\n\n&lt;p&gt;E.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i;\n&lt;span class=&quot;hljs-type&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= j;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Complexity tradeoff: the following may surprise you:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;) != &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; i != j;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I advise you to stay away from such micro-optimization, and &lt;em&gt;always&lt;/em&gt; use &lt;code&gt;.equals&lt;/code&gt; for objects, and &lt;code&gt;==&lt;/code&gt; for primitives:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)).equals(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; i.equals(j);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In short, the answer is &quot;Yes&quot;.&lt;/p&gt;\n\n&lt;p&gt;In Java, the &lt;code&gt;==&lt;/code&gt; operator compares the two objects to see if they point to the same memory location; while the &lt;code&gt;.equals()&lt;/code&gt; method actually compares the two objects to see if they have the same object value.&lt;/p&gt;\n    ","\n&lt;p&gt;It is the difference between &lt;em&gt;identity&lt;/em&gt; and &lt;em&gt;equivalence&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a == b&lt;/code&gt; means that a and b are &lt;em&gt;identical&lt;/em&gt;, that is, they are symbols for very same object in memory.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a.equals( b )&lt;/code&gt; means that they are &lt;em&gt;equivalent&lt;/em&gt;, that they are symbols for objects that in some sense have the same value -- although those objects may occupy different places in memory.&lt;/p&gt;\n\n&lt;p&gt;Note that with equivalence, the question of how to evaluate and compare objects comes into play -- complex objects may be regarded as equivalent for practical purposes even though some of their contents differ.  With identity, there is no such question.&lt;/p&gt;\n    ","\n&lt;p&gt;Since Java doesnt support operator overloading, &lt;code&gt;==&lt;/code&gt; behaves identical\nfor every object but &lt;code&gt;equals()&lt;/code&gt; is method, which can be overridden in\nJava and logic to compare objects can be changed based upon business\nrules.&lt;/p&gt;\n&lt;p&gt;Main difference between &lt;code&gt;==&lt;/code&gt; and equals in Java is that &lt;code&gt;&quot;==&quot;&lt;/code&gt; is used to\ncompare primitives while &lt;code&gt;equals()&lt;/code&gt; method is recommended to check\nequality of objects.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;String comparison is a common scenario of using both &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; method.&lt;/strong&gt; Since java.lang.String class override equals method, It\nreturn true if two String object contains same content but &lt;code&gt;==&lt;/code&gt; will\nonly return true if two references are pointing to same object.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Here is an example&lt;/strong&gt; of comparing two Strings in Java for equality using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; method which will clear some doubts:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TEstT&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n            \n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;);\n          \n    &lt;span class=&quot;hljs-comment&quot;&gt;//since two strings are different object result should be false&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; text1 == text2;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparing two strings with == operator: &quot;&lt;/span&gt; + result);\n          \n    &lt;span class=&quot;hljs-comment&quot;&gt;//since strings contains same content , equals() should return true&lt;/span&gt;\n    result = text1.equals(text2);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparing two Strings with same content using equals method: &quot;&lt;/span&gt; + result);\n          \n    text2 = text1;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//since both text2 and text1d reference variable are pointing to same object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&quot;==&quot; should return true&lt;/span&gt;\n    result = (text1 == text2);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Comparing two reference pointing to same String with == operator: &quot;&lt;/span&gt; + result);\n\n    }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;equals() method mainly compares the original content of the object.&lt;/p&gt;\n&lt;p&gt;If we Write&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n\n    System.out.println(s1.equals(s2));\n    System.out.println(s2.equals(s3));\n    System.out.println(s3.equals(s4));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output will be&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; \n&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because equals() method compare the content of the object.\nin first System.out.println() the content of s1 and s2 is same that&apos;s why it print true.\nAnd it is same for others two System.out.println() is true.&lt;/p&gt;\n&lt;p&gt;Again ,&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Samim&quot;&lt;/span&gt;);\n    \n    System.out.println(s1 == s2);\n    System.out.println(s2 == s3);\n    System.out.println(s3 == s4);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output will be&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; \n&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because == operator mainly compare the references of the object not the value.\nIn first System.out.println(), the references of s1 and s2 is same thats why it returns true.&lt;/p&gt;\n&lt;p&gt;In second System.out.println(), s3 object is created , thats why another reference of s3 will create , and the references of s2 and s3 will difference, for this reason it return &quot;false&quot;.&lt;/p&gt;\n&lt;p&gt;Third System.out.println(), follow the rules of second System.out.println(), that&apos;s why it will return &quot;false&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically, &lt;code&gt;==&lt;/code&gt; compares if two objects have the same reference on the heap, so unless two references are linked to the same object, this comparison will be false.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; is a method inherited from &lt;strong&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/strong&gt; class. This method by default compares if two objects have the same referece. It means:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;object1.equals(object2)&lt;/code&gt; &lt;strong&gt;&amp;lt;=&amp;gt;&lt;/strong&gt; &lt;code&gt;object1 == object2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;However, if you want to establish equality between two objects of the same class you should override this method. It is also very important to override the method &lt;code&gt;hashCode()&lt;/code&gt; if you have overriden &lt;code&gt;equals()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Implement &lt;code&gt;hashCode()&lt;/code&gt; when establishing equality is part of the Java Object Contract. If you are working with collections, and you haven&apos;t implemented &lt;code&gt;hashCode()&lt;/code&gt;, Strange Bad Things could happen:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;HashMap&amp;lt;Cat, String&amp;gt; cats = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;molly&quot;&lt;/span&gt;);\ncats.put(cat, &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is a cool cat&quot;&lt;/span&gt;);\nSystem.out.println(cats.get(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;molly&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;null&lt;/code&gt; will be printed after executing the previous code if you haven&apos;t implemented &lt;code&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In simple words, &lt;code&gt;==&lt;/code&gt; checks if both objects point to the same memory location whereas &lt;code&gt;.equals()&lt;/code&gt; evaluates to the comparison of values in the objects.&lt;/p&gt;\n    "]},"page":"52","randomQuestions":[{"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699"},{"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759"},{"title":"WebDriverWait not working as expected","slug":"webdriverwait-not-working-as-expected-1657387373148"},{"title":"How do I return the response from an asynchronous call?","slug":"how-do-i-return-the-response-from-an-asynchronous-call-1657384208012"},{"title":"Reference — What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666"},{"title":"Daylight saving time and time zone best practices [closed]","slug":"daylight-saving-time-and-time-zone-best-practices-closed-1657387973687"},{"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717"},{"title":"input() error - NameError: name '...' is not defined","slug":"input()-error-nameerror:-name-'...'-is-not-defined-1657388497243"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"Web-scraping JavaScript page with Python","slug":"web-scraping-javascript-page-with-python-1657388240875"},{"title":"How to use Regular Expressions (Regex) in Microsoft Excel both in-cell and loops","slug":"how-to-use-regular-expressions-(regex)-in-microsoft-excel-both-in-cell-and-loops-1657387487287"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"Scanner is skipping nextLine() after using next() or nextFoo()?","slug":"scanner-is-skipping-nextline()-after-using-next()-or-nextfoo()-1657384379697"},{"title":"Make container shrink-to-fit child elements as they wrap","slug":"make-container-shrink-to-fit-child-elements-as-they-wrap-1657388134549"},{"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003"},{"title":"How can I tell if a DOM element is visible in the current viewport?","slug":"how-can-i-tell-if-a-dom-element-is-visible-in-the-current-viewport-1657388316510"},{"title":"Select first row in each GROUP BY group?","slug":"select-first-row-in-each-group-by-group-1657384809388"}]},"__N_SSG":true}