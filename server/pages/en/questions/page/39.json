{"pageProps":{"data":{"count":610,"rows":[{"id":420,"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929","postType":"QUESTION","createdAt":"2022-07-09T17:32:06.000Z","updatedAt":"2022-07-09T17:32:06.000Z","tags":[{"id":2224,"name":"identifier","slug":"identifier","createdAt":"2022-07-09T17:32:07.000Z","updatedAt":"2022-07-09T17:32:07.000Z","Questions_Tags":{"questionId":420,"tagId":2224}}]},{"id":419,"title":"Determine Whether Two Date Ranges Overlap","slug":"determine-whether-two-date-ranges-overlap-1657387924335","postType":"QUESTION","createdAt":"2022-07-09T17:32:04.000Z","updatedAt":"2022-07-09T17:32:04.000Z","tags":[]},{"id":418,"title":"Efficiently convert rows to columns in sql server","slug":"efficiently-convert-rows-to-columns-in-sql-server-1657387919213","postType":"QUESTION","createdAt":"2022-07-09T17:31:59.000Z","updatedAt":"2022-07-09T17:31:59.000Z","tags":[]},{"id":417,"title":"How do I count the occurrences of a list item?","slug":"how-do-i-count-the-occurrences-of-a-list-item-1657387916234","postType":"QUESTION","createdAt":"2022-07-09T17:31:56.000Z","updatedAt":"2022-07-09T17:31:56.000Z","tags":[{"id":2213,"name":"count","slug":"count","createdAt":"2022-07-09T17:31:56.000Z","updatedAt":"2022-07-09T17:31:56.000Z","Questions_Tags":{"questionId":417,"tagId":2213}}]},{"id":416,"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095","postType":"QUESTION","createdAt":"2022-07-09T17:31:52.000Z","updatedAt":"2022-07-09T17:31:52.000Z","tags":[]}]},"answers":{"416":["\n&lt;p&gt;&lt;code&gt;.classA.classB&lt;/code&gt; refers to an element that has both classes A and B (&lt;code&gt;class=&quot;classA classB&quot;&lt;/code&gt;); whereas &lt;code&gt;.classA .classB&lt;/code&gt; refers to an element with &lt;code&gt;class=&quot;classB&quot;&lt;/code&gt; descended from an element with &lt;code&gt;class=&quot;classA&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Edit: Spec for reference: &lt;a href=&quot;http://www.w3.org/TR/CSS2/selector.html#attribute-selectors&quot; rel=&quot;noreferrer&quot;&gt;Attribute Selectors&lt;/a&gt; (See section 5.8.3 Class Selectors)&lt;/p&gt;\n    ","\n&lt;p&gt;A style like this is far more common, and would target any type of element of class &quot;classB&quot; that is nested inside any type of element of class &quot;classA&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.classA&lt;/span&gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.classB&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It would work, for example, on:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classA&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classB&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;asdf&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one, however, targets any type of element that is both class &quot;classA&quot;, as well as class &quot;classB&quot;.  This type of style is less frequently seen, but still useful in some circumstances.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.classA&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.classB&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would apply to this example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classA classB&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;asdf&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, it would have no effect on the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classA&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;fail&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classB&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;fail&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note that when an HTML element has multiple classes, they are separated by spaces.)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;.classA.classB&lt;/code&gt; it means that the elements with both classes name will be selected whereas &lt;code&gt;.classA .classB&lt;/code&gt; means that the element with class name &lt;code&gt;classB&lt;/code&gt; inside the &lt;code&gt;classA&lt;/code&gt; will only be selected.&lt;/p&gt;\n    "],"417":["\n&lt;p&gt;If you only want a single item&apos;s count, use the &lt;code&gt;count&lt;/code&gt; method:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].count(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h4&gt;&lt;strong&gt;Important: this is very slow if you are counting &lt;em&gt;multiple&lt;/em&gt; different items&lt;/strong&gt;&lt;/h4&gt;\n&lt;p&gt;Each &lt;code&gt;count&lt;/code&gt; call goes over the entire list of &lt;code&gt;n&lt;/code&gt; elements. Calling &lt;code&gt;count&lt;/code&gt; in a loop &lt;code&gt;n&lt;/code&gt; times means &lt;code&gt;n * n&lt;/code&gt; total checks, which can be catastrophic for performance.&lt;/p&gt;\n&lt;p&gt;If you want to count multiple items, use &lt;a href=&quot;https://stackoverflow.com/a/5829377/365102&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt;, which only does &lt;code&gt;n&lt;/code&gt; total checks.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.Counter&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Counter&lt;/code&gt;&lt;/a&gt; if you are using Python 2.7 or 3.x and you want the number of occurrences for each element:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(z)\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Counting the occurrences of one item in a list&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For counting the occurrences of just one list item you can use &lt;code&gt;count()&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.count(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.count(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Counting the occurrences of &lt;em&gt;all&lt;/em&gt; items in a list is also known as &quot;tallying&quot; a list, or creating a tally counter.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Counting all items with count()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To count the occurrences of items in &lt;code&gt;l&lt;/code&gt; one can simply use a list comprehension and the &lt;code&gt;count()&lt;/code&gt; method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[x,l.count(x)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(l)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(or similarly with a dictionary &lt;code&gt;dict((x,l.count(x)) for x in set(l))&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;Example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[[x,l.count(x)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(l)]\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((x,l.count(x)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(l))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Counting all items with Counter()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively, there&apos;s the faster &lt;code&gt;Counter&lt;/code&gt; class from the &lt;code&gt;collections&lt;/code&gt; library&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Counter(l)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Counter(l)\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How much faster is Counter?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I checked how much faster &lt;code&gt;Counter&lt;/code&gt; is for tallying lists. I tried both methods out with a few values of &lt;code&gt;n&lt;/code&gt; and it appears that &lt;code&gt;Counter&lt;/code&gt; is faster by a constant factor of approximately 2.&lt;/p&gt;\n\n&lt;p&gt;Here is the script I used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\nt1=timeit.Timer(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Counter(l)&apos;&lt;/span&gt;, \\\n                &lt;span class=&quot;hljs-string&quot;&gt;&apos;import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]&apos;&lt;/span&gt;\n                )\n\nt2=timeit.Timer(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[[x,l.count(x)] for x in set(l)]&apos;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-string&quot;&gt;&apos;import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]&apos;&lt;/span&gt;\n                )\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Counter(): &quot;&lt;/span&gt;, t1.repeat(repeat=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count():   &quot;&lt;/span&gt;, t2.repeat(repeat=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,number=&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Counter():  [&lt;span class=&quot;hljs-number&quot;&gt;0.46062711701961234&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.4022796869976446&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.3974247490405105&lt;/span&gt;]\ncount():    [&lt;span class=&quot;hljs-number&quot;&gt;7.779430688009597&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7.962715800967999&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8.420845870045014&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way to get the number of occurrences of each item, in a dictionary:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h1&gt;Given an item, how can I count its occurrences in a list in Python?&lt;/h1&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Here&apos;s an example list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;aaaaabbbbcccdde&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;list.count&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;There&apos;s the &lt;code&gt;list.count&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l.count(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This works fine for any list. Tuples have this method as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;aabbbffffff&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t.count(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;collections.Counter&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;And then there&apos;s collections.Counter. You can dump any iterable into a Counter, not just a list, and the Counter will retain a data structure of the counts of the elements.&lt;/p&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = Counter(l)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Counters are based on Python dictionaries, their keys are the elements, so the keys need to be hashable. They are basically like sets that allow redundant elements into them.&lt;/p&gt;\n&lt;h3&gt;Further usage of &lt;code&gt;collections.Counter&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;You can add or subtract with iterables from your counter:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c.update(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bbb&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c.subtract(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bbb&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you can do multi-set operations with the counter as well:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c2 = Counter(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;aabbxyz&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c - c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# set difference&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c + c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# addition of all elements&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c | c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# set union&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c &amp;amp; c2                   &lt;span class=&quot;hljs-comment&quot;&gt;# set intersection&lt;/span&gt;\nCounter({&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Why not pandas?&lt;/h2&gt;\n&lt;p&gt;Another answer suggests:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Why not use pandas?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Pandas is a common library, but it&apos;s not in the standard library. Adding it as a requirement is non-trivial.&lt;/p&gt;\n&lt;p&gt;There are builtin solutions for this use-case in the list object itself as well as in the standard library.&lt;/p&gt;\n&lt;p&gt;If your project does not already require pandas, it would be foolish to make it a requirement just for this functionality.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;list.count(x)&lt;/code&gt; returns the number of times &lt;code&gt;x&lt;/code&gt; appears in a list&lt;/p&gt;\n\n&lt;p&gt;see:\n&lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#more-on-lists&quot;&gt;http://docs.python.org/tutorial/datastructures.html#more-on-lists&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve compared all suggested solutions (and a few new ones) with &lt;a href=&quot;https://github.com/nschloe/perfplot&quot; rel=&quot;noreferrer&quot;&gt;perfplot&lt;/a&gt; (a small project of mine).&lt;/p&gt;\n&lt;h3 id=&quot;counting-one-item-ikoj&quot;&gt;Counting &lt;em&gt;one&lt;/em&gt; item&lt;/h3&gt;\n&lt;p&gt;For large enough arrays, it turns out that&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numpy.&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(numpy.array(a) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is slightly faster than the other solutions.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/vTw7i.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/vTw7i.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h3 id=&quot;counting-all-items-4cam&quot;&gt;Counting &lt;em&gt;all&lt;/em&gt; items&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/43096495/353337&quot;&gt;As established before&lt;/a&gt;,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numpy.bincount(a)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is what you want.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IE6L3.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IE6L3.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Code to reproduce the plots:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; perfplot\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Counter(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bincount&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; numpy.bincount(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pandas_value_counts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pandas.Series(a).value_counts()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;occur_dict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    d = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n            d[i] = d[i]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            d[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    counts = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        counts[item] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(counts)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;operator_countof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, operator.countOf(a, i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\nperfplot.show(\n    setup=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; n: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(numpy.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, n)),\n    n_range=[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**k &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)],\n    kernels=[\n        counter, count, bincount, pandas_value_counts, occur_dict,\n        count_unsorted_list_items, operator_countof\n        ],\n    equality_check=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n    logx=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n    logy=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;,\n    )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; perfplot\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Counter(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bincount&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; numpy.bincount(a)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pandas_value_counts&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pandas.Series(a).value_counts()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;occur_dict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    d = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n            d[i] = d[i] + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            d[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    counts = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        counts[item] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(counts)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;operator_countof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i, operator.countOf(a, i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(a))\n\n\nb = perfplot.bench(\n    setup=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; n: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(numpy.random.randint(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, n)),\n    n_range=[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; ** k &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)],\n    kernels=[\n        counter,\n        count,\n        bincount,\n        pandas_value_counts,\n        occur_dict,\n        count_unsorted_list_items,\n        operator_countof,\n    ],\n    equality_check=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;,\n)\nb.save(&lt;span class=&quot;hljs-string&quot;&gt;&quot;out.png&quot;&lt;/span&gt;)\nb.show()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to &lt;strong&gt;count all values at once&lt;/strong&gt; you can do it very fast using numpy arrays and &lt;code&gt;bincount&lt;/code&gt; as follows&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\na = np.array([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nnp.bincount(a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which gives&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;array([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you can use &lt;code&gt;pandas&lt;/code&gt;, then &lt;code&gt;value_counts&lt;/code&gt; is there for rescue. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.Series(a).value_counts()\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ndtype: int64\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It automatically sorts the result based on frequency as well. &lt;/p&gt;\n\n&lt;p&gt;If you want the result to be in a list of list, do as below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;pd.Series(a).value_counts().reset_index().values.tolist()\n[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Why not using Pandas?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\nmy_list = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# converting the list to a Series and counting the values&lt;/span&gt;\nmy_count = pd.Series(my_list).value_counts()\nmy_count\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nd    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nb    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nc    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ndtype: int64\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are looking for a count of a particular element, say &lt;em&gt;a&lt;/em&gt;, try:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_count[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had this problem today and rolled my own solution before I thought to check SO.  This:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((i,a.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is really, really slow for large lists.  My solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;occurDict&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    d = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n            d[i] = d[i]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            d[i] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is actually a bit faster than the Counter solution, at least for Python 2.7.&lt;/p&gt;\n    ","\n&lt;h2&gt;Count of all elements with &lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;Antoher possiblity for getting the count of all elements in the list could be by means of &lt;code&gt;itertools.groupby()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With &quot;duplicate&quot; counts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; groupby\n\nL = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# Input list&lt;/span&gt;\n\ncounts = [(i, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(c))) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i,c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; groupby(L)]      &lt;span class=&quot;hljs-comment&quot;&gt;# Create value-count pairs as list of tuples &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(counts)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice how it combined the first three &lt;code&gt;a&lt;/code&gt;&apos;s as the first group, while other groups of &lt;code&gt;a&lt;/code&gt; are present further down the list. This happens because the input list &lt;code&gt;L&lt;/code&gt; was not sorted. This can be a benefit sometimes if the groups should in fact be separate.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With unique counts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If unique group counts are desired, just sort the input list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counts = [(i, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(c))) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i,c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; groupby(&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(L))]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(counts)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;q&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For creating unique counts, many of the other answers provide easier and more readable code compared to the &lt;code&gt;groupby&lt;/code&gt; solution. But it is shown here to draw a parallel to the duplicate count example. &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Python &amp;gt;= 2.6 (defaultdict) &amp;amp;&amp;amp; &amp;lt; 2.7 (Counter, OrderedDict)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; defaultdict\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    :param items: iterable of hashable items to count\n    :type items: iterable\n\n    :returns: dict of counts like Py2.7 Counter\n    :rtype: dict\n    &quot;&quot;&quot;&lt;/span&gt;\n    counts = defaultdict(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items:\n        counts[item] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(counts)\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Python &amp;gt;= 2.2 (generators)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count_sorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    :param items: sorted iterable of items to count\n    :type items: sorted iterable\n\n    :returns: generator of (item, count) tuples\n    :rtype: generator\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; items:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(items) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    prev_item = items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    count = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; items[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; prev_item == item:\n            count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (prev_item, count)\n            count = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            prev_item = item\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (item, count)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; unittest\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestListCounters&lt;/span&gt;(unittest.TestCase):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_count_unsorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        D = (\n            ([], []),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; inp, exp_outp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; D:\n            counts = count_unsorted_list_items(inp) \n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; inp, exp_outp, counts\n            self.assertEqual(counts, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;( exp_outp ))\n\n        inp, exp_outp = UNSORTED_WIN = ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n        self.assertEqual(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;( exp_outp ), count_unsorted_list_items(inp) )\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_count_sorted_list_items&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        D = (\n            ([], []),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]),\n            )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; inp, exp_outp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; D:\n            counts = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;( count_sorted_list_items(inp) )\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; inp, exp_outp, counts\n            self.assertEqual(counts, exp_outp)\n\n        inp, exp_outp = UNSORTED_FAIL = ([&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)])\n        self.assertEqual(exp_outp, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;( count_sorted_list_items(inp) ))\n        &lt;span class=&quot;hljs-comment&quot;&gt;# ... [(2,2), (4,1), (2,1)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although it is very old question, since i didn&apos;t find a one liner, i made one.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# original numbers in list&lt;/span&gt;\nl = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# empty dictionary to hold pair of number and its count&lt;/span&gt;\nd = {}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# loop through all elements and store count&lt;/span&gt;\n[ d.update( {i:d.get(i, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;} ) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l ]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-comment&quot;&gt;# {1: 1, 2: 2, 3: 3, 4: 1}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Below are the three solutions:&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Fastest is using a for loop and storing it in a Dict.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;countElement&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    g = {}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; g: \n            g[i] +=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;: \n            g[i] =&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; g\n\n\nz = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 1 - Faster&lt;/span&gt;\nst = time.monotonic()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;):\n    b = countElement(z)\net = time.monotonic()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Simple for loop and storing it in dict - Duration: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(et - st))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 2 - Fast&lt;/span&gt;\nst = time.monotonic()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;):\n    a = Counter(z)\net = time.monotonic()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Using collections.Counter - Duration: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(et - st))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 3 - Slow&lt;/span&gt;\nst = time.monotonic()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;):\n    g = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;([(i, z.count(i)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(z)])\net = time.monotonic()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(g)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Using list comprehension - Duration: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(et - st))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 1 - Faster&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\nSimple &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; loop &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; storing it &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt; - Duration: &lt;span class=&quot;hljs-number&quot;&gt;12.032000000000153&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 2 - Fast&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Counter({&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;})\nUsing collections.Counter - Duration: &lt;span class=&quot;hljs-number&quot;&gt;15.889999999999418&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Solution 3 - Slow&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;234&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}\nUsing &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; comprehension - Duration: &lt;span class=&quot;hljs-number&quot;&gt;33.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It was suggested to use numpy&apos;s &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.bincount.html&quot; rel=&quot;noreferrer&quot;&gt;bincount&lt;/a&gt;, however it works only for 1d arrays with &lt;em&gt;non-negative integers&lt;/em&gt;. Also, the resulting array might be confusing (it contains the occurrences of the integers from min to max of the original list, and sets to 0 the missing integers).&lt;/p&gt;\n\n&lt;p&gt;A better way to do it with numpy is to use the &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.unique.html&quot; rel=&quot;noreferrer&quot;&gt;unique&lt;/a&gt; function with the attribute &lt;code&gt;return_counts&lt;/code&gt; set to True. It returns a tuple with an array of the unique values and an array of the occurrences of each unique value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# a = [1, 1, 0, 2, 1, 0, 3, 3]&lt;/span&gt;\na_uniq, counts = np.unique(a, return_counts=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# array([0, 1, 2, 3]), array([2, 3, 1, 2]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then we can pair them as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(a_uniq, counts))  &lt;span class=&quot;hljs-comment&quot;&gt;# {0: 2, 1: 3, 2: 1, 3: 2}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It also works with other data types and &quot;2d lists&quot;, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(*np.unique(a, return_counts=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)))\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To count the number of diverse elements having a common type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;li = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A0&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A9&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; el &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; li &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; el[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; el[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;01234&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;gives&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;3&lt;/code&gt;  , not 6&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use &lt;a href=&quot;https://docs.python.org/3/library/operator.html#operator.countOf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;countOf&lt;/code&gt;&lt;/a&gt; method of a built-in module &lt;a href=&quot;https://docs.python.org/3/library/operator.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; operator\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;operator.countOf([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would use &lt;code&gt;filter()&lt;/code&gt;, take Lukasz&apos;s example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, lst))\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Given a list X&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n X = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The dictionary which shows i: frequency(i) for elements of this list is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{i:X.count(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; np.unique(X)}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;use %timeit to see which operation is more efficient.   np.array counting operations should be faster.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n mylist = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] \n types_counts=Counter(mylist)\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(types_counts)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;May not be the most efficient, requires an extra pass to remove duplicates. &lt;/p&gt;\n\n&lt;p&gt;Functional implementation : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = np.array([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x  : (x , &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(arr).count(x)) , arr)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;returns : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or return as &lt;code&gt;dict&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x  : (x , &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(arr).count(x)) , arr)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;returns : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Alternatively, you can also implement the counter by yourself. This is the way I do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;item_list = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;me&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;me&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;you&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;they&apos;&lt;/span&gt;]\n\nocc_dict = {}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; item_list:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; occ_dict:\n        occ_dict[item] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        occ_dict[item] +=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(occ_dict)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output: &lt;code&gt;{&apos;me&apos;: 2, &apos;you&apos;: 3, &apos;they&apos;: 1}&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mot = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;compte&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;zied&quot;&lt;/span&gt;]\nlst = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;compte&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;france&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;((x, lst.count(x)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(mot))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this gives&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;{&lt;span class=&quot;hljs-string&quot;&gt;&apos;compte&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;france&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;zied&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;yourlist&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; elem==&amp;lt;your_value&amp;gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will return the amount of occurences of your_value&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l2=[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;]],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;feto&apos;&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;feto&apos;&lt;/span&gt;]]]]\ncount=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):   \n        &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; count \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count\n        count=l.count(&lt;span class=&quot;hljs-string&quot;&gt;&quot;feto&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(i) &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n                count+=Test(i)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; count   \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Test(l2))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;this will recursive count or search for the item in the list even if it in list of lists&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;if you want a number of occurrences for the particular element:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Counter\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;single_occurrences = Counter(z)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(single_occurrences.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(single_occurrences.values())\ndict_values([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;test = [&lt;span class=&quot;hljs-number&quot;&gt;409.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;479.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;340.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;282.4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;406.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;374.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;253.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;195.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;269.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;329.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;379.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;275.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;215.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; test:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{} numbers {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i, test.count(i)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\ntest = [&lt;span class=&quot;hljs-number&quot;&gt;409.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;479.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;340.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;282.4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;406.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;374.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;253.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;195.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;269.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;329.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;250.7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;345.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;379.3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;275.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;215.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300.0&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#turning the list into a temporary dataframe&lt;/span&gt;\ntest  = pd.DataFrame(test)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#using the very convenient value_counts() function&lt;/span&gt;\ndf_counts = test.value_counts()\ndf_counts\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;then you can use &lt;code&gt;df_counts.index&lt;/code&gt; and &lt;code&gt;df_counts.values&lt;/code&gt; to get the data.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jess&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sophia&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Karen&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;Addison&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joseph&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Eric&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Ilona&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jason&apos;&lt;/span&gt;]\nthe_item = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Enter the item that you wish to find : &apos;&lt;/span&gt;)\nhow_many_times = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; occurrence &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x:\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; occurrence == the_item : \n          how_many_times += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;The occurrence of&apos;&lt;/span&gt;, the_item, &lt;span class=&quot;hljs-string&quot;&gt;&apos;in&apos;&lt;/span&gt;, x,&lt;span class=&quot;hljs-string&quot;&gt;&apos;is&apos;&lt;/span&gt;,how_many_times) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Created a list of names wherein the name &apos;Jack&apos; is repeated.\nIn order to check its Occurrence, I ran a for loop in the list named &lt;code&gt;x&lt;/code&gt;.\nUpon each iteration, if the loop variable attains the value same that of received from the user and stored in the variable &lt;code&gt;the_item&lt;/code&gt;, the variable &lt;code&gt;how_many_times&lt;/code&gt; gets incremented by 1.\nAfter attaining some value...We print &lt;code&gt;how_many_times&lt;/code&gt; which stores the value of the occurance of the word &apos;jack&apos;&lt;/p&gt;\n    "],"418":["\n&lt;p&gt;There are several ways that you can transform data from multiple rows into columns.&lt;/p&gt;\n\n&lt;h2&gt;Using &lt;code&gt;PIVOT&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;In SQL Server you can use the &lt;code&gt;PIVOT&lt;/code&gt; function to transform the data from rows to columns:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; Firstname, Amount, PostalCode, LastName, AccountNumber\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(\n  &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, columnname\n  &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; yourtable\n) d\npivot\n(\n  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; columnname &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (Firstname, Amount, PostalCode, LastName, AccountNumber)\n) piv;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/497432&quot; rel=&quot;noreferrer&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Pivot with unknown number of &lt;code&gt;columnnames&lt;/code&gt;&lt;/h3&gt;\n\n&lt;p&gt;If you have an unknown number of &lt;code&gt;columnnames&lt;/code&gt; that you want to transpose, then you can use dynamic SQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@cols&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; NVARCHAR(MAX),\n    &lt;span class=&quot;hljs-variable&quot;&gt;@query&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; NVARCHAR(MAX)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@cols&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; STUFF((&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; QUOTENAME(ColumnName) \n                    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; yourtable\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; ColumnName, id\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id\n            &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; XML PATH(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;), TYPE\n            ).&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;NVARCHAR(MAX)&apos;&lt;/span&gt;) \n        ,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@query&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; N&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@cols&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; N&lt;span class=&quot;hljs-string&quot;&gt;&apos; from \n             (\n                select value, ColumnName\n                from yourtable\n            ) x\n            pivot \n            (\n                max(value)\n                for ColumnName in (&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@cols&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; N&lt;span class=&quot;hljs-string&quot;&gt;&apos;)\n            ) p &apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;exec&lt;/span&gt; sp_executesql &lt;span class=&quot;hljs-variable&quot;&gt;@query&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/497433&quot; rel=&quot;noreferrer&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Using an aggregate function&lt;/h2&gt;\n\n&lt;p&gt;If you do not want to use the &lt;code&gt;PIVOT&lt;/code&gt; function, then you can use an aggregate function with a &lt;code&gt;CASE&lt;/code&gt; expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;FirstName&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;) Firstname,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Amount&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;) Amount,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PostalCode&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;) PostalCode,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;LastName&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;) LastName,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;AccountNumber&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;) AccountNumber\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; yourtable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://data.stackexchange.com/stackoverflow/query/497434&quot; rel=&quot;noreferrer&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Using multiple joins&lt;/h2&gt;\n\n&lt;p&gt;This could also be completed using multiple joins, but you will need some column to associate each of the rows which you do not have in your sample data. But the basic syntax would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; fn.value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; FirstName,\n  a.value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Amount,\n  pc.value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; PostalCode,\n  ln.value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; LastName,\n  an.value &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; AccountNumber\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; yourtable fn\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; yourtable a\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; fn.somecol &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; a.somecol\n  &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a.columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Amount&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; yourtable pc\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; fn.somecol &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; pc.somecol\n  &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; pc.columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PostalCode&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; yourtable ln\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; fn.somecol &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ln.somecol\n  &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; ln.columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;LastName&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; yourtable an\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; fn.somecol &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; an.somecol\n  &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; an.columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;AccountNumber&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; fn.columnname &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Firstname&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is rather a method than just a single script but gives you much more flexibility.&lt;/p&gt;\n\n&lt;p&gt;First of all There are 3 objects:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;User defined TABLE type [&lt;code&gt;ColumnActionList&lt;/code&gt;] -&amp;gt; holds data as\nparameter &lt;/li&gt;\n&lt;li&gt;SP [&lt;code&gt;proc_PivotPrepare&lt;/code&gt;] -&amp;gt; prepares our data&lt;/li&gt;\n&lt;li&gt;SP [&lt;code&gt;proc_PivotExecute&lt;/code&gt;] -&amp;gt; execute the script&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;CREATE TYPE [dbo].[ColumnActionList] AS TABLE\n(\n[ID] [smallint] NOT NULL,\n[ColumnName] nvarchar NOT NULL,\n[Action] nchar NOT NULL\n);\nGO&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PROCEDURE&lt;/span&gt; [dbo].[proc_PivotPrepare] \n    (\n    &lt;span class=&quot;hljs-variable&quot;&gt;@DB&lt;/span&gt;_Name        nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;),\n    &lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt;      nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;)\n    )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DB&lt;/span&gt;_Name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ISNULL(&lt;span class=&quot;hljs-variable&quot;&gt;@DB&lt;/span&gt;_Name,db_name())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Code nvarchar(max)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@MyTab&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; (ID &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;identity&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), [Column_Name] nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;), [Type] &lt;span class=&quot;hljs-type&quot;&gt;nchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), [&lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; Action &lt;span class=&quot;hljs-keyword&quot;&gt;SQL&lt;/span&gt;] nvarchar(max));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Code        &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT [&amp;lt;| SQL_Code |&amp;gt;] = &apos;&apos; &apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;-----| Declare user defined type [ID] / [ColumnName] / [PivotAction] &apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;DECLARE @ColumnListWithActions ColumnActionList;&apos;&apos;&apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;-----| Set [PivotAction] (&apos;&apos;&apos;&apos;S&apos;&apos;&apos;&apos; as default) to select dimentions and values &apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;-----|&apos;&apos;&apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;-----| &apos;&apos;&apos;&apos;S&apos;&apos;&apos;&apos; = Stable column || &apos;&apos;&apos;&apos;D&apos;&apos;&apos;&apos; = Dimention column || &apos;&apos;&apos;&apos;V&apos;&apos;&apos;&apos; = Value column &apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;INSERT INTO  @ColumnListWithActions VALUES (&apos;&apos; + CAST( ROW_NUMBER() OVER (ORDER BY [NAME]) as nvarchar(10)) + &apos;&apos;, &apos;&apos; + &apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos; + [NAME] + &apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;+ &apos;&apos;, &apos;&apos;&apos;&apos;S&apos;&apos;&apos;&apos;);&apos;&apos;&apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;FROM [&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DB&lt;/span&gt;_Name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;].sys.columns  &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;WHERE object_id = object_id(&apos;&apos;[&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DB&lt;/span&gt;_Name &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;]..[&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&apos;) &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;-----| Execute sp_PivotExecute with parameters: columns and dimentions and main table name&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;EXEC [dbo].[sp_PivotExecute] @ColumnListWithActions, &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;&apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;&apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&apos;&apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;UNION ALL &apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT &apos;&apos;----------------------------------------------------------------------------------------------------&apos;&apos; &apos;&lt;/span&gt;                            \n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; SP_EXECUTESQL &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Code;\n\nGO\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PROCEDURE&lt;/span&gt; [dbo].[sp_PivotExecute]\n(\n&lt;span class=&quot;hljs-variable&quot;&gt;@ColumnListWithActions&lt;/span&gt;  ColumnActionList ReadOnly\n,&lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt;                     nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;)\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Step 1 - Select our user-defined-table-variable into temp table&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n\nIF OBJECT_ID(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tempdb.dbo.#ColumnListWithActions&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;U&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; #ColumnListWithActions; \n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; #ColumnListWithActions &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnListWithActions&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Step 2 - Preparing lists of column groups as strings:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;                     nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@Destiny&lt;/span&gt;                        &lt;span class=&quot;hljs-type&quot;&gt;nchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable           nvarchar(max)\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension    nvarchar(max)\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable     nvarchar(max)\n&lt;span class=&quot;hljs-comment&quot;&gt;--############################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Cursor for List of Stable Columns&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--############################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; ColumnListStringCreator_S &lt;span class=&quot;hljs-keyword&quot;&gt;CURSOR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;      [ColumnName]\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;        #ColumnListWithActions\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;       [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;S&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;OPEN&lt;/span&gt; ColumnListStringCreator_S;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; NEXT &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ColumnListStringCreator_S\n&lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;\n  WHILE @&lt;span class=&quot;hljs-variable&quot;&gt;@FETCH&lt;/span&gt;_STATUS &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ISNULL(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; [&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;] ,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; NEXT &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ColumnListStringCreator_S &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CLOSE&lt;/span&gt; ColumnListStringCreator_S;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DEALLOCATE&lt;/span&gt; ColumnListStringCreator_S;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--############################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Cursor for List of Dimension Columns&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--############################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; ColumnListStringCreator_D &lt;span class=&quot;hljs-keyword&quot;&gt;CURSOR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;      [ColumnName]\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;        #ColumnListWithActions\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;       [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;OPEN&lt;/span&gt; ColumnListStringCreator_D;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; NEXT &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ColumnListStringCreator_D\n&lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;\n  WHILE @&lt;span class=&quot;hljs-variable&quot;&gt;@FETCH&lt;/span&gt;_STATUS &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ISNULL(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; [&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;] ,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; NEXT &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ColumnListStringCreator_D &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CLOSE&lt;/span&gt; ColumnListStringCreator_D;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DEALLOCATE&lt;/span&gt; ColumnListStringCreator_D;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--############################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Cursor for List of Variable Columns&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--############################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; ColumnListStringCreator_V &lt;span class=&quot;hljs-keyword&quot;&gt;CURSOR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;      [ColumnName]\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;        #ColumnListWithActions\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;       [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;V&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;OPEN&lt;/span&gt; ColumnListStringCreator_V;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; NEXT &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ColumnListStringCreator_V\n&lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;\n  WHILE @&lt;span class=&quot;hljs-variable&quot;&gt;@FETCH&lt;/span&gt;_STATUS &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ISNULL(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; [&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;] ,&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;FETCH&lt;/span&gt; NEXT &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ColumnListStringCreator_V &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ColumnName&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CLOSE&lt;/span&gt; ColumnListStringCreator_V;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DEALLOCATE&lt;/span&gt; ColumnListStringCreator_V;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable      &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable, LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension, LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable            &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable, LEN(&lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable) &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Step 3 - Preparing table with all possible connections between Dimension columns excluding NULLs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ([DIM_ID] &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;, [ColumnName] nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB \n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [ColumnName]), [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #ColumnListWithActions &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;      &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions nvarchar(max);\n\nIF OBJECT_ID(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tempdb.dbo.##ALL_Dimentions&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;U&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ##ALL_Dimentions; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions      &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT [xxx_ID_xxx] = ROW_NUMBER() OVER (ORDER BY &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;), &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension\n                                            &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; INTO ##ALL_Dimentions &apos;&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM (SELECT DISTINCT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Dimension &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM  &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; WHERE &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; IS NOT NULL &apos;&lt;/span&gt;;\n                                            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([DIM_ID]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;AND &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&apos; IS NOT NULL &apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions   &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; )x&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; SP_EXECUTESQL  &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_Dimentions;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Step 4 - Preparing table with all possible connections between Stable columns excluding NULLs&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ([StabPos_ID] &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;, [ColumnName] nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_TAB \n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [StabPos_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [ColumnName]), [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #ColumnListWithActions &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;S&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;      &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable nvarchar(max);\n\nIF OBJECT_ID(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tempdb.dbo.##ALL_StableColumns&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;U&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ##ALL_StableColumns; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable       &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT xxx_ID_xxx = ROW_NUMBER() OVER (ORDER BY &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;), &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable\n                                            &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; INTO ##ALL_StableColumns &apos;&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM (SELECT DISTINCT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM  &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; WHERE &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [StabPos_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; IS NOT NULL &apos;&lt;/span&gt;;\n                                            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([StabPos_ID]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_TAB)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;AND &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [StabPos_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&apos; IS NOT NULL &apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@StabPos&lt;/span&gt;_ID &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; )x&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; SP_EXECUTESQL  &lt;span class=&quot;hljs-variable&quot;&gt;@SQL&lt;/span&gt;_MainStableColumnTable;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Step 5 - Preparing table with all options ID&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FULL&lt;/span&gt;_SQL_1 NVARCHAR(MAX)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FULL&lt;/span&gt;_SQL_1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;\n\nIF OBJECT_ID(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tempdb.dbo.##FinalTab&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;U&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ##FinalTab; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FULL&lt;/span&gt;_SQL_1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT t.*, dim.[xxx_ID_xxx] &apos;&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; INTO ##FinalTab &apos;&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;hljs-string&quot;&gt;&apos;FROM &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@TableName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; t &apos;&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;hljs-string&quot;&gt;&apos;JOIN ##ALL_Dimentions dim &apos;&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;hljs-string&quot;&gt;&apos;ON t.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; = dim.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                                &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;                               \n                                WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([DIM_ID]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB)\n                                    &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n                                    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FULL&lt;/span&gt;_SQL_1 &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FULL&lt;/span&gt;_SQL_1 &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; AND t.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; = dim.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@DIM&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [DIM_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt;)\n                                    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; SP_EXECUTESQL &lt;span class=&quot;hljs-variable&quot;&gt;@FULL&lt;/span&gt;_SQL_1\n\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--###| Step 6 - Selecting final data&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;--#######################################################################################################################&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@STAB&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ([STAB_ID] &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;, [ColumnName] nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@STAB&lt;/span&gt;_TAB \n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [STAB_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [ColumnName]), [ColumnName]\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #ColumnListWithActions &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;S&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@VAR&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; ([VAR_ID] &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;, [ColumnName] nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;))\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@VAR&lt;/span&gt;_TAB \n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [VAR_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; [ColumnName]), [ColumnName]\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; #ColumnListWithActions &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [Action] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;V&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;smallint&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; nvarchar(max)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; SELECT ID1.*&apos;&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                        WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([xxx_ID_xxx]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ##FinalTab)\n                                            &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                                WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([VAR_ID]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@VAR&lt;/span&gt;_TAB)\n                                                    &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n                                                        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&apos;, [ID&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@VAR&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [VAR_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;] =  ID&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@VAR&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [VAR_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt;)\n                                                        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@z&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                                    &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n                                                    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                                &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; \n                                        &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM ( SELECT * FROM ##ALL_StableColumns)ID1&apos;&lt;/span&gt;;\n                                        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                        WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([xxx_ID_xxx]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ##FinalTab)\n                                        &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; \n                                                                                &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; LEFT JOIN (SELECT &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Stable &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; , &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@ListOfColumns&lt;/span&gt;_Variable \n                                                                                &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM ##FinalTab WHERE [xxx_ID_xxx] = &apos;&lt;/span&gt; \n                                                                                &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; )ID&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))  \n                                                                                &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; ON 1 = 1&apos;&lt;/span&gt; \n                                                                                WHILE &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;([STAB_ID]) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@STAB&lt;/span&gt;_TAB)\n                                                                                &lt;span class=&quot;hljs-keyword&quot;&gt;BEGIN&lt;/span&gt;\n                                                                                    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; AND ID1.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@STAB&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [STAB_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; = ID&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;CAST&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; [ColumnName] &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@STAB&lt;/span&gt;_TAB &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; [STAB_ID] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt;)\n                                                                                    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                                                                &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n                                            &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                                        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; ##ALL_Dimentions;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; SP_EXECUTESQL &lt;span class=&quot;hljs-variable&quot;&gt;@FinalCode&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From executing the first query (by passing source DB and table name) you will get a pre-created execution query for the second SP, all you have to do is define is the column from your source:\n+ Stable\n+ Value (will be used to concentrate values based on that)\n+ Dim (column you want to use to pivot by)&lt;/p&gt;\n\n&lt;p&gt;Names and datatypes will be defined automatically!&lt;/p&gt;\n\n&lt;p&gt;I cant recommend it for any production environments but does the job for adhoc BI requests. &lt;/p&gt;\n    ","\n&lt;p&gt;Please try&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; pvt (Present &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, [Absent] &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;);\nGO\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; pvt &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;);\nGO\n&lt;span class=&quot;hljs-comment&quot;&gt;--Unpivot the table.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Code, &lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n   (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Present, Absent\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; pvt) p\nUNPIVOT\n   (&lt;span class=&quot;hljs-keyword&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FOR&lt;/span&gt; Code &lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; \n      (Present, [Absent])\n)&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; unpvt;\nGO\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; pvt\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One more option which can be very useful is suing CROSS APPLY&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- Original data&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Stage(id,col1,col2,col3)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- row to columns using CROSS APPLY&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; Stage.id,v.idd, v.colc\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Stage(id,col1,col2,col3)\n&lt;span class=&quot;hljs-keyword&quot;&gt;CROSS&lt;/span&gt; APPLY (&lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;col1&apos;&lt;/span&gt;, col1),(&lt;span class=&quot;hljs-string&quot;&gt;&apos;col2&apos;&lt;/span&gt;, col2),(&lt;span class=&quot;hljs-string&quot;&gt;&apos;col3&apos;&lt;/span&gt;, col3)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; v(idd,colc)\nGO\n&lt;/code&gt;&lt;/pre&gt;\n    "],"419":["\n&lt;p&gt;&lt;strong&gt;(StartA &amp;lt;= EndB)  and  (EndA &amp;gt;= StartB)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Proof:&lt;/em&gt;&lt;br&gt;\nLet ConditionA Mean that DateRange A Completely After DateRange B&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;_                        |---- DateRange A ------|\n|---Date Range B -----|                          _\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(True if &lt;code&gt;StartA &amp;gt; EndB&lt;/code&gt;)&lt;/p&gt;\n&lt;p&gt;Let ConditionB Mean that DateRange A is Completely Before DateRange B&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;|---- DateRange A -----|                        _ \n_                          |---Date Range B ----|\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(True if &lt;code&gt;EndA &amp;lt; StartB&lt;/code&gt;)&lt;/p&gt;\n&lt;p&gt;Then Overlap exists if Neither A Nor B is true -&lt;br&gt;\n(If one range is neither completely after the other,&lt;br&gt;\nnor completely before the other,\nthen they must overlap.)&lt;/p&gt;\n&lt;p&gt;Now one of &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&quot; rel=&quot;noreferrer&quot;&gt;De Morgan&apos;s laws&lt;/a&gt; says that:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;Not (A Or B)&lt;/code&gt;  &amp;lt;=&amp;gt;  &lt;code&gt;Not A And Not B&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Which translates to: &lt;code&gt;(StartA &amp;lt;= EndB)  and  (EndA &amp;gt;= StartB)&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;NOTE: This includes conditions where the edges overlap exactly.  If you wish to exclude that,&lt;br&gt;\nchange the &lt;code&gt;&amp;gt;=&lt;/code&gt; operators to &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;=&lt;/code&gt;  to &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;NOTE2. Thanks to @Baodad, see &lt;a href=&quot;http://baodad.blogspot.com/2014/06/date-range-overlap.html&quot; rel=&quot;noreferrer&quot;&gt;this blog&lt;/a&gt;, the actual overlap is least of:&lt;br&gt;\n{ &lt;code&gt;endA-startA&lt;/code&gt;, &lt;code&gt;endA - startB&lt;/code&gt;, &lt;code&gt;endB-startA&lt;/code&gt;, &lt;code&gt;endB - startB&lt;/code&gt; }&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;(StartA &amp;lt;= EndB)  and  (EndA &amp;gt;= StartB)&lt;/code&gt;\n&lt;code&gt;(StartA &amp;lt;= EndB)  and  (StartB &amp;lt;= EndA)&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;NOTE3. Thanks to @tomosius, a shorter version reads:&lt;br&gt;\n&lt;code&gt;DateRangesOverlap = max(start1, start2) &amp;lt; min(end1, end2)&lt;/code&gt;&lt;br&gt;\nThis is actually a syntactical shortcut for what is a longer implementation, which includes extra checks to verify that the start dates are on or before the endDates.  Deriving this from above:&lt;/p&gt;\n&lt;p&gt;If start and end dates can be out of order, i.e., if it is possible that &lt;code&gt;startA &amp;gt; endA&lt;/code&gt; or &lt;code&gt;startB &amp;gt; endB&lt;/code&gt;, then you also have to check that they are in order, so that means you have to add two additional validity rules:&lt;br&gt;\n&lt;code&gt;(StartA &amp;lt;= EndB) and (StartB &amp;lt;= EndA) and (StartA &amp;lt;= EndA) and (StartB &amp;lt;= EndB)&lt;/code&gt;\nor:&lt;br&gt;\n&lt;code&gt;(StartA &amp;lt;= EndB) and (StartA &amp;lt;= EndA) and (StartB &amp;lt;= EndA) and (StartB &amp;lt;= EndB)&lt;/code&gt;\nor,&lt;br&gt;\n&lt;code&gt;(StartA &amp;lt;= Min(EndA, EndB) and (StartB &amp;lt;= Min(EndA, EndB))&lt;/code&gt;\nor:&lt;br&gt;\n&lt;code&gt;(Max(StartA, StartB) &amp;lt;= Min(EndA, EndB)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;But to implement &lt;code&gt;Min()&lt;/code&gt; and &lt;code&gt;Max()&lt;/code&gt;, you have to code, (using C ternary for terseness),:&lt;br&gt;\n&lt;code&gt;(StartA &amp;gt; StartB? Start A: StartB) &amp;lt;= (EndA &amp;lt; EndB? EndA: EndB)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;NOTE4.  Thanks to Carl for noticing this, but  &lt;a href=&quot;https://stackoverflow.com/questions/27430253/find-if-given-date-range-inside-another-date-range-in-mysql/27430668#27430668&quot;&gt;another answer&lt;/a&gt; shows an equivalent mathematical expression for this logical expression. Because the product of any two real numbers with opposite sign is negative and with the same sign it is positive, if you convert the datetimes to fractional numbers (and most DBMSs internally use numbers to represent datetimes), the above logical expression can also be evaluated using the following mathematical expression:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;(EndA  - StartA) * (StartB - EndB) &amp;lt;= 0\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I believe that it is sufficient to say that the two ranges overlap if:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(StartDate1 &amp;lt;= EndDate2) and (StartDate2 &amp;lt;= EndDate1)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This article &lt;a href=&quot;http://www.codeproject.com/KB/datetime/TimePeriod.aspx&quot;&gt;Time Period Library for .NET&lt;/a&gt; describes the relation of two time periods by the enumeration &lt;strong&gt;PeriodRelation&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// ------------------------------------------------------------------------\npublic enum PeriodRelation\n{\n    After,\n    StartTouching,\n    StartInside,\n    InsideStartTouching,\n    EnclosingStartTouching,\n    Enclosing,\n    EnclosingEndTouching,\n    ExactMatch,\n    Inside,\n    InsideEndTouching,\n    EndInside,\n    EndTouching,\n    Before,\n} // enum PeriodRelation\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/0c6q0.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For reasoning about temporal relations (or any other interval relations, come to that), consider &lt;a href=&quot;http://en.wikipedia.org/wiki/Allen%27s_Interval_Algebra&quot; rel=&quot;noreferrer&quot;&gt;Allen&apos;s Interval Algebra&lt;/a&gt;.  It describes the 13 possible relations that two intervals can have with respect to each other.  You can find other references  &quot;Allen Interval&quot; seems to be an operative search term.  You can also find information about these operations in Snodgrass&apos;s &lt;a href=&quot;http://www.cs.arizona.edu/~rts/publications.html&quot; rel=&quot;noreferrer&quot;&gt;Developing Time-Oriented Applications in SQL&lt;/a&gt; (PDF available online at URL), and in Date, Darwen and Lorentzos &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B005UY0W0E&quot; rel=&quot;noreferrer&quot;&gt;Temporal Data and the Relational Model&lt;/a&gt; (2002) or  &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B00N2SNSUG&quot; rel=&quot;noreferrer&quot;&gt;Time and Relational Theory: Temporal Databases in the Relational Model and SQL&lt;/a&gt; (2014; effectively the second edition of TD&amp;amp;RM).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The short(ish) answer is: given two date intervals &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; with components &lt;code&gt;.start&lt;/code&gt; and &lt;code&gt;.end&lt;/code&gt; and the constraint &lt;code&gt;.start &amp;lt;= .end&lt;/code&gt;, then two intervals overlap if:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A.end &amp;gt;= B.start AND A.start &amp;lt;= B.end\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can tune the use of &lt;code&gt;&amp;gt;=&lt;/code&gt; vs &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;=&lt;/code&gt; vs &lt;code&gt;&amp;lt;&lt;/code&gt; to meet your requirements for degree of overlap.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;ErikE comments:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;You can only get 13 if you count things funny... I can get &quot;15 possible relations that two intervals can have&quot; when I go crazy with it. By sensible counting, I get only six, and if you throw out caring whether A or B comes first, I get only three (no intersect, partially intersect, one wholly within other). 15 goes like this: [before:before, start, within, end, after], [start:start, within, end, after], [within:within, end, after], [end:end, after], [after:after]. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I think that you cannot count the two entries &apos;before:before&apos; and &apos;after:after&apos;.  I could see 7 entries if you equate some relations with their inverses (see the diagram in the referenced Wikipedia URL; it has 7 entries, 6 of which have a different inverse, with equals not having a distinct inverse).  And whether three is sensible depends on your requirements.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;----------------------|-------A-------|----------------------\n    |----B1----|\n           |----B2----|\n               |----B3----|\n               |----------B4----------|\n               |----------------B5----------------|\n                      |----B6----|\n----------------------|-------A-------|----------------------\n                      |------B7-------|\n                      |----------B8-----------|\n                         |----B9----|\n                         |----B10-----|\n                         |--------B11--------|\n                                      |----B12----|\n                                         |----B13----|\n----------------------|-------A-------|----------------------\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the overlap itself should be calculated as well, you can use the following formula:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;overlap = max(0, min(EndDate1, EndDate2) - max(StartDate1, StartDate2))\nif (overlap &amp;gt; 0) { \n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;All the solutions that check a multitude of conditions based on where the ranges are in relation to one another can be greatly simplified by &lt;em&gt;&lt;strong&gt;simply ensuring that one range starts before or at the same time as the other.&lt;/strong&gt;&lt;/em&gt; You can do this by swapping the ranges if necessary up front.&lt;/p&gt;\n&lt;p&gt;Then, you can detect overlap if the second range start is either:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;less than or equal to the first range end (if ranges are inclusive, containing both the start and end times); or&lt;/li&gt;\n&lt;li&gt;less than (if ranges are inclusive of start and exclusive of end).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For example (assuming inclusive at both ends), there&apos;s only four possibilities for range 2of which &lt;em&gt;one&lt;/em&gt; is a non-overlap (the &lt;code&gt;&amp;gt;&lt;/code&gt; at the end of the range means it doesn&apos;t matter where the range ends):&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;|-----|        range 1, lines below are all range 2.\n|--&amp;gt;  :        overlap.\n |--&amp;gt; :        overlap.\n      |---&amp;gt;    overlap (no overlap in exclusive-of-end case).\n       |---&amp;gt;   no overlap.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;em&gt;endpoint&lt;/em&gt; of the second range doesn&apos;t affect the result at all. So, in pseudo-code, you can do something like (assuming &lt;code&gt;s &amp;lt;= e&lt;/code&gt; within a given range):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hasOverlap&lt;/span&gt; (r1, r2):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r1.s &amp;gt; r2.s: swap r1, r2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r2.s &amp;lt;= r1.e\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the ranges are &lt;em&gt;exclusive&lt;/em&gt; at the end, you just have to replace &lt;code&gt;&amp;lt;=&lt;/code&gt; with &lt;code&gt;&amp;lt;&lt;/code&gt; in the expression you return.&lt;/p&gt;\n&lt;p&gt;This greatly limits the number of checks you have to make because you remove half of the problem space early by ensuring the first range never starts after the second.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;And, since &quot;code talks&quot;, here is some Python code that shows this in action, with quite a few test cases. First, the &lt;code&gt;InclusiveRange&lt;/code&gt; class:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;InclusiveRange&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;InclusiveRange class to represent a lower and upper bound&quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, start, end&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Initialisation ensures start &amp;lt;= end&quot;&quot;&quot;&lt;/span&gt;\n        self.start = &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(start, end)\n        self.end = &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(start, end)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; Return representation for f-string&quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&quot;(&lt;span class=&quot;hljs-subst&quot;&gt;{self.start}&lt;/span&gt;, &lt;span class=&quot;hljs-subst&quot;&gt;{self.end}&lt;/span&gt;)&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;overlaps&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;True if range overlaps with another&quot;&quot;&quot;&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Very limited recursion to ensure start of first range&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# isn&apos;t after start of second.&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self.start &amp;gt; other.start:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; other.overlaps(self)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Greatly simplified check for overlap.&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; other.start &amp;lt;= self.end\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then a test case handler to allow us to nicely present the result of a &lt;em&gt;single&lt;/em&gt; test case:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_case&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;range1, range2&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Single test case checker&quot;&quot;&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Get low and high value for &quot;graphic&quot; output.&lt;/span&gt;\n\n    low = &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(range1.start, range2.start)\n    high = &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(range1.end, range2.end)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Output ranges and graphic.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;r1=&lt;span class=&quot;hljs-subst&quot;&gt;{range1}&lt;/span&gt; r2=&lt;span class=&quot;hljs-subst&quot;&gt;{range2}&lt;/span&gt;: &quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(low, high + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        is_in_first = range1.start &amp;lt;= val &amp;lt;= range1.end\n        is_in_second = range2.start &amp;lt;= val &amp;lt;= range2.end\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; is_in_first &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; is_in_second:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;|&quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; is_in_first:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;&quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; is_in_second:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Finally, output result of overlap check.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot; - &lt;span class=&quot;hljs-subst&quot;&gt;{range1.overlaps(range2)}&lt;/span&gt;\\n&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then finally, a decent chunk of test cases to which you can add your own if need be:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Various test cases, add others if you doubt the correctness.&lt;/span&gt;\n\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\ntest_case(InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), InclusiveRange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Running that produces the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;r1=(0, 1) r2=(8, 9): &apos;&apos;      ,, - False\nr1=(0, 4) r2=(5, 9): &apos;&apos;&apos;&apos;&apos;,,,,, - False\nr1=(0, 4) r2=(4, 9): &apos;&apos;&apos;&apos;|,,,,, - True\nr1=(0, 7) r2=(2, 9): &apos;&apos;||||||,, - True\nr1=(0, 4) r2=(0, 9): |||||,,,,, - True\nr1=(0, 9) r2=(0, 9): |||||||||| - True\nr1=(0, 9) r2=(4, 5): &apos;&apos;&apos;&apos;||&apos;&apos;&apos;&apos; - True\nr1=(8, 9) r2=(0, 1): ,,      &apos;&apos; - False\nr1=(5, 9) r2=(0, 4): ,,,,,&apos;&apos;&apos;&apos;&apos; - False\nr1=(4, 9) r2=(0, 4): ,,,,|&apos;&apos;&apos;&apos;&apos; - True\nr1=(2, 9) r2=(0, 7): ,,||||||&apos;&apos; - True\nr1=(0, 9) r2=(0, 4): |||||&apos;&apos;&apos;&apos;&apos; - True\nr1=(0, 9) r2=(0, 9): |||||||||| - True\nr1=(4, 5) r2=(0, 9): ,,,,||,,,, - True\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where each line has:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the two ranges being evaluated;&lt;/li&gt;\n&lt;li&gt;a graphical representation of the &quot;range space&quot; (from lowest start to highest end) where each character is a value in that &quot;range space&quot;: &lt;code&gt;&apos;&lt;/code&gt; indicates a value in the first range only, &lt;code&gt;,&lt;/code&gt; indicates a value in the second range only, &lt;code&gt;|&lt;/code&gt; indicates a value in both ranges, and &lt;code&gt; &lt;/code&gt; indicates a value in neither range.&lt;/li&gt;\n&lt;li&gt;the result of the overlap check.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You can see quite clearly that you only get true in the overlap check when there is at least one value in &lt;em&gt;both&lt;/em&gt; ranges (i.e., a &lt;code&gt;|&lt;/code&gt; character). Every other case gives false.&lt;/p&gt;\n&lt;p&gt;Feel free to use any other values if you want to add more test cases.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is yet another solution using JavaScript. Specialities of my solution:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Handles null values as infinity&lt;/li&gt;\n&lt;li&gt;Assumes that the lower bound is inclusive and the upper bound exclusive.&lt;/li&gt;\n&lt;li&gt;Comes with a bunch of tests&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The tests are based on integers but since date objects in JavaScript are comparable you can just throw in two date objects as well. Or you could throw in the millisecond timestamp.&lt;/p&gt;\n\n&lt;h1&gt;Code:&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Compares to comparable objects to find out whether they overlap.\n * It is assumed that the interval is in the format [from,to) (read: from is inclusive, to is exclusive).\n * A null value is interpreted as infinity\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;intervalsOverlap&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from1, to1, from2, to2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (to2 === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || from1 &amp;lt; to2) &amp;amp;&amp;amp; (to1 === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || to1 &amp;gt; from2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Tests:&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;firstRange, secondRange, expected&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;it&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(firstRange) + &lt;span class=&quot;hljs-string&quot;&gt;&apos; and &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(secondRange), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;expect&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;intervalsOverlap&lt;/span&gt;(firstRange[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], firstRange[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], secondRange[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], secondRange[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])).&lt;span class=&quot;hljs-title function_&quot;&gt;toBe&lt;/span&gt;(expected);\n        });\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;no overlap (touching ends)&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    });\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do overlap (one end overlaps)&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    });\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do overlap (one range included in other range)&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    });\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;describe&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;do overlap (both ranges equal)&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-title function_&quot;&gt;generateTest&lt;/span&gt;([&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], [&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result when run with karma&amp;amp;jasmine&amp;amp;PhantomJS:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;PhantomJS 1.9.8 (Linux): Executed 20 of 20 SUCCESS (0.003 secs / 0.004 secs)&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/bDVe1.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/bDVe1.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is the code that does the magic:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; var isOverlapping =  ((A == null || D == null || A &amp;lt;= D) \n            &amp;amp;&amp;amp; (C == null || B == null || C &amp;lt;= B)\n            &amp;amp;&amp;amp; (A == null || B == null || A &amp;lt;= B)\n            &amp;amp;&amp;amp; (C == null || D == null || C &amp;lt;= D));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where.. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A -&amp;gt; 1Start&lt;/li&gt;\n&lt;li&gt;B -&amp;gt; 1End &lt;/li&gt;\n&lt;li&gt;C -&amp;gt; 2Start &lt;/li&gt;\n&lt;li&gt;D -&amp;gt; 2End&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Proof? Check out this test &lt;a href=&quot;https://gist.github.com/sandeeptalabathula/3b469065251eb1992dd92b168fea0b61&quot; rel=&quot;noreferrer&quot;&gt;console code gist&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;An easy way to remember the solution would be&lt;br&gt;\n&lt;code&gt;min(ends)&amp;gt;max(starts)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my solution in &lt;em&gt;Java&lt;/em&gt;, which works on unbounded intervals too&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Boolean &lt;span class=&quot;hljs-title function_&quot;&gt;overlap&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(Timestamp startA, Timestamp endA,\n                         Timestamp startB, Timestamp endB)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (endB == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || startA == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || !startA.after(endB))\n        &amp;amp;&amp;amp; (endA == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || startB == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || !endA.before(startB));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would do &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;StartDate1.IsBetween(StartDate2, EndDate2) || EndDate1.IsBetween(StartDate2, EndDate2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;IsBetween&lt;/code&gt; is something like &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    public static bool IsBetween(this DateTime value, DateTime left, DateTime right) {\n        return (value &amp;gt; left &amp;amp;&amp;amp; value &amp;lt; right) || (value &amp;lt; left &amp;amp;&amp;amp; value &amp;gt; right);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The solution posted here did not work for all overlapping ranges... &lt;/p&gt;\n\n&lt;pre&gt;----------------------|-------A-------|----------------------\n    |----B1----|\n           |----B2----|\n               |----B3----|\n               |----------B4----------|\n               |----------------B5----------------|\n                      |----B6----|\n----------------------|-------A-------|----------------------\n                      |------B7-------|\n                      |----------B8-----------|\n                         |----B9----|\n                         |----B10-----|\n                         |--------B11--------|\n                                      |----B12----|\n                                         |----B13----|\n----------------------|-------A-------|----------------------&lt;/pre&gt;\n\n&lt;p&gt;my working solution was:&lt;/p&gt;\n\n&lt;pre&gt;AND (\n  (&apos;start_date&apos; BETWEEN STARTDATE AND ENDDATE) -- caters for inner and end date outer\n  OR\n  (&apos;end_date&apos; BETWEEN STARTDATE AND ENDDATE) -- caters for inner and start date outer\n  OR\n  (STARTDATE BETWEEN &apos;start_date&apos; AND &apos;end_date&apos;) -- only one needed for outer range where dates are inside.\n) \n&lt;/pre&gt;\n    ","\n&lt;p&gt;As there have been several answers for different languages and environments, here is one for standard ANSI SQL.&lt;/p&gt;\n&lt;p&gt;In standard SQL it is as as simple as&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;(StartDate1, EndDate1) overlaps (StartDate2, EndDate2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;assuming all four columns are &lt;code&gt;DATE&lt;/code&gt; or &lt;code&gt;TIMESTAMP&lt;/code&gt; columns. It returns true if both ranges have at least one day in common (assuming &lt;code&gt;DATE&lt;/code&gt; values)&lt;/p&gt;\n&lt;p&gt;(However not all DBMS products support that)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;In PostgreSQL it&apos;s also easy to test for &lt;em&gt;inclusion&lt;/em&gt; by using &lt;a href=&quot;https://www.postgresql.org/docs/current/rangetypes.html&quot; rel=&quot;noreferrer&quot;&gt;date ranges&lt;/a&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;daterange(StartDate1, EndDate1) @&amp;gt; daterange(StartDate2, EndDate2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the above returns true if the second range is completely included in the first (which is different to &quot;overlaps&quot;)&lt;/p&gt;\n    ","\n&lt;p&gt;This was my javascript solution with moment.js:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Current row dates\nvar dateStart = moment(&quot;2014-08-01&quot;, &quot;YYYY-MM-DD&quot;);\nvar dateEnd = moment(&quot;2014-08-30&quot;, &quot;YYYY-MM-DD&quot;);\n\n// Check with dates above\nvar rangeUsedStart = moment(&quot;2014-08-02&quot;, &quot;YYYY-MM-DD&quot;);\nvar rangeUsedEnd = moment(&quot;2014-08-015&quot;, &quot;YYYY-MM-DD&quot;);\n\n// Range covers other ?\nif((dateStart &amp;lt;= rangeUsedStart) &amp;amp;&amp;amp; (rangeUsedEnd &amp;lt;= dateEnd)) {\n    return false;\n}\n// Range intersects with other start ?\nif((dateStart &amp;lt;= rangeUsedStart) &amp;amp;&amp;amp; (rangeUsedStart &amp;lt;= dateEnd)) {\n    return false;\n}\n// Range intersects with other end ?\nif((dateStart &amp;lt;= rangeUsedEnd) &amp;amp;&amp;amp; (rangeUsedEnd &amp;lt;= dateEnd)) {\n    return false;\n}\n\n// All good\nreturn true;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Short answer using momentjs&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function isOverlapping(startDate1, endDate1, startDate2, endDate2){ \n    return moment(startDate1).isSameOrBefore(endDate2) &amp;amp;&amp;amp; \n    moment(startDate2).isSameOrBefore(endDate1);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the answer is based on above answers, but its shortened.&lt;/p&gt;\n    ","\n&lt;p&gt;In Microsoft SQL SERVER  - SQL Function   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE FUNCTION IsOverlapDates \n(\n    @startDate1 as datetime,\n    @endDate1 as datetime,\n    @startDate2 as datetime,\n    @endDate2 as datetime\n)\nRETURNS int\nAS\nBEGIN\nDECLARE @Overlap as int\nSET @Overlap = (SELECT CASE WHEN  (\n        (@startDate1 BETWEEN @startDate2 AND @endDate2) -- caters for inner and end date outer\n        OR\n        (@endDate1 BETWEEN @startDate2 AND @endDate2) -- caters for inner and start date outer\n        OR\n        (@startDate2 BETWEEN @startDate1 AND @endDate1) -- only one needed for outer range where dates are inside.\n        ) THEN 1 ELSE 0 END\n    )\n    RETURN @Overlap\n\nEND\nGO\n\n--Execution of the above code\nDECLARE @startDate1 as datetime\nDECLARE @endDate1 as datetime\nDECLARE @startDate2 as datetime\nDECLARE @endDate2 as datetime\nDECLARE @Overlap as int\nSET @startDate1 = &apos;2014-06-01 01:00:00&apos; \nSET @endDate1 =   &apos;2014-06-01 02:00:00&apos;\nSET @startDate2 = &apos;2014-06-01 01:00:00&apos; \nSET @endDate2 =   &apos;2014-06-01 01:30:00&apos;\n\nSET @Overlap = [dbo].[IsOverlapDates]  (@startDate1, @endDate1, @startDate2, @endDate2)\n\nSELECT Overlap = @Overlap\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;the simplest&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The simplest way is to use a well-engineered dedicated library for date-time work.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someInterval.overlaps( anotherInterval )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;java.time &amp;amp; ThreeTen-Extra&lt;/h1&gt;\n\n&lt;p&gt;The best in the business is the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/a&gt; framework built into Java 8 and later. Add to that the &lt;a href=&quot;http://www.threeten.org/threeten-extra/&quot; rel=&quot;nofollow noreferrer&quot;&gt;ThreeTen-Extra&lt;/a&gt; project that supplements java.time with additional classes, specifically the &lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; class we need here.&lt;/p&gt;\n\n&lt;p&gt;As for the &lt;code&gt;language-agnostic&lt;/code&gt; tag on this Question, the source code for both projects is available for use in other languages (mind their licenses). &lt;/p&gt;\n\n&lt;h2&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;org.threeten.extra.Interval&lt;/code&gt;&lt;/a&gt; class is handy, but requires date-time moments (&lt;code&gt;java.time.Instant&lt;/code&gt; objects) rather than date-only values. So we proceed by using the first moment of the day in UTC to represent the date.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Instant.parse( &lt;span class=&quot;hljs-string&quot;&gt;&quot;2016-01-01T00:00:00Z&quot;&lt;/span&gt; );\n&lt;span class=&quot;hljs-type&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Instant.parse( &lt;span class=&quot;hljs-string&quot;&gt;&quot;2016-02-01T00:00:00Z&quot;&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create an &lt;code&gt;Interval&lt;/code&gt; to represent that span of time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Interval&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;interval_A&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Interval.of( start , stop );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can also define an &lt;code&gt;Interval&lt;/code&gt; with a starting moment plus a &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/time/Duration.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;start_B&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Instant.parse( &lt;span class=&quot;hljs-string&quot;&gt;&quot;2016-01-03T00:00:00Z&quot;&lt;/span&gt; );\n&lt;span class=&quot;hljs-type&quot;&gt;Interval&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;interval_B&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Interval.of( start_B , Duration.of( &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; , ChronoUnit.DAYS ) );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Comparing to test for overlaps is easy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;overlaps&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; interval_A.overlaps( interval_B );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can compare an &lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; against another &lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/time/Instant.html?is-external=true&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Instant&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#abuts-org.threeten.extra.Interval-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;abuts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#contains-java.time.Instant-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#encloses-org.threeten.extra.Interval-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;encloses&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#equals-java.lang.Object-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;equals&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#isAfter-org.threeten.extra.Interval-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;isAfter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#isBefore-org.threeten.extra.Interval-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;isBefore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html#overlaps-org.threeten.extra.Interval-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;overlaps&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;All of these use the &lt;code&gt;Half-Open&lt;/code&gt; approach to defining a span of time where the beginning is &lt;em&gt;inclusive&lt;/em&gt; and the ending is &lt;em&gt;exclusive&lt;/em&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;I had a situation where we had dates instead of datetimes, and the dates could overlap only on start/end. Example below:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/qzRBx.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/qzRBx.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(Green is the current interval, blue blocks are valid intervals, red ones are overlapping intervals).&lt;/p&gt;\n\n&lt;p&gt;I adapted Ian Nelson&apos;s answer to the following solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   (startB &amp;lt;= startA &amp;amp;&amp;amp; endB &amp;gt; startA)\n|| (startB &amp;gt;= startA &amp;amp;&amp;amp; startB &amp;lt; endA)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This matches all overlap cases but ignores the allowed overlap ones.&lt;/p&gt;\n    ","\n&lt;p&gt;The mathematical solution given by @Bretana is good but neglects two specific details:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;aspect of closed or half-open intervals&lt;/li&gt;\n&lt;li&gt;empty intervals&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;About the closed or open state of interval boundaries, the solution of @Bretana valid &lt;strong&gt;for closed intervals&lt;/strong&gt; &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;(StartA &amp;lt;= EndB)  and  (EndA &amp;gt;= StartB)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;can be rewritten &lt;strong&gt;for half-open intervals&lt;/strong&gt; to:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;(StartA &amp;lt; EndB) and (EndA &amp;gt; StartB)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This correction is necessary because an open interval boundary does not belong to the value range of an interval by definition.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;And about &lt;strong&gt;empty intervals&lt;/strong&gt;, well, here the relationship shown above does NOT hold. Empty intervals which do not contain any valid value by definition must be handled as special case. I demonstrate it by my Java time library &lt;a href=&quot;https://github.com/MenoData/Time4J&quot; rel=&quot;nofollow noreferrer&quot;&gt;Time4J&lt;/a&gt; via this example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;MomentInterval a = MomentInterval.between(Instant.now(), Instant.now().plusSeconds(2));\nMomentInterval b = a.collapse(); // make b an empty interval out of a\n\nSystem.out.println(a); // [2017-04-10T05:28:11,909000000Z/2017-04-10T05:28:13,909000000Z)\nSystem.out.println(b); // [2017-04-10T05:28:11,909000000Z/2017-04-10T05:28:11,909000000Z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The leading square bracket &quot;[&quot; indicates a closed start while the last bracket &quot;)&quot; indicates an open end.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;System.out.println(\n      &quot;startA &amp;lt; endB: &quot; + a.getStartAsInstant().isBefore(b.getEndAsInstant())); // false\nSystem.out.println(\n      &quot;endA &amp;gt; startB: &quot; + a.getEndAsInstant().isAfter(b.getStartAsInstant())); // true\n\nSystem.out.println(&quot;a overlaps b: &quot; + a.intersects(b)); // a overlaps b: false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As shown above, empty intervals violate the overlap condition above (especially startA &amp;lt; endB), so Time4J (and other libraries, too) has to handle it as special edge case in order to guarantee that the overlap of any arbitrary interval with an empty interval does not exist. Of course, date intervals (which are closed by default in Time4J but can be half-open, too, like empty date intervals) are handled in a similar way.&lt;/p&gt;\n    ","\n&lt;p&gt;This is an extension to the &lt;a href=&quot;https://stackoverflow.com/a/325964/2314737&quot;&gt;excellent answer&lt;/a&gt; by @charles-bretana.&lt;/p&gt;\n\n&lt;p&gt;The answer however does not make a distinction among open, closed, and half-open (or half-closed) intervals.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Case 1&lt;/strong&gt;: A, B are closed intervals&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A = [StartA, EndA]\nB = [StartB, EndB]\n\n                         [---- DateRange A ------]   (True if StartA &amp;gt; EndB)\n[--- Date Range B -----]                           \n\n\n[---- DateRange A -----]                             (True if EndA &amp;lt; StartB)\n                         [--- Date Range B ----]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Overlap iff: &lt;code&gt;(StartA &amp;lt;= EndB)  and  (EndA &amp;gt;= StartB)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Case 2&lt;/strong&gt;: A, B are open intervals&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A = (StartA, EndA)\nB = (StartB, EndB)\n\n                         (---- DateRange A ------)   (True if StartA &amp;gt;= EndB)\n(--- Date Range B -----)                           \n\n(---- DateRange A -----)                             (True if EndA &amp;lt;= StartB)\n                         (--- Date Range B ----)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Overlap iff: &lt;code&gt;(StartA &amp;lt; EndB)  and  (EndA &amp;gt; StartB)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Case 3&lt;/strong&gt;: A, B right open &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A = [StartA, EndA)\nB = [StartB, EndB)\n\n                         [---- DateRange A ------)   (True if StartA &amp;gt;= EndB) \n[--- Date Range B -----)                           \n\n[---- DateRange A -----)                             (True if EndA &amp;lt;= StartB)\n                         [--- Date Range B ----)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Overlap condition: &lt;code&gt;(StartA &amp;lt; EndB)  and  (EndA &amp;gt; StartB)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Case 4&lt;/strong&gt;: A, B left open&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A = (StartA, EndA]\nB = (StartB, EndB]\n\n                         (---- DateRange A ------]   (True if StartA &amp;gt;= EndB)\n(--- Date Range B -----]                           \n\n(---- DateRange A -----]                             (True if EndA &amp;lt;= StartB)\n                         (--- Date Range B ----]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Overlap condition: &lt;code&gt;(StartA &amp;lt; EndB)  and  (EndA &amp;gt; StartB)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Case 5&lt;/strong&gt;: A right open, B closed&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;A = [StartA, EndA)\nB = [StartB, EndB]\n\n                         [---- DateRange A ------)    (True if StartA &amp;gt; EndB)\n[--- Date Range B -----]                           \n\n\n[---- DateRange A -----)                              (True if EndA &amp;lt;= StartB)  \n                         [--- Date Range B ----]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Overlap condition: &lt;code&gt;(StartA &amp;lt;= EndB)  and  (EndA &amp;gt; StartB)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;etc...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Finally, the general condition for two intervals to overlap is &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;(StartA &amp;lt; EndB)  and  (EndA &amp;gt; StartB)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;where  turns a strict inequality into a non-strict one whenever the comparison is made between two included endpoint.&lt;/p&gt;\n    ","\n&lt;p&gt;In case you&apos;re using a date range that has not ended yet (still on going) e.g. not set \nendDate = &apos;0000-00-00&apos; you can not use BETWEEN because 0000-00-00 is not a valid date!&lt;/p&gt;\n\n&lt;p&gt;I used this solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(Startdate BETWEEN &apos;&quot;.$startdate2.&quot;&apos; AND &apos;&quot;.$enddate2.&quot;&apos;)  //overlap: starts between start2/end2\nOR (Startdate &amp;lt; &apos;&quot;.$startdate2.&quot;&apos; \n  AND (enddate = &apos;0000-00-00&apos; OR enddate &amp;gt;= &apos;&quot;.$startdate2.&quot;&apos;)\n) //overlap: starts before start2 and enddate not set 0000-00-00 (still on going) or if enddate is set but higher then startdate2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If startdate2 is higher then enddate there is no overlap!&lt;/p&gt;\n    ","\n&lt;p&gt;The answer is too simple for me so I have created a more generic dynamic SQL statement which checks to see if a person has any overlapping dates.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT DISTINCT T1.EmpID\nFROM Table1 T1\nINNER JOIN Table2 T2 ON T1.EmpID = T2.EmpID \n    AND T1.JobID &amp;lt;&amp;gt; T2.JobID\n    AND (\n        (T1.DateFrom &amp;gt;= T2.DateFrom AND T1.dateFrom &amp;lt;= T2.DateTo) \n        OR (T1.DateTo &amp;gt;= T2.DateFrom AND T1.DateTo &amp;lt;= T2.DateTo)\n        OR (T1.DateFrom &amp;lt; T2.DateFrom AND T1.DateTo IS NULL)\n    )\n    AND NOT (T1.DateFrom = T2.DateFrom)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using Java util.Date, here what I did.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    public static boolean checkTimeOverlaps(Date startDate1, Date endDate1, Date startDate2, Date endDate2)\n    {\n        if (startDate1 == null || endDate1 == null || startDate2 == null || endDate2 == null)\n           return false;\n\n        if ((startDate1.getTime() &amp;lt;= endDate2.getTime()) &amp;amp;&amp;amp; (startDate2.getTime() &amp;lt;= endDate1.getTime()))\n           return true;\n\n        return false;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For ruby I also found this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Interval &amp;lt; ActiveRecord::Base\n\n  validates_presence_of :start_date, :end_date\n\n  # Check if a given interval overlaps this interval    \n  def overlaps?(other)\n    (start_date - other.end_date) * (other.start_date - end_date) &amp;gt;= 0\n  end\n\n  # Return a scope for all interval overlapping the given interval, including the given interval itself\n  named_scope :overlapping, lambda { |interval| {\n    :conditions =&amp;gt; [&quot;id &amp;lt;&amp;gt; ? AND (DATEDIFF(start_date, ?) * DATEDIFF(?, end_date)) &amp;gt;= 0&quot;, interval.id, interval.end_date, interval.start_date]\n  }}\n\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Found it here with nice explaination -&amp;gt;\n&lt;a href=&quot;http://makandracards.com/makandra/984-test-if-two-date-ranges-overlap-in-ruby-or-rails&quot; rel=&quot;nofollow&quot;&gt;http://makandracards.com/makandra/984-test-if-two-date-ranges-overlap-in-ruby-or-rails&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The easiest way to do it in my opinion would be to compare if either EndDate1 is before StartDate2 and EndDate2 is before StartDate1.&lt;/p&gt;\n\n&lt;p&gt;That of course if you are considering intervals where StartDate is always before EndDate.&lt;/p&gt;\n    ","\n&lt;p&gt;If you provide a date range as input and want to find out if it overlaps with the existing date range in database, the following conditions can successfully meet your demand&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Assume you provide a &lt;code&gt;@StartDate&lt;/code&gt; and &lt;code&gt;@EndDate&lt;/code&gt; from your form input.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;conditions are :&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;@StartDate&lt;/code&gt; is ahead of &lt;code&gt;existingStartDate&lt;/code&gt; and behind &lt;code&gt;existingEndDate&lt;/code&gt; then we can say &lt;code&gt;@StartDate&lt;/code&gt; is in the middle of a existing date range, thus we can conclude it will overlap&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;@StartDate &amp;gt;=existing.StartDate And @StartDate &amp;lt;= existing.EndDate) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;@StartDate&lt;/code&gt; is behind &lt;code&gt;existingStartDate&lt;/code&gt; but &lt;code&gt;@EndDate&lt;/code&gt; is ahead of &lt;code&gt;existingStartDate&lt;/code&gt; we can say that it will overlap&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; (@StartDate &amp;lt;= existing.StartDate And @EndDate &amp;gt;= existing.StartDate)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;@StartDate&lt;/code&gt; is behind &lt;code&gt;existingStartDate&lt;/code&gt; And &lt;code&gt;@EndDate&lt;/code&gt; is ahead of &lt;code&gt;existingEndDate&lt;/code&gt; we can conclude that the provided date range devours a existing date range , thus overlaps&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; (@StartDate &amp;lt;= existing.StartDate And @EndDate &amp;gt;= existing.EndDate))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If any of the condition stands true, your provided date range overlaps with existing ones in the database.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Split the problem into cases then handle each case&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;The situation &apos;two date ranges intersect&apos; is covered by two cases - the first date range starts within the second, or the second date range starts within the first.&lt;/p&gt;\n    ","\n&lt;p&gt;You can try this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//custom date for example\n$d1 = new DateTime(&quot;2012-07-08&quot;);\n$d2 = new DateTime(&quot;2012-07-11&quot;);\n$d3 = new DateTime(&quot;2012-07-08&quot;);\n$d4 = new DateTime(&quot;2012-07-15&quot;);\n\n//create a date period object\n$interval = new DateInterval(&apos;P1D&apos;);\n$daterange = iterator_to_array(new DatePeriod($d1, $interval, $d2));\n$daterange1 = iterator_to_array(new DatePeriod($d3, $interval, $d4));\narray_map(function($v) use ($daterange1) { if(in_array($v, $daterange1)) print &quot;Bingo!&quot;;}, $daterange);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre&gt;&lt;code&gt;public static class NumberExtensionMethods\n    {\n        public static Boolean IsBetween(this Int64 value, Int64 Min, Int64 Max)\n        {\n            if (value &amp;gt;= Min &amp;amp;&amp;amp; value &amp;lt;= Max) return true;\n            else return false;\n        }\n\n        public static Boolean IsBetween(this DateTime value, DateTime Min, DateTime Max)\n        {\n            Int64 numricValue = value.Ticks;\n            Int64 numericStartDate = Min.Ticks;\n            Int64 numericEndDate = Max.Ticks;\n\n            if (numricValue.IsBetween(numericStartDate, numericEndDate) )\n            {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\npublic static Boolean IsOverlap(DateTime startDate1, DateTime endDate1, DateTime startDate2, DateTime endDate2)\n        {\n            Int64 numericStartDate1 = startDate1.Ticks;\n            Int64 numericEndDate1 = endDate1.Ticks;\n            Int64 numericStartDate2 = startDate2.Ticks;\n            Int64 numericEndDate2 = endDate2.Ticks;\n\n            if (numericStartDate2.IsBetween(numericStartDate1, numericEndDate1) ||\n                numericEndDate2.IsBetween(numericStartDate1, numericEndDate1) ||\n                numericStartDate1.IsBetween(numericStartDate2, numericEndDate2) ||\n                numericEndDate1.IsBetween(numericStartDate2, numericEndDate2))\n            {\n                return true;\n            }\n\n            return false;\n        } \n\n\nif (IsOverlap(startdate1, enddate1, startdate2, enddate2))\n            {\n                Console.WriteLine(&quot;IsOverlap&quot;);\n            }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This was my solution, it returns true when the values don&apos;t overlap:&lt;/p&gt;\n\n&lt;p&gt;X START 1\nY END 1&lt;/p&gt;\n\n&lt;p&gt;A START 2\nB END 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;TEST1: (X &amp;lt;= A || X &amp;gt;= B)\n        &amp;amp;&amp;amp;\nTEST2: (Y &amp;gt;= B || Y &amp;lt;= A) \n        &amp;amp;&amp;amp; \nTEST3: (X &amp;gt;= B || Y &amp;lt;= A)\n\n\nX-------------Y\n    A-----B\n\nTEST1:  TRUE\nTEST2:  TRUE\nTEST3:  FALSE\nRESULT: FALSE\n\n---------------------------------------\n\nX---Y\n      A---B\n\nTEST1:  TRUE\nTEST2:  TRUE\nTEST3:  TRUE\nRESULT: TRUE\n\n---------------------------------------\n\n      X---Y\nA---B\n\nTEST1:  TRUE\nTEST2:  TRUE\nTEST3:  TRUE\nRESULT: TRUE\n\n---------------------------------------\n\n     X----Y\nA---------------B\n\nTEST1:  FALSE\nTEST2:  FALSE\nTEST3:  FALSE\nRESULT: FALSE\n&lt;/code&gt;&lt;/pre&gt;\n    "],"420":["\n&lt;h2&gt;Single Underscore&lt;/h2&gt;\n&lt;p&gt;In a class, names with a leading underscore indicate to other programmers that the attribute or method is intended to be private.  However, privacy is not &lt;em&gt;enforced&lt;/em&gt; in any way.&lt;/p&gt;\n&lt;p&gt;From the &lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot; rel=&quot;noreferrer&quot;&gt;PEP-8&lt;/a&gt; style guide:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;_single_leading_underscore&lt;/code&gt;: weak &quot;internal use&quot; indicator. E.g. &lt;code&gt;from M import *&lt;/code&gt; does not import objects whose name starts with an underscore.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;Double Underscore (Name Mangling)&lt;/h2&gt;\n&lt;p&gt;From &lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#private-variables&quot; rel=&quot;noreferrer&quot;&gt;the Python docs&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Any identifier of the form &lt;code&gt;__spam&lt;/code&gt; (at least two leading underscores, at most one trailing underscore) is textually replaced with &lt;code&gt;_classname__spam&lt;/code&gt;, where &lt;code&gt;classname&lt;/code&gt; is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And a warning from the same page:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Name mangling is intended to give classes an easy way to define private instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; &lt;em&gt;it still is possible for a determined soul to access or modify a variable that is considered private.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;Example&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            self.__superprivate = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            self._semiprivate = &lt;span class=&quot;hljs-string&quot;&gt;&quot;, world!&quot;&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mc = MyClass()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; mc.__superprivate\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nAttributeError: myClass instance has no attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;__superprivate&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; mc._semiprivate\n, world!\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; mc.__dict__\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;_MyClass__superprivate&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_semiprivate&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;, world!&apos;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;_foo&lt;/code&gt;: Only a convention. A way for the programmer to indicate that the variable is private (whatever that means in Python).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;__foo&lt;/code&gt;: This has real meaning. The interpreter replaces this name with &lt;code&gt;_classname__foo&lt;/code&gt; as a way to ensure that the name will not overlap with a similar name in another class.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;__foo__&lt;/code&gt;: Only a convention. A way for the Python system to use names that won&apos;t conflict with user names.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;No other form of underscores have meaning in the Python world. Also, there&apos;s no difference between class, variable, global, etc in these conventions.&lt;/p&gt;\n    ","\n&lt;p&gt;Excellent answers so far but some tidbits are missing. A single leading underscore isn&apos;t exactly &lt;em&gt;just&lt;/em&gt; a convention: if you use &lt;code&gt;from foobar import *&lt;/code&gt;, and module &lt;code&gt;foobar&lt;/code&gt; does not define an &lt;code&gt;__all__&lt;/code&gt; list, the names imported from the module &lt;strong&gt;do not&lt;/strong&gt; include those with a leading underscore. Let&apos;s say it&apos;s &lt;em&gt;mostly&lt;/em&gt; a convention, since this case is a pretty obscure corner;-).&lt;/p&gt;\n\n&lt;p&gt;The leading-underscore convention is widely used not just for &lt;em&gt;private&lt;/em&gt; names, but also for what C++ would call &lt;em&gt;protected&lt;/em&gt; ones -- for example, names of methods that are fully intended to be overridden by subclasses (even ones that &lt;strong&gt;have&lt;/strong&gt; to be overridden since in the base class they &lt;code&gt;raise NotImplementedError&lt;/code&gt;!-) are often single-leading-underscore names to indicate to code &lt;strong&gt;using&lt;/strong&gt; instances of that class (or subclasses) that said methods are not meant to be called directly.&lt;/p&gt;\n\n&lt;p&gt;For example, to make a thread-safe queue with a different queueing discipline than FIFO, one imports Queue, subclasses Queue.Queue, and overrides such methods as &lt;code&gt;_get&lt;/code&gt; and &lt;code&gt;_put&lt;/code&gt;; &quot;client code&quot; never calls those (&quot;hook&quot;) methods, but rather the (&quot;organizing&quot;) public methods such as &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; (this is known as the &lt;a href=&quot;http://en.wikipedia.org/wiki/Template_method_pattern&quot; rel=&quot;noreferrer&quot;&gt;Template Method&lt;/a&gt; design pattern -- see e.g. &lt;a href=&quot;http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; for an interesting presentation based on a video of a talk of mine on the subject, with the addition of synopses of the transcript).&lt;/p&gt;\n\n&lt;p&gt;Edit: The video links in the description of the talks are now broken. You can find the first two videos &lt;a href=&quot;https://www.youtube.com/watch?v=1Sbzmz1Nxvo&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=tJXhtncDBu4&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;._variable&lt;/code&gt; is semiprivate and meant just for convention&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.__variable&lt;/code&gt; is often incorrectly considered superprivate, while it&apos;s actual meaning is just to namemangle to &lt;strong&gt;prevent accidental access&lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HTLu2DFOdTg&amp;amp;t=33m8s&quot; rel=&quot;noreferrer&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.__variable__&lt;/code&gt; is typically reserved for builtin methods or variables&lt;/p&gt;\n\n&lt;p&gt;You can still access &lt;code&gt;.__mangled&lt;/code&gt; variables if you desperately want to. The double underscores just namemangles, or renames, the variable to something like &lt;code&gt;instance._className__mangled&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.__a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n        self._b = &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t = Test()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t._b\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;t._b is accessible because it is only hidden by convention&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t.__a\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nAttributeError: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Test&apos;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; has no attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;__a&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;t.__a isn&apos;t found because it no longer exists due to namemangling&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t._Test__a\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By accessing &lt;code&gt;instance._className__variable&lt;/code&gt; instead of just the double underscore name, you can access the hidden value&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Single underscore at the beginning:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Python doesn&apos;t have real private methods. Instead, one underscore at the start of a method or attribute name means you shouldn&apos;t access this method, because it&apos;s not part of the API.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BaseForm&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;StrAndUnicode&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_errors&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;Returns an ErrorDict for the data provided for the form&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._errors &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            self.full_clean()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self._errors\n\n    errors = &lt;span class=&quot;hljs-built_in&quot;&gt;property&lt;/span&gt;(_get_errors)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(This code snippet was taken from django source code: django/forms/forms.py). In this code, &lt;code&gt;errors&lt;/code&gt; is a public property, but the method this property calls, _get_errors, is &quot;private&quot;, so you shouldn&apos;t access it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Two underscores at the beginning:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This causes a lot of confusion. It should not be used to create a private method. It should be used to avoid your method being overridden by a subclass or accessed accidentally. Let&apos;s see an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m a test method in class A&quot;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.__test()\n\na = A()\na.test()\n&lt;span class=&quot;hljs-comment&quot;&gt;# a.__test() # This fails with an AttributeError&lt;/span&gt;\na._A__test() &lt;span class=&quot;hljs-comment&quot;&gt;# Works! We can access the mangled name directly!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python test.py\nI&lt;span class=&quot;hljs-string&quot;&gt;&apos;m test method in class A\nI&apos;&lt;/span&gt;m test method &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now create a subclass B and do customization for __test method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;A&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m test method in class B&quot;&lt;/span&gt;\n\nb = B()\nb.test()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output will be....&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python test.py\nI&lt;span class=&quot;hljs-string&quot;&gt;&apos;m test method in class A\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As we have seen, A.test() didn&apos;t call B.__test() methods, as we might expect. But in fact, this is the correct behavior for __. The two methods called __test() are automatically renamed (mangled) to _A__test() and _B__test(), so they do not accidentally override.  When you create a method starting with __ it means that you don&apos;t want to anyone to be able to override it, and you only intend to access it from inside its own class.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Two underscores at the beginning and at the end:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When we see a method like &lt;code&gt;__this__&lt;/code&gt;, don&apos;t call it. This is a method which python is meant to call, not you. Let&apos;s take a look:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;test string&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name.__len__()\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(name)\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;number = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;number.__add__(&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;number + &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is always an operator or native function which calls these magic methods. Sometimes it&apos;s just a hook python calls in specific situations. For example &lt;code&gt;__init__()&lt;/code&gt; is called when the object is created after &lt;code&gt;__new__()&lt;/code&gt; is called to build the instance...&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s take an example...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FalseCalculator&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, number&lt;/span&gt;):\n        self.number = number\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__add__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, number&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.number - number\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__sub__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, number&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.number + number\n\nnumber = FalseCalculator(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; number + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;# 10&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; number - &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;# 40&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more details, see the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables&quot; rel=&quot;noreferrer&quot;&gt;PEP-8 guide&lt;/a&gt;. For more magic methods, see &lt;a href=&quot;//github.com/RafeKettler/magicmethods/blob/master/magicmethods.pdf&quot; rel=&quot;noreferrer&quot;&gt;this PDF&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;According to &lt;a href=&quot;https://dbader.org/blog/meaning-of-underscores-in-python&quot; rel=&quot;noreferrer&quot;&gt;Meaning of Underscores in Python&lt;/a&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Single Leading Underscore(&lt;code&gt;_var&lt;/code&gt;)&lt;/strong&gt;: Naming convention indicating a name is meant for internal use. Generally not enforced by the Python interpreter (except in wildcard imports) and meant as a hint to the programmer only.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Single Trailing Underscore(&lt;code&gt;var_&lt;/code&gt;)&lt;/strong&gt;: Used by convention to avoid naming conflicts with Python keywords.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Double Leading Underscore(&lt;code&gt;__var&lt;/code&gt;)&lt;/strong&gt;: Triggers name mangling when used in a class context. Enforced by the Python interpreter.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Double Leading and Trailing Underscore(&lt;code&gt;__var__&lt;/code&gt;)&lt;/strong&gt;: Indicates special methods defined by the Python language. Avoid this naming scheme for your own attributes.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Single Underscore(&lt;code&gt;_&lt;/code&gt;)&lt;/strong&gt;: Sometimes used as a name for temporary or insignificant variables (dont care). Also: The result of the last expression in a Python &lt;a href=&quot;https://pythonprogramminglanguage.com/repl/&quot; rel=&quot;noreferrer&quot;&gt;REPL&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Sometimes you have what appears to be a tuple with a leading underscore as in &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;bar&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_&apos;&lt;/span&gt; + bar)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, what&apos;s going on is that _() is an alias for a localization function that operates on text to put it into the proper language, etc. based on the locale. For example, Sphinx does this, and you&apos;ll find among the imports&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sphinx.locale &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; l_, _\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in sphinx.locale, _() is assigned as an alias of some localization function.&lt;/p&gt;\n    ","\n&lt;p&gt;Since so many people are referring to Raymond&apos;s &lt;a href=&quot;https://www.youtube.com/watch?v=HTLu2DFOdTg&amp;amp;t=33m8s&quot; rel=&quot;noreferrer&quot;&gt;talk&lt;/a&gt;, I&apos;ll just make it a little easier by writing down what he said:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The intention of the double underscores was not about privacy. The intention was to use it exactly like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Circle&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, radius&lt;/span&gt;):\n        self.radius = radius\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;area&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        p = self.__perimeter()\n        r = p / math.pi / &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; math.pi * r ** &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perimeter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt; * math.pi * self.radius\n\n    __perimeter = perimeter  &lt;span class=&quot;hljs-comment&quot;&gt;# local reference&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Tire&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Circle&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perimeter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Circle.perimeter(self) * &lt;span class=&quot;hljs-number&quot;&gt;1.25&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&lt;strong&gt;It&apos;s actually the opposite of privacy, it&apos;s all about freedom. It makes your subclasses free to override any one method without breaking the others&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Say you don&apos;t keep a local reference of &lt;code&gt;perimeter&lt;/code&gt; in &lt;code&gt;Circle&lt;/code&gt;. Now, a derived class &lt;code&gt;Tire&lt;/code&gt; overrides the implementation of &lt;code&gt;perimeter&lt;/code&gt;, without touching &lt;code&gt;area&lt;/code&gt;. When you call &lt;code&gt;Tire(5).area()&lt;/code&gt;, in theory it should still be using &lt;code&gt;Circle.perimeter&lt;/code&gt; for computation, but in reality it&apos;s using &lt;code&gt;Tire.perimeter&lt;/code&gt;, which is not the intended behavior. That&apos;s why we need a local reference in Circle.&lt;/p&gt;\n\n&lt;p&gt;But why &lt;code&gt;__perimeter&lt;/code&gt; instead of &lt;code&gt;_perimeter&lt;/code&gt;? Because &lt;code&gt;_perimeter&lt;/code&gt; still gives derived class the chance to override:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Tire&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Circle&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perimeter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Circle.perimeter(self) * &lt;span class=&quot;hljs-number&quot;&gt;1.25&lt;/span&gt;\n\n    _perimeter = perimeter\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Double underscores has name mangling, so there&apos;s a very little chance that the local reference in parent class get override in derived class. thus &quot;&lt;strong&gt;makes your subclasses free to override any one method without breaking the others&lt;/strong&gt;&quot;.&lt;/p&gt;\n\n&lt;p&gt;If your class won&apos;t be inherited, or method overriding does not break anything, then you simply don&apos;t need &lt;code&gt;__double_leading_underscore&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;_var&lt;/code&gt;: variables with a leading single underscore in python are classic variables, intended to inform others using your code that this variable should be reserved for internal use. They differ on one point from classic variables: they are not imported when doing a wildcard import of an object/module where they are defined (exceptions when defining the &lt;a href=&quot;https://stackoverflow.com/a/64130/3922534&quot;&gt;&lt;code&gt;__all__&lt;/code&gt; variable&lt;/a&gt;). Eg:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# foo.py&lt;/span&gt;\n\nvar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;var&quot;&lt;/span&gt;\n_var = &lt;span class=&quot;hljs-string&quot;&gt;&quot;_var&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# bar.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; foo &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dir&lt;/span&gt;())  &lt;span class=&quot;hljs-comment&quot;&gt;# list of defined objects, contains &apos;var&apos; but not &apos;_var&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(var)    &lt;span class=&quot;hljs-comment&quot;&gt;# var&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(_var)   &lt;span class=&quot;hljs-comment&quot;&gt;# NameError: name &apos;_var&apos; is not defined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;_&lt;/code&gt; : the single underscore is a special case of the leading single underscore variables. It is used by convention as a trash variable, to store a value that is not intended to be later accessed. It is also not imported by wildcard imports. Eg: this &lt;code&gt;for&lt;/code&gt; loop prints &quot;I must not talk in class&quot; 10 times, and never needs to access the &lt;code&gt;_&lt;/code&gt; variable.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I must not talk in class&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;var_&lt;/code&gt;: single trailing underscore variables. They are classic variables used by convention to avoid conflicts with Python keyword. Eg:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;class_ = &lt;span class=&quot;hljs-string&quot;&gt;&quot;MyClassName&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;__var&lt;/code&gt;: double leading underscore variables (at least two leading underscores, at most one trailing underscore). When used as class attributes (variables and methods), these variables are subject to name mangling: outside of the class, python will rename the attribute to &lt;code&gt;_&amp;lt;Class_name&amp;gt;__&amp;lt;attribute_name&amp;gt;&lt;/code&gt;. Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;:\n    __an_attribute = &lt;span class=&quot;hljs-string&quot;&gt;&quot;attribute_value&quot;&lt;/span&gt;\n\nmy_class = MyClass()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_class._MyClass__an_attribute)  &lt;span class=&quot;hljs-comment&quot;&gt;# &quot;attribute_value&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_class.__an_attribute)  &lt;span class=&quot;hljs-comment&quot;&gt;# AttributeError: &apos;MyClass&apos; object has no attribute &apos;__an_attribute&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When used as variables outside a class, they behave like single leading underscore variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;__var__&lt;/code&gt;: double leading and trailing underscore variables (at least two leading and trailing underscores). Also called &lt;em&gt;dunders&lt;/em&gt;. This naming convention is used by python to define variables internally. Avoid using this convention to prevent name conflicts that could arise with python updates. Dunder variables behave like single leading underscore variables: they are not subject to name mangling when used inside classes, but are not imported in wildcard imports.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;If one really wants to make a variable read-only, IMHO the best way would be to use property() with only getter passed to it. With property() we can have complete control over the data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PrivateVarC&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, val&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n    rwvar = &lt;span class=&quot;hljs-built_in&quot;&gt;property&lt;/span&gt;(get_p, set_p)  \n\n    ronly = &lt;span class=&quot;hljs-built_in&quot;&gt;property&lt;/span&gt;(get_p) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I understand that OP asked a little different question but since I found another question asking for &apos;how to set private variables&apos; marked duplicate with this one, I thought of adding this additional info here.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a simple illustrative example on how double underscore properties can affect an inherited class. So with the following setup:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;parent&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __default = &lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n        self.default = name &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; self.__default\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @property&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.__default\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @default.setter&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, value&lt;/span&gt;):\n        self.__default = value\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;parent&lt;/span&gt;):\n    __default = &lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if you then create a child instance in the python REPL, you will see the below&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;child_a = child()\nchild_a.default            &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;parent&apos;&lt;/span&gt;\nchild_a._child__default    &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;child&apos;&lt;/span&gt;\nchild_a._parent__default   &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;parent&apos;&lt;/span&gt;\n\nchild_b = child(&lt;span class=&quot;hljs-string&quot;&gt;&quot;orphan&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;## this will show &lt;/span&gt;\nchild_b.default            &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;orphan&apos;&lt;/span&gt;\nchild_a._child__default    &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;child&apos;&lt;/span&gt;\nchild_a._parent__default   &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;orphan&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This may be obvious to some, but it caught me off guard in a much more complex environment&lt;/p&gt;\n    ","\n&lt;p&gt;Great answers and all are correct.I have provided simple example along with simple definition/meaning. &lt;/p&gt;\n\n&lt;p&gt;Meaning:&lt;/p&gt;\n\n&lt;p&gt;some_variable -- it&apos;s public anyone can see this.&lt;/p&gt;\n\n&lt;p&gt;_some_variable -- it&apos;s public anyone can see this but it&apos;s a convention to indicate private...&lt;strong&gt;warning&lt;/strong&gt; no enforcement is done by Python.&lt;/p&gt;\n\n&lt;p&gt;__some_varaible  -- Python replaces the variable name with _classname__some_varaible (AKA name mangling) and it reduces/hides it&apos;s visibility and be more like private variable.&lt;/p&gt;\n\n&lt;p&gt;Just to be honest here &lt;a href=&quot;https://docs.python.org/3/tutorial/classes.html#tut-private&quot; rel=&quot;noreferrer&quot;&gt;According to Python documentation&lt;/a&gt; &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;Private instance variables that cannot be accessed except from\n  inside an object dont exist in Python&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;():\n    here=&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;\n    _here=&lt;span class=&quot;hljs-string&quot;&gt;&quot;_abc&quot;&lt;/span&gt;\n    __here=&lt;span class=&quot;hljs-string&quot;&gt;&quot;__abc&quot;&lt;/span&gt;\n\n\naObject=A()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(aObject.here) \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(aObject._here)\n&lt;span class=&quot;hljs-comment&quot;&gt;# now if we try to print __here then it will fail because it&apos;s not public variable &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#print(aObject.__here)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Single leading underscores is a convention. there is no difference from the interpreter&apos;s point of view if whether names starts with a single underscore or not. &lt;/p&gt;\n\n&lt;p&gt;Double leading and trailing underscores are used for built-in methods, such as &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;__bool__&lt;/code&gt;, etc.&lt;/p&gt;\n\n&lt;p&gt;Double leading underscores w/o trailing counterparts are a convention too, however, the class methods will be &lt;a href=&quot;http://docs.python.org/tutorial/classes.html#private-variables&quot; rel=&quot;noreferrer&quot;&gt;mangled&lt;/a&gt; by the interpreter. For variables or basic function names no difference exists.&lt;/p&gt;\n    ","\n&lt;p&gt;Your question is good, it is not only about methods. Functions and objects in modules are commonly prefixed with one underscore as well, and can be prefixed by two.&lt;/p&gt;\n\n&lt;p&gt;But __double_underscore names are not name-mangled in modules, for example. What happens is that names beginning with one (or more) underscores are not imported if you import all from a module (from module import *), nor are the names shown in help(module).&lt;/p&gt;\n    ","\n&lt;p&gt;Private instance variables that cannot be accessed except from inside an object dont exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.&lt;/p&gt;\n\n&lt;p&gt;reference\n&lt;a href=&quot;https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references&quot; rel=&quot;nofollow&quot;&gt;https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Getting the facts of _ and __ is pretty easy; the other answers express them pretty well. The usage is much harder to determine. &lt;/p&gt;\n\n&lt;p&gt;This is how I see it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;_\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Should be used to indicate that a function is not for public use as for example an API. This and the import restriction make it behave much like &lt;code&gt;internal&lt;/code&gt; in c#.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;__\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Should be used to avoid name collision in the inheritace hirarchy and to avoid latebinding. Much like private in c#.&lt;/p&gt;\n\n&lt;p&gt;==&amp;gt; &lt;/p&gt;\n\n&lt;p&gt;If you want to indicate that something is not for public use, but it should act like &lt;code&gt;protected&lt;/code&gt; use &lt;code&gt;_&lt;/code&gt;.\nIf you want to indicate that something is not for public use, but it should act like &lt;code&gt;private&lt;/code&gt; use &lt;code&gt;__&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is also a quote that I like very much:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The problem is that the author of a class may legitimately think &quot;this\n  attribute/method name should be private, only accessible from within\n  this class definition&quot; and use the __private convention. But later on,\n  a user of that class may make a subclass that legitimately needs\n  access to that name. So either the superclass has to be modified\n  (which may be difficult or impossible), or the subclass code has to\n  use manually mangled names (which is ugly and fragile at best).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;But the problem with that is in my opinion that if there&apos;s no IDE that warns you when you override methods, finding the error might take you a while if you have accidentially overriden a method from a base-class.&lt;/p&gt;\n    ","\n&lt;p&gt;In the case of methods, you can use the double underscore to hide away private &apos;methods&apos; with the following pattern:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Private methods of MyClass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_MyClass__do_something&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj:&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_MyClass__do_something() called. type(obj) = {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj)))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        __do_something(self)\n\nmc = MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;_MyClass__do_something() called. &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj) = &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.MyClass&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I stumbled across this today when I tried using double underscore for class methods and got the &lt;code&gt;NameError: name &apos;_&amp;lt;class&amp;gt;&amp;lt;method&amp;gt;&apos; is not defined&lt;/code&gt; error.&lt;/p&gt;\n    "]},"page":"39","randomQuestions":[{"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077"},{"title":"Command not found error in Bash variable assignment","slug":"command-not-found-error-in-bash-variable-assignment-1657388326347"},{"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988"},{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"How can I vertically align elements in a div?","slug":"how-can-i-vertically-align-elements-in-a-div-1657385504431"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"How do I access previous promise results in a .then() chain?","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963"},{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API","slug":"no-'access-control-allow-origin'-header-is-present-on-the-requested-resourcewhen-trying-to-get-data-from-a-rest-api-1657387628467"},{"title":"How do I split a delimited string so I can access individual items?","slug":"how-do-i-split-a-delimited-string-so-i-can-access-individual-items-1657388042385"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"The model item passed into the dictionary is of type .. but this dictionary requires a model item of type","slug":"the-model-item-passed-into-the-dictionary-is-of-type-..-but-this-dictionary-requires-a-model-item-of-type-1657388480874"},{"title":"Methods in ES6 objects: using arrow functions","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058"},{"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429"}]},"__N_SSG":true}