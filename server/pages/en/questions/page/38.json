{"pageProps":{"data":{"count":610,"rows":[{"id":425,"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486","postType":"QUESTION","createdAt":"2022-07-09T17:32:24.000Z","updatedAt":"2022-07-09T17:32:24.000Z","tags":[]},{"id":424,"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403","postType":"QUESTION","createdAt":"2022-07-09T17:32:22.000Z","updatedAt":"2022-07-09T17:32:22.000Z","tags":[{"id":2237,"name":"three.js","slug":"three.js","createdAt":"2022-07-09T17:32:22.000Z","updatedAt":"2022-07-09T17:32:22.000Z","Questions_Tags":{"questionId":424,"tagId":2237}}]},{"id":423,"title":"How do you use a variable in a regular expression?","slug":"how-do-you-use-a-variable-in-a-regular-expression-1657387939007","postType":"QUESTION","createdAt":"2022-07-09T17:32:19.000Z","updatedAt":"2022-07-09T17:32:19.000Z","tags":[]},{"id":422,"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411","postType":"QUESTION","createdAt":"2022-07-09T17:32:15.000Z","updatedAt":"2022-07-09T17:32:15.000Z","tags":[]},{"id":421,"title":"Deep cloning objects","slug":"deep-cloning-objects-1657387930865","postType":"QUESTION","createdAt":"2022-07-09T17:32:10.000Z","updatedAt":"2022-07-09T17:32:10.000Z","tags":[]}]},"answers":{"421":["\n&lt;p&gt;Whereas one approach is to implement the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.icloneable.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ICloneable&lt;/code&gt;&lt;/a&gt; interface (described &lt;a href=&quot;https://stackoverflow.com/questions/78536/cloning-objects-in-c/78568#78568&quot;&gt;here&lt;/a&gt;, so I won&apos;t regurgitate), here&apos;s a nice deep clone object copier I found on &lt;a href=&quot;http://www.codeproject.com/Articles/23832/Implementing-Deep-Cloning-via-Serializing-objects&quot; rel=&quot;noreferrer&quot;&gt;The Code Project&lt;/a&gt; a while ago and incorporated it into our code.\nAs mentioned elsewhere, it requires your objects to be serializable.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.IO;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Serialization;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Serialization.Formatters.Binary;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Provides a method for performing a deep copy of an object.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Binary Serialization is used to perform the copy.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ObjectCopier&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Perform a deep copy of the object via serialization.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;The type of object being copied.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&lt;/span&gt;The object instance to copy.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;A deep copy of the object.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T source&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T).IsSerializable)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The type must be serializable.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;nameof&lt;/span&gt;(source));\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t serialize a null object, simply return the default for that object&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ReferenceEquals(source, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Stream stream = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream();\n        IFormatter formatter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n        formatter.Serialize(stream, source);\n        stream.Seek(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SeekOrigin.Begin);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (T)formatter.Deserialize(stream);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The idea is that it serializes your object and then deserializes it into a fresh object. The benefit is that you don&apos;t have to concern yourself about cloning everything when an object gets too complex.&lt;/p&gt;\n&lt;p&gt;In case of you prefer to use the new &lt;a href=&quot;http://en.wikipedia.org/wiki/Extension_method&quot; rel=&quot;noreferrer&quot;&gt;extension methods&lt;/a&gt; of C# 3.0, change the method to have the following signature:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T source&lt;/span&gt;)&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now the method call simply becomes &lt;code&gt;objectBeingCloned.Clone();&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; (January 10 2015) Thought I&apos;d revisit this, to mention I recently started using (Newtonsoft) Json to do this, it &lt;a href=&quot;http://maxondev.com/serialization-performance-comparison-c-net-formats-frameworks-xmldatacontractserializer-xmlserializer-binaryformatter-json-newtonsoft-servicestack-text/&quot; rel=&quot;noreferrer&quot;&gt;should be&lt;/a&gt; lighter, and avoids the overhead of [Serializable] tags. (&lt;strong&gt;NB&lt;/strong&gt; @atconway has pointed out in the comments that private members are not cloned using the JSON method)&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Perform a deep Copy of the object, using Json as a serialization method. &lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; Private members are not cloned using this method.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;The type of object being copied.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&lt;/span&gt;The object instance to copy.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;The copied object.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;CloneJson&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T source&lt;/span&gt;)&lt;/span&gt;\n{            \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t serialize a null object, simply return the default for that object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ReferenceEquals(source, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// initialize inner objects individually&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// for example in default constructor some list property initialized with some values,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// but in &apos;source&apos; these items are cleaned -&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// without ObjectCreationHandling.Replace default constructor values will be added to result&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deserializeSettings = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonSerializerSettings {ObjectCreationHandling = ObjectCreationHandling.Replace};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(JsonConvert.SerializeObject(source), deserializeSettings);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wanted a cloner for very simple objects of mostly primitives and lists.  If your object is out of the box JSON serializable then this method will do the trick.  This requires no modification or implementation of interfaces on the cloned class, just a JSON serializer like JSON.NET.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T source&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serialized = JsonConvert.SerializeObject(source);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(serialized);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, you can use this extension method&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SystemExtension&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T source&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; serialized = JsonConvert.SerializeObject(source);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(serialized);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The reason not to use &lt;a href=&quot;http://referencesource.microsoft.com/mscorlib/system/icloneable.cs.html#fb795e239ce05299&quot; rel=&quot;noreferrer&quot;&gt;ICloneable&lt;/a&gt; is &lt;strong&gt;not&lt;/strong&gt; because it doesn&apos;t have a generic interface.  &lt;a href=&quot;http://blogs.msdn.com/brada/archive/2004/05/03/125427.aspx&quot; rel=&quot;noreferrer&quot;&gt;The reason not to use it is because it&apos;s vague&lt;/a&gt;.  It doesn&apos;t make clear whether you&apos;re getting a shallow or a deep copy; that&apos;s up to the implementer.&lt;/p&gt;\n\n&lt;p&gt;Yes, &lt;code&gt;MemberwiseClone&lt;/code&gt; makes a shallow copy, but the opposite of &lt;code&gt;MemberwiseClone&lt;/code&gt; isn&apos;t &lt;code&gt;Clone&lt;/code&gt;; it would be, perhaps, &lt;code&gt;DeepClone&lt;/code&gt;, which doesn&apos;t exist.  When you use an object through its ICloneable interface, you can&apos;t know which kind of cloning the underlying object performs.  (And XML comments won&apos;t make it clear, because you&apos;ll get the interface comments rather than the ones on the object&apos;s Clone method.)&lt;/p&gt;\n\n&lt;p&gt;What I usually do is simply make a &lt;code&gt;Copy&lt;/code&gt; method that does exactly what I want.&lt;/p&gt;\n    ","\n&lt;p&gt;After much much reading about many of the options linked here, and possible solutions for this issue, I believe &lt;a href=&quot;https://developerscon.blogspot.com/2008/06/c-object-clone-wars.html&quot; rel=&quot;noreferrer&quot;&gt;all the options are summarized pretty well at &lt;em&gt;Ian P&lt;/em&gt;&apos;s link&lt;/a&gt; (all other options are variations of those) and the best solution is provided by &lt;a href=&quot;http://www.agiledeveloper.com/articles/cloning072002.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Pedro77&lt;/em&gt;&apos;s link&lt;/a&gt; on the question comments.&lt;/p&gt;\n\n&lt;p&gt;So I&apos;ll just copy relevant parts of those 2 references here. That way we can have:&lt;/p&gt;\n\n&lt;h2&gt;The best thing to do for cloning objects in C sharp!&lt;/h2&gt;\n\n&lt;p&gt;First and foremost, those are all our options:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Manually with &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.icloneable&quot; rel=&quot;noreferrer&quot;&gt;ICloneable&lt;/a&gt;&lt;/strong&gt;, which is &lt;em&gt;Shallow&lt;/em&gt; and not &lt;em&gt;Type-Safe&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.object.memberwiseclone&quot; rel=&quot;noreferrer&quot;&gt;MemberwiseClone&lt;/a&gt;&lt;/strong&gt;, which uses ICloneable&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/3441/Base-class-for-cloning-an-object-in-C&quot; rel=&quot;noreferrer&quot;&gt;Reflection&lt;/a&gt;&lt;/strong&gt; by using &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.activator.createinstance&quot; rel=&quot;noreferrer&quot;&gt;Activator.CreateInstance&lt;/a&gt; and &lt;a href=&quot;https://github.com/Burtsev-Alexey/net-object-deep-copy/&quot; rel=&quot;noreferrer&quot;&gt;recursive MemberwiseClone&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute&quot; rel=&quot;noreferrer&quot;&gt;Serialization&lt;/a&gt;&lt;/strong&gt;, as pointed by &lt;a href=&quot;https://stackoverflow.com/a/78612/274502&quot;&gt;johnc&apos;s preferred answer&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Intermediate Language&lt;/strong&gt;, which I got no idea &lt;a href=&quot;https://whizzodev.blogspot.com/2008/03/object-cloning-using-il-in-c.html&quot; rel=&quot;noreferrer&quot;&gt;how works&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extension Methods&lt;/strong&gt;, such as this &lt;a href=&quot;https://circlesandcrossesblogarchive.blogspot.com/2008/01/extension-methods-for-copying-or.html&quot; rel=&quot;noreferrer&quot;&gt;custom clone framework by Havard Straden&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/1111658/Fast-Deep-Copy-of-Objects-by-Expression-Trees-Csha&quot; rel=&quot;noreferrer&quot;&gt;Expression Trees&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://www.codeproject.com/Articles/1111658/Fast-Deep-Copy-of-Objects-by-Expression-Trees-Csha&quot; rel=&quot;noreferrer&quot;&gt;article Fast Deep Copy by Expression Trees&lt;/a&gt;   has  also performance comparison of cloning by Serialization, Reflection and Expression Trees.&lt;/p&gt;\n\n&lt;h1&gt;Why I choose &lt;em&gt;ICloneable&lt;/em&gt; (i.e. manually)&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.agiledeveloper.com/articles/cloning072002.htm&quot; rel=&quot;noreferrer&quot;&gt;Mr Venkat Subramaniam (redundant link here) explains in much detail why&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;All his article circles around an example that tries to be applicable for most cases, using 3 objects: &lt;em&gt;Person&lt;/em&gt;, &lt;em&gt;Brain&lt;/em&gt; and &lt;em&gt;City&lt;/em&gt;. We want to clone a person, which will have its own brain but the same city. You can either picture all problems any of the other methods above can bring or read the article.&lt;/p&gt;\n\n&lt;p&gt;This is my slightly modified version of his conclusion:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Copying an object by specifying &lt;code&gt;New&lt;/code&gt; followed by the class name often leads to code that is not extensible. Using clone, the application of prototype pattern, is a better way to achieve this. However, using clone as it is provided in C# (and Java) can be quite problematic as well. It is better to provide a protected (non-public) copy constructor and invoke that from the clone method. This gives us the ability to delegate the task of creating an object to an instance of a class itself, thus providing extensibility and also, safely creating the objects using the protected copy constructor.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Hopefully this implementation can make things clear:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;ICloneable&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; final Brain brain; &lt;span class=&quot;hljs-comment&quot;&gt;// brain is final since I do not want &lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// any transplant on it once created!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; age;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Brain aBrain, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; theAge&lt;/span&gt;)&lt;/span&gt;\n    {\n        brain = aBrain; \n        age = theAge;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Person another&lt;/span&gt;)&lt;/span&gt;\n    {\n        Brain refBrain = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n        {\n            refBrain = (Brain) another.brain.clone();\n            &lt;span class=&quot;hljs-comment&quot;&gt;// You can set the brain in the constructor&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(CloneNotSupportedException e) {}\n        brain = refBrain;\n        age = another.age;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is person with &quot;&lt;/span&gt; + brain;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Not meant to sound rude as it reads!&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title&quot;&gt;clone&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n    }\n    \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now consider having a class derive from Person.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SkilledPerson&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String theSkills;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SkilledPerson&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Brain aBrain, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; theAge, String skills&lt;/span&gt;)&lt;/span&gt;\n    {\n        super(aBrain, theAge);\n        theSkills = skills;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SkilledPerson&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;SkilledPerson another&lt;/span&gt;)&lt;/span&gt;\n    {\n        super(another);\n        theSkills = another.theSkills;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title&quot;&gt;clone&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SkilledPerson(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SkilledPerson: &quot;&lt;/span&gt; + super.toString();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may try running the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;User&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;play&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Person p&lt;/span&gt;)&lt;/span&gt;\n    {\n        Person another = (Person) p.clone();\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(p);\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(another);\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;String[] args&lt;/span&gt;)&lt;/span&gt;\n    {\n        Person sam = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Brain(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        play(sam);\n        SkilledPerson bob = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SkilledPerson(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SmarterBrain(), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Writer&quot;&lt;/span&gt;);\n        play(bob);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output produced will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;This &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; person &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; Brain@&lt;span class=&quot;hljs-number&quot;&gt;1f&lt;/span&gt;cc69\nThis &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; person &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; Brain@&lt;span class=&quot;hljs-number&quot;&gt;253498&lt;/span&gt;\nSkilledPerson: This &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; person &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; SmarterBrain@&lt;span class=&quot;hljs-number&quot;&gt;1f&lt;/span&gt;ef6f\nSkilledPerson: This &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; person &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; SmarterBrain@&lt;span class=&quot;hljs-number&quot;&gt;209f&lt;/span&gt;4e\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Observe that, if we keep a count of the number of objects, the clone as implemented here will keep a correct count of the number of objects.&lt;/p&gt;\n    ","\n&lt;p&gt;I prefer a copy constructor to a clone. The intent is clearer.&lt;/p&gt;\n    ","\n&lt;p&gt;Simple extension method to copy all the public properties. Works for any objects and &lt;strong&gt;does not&lt;/strong&gt; require class to be &lt;code&gt;[Serializable]&lt;/code&gt;. Can be extended for other access level.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CopyTo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; S, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; T &lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pS &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; S.GetType().GetProperties() )\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pT &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; T.GetType().GetProperties() )\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( pT.Name != pS.Name ) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n            ( pT.GetSetMethod() ).Invoke( T, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] \n            { pS.GetGetMethod().Invoke( S, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ) } );\n        }\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve just created &lt;strong&gt;&lt;a href=&quot;https://github.com/MarcinJuraszek/CloneExtensions&quot;&gt;&lt;code&gt;CloneExtensions&lt;/code&gt; library&lt;/a&gt;&lt;/strong&gt; project. It performs fast, deep clone using simple assignment operations generated by Expression Tree runtime code compilation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How to use it?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Instead of writing your own &lt;code&gt;Clone&lt;/code&gt; or &lt;code&gt;Copy&lt;/code&gt; methods with a tone of assignments between fields and properties make the program do it for yourself, using Expression Tree. &lt;code&gt;GetClone&amp;lt;T&amp;gt;()&lt;/code&gt; method marked as extension method allows you to simply call it on your instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newInstance = source.GetClone();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can choose what should be copied from &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;newInstance&lt;/code&gt; using &lt;code&gt;CloningFlags&lt;/code&gt; enum:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newInstance \n    = source.GetClone(CloningFlags.Properties | CloningFlags.CollectionItems);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;What can be cloned?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Primitive (int, uint, byte, double, char, etc.), known immutable\ntypes (DateTime, TimeSpan, String) and delegates (including\nAction, Func, etc)&lt;/li&gt;\n&lt;li&gt;Nullable&lt;/li&gt;\n&lt;li&gt;T[] arrays&lt;/li&gt;\n&lt;li&gt;Custom classes and structs, including generic classes and structs.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Following class/struct members are cloned internally:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Values of public, not readonly fields&lt;/li&gt;\n&lt;li&gt;Values of public properties with both get and set accessors&lt;/li&gt;\n&lt;li&gt;Collection items for types implementing ICollection&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;How fast it is?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The solution is faster then reflection, because members information has to be gathered only once, before &lt;code&gt;GetClone&amp;lt;T&amp;gt;&lt;/code&gt; is used for the first time for given type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also faster than serialization-based solution when you clone more then couple instances of the same type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;and more...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Read more about generated expressions on &lt;a href=&quot;https://github.com/MarcinJuraszek/CloneExtensions/blob/master/EXPRESSION_TREES.md&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Sample expression debug listing for &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;.Lambda &lt;span class=&quot;hljs-meta&quot;&gt;#Lambda1&amp;lt;System.Func`4[System.Collections.Generic.List`1[System.Int32],CloneExtensions.CloningFlags,System.Collections.Generic.IDictionary`2[System.Type,System.Func`2[System.Object,System.Object]],System.Collections.Generic.List`1[System.Int32]]&amp;gt;(&lt;/span&gt;\n    System.Collections.Generic.List`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32] $source,\n    CloneExtensions.CloningFlags $flags,\n    System.Collections.Generic.IDictionary`&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[System.Type,System.Func`&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[System.Object,System.Object]] $initializers) {\n    .Block(System.Collections.Generic.List`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32] $target) {\n        .If ($source == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            .Return &lt;span class=&quot;hljs-meta&quot;&gt;#Label1 { null }&lt;/span&gt;\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            .Call $initializers.ContainsKey(.Constant&amp;lt;System.Type&amp;gt;(System.Collections.Generic.List`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32]))\n        ) {\n            $target = (System.Collections.Generic.List`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32]).Call ($initializers.Item[.Constant&amp;lt;System.Type&amp;gt;(System.Collections.Generic.List`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32])]\n            ).Invoke((System.Object)$source)\n        } .Else {\n            $target = .New System.Collections.Generic.List`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32]()\n        };\n        .If (\n            ((System.Byte)$flags &amp;amp; (System.Byte).Constant&amp;lt;CloneExtensions.CloningFlags&amp;gt;(Fields)) == (System.Byte).Constant&amp;lt;CloneExtensions.CloningFlags&amp;gt;(Fields)\n        ) {\n            .Default(System.Void)\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            ((System.Byte)$flags &amp;amp; (System.Byte).Constant&amp;lt;CloneExtensions.CloningFlags&amp;gt;(Properties)) == (System.Byte).Constant&amp;lt;CloneExtensions.CloningFlags&amp;gt;(Properties)\n        ) {\n            .Block() {\n                $target.Capacity = .Call CloneExtensions.CloneFactory.GetClone(\n                    $source.Capacity,\n                    $flags,\n                    $initializers)\n            }\n        } .Else {\n            .Default(System.Void)\n        };\n        .If (\n            ((System.Byte)$flags &amp;amp; (System.Byte).Constant&amp;lt;CloneExtensions.CloningFlags&amp;gt;(CollectionItems)) == (System.Byte).Constant&amp;lt;CloneExtensions.CloningFlags&amp;gt;(CollectionItems)\n        ) {\n            .Block(\n                System.Collections.Generic.IEnumerator`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32] $var1,\n                System.Collections.Generic.ICollection`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32] $var2) {\n                $var1 = (System.Collections.Generic.IEnumerator`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32]).Call $source.GetEnumerator();\n                $var2 = (System.Collections.Generic.ICollection`&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[System.Int32])$target;\n                .Loop  {\n                    .If (.Call $var1.MoveNext() != False) {\n                        .Call $var2.Add(.Call CloneExtensions.CloneFactory.GetClone(\n                                $var1.Current,\n                                $flags,\n\n\n                         $initializers))\n                } .Else {\n                    .Break &lt;span class=&quot;hljs-meta&quot;&gt;#Label2 { }&lt;/span&gt;\n                }\n            }\n            .LabelTarget &lt;span class=&quot;hljs-meta&quot;&gt;#Label2:&lt;/span&gt;\n        }\n    } .Else {\n        .Default(System.Void)\n    };\n    .Label\n        $target\n    .LabelTarget &lt;span class=&quot;hljs-meta&quot;&gt;#Label1:&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;what has the same meaning like following c# code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;(source, flags, initializers) =&amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(source == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(initializers.ContainsKey(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;))\n        target = (List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;)initializers[&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;)].Invoke((&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)source);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        target = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((flags &amp;amp; CloningFlags.Properties) == CloningFlags.Properties)\n    {\n        target.Capacity = target.Capacity.GetClone(flags, initializers);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((flags &amp;amp; CloningFlags.CollectionItems) == CloningFlags.CollectionItems)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; targetCollection = (ICollection&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;)target;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;hljs-title&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;ICollection&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;&lt;/span&gt;)source)&lt;/span&gt;\n        {\n            targetCollection.Add(item.Clone(flags, initializers));\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Isn&apos;t it quite like how you&apos;d write your own &lt;code&gt;Clone&lt;/code&gt; method for &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;?&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re already using a 3rd party application like &lt;a href=&quot;https://github.com/omuleanu/ValueInjecter&quot; rel=&quot;noreferrer&quot;&gt;ValueInjecter&lt;/a&gt; or &lt;a href=&quot;https://github.com/AutoMapper/AutoMapper&quot; rel=&quot;noreferrer&quot;&gt;Automapper&lt;/a&gt;, you can do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MyObject oldObj; &lt;span class=&quot;hljs-comment&quot;&gt;// The existing object to clone&lt;/span&gt;\n\nMyObject newObj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyObject();\nnewObj.InjectFrom(oldObj); &lt;span class=&quot;hljs-comment&quot;&gt;// Using ValueInjecter syntax&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using this method you don&apos;t have to implement &lt;code&gt;ISerializable&lt;/code&gt; or &lt;code&gt;ICloneable&lt;/code&gt; on your objects. This is common with the MVC/MVVM pattern, so simple tools like this have been created.&lt;/p&gt;\n\n&lt;p&gt;see &lt;a href=&quot;https://github.com/omuleanu/ValueInjecter/blob/dae7956439cac8516979fe254a520a1942c5cdeb/Tests/Cloning.cs&quot; rel=&quot;noreferrer&quot;&gt;the ValueInjecter deep cloning sample on GitHub&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Well I was having problems using ICloneable in Silverlight, but I liked the idea of seralization, I can seralize XML, so I did this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SerializeHelper&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Michael White, Holly Springs Consulting, 2009&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//michael@hollyspringsconsulting.com&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;DeserializeXML&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; xmlData&lt;/span&gt;) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; T:&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(xmlData))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T);\n\n        TextReader tr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringReader(xmlData);\n        T DocItms = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; T();\n        XmlSerializer xms = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XmlSerializer(DocItms.GetType());\n        DocItms = (T)xms.Deserialize(tr);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; DocItms == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T) : DocItms;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SeralizeObjectToXML&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T xmlObject&lt;/span&gt;)&lt;/span&gt;\n    {\n        StringBuilder sbTR = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();\n        XmlSerializer xmsTR = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XmlSerializer(xmlObject.GetType());\n        XmlWriterSettings xwsTR = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XmlWriterSettings();\n        \n        XmlWriter xmwTR = XmlWriter.Create(sbTR, xwsTR);\n        xmsTR.Serialize(xmwTR,xmlObject);\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sbTR.ToString();\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;CloneObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T objClone&lt;/span&gt;) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; T:&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; GetString = SerializeHelper.SeralizeObjectToXML&amp;lt;T&amp;gt;(objClone);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; SerializeHelper.DeserializeXML&amp;lt;T&amp;gt;(GetString);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best is to implement an &lt;strong&gt;extension method&lt;/strong&gt; like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;DeepClone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T originalObject&lt;/span&gt;)&lt;/span&gt;\n{ &lt;span class=&quot;hljs-comment&quot;&gt;/* the cloning code */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then use it anywhere in the solution by&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = anyObject.DeepClone();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can have the following three implementations:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/129395/2094687&quot;&gt;&lt;strong&gt;By Serialization&lt;/strong&gt;&lt;/a&gt; (the shortest code)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/Burtsev-Alexey/net-object-deep-copy/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;By Reflection&lt;/strong&gt;&lt;/a&gt; - &lt;strong&gt;5x faster&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/1111658/Fast-Deep-Copy-by-Expression-Trees-C-Sharp&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;By Expression Trees&lt;/strong&gt;&lt;/a&gt; - &lt;strong&gt;20x faster&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;All linked methods are well working and were deeply tested.&lt;/p&gt;\n    ","\n&lt;p&gt;The short answer is you inherit from the ICloneable interface and then implement the .clone function. Clone should do a memberwise copy and perform a deep copy on any member that requires it, then return the resulting object. This is a recursive operation ( it requires that all members of the class you want to clone are either value types or implement ICloneable and that their members are either value types or implement ICloneable, and so on).&lt;/p&gt;\n\n&lt;p&gt;For a more detailed explanation on Cloning using ICloneable, check out &lt;a href=&quot;https://web.archive.org/web/20120113123300/http://www.ondotnet.com/pub/a/dotnet/2002/11/25/copying.html&quot; rel=&quot;noreferrer&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The &lt;em&gt;long&lt;/em&gt; answer is &quot;it depends&quot;. As mentioned by others, ICloneable is not supported by generics, requires special considerations for circular class references, and is actually viewed by some as a &lt;a href=&quot;http://blogs.msdn.com/brada/archive/2004/05/03/125427.aspx&quot; rel=&quot;noreferrer&quot;&gt;&quot;mistake&quot;&lt;/a&gt; in the .NET Framework. The serialization method depends on your objects being serializable, which they may not be and you may have no control over. There is still much debate in the community over which is the &quot;best&quot; practice. In reality, none of the solutions are the one-size fits all best practice for all situations like ICloneable was originally interpreted to be.&lt;/p&gt;\n\n&lt;p&gt;See the this &lt;a href=&quot;http://developerscon.blogspot.com/2008/06/c-object-clone-wars.html&quot; rel=&quot;noreferrer&quot;&gt;Developer&apos;s Corner article&lt;/a&gt; for a few more options (credit to Ian).&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Basically you need to implement ICloneable interface and then realize object structure copying. &lt;/li&gt;\n&lt;li&gt;If it&apos;s deep copy of all members, you need to insure (not relating on solution you choose) that all children are clonable as well. &lt;/li&gt;\n&lt;li&gt;Sometimes you need to be aware of some restriction during this process, for example if you copying the ORM objects most of frameworks allow only one object attached to the session and you MUST NOT make clones of this object, or if it&apos;s possible you need to care about session attaching of these objects.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Cheers.&lt;/p&gt;\n    ","\n&lt;h2&gt;DeepCloner: Quick, easy, effective NuGet package to solve cloning&lt;/h2&gt;\n\n&lt;p&gt;After reading all answers I was surprised no one mentioned this excellent package: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/force-net/DeepCloner&quot; rel=&quot;noreferrer&quot;&gt;DeepCloner GitHub project&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.nuget.org/packages/DeepCloner&quot; rel=&quot;noreferrer&quot;&gt;DeepCloner NuGet package&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Elaborating a bit on its README, here are the reason why we chose it at work:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;It can deep or shallow copy &lt;/li&gt;\n  &lt;li&gt;In deep cloning all object graph is maintained. &lt;/li&gt;\n  &lt;li&gt;Uses code-generation in runtime, as result cloning is blazingly fast&lt;/li&gt;\n  &lt;li&gt;Objects copied by internal structure, no methods or ctors called&lt;/li&gt;\n  &lt;li&gt;You don&apos;t need to mark classes somehow (like Serializable-attribute, or implement interfaces)&lt;/li&gt;\n  &lt;li&gt;No requirement to specify object type for cloning. Object can be casted to interface or as an abstract object (e.g. you can clone array of ints as abstract Array or IEnumerable; even null can be cloned without any errors)&lt;/li&gt;\n  &lt;li&gt;Cloned object doesn&apos;t have any ability to determine that he is clone (except with very specific methods)&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;h3&gt;Usage:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; deepClone = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; { Id = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;222&quot;&lt;/span&gt; }.DeepClone();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; shallowClone = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; { Id = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;222&quot;&lt;/span&gt; }.ShallowClone();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Performance:&lt;/h3&gt;\n\n&lt;p&gt;The README contains a performance comparison of various cloning libraries and methods: &lt;a href=&quot;https://github.com/force-net/DeepCloner#performance&quot; rel=&quot;noreferrer&quot;&gt;DeepCloner Performance&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Requirements:&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;.NET 4.0 or higher or .NET Standard 1.3 (.NET Core)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Requires Full Trust permission set or Reflection permission (MemberAccess)&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;EDIT: project is discontinued&lt;/p&gt;\n\n&lt;p&gt;If you want true cloning to unknown types you can take a look at\n&lt;a href=&quot;http://fastclone.codeplex.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;fastclone&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s expression based cloning working about 10 times faster than binary serialization and maintaining complete object graph integrity.&lt;/p&gt;\n\n&lt;p&gt;That means: if you refer multiple times to the same object in your hierachy, the clone will also have a single instance beeing referenced.&lt;/p&gt;\n\n&lt;p&gt;There is no need for interfaces, attributes or any other modification to the objects being cloned.&lt;/p&gt;\n    ","\n&lt;p&gt;Keep things simple and use &lt;a href=&quot;http://automapper.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;AutoMapper&lt;/a&gt; as others mentioned, it&apos;s a simple little library to map one object to another... To copy an object to another with the same type, all you need is three lines of code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MyType source = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyType();\nMapper.CreateMap&amp;lt;MyType, MyType&amp;gt;();\nMyType target = Mapper.Map&amp;lt;MyType, MyType&amp;gt;(source);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The target object is now a copy of the source object.\nNot simple enough? Create an extension method to use everywhere in your solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Copy&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T source&lt;/span&gt;)&lt;/span&gt;\n{\n    T copy = &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T);\n    Mapper.CreateMap&amp;lt;T, T&amp;gt;();\n    copy = Mapper.Map&amp;lt;T, T&amp;gt;(source);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The extension method can be used as follow:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MyType copy = source.Copy();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In general, you implement the ICloneable interface and implement Clone yourself.\nC# objects have a built-in MemberwiseClone method that performs a shallow copy that can help you out for all the primitives.&lt;/p&gt;\n\n&lt;p&gt;For a deep copy, there is no way it can know how to automatically do it.&lt;/p&gt;\n    ","\n&lt;p&gt;I came up with this to overcome a &lt;a href=&quot;http://en.wikipedia.org/wiki/.NET_Framework&quot; rel=&quot;noreferrer&quot;&gt;.NET&lt;/a&gt; shortcoming having to manually deep copy List&amp;lt;T&amp;gt;.&lt;/p&gt;\n\n&lt;p&gt;I use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;SpotPlacement&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;CloneList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;SpotPlacement&amp;gt; spotPlacements&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (SpotPlacement sp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; spotPlacements)\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;SpotPlacement&lt;/span&gt;)sp.&lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;()&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And at another place:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;()&lt;/span&gt;\n{\n    OrderItem newOrderItem = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OrderItem();\n    ...\n    newOrderItem._exactPlacements.AddRange(SpotPlacement.CloneList(_exactPlacements));\n    ...\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newOrderItem;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I tried to come up with oneliner that does this, but it&apos;s not possible, due to yield not working inside anonymous method blocks.&lt;/p&gt;\n\n&lt;p&gt;Better still, use generic List&amp;lt;T&amp;gt; cloner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Utility&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;ICloneable&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;CloneList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;T&amp;gt; tl&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (T t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; tl)\n        {\n            &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;)t.&lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;()&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Q. Why would I choose this answer?&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;Choose this answer if you want the fastest speed .NET is capable of.&lt;/li&gt;\n&lt;li&gt;Ignore this answer if you want a really, really easy method of cloning.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In other words, &lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot; rel=&quot;noreferrer&quot;&gt;go with another answer unless you have a performance bottleneck that needs fixing, and you can prove it with a profiler&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;10x faster than other methods&lt;/h3&gt;\n&lt;p&gt;The following method of performing a deep clone is:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;10x faster than anything that involves serialization/deserialization;&lt;/li&gt;\n&lt;li&gt;Pretty darn close to the theoretical maximum speed .NET is capable of.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;And the method ...&lt;/h3&gt;\n&lt;p&gt;For ultimate speed, you can use &lt;strong&gt;Nested MemberwiseClone to do a deep copy&lt;/strong&gt;. Its almost the same speed as copying a value struct, and is much faster than (a) reflection or (b) serialization (as described in other answers on this page).&lt;/p&gt;\n&lt;p&gt;Note that &lt;strong&gt;if&lt;/strong&gt; you use &lt;strong&gt;Nested MemberwiseClone for a deep copy&lt;/strong&gt;, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code below.&lt;/p&gt;\n&lt;p&gt;Here is the output of the code showing the relative performance difference for 100,000 clones:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;1.08 seconds for Nested MemberwiseClone on nested structs&lt;/li&gt;\n&lt;li&gt;4.77 seconds for Nested MemberwiseClone on nested classes&lt;/li&gt;\n&lt;li&gt;39.93 seconds for Serialization/Deserialization&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Using Nested MemberwiseClone on a class almost as fast as copying a struct, and copying a struct is pretty darn close to the theoretical maximum speed .NET is capable of.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Demo &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; of shallow &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; deep copy, &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; classes &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; MemberwiseClone:\n  Create Bob\n    Bob.Age=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, Bob.Purchase.Description=Lamborghini\n  Clone Bob &amp;gt;&amp;gt; BobsSon\n  Adjust BobsSon details\n    BobsSon.Age=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, BobsSon.Purchase.Description=Toy car\n  Proof of deep copy: If BobsSon &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; clone, then adjusting BobsSon details will &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; affect Bob:\n    Bob.Age=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, Bob.Purchase.Description=Lamborghini\n  Elapsed time: &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;04.7795670&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30000000&lt;/span&gt;\n\nDemo &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; of shallow &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; deep copy, &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; structs &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; copying:\n  Create Bob\n    Bob.Age=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, Bob.Purchase.Description=Lamborghini\n  Clone Bob &amp;gt;&amp;gt; BobsSon\n  Adjust BobsSon details:\n    BobsSon.Age=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, BobsSon.Purchase.Description=Toy car\n  Proof of deep copy: If BobsSon &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; clone, then adjusting BobsSon details will &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; affect Bob:\n    Bob.Age=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, Bob.Purchase.Description=Lamborghini\n  Elapsed time: &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;01.0875454&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30000000&lt;/span&gt;\n\nDemo &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; of deep copy, &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;serialize&lt;/span&gt;/&lt;span class=&quot;hljs-title&quot;&gt;deserialize&lt;/span&gt;:\n  &lt;span class=&quot;hljs-title&quot;&gt;Elapsed&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;time&lt;/span&gt;: 00:00:39.9339425,30000000\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To understand how to do a deep copy using MemberwiseCopy, here is the demo project that was used to generate the times above:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Nested MemberwiseClone example. &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Added to demo how to deep copy a reference class.&lt;/span&gt;\n[&lt;span class=&quot;hljs-meta&quot;&gt;Serializable&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// Not required if using MemberwiseClone, only used for speed comparison using serialization.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; age, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; description&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Age = age;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Purchase.Description = description;\n    }\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Serializable&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// Not required if using MemberwiseClone&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PurchaseType&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Description;\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PurchaseType &lt;span class=&quot;hljs-title&quot;&gt;ShallowCopy&lt;/span&gt;()&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (PurchaseType)&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.MemberwiseClone();\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PurchaseType Purchase = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PurchaseType();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Age;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Add this if using nested MemberwiseClone.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This is a class, which is a reference type, so cloning is more difficult.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;hljs-title&quot;&gt;ShallowCopy&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (Person)&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.MemberwiseClone();\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Add this if using nested MemberwiseClone.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This is a class, which is a reference type, so cloning is more difficult.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;hljs-title&quot;&gt;DeepCopy&lt;/span&gt;()&lt;/span&gt;\n    {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Clone the root ...&lt;/span&gt;\n        Person other = (Person) &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.MemberwiseClone();\n            &lt;span class=&quot;hljs-comment&quot;&gt;// ... then clone the nested class.&lt;/span&gt;\n        other.Purchase = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Purchase.ShallowCopy();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; other;\n    }\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Added to demo how to copy a value struct (this is easy - a deep copy happens by default)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; PersonStruct\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PersonStruct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; age, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; description&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Age = age;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Purchase.Description = description;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; PurchaseType\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Description;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PurchaseType Purchase;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Age;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This is a struct, which is a value type, so everything is a clone by default.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PersonStruct &lt;span class=&quot;hljs-title&quot;&gt;ShallowCopy&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (PersonStruct)&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This is a struct, which is a value type, so everything is a clone by default.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PersonStruct &lt;span class=&quot;hljs-title&quot;&gt;DeepCopy&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (PersonStruct)&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Added only for a speed comparison.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyDeepCopy&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;DeepCopy&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T obj&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; result = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ms = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream())\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formatter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n            formatter.Serialize(ms, obj);\n            ms.Position = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            result = (T)formatter.Deserialize(ms);\n            ms.Close();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (T)result;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, call the demo from main:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyMain&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n{\n    {\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Demo 1 of shallow and deep copy, using classes and MemberwiseCopy:\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Bob = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lamborghini&quot;&lt;/span&gt;);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Create Bob\\n&quot;&lt;/span&gt;);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;    Bob.Age={0}, Bob.Purchase.Description={1}\\n&quot;&lt;/span&gt;, Bob.Age, Bob.Purchase.Description);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Clone Bob &amp;gt;&amp;gt; BobsSon\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; BobsSon = Bob.DeepCopy();\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Adjust BobsSon details\\n&quot;&lt;/span&gt;);\n        BobsSon.Age = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        BobsSon.Purchase.Description = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toy car&quot;&lt;/span&gt;;\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n&quot;&lt;/span&gt;, BobsSon.Age, BobsSon.Purchase.Description);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n&quot;&lt;/span&gt;);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;    Bob.Age={0}, Bob.Purchase.Description={1}\\n&quot;&lt;/span&gt;, Bob.Age, Bob.Purchase.Description);\n        Debug.Assert(Bob.Age == &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;);\n        Debug.Assert(Bob.Purchase.Description == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lamborghini&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Stopwatch();\n        sw.Start();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = Bob.DeepCopy();\n            total += n.Age;\n        }\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Elapsed time: {0},{1}\\n\\n&quot;&lt;/span&gt;, sw.Elapsed, total);\n    }\n    {               \n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Demo 2 of shallow and deep copy, using structs:\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Bob = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PersonStruct(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lamborghini&quot;&lt;/span&gt;);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Create Bob\\n&quot;&lt;/span&gt;);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;    Bob.Age={0}, Bob.Purchase.Description={1}\\n&quot;&lt;/span&gt;, Bob.Age, Bob.Purchase.Description);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Clone Bob &amp;gt;&amp;gt; BobsSon\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; BobsSon = Bob.DeepCopy();\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Adjust BobsSon details:\\n&quot;&lt;/span&gt;);\n        BobsSon.Age = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        BobsSon.Purchase.Description = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toy car&quot;&lt;/span&gt;;\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;    BobsSon.Age={0}, BobsSon.Purchase.Description={1}\\n&quot;&lt;/span&gt;, BobsSon.Age, BobsSon.Purchase.Description);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Proof of deep copy: If BobsSon is a true clone, then adjusting BobsSon details will not affect Bob:\\n&quot;&lt;/span&gt;);\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;    Bob.Age={0}, Bob.Purchase.Description={1}\\n&quot;&lt;/span&gt;, Bob.Age, Bob.Purchase.Description);                \n        Debug.Assert(Bob.Age == &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;);\n        Debug.Assert(Bob.Purchase.Description == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lamborghini&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Stopwatch();\n        sw.Start();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = Bob.DeepCopy();\n            total += n.Age;\n        }\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Elapsed time: {0},{1}\\n\\n&quot;&lt;/span&gt;, sw.Elapsed, total);\n    }\n    {\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Demo 3 of deep copy, using class and serialize/deserialize:\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sw = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Stopwatch();\n        sw.Start();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; Bob = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Lamborghini&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; BobsSon = MyDeepCopy.DeepCopy&amp;lt;Person&amp;gt;(Bob);\n            total += BobsSon.Age;\n        }\n        Console.Write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;  Elapsed time: {0},{1}\\n&quot;&lt;/span&gt;, sw.Elapsed, total);\n    }\n    Console.ReadKey();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, note that &lt;strong&gt;if&lt;/strong&gt; you use &lt;strong&gt;Nested MemberwiseClone for a deep copy&lt;/strong&gt;, you have to manually implement a ShallowCopy for each nested level in the class, and a DeepCopy which calls all said ShallowCopy methods to create a complete clone. This is simple: only a few lines in total, see the demo code above.&lt;/p&gt;\n&lt;h3&gt;Value types vs. References Types&lt;/h3&gt;\n&lt;p&gt;Note that when it comes to cloning an object, there is is a big difference between a &quot;&lt;strong&gt;struct&lt;/strong&gt;&quot; and a &quot;&lt;strong&gt;class&lt;/strong&gt;&quot;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you have a &quot;&lt;strong&gt;struct&lt;/strong&gt;&quot;, it&apos;s a &lt;strong&gt;value type&lt;/strong&gt; so you can just copy it, and the contents will be cloned (but it will only make a shallow clone unless you use the techniques in this post).&lt;/li&gt;\n&lt;li&gt;If you have a &quot;&lt;strong&gt;class&lt;/strong&gt;&quot;, it&apos;s a &lt;strong&gt;reference type&lt;/strong&gt;, so if you copy it, all you are doing is copying the pointer to it. To create a true clone, you have to be more creative, and use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.object.memberwiseclone(v=vs.110).aspx&quot; rel=&quot;noreferrer&quot;&gt;differences between value types and references types&lt;/a&gt; which creates another copy of the original object in memory.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;See &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.object.memberwiseclone(v=vs.110).aspx&quot; rel=&quot;noreferrer&quot;&gt;differences between value types and references types&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;Checksums to aid in debugging&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;Cloning objects incorrectly can lead to very difficult-to-pin-down bugs. In production code, I tend to implement a checksum to double check that the object has been cloned properly, and hasn&apos;t been corrupted by another reference to it. This checksum can be switched off in Release mode.&lt;/li&gt;\n&lt;li&gt;I find this method quite useful: often, you only want to clone parts of the object, not the entire thing.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Really useful for decoupling many threads from many other threads&lt;/h3&gt;\n&lt;p&gt;One excellent use case for this code is feeding clones of a nested class or struct into a queue, to implement the producer / consumer pattern.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;We can have one  (or more) threads modifying a class that they own, then pushing a complete copy of this class into a &lt;code&gt;ConcurrentQueue&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;We then have one (or more) threads pulling copies of these classes out and dealing with them.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;This works extremely well in practice, and allows us to decouple many threads (the producers) from one or more threads (the consumers).&lt;/p&gt;\n&lt;p&gt;And this method is blindingly fast too: if we use nested structs, it&apos;s 35x faster than serializing/deserializing nested classes, and allows us to take advantage of all of the threads available on the machine.&lt;/p&gt;\n&lt;h1&gt;Update&lt;/h1&gt;\n&lt;p&gt;Apparently, ExpressMapper is as fast, if not faster, than hand coding such as above. I might have to see how they compare with a profiler.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Disclaimer: I&apos;m the author of the mentioned package.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;I was surprised how the top answers to this question in 2019 still use serialization or reflection. &lt;/p&gt;\n\n&lt;h2&gt;Serialization is limiting (requires attributes, specific constructors, etc.) and is very slow&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;BinaryFormatter&lt;/code&gt; requires the &lt;code&gt;Serializable&lt;/code&gt; attribute, &lt;code&gt;JsonConverter&lt;/code&gt; requires a parameterless constructor or attributes, neither handle read only fields or interfaces very well and both are 10-30x slower than necessary.&lt;/p&gt;\n\n&lt;h2&gt;Expression Trees&lt;/h2&gt;\n\n&lt;p&gt;You can instead use &lt;em&gt;Expression Trees&lt;/em&gt; or &lt;em&gt;Reflection.Emit&lt;/em&gt; to generate cloning code only once, then use that compiled code instead of slow reflection or serialization.&lt;/p&gt;\n\n&lt;p&gt;Having come across the problem myself and seeing no satisfactory solution, I decided to create a package that does just that and &lt;strong&gt;works with every type and is a almost as fast as custom written code&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can find the project on GitHub: &lt;a href=&quot;https://github.com/marcelltoth/ObjectCloner&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/marcelltoth/ObjectCloner&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Usage&lt;/h2&gt;\n\n&lt;p&gt;You can install it from NuGet. Either get the &lt;code&gt;ObjectCloner&lt;/code&gt; package and use it as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = ObjectCloner.DeepClone(original);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you don&apos;t mind polluting your object type with extensions get &lt;code&gt;ObjectCloner.Extensions&lt;/code&gt; as well and write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clone = original.DeepClone();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Performance&lt;/h2&gt;\n\n&lt;p&gt;A simple benchmark of cloning a class hierarchy showed performance ~3x faster than using Reflection, ~12x faster than Newtonsoft.Json serialization and ~36x faster than the highly suggested &lt;code&gt;BinaryFormatter&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve seen it implemented through reflection as well. Basically there was a method that would iterate through the members of an object and appropriately copy them to the new object. When it reached reference types or collections I think it did a recursive call on itself. Reflection is expensive, but it worked pretty well.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a deep copy implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CloneObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; opSource&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//grab the type and create a new instance of that type&lt;/span&gt;\n    Type opSourceType = opSource.GetType();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; opTarget = CreateInstanceOfType(opSourceType);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//grab the properties&lt;/span&gt;\n    PropertyInfo[] opPropertyInfo = opSourceType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//iterate over the properties and if it has a &apos;set&apos; method assign it from the source TO the target&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (PropertyInfo item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; opPropertyInfo)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (item.CanWrite)\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//value types can simply be &apos;set&apos;&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (item.PropertyType.IsValueType || item.PropertyType.IsEnum || item.PropertyType.Equals(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(System.String)))\n            {\n                item.SetValue(opTarget, item.GetValue(opSource, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n            }\n            &lt;span class=&quot;hljs-comment&quot;&gt;//object/complex types need to recursively call this method until the end of the tree is reached&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; opPropertyValue = item.GetValue(opSource, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (opPropertyValue == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                {\n                    item.SetValue(opTarget, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    item.SetValue(opTarget, CloneObject(opPropertyValue), &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n                }\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//return the new item&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; opTarget;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As I couldn&apos;t find a cloner that meets all my requirements in different projects, I created a deep cloner that can be configured and adapted to different code structures instead of adapting my code to meet the cloners requirements. Its achieved by adding annotations to the code that shall be cloned or you just leave the code as it is to have the default behaviour. It uses reflection, type caches and is based on &lt;a href=&quot;https://fasterflect.codeplex.com/&quot; rel=&quot;noreferrer&quot;&gt;fasterflect&lt;/a&gt;. The cloning process is very fast for a huge amount of data and a high object hierarchy (compared to other reflection/serialization based algorithms). &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/kalisohn/CloneBehave&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/kalisohn/CloneBehave&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also available as a nuget package:\n&lt;a href=&quot;https://www.nuget.org/packages/Clone.Behave/1.0.0&quot; rel=&quot;noreferrer&quot;&gt;https://www.nuget.org/packages/Clone.Behave/1.0.0&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For example: The following code will deepClone Address, but only perform a shallow copy of the _currentJob field. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Person&lt;/span&gt; \n{\n  [&lt;span class=&quot;hljs-meta&quot;&gt;DeepClone(DeepCloneBehavior.Shallow)&lt;/span&gt;]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Job _currentJob;      \n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Name { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Job CurrentJob \n  { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _currentJob; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;{ _currentJob = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;; }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Person Manager { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Address&lt;/span&gt; \n{      \n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Person PersonLivingHere { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\nAddress adr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Address();\nadr.PersonLivingHere = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);\nadr.PersonLivingHere.BestFriend = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;James&quot;&lt;/span&gt;);\nadr.PersonLivingHere.CurrentJob = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Job(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Programmer&quot;&lt;/span&gt;);\n\nAddress adrClone = adr.Clone();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//RESULT&lt;/span&gt;\nadr.PersonLivingHere == adrClone.PersonLivingHere &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\nadr.PersonLivingHere.Manager == adrClone.PersonLivingHere.Manager &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\nadr.PersonLivingHere.CurrentJob == adrClone.PersonLivingHere.CurrentJob &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\nadr.PersonLivingHere.CurrentJob.AnyProperty == adrClone.PersonLivingHere.CurrentJob.AnyProperty &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Create an extension:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T theObject&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; jsonData = JsonConvert.SerializeObject(theObject);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(jsonData);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And call it like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;NewObject = OldObject.Clone();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Code Generator&lt;/h1&gt;\n\n&lt;p&gt;We have seen a lot of ideas from serialization over manual implementation to reflection and I want to propose a totally different approach using the &lt;a href=&quot;https://github.com/Toxantron/CGbR#cloneable&quot; rel=&quot;noreferrer&quot;&gt;CGbR Code Generator&lt;/a&gt;. The generate clone method is memory and CPU efficient and therefor 300x faster as the standard DataContractSerializer.&lt;/p&gt;\n\n&lt;p&gt;All you need is a partial class definition with &lt;code&gt;ICloneable&lt;/code&gt; and the generator does the rest:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Root&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;ICloneable&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Root&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number&lt;/span&gt;)&lt;/span&gt;\n    {\n        _number = number;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; _number;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Partial[] Partials { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IList&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;ulong&lt;/span&gt;&amp;gt; Numbers { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Clone(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Root&lt;/span&gt;()&lt;/span&gt;\n    {\n    }\n} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Root&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Root &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; deep&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Root();\n        &lt;span class=&quot;hljs-comment&quot;&gt;// All value types can be simply copied&lt;/span&gt;\n        copy._number = _number; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (deep)\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// In a deep clone the references are cloned &lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tempPartials = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Partial[Partials.Length];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Partials.Length; i++)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = Partials[i];\n                &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Clone(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n                tempPartials[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;\n            }\n            copy.Partials = tempPartials;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tempNumbers = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;ulong&lt;/span&gt;&amp;gt;(Numbers.Count);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Numbers.Count; i++)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = Numbers[i];\n                tempNumbers.Add(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n            }\n            copy.Numbers = tempNumbers;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// In a shallow clone only references are copied&lt;/span&gt;\n            copy.Partials = Partials; \n            copy.Numbers = Numbers; \n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Latest version has a more null checks, but I left them out for better understanding.&lt;/p&gt;\n    ","\n&lt;p&gt;I like Copyconstructors like that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AnyObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;AnyObject anyObject&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;AnyObject&lt;/span&gt;).&lt;span class=&quot;hljs-title&quot;&gt;GetProperties&lt;/span&gt;())&lt;/span&gt;\n        {\n            property.SetValue(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, property.GetValue(anyObject));\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; field &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;AnyObject&lt;/span&gt;).&lt;span class=&quot;hljs-title&quot;&gt;GetFields&lt;/span&gt;())&lt;/span&gt;\n        {\n            field.SetValue(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, field.GetValue(anyObject));\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have more things to copy add them&lt;/p&gt;\n    ","\n&lt;p&gt;This method solved the problem for me:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; MyObj &lt;span class=&quot;hljs-title&quot;&gt;DeepCopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;MyObj source&lt;/span&gt;)&lt;/span&gt;\n        {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; DeserializeSettings = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JsonSerializerSettings { ObjectCreationHandling = ObjectCreationHandling.Replace };\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; JsonConvert.DeserializeObject&amp;lt;MyObj &amp;gt;(JsonConvert.SerializeObject(source), DeserializeSettings);\n\n        }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use it like this: &lt;code&gt;MyObj a = DeepCopy(b);&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here a solution fast and easy that worked for me without relaying on Serialization/Deserialization. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyClass&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; MyClass &lt;span class=&quot;hljs-title&quot;&gt;DeepClone&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; returnObj = (MyClass)MemberwiseClone();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; type = returnObj.GetType();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fieldInfoArray = type.GetRuntimeFields().ToArray();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fieldInfo &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fieldInfoArray)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; sourceFieldValue = fieldInfo.GetValue(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(sourceFieldValue &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; MyClass))\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sourceObj = (MyClass)sourceFieldValue;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; clonedObj = sourceObj.DeepClone();\n            fieldInfo.SetValue(returnObj, clonedObj);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnObj;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;:\nrequires &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Linq;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Reflection;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s How I used it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MyClass &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;MyClass theObjectIneededToClone&lt;/span&gt;)&lt;/span&gt;\n{\n    MyClass clonedObj = theObjectIneededToClone.DeepClone();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Follow these steps:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Define an &lt;code&gt;ISelf&amp;lt;T&amp;gt;&lt;/code&gt; with a read-only &lt;code&gt;Self&lt;/code&gt; property that returns &lt;code&gt;T&lt;/code&gt;, and &lt;code&gt;ICloneable&amp;lt;out T&amp;gt;&lt;/code&gt;, which derives from &lt;code&gt;ISelf&amp;lt;T&amp;gt;&lt;/code&gt; and includes a method &lt;code&gt;T Clone()&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Then define a &lt;code&gt;CloneBase&lt;/code&gt; type which implements a &lt;code&gt;protected virtual generic VirtualClone&lt;/code&gt; casting &lt;code&gt;MemberwiseClone&lt;/code&gt; to the passed-in type.  &lt;/li&gt;\n&lt;li&gt;Each derived type should implement &lt;code&gt;VirtualClone&lt;/code&gt; by calling the base clone method and then doing whatever needs to be done to properly clone those aspects of the derived type which the parent VirtualClone method hasn&apos;t yet handled.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For maximum inheritance versatility, classes exposing public cloning functionality should be &lt;code&gt;sealed&lt;/code&gt;, but derive from a base class which is otherwise identical except for the lack of cloning.  Rather than passing variables of the explicit clonable type, take a parameter of type &lt;code&gt;ICloneable&amp;lt;theNonCloneableType&amp;gt;&lt;/code&gt;.  This will allow a routine that expects a cloneable derivative of  &lt;code&gt;Foo&lt;/code&gt; to work with a cloneable derivative of &lt;code&gt;DerivedFoo&lt;/code&gt;, but also allow the creation of non-cloneable derivatives of &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As nearly all of the answers to this question have been unsatisfactory or plainly don&apos;t work in my situation, I have authored &lt;a href=&quot;https://github.com/replaysMike/AnyClone&quot; rel=&quot;noreferrer&quot;&gt;AnyClone&lt;/a&gt; which is entirely implemented with reflection and solved all of the needs here. I was unable to get serialization to work in a complicated scenario with complex structure, and &lt;code&gt;IClonable&lt;/code&gt; is less than ideal - in fact it shouldn&apos;t even be necessary.&lt;/p&gt;\n\n&lt;p&gt;Standard ignore attributes are supported using &lt;code&gt;[IgnoreDataMember]&lt;/code&gt;, &lt;code&gt;[NonSerialized]&lt;/code&gt;. Supports complex collections, properties without setters, readonly fields etc.&lt;/p&gt;\n\n&lt;p&gt;I hope it helps someone else out there who ran into the same problems I did.&lt;/p&gt;\n    ","\n&lt;p&gt;I have created a version of the accepted answer that works with both &apos;[Serializable]&apos; and &apos;[DataContract]&apos;. It has been a while since I wrote it, but if I remember correctly [DataContract] needed a different serializer.&lt;/p&gt;\n\n&lt;p&gt;Requires &lt;em&gt;System, System.IO, System.Runtime.Serialization, System.Runtime.Serialization.Formatters.Binary, System.Xml&lt;/em&gt;;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ObjectCopier&lt;/span&gt;\n{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Perform a deep Copy of an object that is marked with &apos;[Serializable]&apos; or &apos;[DataContract]&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;The type of object being copied.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&lt;/span&gt;The object instance to copy.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;The copied object.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;Clone&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T source&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T).IsSerializable == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CloneUsingSerializable&amp;lt;T&amp;gt;(source);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (IsDataContract(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T)) == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CloneUsingDataContracts&amp;lt;T&amp;gt;(source);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The type must be Serializable or use DataContracts.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;source&quot;&lt;/span&gt;);\n    }\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Perform a deep Copy of an object that is marked with &apos;[Serializable]&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Found on http://stackoverflow.com/questions/78536/cloning-objects-in-c-sharp&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Uses code found on CodeProject, which allows free use in third party apps&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; - http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;The type of object being copied.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&lt;/span&gt;The object instance to copy.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;The copied object.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;CloneUsingSerializable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T source&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T).IsSerializable)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The type must be serializable.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;source&quot;&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t serialize a null object, simply return the default for that object&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Object.ReferenceEquals(source, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T);\n        }\n\n        IFormatter formatter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BinaryFormatter();\n        Stream stream = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SeekOrigin.Begin);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (T)formatter.Deserialize(stream);\n        }\n    }\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Perform a deep Copy of an object that is marked with &apos;[DataContract]&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;The type of object being copied.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&lt;/span&gt;The object instance to copy.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;The copied object.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; T &lt;span class=&quot;hljs-title&quot;&gt;CloneUsingDataContracts&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T source&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (IsDataContract(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T)) == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The type must be a data contract.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;source&quot;&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ** Don&apos;t serialize a null object, simply return the default for that object&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Object.ReferenceEquals(source, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T);\n        }\n\n        DataContractSerializer dcs = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DataContractSerializer(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt;(Stream stream = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MemoryStream())\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (XmlDictionaryWriter writer = XmlDictionaryWriter.CreateBinaryWriter(stream))\n            {\n                dcs.WriteObject(writer, source);\n                writer.Flush();\n                stream.Seek(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, SeekOrigin.Begin);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (XmlDictionaryReader reader = XmlDictionaryReader.CreateBinaryReader(stream, XmlDictionaryReaderQuotas.Max))\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (T)dcs.ReadObject(reader);\n                }\n            }\n        }\n    }\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Helper function to check if a class is a [DataContract]&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;type&quot;&amp;gt;&lt;/span&gt;The type of the object to check.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Boolean flag indicating if the class is a DataContract (true) or not (false) &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IsDataContract&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Type type&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] attributes = type.GetCustomAttributes(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(DataContractAttribute), &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; attributes.Length == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n} \n&lt;/code&gt;&lt;/pre&gt;\n    "],"422":["\n&lt;p&gt;You have to do it step by step if you don&apos;t want a &lt;code&gt;TypeError&lt;/code&gt; because if one of the members is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, and you try to access a member, an exception will be thrown.&lt;/p&gt;\n\n&lt;p&gt;You can either simply &lt;code&gt;catch&lt;/code&gt; the exception, or make a function to test the existence of multiple levels, something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj &lt;span class=&quot;hljs-comment&quot;&gt;/*, level1, level2, ... levelN*/&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!obj || !obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(args[i])) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    obj = obj[args[i]];\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; test = {&lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;}} };\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;ES6 UPDATE:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is a shorter version of the original function, using ES6 features and recursion (it&apos;s also in &lt;a href=&quot;https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/&quot; rel=&quot;noreferrer&quot;&gt;proper tail call&lt;/a&gt; form):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, level,  ...rest&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rest.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(level)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(obj[level], ...rest)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, if you want to get the value of a nested property and not only check its existence, here is a simple one-line function:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNested&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, ...args&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; args.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, level&lt;/span&gt;) =&amp;gt;&lt;/span&gt; obj &amp;amp;&amp;amp; obj[level], obj)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; test = { &lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;:{ &lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;:{ &lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;} } };\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getNested&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;level3&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getNested&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;length&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 6&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getNested&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getNested&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The above function allows you to get the value of nested properties, otherwise will return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE 2019-10-17:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://github.com/tc39/proposal-optional-chaining&quot; rel=&quot;noreferrer&quot;&gt;optional chaining proposal&lt;/a&gt; reached Stage 3 on the &lt;a href=&quot;https://tc39.es/process-document/&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript committee process&lt;/a&gt;, this will allow you to safely access deeply nested properties, by using the token &lt;code&gt;?.&lt;/code&gt;, the new &lt;em&gt;optional chaining operator&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = obj?.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If any of the levels accessed is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; the expression will resolve to &lt;code&gt;undefined&lt;/code&gt; by itself.&lt;/p&gt;\n\n&lt;p&gt;The proposal also allows you to handle method calls safely:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj?.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;?.&lt;span class=&quot;hljs-title function_&quot;&gt;method&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above expression will produce &lt;code&gt;undefined&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt;, &lt;code&gt;obj.level1&lt;/code&gt;, or &lt;code&gt;obj.level1.method&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, otherwise it will call the function.&lt;/p&gt;\n\n&lt;p&gt;&lt;s&gt;You can start playing with this feature with Babel using the &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining&quot; rel=&quot;noreferrer&quot;&gt;optional chaining plugin&lt;/a&gt;.&lt;/s&gt;&lt;/p&gt;\n\n&lt;p&gt;Since &lt;a href=&quot;https://babeljs.io/blog/2020/01/11/7.8.0&quot; rel=&quot;noreferrer&quot;&gt;Babel 7.8.0&lt;/a&gt;, ES2020 is supported by default&lt;/p&gt;\n\n&lt;p&gt;Check &lt;a href=&quot;https://babeljs.io/repl/#?code_lz=MYewdgzgLgBCBGArGBeGBvANgUwG7cwEYAuDHfTAJlKzwIGZSAichpgX04G4AoH0SLFwBDTAFdsqOEgD8AOlZF5iysrqZ6vBIjUVC8gLbYoACxAATABQBKXkA&amp;amp;version=7.8.4&quot; rel=&quot;noreferrer&quot;&gt;this example&lt;/a&gt; on the Babel REPL.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE: December 2019 &lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The optional chaining proposal finally &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/finished-proposals.md&quot; rel=&quot;noreferrer&quot;&gt;reached Stage 4&lt;/a&gt; in the December 2019 meeting of the TC39 committee. This means this feature will be part of the &lt;strong&gt;ECMAScript 2020&lt;/strong&gt; Standard.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a pattern I &lt;a href=&quot;http://web.archive.org/web/20161108071447/http://blog.osteele.com/posts/2007/12/cheap-monads/&quot; rel=&quot;noreferrer&quot;&gt;picked up from Oliver Steele&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; level3 = (((test || {}).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( level3 );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In fact that whole article is a discussion of how you can do this in javascript. He settles on using the above syntax (which isn&apos;t that hard to read once you get used to it) as an idiom.&lt;/p&gt;\n    ","\n&lt;h1&gt;Update&lt;/h1&gt;\n\n&lt;p&gt;Looks like lodash &lt;a href=&quot;https://github.com/lodash/lodash/commit/2edcc893034936cccb94264783453b3d6bceff45&quot; rel=&quot;noreferrer&quot;&gt;has added&lt;/a&gt; &lt;code&gt;_.get&lt;/code&gt; for all your nested property getting needs.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(countries, &lt;span class=&quot;hljs-string&quot;&gt;&apos;greece.sparta.playwright&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://lodash.com/docs#get&quot; rel=&quot;noreferrer&quot;&gt;https://lodash.com/docs#get&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Previous answer&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://lodash.com/&quot; rel=&quot;noreferrer&quot;&gt;lodash&lt;/a&gt; users may enjoy &lt;a href=&quot;https://github.com/Empeeric/lodash-contrib&quot; rel=&quot;noreferrer&quot;&gt;lodash.contrib&lt;/a&gt; which has a &lt;a href=&quot;https://github.com/Empeeric/lodash-contrib/blob/master/docs/_.object.selectors.js.md#getpath&quot; rel=&quot;noreferrer&quot;&gt;couple methods that mitigate this problem&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;getPath&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Signature:&lt;/strong&gt; &lt;code&gt;_.getPath(obj:Object, ks:String|Array)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Gets the value at any depth in a nested object based on the path described by\nthe keys given. Keys may be given as an array or as a dot-separated string.\nReturns &lt;code&gt;undefined&lt;/code&gt; if the path cannot be reached.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; countries = {\n        &lt;span class=&quot;hljs-attr&quot;&gt;greece&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;athens&lt;/span&gt;: {\n                &lt;span class=&quot;hljs-attr&quot;&gt;playwright&lt;/span&gt;:  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sophocles&quot;&lt;/span&gt;\n            }\n        }\n    }\n};\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;getPath&lt;/span&gt;(countries, &lt;span class=&quot;hljs-string&quot;&gt;&quot;greece.athens.playwright&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; &quot;Sophocles&quot;&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;getPath&lt;/span&gt;(countries, &lt;span class=&quot;hljs-string&quot;&gt;&quot;greece.sparta.playwright&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;getPath&lt;/span&gt;(countries, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;greece&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;athens&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;playwright&quot;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; &quot;Sophocles&quot;&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;getPath&lt;/span&gt;(countries, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;greece&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;sparta&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;playwright&quot;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have done &lt;a href=&quot;http://jsben.ch/7aJgK&quot; rel=&quot;noreferrer&quot;&gt;performance tests&lt;/a&gt; (thank you &lt;a href=&quot;https://stackoverflow.com/users/2167159/cdminix&quot;&gt;cdMinix&lt;/a&gt; for adding lodash) on some of the suggestions proposed to this question with the results listed below.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Disclaimer #1&lt;/strong&gt; Turning strings into references is unnecessary meta-programming and probably best avoided. Don&apos;t lose track of your references to begin with. &lt;a href=&quot;https://stackoverflow.com/a/6394168/308645&quot;&gt;Read more from this answer to a similar question&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Disclaimer #2&lt;/strong&gt; We are talking about millions of operations per millisecond here. It is very unlikely any of these would make much difference in most use cases. Choose whichever makes the most sense knowing the limitations of each. For me I would go with something like &lt;code&gt;reduce&lt;/code&gt; out of convenience.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/4034468/308645&quot;&gt;Object Wrap (by Oliver Steele)&lt;/a&gt;  34 %  fastest&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r1 = (((test || {}).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r2 = (((test || {}).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt; || {}).&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2631001/javascript-test-for-existence-of-nested-object-key&quot;&gt;Original solution (suggested in question)&lt;/a&gt;  45%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r1 = test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt; &amp;amp;&amp;amp; test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt; &amp;amp;&amp;amp; test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r2 = test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt; &amp;amp;&amp;amp; test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt; &amp;amp;&amp;amp; test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/2631198/308645&quot;&gt;checkNested&lt;/a&gt;  50%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i])) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    obj = obj[&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i]];\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/15344767/308645&quot;&gt;get_if_exist&lt;/a&gt;  52%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_if_exist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(str) }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/38952313/308645&quot;&gt;validChain&lt;/a&gt;  54%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validChain&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; object, ...keys &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; keys.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt; a, b &lt;/span&gt;) =&amp;gt;&lt;/span&gt; ( a || { } )[ b ], object ) !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/19848479/308645&quot;&gt;objHasKeys&lt;/a&gt;  63%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, keys&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; next = keys.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj[next] &amp;amp;&amp;amp; (! keys.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(obj[next], keys));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/24327152/308645&quot;&gt;nestedPropertyExists&lt;/a&gt;  69%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nestedPropertyExists&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, props&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop = props.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prop === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(prop) ? &lt;span class=&quot;hljs-title function_&quot;&gt;nestedPropertyExists&lt;/span&gt;(obj[prop], props) : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://lodash.com/docs/#get&quot; rel=&quot;noreferrer&quot;&gt;_.get&lt;/a&gt;  72%&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/2631521/308645&quot;&gt;deeptest&lt;/a&gt;  86%&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target, s&lt;/span&gt;){\n    s= s.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj= target[s.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(obj &amp;amp;&amp;amp; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) obj= obj[s.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/35169378/308645&quot;&gt;sad clowns&lt;/a&gt;  100%  slowest&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj || {} };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r1 = &lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r2 = &lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can read an object property at any depth, if you handle the name like a string: &lt;code&gt;&apos;t.level1.level2.level3&apos;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;t&lt;/span&gt;={&lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;}}};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;){\n    s= s.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[s.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(obj &amp;amp;&amp;amp; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) obj= obj[s.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;t.level1.level2.level3&apos;&lt;/span&gt;) || &lt;span class=&quot;hljs-string&quot;&gt;&apos;Undefined&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It returns &lt;code&gt;undefined&lt;/code&gt; if any of the segments is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a;\n\na = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt; (fn) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        value = &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (e) {\n        value = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ES5&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n    &lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;; }),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;; })\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are coding in ES6 environment (or using &lt;a href=&quot;https://github.com/6to5/6to5&quot; rel=&quot;noreferrer&quot;&gt;6to5&lt;/a&gt;) then you can take advantage of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;arrow function&lt;/a&gt; syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ES6 using the arrow function&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(\n    &lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;)\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Regarding the performance, there is no performance penalty for using &lt;code&gt;try..catch&lt;/code&gt; block if the property is set. There is a performance impact if the property is unset.&lt;/p&gt;\n\n&lt;p&gt;Consider simply using &lt;a href=&quot;https://lodash.com/docs#has&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;_.has&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = { &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: { &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; } } };\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  true&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.b.c&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  true&lt;/span&gt;\n\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(object, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;how about&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;)\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n ...whatever\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can also use tc39 optional chaining proposal together with babel 7 - &lt;a href=&quot;https://blog.benestudio.co/optional-chaining-operator-in-javascript-342082de2db&quot; rel=&quot;noreferrer&quot;&gt;tc39-proposal-optional-chaining&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Code would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; test = test?.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test) &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(test);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;ES6 answer, thoroughly tested :)&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;propExists&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;obj, path&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !!path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, prop&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj &amp;amp;&amp;amp; obj[prop] ? obj[prop] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    }, obj)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;see &lt;a href=&quot;https://codepen.io/fnocke/pen/wXaMeL?editors=0011&quot; rel=&quot;noreferrer&quot;&gt;Codepen with full test coverage&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;I tried a recursive approach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, keys&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; next = keys.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj[next] &amp;amp;&amp;amp; (! keys.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || &lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(obj[next], keys));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;! keys.length ||&lt;/code&gt; kicks out of the recursion so it doesn&apos;t run the function with no keys left to test.  Tests:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;to&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;the&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;goodKey&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;\n      }\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(obj, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;path&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;to&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;the&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;goodKey&apos;&lt;/span&gt;])); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(obj, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;path&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;to&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;the&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;badKey&apos;&lt;/span&gt;]));  &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am using it to print a friendly html view of a bunch of objects with unknown key/values, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; biosName = &lt;span class=&quot;hljs-title function_&quot;&gt;objHasKeys&lt;/span&gt;(myObj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;MachineInfo:BiosInfo:Name&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;))\n             ? myObj.&lt;span class=&quot;hljs-property&quot;&gt;MachineInfo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;BiosInfo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Name&lt;/span&gt;\n             : &lt;span class=&quot;hljs-string&quot;&gt;&apos;unknown&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This question is old. Today you can use Optional chaining (?.)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; value = test?.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;?.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Source:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think the following script gives more readable representation.&lt;/p&gt;\n\n&lt;p&gt;declare a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj || {};};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;)\n{\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I call it &quot;sad clown technique&quot; because it is using sign o(&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;EDIT:&lt;/p&gt;\n\n&lt;p&gt;here is a version for &lt;strong&gt;TypeScript&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;it gives type checks at compile time (as well as the intellisense if you use a tool like Visual Studio)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; o&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-attr&quot;&gt;someObject&lt;/span&gt;: T, &lt;span class=&quot;hljs-attr&quot;&gt;defaultValue&lt;/span&gt;: T = {} &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; T) : T {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; someObject === &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt; || someObject === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; defaultValue;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; someObject;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the usage is the same:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but this time intellisense works! &lt;/p&gt;\n\n&lt;p&gt;plus, you can set a default value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;o&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;create a global &lt;code&gt;function&lt;/code&gt; and use in whole project &lt;/p&gt;\n\n&lt;p&gt;try this&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isExist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arg&lt;/span&gt;();\n   }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n   }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj={&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;isExist&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt;))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;isExist&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;isExist&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;test&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;if condition&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;isExist&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;()=&amp;gt;&lt;/span&gt;obj.&lt;span class=&quot;hljs-property&quot;&gt;test&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;)){\n   ....\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I didn&apos;t see any example of someone using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot; rel=&quot;nofollow noreferrer&quot;&gt;Proxies&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;So I came up with my own.\nThe great thing about it is that you don&apos;t have to interpolate strings. You can actually return a chain-able &lt;s&gt;object&lt;/s&gt; function and do some magical things with it. You can even call functions and get array indexes to check for deep objects&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;noop&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {} &lt;span class=&quot;hljs-comment&quot;&gt;// We us a noop function so we can call methods also&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Proxy&lt;/span&gt;(noop, {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;noop, key&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// return end result if key is _result&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; key === &lt;span class=&quot;hljs-string&quot;&gt;&apos;_result&apos;&lt;/span&gt; \n        ? target \n        : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;( &lt;span class=&quot;hljs-comment&quot;&gt;// resolve with target value or undefined&lt;/span&gt;\n            target === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; : target[key]\n          )\n    },\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if we want to test a function then we can do so alos thanks to using noop&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// instead of using target in our proxy&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;noop, that, args&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; target === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt; ? target.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(that, args) : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)\n    },\n  })\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// some modified examples from the accepted answer&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; test = {&lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;:&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; ({&lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;})}}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; test1 = {&lt;span class=&quot;hljs-attr&quot;&gt;key1&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;key2&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;item0&apos;&lt;/span&gt;]}}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// You need to get _result in the end to get the final result&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;level2&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;_result&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(test).&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;level2&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level4&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level5&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;_result&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(test1).&lt;span class=&quot;hljs-property&quot;&gt;key1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;key2&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;_result&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(test1)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;_result&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// don&apos;t exist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The above code works fine for synchronous stuff. But how would you test something that is asynchronous like this ajax call?\nHow do you test that?&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://httpbin.org/get&apos;&lt;/span&gt;)\n.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; response.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()\n})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;json&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json.&lt;span class=&quot;hljs-property&quot;&gt;headers&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;User-Agent&apos;&lt;/span&gt;])\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;sure you could use async/await to get rid of some callbacks. But what if you could do it even more magically? something that looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://httpbin.org/get&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;headers&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;User-Agent&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You probably wonder where all the promise &amp;amp; &lt;code&gt;.then&lt;/code&gt; chains are... this could be blocking for all that you know... but using the same Proxy technique with promise you can actually test deeply nested complex path for it existence without ever writing a single function&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt;) { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Proxy&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {}, {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;noop, key&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; key === &lt;span class=&quot;hljs-string&quot;&gt;&apos;then&apos;&lt;/span&gt; ? target.&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(target) : &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(target).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;target&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; target[key] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target[key].&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(target)\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; target[key]\n        })\n      )\n    },\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;noop, that, args&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(target.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(that, args)\n      }))\n    },\n  })\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// this feels very much synchronous but are still non blocking :)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// this will chain a noop function until you call then()&lt;/span&gt;\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://httpbin.org/get&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()\n  .&lt;span class=&quot;hljs-property&quot;&gt;headers&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;User-Agent&apos;&lt;/span&gt;]\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;warn&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// you get a warning if it doesn&apos;t exist&lt;/span&gt;\n  \n&lt;span class=&quot;hljs-comment&quot;&gt;// You could use this method also for the first test object&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// also, but it would have to call .then() in the end&lt;/span&gt;\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Another example&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;https://httpbin.org/get?items=4&amp;amp;items=2&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;()\n  .&lt;span class=&quot;hljs-property&quot;&gt;args&lt;/span&gt;\n  .&lt;span class=&quot;hljs-property&quot;&gt;items&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// nice that you can map an array item without even having it ready&lt;/span&gt;\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; ~~n * &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) \n  .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;warn&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// you get a warning if it doesn&apos;t exist&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;One simple way is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;);    &lt;span class=&quot;hljs-comment&quot;&gt;// this is optional to put any output here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;try/catch&lt;/code&gt; catches the cases for when any of the higher level objects such as test, test.level1, test.level1.level2 are not defined.&lt;/p&gt;\n    ","\n&lt;p&gt;Based on &lt;a href=&quot;https://stackoverflow.com/questions/2631001/javascript-test-for-existence-of-nested-object-key#answer-4034468&quot;&gt;this answer&lt;/a&gt;, I came up with this generic function using &lt;code&gt;ES2015&lt;/code&gt; which would solve the problem&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validChain&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; object, ...keys &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; keys.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt; a, b &lt;/span&gt;) =&amp;gt;&lt;/span&gt; ( a || { } )[ b ], object ) !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; test = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-attr&quot;&gt;second&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;third&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is not the key your are looking for&quot;&lt;/span&gt;\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_&quot;&gt;validChain&lt;/span&gt;( test, &lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt; ) ) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( test.&lt;span class=&quot;hljs-property&quot;&gt;first&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;second&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;third&lt;/span&gt; );\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have created a little function to get nested object properties safely.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, path, fallback, fallbackOnFalsy&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!object || !path) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fallback;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Reduces object properties to the deepest property in the path argument.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, property&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (object &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; object !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; &amp;amp;&amp;amp; object.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(property)) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// The property is found but it may be falsy.&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// If fallback is active for falsy values, the fallback is returned, otherwise the property value.&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !object[property] &amp;amp;&amp;amp; fallbackOnFalsy ? fallback : object[property];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Returns the fallback if current chain link does not exist or it does not contain the property.&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fallback;\n        }\n    }, object);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or a simpler but slightly unreadable version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, path, fb, fbFalsy&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!o || !path) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fb;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; o !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; &amp;amp;&amp;amp; o.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(p) ? !o[p] &amp;amp;&amp;amp; fbFalsy ? fb : o[p] : fb, o);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even shorter but without fallback on falsy flag:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, path, fb&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!o || !path) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fb;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; o !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; &amp;amp;&amp;amp; o.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(p) ? o[p] : fb, o);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have test with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here are some tests:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// null&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c.d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fallback&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c.b.c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fallback&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// array index 2&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c.b.c.2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fallback&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// no index =&amp;gt; fallback&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(obj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c.b.c.10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;fallback&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To see all the code with documentation and the tests I&apos;ve tried you can check my github gist:\n&lt;a href=&quot;https://gist.github.com/vsambor/3df9ad75ff3de489bbcb7b8c60beebf4#file-javascriptgetnestedvalues-js&quot; rel=&quot;noreferrer&quot;&gt;https://gist.github.com/vsambor/3df9ad75ff3de489bbcb7b8c60beebf4#file-javascriptgetnestedvalues-js&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A shorter, ES5 version of @CMS&apos;s excellent answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Check the obj has the keys in the order mentioned. Used for checking JSON results.  &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; checkObjHasKeys = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, keys&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; success = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n  keys.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( ! obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(key)) {\n      success = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    obj = obj[key];\n  })\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; success;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With a similar test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; test = { &lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;result&apos;&lt;/span&gt;}}};\nutils.&lt;span class=&quot;hljs-title function_&quot;&gt;checkObjHasKeys&lt;/span&gt;(test, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\nutils.&lt;span class=&quot;hljs-title function_&quot;&gt;checkObjHasKeys&lt;/span&gt;(test, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I was looking for the value to be returned if the property exists, so I modified the answer by CMS above. Here&apos;s what I came up with:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNestedProperty&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, key&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Get property array from key string&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = key.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Iterate through properties, returning undefined if object is null or property doesn&apos;t exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; properties.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!obj || !obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(properties[i])) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    }\n    obj = obj[properties[i]];\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Nested property found, so return the value&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;\n}\n\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Usage&lt;/span&gt;:\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getNestedProperty&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&quot;level1.level2.level3&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;level3&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getNestedProperty&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&quot;level1.level2.foo&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The answer given by CMS works fine with the following modification for null checks as well&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkNested&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj &lt;span class=&quot;hljs-comment&quot;&gt;/*, level1, level2, ... levelN*/&lt;/span&gt;&lt;/span&gt;) \n      {\n             &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;),\n             obj = args.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;();\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) \n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || !obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(args[i]) ) \n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                }\n                obj = obj[args[i]];\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Following options were elaborated starting from &lt;a href=&quot;https://stackoverflow.com/a/4034468/1636522&quot;&gt;this answer&lt;/a&gt;. Same tree for both : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; } } };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Stop searching when undefined&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; u = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\no.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; ? o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; ? o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; : u : u &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\no.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; ? o.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt; ? o.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;z&lt;/span&gt; : u : u &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n(o = o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;) ? (o = o.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;) ? o.&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; : u : u &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;Ensure each level one by one&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $ = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;empty&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;node&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; node || empty;\n    };\n}({});\n\n$($(o.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n$($(o.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know this question is old, but I wanted to offer an extension by adding this to all objects. I know people tend to frown on using the Object prototype for extended object functionality, but I don&apos;t find anything easier than doing this. Plus, it&apos;s now allowed for with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot; rel=&quot;nofollow&quot;&gt;Object.defineProperty&lt;/a&gt; method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;has&quot;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; needle &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; needles = needle.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;needles.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++ ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( !obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(needles[i])) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        obj = obj[needles[i]];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, in order to test for any property in any object you can simply do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( obj.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some.deep.nested.object.somewhere&quot;&lt;/span&gt;) )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/4302m6e1/4/&quot; rel=&quot;nofollow&quot;&gt;Here&apos;s a jsfiddle&lt;/a&gt; to test it out, and in particular it includes some jQuery that breaks if you modify the Object.prototype directly because of the property becoming enumerable. This should work fine with 3rd party libraries.&lt;/p&gt;\n    ","\n&lt;p&gt;I think this is a slight improvement (becomes a 1-liner):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt; &amp;amp;&amp;amp; test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt; &amp;amp;&amp;amp; test.&lt;span class=&quot;hljs-property&quot;&gt;level1&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level2&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;level3&lt;/span&gt; )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works because the &amp;amp;&amp;amp; operator returns the final operand it evaluated (and it short-circuits).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;This works with all objects and arrays :)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;ex: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( obj.&lt;span class=&quot;hljs-title function_&quot;&gt;_has&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;something.[&apos;deep&apos;][&apos;under&apos;][1][0].item&quot;&lt;/span&gt; ) ) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this is my improved version of Brian&apos;s answer &lt;/p&gt;\n\n&lt;p&gt;I used &lt;em&gt;_has&lt;/em&gt; as the property name because it can conflict with existing has property (ex: maps)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_has&quot;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; needle &lt;/span&gt;) {\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; needles = needle.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; );\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; needles_full=[];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; needles_square;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;needles.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++ ) {\n    needles_square = needles[i].&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(needles_square.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;needles_square.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; j++ ) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(needles_square[j].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;){\n                needles_full.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(needles_square[j]);\n            }\n        }\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        needles_full.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(needles[i]);\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;needles_full.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++ ) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = needles_full[i].&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^((\\d+)|&quot;(.+)&quot;|&apos;(.+)&apos;)\\]$/&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; res.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; j++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res[j] != &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n                needles_full[i] = res[j];\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj[needles_full[i]]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    obj = obj[needles_full[i]];\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s the &lt;a href=&quot;http://jsfiddle.net/adutu/4302m6e1/10/&quot; rel=&quot;nofollow&quot;&gt;fiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my take on it - most of these solutions ignore the case of a nested array as in:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    obj = {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;l1&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;l2&quot;&lt;/span&gt;:[{&lt;span class=&quot;hljs-attr&quot;&gt;k&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;k&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}],\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;l3&quot;&lt;/span&gt;:{\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;subL&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I may want to check for &lt;code&gt;obj.l2[0].k&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;With the function below, you can do &lt;code&gt;deeptest(&apos;l2[0].k&apos;,obj)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The function will return true if the object exists, false otherwise&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;keyPath, testObj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj;\n\n    keyPath = keyPath.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cKey = keyPath.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pObj, pKey&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bracketStart, bracketEnd, o;\n\n        bracketStart = pKey.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bracketStart &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;//check for nested arrays&lt;/span&gt;\n            bracketEnd = pKey.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrIndex = pKey.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(bracketStart + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, bracketEnd - bracketStart - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            pKey = pKey.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, bracketStart);\n\t\t\t&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = pObj[pKey];\n            o = n? n[arrIndex] : &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            o = pObj[pKey];\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; o;\n    }\n\n    obj = &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(testObj, cKey);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (obj &amp;amp;&amp;amp; keyPath.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n        obj = &lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(obj, keyPath.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;());\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(obj) !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;l1&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;level1&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1&quot;&lt;/span&gt;:[\n        {&lt;span class=&quot;hljs-string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;},\n        {&lt;span class=&quot;hljs-string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},\n        {&lt;span class=&quot;hljs-string&quot;&gt;&quot;k&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;sub&quot;&lt;/span&gt;: {\n       \t&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;letter A&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;letter B&quot;&lt;/span&gt;\n    }\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;l1: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;l1&quot;&lt;/span&gt;,obj));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[0]: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[0]&quot;&lt;/span&gt;,obj));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[1].k: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[1].k&quot;&lt;/span&gt;,obj));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[1].j: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[1].j&quot;&lt;/span&gt;,obj));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[3]: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr1[3]&quot;&lt;/span&gt;,obj));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr2: &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-title function_&quot;&gt;deeptest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arr2&quot;&lt;/span&gt;,obj));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Now we can also use &lt;code&gt;reduce&lt;/code&gt; to loop through nested keys: &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// @params o&amp;lt;object&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// @params path&amp;lt;string&amp;gt; expects &apos;obj.prop1.prop2.prop3&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// returns: obj[path] value or &apos;false&apos; if prop doesn&apos;t exist&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;objPropIfExists&lt;/span&gt; = o =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; levels = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; res = (levels.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) \n    ? levels.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a[c] || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, o)\n    : o[path];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (!!res) ? res : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Name&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;sys&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;country&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;AU&apos;&lt;/span&gt; },\n  &lt;span class=&quot;hljs-attr&quot;&gt;main&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;temp&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;34&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;temp_min&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;13&apos;&lt;/span&gt; },\n  &lt;span class=&quot;hljs-attr&quot;&gt;visibility&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;35%&apos;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; exists = &lt;span class=&quot;hljs-title function_&quot;&gt;objPropIfExists&lt;/span&gt;(obj)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;main.temp&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; doesntExist = &lt;span class=&quot;hljs-title function_&quot;&gt;objPropIfExists&lt;/span&gt;(obj)(&lt;span class=&quot;hljs-string&quot;&gt;&apos;main.temp.foo.bar.baz&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(exists, doesntExist)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this by using the recursive function. This will work even if you don&apos;t know all nested Object keys name.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;FetchKeys&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; objKeys = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; keyValues = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;(obj);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; keyValues) {\n        objKeys.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(keyValues[i][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; keyValues[i][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keys = &lt;span class=&quot;hljs-title class_&quot;&gt;FetchKeys&lt;/span&gt;(keyValues[i][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n            objKeys = objKeys.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(keys);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; objKeys;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; test = { &lt;span class=&quot;hljs-attr&quot;&gt;level1&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;level2&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;level3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;level3&quot;&lt;/span&gt; } } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; keyToCheck = &lt;span class=&quot;hljs-string&quot;&gt;&quot;level2&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; keys = &lt;span class=&quot;hljs-title class_&quot;&gt;FetchKeys&lt;/span&gt;(test); &lt;span class=&quot;hljs-comment&quot;&gt;//Will return an array of Keys&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keys.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(keyToCheck) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Key Exists logic;&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Key Not Found logic;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;And yet another one which is very compact:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ifSet&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, path&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, part&lt;/span&gt;) =&amp;gt;&lt;/span&gt; obj &amp;amp;&amp;amp; obj[part], object)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;called:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = {&lt;span class=&quot;hljs-attr&quot;&gt;b&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;c&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;d&lt;/span&gt;:{&lt;span class=&quot;hljs-attr&quot;&gt;e&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;found!&apos;&lt;/span&gt;}}}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;ifSet&lt;/span&gt;(a, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b.c.d.e&apos;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;found!&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;ifSet&lt;/span&gt;(a, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.a.a.a.a.a&apos;&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It won&apos;t perform great since it&apos;s splitting a string (but increases readability of the call) and iterates over everything even if it&apos;s already obvious that nothing will be found (but increases readability of the function itself).&lt;/p&gt;\n\n&lt;p&gt;at least is faster than &lt;code&gt;_.get&lt;/code&gt; &lt;a href=&quot;http://jsben.ch/aAtmc&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://jsben.ch/aAtmc&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I have used this function for access properties of the deeply nested object and it working for me...&lt;/p&gt;\n&lt;p&gt;this is the function&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * get property of object\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; obj object\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; path e.g user.name\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, path, defaultValue = &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = path.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) =&amp;gt;&lt;/span&gt; o &amp;amp;&amp;amp; o[p], obj);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value ? value : defaultValue;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this is how I access the deeply nested object property&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{{ &lt;span class=&quot;hljs-title function_&quot;&gt;getProperty&lt;/span&gt;(object, &lt;span class=&quot;hljs-string&quot;&gt;&apos;passengerDetails.data.driverInfo.currentVehicle.vehicleType&apos;&lt;/span&gt;) }}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;theres a function &lt;a href=&quot;http://thecodeabode.blogspot.com.au/2013/04/javascript-safely-reading-nested.html&quot; rel=&quot;nofollow&quot;&gt;here on thecodeabode (safeRead)&lt;/a&gt; which will do this in a safe manner... i.e.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;safeRead&lt;/span&gt;(test, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;level3&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if any property is null or undefined, an empty string is returned&lt;/p&gt;\n    "],"423":["\n&lt;p&gt;Instead of using the &lt;code&gt;/regex\\d/g&lt;/code&gt; syntax, you can construct a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions&quot; rel=&quot;noreferrer&quot;&gt;RegExp&lt;/a&gt; object:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;regex\\\\d&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(replace,&lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can dynamically create regex objects this way. Then you will do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;mystring1&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;newstring&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As Eric Wendelin mentioned, you can do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;pattern&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(str1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;pattern matching .&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;regex&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This yields &lt;code&gt;&quot;regex matching .&quot;&lt;/code&gt;. However, it will fail if str1 is &lt;code&gt;&quot;.&quot;&lt;/code&gt;. You&apos;d expect the result to be &lt;code&gt;&quot;pattern matching regex&quot;&lt;/code&gt;, replacing the period with &lt;code&gt;&quot;regex&quot;&lt;/code&gt;, but it&apos;ll turn out to be...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;regexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregex\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because, although &lt;code&gt;&quot;.&quot;&lt;/code&gt; is a String, in the RegExp constructor it&apos;s still interpreted as a regular expression, meaning any non-line-break character, meaning every character in the string. For this purpose, the following function may be useful:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;quote&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/([.?*+^$[\\]\\\\(){}|-])/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$1&quot;&lt;/span&gt;);\n };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;str1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;quote&lt;/span&gt;(str1), &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;pattern matching .&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;regex&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yielding &lt;code&gt;&quot;pattern matching regex&quot;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;&quot;ABABAB&quot;.replace(/B/g, &quot;A&quot;);&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As always: don&apos;t use regex unless you have to. For a simple string replace, the idiom is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABABAB&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you don&apos;t have to worry about the quoting issues mentioned in Gracenotes&apos;s answer.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to get &lt;em&gt;all&lt;/em&gt; occurrences (&lt;code&gt;g&lt;/code&gt;), be case insensitive (&lt;code&gt;i&lt;/code&gt;), and use boundaries so that it isn&apos;t a word within another word (&lt;code&gt;\\\\b&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${replaceThis}&lt;/span&gt;\\\\b`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; inputString = &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;m John, or johnny, but I prefer john.&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; replaceThis = &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${replaceThis}&lt;/span&gt;\\\\b`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(inputString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// I&apos;m Jack, or johnny, but I prefer Jack.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; txt=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(pattern,attributes);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is equivalent to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; txt=&lt;span class=&quot;hljs-regexp&quot;&gt;/pattern/&lt;/span&gt;attributes;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot; rel=&quot;noreferrer&quot;&gt;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For anyone looking to use a variable with the &lt;strong&gt;match&lt;/strong&gt; method, this worked for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; alpha = &lt;span class=&quot;hljs-string&quot;&gt;&apos;fig&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;food fight&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(alpha + &lt;span class=&quot;hljs-string&quot;&gt;&apos;ht&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// fight&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;( replaceThis, &lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt; ), withThis );\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to build the regular expression dynamically and for this &lt;strong&gt;you must use the &lt;code&gt;new RegExp(string)&lt;/code&gt; constructor with escaping&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;There is a built-in function in &lt;a href=&quot;https://api.jqueryui.com/autocomplete/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery UI autocomplete widget&lt;/a&gt; called &lt;code&gt;$.ui.autocomplete.escapeRegex&lt;/code&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It&apos;ll take a single string argument and escape all regex characters,\nmaking the result safe to pass to &lt;code&gt;new RegExp()&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If you are not using jQuery UI you can copy its definition &lt;a href=&quot;https://github.com/jquery/jquery-ui/blob/main/ui/widgets/autocomplete.js&quot; rel=&quot;nofollow noreferrer&quot;&gt;from the source&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escapeRegex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; value &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;( &lt;span class=&quot;hljs-regexp&quot;&gt;/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$&amp;amp;&quot;&lt;/span&gt; );\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And use it like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;[z-a][z-a][z-a]&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(escapeRegex(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[z-a]&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;[a-z]&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//            escapeRegex(&quot;[z-a]&quot;)       -&amp;gt; &quot;\\[z\\-a\\]&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// new RegExp(escapeRegex(&quot;[z-a]&quot;), &quot;g&quot;) -&amp;gt; /\\[z\\-a\\]/g&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// end result                            -&amp;gt; &quot;[a-z][a-z][a-z]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;replaceThis, withThis&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(replaceThis,&lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;); \n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(re, withThis);\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aa = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abab54..aba&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;v&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test with this &lt;a href=&quot;http://www.pagecolumn.com/tool/regtest.htm&quot; rel=&quot;noreferrer&quot;&gt;tool&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/([.?*+^$[\\]\\\\(){}|-])/ig&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\$1&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;ig&apos;&lt;/span&gt;), b)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test it like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; whatever = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Some [b]random[/b] text in a [b]sentence.[/b]&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(whatever.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;And the CoffeeScript version of &lt;a href=&quot;https://stackoverflow.com/questions/494035/how-do-you-use-a-variable-in-a-regular-expression/13608644#13608644&quot;&gt;Steven Penny&apos;s answer&lt;/a&gt;, since this is #2 Google result....even if CoffeeScript is just JavaScript with a lot of characters removed...;)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;baz = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\nfilter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(baz + &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;food fight&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(filter)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// food&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And in my particular case:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;robot.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = hubot\nfilter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(robot.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; msg.&lt;span class=&quot;hljs-property&quot;&gt;match&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;input&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(filter)\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;True!&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To satisfy my need to insert a variable/alias/function into a Regular Expression, this is what I came up with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;oldre = &lt;span class=&quot;hljs-regexp&quot;&gt;/xx\\(&quot;&quot;\\)/&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;newre&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(e.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\//g&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/xx/g&lt;/span&gt;, yy), &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;)\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;newre&lt;/span&gt;(oldre), &lt;span class=&quot;hljs-string&quot;&gt;&quot;withThis&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &apos;oldre&apos; is the original regexp that I want to insert a variable,\n&apos;xx&apos; is the placeholder for that variable/alias/function,\nand &apos;yy&apos; is the actual variable name, alias, or function.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use a string as a regular expression. Dont forget to use &lt;strong&gt;new RegExp&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; yourFunction = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;^-?\\\\d+(?:\\\\.\\\\d{0,&apos;&lt;/span&gt; + yourVar + &lt;span class=&quot;hljs-string&quot;&gt;&apos;})?&apos;&lt;/span&gt;\n      )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another replaceAll implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;stringToFind, stringToReplace&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( stringToFind == stringToReplace) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = temp.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(stringToFind);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            temp = temp.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(stringToFind, stringToReplace);\n            index = temp.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(stringToFind);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use this if &lt;code&gt;$1&lt;/code&gt; does not work for you:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pattern = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;amman&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc Amman efg&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(pattern, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc Amman efg&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(pattern)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While you can make dynamically-created RegExp&apos;s (as per the other responses to this question), I&apos;ll echo my comment from a &lt;a href=&quot;https://stackoverflow.com/questions/487509/passing-variable-to-a-regexp-in-javascript/488133#488133&quot;&gt;similar post&lt;/a&gt;: The functional form of &lt;a href=&quot;https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/String/Replace&quot; rel=&quot;nofollow noreferrer&quot;&gt;String.replace()&lt;/a&gt; is extremely useful and in many cases reduces the need for dynamically-created RegExp objects. (which are kind of a pain &apos;cause you have to express the input to the RegExp constructor as a string rather than use the slashes /[A-Z]+/ regexp literal format)&lt;/p&gt;\n    ","\n&lt;p&gt;This self calling function will iterate over replacerItems using an index, and change replacerItems[index] globally on the string with each pass.   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; replacerItems = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;];    \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str, index&lt;/span&gt;){\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item = replacerItems[index];\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`[&lt;span class=&quot;hljs-subst&quot;&gt;${item}&lt;/span&gt;]`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newStr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(regex, &lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; replacerItems.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(newStr, index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n          }\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; newStr;\n    }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// console.log(replacer(&apos;abcdefg&apos;, 0)) will output &apos;zzzdefg&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;None of these answers were clear to me. I eventually found a good explanation at &lt;em&gt;&lt;a href=&quot;http://burnignorance.com/php-programming-tips/how-to-use-a-variable-in-replace-function-of-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to use a variable in replace function of JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The simple answer is:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search_term = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(search_term, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\ntext = text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(search_term, replace_term);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Find&lt;/span&gt;_and_replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Lorem&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Chocolate&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Find&lt;/span&gt;_and_replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ipsum&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ice-cream&quot;&lt;/span&gt;);\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Find_and_replace&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;search_term, replace_term&lt;/span&gt;) {\n  text = $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textbox&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; search_term = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(search_term, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n  text = text.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(search_term, replace_term);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;textbox&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(text);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;textbox&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;textbox&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can always use &lt;code&gt;indexOf&lt;/code&gt; repeatedly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;replaceAll&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;substring, replacement&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(substring, lastIndex);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(index === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        result += &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(lastIndex, index) + replacement;\n        lastIndex = index + substring.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(lastIndex);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This doesnt go into an infinite loop when the replacement contains the match.&lt;/p&gt;\n    ","\n&lt;p&gt;One way to implement is by taking the value from a text field which is the one you want to replace and another is the &quot;replace with&quot; text field, getting the value from text-field in a variable and setting the variable to RegExp function to further replace. In my case I am using jQuery, but you can also do it by only JavaScript too.&lt;/p&gt;\n&lt;p&gt;JavaScript code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace =&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;replace}&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// getting a value from a text field with I want to replace&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; replace_with = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;with&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//Getting the value from another text fields with which I want to replace another string.&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sRegExInput = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(replace, &lt;span class=&quot;hljs-string&quot;&gt;&quot;g&quot;&lt;/span&gt;);\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;children&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;($(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(sRegExInput,replace_with));\n  });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code is on the Onclick event of a button, and you can put this in a function to call.&lt;/p&gt;\n&lt;p&gt;So now you can pass a variable in the replace function.&lt;/p&gt;\n    ","\n&lt;p&gt;For multiple replace without regular expressions I went with the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a cat man. I like cats&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; find = &lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; replace = &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;;\n\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Count how many occurrences there are of the string to find &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// inside the str to be examined.&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; findCount = str.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(find).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; loopCount = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (loopCount &amp;lt; findCount) \n      {\n        str = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(find, replace);\n        loopCount = loopCount + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n      }  \n\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str);\n      &lt;span class=&quot;hljs-comment&quot;&gt;// I am a dog man. I like dogs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/39422368/4683230&quot;&gt;The important part of the solution was found here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you pass the variable with the correct syntax, you can do this like so with the code below.&lt;/p&gt;\n&lt;p&gt;This has the added benefit of using the flags in the same variable.&lt;/p&gt;\n&lt;p&gt;Also you don&apos;t have to double escape &lt;code&gt;\\&lt;/code&gt; in the regular expression when it comes to &lt;code&gt;\\w&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;regexVariable example: This is my example of RegExp replacing with a regexVariable.&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reVar = &lt;span class=&quot;hljs-regexp&quot;&gt;/(.*?)(regex\\w+?iable)(.+?)/gi&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resStr = str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(reVar), &lt;span class=&quot;hljs-string&quot;&gt;&apos;$1 :) :) :) $2 :) :) :)$3&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(resStr);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Returns:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// :) :) :) regexVariable :) :) :) example: This is my example of RegExp replacing with a  :) :) :) regexVariable :) :) :).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The prototype version as per the OP&apos;s example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;true&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&apos;regexVariable prototype: This is my example of RegExp replacing with a regexVariable.&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;regexVariable&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;reFind, reReplace&lt;/span&gt;) {\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(reFind), reReplace);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reVar = &lt;span class=&quot;hljs-regexp&quot;&gt;/(.*?)(regex\\w+?iable)(.+?)/gi&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str.&lt;span class=&quot;hljs-title function_&quot;&gt;regexVariable&lt;/span&gt;(reVar, &lt;span class=&quot;hljs-string&quot;&gt;&apos;$1 :) :) :) $2 :) :) :)$3&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Returns:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// :) :) :) regexVariable :) :) :) prototype: This is my example of replacing with a  :) :) :) regexVariable :) :) :).&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As a relative JavaScript novice, the accepted answer &lt;a href=&quot;https://stackoverflow.com/a/494046/1904943&quot;&gt;https://stackoverflow.com/a/494046/1904943&lt;/a&gt; is noted / appreciated, but it is not very intuitive.&lt;/p&gt;\n&lt;p&gt;Here is a simpler interpretation, by example (using a &lt;a href=&quot;https://stackoverflow.com/questions/17132593/simple-javascript-ide/66376974#66376974&quot;&gt;simple JavaScript IDE&lt;/a&gt;).&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;apple pie, banana loaf&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/pie/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PIE, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bpie\\b/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PIE, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/pi/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PIEe, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\bpi\\b/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PIE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [NO EFFECT] apple pie, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_word = &lt;span class=&quot;hljs-string&quot;&gt;&apos;pie&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/match_word/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [NO EFFECT] apple pie, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\b`${bmatch_word}`\\b/gi&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// [NO EFFECT] apple pie, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ----------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... new RegExp(): be sure to \\-escape your backslashes: \\b &amp;gt;&amp;gt; \\\\b ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_term = &lt;span class=&quot;hljs-string&quot;&gt;&apos;pie&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${match_term}&lt;/span&gt;\\\\b)`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;PiE&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple PiE, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple **PIE**, banana loaf&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myString.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;**PIE**&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;// apple **PIE**, banana loaf&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;E.g.: replacing (color highlighting) words in string / sentence, [optionally] if the search term matches a more than a user-defined proportion of the matched word.&lt;/p&gt;\n&lt;p&gt;Note: original character case of matched term is retained. &lt;code&gt;hl&lt;/code&gt;: highlight; &lt;code&gt;re&lt;/code&gt;: regex | regular expression&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;mySentence = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple, boOk? BOoks; booKEd. BookMark, &apos;BookmarkeD&apos;, bOOkmarks! bookmakinG, Banana; bE, BeEn, beFore.&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mySentence, hl_term, hl_re&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mySentence [raw]:&apos;&lt;/span&gt;, mySentence)\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hl_term:&apos;&lt;/span&gt;, hl_term, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| hl_term.length:&apos;&lt;/span&gt;, hl_term.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n    cutoff = hl_term.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;cutoff:&apos;&lt;/span&gt;, cutoff)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `.match()` conveniently collects multiple matched items&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// (including partial matches) into an [array]&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hl_terms  = mySentence.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(hl_re, hl_term);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (hl_terms == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;No matches to hl_term &quot;&apos;&lt;/span&gt; + hl_term + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;; echoing input string then exiting ...&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mySentence;\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hl_terms:&apos;&lt;/span&gt;, hl_terms)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  i &amp;lt; hl_terms.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;----------------------------------------&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; + i + &lt;span class=&quot;hljs-string&quot;&gt;&apos;]:&apos;&lt;/span&gt;, hl_terms[i], &lt;span class=&quot;hljs-string&quot;&gt;&apos;| length:&apos;&lt;/span&gt;, hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| parseInt(0.7(length)):&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;*hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;))\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TEST: if (hl_terms[i].length &amp;gt;= cutoff*10) {&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (cutoff &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt; * hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match_term = hl_terms[i].&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;matched term:&apos;&lt;/span&gt;, match_term, &lt;span class=&quot;hljs-string&quot;&gt;&apos;[cutoff length:&apos;&lt;/span&gt;, cutoff, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| 0.7(matched term length):&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt; * hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;))\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; match_re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${match_term}&lt;/span&gt;\\\\b)`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;)\n\n            mySentence = mySentence.&lt;span class=&quot;hljs-title function_&quot;&gt;replaceAll&lt;/span&gt;(match_re, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;font style=&quot;background:#ffe74e&quot;&amp;gt;$1&amp;lt;/font&amp;gt;&apos;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; match_term = hl_terms[i].&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;NO match:&apos;&lt;/span&gt;, match_term, &lt;span class=&quot;hljs-string&quot;&gt;&apos;[cutoff length:&apos;&lt;/span&gt;, cutoff, &lt;span class=&quot;hljs-string&quot;&gt;&apos;| 0.7(matched term length):&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt; * hl_terms[i].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;))\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mySentence;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// TESTS:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;be&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;bee&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;before&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;book&apos;;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hl_term = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bookma&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// const hl_term = &apos;Leibniz&apos;;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This regex matches from start of word:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; hl_re = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`(\\\\b&lt;span class=&quot;hljs-subst&quot;&gt;${hl_term}&lt;/span&gt;[A-z]*)\\\\b`&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;gi&apos;&lt;/span&gt;)\n\nmySentence = &lt;span class=&quot;hljs-title function_&quot;&gt;replacer&lt;/span&gt;(mySentence, hl_term, hl_re);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mySentence [processed]:&apos;&lt;/span&gt;, mySentence)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;mySentence [raw]: Apple, boOk? BOoks; booKEd. BookMark, &apos;BookmarkeD&apos;,\nbOOkmarks! bookmakinG, Banana; bE, BeEn, beFore.\n\nhl_term: bookma | hl_term.length: 6\ncutoff: 6\nhl_terms: Array(4) [ &quot;bookmark&quot;, &quot;bookmarked&quot;, &quot;bookmarks&quot;, &quot;bookmaking&quot; ]\n\n----------------------------------------\n[0]: bookmark | length: 8 | parseInt(0.7(length)): 5\nmatched term: bookmark [cutoff length: 6 | 0.7(matched term length): 5\n----------------------------------------\n[1]: bookmarked | length: 10 | parseInt(0.7(length)): 7\nNO match: bookmarked [cutoff length: 6 | 0.7(matched term length): 7\n----------------------------------------\n[2]: bookmarks | length: 9 | parseInt(0.7(length)): 6\nmatched term: bookmarks [cutoff length: 6 | 0.7(matched term length): 6\n----------------------------------------\n[3]: bookmaking | length: 10 | parseInt(0.7(length)): 7\nNO match: bookmaking [cutoff length: 6 | 0.7(matched term length): 7\n\nmySentence [processed]: Apple, boOk? BOoks; booKEd.\n&amp;lt;font style=&quot;background:#ffe74e&quot;&amp;gt;BookMark&amp;lt;/font&amp;gt;, &apos;BookmarkeD&apos;,\n&amp;lt;font style=&quot;background:#ffe74e&quot;&amp;gt;bOOkmarks&amp;lt;/font&amp;gt;! bookmakinG,\nBanana; bE, BeEn, beFore.\n&lt;/code&gt;&lt;/pre&gt;\n    "],"424":["\n&lt;p&gt;My crystal ball says that you are loading the model using either &lt;code&gt;file://&lt;/code&gt; or &lt;code&gt;C:/&lt;/code&gt;, which stays true to the error message as they are not &lt;code&gt;http://&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;So you can either install a webserver in your local PC or upload the model somewhere else and use &lt;code&gt;jsonp&lt;/code&gt; and change the url to &lt;code&gt;http://example.com/path/to/model&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Origin is defined in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6454&quot; rel=&quot;noreferrer&quot;&gt;RFC-6454&lt;/a&gt; as&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   ...they have the same\n   scheme, host, and port.  (&lt;span class=&quot;hljs-title class_&quot;&gt;See&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Section&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; full details.)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So even though your file originates from the same host (&lt;code&gt;localhost&lt;/code&gt;), but as long as the scheme is different (&lt;code&gt;http&lt;/code&gt; / &lt;code&gt;file&lt;/code&gt;), they are treated as different origin.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to be explicit - Yes, the error is saying you cannot point your browser directly at &lt;code&gt;file://some/path/some.html&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here are some options to quickly spin up a local web server to let your browser render local files&lt;/p&gt;\n\n&lt;h2&gt;Python 2&lt;/h2&gt;\n\n&lt;p&gt;If you have Python installed...&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Change directory into the folder where your file &lt;code&gt;some.html&lt;/code&gt; or file(s) exist using the command &lt;code&gt;cd /path/to/your/folder&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Start up a Python web server using the command &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This will start a web server to host your entire directory listing at &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;You can use a custom port  &lt;code&gt;python -m SimpleHTTPServer 9000&lt;/code&gt; giving you link: &lt;code&gt;http://localhost:9000&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This approach is built in to any Python installation.&lt;/p&gt;\n\n&lt;h2&gt;Python 3&lt;/h2&gt;\n\n&lt;p&gt;Do the same steps, but use the following command instead &lt;code&gt;python3 -m http.server&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Node.js&lt;/h2&gt;\n\n&lt;p&gt;Alternatively, if you demand a more responsive setup and already use nodejs...&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Install &lt;code&gt;http-server&lt;/code&gt; by typing &lt;code&gt;npm install -g http-server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Change into your working directory, where your&lt;code&gt;some.html&lt;/code&gt; lives &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Start your http server by issuing &lt;code&gt;http-server -c-1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This spins up a Node.js httpd which serves the files in your directory as static files accessible from &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Ruby&lt;/h2&gt;\n\n&lt;p&gt;If your preferred language is Ruby ... the Ruby Gods say this works as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;ruby -run -e httpd . -p &lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;PHP&lt;/h2&gt;\n\n&lt;p&gt;Of course PHP also has its solution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;php -S &lt;span class=&quot;hljs-attr&quot;&gt;localhost&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Chrome you can use this flag:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;--allow-file-access-&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;-files\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/18586921/669677&quot;&gt;Read more here.&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Ran in to this today.&lt;/p&gt;\n\n&lt;p&gt;I wrote some code that looked like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;app.&lt;span class=&quot;hljs-title function_&quot;&gt;controller&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ctrlr&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;$scope, $http&lt;/span&gt;){\n    $http.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost:3000&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;success&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        $scope.&lt;span class=&quot;hljs-property&quot;&gt;stuff&lt;/span&gt; = data;\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...but it should&apos;ve looked like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;app.&lt;span class=&quot;hljs-title function_&quot;&gt;controller&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ctrlr&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;$scope, $http&lt;/span&gt;){\n    $http.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://localhost:3000&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;success&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n        $scope.&lt;span class=&quot;hljs-property&quot;&gt;stuff&lt;/span&gt; = data;\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only difference was the lack of &lt;code&gt;http://&lt;/code&gt; in the second snippet of code.&lt;/p&gt;\n\n&lt;p&gt;Just wanted to put that out there in case there are others with a similar issue.&lt;/p&gt;\n    ","\n&lt;p&gt;Just change the url to &lt;code&gt;http://localhost&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt;. If you open the html file from local, you should create a local server to serve that html file, the simplest way is using &lt;a href=&quot;https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=en&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Web Server for Chrome&lt;/code&gt;&lt;/a&gt;. That will fix the issue.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m going to list &lt;strong&gt;3 different approaches&lt;/strong&gt; to solve this issue:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Using a very lightweight &lt;code&gt;npm&lt;/code&gt; package&lt;/strong&gt;: Install &lt;a href=&quot;https://www.npmjs.com/package/live-server&quot; rel=&quot;noreferrer&quot;&gt;live-server&lt;/a&gt; using &lt;code&gt;npm install -g live-server&lt;/code&gt;. Then, go to that directory open the terminal and type &lt;code&gt;live-server&lt;/code&gt; and hit enter, page will be served at &lt;code&gt;localhost:8080&lt;/code&gt;. BONUS: It also supports hot reloading by default.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Using a lightweight Google Chrome &lt;a href=&quot;https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=en&quot; rel=&quot;noreferrer&quot;&gt;app&lt;/a&gt; developed by Google&lt;/strong&gt;: Install the app, then go to the apps tab in Chrome and open the app. In the app point it to the right folder. Your page will be served!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Modifying Chrome shortcut in windows&lt;/strong&gt;: Create a Chrome browser&apos;s shortcut. Right-click on the icon and open properties. In properties, edit &lt;code&gt;target&lt;/code&gt; to &lt;code&gt;&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; --disable-web-security --user-data-dir=&quot;C:/ChromeDevSession&quot;&lt;/code&gt; and save. Then using Chrome open the page using &lt;code&gt;ctrl+o&lt;/code&gt;. NOTE: Do &lt;strong&gt;NOT&lt;/strong&gt; use this shortcut for regular browsing.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use &lt;code&gt;http://&lt;/code&gt; like &lt;code&gt;http://localhost:8080&lt;/code&gt; in case you face error.&lt;/p&gt;\n    ","\n&lt;p&gt;In an Android app  for example, to allow JavaScript to have access to assets via &lt;code&gt;file:///android_asset/&lt;/code&gt;  use &lt;code&gt;setAllowFileAccessFromFileURLs(true)&lt;/code&gt; on the &lt;code&gt;WebSettings&lt;/code&gt; that you get from calling &lt;code&gt;getSettings()&lt;/code&gt; on the &lt;code&gt;WebView&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt; to create url &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;error&lt;/strong&gt;: &lt;code&gt;localhost:8080&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;solution&lt;/strong&gt;: &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;fastest way for me was:\nfor windows users run your file on Firefox problem solved, or\n if you want to use chrome easiest way for me was to install Python 3 then from command prompt run command &lt;code&gt;python -m http.server&lt;/code&gt;  then go to &lt;a href=&quot;http://localhost:8000/&quot; rel=&quot;noreferrer&quot;&gt;http://localhost:8000/&lt;/a&gt;  then navigate to your files&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;python -m http.&lt;span class=&quot;hljs-property&quot;&gt;server&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you use Mozilla Firefox, It will work as expected without any issues; &lt;/p&gt;\n\n&lt;p&gt;P.S. Surprisingly, IntenetExplorer_Edge works absolutely fine!!!&lt;/p&gt;\n    ","\n&lt;p&gt;For those on Windows without Python or Node.js, there is still a lightweight solution: &lt;strong&gt;&lt;a href=&quot;http://cesanta.com/mongoose.shtml&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mongoose&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;All you do is drag the executable to wherever the root of the server should be, and run it. An icon will appear in the taskbar and it&apos;ll navigate to the server in the default browser.&lt;/p&gt;\n&lt;p&gt;Also, &lt;a href=&quot;http://zwamp.sourceforge.net/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Z-WAMP&lt;/a&gt; is a 100% portable WAMP that runs in a single folder, it&apos;s awesome. That&apos;s an option if you need a quick PHP and MySQL server. Though it hasn&apos;t been updated since 2013. A modern alternative would be &lt;a href=&quot;https://laragon.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Laragon&lt;/a&gt; or &lt;a href=&quot;https://winnmp.wtriple.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;WinNMP&lt;/a&gt;. I haven&apos;t tested them, but they are portable and worth mentioning.&lt;/p&gt;\n&lt;p&gt;Also, if you only want the absolute basics (HTML+JS), here&apos;s a tiny PowerShell script that doesn&apos;t need anything to be installed or downloaded:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$Srv = &lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Net&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;HttpListener&lt;/span&gt;;\n$Srv.&lt;span class=&quot;hljs-property&quot;&gt;Prefixes&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/&quot;&lt;/span&gt;);\n$Srv.&lt;span class=&quot;hljs-title class_&quot;&gt;Start&lt;/span&gt;();\n&lt;span class=&quot;hljs-title class_&quot;&gt;Start&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://localhost:8080/index.html&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title class_&quot;&gt;While&lt;/span&gt;($Srv.&lt;span class=&quot;hljs-property&quot;&gt;IsListening&lt;/span&gt;) {\n    $Ctx = $Srv.&lt;span class=&quot;hljs-title class_&quot;&gt;GetContext&lt;/span&gt;();\n    $Buf = [&lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;IO&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;File&lt;/span&gt;]::&lt;span class=&quot;hljs-title class_&quot;&gt;OpenRead&lt;/span&gt;((&lt;span class=&quot;hljs-title class_&quot;&gt;Join&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt; $Pwd($Ctx.&lt;span class=&quot;hljs-property&quot;&gt;Request&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;RawUrl&lt;/span&gt;)));\n    $Ctx.&lt;span class=&quot;hljs-property&quot;&gt;Response&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;ContentLength64&lt;/span&gt; = $Buf.&lt;span class=&quot;hljs-property&quot;&gt;Length&lt;/span&gt;;\n    $Ctx.&lt;span class=&quot;hljs-property&quot;&gt;Response&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Headers&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html&quot;&lt;/span&gt;);\n    $Buf.&lt;span class=&quot;hljs-title class_&quot;&gt;CopyTo&lt;/span&gt;($Ctx.&lt;span class=&quot;hljs-property&quot;&gt;Response&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;OutputStream&lt;/span&gt;);\n    $Buf.&lt;span class=&quot;hljs-title class_&quot;&gt;Close&lt;/span&gt;();\n    $Ctx.&lt;span class=&quot;hljs-property&quot;&gt;Response&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Close&lt;/span&gt;();\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method is very barebones, it cannot show directories or other fancy stuff. But it handles these CORS errors just fine.&lt;/p&gt;\n&lt;p&gt;Save the script as &lt;code&gt;server.ps1&lt;/code&gt; and run in the root of your project. It will launch index.html in the directory it is placed in.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Easy solution for whom using VS Code&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve been getting this error for a while. Most of the answers works. But I found a different solution. If you don&apos;t want to deal with &lt;code&gt;node.js&lt;/code&gt; or any other solution in here and you are working with an HTML file (calling functions from another js file or fetch json api&apos;s) try to use &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot; rel=&quot;noreferrer&quot;&gt;Live Server&lt;/a&gt; extension. &lt;/p&gt;\n\n&lt;p&gt;It allows you to open a live server easily. And because of it creates &lt;code&gt;localhost&lt;/code&gt; server, the problem is resolving. You can simply start the &lt;code&gt;localhost&lt;/code&gt; by open a HTML file and right-click on the editor and click on &lt;code&gt;Open with Live Server&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;It basically load the files using &lt;code&gt;http://localhost/index.html&lt;/code&gt; instead of using &lt;code&gt;file://...&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is not necessary to have a &lt;code&gt;.html&lt;/code&gt; file. You can start the Live Server with shortcuts.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Hit &lt;code&gt;(alt+L, alt+O)&lt;/code&gt; to Open the Server and &lt;code&gt;(alt+L, alt+C)&lt;/code&gt; to Stop the server. [On MAC, &lt;code&gt;cmd+L, cmd+O&lt;/code&gt; and &lt;code&gt;cmd+L, cmd+C&lt;/code&gt;]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Hope it will help someone :) &lt;/p&gt;\n    ","\n&lt;p&gt;I suspect it&apos;s already mentioned in some of the answers, but I&apos;ll slightly modify this to have complete working answer (easier to find and use).&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Go to: &lt;a href=&quot;https://nodejs.org/en/download/&quot; rel=&quot;noreferrer&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt;. Install nodejs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Install http-server by running command from command prompt &lt;code&gt;npm install -g http-server&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Change into your working directory, where &lt;code&gt;index.html&lt;/code&gt;/&lt;code&gt;yoursome.html&lt;/code&gt; resides.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Start your http server by running command &lt;code&gt;http-server -c-1&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Open web browser to &lt;code&gt;http://localhost:8080&lt;/code&gt;\nor &lt;code&gt;http://localhost:8080/yoursome.html&lt;/code&gt;  - depending on your html filename.&lt;/p&gt;\n    ","\n&lt;p&gt;I was getting this exact error when loading an HTML file on the browser that was using a json file from the local directory. In my case, I was able to solve this by creating a simple node server that allowed to server static content. I left the code for this at this &lt;a href=&quot;https://stackoverflow.com/a/26845720/267835&quot;&gt;other answer&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It simply says that the application should be run on a web server. I had the same problem with chrome, I started tomcat and moved my application there, and it worked.&lt;/p&gt;\n    ","\n&lt;p&gt;I suggest you use a mini-server to run these kind of applications on localhost (if you are not using some inbuilt server).&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s one that is very simple to setup and run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;https&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//www.npmjs.com/package/tiny-server&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For all y&apos;all on &lt;code&gt;MacOS&lt;/code&gt;... setup a simple &lt;em&gt;LaunchAgent&lt;/em&gt; to enable these glamorous capabilities in your own copy of &lt;em&gt;Chrome&lt;/em&gt;...&lt;/p&gt;\n\n&lt;p&gt;Save a &lt;code&gt;plist&lt;/code&gt;, named &lt;em&gt;whatever&lt;/em&gt; (&lt;code&gt;launch.chrome.dev.mode.plist&lt;/code&gt;, for example) in &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; with similar content to...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;\n&amp;lt;!&lt;span class=&quot;hljs-variable constant_&quot;&gt;DOCTYPE&lt;/span&gt; plist &lt;span class=&quot;hljs-variable constant_&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//Apple//DTD PLIST 1.0//EN&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;plist&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;Label&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;launch.chrome.dev.mode&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;-allow-file-access-from-files&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;true&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;plist&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It &lt;em&gt;should&lt;/em&gt; launch at startup.. but you can force it to do so at any time with the terminal command&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;launchctl load -w ~/Library/LaunchAgents/launch.chrome.dev.mode.plist&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;TADA!&lt;/strong&gt;    &lt;/p&gt;\n    ","\n&lt;p&gt;Not possible to load static local files(eg:svg) without server. If you have NPM /YARN installed in your machine, you can setup simple http server using &quot;&lt;a href=&quot;https://www.npmjs.com/package/http-server&quot; rel=&quot;nofollow noreferrer&quot;&gt;http-server&lt;/a&gt;&quot;  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;npm install http-server -g\nhttp-server [path] [options]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Or open terminal in that project folder and type &quot;hs&quot;. It will automaticaly start HTTP live server.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;If you insist on running the &lt;code&gt;.html&lt;/code&gt; file locally and not serving it with a webserver, you can prevent those cross origin requests from happening in the first place by making the problematic resources available inline.&lt;/p&gt;\n\n&lt;p&gt;I had this problem when trying to to serve &lt;code&gt;.js&lt;/code&gt; files through &lt;code&gt;file://&lt;/code&gt;. My solution was to update my build script to replace &lt;code&gt;&amp;lt;script src=&quot;...&quot;&amp;gt;&lt;/code&gt; tags with &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;.\nHere&apos;s a &lt;code&gt;gulp&lt;/code&gt; approach for doing that:&lt;/p&gt;\n\n&lt;p&gt;1.\nrun &lt;code&gt;npm install --save-dev&lt;/code&gt; to packages &lt;code&gt;gulp&lt;/code&gt;, &lt;code&gt;gulp-inline&lt;/code&gt; and &lt;code&gt;del&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;2.\nAfter creating a &lt;code&gt;gulpfile.js&lt;/code&gt; to the root directory, add the following code (just change the file paths for whatever suits you):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; gulp = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;gulp&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; inline = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;gulp-inline&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; del = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;del&apos;&lt;/span&gt;);\n\ngulp.&lt;span class=&quot;hljs-title function_&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;inline&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;done&lt;/span&gt;) {\n    gulp.&lt;span class=&quot;hljs-title function_&quot;&gt;src&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dist/index.html&apos;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;pipe&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;inline&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;base&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;dist/&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;disabledTypes&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;css, svg, img&apos;&lt;/span&gt;\n    }))\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&quot;hljs-title function_&quot;&gt;dest&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dist/&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;finish&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;()\n    }));\n});\n\ngulp.&lt;span class=&quot;hljs-title function_&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;clean&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;done&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;del&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;dist/*.js&apos;&lt;/span&gt;])\n    &lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;()\n});\n\ngulp.&lt;span class=&quot;hljs-title function_&quot;&gt;task&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;bundle-for-local&apos;&lt;/span&gt;, gulp.&lt;span class=&quot;hljs-title function_&quot;&gt;series&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;inline&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;clean&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Either run &lt;code&gt;gulp bundle-for-local&lt;/code&gt; or update your build script to run it automatically.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can see the detailed problem and solution for my case &lt;a href=&quot;https://stackoverflow.com/a/61595788/3367818&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;er. I just found some official words &quot;Attempting to load unbuilt, remote AMD modules that use the dojo/text plugin will fail due to cross-origin security restrictions. (Built versions of AMD modules are unaffected because the calls to dojo/text are eliminated by the build system.)&quot; &lt;a href=&quot;https://dojotoolkit.org/documentation/tutorials/1.10/cdn/&quot; rel=&quot;nofollow&quot;&gt;https://dojotoolkit.org/documentation/tutorials/1.10/cdn/&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;One way it worked loading local files is using them with in the project folder instead of outside your project folder. Create one folder under your project example files similar to the way we create for images and replace the section where using complete local path other than project path and use relative url of file under project folder .\nIt worked for me &lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;Install local webserver for java e.g Tomcat,for php you can use lamp etc&lt;/li&gt;\n&lt;li&gt;Drop the json file in the public accessible app server directory&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ahzTi.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ahzTi.png&quot; alt=&quot;List item&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Start the app server,and you should be able to access the file from localhost&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;For Linux Python users:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; webbrowser\nbrowser = webbrowser.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;google-chrome --allow-file-access-from-files %s&apos;&lt;/span&gt;)\nbrowser.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(url)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are searching for a solution for Firebase Hosting, you can run the&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;firebase serve --only hosting&lt;/code&gt; command from the &lt;a href=&quot;https://firebase.google.com/docs/cli#install-cli-windows&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firebase CLI&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;That&apos;s what I came here for, so I thought I&apos;d just leave it here to help like ones.&lt;/p&gt;\n    ","\n&lt;p&gt;Many problem for this, with my problem is missing &apos;/&apos; example:\njquery-1.10.2.js:8720 XMLHttpRequest cannot load &lt;a href=&quot;http://localhost:xxxProduct/getList_tagLabels/&quot; rel=&quot;nofollow&quot;&gt;http://localhost:xxxProduct/getList_tagLabels/&lt;/a&gt;\nIt&apos;s must be: &lt;a href=&quot;http://localhost:xxx/Product/getList_tagLabels/&quot; rel=&quot;nofollow&quot;&gt;http://localhost:xxx/Product/getList_tagLabels/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope this help for who meet this problem.&lt;/p&gt;\n    ","\n&lt;p&gt;I have also been able to recreate this error message when using an anchor tag with the following href: &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;javascript:&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Example a tag&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;In my case an a tag was being used to get the &apos;Pointer Cursor&apos; and the event was actually controlled by some jQuery on click event. I removed the href and added a class that applies:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;:pointer;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;cordova achieve this. I still can not figure out how cordova did. It does not even go through  shouldInterceptRequest.&lt;/p&gt;\n\n&lt;p&gt;Later I found out that the key to load any file from local is: myWebView.getSettings().setAllowUniversalAccessFromFileURLs(true);&lt;/p&gt;\n\n&lt;p&gt;And when you want to access any http resource, the webview will do checking with OPTIONS method, which you can grant the access through WebViewClient.shouldInterceptRequest by return a response, and for the following GET/POST method, you can just return null.&lt;/p&gt;\n    ","\n&lt;p&gt;Experienced this when I downloaded a page for offline view. &lt;/p&gt;\n\n&lt;p&gt;I just had to remove the &lt;code&gt;integrity=&quot;*****&quot;&lt;/code&gt; and &lt;code&gt;crossorigin=&quot;anonymous&quot;&lt;/code&gt; attributes from all &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&lt;/p&gt;\n    ","\n&lt;p&gt;If your using VS code just trying loading a live server in there. fixed my problem immediately.&lt;/p&gt;\n    "],"425":["\n&lt;p&gt;&lt;strong&gt;Can someone explain SQL injecton?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;SQL injection happens when you interpolate some content into a SQL query string, and the result modifies the syntax of your query in ways you didn&apos;t intend.&lt;/p&gt;\n\n&lt;p&gt;It doesn&apos;t have to be malicious, it can be an accident.  But accidental SQL injection is more likely to result in an error than in a vulnerability.&lt;/p&gt;\n\n&lt;p&gt;The harmful content doesn&apos;t have to come from a user, it could be content that your application gets from any source, or even generates itself in code.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;How does it cause vulnerabilities?&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;It can lead to vulnerabilities because attackers can send values to an application that they know will be interpolated into a SQL string.  By being very clever, they can manipulate the result of queries, reading data or even changing data that they shouldn&apos;t be allowed to do.&lt;/p&gt;\n\n&lt;p&gt;Example in PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$password &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;];\n$id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;];\n$&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;UPDATE Accounts SET PASSWORD = &apos;$password&apos; WHERE account_id = $id&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now suppose the attacker sets the POST request parameters to &quot;&lt;code&gt;password=xyzzy&lt;/code&gt;&quot; and &quot;&lt;code&gt;id=account_id&lt;/code&gt;&quot; resulting in the following SQL:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;UPDATE&lt;/span&gt; Accounts &lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; PASSWORD &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xyzzy&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; account_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; account_id\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although I expected &lt;code&gt;$id&lt;/code&gt; to be an integer, the attacker chose a string that is the name of the column.  Of course now the condition is true on &lt;em&gt;every&lt;/em&gt; row, so the attacker has just set the password for &lt;em&gt;every&lt;/em&gt; account.  Now the attacker can log in to anyone&apos;s account -- including privileged users.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Where exactly is the point where SQL is injected?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It isn&apos;t SQL that&apos;s injected, it&apos;s content that&apos;s interpolated (&quot;injected&quot;) into a SQL string, resulting in a different kind of query than I intended.  I trusted the dynamic content without verifying it, and executed the resulting SQL query blindly.  That&apos;s where the trouble starts.&lt;/p&gt;\n\n&lt;p&gt;SQL injection is a fault in the application code, not typically in the database or in the database access library or framework.  &lt;/p&gt;\n\n&lt;p&gt;Most cases of SQL injection can be avoided by using query parameters. See &lt;a href=&quot;https://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php&quot;&gt;How can I prevent SQL injection in PHP?&lt;/a&gt; for examples.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL Injection occurs when the user of an application is able to affect the meaning of database query.  This often occurs when arbitary strings from user input are concatenated to create SQL which is fed to the database.  For example lets say we had the following code (in PHP, but the same holds true for any language), which might be used to handle a user login.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;SELECT  FROM users WHERE username=&apos;&quot;.$_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;username&apos;&lt;/span&gt;].&quot;&apos; AND password=&apos;&quot;.$_GET[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;].&quot;&apos;&quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The harm is done when the user enters something like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;administrator&lt;span class=&quot;hljs-string&quot;&gt;&apos;; --\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... for the username.  Without proper encoding the query becomes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; username&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;administrator&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;-- AND password=&apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The issue here is that the &apos; in the username closes out the username field then the -- starts a SQL comment causing the database server to ignore the rest of the string.  The net result is the user can now log in as the administrator without having to know the password.  SQL Inection can also be used to execute UPDATE, DELETE or DROP queries and really damage the database.&lt;/p&gt;\n\n&lt;p&gt;SQL Injection can be prevented by using parameterised queries, or applying your language/toolkit&apos;s escaping functions (such as mysql_real_escape_string() in PHP).&lt;/p&gt;\n\n&lt;p&gt;Once you understand SQL Injection you&apos;ll get the joke behind &lt;a href=&quot;http://xkcd.com/327/&quot; rel=&quot;noreferrer&quot;&gt;this cartoon&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL injection is when things that&apos;re supposed to be data are treated as SQL code unwillingly.&lt;/p&gt;\n\n&lt;p&gt;For instance, if you were to do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql_query(&quot;SELECT * FROM posts WHERE postid=$postid&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Normally it&apos;d get you the post with a given id, but assume that &lt;code&gt;$postid&lt;/code&gt; is set to the string &lt;code&gt;10; DROP TABLE posts --&lt;/code&gt;; all of a sudden, the actual query you&apos;re sending is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysql_query(&quot;SELECT * FROM posts WHERE postid=10; DROP TABLE posts --&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is quite a problem, as you&apos;d be losing your entire posts table due to a malicious user - oh dear.&lt;/p&gt;\n\n&lt;p&gt;The easiest way to prevent this is to use prepared statements, for instance through &lt;a href=&quot;http://dk2.php.net/manual/en/pdo.prepare.php&quot; rel=&quot;noreferrer&quot;&gt;PDO&lt;/a&gt; or &lt;a href=&quot;http://dk2.php.net/manual/en/mysqli.prepare.php&quot; rel=&quot;noreferrer&quot;&gt;MySQLi&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The equivalent example in PDO would then be &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;$statement &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; $db&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM posts WHERE postid = :postid&apos;&lt;/span&gt;);\n$statement&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;bindValue(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:postid&apos;&lt;/span&gt;, $postid);\n$statement&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Doing this ensures that the database system knows that $postid is to be treated as data and not code, and will thus be handled appropriately.&lt;/p&gt;\n    ","\n&lt;p&gt;This question has been answered many times on StackOverflow, but it&apos;s an important topic for everyone to know about, so I&apos;m not going to vote to close this question.&lt;/p&gt;\n\n&lt;p&gt;Here are links to some of my past answers on this topic:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/601300/what-is-sql-injection/601524#601524&quot;&gt;What is SQL Injection?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1862036/how-do-i-protect-this-function-from-sql-injection/1862178#1862178&quot;&gt;How do I protect this function from SQL injection?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/306668/are-parameters-really-enough-to-prevent-sql-injections/306818#306818&quot;&gt;Are Parameters really enough to prevent Sql injections?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1683843/is-sql-injection-a-risk-today/1684292#1684292&quot;&gt;Is SQL injection a risk today?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I also gave a presentation at the MySQL Conference this month, and my slides are online:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies&quot; rel=&quot;noreferrer&quot;&gt;SQL Injection Myths &amp;amp; Fallacies&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;SQL injection is where a malicious user will put SQL into input fields to try and run the SQL on your server.&lt;/p&gt;\n\n&lt;p&gt;The #1 advice that I adhere to is to use parameterized stored procedures rather than building raw SQL in code.&lt;/p&gt;\n\n&lt;p&gt;Stored Procedure parameters don&apos;t get executed, making them safe in most cases.&lt;/p&gt;\n    ","\n&lt;p&gt;I found this paper to be an extremely good read about SQL injection techniques (link is to PDF): &lt;a href=&quot;http://www.cgisecurity.com/lib/advanced_sql_injection.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;Advanced SQL Injection In SQL Server Applications&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Despite the title saying &quot;Advanced&quot;, it&apos;s quite readable even if you don&apos;t have much knowledge about SQL injection.&lt;/p&gt;\n    ","\n&lt;p&gt;To get some general background check out the &lt;a href=&quot;http://en.wikipedia.org/wiki/SQL_Injection&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia article on SQL Injection&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In short SQL injection attacks can leave you vulnerable to all manor of database data theft and destruction.  The exact details of what can be done to your system depend on the details of the system itself.&lt;/p&gt;\n\n&lt;p&gt;Any time you pass input from your users to your database you have a potential injection point.  Web applications are often lacking in the this regard, as new programmers often do not understand the risks of handling input from users, and web applications are attacked by very smart people you never thought would find your program.&lt;/p&gt;\n    ","\n&lt;p&gt;You will like &lt;a href=&quot;http://www.codeproject.com/KB/database/SqlInjectionAttacks.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;this&lt;/a&gt; article from code project ; )&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Encrypt sensitive data.&lt;/li&gt;\n  &lt;li&gt;Access the database using an account with the least privileges\n  necessary.&lt;/li&gt;\n  &lt;li&gt;Install the database using an account with the least privileges\n  necessary.&lt;/li&gt;\n  &lt;li&gt;Ensure that data is valid.&lt;/li&gt;\n  &lt;li&gt;Do a code review to check for the possibility of second-order\n  attacks.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Use parameterised queries.&lt;/strong&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Use stored procedures.&lt;/strong&gt;&lt;/li&gt;\n  &lt;li&gt;Re-validate data in stored procedures.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Ensure that error messages give nothing away about the internal\n  architecture of the application or the\n  database.&lt;/strong&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The point where SQL is injected is any point that your application accepts input from the user.&lt;/p&gt;\n\n&lt;p&gt;Whether this becomes a dangerous vulnerability for your web application depends on whether this input is later used as part of an SQL query without properly checking its type and escaping it if necessary.&lt;/p&gt;\n\n&lt;p&gt;Without proper escaping, some SQL code &apos;injected&apos; by the user could be executed by the SQL engine as SQL code, rather than a simple string or value.&lt;/p&gt;\n    "]},"page":"38","randomQuestions":[{"title":"Tkinter: AttributeError: NoneType object has no attribute <attribute name>","slug":"tkinter:-attributeerror:-nonetype-object-has-no-attribute-lessattribute-namegreater-1657385472410"},{"title":"Dynamically access object property using variable","slug":"dynamically-access-object-property-using-variable-1657384439324"},{"title":"String.equals versus == [duplicate]","slug":"string.equals-versus-duplicate-1657387599972"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"Importing files from different folder","slug":"importing-files-from-different-folder-1657388203798"},{"title":"How can I change an element's class with JavaScript?","slug":"how-can-i-change-an-element's-class-with-javascript-1657387694695"},{"title":"Why is \"using namespace std;\" considered bad practice?","slug":"why-is-\"using-namespace-std\"-considered-bad-practice-1657384296377"},{"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"What does ** (double star/asterisk) and * (star/asterisk) do for parameters?","slug":"what-does-**-(double-starasterisk)-and-*-(starasterisk)-do-for-parameters-1657384800967"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"Prototypical inheritance - writing up [duplicate]","slug":"prototypical-inheritance-writing-up-duplicate-1657385478064"},{"title":"What is a NullPointerException, and how do I fix it?","slug":"what-is-a-nullpointerexception-and-how-do-i-fix-it-1657384201768"},{"title":"Crash or \"segmentation fault\" when data is copied/scanned/read to an uninitialized pointer","slug":"crash-or-\"segmentation-fault\"-when-data-is-copiedscannedread-to-an-uninitialized-pointer-1657387520581"},{"title":"What to do Regular expression pattern doesn't match anywhere in string?","slug":"what-to-do-regular-expression-pattern-doesn't-match-anywhere-in-string-1657388095896"},{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"},{"title":"What is the difference between \"px\", \"dip\", \"dp\" and \"sp\"?","slug":"what-is-the-difference-between-\"px\"-\"dip\"-\"dp\"-and-\"sp\"-1657388093250"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803"}]},"__N_SSG":true}