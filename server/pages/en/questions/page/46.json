{"pageProps":{"data":{"count":610,"rows":[{"id":385,"title":"Loop through an array in JavaScript","slug":"loop-through-an-array-in-javascript-1657387821551","postType":"QUESTION","createdAt":"2022-07-09T17:30:21.000Z","updatedAt":"2022-07-09T17:30:21.000Z","tags":[]},{"id":384,"title":"How do you get the footer to stay at the bottom of a Web page?","slug":"how-do-you-get-the-footer-to-stay-at-the-bottom-of-a-web-page-1657387817544","postType":"QUESTION","createdAt":"2022-07-09T17:30:17.000Z","updatedAt":"2022-07-09T17:30:17.000Z","tags":[{"id":2090,"name":"footer","slug":"footer","createdAt":"2022-07-09T17:30:17.000Z","updatedAt":"2022-07-09T17:30:17.000Z","Questions_Tags":{"questionId":384,"tagId":2090}},{"id":2091,"name":"sticky-footer","slug":"sticky-footer","createdAt":"2022-07-09T17:30:17.000Z","updatedAt":"2022-07-09T17:30:17.000Z","Questions_Tags":{"questionId":384,"tagId":2091}}]},{"id":383,"title":"How to print without a newline or space","slug":"how-to-print-without-a-newline-or-space-1657387814213","postType":"QUESTION","createdAt":"2022-07-09T17:30:14.000Z","updatedAt":"2022-07-09T17:30:14.000Z","tags":[]},{"id":382,"title":"What are metaclasses in Python?","slug":"what-are-metaclasses-in-python-1657387811608","postType":"QUESTION","createdAt":"2022-07-09T17:30:11.000Z","updatedAt":"2022-07-09T17:30:11.000Z","tags":[{"id":2084,"name":"metaclass","slug":"metaclass","createdAt":"2022-07-09T17:30:11.000Z","updatedAt":"2022-07-09T17:30:11.000Z","Questions_Tags":{"questionId":382,"tagId":2084}},{"id":2085,"name":"python-class","slug":"python-class","createdAt":"2022-07-09T17:30:11.000Z","updatedAt":"2022-07-09T17:30:11.000Z","Questions_Tags":{"questionId":382,"tagId":2085}},{"id":2086,"name":"python-datamodel","slug":"python-datamodel","createdAt":"2022-07-09T17:30:11.000Z","updatedAt":"2022-07-09T17:30:11.000Z","Questions_Tags":{"questionId":382,"tagId":2086}}]},{"id":381,"title":"How to use PHP's password_hash to hash and verify passwords","slug":"how-to-use-php's-password_hash-to-hash-and-verify-passwords-1657387808784","postType":"QUESTION","createdAt":"2022-07-09T17:30:08.000Z","updatedAt":"2022-07-09T17:30:08.000Z","tags":[{"id":2079,"name":"salt","slug":"salt","createdAt":"2022-07-09T17:30:08.000Z","updatedAt":"2022-07-09T17:30:08.000Z","Questions_Tags":{"questionId":381,"tagId":2079}},{"id":2080,"name":"password-hash","slug":"password-hash","createdAt":"2022-07-09T17:30:08.000Z","updatedAt":"2022-07-09T17:30:08.000Z","Questions_Tags":{"questionId":381,"tagId":2080}},{"id":2081,"name":"php-password-hash","slug":"php-password-hash","createdAt":"2022-07-09T17:30:08.000Z","updatedAt":"2022-07-09T17:30:08.000Z","Questions_Tags":{"questionId":381,"tagId":2081}}]}]},"answers":{"381":["\n&lt;p&gt;Using &lt;code&gt;password_hash&lt;/code&gt; is the recommended way to store passwords. Don&apos;t separate them to DB and files.&lt;/p&gt;\n&lt;p&gt;Let&apos;s say we have the following input:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You first hash the password by doing this:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$hashed_password&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, PASSWORD_DEFAULT);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then see the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hashed_password&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see it&apos;s hashed. (I assume you did those steps).&lt;/p&gt;\n&lt;p&gt;Now you store this hashed password in your database, &lt;strong&gt;ensuring your password column is large enough to hold the hashed value (at least 60 characters or longer)&lt;/strong&gt;. When a user asks to log them in, you check the password input with this hash value in the database, by doing this:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Query the database for username and password&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hashed_password&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If the password inputs matched the hashed password in the database&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something, you know... log them in.&lt;/span&gt;\n} \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Else, Redirect them back to the login page.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/function.password-hash.php&quot; rel=&quot;noreferrer&quot;&gt;Official Reference&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Yes you understood it correctly, the function password_hash() will generate a salt on its own, and includes it in the resulting hash-value. Storing the salt in the database is absolutely correct, it does its job even if known.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Hash a new password for storing in the database.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The function automatically generates a cryptographically safe salt.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$hashToStoreInDb&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;], PASSWORD_DEFAULT);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Check if the hash of the entered login password, matches the stored hash.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// The salt and the cost factor will be extracted from $existingHashFromDb.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$isPasswordCorrect&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$existingHashFromDb&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second salt you mentioned (the one stored in a file), is actually a pepper or a server side key. If you add it before hashing (like the salt), then you add a pepper. There is a better way though, you could first calculate the hash, and afterwards encrypt (two-way) the hash with a server-side key. This gives you the possibility to change the key when necessary.&lt;/p&gt;\n\n&lt;p&gt;In contrast to the salt, this key should be kept secret. People often mix it up and try to hide the salt, but it is better to let the salt do its job and add the secret with a key.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, it&apos;s true. Why do you doubt the php faq on the function? :)&lt;/p&gt;\n\n&lt;p&gt;The result of running &lt;code&gt;password_hash()&lt;/code&gt; has has four parts:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;the algorithm used&lt;/li&gt;\n&lt;li&gt;parameters&lt;/li&gt;\n&lt;li&gt;salt&lt;/li&gt;\n&lt;li&gt;actual password hash&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;So as you can see, the hash is a part of it.&lt;/p&gt;\n\n&lt;p&gt;Sure, you could have an additional salt for an added layer of security, but I honestly think that&apos;s overkill in a regular php application. The default bcrypt algorithm is good, and the optional blowfish one is arguably even better.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a distinct lack of discussion on backwards and forwards compatibility that is built in to PHP&apos;s password functions. Notably:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Backwards Compatibility:&lt;/strong&gt; The password functions are essentially a well-written wrapper around &lt;a href=&quot;http://php.net/manual/en/function.crypt.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;crypt()&lt;/code&gt;&lt;/a&gt;, and are inherently backwards-compatible with &lt;code&gt;crypt()&lt;/code&gt;-format hashes, even if they use obsolete and/or insecure hash algorithms.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Forwards Compatibilty:&lt;/strong&gt; Inserting &lt;a href=&quot;http://php.net/manual/en/function.password-needs-rehash.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;password_needs_rehash()&lt;/code&gt;&lt;/a&gt; and a bit of logic into your authentication workflow can keep you your hashes up to date with current and future algorithms with potentially zero future changes to the workflow. Note: Any string that does not match the specified algorithm will be flagged for needing a rehash, including non-crypt-compatible hashes.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Eg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FakeDB&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__call&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s::%s(%s)\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__CLASS__&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$args&lt;/span&gt;));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyAuth&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$fakeUsers&lt;/span&gt; = [\n        &lt;span class=&quot;hljs-comment&quot;&gt;// old crypt-md5 format&lt;/span&gt;\n        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$1$AVbfJOzY$oIHHCHlD76Aw1xmjfTpm5.&apos;&lt;/span&gt;],\n        &lt;span class=&quot;hljs-comment&quot;&gt;// old salted md5 format&lt;/span&gt;\n        &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;3858f62230ac3c915f300c664312c63f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;],\n        &lt;span class=&quot;hljs-comment&quot;&gt;// current bcrypt format&lt;/span&gt;\n        &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$2y$10$3eUn9Rnf04DR.aj8R3WbHuBO9EdoceH9uKf6vMiD7tz766rMNOyTO&apos;&lt;/span&gt;]\n    ];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;dbh = &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getuser&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;// just pretend these are coming from the DB&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;fakeUsers[&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;authUser&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$userInfo&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getUser&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do you have old, turbo-legacy, non-crypt hashes?&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strpos&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$userInfo&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt; ) !== &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s::legacy_hash\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__METHOD__&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$userInfo&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;] === &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;md5&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$userInfo&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt;]);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s::password_verify\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__METHOD__&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$userInfo&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;]);\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// once we&apos;ve passed validation we can check if the hash needs updating.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_needs_rehash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$userInfo&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;], PASSWORD_DEFAULT) ) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s::rehash\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__METHOD__&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;dbh-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;UPDATE users SET pass = ? WHERE user_id = ?&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;([&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, PASSWORD_DEFAULT), &lt;span class=&quot;hljs-variable&quot;&gt;$id&lt;/span&gt;]);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$auth&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyAuth&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;FakeDB&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;&amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++) {\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$auth&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;authuser&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; PHP_EOL;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;MyAuth&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;authUser&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;password_verify&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyAuth&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;authUser&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;rehash&lt;/span&gt;\nFakeDB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE users SET pass = ? WHERE user_id = ?&quot;&lt;/span&gt;])\nFakeDB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;([[&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$2y&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;$10&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;$zNjPwqQX&lt;/span&gt;\\/RxjHiwkeUEzwOpkucNw49yN4jjiRY70viZpAx5x69kv.&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]])\n&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyAuth&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;authUser&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;legacy_hash&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyAuth&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;authUser&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;rehash&lt;/span&gt;\nFakeDB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE users SET pass = ? WHERE user_id = ?&quot;&lt;/span&gt;])\nFakeDB::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;([[&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$2y&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;$10&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;$VRTu4pgIkGUvilTDRTXYeOQSEYqe2GjsPoWvDUeYdV2x&lt;/span&gt;\\/\\/StjZYHu&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]])\n&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyAuth&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;authUser&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;password_verify&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As a final note, given that you can only re-hash a user&apos;s password on login you should consider &quot;sunsetting&quot; insecure legacy hashes to protect your users. By this I mean that after a certain grace period you remove all insecure [eg: bare MD5/SHA/otherwise weak] hashes and have your users rely on your application&apos;s password reset mechanisms.&lt;/p&gt;\n    ","\n&lt;p&gt;Class Password full code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;Class Password {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{}\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Hash the password using the specified algorithm\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $password The password to hash\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; int    $algo     The algorithm to use (Defined by PASSWORD_* constants)\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; array  $options  The options for the algorithm to use\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; string|false The hashed password, or false on error.\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;function_exists&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;crypt&apos;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Crypt must be loaded for password_hash to function&quot;&lt;/span&gt;, E_USER_WARNING);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password_hash(): Password must be a string&quot;&lt;/span&gt;, E_USER_WARNING);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_int&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password_hash() expects parameter 2 to be long, &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;gettype&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&quot; given&quot;&lt;/span&gt;, E_USER_WARNING);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; PASSWORD_BCRYPT :\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Note that this is a C constant, but not exposed to PHP, so we don&apos;t define it here.&lt;/span&gt;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt;])) {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt;];\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) {\n                        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password_hash(): Invalid bcrypt cost parameter specified: %d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt;), E_USER_WARNING);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                    }\n                }\n                &lt;span class=&quot;hljs-comment&quot;&gt;// The length of salt to generate&lt;/span&gt;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$raw_salt_len&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// The length required in the final serialization&lt;/span&gt;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$required_salt_len&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$hash_format&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$2y&lt;/span&gt;$%02d$&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; :\n                &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password_hash(): Unknown password hashing algorithm: %s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;), E_USER_WARNING);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt;])) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;gettype&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt;])) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;NULL&apos;&lt;/span&gt; :\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt; :\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;integer&apos;&lt;/span&gt; :\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;double&apos;&lt;/span&gt; :\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt; :\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt;];\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; :\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;method_exists&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;__tostring&apos;&lt;/span&gt;)) {\n                        &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt;];\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;array&apos;&lt;/span&gt; :\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;resource&apos;&lt;/span&gt; :\n                &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt; :\n                    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;password_hash(): Non-string salt parameter supplied&apos;&lt;/span&gt;, E_USER_WARNING);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;) &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$required_salt_len&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;password_hash(): Provided salt is too short: %d expecting %d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$required_salt_len&lt;/span&gt;), E_USER_WARNING);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; == &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;preg_match&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#^[a-zA-Z0-9./]+$#D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;)) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;base64_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;));\n            }\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;str_replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;base64_encode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;generate_entropy&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$required_salt_len&lt;/span&gt;)));\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$required_salt_len&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$hash_format&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$salt&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;crypt&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;) || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;;\n    }\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Generates Entropy using the safest available method, falling back to less preferred methods depending on support\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; int $bytes\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; string Returns raw bytes\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;generate_entropy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;function_exists&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mcrypt_create_iv&apos;&lt;/span&gt;) &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;defined&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;PHALANGER&apos;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mcrypt_create_iv&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;, MCRYPT_DEV_URANDOM);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;function_exists&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;openssl_random_pseudo_bytes&apos;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;openssl_random_pseudo_bytes&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_readable&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/dev/urandom&apos;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$f&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fopen&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/dev/urandom&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$read&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$read&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt; .= &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fread&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$f&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$read&lt;/span&gt;);\n                &lt;span class=&quot;hljs-variable&quot;&gt;$read&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;);\n            }\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fclose&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$f&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$read&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$buffer_valid&lt;/span&gt; || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;) &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$bl&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$bytes&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$bl&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] ^ &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mt_rand&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;));\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt; .= &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mt_rand&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;));\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$buffer&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Get information about the password hash. Returns an array of the information\n     * that was used to generate the password hash.\n     *\n     * array(\n     *    &apos;algo&apos; =&amp;gt; 1,\n     *    &apos;algoName&apos; =&amp;gt; &apos;bcrypt&apos;,\n     *    &apos;options&apos; =&amp;gt; array(\n     *        &apos;cost&apos; =&amp;gt; 10,\n     *    ),\n     * )\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $hash The password hash to extract info from\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; array The array of information about the hash.\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;password_get_info&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;algo&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;algoName&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;unknown&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;options&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(), );\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;$2y$&apos;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;algo&apos;&lt;/span&gt;] = PASSWORD_BCRYPT;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;algoName&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bcrypt&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt;) = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sscanf&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$2y&lt;/span&gt;$%d$&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;options&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Determine if the password hash needs to be rehashed according to the options provided\n     *\n     * If the answer is true, after validating the password using password_verify, rehash it.\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $hash    The hash to test\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; int    $algo    The algorithm used for new password hashes\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; array  $options The options array passed to password_hash\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; boolean True if the password needs to be rehashed.\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;password_needs_rehash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$info&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_get_info&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$info&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;algo&apos;&lt;/span&gt;] != &lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$algo&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; PASSWORD_BCRYPT :\n                &lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt;] : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$cost&lt;/span&gt; != &lt;span class=&quot;hljs-variable&quot;&gt;$info&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;options&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt;]) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * Verify a password against a hash using a timing attack resistant approach\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $password The password to verify\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; string $hash     The hash to verify against\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; boolean If the password matches the hash\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;function_exists&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;crypt&apos;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trigger_error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Crypt must be loaded for password_verify to function&quot;&lt;/span&gt;, E_USER_WARNING);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;crypt&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_string&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;) || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;) != &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;) || &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$status&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;); &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$status&lt;/span&gt; |= (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]) ^ &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]));\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Ive built a function I use all the time for password validation and to create passwords, e.g. to store them in a MySQL database. It uses a randomly generated salt which is way more secure than using a static salt.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;secure_password&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$user_pwd&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$multi&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n    secure_password ( string $user_pwd, boolean/string $multi ) \n\n    *** Description: \n        This function verifies a password against a (database-) stored password&apos;s hash or\n        returns $hash for a given password if $multi is set to either true or false\n\n    *** Examples:\n        // To check a password against its hash\n        if(secure_password($user_password, $row[&apos;user_password&apos;])) {\n            login_function();\n        } \n        // To create a password-hash\n        $my_password = &apos;uber_sEcUrE_pass&apos;;\n        $hash = secure_password($my_password, true);\n        echo $hash;\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Set options for encryption and build unique random hash&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$crypt_options&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cost&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;salt&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mcrypt_create_iv&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, MCRYPT_DEV_URANDOM)];\n&lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_hash&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$user_pwd&lt;/span&gt;, PASSWORD_BCRYPT, &lt;span class=&quot;hljs-variable&quot;&gt;$crypt_options&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// If $multi is not boolean check password and return validation state true/false&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$multi&lt;/span&gt;!==&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$multi&lt;/span&gt;!==&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;password_verify&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$user_pwd&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$table_pwd&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$multi&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// valid password&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// invalid password&lt;/span&gt;\n    }\n&lt;span class=&quot;hljs-comment&quot;&gt;// If $multi is boolean return $hash&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$hash&lt;/span&gt;;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"382":["\n&lt;h1&gt;Classes as objects&lt;/h1&gt;\n&lt;p&gt;Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.&lt;/p&gt;\n&lt;p&gt;In most languages, classes are just pieces of code that describe how to produce an object. That&apos;s kinda true in Python too:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ObjectCreator&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n...\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;my_object = ObjectCreator()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_object)\n&amp;lt;__main__.ObjectCreator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8974f2c&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But classes are more than that in Python. Classes are objects too.&lt;/p&gt;\n&lt;p&gt;Yes, objects.&lt;/p&gt;\n&lt;p&gt;As soon as you use the keyword &lt;code&gt;class&lt;/code&gt;, Python executes it and creates\nan &lt;strong&gt;object&lt;/strong&gt;. The instruction&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ObjectCreator&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;creates in memory an object with the name &lt;code&gt;ObjectCreator&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;This object (the class) is itself capable of creating objects (the instances),\nand this is why it&apos;s a class&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;But still, it&apos;s an object, and therefore:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;you can assign it to a variable&lt;/li&gt;\n&lt;li&gt;you can copy it&lt;/li&gt;\n&lt;li&gt;you can add attributes to it&lt;/li&gt;\n&lt;li&gt;you can pass it as a function parameter&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ObjectCreator) &lt;span class=&quot;hljs-comment&quot;&gt;# you can print a class because it&apos;s an object&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.ObjectCreator&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;echo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;o&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(o)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;echo(ObjectCreator) &lt;span class=&quot;hljs-comment&quot;&gt;# you can pass a class as a parameter&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.ObjectCreator&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(ObjectCreator, &lt;span class=&quot;hljs-string&quot;&gt;&apos;new_attribute&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ObjectCreator.new_attribute = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# you can add attributes to a class&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(ObjectCreator, &lt;span class=&quot;hljs-string&quot;&gt;&apos;new_attribute&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ObjectCreator.new_attribute)\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ObjectCreatorMirror = ObjectCreator &lt;span class=&quot;hljs-comment&quot;&gt;# you can assign a class to a variable&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ObjectCreatorMirror.new_attribute)\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ObjectCreatorMirror())\n&amp;lt;__main__.ObjectCreator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8997b4c&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Creating classes dynamically&lt;/h1&gt;\n&lt;p&gt;Since classes are objects, you can create them on the fly, like any object.&lt;/p&gt;\n&lt;p&gt;First, you can create a class in a function using &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;choose_class&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Foo &lt;span class=&quot;hljs-comment&quot;&gt;# return the class, not an instance&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Bar\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MyClass = choose_class(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(MyClass) &lt;span class=&quot;hljs-comment&quot;&gt;# the function returns a class, not an instance&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Foo&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(MyClass()) &lt;span class=&quot;hljs-comment&quot;&gt;# you can create an object from this class&lt;/span&gt;\n&amp;lt;__main__.Foo &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x89c6d4c&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But it&apos;s not so dynamic, since you still have to write the whole class yourself.&lt;/p&gt;\n&lt;p&gt;Since classes are objects, they must be generated by something.&lt;/p&gt;\n&lt;p&gt;When you use the &lt;code&gt;class&lt;/code&gt; keyword, Python creates this object automatically. But as\nwith most things in Python, it gives you a way to do it manually.&lt;/p&gt;\n&lt;p&gt;Remember the function &lt;code&gt;type&lt;/code&gt;? The good old function that lets you know what\ntype an object is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;))\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(ObjectCreator))\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(ObjectCreator()))\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.ObjectCreator&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Well, &lt;a href=&quot;http://docs.python.org/2/library/functions.html#type&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; has a completely different ability, it can also create classes on the fly. &lt;code&gt;type&lt;/code&gt; can take the description of a class as parameters,\nand return a class.&lt;/p&gt;\n&lt;p&gt;(I  know, it&apos;s silly that the same function can have two completely different uses according to the parameters you pass to it. It&apos;s an issue due to backward\ncompatibility in Python)&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; works this way:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(name, bases, attrs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;: name of the class&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;bases&lt;/code&gt;&lt;/strong&gt;: tuple of the parent class (for inheritance, can be empty)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/strong&gt;: dictionary containing attributes names and values&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyShinyClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;can be created manually this way:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;MyShinyClass = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyShinyClass&apos;&lt;/span&gt;, (), {}) &lt;span class=&quot;hljs-comment&quot;&gt;# returns a class object&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(MyShinyClass)\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.MyShinyClass&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(MyShinyClass()) &lt;span class=&quot;hljs-comment&quot;&gt;# create an instance with the class&lt;/span&gt;\n&amp;lt;__main__.MyShinyClass &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8997cec&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ll notice that we use &lt;code&gt;MyShinyClass&lt;/code&gt; as the name of the class\nand as the variable to hold the class reference. They can be different,\nbut there is no reason to complicate things.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; accepts a dictionary to define the attributes of the class. So:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      bar = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Can be translated to:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Foo = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt;, (), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And used as a normal class:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Foo)\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Foo&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Foo.bar)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f = Foo()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f)\n&amp;lt;__main__.Foo &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8a9b84c&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f.bar)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And of course, you can inherit from it, so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooChild&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Foo&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;FooChild = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;FooChild&apos;&lt;/span&gt;, (Foo,), {})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(FooChild)\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.FooChild&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(FooChild.bar) &lt;span class=&quot;hljs-comment&quot;&gt;# bar is inherited from Foo&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Eventually, you&apos;ll want to add methods to your class. Just define a function\nwith the proper signature and assign it as an attribute.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;echo_bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(self.bar)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;FooChild = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;FooChild&apos;&lt;/span&gt;, (Foo,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;echo_bar&apos;&lt;/span&gt;: echo_bar})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(Foo, &lt;span class=&quot;hljs-string&quot;&gt;&apos;echo_bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(FooChild, &lt;span class=&quot;hljs-string&quot;&gt;&apos;echo_bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;my_foo = FooChild()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;my_foo.echo_bar()\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;echo_bar_more&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;yet another method&apos;&lt;/span&gt;)\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;FooChild.echo_bar_more = echo_bar_more\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(FooChild, &lt;span class=&quot;hljs-string&quot;&gt;&apos;echo_bar_more&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.&lt;/p&gt;\n&lt;p&gt;This is what Python does when you use the keyword &lt;code&gt;class&lt;/code&gt;, and it does so by using a metaclass.&lt;/p&gt;\n&lt;h1&gt;What are metaclasses (finally)&lt;/h1&gt;\n&lt;p&gt;Metaclasses are the &apos;stuff&apos; that creates classes.&lt;/p&gt;\n&lt;p&gt;You define classes in order to create objects, right?&lt;/p&gt;\n&lt;p&gt;But we learned that Python classes are objects.&lt;/p&gt;\n&lt;p&gt;Well, metaclasses are what create these objects. They are the classes&apos; classes,\nyou can picture them this way:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;MyClass = MetaClass()\nmy_object = MyClass()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ve seen that &lt;code&gt;type&lt;/code&gt; lets you do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;MyClass = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;MyClass&apos;&lt;/span&gt;, (), {})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s because the function &lt;code&gt;type&lt;/code&gt; is in fact a metaclass. &lt;code&gt;type&lt;/code&gt; is the\nmetaclass Python uses to create all classes behind the scenes.&lt;/p&gt;\n&lt;p&gt;Now you wonder &quot;why the heck is it written in lowercase, and not &lt;code&gt;Type&lt;/code&gt;?&quot;&lt;/p&gt;\n&lt;p&gt;Well, I guess it&apos;s a matter of consistency with &lt;code&gt;str&lt;/code&gt;, the class that creates\nstrings objects, and &lt;code&gt;int&lt;/code&gt; the class that creates integer objects. &lt;code&gt;type&lt;/code&gt; is\njust the class that creates class objects.&lt;/p&gt;\n&lt;p&gt;You see that by checking the &lt;code&gt;__class__&lt;/code&gt; attribute.&lt;/p&gt;\n&lt;p&gt;Everything, and I mean everything, is an object in Python. That includes integers,\nstrings, functions and classes. All of them are objects. And all of them have\nbeen created from a class:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;age = &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;age.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = Bar()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b.__class__\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Bar&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, what is the &lt;code&gt;__class__&lt;/code&gt; of any &lt;code&gt;__class__&lt;/code&gt; ?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;age.__class__.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;name.__class__.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo.__class__.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b.__class__.__class__\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So, a metaclass is just the stuff that creates class objects.&lt;/p&gt;\n&lt;p&gt;You can call it a &apos;class factory&apos; if you wish.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; is the built-in metaclass Python uses, but of course, you can create your\nown metaclass.&lt;/p&gt;\n&lt;h1&gt;The &lt;a href=&quot;http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__metaclass__&lt;/code&gt;&lt;/a&gt; attribute&lt;/h1&gt;\n&lt;p&gt;In Python 2, you can add a &lt;code&gt;__metaclass__&lt;/code&gt; attribute when you write a class (see next section for the Python 3 syntax):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __metaclass__ = something...\n    [...]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you do so, Python will use the metaclass to create the class &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Careful, it&apos;s tricky.&lt;/p&gt;\n&lt;p&gt;You write &lt;code&gt;class Foo(object)&lt;/code&gt; first, but the class object &lt;code&gt;Foo&lt;/code&gt; is not created\nin memory yet.&lt;/p&gt;\n&lt;p&gt;Python will look for &lt;code&gt;__metaclass__&lt;/code&gt; in the class definition. If it finds it,\nit will use it to create the object class &lt;code&gt;Foo&lt;/code&gt;. If it doesn&apos;t, it will use\n&lt;code&gt;type&lt;/code&gt; to create the class.&lt;/p&gt;\n&lt;p&gt;Read that several times.&lt;/p&gt;\n&lt;p&gt;When you do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Bar&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python does the following:&lt;/p&gt;\n&lt;p&gt;Is there a &lt;code&gt;__metaclass__&lt;/code&gt; attribute in &lt;code&gt;Foo&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;If yes, create in-memory a class object (I said a class object, stay with me here.), with the name &lt;code&gt;Foo&lt;/code&gt; by using what is in &lt;code&gt;__metaclass__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If Python can&apos;t find &lt;code&gt;__metaclass__&lt;/code&gt;, it will look for a &lt;code&gt;__metaclass__&lt;/code&gt; at the MODULE level, and try to do the same (but only for classes that don&apos;t inherit anything, basically old-style classes).&lt;/p&gt;\n&lt;p&gt;Then if it can&apos;t find any &lt;code&gt;__metaclass__&lt;/code&gt; at all, it will use the &lt;code&gt;Bar&lt;/code&gt;&apos;s (the first parent) own metaclass (which might be the default &lt;code&gt;type&lt;/code&gt;.) to create the class object.&lt;/p&gt;\n&lt;p&gt;Be careful here that the &lt;code&gt;__metaclass__&lt;/code&gt; attribute will not be inherited, the metaclass of the parent (&lt;code&gt;Bar.__class__&lt;/code&gt;) will be. If &lt;code&gt;Bar&lt;/code&gt; used a &lt;code&gt;__metaclass__&lt;/code&gt; attribute that created &lt;code&gt;Bar&lt;/code&gt; with &lt;code&gt;type()&lt;/code&gt; (and not &lt;code&gt;type.__new__()&lt;/code&gt;), the subclasses will not inherit that behavior.&lt;/p&gt;\n&lt;p&gt;Now the big question is, what can you put in &lt;code&gt;__metaclass__&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;The answer is something that can create a class.&lt;/p&gt;\n&lt;p&gt;And what can create a class? &lt;code&gt;type&lt;/code&gt;, or anything that subclasses or uses it.&lt;/p&gt;\n&lt;h1&gt;Metaclasses in Python 3&lt;/h1&gt;\n&lt;p&gt;The syntax to set the metaclass has been changed in Python 3:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, metaclass=something):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;i.e. the &lt;code&gt;__metaclass__&lt;/code&gt; attribute is no longer used, in favor of a keyword argument in the list of base classes.&lt;/p&gt;\n&lt;p&gt;The behavior of metaclasses however stays &lt;a href=&quot;https://www.python.org/dev/peps/pep-3115/&quot; rel=&quot;noreferrer&quot;&gt;largely the same&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;One thing added to metaclasses in Python 3 is that you can also pass attributes as keyword-arguments into a metaclass, like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, metaclass=something, kwarg1=value1, kwarg2=value2):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Read the section below for how Python handles this.&lt;/p&gt;\n&lt;h1&gt;Custom metaclasses&lt;/h1&gt;\n&lt;p&gt;The main purpose of a metaclass is to change the class automatically,\nwhen it&apos;s created.&lt;/p&gt;\n&lt;p&gt;You usually do this for APIs, where you want to create classes matching the\ncurrent context.&lt;/p&gt;\n&lt;p&gt;Imagine a stupid example, where you decide that all classes in your module\nshould have their attributes written in uppercase. There are several ways to\ndo this, but one way is to set &lt;code&gt;__metaclass__&lt;/code&gt; at the module level.&lt;/p&gt;\n&lt;p&gt;This way, all classes of this module will be created using this metaclass,\nand we just have to tell the metaclass to turn all attributes to uppercase.&lt;/p&gt;\n&lt;p&gt;Luckily, &lt;code&gt;__metaclass__&lt;/code&gt; can actually be any callable, it doesn&apos;t need to be a\nformal class (I know, something with &apos;class&apos; in its name doesn&apos;t need to be\na class, go figure... but it&apos;s helpful).&lt;/p&gt;\n&lt;p&gt;So we will start with a simple example, by using a function.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# the metaclass will automatically get passed the same argument&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# that you usually pass to `type`&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;upper_attr&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;future_class_name, future_class_parents, future_class_attrs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n      Return a class object, with the list of its attribute turned\n      into uppercase.\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# pick up any attribute that doesn&apos;t start with &apos;__&apos; and uppercase it&lt;/span&gt;\n    uppercase_attrs = {\n        attr &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; attr.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; attr.upper(): v\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attr, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; future_class_attrs.items()\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# let `type` do the class creation&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(future_class_name, future_class_parents, uppercase_attrs)\n\n__metaclass__ = upper_attr &lt;span class=&quot;hljs-comment&quot;&gt;# this will affect all classes in the module&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(): &lt;span class=&quot;hljs-comment&quot;&gt;# global __metaclass__ won&apos;t work with &quot;object&quot; though&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# but we can define __metaclass__ here instead to affect only this class&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# and this will work with &quot;object&quot; children&lt;/span&gt;\n    bar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;bip&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s check:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(Foo, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;hasattr&lt;/span&gt;(Foo, &lt;span class=&quot;hljs-string&quot;&gt;&apos;BAR&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Foo.BAR\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;bip&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, let&apos;s do exactly the same, but using a real class for a metaclass:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# remember that `type` is actually a class like `str` and `int`&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# so you can inherit from it&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UpperAttrMetaclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# __new__ is the method called before __init__&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# it&apos;s the method that creates the object and returns it&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# while __init__ just initializes the object passed as parameter&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# you rarely use __new__, except when you want to control how the object&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# is created.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# here the created object is the class, and we want to customize it&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# so we override __new__&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# you can do some stuff in __init__ too if you wish&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some advanced use involves overriding __call__ as well, but we won&apos;t&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# see this&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;upperattr_metaclass, future_class_name,\n                future_class_parents, future_class_attrs&lt;/span&gt;):\n        uppercase_attrs = {\n            attr &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; attr.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; attr.upper(): v\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attr, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; future_class_attrs.items()\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(future_class_name, future_class_parents, uppercase_attrs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s rewrite the above, but with shorter and more realistic variable names now that we know what they mean:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UpperAttrMetaclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, clsname, bases, attrs&lt;/span&gt;):\n        uppercase_attrs = {\n            attr &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; attr.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; attr.upper(): v\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attr, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attrs.items()\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(clsname, bases, uppercase_attrs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You may have noticed the extra argument &lt;code&gt;cls&lt;/code&gt;. There is\nnothing special about it: &lt;code&gt;__new__&lt;/code&gt; always receives the class it&apos;s defined in, as the first parameter. Just like you have &lt;code&gt;self&lt;/code&gt; for ordinary methods which receive the instance as the first parameter, or the defining class for class methods.&lt;/p&gt;\n&lt;p&gt;But this is not proper OOP. We are calling &lt;code&gt;type&lt;/code&gt; directly and we aren&apos;t overriding or calling the parent&apos;s &lt;code&gt;__new__&lt;/code&gt;. Let&apos;s do that instead:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UpperAttrMetaclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, clsname, bases, attrs&lt;/span&gt;):\n        uppercase_attrs = {\n            attr &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; attr.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; attr.upper(): v\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attr, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attrs.items()\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;.__new__(cls, clsname, bases, uppercase_attrs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can make it even cleaner by using &lt;code&gt;super&lt;/code&gt;, which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UpperAttrMetaclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, clsname, bases, attrs&lt;/span&gt;):\n        uppercase_attrs = {\n            attr &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; attr.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; attr.upper(): v\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attr, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attrs.items()\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(UpperAttrMetaclass, cls).__new__(\n            cls, clsname, bases, uppercase_attrs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Oh, and in Python 3 if you do this call with keyword arguments, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, metaclass=MyMetaclass, kwarg1=value1):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It translates to this in the metaclass to use it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyMetaclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, clsname, bases, dct, kwargs1=default&lt;/span&gt;):\n        ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s it. There is really nothing more about metaclasses.&lt;/p&gt;\n&lt;p&gt;The reason behind the complexity of the code using metaclasses is not because\nof metaclasses, it&apos;s because you usually use metaclasses to do twisted stuff\nrelying on introspection, manipulating inheritance, vars such as &lt;code&gt;__dict__&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;p&gt;Indeed, metaclasses are especially useful to do black magic, and therefore\ncomplicated stuff. But by themselves, they are simple:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;intercept a class creation&lt;/li&gt;\n&lt;li&gt;modify the class&lt;/li&gt;\n&lt;li&gt;return the modified class&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Why would you use metaclasses classes instead of functions?&lt;/h1&gt;\n&lt;p&gt;Since &lt;code&gt;__metaclass__&lt;/code&gt; can accept any callable, why would you use a class\nsince it&apos;s obviously more complicated?&lt;/p&gt;\n&lt;p&gt;There are several reasons to do so:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The intention is clear. When you read &lt;code&gt;UpperAttrMetaclass(type)&lt;/code&gt;, you know\nwhat&apos;s going to follow&lt;/li&gt;\n&lt;li&gt;You can use OOP. Metaclass can inherit from metaclass, override parent methods. Metaclasses can even use metaclasses.&lt;/li&gt;\n&lt;li&gt;Subclasses of a class will be instances of its metaclass if you specified a metaclass-class, but not with a metaclass-function.&lt;/li&gt;\n&lt;li&gt;You can structure your code better. You never use metaclasses for something as trivial as the above example. It&apos;s usually for something complicated. Having the ability to make several methods and group them in one class is very useful to make the code easier to read.&lt;/li&gt;\n&lt;li&gt;You can hook on &lt;code&gt;__new__&lt;/code&gt;, &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;__call__&lt;/code&gt;. Which will allow you to do different stuff, Even if usually you can do it all in &lt;code&gt;__new__&lt;/code&gt;,\nsome people are just more comfortable using &lt;code&gt;__init__&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;These are called metaclasses, damn it! It must mean something!&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Why would you use metaclasses?&lt;/h1&gt;\n&lt;p&gt;Now the big question. Why would you use some obscure error-prone feature?&lt;/p&gt;\n&lt;p&gt;Well, usually you don&apos;t:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Metaclasses are deeper magic that\n99% of users should never worry about it.\nIf you wonder whether you need them,\nyou don&apos;t (the people who actually\nneed them know with certainty that\nthey need them, and don&apos;t need an\nexplanation about why).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;Python Guru Tim Peters&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The main use case for a metaclass is creating an API. A typical example of this is the Django ORM. It allows you to define something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(models.Model):\n    name = models.CharField(max_length=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)\n    age = models.IntegerField()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;person = Person(name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;bob&apos;&lt;/span&gt;, age=&lt;span class=&quot;hljs-string&quot;&gt;&apos;35&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(person.age)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It won&apos;t return an &lt;code&gt;IntegerField&lt;/code&gt; object. It will return an &lt;code&gt;int&lt;/code&gt;, and can even take it directly from the database.&lt;/p&gt;\n&lt;p&gt;This is possible because &lt;code&gt;models.Model&lt;/code&gt; defines &lt;code&gt;__metaclass__&lt;/code&gt; and\nit uses some magic that will turn the &lt;code&gt;Person&lt;/code&gt; you just defined with simple statements\ninto a complex hook to a database field.&lt;/p&gt;\n&lt;p&gt;Django makes something complex look simple by exposing a simple API\nand using metaclasses, recreating code from this API to do the real job\nbehind the scenes.&lt;/p&gt;\n&lt;h1&gt;The last word&lt;/h1&gt;\n&lt;p&gt;First, you know that classes are objects that can create instances.&lt;/p&gt;\n&lt;p&gt;Well, in fact, classes are themselves instances. Of metaclasses.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(Foo)\n&lt;span class=&quot;hljs-number&quot;&gt;142630324&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Everything is an object in Python, and they are all either instance of classes\nor instances of metaclasses.&lt;/p&gt;\n&lt;p&gt;Except for &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; is actually its own metaclass. This is not something you could\nreproduce in pure Python, and is done by cheating a little bit at the implementation\nlevel.&lt;/p&gt;\n&lt;p&gt;Secondly, metaclasses are complicated. You may not want to use them for\nvery simple class alterations. You can change classes by using two different techniques:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Monkey_patch&quot; rel=&quot;noreferrer&quot;&gt;monkey patching&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;class decorators&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;99% of the time you need class alteration, you are better off using these.&lt;/p&gt;\n&lt;p&gt;But 98% of the time, you don&apos;t need class alteration at all.&lt;/p&gt;\n    ","\n&lt;p&gt;A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.&lt;/p&gt;\n\n&lt;p&gt;While in Python you can use arbitrary callables for metaclasses (like &lt;a href=&quot;https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037&quot;&gt;Jerub&lt;/a&gt; shows), the better approach is to make it an actual class itself. &lt;code&gt;type&lt;/code&gt; is the usual metaclass in Python. &lt;code&gt;type&lt;/code&gt; is itself a class, and it is its own type. You won&apos;t be able to recreate something like &lt;code&gt;type&lt;/code&gt; purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the &apos;class&apos; statement) by calling the metaclass. Combined with the normal &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;__new__&lt;/code&gt; methods, metaclasses therefore allow you to do &apos;extra things&apos; when creating a class, like registering the new class with some registry or replace the class with something else entirely.&lt;/p&gt;\n\n&lt;p&gt;When the &lt;code&gt;class&lt;/code&gt; statement is executed, Python first executes the body of the &lt;code&gt;class&lt;/code&gt; statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the &lt;code&gt;__metaclass__&lt;/code&gt; attribute of the class-to-be (if any) or the &lt;code&gt;__metaclass__&lt;/code&gt; global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.&lt;/p&gt;\n\n&lt;p&gt;However, metaclasses actually define the &lt;em&gt;type&lt;/em&gt; of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. &lt;code&gt;type.__subclasses__()&lt;/code&gt; is an example of a method on the &lt;code&gt;type&lt;/code&gt; metaclass. You can also define the normal &apos;magic&apos; methods, like &lt;code&gt;__add__&lt;/code&gt;, &lt;code&gt;__iter__&lt;/code&gt; and &lt;code&gt;__getattr__&lt;/code&gt;, to implement or change how the class behaves.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an aggregated example of the bits and pieces:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;make_hook&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Decorator to turn &apos;foo&apos; method into &apos;__foo__&apos;&quot;&quot;&quot;&lt;/span&gt;\n    f.is_hook = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyType&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mcls, name, bases, attrs&lt;/span&gt;):\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&apos;None&apos;&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Go over attributes and see if they should be renamed.&lt;/span&gt;\n        newattrs = {}\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attrname, attrvalue &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attrs.iteritems():\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(attrvalue, &lt;span class=&quot;hljs-string&quot;&gt;&apos;is_hook&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n                newattrs[&lt;span class=&quot;hljs-string&quot;&gt;&apos;__%s__&apos;&lt;/span&gt; % attrname] = attrvalue\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                newattrs[attrname] = attrvalue\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(MyType, mcls).__new__(mcls, name, bases, newattrs)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, bases, attrs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(MyType, self).__init__(name, bases, attrs)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# classregistry.register(self, self.interfaces)&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Would register class %s now.&quot;&lt;/span&gt; % self\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__add__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AutoClass&lt;/span&gt;(self, other):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AutoClass\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Alternatively, to autogenerate the classname as well as the class:&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# return type(self.__name__ + other.__name__, (self, other), {})&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unregister&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-comment&quot;&gt;# classregistry.unregister(self)&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Would unregister class %s now.&quot;&lt;/span&gt; % self\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyObject&lt;/span&gt;:\n    __metaclass__ = MyType\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NoneSample&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;MyObject&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Will print &quot;NoneType None&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(NoneSample), &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(NoneSample)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;MyObject&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, value&lt;/span&gt;):\n        self.value = value\n&lt;span class=&quot;hljs-meta&quot;&gt;    @make_hook&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.__class__(self.value + other.value)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Will unregister the class&lt;/span&gt;\nExample.unregister()\n\ninst = Example(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Will fail with an AttributeError&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#inst.unregister()&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; inst + inst\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sibling&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;MyObject&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\nExampleSibling = Example + Sibling\n&lt;span class=&quot;hljs-comment&quot;&gt;# ExampleSibling is now a subclass of both Example and Sibling (with no&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# content of its own) although it will believe it&apos;s called &apos;AutoClass&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; ExampleSibling\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; ExampleSibling.__mro__\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Metaclasses are the secret sauce that make &apos;class&apos; work. The default metaclass for a new style object is called &apos;type&apos;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;class type(object)\n  |  type(object) -&amp;gt; the object&apos;s type\n  |  type(name, bases, dict) -&amp;gt; a new type\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Metaclasses take 3 args. &apos;&lt;strong&gt;name&lt;/strong&gt;&apos;, &apos;&lt;strong&gt;bases&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;dict&lt;/strong&gt;&apos;&lt;/p&gt;\n\n&lt;p&gt;Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ThisIsTheName&lt;/span&gt;(Bases, Are, Here):\n    All_the_code_here\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doesIs&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;create, a&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lets define a metaclass that will demonstrate how &apos;&lt;strong&gt;class:&lt;/strong&gt;&apos; calls it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_metaclass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, bases, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;The Class Name is&apos;&lt;/span&gt;, name\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;The Class Bases are&apos;&lt;/span&gt;, bases\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;The dict has&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;elems, the keys are&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.keys()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;yellow&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestName&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n    __metaclass__ = test_metaclass\n    foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, arr&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;TestName = &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(TestName)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# output =&amp;gt; &lt;/span&gt;\nThe Class Name &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; TestName\nThe Class Bases are (&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\nThe &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt; has &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; elems, the keys are [&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__metaclass__&apos;&lt;/span&gt;]\nTestName =  &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now, an example that actually means something, this will automatically make the variables in the list &quot;attributes&quot; set on the class, and set to None.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init_attributes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, bases, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;attributes&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;attributes&apos;&lt;/span&gt;]:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[attr] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(name, bases, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Initialised&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __metaclass__ = init_attributes\n    attributes = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo =&amp;gt;&apos;&lt;/span&gt;, Initialised.foo\n&lt;span class=&quot;hljs-comment&quot;&gt;# output=&amp;gt;&lt;/span&gt;\nfoo =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note that the magic behaviour that &lt;code&gt;Initialised&lt;/code&gt; gains by having the metaclass &lt;code&gt;init_attributes&lt;/code&gt; is not passed onto a subclass of &lt;code&gt;Initialised&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is an even more concrete example, showing how you can subclass &apos;type&apos; to make a metaclass that performs an action when the class is created. This is quite tricky:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MetaSingleton&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    instance = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, *args, **kw&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; cls.instance &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            cls.instance = &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(MetaSingleton, cls).__call__(*args, **kw)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cls.instance\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __metaclass__ = MetaSingleton\n\na = Foo()\nb = Foo()\n&lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Others have explained how metaclasses work and how they fit into the Python type system. Here&apos;s an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyMeta&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n\n    counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, bases, dic&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;.__init__(cls, name, bases, dic)\n        cls._order = MyMeta.counter\n        MyMeta.counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyType&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):              &lt;span class=&quot;hljs-comment&quot;&gt;# Python 2&lt;/span&gt;\n    __metaclass__ = MyMeta\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyType&lt;/span&gt;(metaclass=MyMeta):    &lt;span class=&quot;hljs-comment&quot;&gt;# Python 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Anything that&apos;s a subclass of &lt;code&gt;MyType&lt;/code&gt; then gets a class attribute &lt;code&gt;_order&lt;/code&gt; that records the order in which the classes were defined.&lt;/p&gt;\n    ","\n&lt;p&gt;One use for metaclasses is adding new properties and methods to an instance automatically.&lt;/p&gt;\n\n&lt;p&gt;For example, if you look at &lt;a href=&quot;http://docs.djangoproject.com/en/dev/topics/db/models/&quot; rel=&quot;noreferrer&quot;&gt;Django models&lt;/a&gt;, their definition looks a bit confusing. It looks as if you are only defining class properties:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(models.Model):\n    first_name = models.CharField(max_length=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)\n    last_name = models.CharField(max_length=&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, at runtime the Person objects are filled with all sorts of useful methods. See the &lt;a href=&quot;http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt; for some amazing metaclassery.&lt;/p&gt;\n    ","\n&lt;p&gt;I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html&lt;/a&gt; (archived at &lt;a href=&quot;https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html&quot; rel=&quot;noreferrer&quot;&gt;https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve never written one myself, but I think one of the nicest uses of metaclasses can be seen in the &lt;a href=&quot;http://www.djangoproject.com/&quot; rel=&quot;noreferrer&quot;&gt;Django framework&lt;/a&gt;. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3&quot; rel=&quot;noreferrer&quot;&gt;Creating a new model&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25&quot; rel=&quot;noreferrer&quot;&gt;The metaclass enabling this&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The thing that&apos;s left to say is: If you don&apos;t know what metaclasses are, the probability that you &lt;strong&gt;will not need them&lt;/strong&gt; is 99%.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;What are metaclasses? What do you use them for?&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;TLDR: A metaclass instantiates and defines behavior for a class just like a class instantiates and defines behavior for an instance. &lt;/p&gt;\n\n&lt;p&gt;Pseudocode:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Class(...)\ninstance\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above should look familiar. Well, where does &lt;code&gt;Class&lt;/code&gt; come from? It&apos;s an instance of a metaclass (also pseudocode):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Metaclass(...)\nClass\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In real code, we can pass the default metaclass, &lt;code&gt;type&lt;/code&gt;, everything we need to instantiate a class and we get a class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;,), {}) &lt;span class=&quot;hljs-comment&quot;&gt;# requires a name, bases, and a namespace&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Foo&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Putting it differently&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A class is to an instance as a metaclass is to a class. &lt;/p&gt;\n\n&lt;p&gt;When we instantiate an object, we get an instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;()                          &lt;span class=&quot;hljs-comment&quot;&gt;# instantiation of class&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7f9069b4e0b0&lt;/span&gt;&amp;gt;     &lt;span class=&quot;hljs-comment&quot;&gt;# instance&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Likewise, when we define a class explicitly with the default metaclass, &lt;code&gt;type&lt;/code&gt;, we instantiate it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Object&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;,), {})     &lt;span class=&quot;hljs-comment&quot;&gt;# instantiation of metaclass&lt;/span&gt;\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Object&apos;&lt;/span&gt;&amp;gt;             &lt;span class=&quot;hljs-comment&quot;&gt;# instance&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Put another way, a class is an instance of a metaclass:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Put a third way, a metaclass is a class&apos;s class.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) == &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__class__\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;When you write a class definition and Python executes it, it uses a metaclass to instantiate the class object (which will, in turn, be used to instantiate instances of that class).&lt;/p&gt;\n\n&lt;p&gt;Just as we can use class definitions to change how custom object instances behave, we can use a metaclass class definition to change the way a class object behaves.&lt;/p&gt;\n\n&lt;p&gt;What can they be used for? From the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#metaclass-example&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Nevertheless, it is usually encouraged for users to avoid using metaclasses unless absolutely necessary.&lt;/p&gt;\n\n&lt;h1&gt;You use a metaclass every time you create a class:&lt;/h1&gt;\n\n&lt;p&gt;When you write a class definition, for example, like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): \n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You instantiate a class object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Foo\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Foo&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(Foo, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(Foo, &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)\n(&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is the same as functionally calling &lt;code&gt;type&lt;/code&gt; with the appropriate arguments and assigning the result to a variable of that name:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt;\nbases = (&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;,)\nnamespace = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;}\nFoo = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(name, bases, namespace)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note, some things automatically get added to the &lt;code&gt;__dict__&lt;/code&gt;, i.e., the namespace:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Foo.__dict__\ndict_proxy({&lt;span class=&quot;hljs-string&quot;&gt;&apos;__dict__&apos;&lt;/span&gt;: &amp;lt;attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;__dict__&apos;&lt;/span&gt; of &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt; objects&amp;gt;, \n&lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__weakref__&apos;&lt;/span&gt;: &amp;lt;attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;__weakref__&apos;&lt;/span&gt; \nof &lt;span class=&quot;hljs-string&quot;&gt;&apos;Foo&apos;&lt;/span&gt; objects&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;em&gt;metaclass&lt;/em&gt; of the object we created, in both cases, is &lt;code&gt;type&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;(A side-note on the contents of the class &lt;code&gt;__dict__&lt;/code&gt;: &lt;code&gt;__module__&lt;/code&gt; is there because classes must know where they are defined, and  &lt;code&gt;__dict__&lt;/code&gt; and &lt;code&gt;__weakref__&lt;/code&gt; are there because we don&apos;t define &lt;code&gt;__slots__&lt;/code&gt; - if we &lt;a href=&quot;https://stackoverflow.com/q/472000/541136&quot;&gt;define &lt;code&gt;__slots__&lt;/code&gt;&lt;/a&gt; we&apos;ll save a bit of space in the instances, as we can disallow &lt;code&gt;__dict__&lt;/code&gt; and &lt;code&gt;__weakref__&lt;/code&gt; by excluding them. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Baz = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Bar&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__slots__&apos;&lt;/span&gt;: ()})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Baz.__dict__\nmappingproxy({&lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;demo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__slots__&apos;&lt;/span&gt;: (), &lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... but I digress.)&lt;/p&gt;\n\n&lt;h1&gt;We can extend &lt;code&gt;type&lt;/code&gt; just like any other class definition:&lt;/h1&gt;\n\n&lt;p&gt;Here&apos;s the default &lt;code&gt;__repr__&lt;/code&gt; of classes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Foo\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Foo&apos;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One of the most valuable things we can do by default in writing a Python object is to provide it with a good &lt;code&gt;__repr__&lt;/code&gt;. When we call &lt;code&gt;help(repr)&lt;/code&gt; we learn that there&apos;s a good test for a &lt;code&gt;__repr__&lt;/code&gt; that also requires a test for equality - &lt;code&gt;obj == eval(repr(obj))&lt;/code&gt;. The following simple implementation of &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt; for class instances of our type class provides us with a demonstration that may improve on the default &lt;code&gt;__repr__&lt;/code&gt; of classes:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n        &amp;gt;&amp;gt;&amp;gt; Baz\n        Type(&apos;Baz&apos;, (Foo, Bar,), {&apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None})\n        &amp;gt;&amp;gt;&amp;gt; eval(repr(Baz))\n        Type(&apos;Baz&apos;, (Foo, Bar,), {&apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None})\n        &quot;&quot;&quot;&lt;/span&gt;\n        metaname = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(cls).__name__\n        name = cls.__name__\n        parents = &lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;.join(b.__name__ &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cls.__bases__)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parents:\n            parents += &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n        namespace = &lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;.join(&lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt;.join(\n          (&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(k), &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(v) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(v, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; v.__name__))\n               &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cls.__dict__.items())\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{0}(\\&apos;{1}\\&apos;, ({2}), {{{3}}})&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(metaname, name, parents, namespace)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, other&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n        &amp;gt;&amp;gt;&amp;gt; Baz == eval(repr(Baz))\n        True            \n        &quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (cls.__name__, cls.__bases__, cls.__dict__) == (\n                other.__name__, other.__bases__, other.__dict__)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So now when we create an object with this metaclass, the &lt;code&gt;__repr__&lt;/code&gt; echoed on the command line provides a much less ugly sight than the default:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bar&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Baz = &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Baz&apos;&lt;/span&gt;, (Foo, Bar,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;})\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Baz\n&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Baz&apos;&lt;/span&gt;, (Foo, Bar,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With a nice &lt;code&gt;__repr__&lt;/code&gt; defined for the class instance, we have a stronger ability to debug our code. However, much further checking with &lt;code&gt;eval(repr(Class))&lt;/code&gt; is unlikely (as functions would be rather impossible to eval from their default &lt;code&gt;__repr__&lt;/code&gt;&apos;s).&lt;/p&gt;\n\n&lt;h1&gt;An expected usage: &lt;code&gt;__prepare__&lt;/code&gt; a namespace&lt;/h1&gt;\n\n&lt;p&gt;If, for example, we want to know in what order a class&apos;s methods are created in, we could provide an ordered dict as the namespace of the class. We would do this with &lt;code&gt;__prepare__&lt;/code&gt; which &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace&quot; rel=&quot;noreferrer&quot;&gt;returns the namespace dict for the class if it is implemented in Python 3&lt;/a&gt;: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; OrderedDict\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OrderedType&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Type&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;    @classmethod&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__prepare__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;metacls, name, bases, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; OrderedDict()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, bases, namespace, **kwargs&lt;/span&gt;):\n        result = &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.__new__(cls, name, bases, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(namespace))\n        result.members = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(namespace)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;OrderedMethodsObject&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, metaclass=OrderedType):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;method4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now we have a record of the order in which these methods (and other class attributes) were created:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;OrderedMethodsObject.members\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__qualname__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method4&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note, this example was adapted from the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#metaclass-example&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; - the new &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/enum.py&quot; rel=&quot;noreferrer&quot;&gt;enum in the standard library&lt;/a&gt; does this.&lt;/p&gt;\n\n&lt;p&gt;So what we did was instantiate a metaclass by creating a class. We can also treat the metaclass as we would any other class. It has a method resolution order:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;inspect.getmro(OrderedType)\n(&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.OrderedType&apos;&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Type&apos;&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it has approximately the correct &lt;code&gt;repr&lt;/code&gt; (which we can no longer eval unless we can find a way to represent our functions.):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;OrderedMethodsObject\nOrderedType(&lt;span class=&quot;hljs-string&quot;&gt;&apos;OrderedMethodsObject&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method1&apos;&lt;/span&gt;: &amp;lt;function OrderedMethodsObject.method1 at &lt;span class=&quot;hljs-number&quot;&gt;0x0000000002DB01E0&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;members&apos;&lt;/span&gt;: (&lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__qualname__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method4&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;method3&apos;&lt;/span&gt;: &amp;lt;function OrderedMet\nhodsObject.method3 at &lt;span class=&quot;hljs-number&quot;&gt;0x0000000002DB02F0&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method2&apos;&lt;/span&gt;: &amp;lt;function OrderedMethodsObject.method2 at &lt;span class=&quot;hljs-number&quot;&gt;0x0000000002DB0268&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__module__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__weakref__&apos;&lt;/span&gt;: &amp;lt;attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;__weakref__&apos;&lt;/span&gt; of &lt;span class=&quot;hljs-string&quot;&gt;&apos;OrderedMethodsObject&apos;&lt;/span&gt; objects&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__doc__&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;__d\nict__&apos;&lt;/span&gt;: &amp;lt;attribute &lt;span class=&quot;hljs-string&quot;&gt;&apos;__dict__&apos;&lt;/span&gt; of &lt;span class=&quot;hljs-string&quot;&gt;&apos;OrderedMethodsObject&apos;&lt;/span&gt; objects&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;method4&apos;&lt;/span&gt;: &amp;lt;function OrderedMethodsObject.method4 at &lt;span class=&quot;hljs-number&quot;&gt;0x0000000002DB0378&lt;/span&gt;&amp;gt;})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Python 3 update&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There are (at this point) two key methods in a metaclass:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;__prepare__&lt;/code&gt;, and&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;__new__&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;__prepare__&lt;/code&gt; lets you supply a custom mapping (such as an &lt;code&gt;OrderedDict&lt;/code&gt;) to be used as the namespace while the class is being created.  You must return an instance of whatever namespace you choose.  If you don&apos;t implement &lt;code&gt;__prepare__&lt;/code&gt; a normal &lt;code&gt;dict&lt;/code&gt; is used.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__new__&lt;/code&gt; is responsible for the actual creation/modification of the final class.&lt;/p&gt;\n\n&lt;p&gt;A bare-bones, do-nothing-extra metaclass would like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Meta&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__prepare__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;metaclass, cls, bases&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;metacls, cls, bases, clsdict&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__new__(metacls, cls, bases, clsdict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A simple example:&lt;/p&gt;\n\n&lt;p&gt;Say you want some simple validation code to run on your attributes -- like it must always be an &lt;code&gt;int&lt;/code&gt; or a &lt;code&gt;str&lt;/code&gt;.  Without a metaclass, your class would look something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n    weight = ValidateType(&lt;span class=&quot;hljs-string&quot;&gt;&apos;weight&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    age = ValidateType(&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    name = ValidateType(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, you have to repeat the name of the attribute twice.  This makes typos possible along with irritating bugs.&lt;/p&gt;\n\n&lt;p&gt;A simple metaclass can address that problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(metaclass=Validator):\n    weight = ValidateType(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    age = ValidateType(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)\n    name = ValidateType(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is what the metaclass would look like (not using &lt;code&gt;__prepare__&lt;/code&gt; since it is not needed):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Validator&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;metacls, cls, bases, clsdict&lt;/span&gt;):\n        &lt;span class=&quot;hljs-comment&quot;&gt;# search clsdict looking for ValidateType descriptors&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name, attr &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; clsdict.items():\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(attr, ValidateType):\n                attr.name = name\n                attr.attr = &lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt; + name\n        &lt;span class=&quot;hljs-comment&quot;&gt;# create final class and return it&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__new__(metacls, cls, bases, clsdict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A sample run of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;p = Person()\np.weight = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p.weight)\np.weight = &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;produces:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;simple_meta.py&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n    p.weight = &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;simple_meta.py&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; __set__\n    (self.name, self.&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, value))\nTypeError: weight must be of &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(s) &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt;&amp;gt; (got &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:  This example is simple enough it could have also been accomplished with a class decorator, but presumably an actual metaclass would be doing much more.&lt;/p&gt;\n\n&lt;p&gt;The &apos;ValidateType&apos; class for reference:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValidateType&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;&lt;/span&gt;):\n        self.name = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# will be set by metaclass&lt;/span&gt;\n        self.attr = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# will be set by metaclass&lt;/span&gt;\n        self.&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__get__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, inst, cls&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; inst &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inst.__dict__[self.attr]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__set__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, inst, value&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(value, self.&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%s must be of type(s) %s (got %r)&apos;&lt;/span&gt; %\n                    (self.name, self.&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, value))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            inst.__dict__[self.attr] = value\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Role of a metaclass&apos; &lt;code&gt;__call__()&lt;/code&gt; method when creating a class instance&lt;/h1&gt;\n\n&lt;p&gt;If you&apos;ve done Python programming for more than a few months you&apos;ll eventually stumble upon code that looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# define a class&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some definition here ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# create an instance of it&lt;/span&gt;\ninstance = SomeClass()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# then call the object as if it&apos;s a function&lt;/span&gt;\nresult = instance(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The latter is possible when you implement the &lt;code&gt;__call__()&lt;/code&gt; magic method on the class.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some definition here ...&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ...&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, foo, bar&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bar + foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;__call__()&lt;/code&gt; method is invoked when an instance of a class is used as a callable. But as we&apos;ve seen from previous answers a class itself is an instance of a metaclass, so when we use the class as a callable (i.e. when we create an instance of it) we&apos;re actually calling its metaclass&apos; &lt;code&gt;__call__()&lt;/code&gt; method. At this point most Python programmers are a bit confused because they&apos;ve been told that when creating an instance like this &lt;code&gt;instance = SomeClass()&lt;/code&gt; you&apos;re calling its &lt;code&gt;__init__()&lt;/code&gt; method. Some who&apos;ve dug a bit deeper know that before &lt;code&gt;__init__()&lt;/code&gt; there&apos;s &lt;code&gt;__new__()&lt;/code&gt;. Well, today another layer of truth is being revealed, before &lt;code&gt;__new__()&lt;/code&gt; there&apos;s the metaclass&apos; &lt;code&gt;__call__()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s study the method call chain from specifically the perspective of creating an instance of a class.&lt;/p&gt;\n\n&lt;p&gt;This is a metaclass that logs exactly the moment before an instance is created and the moment it&apos;s about to return it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Meta_1&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meta_1.__call__() before creating an instance of &quot;&lt;/span&gt;, cls\n        instance = &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(Meta_1, cls).__call__()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meta_1.__call__() about to return instance.&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; instance\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a class that uses that metaclass&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Class_1&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n\n    __metaclass__ = Meta_1\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Class_1.__new__() before creating an instance.&quot;&lt;/span&gt;\n        instance = &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(Class_1, cls).__new__(cls)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Class_1.__new__() about to return instance.&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; instance\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;entering Class_1.__init__() for instance initialization.&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(Class_1,self).__init__()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exiting Class_1.__init__().&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now let&apos;s create an instance of &lt;code&gt;Class_1&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;instance = Class_1()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Meta_1.__call__() before creating an instance of &amp;lt;class &apos;__main__.Class_1&apos;&amp;gt;.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Class_1.__new__() before creating an instance.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Class_1.__new__() about to return instance.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# entering Class_1.__init__() for instance initialization.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# exiting Class_1.__init__().&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Meta_1.__call__() about to return instance.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Observe that the code above doesn&apos;t actually do anything more than logging the tasks. Each method delegates the actual work to its parent&apos;s implementation, thus keeping the default behavior. Since &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;Meta_1&lt;/code&gt;&apos;s parent class (&lt;code&gt;type&lt;/code&gt; being the default parent metaclass) and considering the ordering sequence of the output above, we now have a clue as to what would be the pseudo implementation of &lt;code&gt;type.__call__()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;type&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, *args, **kwarg&lt;/span&gt;):\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# ... maybe a few things done to cls here&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# then we call __new__() on the class to create an instance&lt;/span&gt;\n        instance = cls.__new__(cls, *args, **kwargs)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# ... maybe a few things done to the instance here&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# then we initialize the instance with its __init__() method&lt;/span&gt;\n        instance.__init__(*args, **kwargs)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# ... maybe a few more things done to instance here&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# then we return it&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; instance\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can see that the metaclass&apos; &lt;code&gt;__call__()&lt;/code&gt; method is the one that&apos;s called first. It then delegates creation of the instance to the class&apos;s &lt;code&gt;__new__()&lt;/code&gt; method and initialization to the instance&apos;s &lt;code&gt;__init__()&lt;/code&gt;. It&apos;s also the one that ultimately returns the instance.&lt;/p&gt;\n\n&lt;p&gt;From the above it stems that the metaclass&apos; &lt;code&gt;__call__()&lt;/code&gt; is also given the opportunity to decide whether or not a call to &lt;code&gt;Class_1.__new__()&lt;/code&gt; or &lt;code&gt;Class_1.__init__()&lt;/code&gt; will eventually be made. Over the course of its execution it could actually return an object that hasn&apos;t been touched by either of these methods. Take for example this approach to the singleton pattern:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Meta_2&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    singletons = {}\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, *args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; cls &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Meta_2.singletons:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# we return the only instance and skip a call to __new__()&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# and __init__()&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;{} singleton returning from Meta_2.__call__(), &quot;&lt;/span&gt;\n                   &lt;span class=&quot;hljs-string&quot;&gt;&quot;skipping creation of new instance.&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(cls))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Meta_2.singletons[cls]\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# else if the singleton isn&apos;t present we proceed as usual&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meta_2.__call__() before creating an instance.&quot;&lt;/span&gt;\n        instance = &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(Meta_2, cls).__call__(*args, **kwargs)\n        Meta_2.singletons[cls] = instance\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meta_2.__call__() returning new instance.&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; instance\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Class_2&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n\n    __metaclass__ = Meta_2\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, *args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Class_2.__new__() before creating instance.&quot;&lt;/span&gt;\n        instance = &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(Class_2, cls).__new__(cls)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Class_2.__new__() returning instance.&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; instance\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args, **kwargs&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;entering Class_2.__init__() for initialization.&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(Class_2, self).__init__()\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exiting Class_2.__init__().&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s observe what happens when repeatedly trying to create an object of type &lt;code&gt;Class_2&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = Class_2()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Meta_2.__call__() before creating an instance.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Class_2.__new__() before creating instance.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Class_2.__new__() returning instance.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# entering Class_2.__init__() for initialization.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# exiting Class_2.__init__().&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Meta_2.__call__() returning new instance.&lt;/span&gt;\n\nb = Class_2()\n&lt;span class=&quot;hljs-comment&quot;&gt;# &amp;lt;class &apos;__main__.Class_2&apos;&amp;gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.&lt;/span&gt;\n\nc = Class_2()\n&lt;span class=&quot;hljs-comment&quot;&gt;# &amp;lt;class &apos;__main__.Class_2&apos;&amp;gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.&lt;/span&gt;\n\na &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; c &lt;span class=&quot;hljs-comment&quot;&gt;# True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A &lt;code&gt;metaclass&lt;/code&gt; is a class that tells how (some) other class should be created.&lt;/p&gt;\n&lt;p&gt;This is a case where I saw &lt;code&gt;metaclass&lt;/code&gt; as a solution to my problem:\nI had a really complicated problem, that probably could have been solved differently, but I chose to solve it using a &lt;code&gt;metaclass&lt;/code&gt;.  Because of the complexity, it is one of the few modules I have written where the comments in the module surpass the amount of code that has been written.  Here it is...&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# This requires some explaining.  The point of this metaclass excercise is to&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# create a static abstract class that is in one way or another, dormant until&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# queried.  I experimented with creating a singlton on import, but that did&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# not quite behave how I wanted it to.  See now here, we are creating a class&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# called GsyncOptions, that on import, will do nothing except state that its&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# class creator is GsyncOptionsType.  This means, docopt doesn&apos;t parse any&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# of the help document, nor does it start processing command line options.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# So importing this module becomes really efficient.  The complicated bit&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# comes from requiring the GsyncOptions class to be static.  By that, I mean&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# any property on it, may or may not exist, since they are not statically&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# defined; so I can&apos;t simply just define the class with a whole bunch of&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# properties that are @property @staticmethods.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# So here&apos;s how it works:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Executing &apos;from libgsync.options import GsyncOptions&apos; does nothing more&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# than load up this module, define the Type and the Class and import them&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# into the callers namespace.  Simple.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Invoking &apos;GsyncOptions.debug&apos; for the first time, or any other property&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# causes the __metaclass__ __getattr__ method to be called, since the class&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# is not instantiated as a class instance yet.  The __getattr__ method on&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# the type then initialises the class (GsyncOptions) via the __initialiseClass&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# method.  This is the first and only time the class will actually have its&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# dictionary statically populated.  The docopt module is invoked to parse the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# usage document and generate command line options from it.  These are then&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# paired with their defaults and what&apos;s in sys.argv.  After all that, we&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# setup some dynamic properties that could not be defined by their name in&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# the usage, before everything is then transplanted onto the actual class&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# object (or static class GsyncOptions).&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Another piece of magic, is to allow command line options to be set in&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# in their native form and be translated into argparse style properties.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finally, the GsyncListOptions class is actually where the options are&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# stored.  This only acts as a mechanism for storing options as lists, to&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# allow aggregation of duplicate options or options that can be specified&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# multiple times.  The __getattr__ call hides this by default, returning the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# last item in a property&apos;s list.  However, if the entire list is required,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# calling the &apos;list()&apos; method on the GsyncOptions class, returns a reference&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# to the GsyncListOptions class, which contains all of the same properties&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# but as lists and without the duplication of having them as both lists and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# static singlton values.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# So this actually means that GsyncOptions is actually a static proxy class...&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ...And all this is neatly hidden within a closure for safe keeping.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GetGsyncOptionsType&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GsyncListOptions&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n        __initialised = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GsyncOptionsType&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__initialiseClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; GsyncListOptions._GsyncListOptions__initialised: &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; docopt &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; docopt\n            &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; libgsync.options &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; doc\n            &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; libgsync &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; __version__\n\n            options = docopt(\n                doc.__doc__ % __version__,\n                version = __version__,\n                options_first = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            )\n\n            paths = options.pop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;path&amp;gt;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(cls, &lt;span class=&quot;hljs-string&quot;&gt;&quot;destination_path&quot;&lt;/span&gt;, paths.pop() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; paths &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(cls, &lt;span class=&quot;hljs-string&quot;&gt;&quot;source_paths&quot;&lt;/span&gt;, paths)\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(cls, &lt;span class=&quot;hljs-string&quot;&gt;&quot;options&quot;&lt;/span&gt;, options)\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k, v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; options.iteritems():\n                &lt;span class=&quot;hljs-built_in&quot;&gt;setattr&lt;/span&gt;(cls, k, v)\n\n            GsyncListOptions._GsyncListOptions__initialised = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; GsyncListOptions\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name&lt;/span&gt;):\n            cls.__initialiseClass()\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;getattr&lt;/span&gt;(GsyncListOptions, name)[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__setattr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, value&lt;/span&gt;):\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Substitut option names: --an-option-name for an_option_name&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n            name = re.sub(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;^__&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, re.sub(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;-&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;_&quot;&lt;/span&gt;, name))\n            listvalue = []\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Ensure value is converted to a list type for GsyncListOptions&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(value, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; value:\n                    listvalue = [] + value\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                    listvalue = [ &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; ]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                listvalue = [ value ]\n\n            &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;.__setattr__(GsyncListOptions, name, listvalue)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Cleanup this module to prevent tinkering.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n    module = sys.modules[__name__]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; module.__dict__[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GetGsyncOptionsType&apos;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; GsyncOptionsType\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Our singlton abstract proxy class.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GsyncOptions&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __metaclass__ = GetGsyncOptionsType()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;The tl;dr version&lt;/h2&gt;\n\n&lt;p&gt;The &lt;code&gt;type(obj)&lt;/code&gt; function gets you the type of an object. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The &lt;code&gt;type()&lt;/code&gt; of a class is its &lt;em&gt;metaclass&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To use a metaclass:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    __metaclass__ = MyMetaClass\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; is its own metaclass. The class of a class is a metaclass-- the body of a class is the arguments passed to the metaclass that is used to construct the class.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#metaclasses&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt; you can read about how to use metaclasses to customize class construction.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;type&lt;/code&gt; is actually a &lt;code&gt;metaclass&lt;/code&gt; -- a class that creates another classes.\nMost &lt;code&gt;metaclass&lt;/code&gt; are the subclasses of &lt;code&gt;type&lt;/code&gt;. The &lt;code&gt;metaclass&lt;/code&gt; receives the &lt;code&gt;new&lt;/code&gt; class as its first argument and provide access to class object with details as mentioned below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MetaClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, bases, attrs&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;class name: %s&apos;&lt;/span&gt; %name )\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;Defining class %s&apos;&lt;/span&gt; %cls)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Bases %s: &apos;&lt;/span&gt; %bases)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Attributes&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (name, value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; attrs.items():\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;%s :%r&apos;&lt;/span&gt; %(name, value))\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NewClass&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;, metaclass=MetaClass):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;   get_choch=&lt;span class=&quot;hljs-string&quot;&gt;&apos;dairy&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;name&lt;/span&gt;: NewClass\nBases &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;: \nDefining &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;NewClass&apos;&lt;/span&gt;&amp;gt;\nget_choch :&lt;span class=&quot;hljs-string&quot;&gt;&apos;dairy&apos;&lt;/span&gt;\n__module__ :&lt;span class=&quot;hljs-string&quot;&gt;&apos;builtins&apos;&lt;/span&gt;\n__qualname__ :&lt;span class=&quot;hljs-string&quot;&gt;&apos;NewClass&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Notice that the class was not instantiated at any time; the simple act of creating the class triggered execution of the &lt;code&gt;metaclass&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Python classes are themselves objects - as in instance - of their meta-class. &lt;/p&gt;\n\n&lt;p&gt;The default metaclass, which is applied when when you determine classes as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;foo&lt;/span&gt;:\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;meta class are used to apply some rule to an entire set of classes. For example, suppose you&apos;re building an ORM to access a database, and you want records from each table to be of a class mapped to that table (based on fields, business rules, etc..,), a possible use of metaclass is for instance, connection pool logic, which is share by all classes of record from all tables. Another use is logic to to support foreign keys, which involves multiple classes of records. &lt;/p&gt;\n\n&lt;p&gt;when you define metaclass, you subclass type, and can overrided the following magic methods to insert your logic. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;somemeta&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    __new__(mcs, name, bases, clsdict):\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n  mcs: is the base metaclass, in this case type.\n  name: name of the new class, as provided by the user.\n  bases: tuple of base classes \n  clsdict: a dictionary containing all methods and attributes defined on class\n\n  you must return a class object by invoking the __new__ constructor on the base metaclass. \n ie: \n    return type.__call__(mcs, name, bases, clsdict).\n\n  in the following case:\n\n  class foo(baseclass):\n        __metaclass__ = somemeta\n\n  an_attr = 12\n\n  def bar(self):\n      ...\n\n  @classmethod\n  def foo(cls):\n      ...\n\n      arguments would be : ( somemeta, &quot;foo&quot;, (baseclass, baseofbase,..., object), {&quot;an_attr&quot;:12, &quot;bar&quot;: &amp;lt;function&amp;gt;, &quot;foo&quot;: &amp;lt;bound class method&amp;gt;}\n\n      you can modify any of these values before passing on to type\n      &quot;&quot;&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;.__call__(mcs, name, bases, clsdict)\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, bases, clsdict&lt;/span&gt;):\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; \n      called after type has been created. unlike in standard classes, __init__ method cannot modify the instance (cls) - and should be used for class validaton.\n      &quot;&quot;&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__prepare__&lt;/span&gt;():\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n        returns a dict or something that can be used as a namespace.\n        the type will then attach methods and attributes from class definition to it.\n\n        call order :\n\n        somemeta.__new__ -&amp;gt;  type.__new__ -&amp;gt; type.__init__ -&amp;gt; somemeta.__init__ \n        &quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mymethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; works like a classmethod, but for class objects. Also, my method will not be visible to instances of cls.\n        &quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;anyhow, those two are the most commonly used hooks. metaclassing is powerful, and above is nowhere near and exhaustive list of uses for metaclassing. &lt;/p&gt;\n    ","\n&lt;p&gt;The type() function can return the type of an object or create a new type, &lt;/p&gt;\n\n&lt;p&gt;for example, we can create a Hi class with the type() function and do not  need to use this way with class Hi(object):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;mike&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hi, %s.&apos;&lt;/span&gt; % name)\n\nHi = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hi&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;,), &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(hi=func))\nh = Hi()\nh.hi()\nHi, mike.\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(Hi)\n&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(h)\n__main__.Hi\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In addition to using type() to create classes dynamically, you can control creation behavior of class and use metaclass.&lt;/p&gt;\n\n&lt;p&gt;According to the Python object model, the class is the object, so the class must be an instance of another certain class.\nBy default, a Python class is instance of the type class. That is, type is metaclass of most of the built-in classes and metaclass of user-defined classes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ListMetaclass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, bases, attrs&lt;/span&gt;):\n        attrs[&lt;span class=&quot;hljs-string&quot;&gt;&apos;add&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; self, value: self.append(value)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;.__new__(cls, name, bases, attrs)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CustomList&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, metaclass=ListMetaclass):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\nlst = CustomList()\nlst.add(&lt;span class=&quot;hljs-string&quot;&gt;&apos;custom_list_1&apos;&lt;/span&gt;)\nlst.add(&lt;span class=&quot;hljs-string&quot;&gt;&apos;custom_list_2&apos;&lt;/span&gt;)\n\nlst\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;custom_list_1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;custom_list_2&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Magic will take effect when we passed keyword arguments in metaclass, it indicates the Python interpreter to create the CustomList through ListMetaclass. &lt;strong&gt;new&lt;/strong&gt; (), at this point, we can modify the class definition, for example, and add a new method and then return the revised definition.&lt;/p&gt;\n    ","\n&lt;p&gt;In addition to the published answers I can say that a &lt;code&gt;metaclass&lt;/code&gt; defines the behaviour for a class. So, you can explicitly set your metaclass. Whenever Python gets a keyword &lt;code&gt;class&lt;/code&gt; then it starts searching for the &lt;code&gt;metaclass&lt;/code&gt;. If it&apos;s not found  the default metaclass type is used to create the class&apos;s object. Using the &lt;code&gt;__metaclass__&lt;/code&gt; attribute, you can set &lt;code&gt;metaclass&lt;/code&gt; of your class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;:\n   __metaclass__ = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;# write here other method&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;# write here one more method&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(MyClass.__metaclass__)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;ll produce the output like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And, of course, you can create your own &lt;code&gt;metaclass&lt;/code&gt; to define the behaviour of any class that are created using your class.&lt;/p&gt;\n\n&lt;p&gt;For doing that, your default &lt;code&gt;metaclass&lt;/code&gt; type class must be inherited as this is the main &lt;code&gt;metaclass&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyMetaClass&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n   __metaclass__ = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;# you can write here any behaviour you want&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyTestClass&lt;/span&gt;:\n   __metaclass__ = MyMetaClass\n\nObj = MyTestClass()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Obj.__metaclass__)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(MyMetaClass.__metaclass__)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.MyMetaClass&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Note that in python 3.6 a new dunder method &lt;code&gt;__init_subclass__(cls, **kwargs)&lt;/code&gt; was introduced to replace a lot of common use cases for metaclasses. Is is called when a subclass of the defining class is created. See &lt;a href=&quot;https://docs.python.org/3.6/reference/datamodel.html&quot; rel=&quot;noreferrer&quot;&gt;python docs&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another example of what it can be used for:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You can use the &lt;code&gt;metaclass&lt;/code&gt; to change the function of its instance (the class).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MetaMemberControl&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    __slots__ = ()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;    @classmethod&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__prepare__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mcs, f_cls_name, f_cls_parents,  &lt;span class=&quot;hljs-comment&quot;&gt;# f_cls means: future class&lt;/span&gt;\n                    meta_args=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, meta_options=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):  &lt;span class=&quot;hljs-comment&quot;&gt;# meta_args and meta_options is not necessarily needed, just so you know.&lt;/span&gt;\n        f_cls_attr = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;do something or if you want to define your cool stuff of dict...&quot;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(make_your_special_dict=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f_cls_attr\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mcs, f_cls_name, f_cls_parents, f_cls_attr,\n                meta_args=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, meta_options=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n\n        original_getattr = f_cls_attr.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__getattribute__&apos;&lt;/span&gt;)\n        original_setattr = f_cls_attr.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__setattr__&apos;&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init_getattr&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, item&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; item.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;):  &lt;span class=&quot;hljs-comment&quot;&gt;# you can set break points at here&lt;/span&gt;\n                alias_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt; + item\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; alias_name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f_cls_attr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;__slots__&apos;&lt;/span&gt;]:\n                    item = alias_name\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; original_getattr &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; original_getattr(self, item)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(f_cls_name), self).__getattribute__(item)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init_setattr&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, key, value&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; key.startswith(&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt; + key) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f_cls_attr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;__slots__&apos;&lt;/span&gt;]:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; AttributeError(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;you can&apos;t modify private members:_&lt;span class=&quot;hljs-subst&quot;&gt;{key}&lt;/span&gt;&quot;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; original_setattr &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n                original_setattr(self, key, value)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(f_cls_name), self).__setattr__(key, value)\n\n        f_cls_attr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;__getattribute__&apos;&lt;/span&gt;] = init_getattr\n        f_cls_attr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;__setattr__&apos;&lt;/span&gt;] = init_setattr\n\n        cls = &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__new__(mcs, f_cls_name, f_cls_parents, f_cls_attr)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cls\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Human&lt;/span&gt;(metaclass=MetaMemberControl):\n    __slots__ = (&lt;span class=&quot;hljs-string&quot;&gt;&apos;_age&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_name&apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n        self._name = name\n        self._age = age\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getattribute__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, item&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n        is just for IDE recognize.\n        &quot;&quot;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;().__getattribute__(item)\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot; with MetaMemberControl then you don&apos;t have to write as following\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def age(self):\n        return self._age\n    &quot;&quot;&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_demo&lt;/span&gt;():\n    human = Human(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Carson&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# human.age = 18  # you can&apos;t modify private members:_age  &amp;lt;-- this is defined by yourself.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# human.k = 18  # &apos;Human&apos; object has no attribute &apos;k&apos;  &amp;lt;-- system error.&lt;/span&gt;\n    age1 = human._age  &lt;span class=&quot;hljs-comment&quot;&gt;# It&apos;s OK, although the IDE will show some warnings. (Access to a protected member _age of a class)&lt;/span&gt;\n\n    age2 = human.age  &lt;span class=&quot;hljs-comment&quot;&gt;# It&apos;s OK! see below:&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    if you do not define `__getattribute__` at the class of Human,\n    the IDE will show you: Unresolved attribute reference &apos;age&apos; for class &apos;Human&apos;\n    but it&apos;s ok on running since the MetaMemberControl will help you.\n    &quot;&quot;&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    test_demo()\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;metaclass&lt;/code&gt; is powerful, there are many things (such as monkey magic) you can do with it, but be careful this may only be known to you.&lt;/p&gt;\n    ","\n&lt;p&gt;In object-oriented programming, a metaclass is a class whose instances are classes. Just as an ordinary class defines the behavior of certain objects, a metaclass defines the behavior of certain class and their instances\nThe term metaclass simply means something used to create classes. In other words, it is the class of a class. The metaclass is used to create the class so like the object being an instance of a class, a class is an instance of a metaclass. In python classes are also considered objects.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The top answer is correct&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;But readers may be coming here searching answers about similarly named inner classes. They are present in popular libraries, such as &lt;code&gt;Django&lt;/code&gt; and &lt;code&gt;WTForms&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;As DavidW points out in the comments beneath this answer, &lt;strong&gt;these are &lt;em&gt;library-specific&lt;/em&gt; features and are not to be confused with the advanced, unrelated &lt;em&gt;Python language&lt;/em&gt; feature with a similar name&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Rather, these are namespaces within classes&apos; dicts. They are constructed using inner classes for sake of readability.&lt;/p&gt;\n&lt;p&gt;In this example special field, &lt;code&gt;abstract&lt;/code&gt; is visibly separate from fields of Author model.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; models\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Author&lt;/span&gt;(models.Model):\n    name = models.CharField(max_length=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n    email = models.EmailField()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Meta&lt;/span&gt;:\n        abstract = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Another example is from the documentation for &lt;code&gt;WTForms&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; wtforms.form &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Form\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; wtforms.csrf.session &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; SessionCSRF\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; wtforms.fields &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; StringField\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyBaseForm&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Form&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Meta&lt;/span&gt;:\n        csrf = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n        csrf_class = SessionCSRF\n\n    name = StringField(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This syntax does not get special treatment in the python programming language. &lt;code&gt;Meta&lt;/code&gt; is not a keyword here, and does not trigger metaclass behavior. Rather, third-party library code in packages like &lt;code&gt;Django&lt;/code&gt; and &lt;code&gt;WTForms&lt;/code&gt; reads this property in the constructors of certain classes, and elsewhere.&lt;/p&gt;\n&lt;p&gt;The presence of these declarations modifies the behavior of the classes that have these declarations. For example, &lt;code&gt;WTForms&lt;/code&gt; reads &lt;code&gt;self.Meta.csrf&lt;/code&gt; to determine if the form needs a &lt;code&gt;csrf&lt;/code&gt; field.&lt;/p&gt;\n    ","\n&lt;p&gt;A class, in Python, is an object, and just like any other object, it is an instance of &quot;something&quot;. This &quot;something&quot; is what is termed as a Metaclass. This metaclass is a special type of class that creates other class&apos;s objects. Hence, metaclass is responsible for making new classes. This allows the programmer to customize the way classes are generated.&lt;/p&gt;\n\n&lt;p&gt;To create a metaclass, overriding of &lt;strong&gt;new&lt;/strong&gt;() and &lt;strong&gt;init&lt;/strong&gt;() methods is usually done. &lt;strong&gt;new&lt;/strong&gt;() can be overridden to change the way objects are created, while &lt;strong&gt;init&lt;/strong&gt;() can be overridden to change the way of initializing the object. Metaclass can be created by a number of ways. One of the ways is to use type() function. type() function, when called with 3 parameters, creates a metaclass. The parameters are :-&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Class Name&lt;/li&gt;\n&lt;li&gt;Tuple having base classes inherited by class&lt;/li&gt;\n&lt;li&gt;A dictionary having all class methods and class variables&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Another way of creating a metaclass comprises of &apos;metaclass&apos; keyword. Define the metaclass as a simple class. In the parameters of inherited class, pass metaclass=metaclass_name&lt;/p&gt;\n\n&lt;p&gt;Metaclass can be specifically used in the following situations :-&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;when a particular effect has to be applied to all the subclasses&lt;/li&gt;\n&lt;li&gt;Automatic change of class (on creation) is required&lt;/li&gt;\n&lt;li&gt;By API developers&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;In Python, a metaclass is a subclass of a subclass that determines how a subclass behaves. A class is an instance of another metaclass. In Python, a class specifies how the class&apos;s instance will behave.&lt;/p&gt;\n&lt;p&gt;Since metaclasses are in charge of class generation, you can&amp;nbsp;write your own custom metaclasses to change how classes are created by performing additional actions or injecting code. Custom metaclasses aren&apos;t always important, but they can be.&lt;/p&gt;\n    ","\n&lt;p&gt;I saw an interesting use case for metaclasses in a package called &lt;code&gt;classutilities&lt;/code&gt;. It checks if all class variables are in upper case format (it is convenient to have unified logic for configuration classes), and checks if there are no instance level methods in class.\nAnother interesting example for metaclases was deactivation of unittests based on complex conditions (checking values of multiple environmental variables).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;What is Metaprogramming?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In a nutshell, we can say metaprogramming is the code that manipulates code. &lt;em&gt;Python supports a form of metaprogramming for classes called metaclasses.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;When to use:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Its usually used for something complicated, but a few cases where we use metaclasses are &lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;metaclasses propagate down the inheritance hierarchies. It will affect all the subclasses as well. If we have such a situation, then we should use metaclasses.&lt;/li&gt;\n&lt;li&gt;If we want to change class automatically, when it is created, we use metaclasses.&lt;/li&gt;\n&lt;li&gt;For API development, we might use metaclasses.&lt;/li&gt;\n&lt;li&gt;Further while creating: logging and profiling, interface checking, registering classes at creation time, automatically adding new methods\nautomatic property creation, proxies, automatic resource, locking/synchronization.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Diagram for newbies:&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/FOyn1.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/FOyn1.png&quot; alt=&quot;Metaclass&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Class Factory:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A metaclass is mostly used as a class factory. When you create an object by calling the class, Python creates a new class by calling the metaclass.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; Combined with the normal &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;__new__&lt;/code&gt; methods, metaclasses, allow you to do extra things when creating a class, like registering the new class with some registry or replacing the class with something else entirely.&lt;/p&gt;\n&lt;p&gt;1- &lt;strong&gt;&lt;code&gt;__new__():&lt;/code&gt;&lt;/strong&gt; It&apos;s a method which is called before &lt;code&gt;__init__()&lt;/code&gt;. It creates the object and returns it. We can override this method to control how the objects are created.&lt;/p&gt;\n&lt;p&gt;2- &lt;strong&gt;&lt;code&gt;__init__():&lt;/code&gt;&lt;/strong&gt; This method just initialize the created object passed as a parameter.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Ways of defining metaclasses:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;1- &lt;strong&gt;Method 1:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyMeta1&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__new__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;cls, name, bases, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2- &lt;strong&gt;Method 2:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyMeta2&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, bases, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;look this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Python &lt;span class=&quot;hljs-number&quot;&gt;3.10&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;rc2 (tags/v3&lt;span class=&quot;hljs-number&quot;&gt;.10&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;rc2:839d789, Sep  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2021&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;) [MSC v&lt;span class=&quot;hljs-number&quot;&gt;.1929&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt; bit (AMD64)] on win32\n&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;copyright&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; more information.\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Meta&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;type&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    test = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Worked!!!&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;This is &quot;Meta&quot; metaclass&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ObjectWithMetaClass&lt;/span&gt;(metaclass=Meta):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Object &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(Object())\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Object&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ObjectWithMetaClass &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(ObjectWithMetaClass())\nThis &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meta&quot;&lt;/span&gt; metaclass\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Object.test\nAttributeError: ...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ObjectWithMetaClass.test\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;Worked!!!&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(Object)\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(ObjectWithMetaClass)\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Meta&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(ObjectWithMetaClass))\n&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Object.__bases__\n(&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;,)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ObjectWithMetaClass.__bases__\n(&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;,)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(ObjectWithMetaClass).__bases__\n(&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;type&apos;&lt;/span&gt;&amp;gt;,)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;Object.__mro__\n(&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__.Object&apos;&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ObjectWithMetaClass.__mro__\n(This &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Meta&quot;&lt;/span&gt; metaclass, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In other words, when an object was not created (type of object), we looking MetaClass.&lt;/p&gt;\n    "],"383":["\n&lt;p&gt;In Python 3, you can use the &lt;code&gt;sep=&lt;/code&gt; and &lt;code&gt;end=&lt;/code&gt; parameters of the &lt;a href=&quot;https://docs.python.org/library/functions.html#print&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n\n&lt;p&gt;To not add a newline to the end of the string:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To not add a space between all the function arguments you want to print:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can pass any string to either parameter, and you can use both parameters at the same time.&lt;/p&gt;\n\n&lt;p&gt;If you are having trouble with buffering, you can flush the output by adding &lt;code&gt;flush=True&lt;/code&gt; keyword argument:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, flush=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Python 2.6 and 2.7&lt;/h2&gt;\n\n&lt;p&gt;From Python 2.6 you can either import the &lt;code&gt;print&lt;/code&gt; function from Python 3 using the &lt;a href=&quot;https://docs.python.org/2/library/__future__.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__future__&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which allows you to use the Python 3 solution above.&lt;/p&gt;\n\n&lt;p&gt;However, note that the &lt;code&gt;flush&lt;/code&gt; keyword is not available in the version of the &lt;code&gt;print&lt;/code&gt; function imported from &lt;code&gt;__future__&lt;/code&gt; in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you&apos;ll still need to flush manually with a call to &lt;code&gt;sys.stdout.flush()&lt;/code&gt;. You&apos;ll also have to rewrite all other print statements in the file where you do this import.&lt;/p&gt;\n\n&lt;p&gt;Or you can use &lt;a href=&quot;https://docs.python.org/library/sys.html#sys.stdout&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sys.stdout.write()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may also need to call&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sys.stdout.flush()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to ensure &lt;code&gt;stdout&lt;/code&gt; is flushed immediately.&lt;/p&gt;\n    ","\n&lt;p&gt;For Python 2 and earlier, it should be as simple as described in &lt;em&gt;&lt;a href=&quot;http://legacy.python.org/search/hypermail/python-1992/0115.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Re: How does one print without a CR?&lt;/a&gt;&lt;/em&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot; rel=&quot;nofollow noreferrer&quot;&gt;Guido van Rossum&lt;/a&gt; (paraphrased):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Is it possible to print something, but not automatically have a\ncarriage return appended to it?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Yes, append a comma after the last argument to print. For instance, this loop prints the numbers 0..9 on a line separated by spaces. Note the parameterless &quot;print&quot; that adds the final newline:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i,\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Note: The title of this question used to be something like &quot;How to printf in Python&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Since people may come here looking for it based on the title, Python also supports printf-style substitution:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;strings = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt; ]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Item %d: %s&quot;&lt;/span&gt; % (i, strings[i])\n...\nItem &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: one\nItem &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: two\nItem &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: three\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And, you can handily multiply string values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n..........\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use the Python&amp;nbsp;3-style print function for Python&amp;nbsp;2.6+ &lt;em&gt;(it will also break any existing keyworded print statements in the same file)&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# For Python 2 to use the print() function, removing the print keyword&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To not ruin all your Python 2 print keywords, create a separate &lt;code&gt;printf.py&lt;/code&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# printf.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, *args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt; % args, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, use it in your file:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; printf &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; printf\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    printf(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;done&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#..........done&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;More examples showing the printf style:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello %s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;)\nprintf(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%i %f&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;#hello world10 3.140000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How to print on the same line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n   sys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)\n   sys.stdout.flush()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function in Python 3.x has an optional &lt;code&gt;end&lt;/code&gt; parameter that lets you modify the ending character:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;HELLOHELLO&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;There&apos;s also &lt;code&gt;sep&lt;/code&gt; for separator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;, sep=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;HELLOHELLOHELLO&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If you wanted to use this in Python 2.x just add this at the &lt;strong&gt;start&lt;/strong&gt; of your file:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;em&gt;functools.partial&lt;/em&gt; to create a new function called &lt;em&gt;printf&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; functools\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;printf = functools.partial(&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world\\n&quot;&lt;/span&gt;)\nHello world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is an easy way to wrap a function with default parameters.&lt;/p&gt;\n    ","\n&lt;p&gt;In Python 3+, &lt;a href=&quot;https://docs.python.org/library/functions.html#print&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; is a function. When you call&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python translates it to&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can change &lt;code&gt;end&lt;/code&gt; to whatever you want.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello, World!&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.x, you can just add &lt;code&gt;,&lt;/code&gt; at the end of the &lt;code&gt;print&lt;/code&gt; function, so it won&apos;t print on a new line.&lt;/p&gt;\n    ","\n&lt;p&gt;Python &lt;strong&gt;3&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python &lt;strong&gt;2.6+&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function &lt;span class=&quot;hljs-comment&quot;&gt;# needs to be first statement in file&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python &lt;strong&gt;&amp;lt;=2.5&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If extra space is OK after each print, in Python 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Misleading&lt;/strong&gt; in Python 2 - &lt;strong&gt;avoid&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;# Avoid this if you want to remain sane&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This makes it look like print is a function, but it is not.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This is the `,` creating a tuple and the parentheses enclose an expression.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# To see the problem, try:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;# This will print `(&apos;.&apos;, &apos;x&apos;) `&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In general, there are two ways to do this:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Print without a newline in Python 3.x&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Append nothing after the print statement and remove &apos;\\n&apos; by using &lt;code&gt;end=&apos;&apos;&lt;/code&gt;, as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;)\nhello  &lt;span class=&quot;hljs-comment&quot;&gt;# Appending &apos;\\n&apos; automatically&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;)\nworld &lt;span class=&quot;hljs-comment&quot;&gt;# With previous &apos;\\n&apos; world comes down&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# The solution is:&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; world&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;# End with anything like end=&apos;-&apos; or end=&quot; &quot;, but not &apos;\\n&apos;&lt;/span&gt;\nhello world &lt;span class=&quot;hljs-comment&quot;&gt;# It seems to be the correct output&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Another Example in Loop&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Print without a newline in Python 2.x&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Adding a trailing comma says: after print, ignore &lt;code&gt;\\n&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; world&quot;&lt;/span&gt;\nhello world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Another Example in Loop&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;{} .&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i),\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can visit this &lt;a href=&quot;https://www.geeksforgeeks.org/print-without-newline-python/&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-comment&quot;&gt;# Keeps the initial message in buffer.&lt;/span&gt;\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\rfoobar bar black sheep&quot;&lt;/span&gt;)\nsys.stdout.flush()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Wait 2 seconds&lt;/span&gt;\ntime.sleep(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace the message with a new one.&lt;/span&gt;\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;hahahahaaa             &apos;&lt;/span&gt;)\nsys.stdout.flush()\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finalize the new message by printing a return carriage.&lt;/span&gt;\nsys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I recently had the same problem...&lt;/p&gt;\n&lt;p&gt;I solved it by doing:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys, os\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Reopen standard output with &quot;newline=None&quot;.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# in this mode,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Input:  accepts any newline character, outputs as &apos;\\n&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output: &apos;\\n&apos; converts to os.linesep&lt;/span&gt;\n\nsys.stdout = os.fdopen(sys.stdout.fileno(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;, newline=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This works on both Unix and Windows, but I have not tested it on Mac&amp;nbsp;OS&amp;nbsp;X.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do the same in Python&amp;nbsp;3 as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!usr/bin/python&lt;/span&gt;\n\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; :\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    i = i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And execute it with &lt;code&gt;python filename.py&lt;/code&gt; or &lt;code&gt;python3 filename.py&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Many of these answers seem a little complicated. In Python 3.x you simply do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&amp;lt;expr&amp;gt;, &amp;lt;expr&amp;gt;, ..., &amp;lt;expr&amp;gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The default value of end is &lt;code&gt;&quot;\\n&quot;&lt;/code&gt;. We are simply changing it to a space or you can also use &lt;code&gt;end=&quot;&quot;&lt;/code&gt; (no space) to do what &lt;code&gt;printf&lt;/code&gt; normally does.&lt;/p&gt;\n    ","\n&lt;p&gt;You want to print something in the &lt;em&gt;for&lt;/em&gt; loop right; but you don&apos;t want it print in new line every time...&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n\n OUTPUT:\n    hi\n    hi\n    hi\n    hi\n    hi\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;But you want it to print like this:\nhi hi hi hi hi hi right????&lt;/p&gt;\n&lt;p&gt;Just add a comma after printing &quot;hi&quot;.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OUTPUT:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;hi hi hi hi hi\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You will notice that all the above answers are correct. But I wanted to make a shortcut to always writing the &quot; end=&apos;&apos; &quot; parameter in the end.&lt;/p&gt;\n&lt;p&gt;You could define a function like&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Print&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, file=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, flush=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(*args, sep=sep, end=end, file=file, flush=flush)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It would accept all the number of parameters. Even it will accept all the other parameters, like file, flush, etc. and with the same name.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/493386/how-to-print-without-a-newline-or-space/4348063#4348063&quot;&gt;lenooh satisfied&lt;/a&gt; my query. I discovered this article while searching for &apos;python suppress newline&apos;. I&apos;m using &lt;a href=&quot;https://en.wikipedia.org/wiki/IDLE&quot; rel=&quot;nofollow noreferrer&quot;&gt;IDLE&amp;nbsp;3&lt;/a&gt; on Raspberry Pi to develop Python 3.2 for &lt;a href=&quot;https://en.wikipedia.org/wiki/PuTTY&quot; rel=&quot;nofollow noreferrer&quot;&gt;PuTTY&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I wanted to create a progress bar on the PuTTY command line. I didn&apos;t want the page scrolling away. I wanted a horizontal line to reassure the user from freaking out that the program hasn&apos;t cruncxed to a halt nor been sent to lunch on a merry infinite loop - as a plea to &apos;leave me be, I&apos;m doing fine, but this may take some time.&apos; interactive message - like a progress bar in text.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;print(&apos;Skimming for&apos;, search_string, &apos;\\b! .001&apos;, end=&apos;&apos;)&lt;/code&gt; initializes the message by preparing for the next screen-write, which will print three backspaces as  rubout and then a period, wiping off &apos;001&apos; and extending the line of periods.&lt;/p&gt;\n&lt;p&gt;After &lt;code&gt;search_string&lt;/code&gt; parrots user input, the &lt;code&gt;\\b!&lt;/code&gt; trims the exclamation point of my &lt;code&gt;search_string&lt;/code&gt; text to back over the space which &lt;code&gt;print()&lt;/code&gt; otherwise forces, properly placing the punctuation. That&apos;s followed by a space and the first &apos;dot&apos; of the &apos;progress bar&apos; which I&apos;m simulating.&lt;/p&gt;\n&lt;p&gt;Unnecessarily, the message is also then primed with the page number (formatted to a length of three with leading zeros) to take notice from the user that progress is being processed and which will also reflect the count of periods we will later build out to the right.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n\npage=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nsearch_string=&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Search for?&apos;&lt;/span&gt;,)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Skimming for&apos;&lt;/span&gt;, search_string, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\b! .001&apos;&lt;/span&gt;, end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\nsys.stdout.flush() &lt;span class=&quot;hljs-comment&quot;&gt;# the print function with an end=&apos;&apos; won&apos;t print unless forced&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; page:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# some stuff&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# search, scrub, and build bulk output list[], count items,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# set done flag True&lt;/span&gt;\n    page=page+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#done flag set in &apos;some_stuff&apos;&lt;/span&gt;\n    sys.stdout.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\b\\b\\b.&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(page, &lt;span class=&quot;hljs-string&quot;&gt;&apos;03&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;-- here&apos;s the progress bar meat&lt;/span&gt;\n    sys.stdout.flush()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; done: &lt;span class=&quot;hljs-comment&quot;&gt;#( flag alternative to break, exit or quit)&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\nSorting&apos;&lt;/span&gt;, item_count, &lt;span class=&quot;hljs-string&quot;&gt;&apos;items&apos;&lt;/span&gt;)\n        page=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# exits the &apos;while page&apos; loop&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.sort()\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item_count &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, items)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[item_count])\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#print footers here&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)==items):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#error_handler&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The progress bar meat is in the &lt;code&gt;sys.stdout.write(&apos;\\b\\b\\b.&apos;+format(page, &apos;03&apos;))&lt;/code&gt; line. First, to erase to the left, it backs up the cursor over the three numeric characters with the &apos;\\b\\b\\b&apos; as  rubout and drops a new period to add to the progress bar length. Then it writes three digits of the page it has progressed to so far. Because &lt;code&gt;sys.stdout.write()&lt;/code&gt; waits for a full buffer or the output channel to close, the &lt;code&gt;sys.stdout.flush()&lt;/code&gt; forces the immediate write. &lt;code&gt;sys.stdout.flush()&lt;/code&gt; is built into the end of &lt;code&gt;print()&lt;/code&gt; which is bypassed with &lt;code&gt;print(txt, end=&apos;&apos; )&lt;/code&gt;. Then the code loops through its mundane time intensive operations while it prints nothing more until it returns here to wipe three digits back, add a period and write three digits again, incremented.&lt;/p&gt;\n&lt;p&gt;The three digits wiped and rewritten is by no means necessary - it&apos;s just a flourish which exemplifies &lt;code&gt;sys.stdout.write()&lt;/code&gt; versus &lt;code&gt;print()&lt;/code&gt;. You could just as easily prime with a period and forget the three fancy backslash-b  backspaces (of course not writing formatted page counts as well) by just printing the period bar longer by one each time through - without spaces or newlines using just the &lt;code&gt;sys.stdout.write(&apos;.&apos;); sys.stdout.flush()&lt;/code&gt; pair.&lt;/p&gt;\n&lt;p&gt;Please note that the Raspberry Pi IDLE 3 Python shell does not honor the backspace as  rubout, but instead prints a space, creating an apparent list of fractions instead.&lt;/p&gt;\n    ","\n&lt;p&gt;just use the &lt;code&gt;end&lt;/code&gt; =&quot;&quot; or &lt;code&gt;sep&lt;/code&gt; =&quot;&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, end = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;.........\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#setting the value of (i) in the range 0 to 5 &lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above code gives the following output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    \n &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you want to print all these output in a straight line then all you should do is add an attribute called    end() to print.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#setting the value of (i) in the range 0 to 5 &lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And not just a space, you can also add other endings for your output. For example,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;#setting the value of (i) in the range 0 to 5 &lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, end=&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Remember:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; Note: The [&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; variable &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(int_1, int_2):] always prints till the variable &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n less than it&lt;span class=&quot;hljs-string&quot;&gt;&apos;s limit. (1 less than int_2)\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Or have a function like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Print&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sys.stdout.write(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(s))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then now:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# Or `xrange` for the Python 2 version&lt;/span&gt;\n    Print(i)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Outputs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;0123456789\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use &lt;code&gt;end=&apos;&apos;&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# aaaaa&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\b.&apos;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This worked in both 2.7.8 &amp;amp; 2.5.2 (&lt;a href=&quot;https://en.wikipedia.org/wiki/Enthought&quot; rel=&quot;nofollow noreferrer&quot;&gt;Enthought Canopy&lt;/a&gt; and OS&amp;nbsp;X terminal, respectively) -- no module imports or time travel required.&lt;/p&gt;\n    ","\n&lt;p&gt;Python3 :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;,end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:\n&lt;code&gt;Hello world&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;This method add spearator between provided texts :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;world&apos;&lt;/span&gt;,sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;code&gt;Hello,world&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You do not need to import any library. Just use the delete character:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;BS = &lt;span class=&quot;hljs-string&quot;&gt;u&apos;\\0008&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# The Unicode point for the &quot;delete&quot; character&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(BS + &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;),\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This removes the newline and the space (^_^)*.&lt;/p&gt;\n    "],"384":["\n&lt;p&gt;To get a sticky footer:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Have a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with &lt;code&gt;class=&quot;wrapper&quot;&lt;/code&gt; for your content.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Right &lt;strong&gt;before&lt;/strong&gt; the closing &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; of the &lt;code&gt;wrapper&lt;/code&gt; place the\n&lt;code&gt;&amp;lt;div class=&quot;push&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Right &lt;strong&gt;after&lt;/strong&gt; the closing &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; of the &lt;code&gt;wrapper&lt;/code&gt; place the \n&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;* {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.wrapper&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: auto &lt;span class=&quot;hljs-meta&quot;&gt;!important&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto -&lt;span class=&quot;hljs-number&quot;&gt;142px&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* the bottom margin is the negative value of the footer&apos;s height */&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt;, &lt;span class=&quot;hljs-selector-class&quot;&gt;.push&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;142px&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* .push must be the same height as .footer */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Use CSS vh units!&lt;/h2&gt;\n\n&lt;p&gt;Probably the most obvious and non-hacky way to go about a sticky footer would be to make use of the new &lt;a href=&quot;http://www.w3.org/TR/css3-values/#viewport-relative-lengths&quot;&gt;css viewport units&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Take for example the following simple markup:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;header goes here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This page has little content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;This is my footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the header is say 80px high and the footer is 40px high, then we can make our sticky footer &lt;em&gt;with one single rule&lt;/em&gt; on the content div:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.content {\n    min-height: calc(100vh - 120px);\n    /* 80px header + 40px footer = 120px  */\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which means: let the height of the content div be &lt;strong&gt;at least&lt;/strong&gt; 100% of the viewport height minus the combined heights of the header and footer.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s it.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;* {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;header&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;120px&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* 80px header + 40px footer = 120px  */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: pink;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;footer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: aqua;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;header goes here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This page has little content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;This is my footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;... and here&apos;s how the same code works with lots of content in the content div:&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;* {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;header&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;120px&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* 80px header + 40px footer = 120px  */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: pink;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;footer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: aqua;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;header goes here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    This is my footer\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;1) The height of the header and footer must be known&lt;/p&gt;\n\n&lt;p&gt;2) Old versions of IE (IE8-) and Android (4.4-) don&apos;t support viewport units. (&lt;a href=&quot;http://caniuse.com/viewport-units/embed/&quot;&gt;caniuse&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;3) Once upon a time webkit had a problem with viewport units within a calc rule. This has indeed been fixed (&lt;a href=&quot;http://blogs.adobe.com/webplatform/2014/06/12/improving-viewport-unit-support-in-webkit/&quot;&gt;see here&lt;/a&gt;) so there&apos;s no problem there. However if you&apos;re looking to avoid using calc for some reason you can get around that using negative margins and padding with box-sizing -&lt;/p&gt;\n\n&lt;p&gt;Like so:&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;* {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;header&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:relative;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: pink;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;:border-box;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;footer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: aqua;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;header goes here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    This is my footer\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Sticky footer with &lt;code&gt;display: flex&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;Solution inspired by &lt;a href=&quot;https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/&quot; rel=&quot;noreferrer&quot;&gt;Philip Walton&apos;s sticky footer&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Explanation&lt;/h2&gt;\n&lt;p&gt;This solution is &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/flex#Browser_compatibility&quot; rel=&quot;noreferrer&quot;&gt;valid only for&lt;/a&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Chrome  21.0&lt;/li&gt;\n&lt;li&gt;Firefox  20.0&lt;/li&gt;\n&lt;li&gt;Internet Explorer  10&lt;/li&gt;\n&lt;li&gt;Safari  6.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;It is based on the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/flex&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;flex&lt;/code&gt; display&lt;/a&gt;, leveraging the &lt;code&gt;flex-grow&lt;/code&gt; property, which allows an element to &lt;em&gt;grow&lt;/em&gt; in either &lt;strong&gt;height&lt;/strong&gt; or &lt;strong&gt;width&lt;/strong&gt; (when the &lt;code&gt;flow-direction&lt;/code&gt; is set to either &lt;code&gt;column&lt;/code&gt; or &lt;code&gt;row&lt;/code&gt; respectively), to occupy the extra space in the container.&lt;/p&gt;\n&lt;p&gt;We are going to leverage also the &lt;code&gt;vh&lt;/code&gt; unit, where &lt;code&gt;1vh&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/length#Viewport-percentage_lengths&quot; rel=&quot;noreferrer&quot;&gt;defined as&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;1/100th of the height of the viewport&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Therefore a height of &lt;code&gt;100vh&lt;/code&gt; it&apos;s a concise way to tell an element to span the full viewport&apos;s height.&lt;/p&gt;\n&lt;p&gt;This is how you would structure your web page:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;----------- body -----------\n----------------------------\n\n---------- footer ----------\n----------------------------\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In order to have the footer stick to the bottom of the page, you want the space between the body and the footer to grow as much as it takes to push the footer at the bottom of the page.&lt;/p&gt;\n&lt;p&gt;Therefore our layout becomes:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;----------- body -----------\n----------------------------\n\n---------- spacer ----------\n                             &amp;lt;- This element must grow in height\n----------------------------\n\n---------- footer ----------\n----------------------------\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Implementation&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.spacer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* make it visible for the purposes of demo */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: red;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;spacer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You can play with it at &lt;a href=&quot;https://jsfiddle.net/xzchhLjp/&quot; rel=&quot;noreferrer&quot;&gt;the JSFiddle&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Safari quirks&lt;/h2&gt;\n&lt;p&gt;Be aware that Safari has a &lt;a href=&quot;http://philipwalton.com/articles/normalizing-cross-browser-flexbox-bugs/#minimum-content-sizing-of-flex-items&quot; rel=&quot;noreferrer&quot;&gt;flawed implementation of the &lt;code&gt;flex-shrink&lt;/code&gt; property&lt;/a&gt;, which allows items to shrink more than the minimum height that would be required to display the content.\nTo fix this issue you will have to set the &lt;code&gt;flex-shrink&lt;/code&gt; property explicitly to 0 to the &lt;code&gt;.content&lt;/code&gt; and the &lt;code&gt;footer&lt;/code&gt; in the above example:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-shrink&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-shrink&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, change the &lt;code&gt;flex&lt;/code&gt; style for the &lt;code&gt;spacer&lt;/code&gt; element into:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.spacer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This 3-value shorthand style is equivalent to the following full setup:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.spacer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-grow&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-shrink&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-basis&lt;/span&gt;: auto;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Elegantly works everywhere.&lt;/p&gt;\n    ","\n&lt;p&gt;You could use &lt;code&gt;position: absolute&lt;/code&gt; following to put the footer at the bottom of the page, but then make sure your 2 columns have the appropriate &lt;code&gt;margin-bottom&lt;/code&gt; so that they never get occluded by the footer.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#footer&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-id&quot;&gt;#content&lt;/span&gt;, &lt;span class=&quot;hljs-selector-id&quot;&gt;#sidebar&lt;/span&gt; { \n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin-bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5em&lt;/span&gt;; \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a solution with jQuery that works like a charm. It checks if the height of the window is greater than the height of the body. If it is, then it changes the margin-top of the footer to compensate. Tested in Firefox, Chrome, Safari and Opera.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$( function () {\n\n    var height_diff = $( window ).height() - $( &apos;body&apos; ).height();\n    if ( height_diff &amp;gt; 0 ) {\n        $( &apos;#footer&apos; ).css( &apos;margin-top&apos;, height_diff );\n    }\n\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your footer already has a margin-top (of 50 pixels, for example) you will need to change the last part for:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;css( &apos;margin-top&apos;, height_diff + 50 )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Set the CSS for the &lt;code&gt;#footer&lt;/code&gt; to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n&lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will then need to add a &lt;code&gt;padding&lt;/code&gt; or &lt;code&gt;margin&lt;/code&gt; to the bottom of your &lt;code&gt;#sidebar&lt;/code&gt; and &lt;code&gt;#content&lt;/code&gt; to match the height of &lt;code&gt;#footer&lt;/code&gt; or when they overlap, the &lt;code&gt;#footer&lt;/code&gt; will cover them.&lt;/p&gt;\n\n&lt;p&gt;Also, if I remember correctly, IE6 has a problem with the &lt;code&gt;bottom: 0&lt;/code&gt; CSS. You might have to use a JS solution for IE6 (if you care about IE6 that is).&lt;/p&gt;\n    ","\n&lt;p&gt;A similar solution to &lt;a href=&quot;https://stackoverflow.com/a/34146411/8620333&quot;&gt;@gcedo&lt;/a&gt; but without the need of adding an intermediate content in order to push the footer down. We can simply add &lt;code&gt;margin-top:auto&lt;/code&gt; to the footer and it will be pushed to the bottom of the page regardless his height or the height of the content above.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-top&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: green;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  some content here\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  some content\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I have myself struggled with this sometimes and I always found that the solution with all those div&apos;s within each other was a messy solution. \nI just messed around with it a bit, and I personally found out that this works and it certainly is one of the simplest ways:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;html {\n    position: relative;\n}\n\nhtml, body {\n    margin: 0;\n    padding: 0;\n    min-height: 100%;\n}\n\nfooter {\n    position: absolute;\n    bottom: 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What I like about this is that no extra HTML needs to be applied. You can simply add this CSS and then write your HTML as whenever&lt;/p&gt;\n    ","\n&lt;p&gt;Since the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot; rel=&quot;nofollow noreferrer&quot;&gt;Grid&lt;/a&gt; solution hasn&apos;t been presented yet, here it is, with just two &lt;em&gt;declarations&lt;/em&gt; for the &lt;em&gt;parent element&lt;/em&gt;, if we take the &lt;code&gt;height: 100%&lt;/code&gt; and &lt;code&gt;margin: 0&lt;/code&gt; for granted:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: grid; &lt;span class=&quot;hljs-comment&quot;&gt;/* generates a block-level grid */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-content&lt;/span&gt;: space-between; &lt;span class=&quot;hljs-comment&quot;&gt;/* places an even amount of space between each grid item, with no space at the far ends */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: lightgreen;\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* demo / for default snippet window */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;animation&lt;/span&gt;: height &lt;span class=&quot;hljs-number&quot;&gt;2.5s&lt;/span&gt; linear alternate infinite;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;footer&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: lightblue}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt; {&lt;span class=&quot;hljs-selector-tag&quot;&gt;to&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;250px&lt;/span&gt;}}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;align-content: space-between&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The items are evenly distributed within the alignment container along\n  the cross axis. The spacing between each pair of adjacent items is the\n  same. The first item is flush with the main-start edge, and the last\n  item is flush with the main-end edge.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;CSS :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  #container{\n            width: 100%;\n            height: 100vh;\n            }\n #container.footer{\n            float:left;\n            width:100%;\n            height:20vh;\n            margin-top:80vh;\n            background-color:red;\n            }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n               &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n           &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should do the trick if you are looking for a responsive footer aligned at the bottom of the page,which always keeps a top-margin of 80% of the viewport height.&lt;/p&gt;\n    ","\n&lt;p&gt;For this question many of the answers I have seen are clunky, hard to implement and inefficient so I thought I&apos;d take a shot at it and come up with my own solution which is just a tiny bit of css and html&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;2rem&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: grey;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2rem&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: yellow;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test as body&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test as footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;this works by setting the height of the footer and then using css calc to work out the minimum height the page can be with the footer still at the bottom, hope this helps some people :)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.fixed&lt;/span&gt; {\n   &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: fixed;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n   &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#73AD21&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;height:1500px&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;position: fixed;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;fixed&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      This div element has position: fixed;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you don&apos;t want it using position fixed, and following you annoyingly on mobile, this seems to be working for me so far.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;html {\n    min-height: 100%;\n    position: relative;\n}\n\n#site-footer {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    padding: 6px 2px;\n    background: #32383e;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just set the html to &lt;code&gt;min-height: 100%;&lt;/code&gt; and &lt;code&gt;position: relative;&lt;/code&gt;, then &lt;code&gt;position: absolute; bottom: 0; left: 0;&lt;/code&gt; on the footer. I then made sure the footer was the last element in the body.&lt;/p&gt;\n\n&lt;p&gt;Let me know if this doesn&apos;t work for anyone else, and why. I know these tedious style hacks can behave strangely among various circumstances I&apos;d not thought of.&lt;/p&gt;\n    ","\n&lt;p&gt;Use absolute positioning and z-index to create a sticky footer div at any resolution using the following steps:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Create a footer div with &lt;code&gt;position: absolute; bottom: 0;&lt;/code&gt; and the desired height&lt;/li&gt;\n&lt;li&gt;Set the padding of the footer to add whitespace between the content bottom and the window bottom&lt;/li&gt;\n&lt;li&gt;Create a container &lt;code&gt;div&lt;/code&gt; that wraps the body content with &lt;code&gt;position: relative; min-height: 100%;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Add bottom padding to the main content &lt;code&gt;div&lt;/code&gt; that is equal to the height plus padding of the footer&lt;/li&gt;\n&lt;li&gt;Set the &lt;code&gt;z-index&lt;/code&gt; of the footer greater than the container &lt;code&gt;div&lt;/code&gt; if the footer is clipped&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Here is an example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!doctype &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Sticky Footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n      &lt;span class=&quot;hljs-selector-class&quot;&gt;.wrapper&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative; &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; }\n      &lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute; &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;padding-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: gray; }\n      &lt;span class=&quot;hljs-selector-class&quot;&gt;.column&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2000px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;padding-bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: grxqeen; }\n      &lt;span class=&quot;hljs-comment&quot;&gt;/* Set the `html`, `body`, and container `div` to `height: 100%` for IE6 */&lt;/span&gt;\n    &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;column&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a test. This is only a test...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Just invented a very simple solution that worked great for me. You just wrap all page content except for the footer within in a div, and then set the min-height to 100% of the viewpoint minus the height of the footer. No need for absolute positioning on the footer or multiple wrapper divs.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.page-body&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;);} &lt;span class=&quot;hljs-comment&quot;&gt;/*Replace 400px with your footer height*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;On my sites I always use:&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;position: fixed;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...in my CSS for a footer. That anchors it to the bottom of the page.&lt;/p&gt;\n    ","\n&lt;p&gt;One solution would be to set the min-height for the boxes. Unfortunately it seems that &lt;a href=&quot;http://www.wellstyled.com/css-minheight-hack.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;it&apos;s not well supported by IE&lt;/a&gt; (surprise).&lt;/p&gt;\n    ","\n&lt;p&gt;None of these pure css solutions work properly with dynamically resizing content (at least on firefox and Safari) e.g., if you have a background set on the container div, the page and then resize (adding a few rows) table inside the div, the table can stick out of the bottom of the styled area, i.e., you can have half the table in white on black theme and half the table complete white because both the font-color and background color is white. It&apos;s basically unfixable with themeroller pages.&lt;/p&gt;\n\n&lt;p&gt;Nested div multi-column layout is an ugly hack and the 100% min-height body/container div for sticking footer is an uglier hack.&lt;/p&gt;\n\n&lt;p&gt;The only none-script solution that works on all the browsers I&apos;ve tried: a much simpler/shorter table with thead (for header)/tfoot (for footer)/tbody (td&apos;s for any number of columns) and 100% height. But this have perceived semantic and SEO disadvantages (tfoot must appear before tbody. ARIA roles may help decent search engines though).&lt;/p&gt;\n    ","\n&lt;p&gt;Multiple people have put the answer to this simple problem up here, but I have one thing to add, considering how frustrated I was until I figured out what I was doing wrong.&lt;/p&gt;\n\n&lt;p&gt;As mentioned the most straightforward way to do this is like so..&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;html {\n    position: relative;\n    min-height: 100%;\n}\n\nbody {\n    background-color: transparent;\n    position: static;\n    height: 100%;\n    margin-bottom: 30px;\n}\n\n.site-footer {\n    position: absolute;\n    height: 30px;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However the property not mentioned in posts, presumably because it is usually default, is the &lt;strong&gt;position: static&lt;/strong&gt; on the body tag. Position relative will not work!&lt;/p&gt;\n\n&lt;p&gt;My wordpress theme had overridden the default body display and it confused me for an obnoxiously long time.&lt;/p&gt;\n    ","\n&lt;p&gt;An old thread I know, but if you are looking for a responsive solution, this jQuery addition will help: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$(window).on(&apos;resize&apos;,sticky);\n$(document).bind(&quot;ready&quot;, function() {\n   sticky();\n});\n\nfunction sticky() {\n   var fh = $(&quot;footer&quot;).outerHeight();\n   $(&quot;#push&quot;).css({&apos;height&apos;: fh});\n   $(&quot;#wrapper&quot;).css({&apos;margin-bottom&apos;: -fh});\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Full guide can be found here: &lt;a href=&quot;https://pixeldesigns.co.uk/blog/responsive-jquery-sticky-footer/&quot; rel=&quot;nofollow&quot;&gt;https://pixeldesigns.co.uk/blog/responsive-jquery-sticky-footer/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I have created a very simple library &lt;a href=&quot;https://github.com/ravinderpayal/FooterJS&quot; rel=&quot;nofollow&quot;&gt;https://github.com/ravinderpayal/FooterJS&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;It is very simple in use. After including library, just call this line of code. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;footer.init(document.getElementById(&quot;ID_OF_ELEMENT_CONTAINING_FOOTER&quot;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Footers can be dynamically changed by recalling above function with different parameter/id. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;footer.init(document.getElementById(&quot;ID_OF_ANOTHER_ELEMENT_CONTAINING_FOOTER&quot;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note:- You haven&apos;t to alter or add any CSS. Library is dynamic which implies that even if screen is resized after loading page it will reset the position of footer. I have created this library, because CSS solves the problem for a while but when size of display changes significantly,from desktop to tablet or vice versa, they either overlap the content or they no longer remains sticky.&lt;/p&gt;\n\n&lt;p&gt;Another solution is CSS Media Queries, but you have to manually write different CSS styles for different size of screens while this library does its work automatically and is supported by all basic JavaScript supporting browser.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;\nCSS solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;@media only screen and (min-height: 768px) {/* or height/length of body content including footer*/\n    /* For mobile phones: */\n    #footer {\n        width: 100%;\n        position:fixed;\n        bottom:0;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, if the height of display is more than your content length, we will make footer fixed to bottom and if not, it will automatically appear in very end of display as you need to scroll to view this.&lt;/p&gt;\n\n&lt;p&gt;And, it seems a better solution than JavaScript/library one.&lt;/p&gt;\n    ","\n&lt;p&gt;I wasn&apos;t having any luck with the solutions suggested on this page before but then finally, this little trick worked. I&apos;ll include it as another possible solution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;footer {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1rem;\n  background-color: #efefef;\n  text-align: center;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For me the nicest way of displaying it (the footer) is sticking to the bottom but not covering content all the time:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;#my_footer {\n    position: static\n    fixed; bottom: 0\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;jQuery CROSS BROWSER CUSTOM PLUGIN - $.footerBottom()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Or use jQuery like I do, and set your footer height to &lt;code&gt;auto&lt;/code&gt; or to &lt;code&gt;fix&lt;/code&gt;, whatever you like, it will work anyway. this plugin uses jQuery selectors so to make it work, you will have to include the jQuery library to your file.&lt;/p&gt;\n\n&lt;p&gt;Here is how you run the plugin. Import jQuery, copy the code of this custom jQuery plugin and import it after importing jQuery! It is very simple and basic, but important. &lt;/p&gt;\n\n&lt;p&gt;When you do it, all you have to do is run this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;$.footerBottom({target:&quot;footer&quot;}); //as html5 tag &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;.\n// You can change it to your preferred &quot;div&quot; with for example class &quot;footer&quot; \n// by setting target to {target:&quot;div.footer&quot;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;there is no need to place it inside the document ready event. It will run well as it is. It will recalculate the position of your footer when the page is loaded and when the window get resized.&lt;/p&gt;\n\n&lt;p&gt;Here is the code of the plugin which you do not have to understand. Just know how to implement it. It does the job for you. However, if you like to know how it works, just look through the code. I left comments for you.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;//import jQuery library before this script\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Import jQuery library before this script&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Our custom jQuery Plugin&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;$&lt;/span&gt;) {\n  $.footerBottom = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;options&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Or use &quot;$.fn.footerBottom&quot; or &quot;$.footerBottom&quot; to call it globally directly from $.footerBottom();&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; defaults = {\n      &lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;container&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;html&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;innercontainer&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;css&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;footer&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        },\n\n        &lt;span class=&quot;hljs-attr&quot;&gt;html&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;relative&quot;&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;minHeight&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;100%&quot;&lt;/span&gt;\n        }\n      }\n    };\n\n    options = $.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(defaults, options);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// JUST SET SOME CSS DEFINED IN THE DEFAULTS SETTINGS ABOVE&lt;/span&gt;\n    $(options.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;({\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;position&quot;&lt;/span&gt;: options.&lt;span class=&quot;hljs-property&quot;&gt;css&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;footer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;position&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;left&quot;&lt;/span&gt;: options.&lt;span class=&quot;hljs-property&quot;&gt;css&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;footer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;bottom&quot;&lt;/span&gt;: options.&lt;span class=&quot;hljs-property&quot;&gt;css&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;footer&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt;,\n    });\n\n    $(options.&lt;span class=&quot;hljs-property&quot;&gt;container&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;({\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;position&quot;&lt;/span&gt;: options.&lt;span class=&quot;hljs-property&quot;&gt;css&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;html&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;position&lt;/span&gt;,\n      &lt;span class=&quot;hljs-string&quot;&gt;&quot;min-height&quot;&lt;/span&gt;: options.&lt;span class=&quot;hljs-property&quot;&gt;css&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;html&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;minHeight&lt;/span&gt;,\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;logic&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; footerOuterHeight = $(options.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;outerHeight&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Get outer footer height&lt;/span&gt;\n      $(options.&lt;span class=&quot;hljs-property&quot;&gt;innercontainer&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;padding-bottom&apos;&lt;/span&gt;, footerOuterHeight + &lt;span class=&quot;hljs-string&quot;&gt;&quot;px&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Set padding equal to footer height on body element&lt;/span&gt;\n      $(options.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;height&apos;&lt;/span&gt;, footerOuterHeight + &lt;span class=&quot;hljs-string&quot;&gt;&quot;!important&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Set outerHeight of footer element to ... footer&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jQ custom plugin footerBottom runs&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Display text in console so ou can check that it works in your browser. Delete it if you like.&lt;/span&gt;\n    };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// DEFINE WHEN TO RUN FUNCTION&lt;/span&gt;\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;load resize&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Run on page loaded and on window resized&lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;logic&lt;/span&gt;();\n    });\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RETURN OBJECT FOR CHAINING IF NEEDED - IF NOT DELETE&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// return this.each(function() {&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//   this.checked = true;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// });&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// return this;&lt;/span&gt;\n  };\n})(jQuery); &lt;span class=&quot;hljs-comment&quot;&gt;// End of plugin&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// USE EXAMPLE&lt;/span&gt;\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;footerBottom&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Run our plugin with all default settings for HTML5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Set your footer CSS to what ever you like it will work anyway */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;footer&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- The structure doesn&apos;t matter much, you will always have html and body tag, so just make sure to point to your footer as needed if you use html5, as it should just do nothing run plugin with no settings it will work by default with the &amp;lt;footer&amp;gt; html5 tag --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Lorem ipsum...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Copyright 2009 Your name&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Copyright 2009 Your name&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Copyright 2009 Your name&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The flex solutions worked for me as far as making the footer sticky, but unfortunately changing the body to use flex layout made some of our page layouts change, and not for the better. What finally worked for me was:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    jQuery(document).ready(function() {\n\n    var fht = jQuery(&apos;footer&apos;).outerHeight(true);\n    jQuery(&apos;main&apos;).css(&apos;min-height&apos;, &quot;calc(92vh - &quot; + fht + &quot;px)&quot;);\n\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I got this from ctf0&apos;s response at &lt;a href=&quot;https://css-tricks.com/couple-takes-sticky-footer/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://css-tricks.com/couple-takes-sticky-footer/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;REACT-friendly solution - (no spacer div required)&lt;/h1&gt;\n&lt;p&gt;Chris Coyier (the venerable CSS-Tricks website) has kept his &lt;a href=&quot;https://css-tricks.com/couple-takes-sticky-footer/&quot; rel=&quot;nofollow noreferrer&quot;&gt;page on the Sticky-Footer&lt;/a&gt; up-to-date, with at least FIVE methods now for creating a sticky footer, including using FlexBox and CSS-Grid.&lt;/p&gt;\n&lt;p&gt;Why is this important? Because, for me, the earlier/older methods I used for years did not work with React - I had to use Chris&apos; flexbox solution - which was &lt;em&gt;&lt;strong&gt;easy&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;worked&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Below is his &lt;a href=&quot;https://css-tricks.com/couple-takes-sticky-footer/#there-is-flexbox&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS-Tricks flexbox Sticky Footer&lt;/a&gt; - just look at the code below, it cannot possibly be simpler.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(The (below) StackSnippet example does not perfectly render the bottom of the example. The footer is shown extending past the bottom of the screen, which does not happen in real life.)&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;     {&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:flex; &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;:column;}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.content&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto;} &lt;span class=&quot;hljs-comment&quot;&gt;/* flex: grow / shrink / flex-basis; */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt;  {&lt;span class=&quot;hljs-attribute&quot;&gt;flex-shrink&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* ---- BELOW IS ONLY for demo ---- */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.footer&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: palegreen;}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Page Content - height expands to fill space&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Footer Content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Chris also demonstrates this &lt;a href=&quot;https://css-tricks.com/couple-takes-sticky-footer/#there-is-grid&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS-Grid solution&lt;/a&gt; for those who prefer grid.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;References:&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS-Tricks - A Complete Guide to Flexbox&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Have a look at &lt;a href=&quot;http://1linelayouts.glitch.me/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://1linelayouts.glitch.me/&lt;/a&gt;, example 4. Una Kravets nails this problem.&lt;/p&gt;\n&lt;p&gt;This creates a 3 layer page with header, main and footer.&lt;/p&gt;\n&lt;p&gt;-Your footer will always stay at the bottom, and use space to fit the content;&lt;/p&gt;\n&lt;p&gt;-Your header will always stay at the top, and use space to fit the content;&lt;/p&gt;\n&lt;p&gt;-Your main will always use all the available remaining space (remaining fraction of space), enough to fill the screen, if need.&lt;/p&gt;\n&lt;h2&gt;HTML&lt;/h2&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue section&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;contenteditable&lt;/span&gt;&amp;gt;&lt;/span&gt;Header&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;coral section&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;contenteditable&lt;/span&gt;&amp;gt;&lt;/span&gt;Main&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;purple section&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;contenteditable&lt;/span&gt;&amp;gt;&lt;/span&gt;Footer Content&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;CSS&lt;/h2&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;.parent {\n  display: grid;\n  height: 95vh; /* no scroll bars if few content */\n  grid-template-rows: auto 1fr auto;\n}\n    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A quick easy solution by using flex&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Give the &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; a height of &lt;code&gt;100%&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Display the body as &lt;code&gt;flex&lt;/code&gt; with &lt;code&gt;column&lt;/code&gt; direction:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; { \n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Add &lt;code&gt;flex-grow: 1&lt;/code&gt; for the main&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;main&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-grow&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt; specifies how much of the remaining space in the flex container should be assigned to the item (the flex grow factor).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;*, \n*&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt;,\n*&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::before&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;html&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-direction&lt;/span&gt;: column;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;main&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;flex-grow&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;footer&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1rem&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex; \n  &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; \n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;section&lt;/span&gt; &amp;gt;&lt;/span&gt;\n            Hero\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt; &amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;copy;&lt;/span&gt; Copyright 2021&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For natural header and footer heights use CSS Flexbox.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/Lsb6dk14/&quot; rel=&quot;nofollow noreferrer&quot;&gt;See JS Fiddle&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    ...\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    ...\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    ...\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;html {\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  min-height: 100vh;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n}\n\nmain {\n  flex-grow: 1;\n  flex-shrink: 0;\n}\n\nheader,\nfooter {\n  flex: none;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try putting a container div (with overflow:auto) around the content and sidebar.&lt;/p&gt;\n\n&lt;p&gt;If that doesn&apos;t work, do you have any screenshots or example links where the footer isn&apos;t displayed properly?&lt;/p&gt;\n    "],"385":["\n&lt;p&gt;Three main options:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;for (var i = 0; i &amp;lt; xs.length; i++) { console.log(xs[i]); }&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;xs.forEach((x, i) =&amp;gt; console.log(x));&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;for (const x of xs) { console.log(x); }&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Detailed examples are below.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;1. Sequential &lt;code&gt;for&lt;/code&gt; loop:&lt;/h1&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arrayLength = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arrayLength; i++) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myStringArray[i]);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Do something&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Works on every environment&lt;/li&gt;\n&lt;li&gt;You can use &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; flow control statements&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Too verbose&lt;/li&gt;\n&lt;li&gt;Imperative&lt;/li&gt;\n&lt;li&gt;Easy to have &lt;a href=&quot;https://en.wikipedia.org/wiki/Off-by-one_error#Looping_over_arrays&quot; rel=&quot;noreferrer&quot;&gt;off-by-one errors&lt;/a&gt; (sometimes also called a &lt;em&gt;fence post error&lt;/em&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;2. &lt;code&gt;Array.prototype.forEach&lt;/code&gt;:&lt;/h1&gt;\n&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#5th_Edition&quot; rel=&quot;noreferrer&quot;&gt;ES5&lt;/a&gt; specification introduced a lot of beneficial array methods. One of them, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.forEach&lt;/code&gt;&lt;/a&gt;, gave us a concise way to iterate over an array:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;]\narray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item, index&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item, index);\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Being almost ten years as the time of writing that the ES5 specification was released (Dec. 2009), it has been implemented by nearly all modern engines in the desktop, server, and mobile environments, so it&apos;s safe to use them.&lt;/p&gt;\n&lt;p&gt;And with the ES6 arrow function syntax, it&apos;s even more succinct:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Arrow functions are also widely implemented unless you plan to support ancient platforms (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_11#Internet_Explorer_11&quot; rel=&quot;noreferrer&quot;&gt;Internet&amp;nbsp;Explorer&amp;nbsp;11&lt;/a&gt;); you are also safe to go.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Very short and succinct.&lt;/li&gt;\n&lt;li&gt;Declarative&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Cannot use &lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Normally, you can replace the need to &lt;code&gt;break&lt;/code&gt; out of imperative loops by filtering the array elements before iterating them, for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;condition&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n     .&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keep in mind if you are iterating an array &lt;em&gt;to build another array from it&lt;/em&gt;, you should use &lt;code&gt;map&lt;/code&gt;. I&apos;ve seen this anti-pattern so many times.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Anti-pattern:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;], doubled = [];\n\nnumbers.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { doubled[i] = n * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Proper use case of &lt;em&gt;map&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; doubled = numbers.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; n * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(doubled);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Also, if you are trying to &lt;em&gt;reduce&lt;/em&gt; the array to a value, for example, you want to sum an array of numbers, you should use the &lt;em&gt;reduce&lt;/em&gt; method.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Anti-pattern:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\nnumbers.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt; =&amp;gt;&lt;/span&gt; { sum += num });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Proper use of &lt;em&gt;reduce&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sum = numbers.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;total, n&lt;/span&gt;) =&amp;gt;&lt;/span&gt; total + n, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(sum);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h1&gt;3. ES6 &lt;code&gt;for-of&lt;/code&gt; statement:&lt;/h1&gt;\n&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015&quot; rel=&quot;noreferrer&quot;&gt;ES6&lt;/a&gt; standard introduces the concept of iterable objects and defines a new construct for traversing data, the &lt;code&gt;for...of&lt;/code&gt; statement.&lt;/p&gt;\n&lt;p&gt;This statement works for any kind of iterable object and also for generators (any object that has a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;\\[Symbol.iterator\\]&lt;/code&gt;&lt;/a&gt; property).&lt;/p&gt;\n&lt;p&gt;Array objects are by definition built-in iterables in ES6, so you can use this statement on them:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; colors = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; color &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; colors){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(color);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It can iterate over a large variety of objects.&lt;/li&gt;\n&lt;li&gt;Can use normal flow control statements (&lt;code&gt;break&lt;/code&gt; / &lt;code&gt;continue&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Useful to iterate serially asynchronous values.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you are targeting older browsers, the transpiled output &lt;a href=&quot;https://babeljs.io/repl#?babili=false&amp;amp;browsers=&amp;amp;build=&amp;amp;builtIns=false&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=GYewTgBAFAxiB2BnALhOAbcETDSTYiAlAN4BQEeS-ApgHSYDms-4RA3GQL5A&amp;amp;debug=false&amp;amp;forceAllTransforms=false&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=true&amp;amp;fileSize=false&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=false&amp;amp;presets=es2015&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.4.4&amp;amp;externalPlugins=&quot; rel=&quot;noreferrer&quot;&gt;might surprise you&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Do not use &lt;code&gt;for...in&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;@zipcodeman suggests the use of the &lt;code&gt;for...in&lt;/code&gt; statement, but for iterating arrays &lt;code&gt;for-in&lt;/code&gt; should be avoided, that statement is meant to &lt;strong&gt;enumerate&lt;/strong&gt; object properties.&lt;/p&gt;\n&lt;p&gt;It shouldn&apos;t be used for array-like objects because:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The order of iteration is not guaranteed; the array indexes may not be visited in numeric order.&lt;/li&gt;\n&lt;li&gt;Inherited properties are also enumerated.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The second point is that it can give you a lot of problems, for example, if you extend the &lt;code&gt;Array.prototype&lt;/code&gt; object to include a method there, that property will also be enumerated.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo!&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array[i]);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The above code will console log &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, and &quot;foo!&quot;.&lt;/p&gt;\n&lt;p&gt;That can be particularly a problem if you use some library that relies heavily on native prototypes augmentation (such as &lt;a href=&quot;https://en.wikipedia.org/wiki/MooTools&quot; rel=&quot;noreferrer&quot;&gt;MooTools&lt;/a&gt;).&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;for-in&lt;/code&gt; statement, as I said before, is there to &lt;em&gt;enumerate&lt;/em&gt; object properties, for example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(prop)) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;prop: &quot;&lt;/span&gt; + prop + &lt;span class=&quot;hljs-string&quot;&gt;&quot; value: &quot;&lt;/span&gt; + obj[prop])\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;In the above example, the &lt;code&gt;hasOwnProperty&lt;/code&gt; method allows you to enumerate only &lt;em&gt;own properties&lt;/em&gt;. That&apos;s it, only the properties that the object physically has, no inherited properties.&lt;/p&gt;\n&lt;p&gt;I would recommend you to read the following article:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20101213150231/http://dhtmlkitchen.com/?category=/JavaScript/&amp;amp;date=2007/10/21/&amp;amp;entry=Iteration-Enumeration-Primitives-and-Objects&quot; rel=&quot;noreferrer&quot;&gt;Enumeration VS Iteration&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Yes, assuming your implementation includes the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;&lt;/a&gt; feature introduced in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015&lt;/a&gt; (the &quot;Harmony&quot; release)... which is a pretty safe assumption these days.&lt;/p&gt;\n\n&lt;p&gt;It works like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// REQUIRES ECMASCRIPT 2015+&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s, myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (s &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; myStringArray) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or better yet, since ECMAScript 2015 also provides block-scoped variables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// REQUIRES ECMASCRIPT 2015+&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; s &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; myStringArray) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s ...&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// s is no longer defined here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(The variable &lt;code&gt;s&lt;/code&gt; is different on each iteration, but can still be declared &lt;code&gt;const&lt;/code&gt; inside the loop body as long as it isn&apos;t modified there.)&lt;/p&gt;\n\n&lt;p&gt;A note on sparse arrays: an array in JavaScript may not actually store as many items as reported by its &lt;code&gt;length&lt;/code&gt;; that reported number is simply one greater than the highest index at which a value is stored. If the array holds fewer elements than indicated by its length, its said to be &lt;em&gt;sparse&lt;/em&gt;. For example, it&apos;s perfectly legitimate to have an array with items only at indexes 3, 12, and 247; the &lt;code&gt;length&lt;/code&gt; of such an array is reported as 248, though it is only actually storing 3 values.  If you try to access an item at any other index, the array will appear to have the &lt;code&gt;undefined&lt;/code&gt; value there. So when you want to &quot;loop through&quot; an array, you have a question to answer: do you want to loop over the full range indicated by its length and process &lt;code&gt;undefined&lt;/code&gt;s for any missing elements, or do you only want to process the elements actually present? There are plenty of applications for both approaches; it just depends on what you&apos;re using the array for.&lt;/p&gt;\n\n&lt;p&gt;If you iterate over an array with &lt;code&gt;for&lt;/code&gt;..&lt;code&gt;of&lt;/code&gt;, the body of the loop is executed &lt;code&gt;length&lt;/code&gt; times, and the loop control variable is set to &lt;code&gt;undefined&lt;/code&gt; for any items not actually present in the array. Depending on the details of your &quot;do something with&quot; code, that behavior may be what you want, but if not, you should use a different approach.&lt;/p&gt;\n\n&lt;p&gt;Of course, some developers have no choice but to use a different approach anyway, because for whatever reason they&apos;re targeting a version of JavaScript that doesn&apos;t yet support &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;As long as your JavaScript implementation is compliant with the &lt;em&gt;previous&lt;/em&gt; edition of the ECMAScript specification (which rules out, for example, versions of Internet Explorer before 9), then you can use the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array#forEach&lt;/code&gt;&lt;/a&gt; iterator method instead of a loop. In that case, you pass a function to be called on each item in the array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt; ];\nmyStringArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;) { \n     &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s ...&lt;/span&gt;\n} );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unlike &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;, &lt;code&gt;.forEach&lt;/code&gt; only calls the function for elements that are actually present in the array. If passed our hypothetical array with three elements and a length of 248, it will only call the function three times, not 248 times. It also distinguishes between missing elements and elements that are actually set to &lt;code&gt;undefined&lt;/code&gt;; for the latter, it will still call the function, passing &lt;code&gt;undefined&lt;/code&gt; as the argument. If this is how you want to handle sparse arrays, &lt;code&gt;.forEach&lt;/code&gt; may be the way to go even if your interpreter supports &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The final option, which works in &lt;em&gt;all&lt;/em&gt; versions of JavaScript, is &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-for-statement&quot; rel=&quot;noreferrer&quot;&gt;an explicit counting loop&lt;/a&gt;. You simply count from 0 up to one less than the length and use the counter as an index. The basic loop looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, s, myStringArray = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt; ], len = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;len; ++i) {\n  s = myStringArray[i];\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One advantage of this approach is that you can choose how to handle sparse arrays; the above code will run the body of the loop the full &lt;code&gt;length&lt;/code&gt; times, with &lt;code&gt;s&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; for any missing elements, just like &lt;code&gt;for&lt;/code&gt;..&lt;code&gt;of&lt;/code&gt;. If you instead want to handle only the actually-present elements of a sparse array, like &lt;code&gt;.forEach&lt;/code&gt;, you can add a simple &lt;code&gt;in&lt;/code&gt; test on the index:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, s, myStringArray = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt; ], len = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;len; ++i) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myStringArray) {\n    s = myStringArray[i];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s ...&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Assigning the length value to the local variable (as opposed to including the full &lt;code&gt;myStringArray.length&lt;/code&gt; expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through; using Rhino on my machine, the speedup is 43%. &lt;/p&gt;\n\n&lt;p&gt;You may see the length caching done in the loop initialization clause, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, len, myStringArray = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt; ];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (len = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;len; ++i) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The explicit counting loop also means you have access to the index of each value, should you want it. The index is also passed as an extra parameter to the function you pass to &lt;code&gt;forEach&lt;/code&gt;, so you can access it that way as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myStringArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s, i&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s and i ...&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;for&lt;/code&gt;...&lt;code&gt;of&lt;/code&gt; doesn&apos;t give you the index associated with each object, but as long as the object you&apos;re iterating over is actually an &lt;code&gt;Array&lt;/code&gt; (&lt;code&gt;for&lt;/code&gt;..&lt;code&gt;of&lt;/code&gt; works for other iterable types which may not have this method), you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries&quot; rel=&quot;noreferrer&quot;&gt;Array#entries&lt;/a&gt; method to change it to an array of [index, item] pairs, and then iterate over that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [i, s] &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; myStringArray.&lt;span class=&quot;hljs-title function_&quot;&gt;entries&lt;/span&gt;()) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ... do something with s and i ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;in&lt;/code&gt; syntax mentioned by others is for looping over an object&apos;s properties; since an Array in JavaScript is just an object with numeric property names (and an automatically-updated &lt;code&gt;length&lt;/code&gt; property), you can theoretically loop over an Array with it.  But the problem is that it doesn&apos;t restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor is it guaranteed to iterate over those in numeric order. Therefore, the &lt;code&gt;for&lt;/code&gt;...&lt;code&gt;in&lt;/code&gt; syntax should &lt;em&gt;not&lt;/em&gt; be used for looping through Arrays. &lt;/p&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;map&lt;/code&gt;, which is a functional programming technique that&apos;s also available in other languages like &lt;a href=&quot;http://en.wikipedia.org/wiki/Python_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Haskell_%28programming_language%29&quot; rel=&quot;noreferrer&quot;&gt;Haskell&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(item);\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The general syntax is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(func)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In general &lt;code&gt;func&lt;/code&gt; would take one parameter, which is an item of the array. But in the case of JavaScript, it can take a second parameter which is the item&apos;s index, and a third parameter which is the array itself.&lt;/p&gt;\n\n&lt;p&gt;The return value of &lt;code&gt;array.map&lt;/code&gt; is another array, so you can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item * &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now x is &lt;code&gt;[10,20,30,40]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You don&apos;t have to write the function inline. It could be a separate function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item_processor = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Do something complicated to an item&lt;/span&gt;\n}\n\nnew_list = my_list.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(item_processor);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which would be sort-of equivalent to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list) {&lt;span class=&quot;hljs-title function_&quot;&gt;item_processor&lt;/span&gt;(item);}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Except you don&apos;t get the &lt;code&gt;new_list&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;for (const s of myStringArray) {&lt;/h1&gt;\n&lt;p&gt;(Directly answering your question: now you can!)&lt;/p&gt;\n&lt;p&gt;Most other answers are right, but they do not mention (as of this writing) that &lt;em&gt;&lt;strong&gt;ECMAScript &lt;strike&gt;&amp;nbsp;6&amp;nbsp;&lt;/strike&gt; 2015&lt;/strong&gt;&lt;/em&gt; is bringing a new mechanism for doing iteration, the &lt;strong&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/strong&gt; loop.&lt;/p&gt;\n&lt;p&gt;This new syntax is the most elegant way to iterate an array in JavaScript (as long you don&apos;t need the iteration index).&lt;/p&gt;\n&lt;p&gt;It currently works with Firefox 13+, Chrome 37+ and it does not natively work with other browsers (see browser compatibility below). Luckily we have JavaScript compilers (such as &lt;a href=&quot;https://babeljs.io/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Babel&lt;/a&gt;) that allow us to use next-generation features today.&lt;/p&gt;\n&lt;p&gt;It also works on Node.js (I tested it on version 0.12.0).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Iterating an array&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// You could also use &quot;let&quot; or &quot;const&quot; instead of &quot;var&quot; for block scope.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; letter &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;]) {\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(letter);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Iterating an array of objects&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; band = [\n  {firstName : &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;lastName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Lennon&apos;&lt;/span&gt;},\n  {firstName : &lt;span class=&quot;hljs-string&quot;&gt;&apos;Paul&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;lastName&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;McCartney&apos;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; member &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; band){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(member.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; + member.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Iterating a generator:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(example extracted from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// A generator function&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; [prev, curr] = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n    [prev, curr] = [curr, prev + curr];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; curr;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fibonacci&lt;/span&gt;()) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(n);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Truncate the sequence at 1000&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Compatibility table:&lt;/em&gt;\n&lt;a href=&quot;http://kangax.github.io/compat-table/es6/#test-for..of_loops&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://kangax.github.io/compat-table/es6/#test-for..of_loops&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Specification:&lt;/em&gt; &lt;a href=&quot;https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#sec-for-in-and-for-of-statements&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://wiki.ecmascript.org/doku.php?id=harmony:iterators&lt;/a&gt;&lt;/p&gt;\n&lt;h1&gt;}&lt;/h1&gt;\n    ","\n&lt;p&gt;In JavaScript it&apos;s not advisable to loop through an Array with a for-in loop, but it&apos;s better to use a &lt;code&gt;for&lt;/code&gt; loop such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len=myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; len; i++){}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s optimized as well (&quot;caching&quot; the array length). If you&apos;d like to learn more, &lt;a href=&quot;https://sebarmeli.com/blog/2010/12/06/best-way-to-loop-through-an-array-in-javascript/&quot; rel=&quot;noreferrer&quot;&gt;read my post on the subject&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.&lt;/p&gt;\n\n&lt;p&gt;You may not need all of them, but they can be very useful, or would be if every browser supported them.&lt;/p&gt;\n\n&lt;p&gt;Mozilla Labs published the algorithms they and &lt;a href=&quot;http://en.wikipedia.org/wiki/WebKit&quot; rel=&quot;noreferrer&quot;&gt;WebKit&lt;/a&gt; both use, so that you can add them yourself.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;filter&lt;/strong&gt; returns an array of items that satisfy some condition or test.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;every&lt;/strong&gt; returns true if every array member passes the test.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;some&lt;/strong&gt; returns true if any pass the test.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;forEach&lt;/strong&gt; runs a function on each array member and doesn&apos;t return anything.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;map&lt;/strong&gt; is like forEach, but it returns an array of the results of the operation for each element.&lt;/p&gt;\n\n&lt;p&gt;These methods all take a function for their first argument and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function.&lt;/p&gt;\n\n&lt;p&gt;Ignore it until you need it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;indexOf&lt;/strong&gt; and &lt;strong&gt;lastIndexOf&lt;/strong&gt; find the appropriate position of the first or last element that matches its argument exactly.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p, ap= &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, p2={\n        &lt;span class=&quot;hljs-attr&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fun, scope&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, A= [], i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, val;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fun== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt; L){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;){\n                        val= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i];\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(fun.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(scope, val, i, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)){\n                            A[A.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;]= val;\n                        }\n                    }\n                    ++i;\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; A;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;every&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fun, scope&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fun== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;L){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; !fun.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(scope, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i], i, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;))\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                    ++i;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;forEach&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fun, scope&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fun== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt; L){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;){\n                        fun.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(scope, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i], i, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n                    }\n                    ++i;\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;indexOf&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;what, i&lt;/span&gt;){\n            i= i || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt; L){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i]=== what)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n                ++i;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;lastIndexOf&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;what, i&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n            i= i || L-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isNaN&lt;/span&gt;(i) || i&amp;gt;= L)\n                i= L-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) i += L;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i]=== what)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n                --i;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;map&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fun, scope&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, A= &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;), i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, val;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fun== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt; L){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;){\n                        A[i]= fun.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(scope, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i], i, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n                    }\n                    ++i;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; A;\n            }\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;some&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fun, scope&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, L= &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; fun== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i&amp;lt;L){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; fun.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(scope, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i], i, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;))\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                    ++i;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; p2){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!ap[p])\n            ap[p]= p2[p];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n})();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Introduction&lt;/h3&gt;\n&lt;p&gt;Since my time in college, I&apos;ve programmed in Java, JavaScript, Pascal, &lt;a href=&quot;https://en.wikipedia.org/wiki/ABAP&quot; rel=&quot;noreferrer&quot;&gt;ABAP&lt;/a&gt;, PHP, &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenEdge_Advanced_Business_Language&quot; rel=&quot;noreferrer&quot;&gt;Progress 4GL&lt;/a&gt;, C/C++ and possibly a few other languages I can&apos;t think of right now.&lt;/p&gt;\n&lt;p&gt;While they all have their own linguistic idiosyncrasies, each of these languages share many of the same basic concepts. Such concepts include procedures / functions, &lt;code&gt;IF&lt;/code&gt;-statements, &lt;code&gt;FOR&lt;/code&gt;-loops, and &lt;code&gt;WHILE&lt;/code&gt;-loops.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;A traditional &lt;code&gt;for&lt;/code&gt;-loop&lt;/h3&gt;\n&lt;p&gt;A traditional &lt;code&gt;for&lt;/code&gt; loop has three components:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;The initialization:&lt;/strong&gt; executed before the look block is executed the first time&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;The condition:&lt;/strong&gt; checks a condition every time before the loop block is executed, and quits the loop if false&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;The afterthought:&lt;/strong&gt; performed every time after the loop block is executed&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;These three components are separated from each other by a &lt;code&gt;;&lt;/code&gt; symbol. Content for each of these three components is optional, which means that the following is the most minimal &lt;code&gt;for&lt;/code&gt; loop possible:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do stuff&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, you will need to include an &lt;code&gt;if(condition === true) { break; }&lt;/code&gt;  or an &lt;code&gt;if(condition === true) { return; }&lt;/code&gt; somewhere inside that &lt;code&gt;for&lt;/code&gt;-loop to get it to stop running.&lt;/p&gt;\n&lt;p&gt;Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i &amp;lt; length; i++) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;Using a traditional &lt;code&gt;for&lt;/code&gt; loop to loop through an array&lt;/h3&gt;\n&lt;p&gt;The traditional way to loop through an array, is this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length = myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; length; i++) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myArray[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or, if you prefer to loop backwards, you do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i--) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myArray[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are, however, many variations possible, like for example this one:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, value = myArray[key], length = myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; key &amp;lt; length; value = myArray[++key]) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...or this one...&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length = myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; i &amp;lt; length;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myArray[i]);\n    i++;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...or this one:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, value;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; value = myArray[key++];){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Whichever works best is largely a matter of both personal taste and the specific use case you&apos;re implementing.&lt;/p&gt;\n&lt;p&gt;Note that each of these variations is supported by all browsers, including very very old ones!&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;A &lt;code&gt;while&lt;/code&gt; loop&lt;/h3&gt;\n&lt;p&gt;One alternative to a &lt;code&gt;for&lt;/code&gt; loop is a &lt;code&gt;while&lt;/code&gt; loop. To loop through an array, you could do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(value = myArray[key++]){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Like traditional &lt;code&gt;for&lt;/code&gt; loops, &lt;code&gt;while&lt;/code&gt; loops are supported by even the oldest of browsers.&lt;/p&gt;\n&lt;p&gt;Also, note that every while loop can be rewritten as a &lt;code&gt;for&lt;/code&gt; loop. For example, the &lt;code&gt;while&lt;/code&gt; loop hereabove behaves the exact same way as this &lt;code&gt;for&lt;/code&gt;-loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; value = myArray[key++];){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;code&gt;For...in&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;In JavaScript, you can also do this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myArray) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myArray[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This should be used with care, however, as it doesn&apos;t behave the same as a traditional &lt;code&gt;for&lt;/code&gt; loop in all cases, and there are potential side-effects that need to be considered. See &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea&quot;&gt;Why is using &quot;for...in&quot; for array iteration a bad idea?&lt;/a&gt;&lt;/strong&gt; for more details.&lt;/p&gt;\n&lt;p&gt;As an alternative to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, there&apos;s now also for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. The following example shows the difference between a &lt;code&gt;for...of&lt;/code&gt; loop and a &lt;code&gt;for...in&lt;/code&gt; loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myArray = [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\nmyArray.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myArray) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i); &lt;span class=&quot;hljs-comment&quot;&gt;// logs 0, 1, 2, &quot;foo&quot;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; myArray) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i); &lt;span class=&quot;hljs-comment&quot;&gt;// logs 3, 5, 7&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Additionally, you need to consider that no version of Internet Explorer supports &lt;code&gt;for...of&lt;/code&gt; (&lt;a href=&quot;https://www.microsoft.com/en-us/windows/microsoft-edge&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Edge 12+&lt;/strong&gt;&lt;/a&gt; does) and that &lt;code&gt;for...in&lt;/code&gt; requires at least Internet&amp;nbsp;Explorer&amp;nbsp;10.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;An alternative to &lt;code&gt;for&lt;/code&gt;-loops is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, which uses the following syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, key, myArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt; is supported by all modern browsers, as well as Internet&amp;nbsp;Explorer&amp;nbsp;9 and later.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Libraries&lt;/h3&gt;\n&lt;p&gt;Finally, many utility libraries also have their own &lt;code&gt;foreach&lt;/code&gt; variation. AFAIK, the three most popular ones are these:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://api.jquery.com/jquery.each/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;jQuery.each()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, in &lt;a href=&quot;https://jquery.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(myArray, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://underscorejs.org/#each&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;_.each()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, in &lt;a href=&quot;http://underscorejs.org/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Underscore.js&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(myArray, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, key, myArray&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://lodash.com/docs#forEach&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;_.forEach()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;, in &lt;a href=&quot;https://lodash.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Lodash&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(myArray, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(value);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;6 different methods to loop through the array&lt;/h1&gt;\n&lt;p&gt;You can loop through an array by many different methods. I have sorted my 6 favorite methods from top to bottom.&lt;/p&gt;\n&lt;h2&gt;1. Using for loop&lt;/h2&gt;\n&lt;p&gt;When it&apos;s to simply loop through an array, the &lt;code&gt;for&lt;/code&gt; loop is my first choice.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array[i]);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;2. Using forEach loop&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt; loop is a modern way to loop through the array. Also, it gives more flexibility and control over the array and elements.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\narray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(element);\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;3. Using for...of&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;for...of&lt;/code&gt; loop gives you direct access to the array elements.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; array) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(element);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;4. Using for...in loop&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;for...in&lt;/code&gt; gives you a key using which you can access array elements.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array[index]);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;5. Using while loop&lt;/h2&gt;\n&lt;p&gt;while loop is can be used to loop through the array as well.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; length = array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array[array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - length]);\n  length--;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;6. Using do...while loop&lt;/h2&gt;\n&lt;p&gt;Likewise, I use &lt;code&gt;do...while&lt;/code&gt; loop&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; length = array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array[array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - length]);\n  length--;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Use the &lt;em&gt;while&lt;/em&gt; loop...&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, item, items = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(item = items[i++]){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It logs: &apos;one&apos;, &apos;two&apos;, and &apos;three&apos;&lt;/p&gt;\n&lt;p&gt;And for the reverse order, an even more efficient loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; items = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;], i = items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i--){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(items[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It logs: &apos;three&apos;, &apos;two&apos;, and &apos;one&apos;&lt;/p&gt;\n&lt;p&gt;Or the classical &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; items = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(items[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It logs: &apos;one&apos;,&apos;two&apos;,&apos;three&apos;&lt;/p&gt;\n&lt;p&gt;Reference: &lt;em&gt;&lt;a href=&quot;http://www.sitepoint.com/google-closure-how-not-to-write-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google Closure: How not to write JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you want a terse way to write a fast loop &lt;em&gt;and&lt;/em&gt; you can iterate in reverse:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;i--;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item=myArray[i];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This has the benefit of caching the length (similar to &lt;code&gt;for (var i=0, len=myArray.length; i&amp;lt;len; ++i)&lt;/code&gt; and unlike &lt;code&gt;for (var i=0; i&amp;lt;myArray.length; ++i)&lt;/code&gt;) while being fewer characters to type.&lt;/p&gt;\n\n&lt;p&gt;There are even some times when you ought to iterate in reverse, such as when iterating over a &lt;a href=&quot;https://developer.mozilla.org/En/DOM/NodeList#A_.22live.22_collection&quot;&gt;live NodeList&lt;/a&gt; where you plan on removing items from the DOM during iteration.&lt;/p&gt;\n    ","\n&lt;p&gt;Some use cases of looping through an array in &lt;strong&gt;the functional programming way&lt;/strong&gt; in JavaScript:&lt;/p&gt;\n\n&lt;h3&gt;1. Just loop through an array&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myArray = [{&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;}];\n\nmyArray.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element, index, array&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 100, 200, 300&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(index); &lt;span class=&quot;hljs-comment&quot;&gt;// 0, 1, 2&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(array); &lt;span class=&quot;hljs-comment&quot;&gt;// same myArray object 3 times&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: Array.prototype.forEach() is not a functional way strictly speaking, as the function it takes as the input parameter is not supposed to return a value, which thus cannot be regarded as a pure function.&lt;/p&gt;\n\n&lt;h3&gt;2. Check if any of the elements in an array pass a test&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; people = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Andrew&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Peter&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hanna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Adam&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; anyAdult = people.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;person&lt;/span&gt; =&amp;gt;&lt;/span&gt; person.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(anyAdult); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;3. Transform to a new array&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myArray = [{&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray= myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt; =&amp;gt;&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArray); &lt;span class=&quot;hljs-comment&quot;&gt;// [100, 200, 300]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: The map() method creates a new array with the results of calling a provided function on every element in the calling array.&lt;/p&gt;\n\n&lt;h3&gt;4. Sum up a particular property, and calculate its average&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myArray = [{&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sum = myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt; =&amp;gt;&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a + b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(sum); &lt;span class=&quot;hljs-comment&quot;&gt;// 600 = 0 + 100 + 200 + 300&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; average = sum / myArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(average); &lt;span class=&quot;hljs-comment&quot;&gt;// 200&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;5. Create a new array based on the original but without modifying it&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myArray = [{&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray= myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n        ...element,\n        &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: element.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    };\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(myArray); &lt;span class=&quot;hljs-comment&quot;&gt;// [100, 200, 300]&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArray); &lt;span class=&quot;hljs-comment&quot;&gt;// [200, 400, 600]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;6. Count the number of each category&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; people = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Andrew&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Peter&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;James&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hanna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;}, \n    {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Adam&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; groupInfo = people.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;groups, person&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; {A = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, B = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, C = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;} = groups;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (person.&lt;span class=&quot;hljs-property&quot;&gt;group&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {...groups, &lt;span class=&quot;hljs-attr&quot;&gt;A&lt;/span&gt;: A + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (person.&lt;span class=&quot;hljs-property&quot;&gt;group&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {...groups, &lt;span class=&quot;hljs-attr&quot;&gt;B&lt;/span&gt;: B + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {...groups, &lt;span class=&quot;hljs-attr&quot;&gt;C&lt;/span&gt;: C + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n    }\n}, {});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(groupInfo); &lt;span class=&quot;hljs-comment&quot;&gt;// {A: 3, C: 1, B: 2}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;7. Retrieve a subset of an array based on particular criteria&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myArray = [{&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; newArray = myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt; =&amp;gt;&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;250&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArray); &lt;span class=&quot;hljs-comment&quot;&gt;// [{x:300}] &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: The filter() method creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;\n\n&lt;h3&gt;8. Sort an array&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; people = [\n  { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Peter&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Andrew&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Thomas&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt; }\n];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; sortByAge = people.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;p1, p2&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p1.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; - p2.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt;;\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(sortByAge);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/scSsS.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/scSsS.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;9. Find an element in an array&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; people = [ {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;},\n                {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;},\n                {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;jim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;},\n                {&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bob&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;} ];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; john = people.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;person&lt;/span&gt; =&amp;gt;&lt;/span&gt; person.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;john&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(john);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ODT69.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ODT69.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Array.prototype.find() method returns the value of the first element in the array that satisfies the provided testing function.&lt;/p&gt;\n\n&lt;h3&gt;References&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.some()&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.forEach()&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.map()&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.filter()&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.sort()&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;noreferrer&quot;&gt;Spread syntax&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.find()&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;, you can do the same in JavaScript using a loop, but &lt;strong&gt;not limited&lt;/strong&gt; to that. There are many ways to do a loop over arrays in JavaScript. Imagine you have this array below, and you&apos;d like to do a loop over it:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These are the solutions:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1) For loop&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop is a common way looping through arrays in JavaScript, but it is no considered as the fastest solutions for large arrays:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l=arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;l; i++) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;2) While loop&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A while loop is considered as the fastest way to loop through long arrays, but it is usually less used in the JavaScript code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;&amp;gt;i) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[i]);\n    i++;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;3) Do while&lt;/strong&gt;&lt;br&gt;\nA &lt;code&gt;do while&lt;/code&gt; is doing the same thing as &lt;code&gt;while&lt;/code&gt; with some syntax difference as below:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[i]);\n  i++;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;&amp;gt;i);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These are the main ways to do JavaScript loops, but there are a few more ways to do that.&lt;/p&gt;\n&lt;p&gt;Also we use a &lt;code&gt;for in&lt;/code&gt; loop for looping over objects in JavaScript.&lt;/p&gt;\n&lt;p&gt;Also look at the &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;, etc. functions on an Array in JavaScript. They may do things much faster and better than using &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This is a good article if you like to learn more about the asynchronous functions over arrays in JavaScript.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Functional programming has been making quite a splash in the\ndevelopment world these days. And for good reason: Functional\ntechniques can help you write more declarative code that is easier to\nunderstand at a glance, refactor, and test.&lt;/p&gt;\n&lt;p&gt;One of the cornerstones of functional programming is its special use\nof lists and list operations. And those things are exactly what the\nsound like they are: arrays of things, and the stuff you do to them.\nBut the functional mindset treats them a bit differently than you\nmight expect.&lt;/p&gt;\n&lt;p&gt;This article will take a close look at what I like to call the &quot;big\nthree&quot; list operations: map, filter, and reduce. Wrapping your head\naround these three functions is an important step towards being able\nto write clean functional code, and opens the doors to the vastly\npowerful techniques of functional and reactive programming.&lt;/p&gt;\n&lt;p&gt;It also means you&apos;ll never have to write a for loop again.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Read more&amp;gt;&amp;gt; &lt;a href=&quot;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;\n    ","\n&lt;p&gt;There is a way to do it where you have very little implicit scope in your loop and do away with extra variables.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n     item;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Note this is weak to sparse arrays or falsey values&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; item = myStringArray[i++] ; ){\n    item; &lt;span class=&quot;hljs-comment&quot;&gt;// This is the string at the index.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or if you really want to get the id and have a really classical &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    len = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Cache the length&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; i &amp;lt; len ; i++ ){\n    myStringArray[i]; &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t use this if you plan on changing the length of the array&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Modern browsers all support iterator methods &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and a host of other methods on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array?redirectlocale=en-US&amp;amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray&quot; rel=&quot;nofollow noreferrer&quot;&gt;Array prototype&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There are various way to loop through array in JavaScript.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Generic loop:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; substr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with `substr[i]`&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;ES5&apos;s forEach:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;substr.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with `item`&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;jQuery.each:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(substr, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index, item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with `item` (or `this` is also `item` if you like)&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Have a look &lt;a href=&quot;https://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery&quot;&gt;this&lt;/a&gt; for detailed information or you can also check &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt; for looping through an array in JavaScript &amp;amp; using jQuery check &lt;a href=&quot;http://api.jquery.com/jquery.each/&quot; rel=&quot;noreferrer&quot;&gt;jQuery for each&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Array loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; things.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thing = things[i];\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(thing);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Object loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; propValue = obj[prop];\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(propValue);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would thoroughly recommend making use of the &lt;a href=&quot;https://underscorejs.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Underscore.js&lt;/a&gt; library. It provides you with various functions that you can use to iterate over arrays/collections.&lt;/p&gt;\n&lt;p&gt;For instance:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;){ &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(num); });\n=&amp;gt; alerts each number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; turn...\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If anybody is interested in the performance side of the multiple mechanisms available for Array iterations, I&apos;ve prepared the following JSPerf tests:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsperf.com/fastest-array-iterator&quot; rel=&quot;noreferrer&quot;&gt;https://jsperf.com/fastest-array-iterator&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/UOJ9F.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/UOJ9F.jpg&quot; alt=&quot;Performance results&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Results:&lt;/h2&gt;\n\n&lt;p&gt;The traditional &lt;code&gt;for()&lt;/code&gt; iterator, is by far the fastest method, especially when used with the &lt;strong&gt;array length cached&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, size=arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;size; i++){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; and the &lt;code&gt;Array.prototype.map()&lt;/code&gt; methods are the slowest approximations, probably as a consequence of the &lt;strong&gt;function call overhead&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I did not yet see this variation, which I personally like the best:&lt;/p&gt;\n\n&lt;p&gt;Given an array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;some&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;example&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;array&quot;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can loop over it without ever accessing the length property:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, item; item=someArray[i]; i++) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// item is &quot;some&quot;, then &quot;example&quot;, then &quot;array&quot;&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// i is the index of item in the array&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someArray[&quot;&lt;/span&gt; + i + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]: &quot;&lt;/span&gt; + item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See this JsFiddle demonstrating that: &lt;a href=&quot;http://jsfiddle.net/prvzk/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/prvzk/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This only works for arrays that are &lt;em&gt;not&lt;/em&gt; sparse. Meaning that there actually is a value at each index in the array. However, I found that in practice I hardly ever use sparse arrays in JavaScript... In such cases it&apos;s usually a lot easier to use an object as a map/hashtable. If you do have a sparse array, and want to loop over 0 .. length-1, you need the for (var i=0; i&amp;lt;someArray.length; ++i) construct, but you still need an &lt;code&gt;if&lt;/code&gt; inside the loop to check whether the element at the current index is actually defined.&lt;/p&gt;\n\n&lt;p&gt;Also, as CMS mentions in a comment below, you can only use this on arrays that don&apos;t contain any falsish values. The array of strings from the example works, but if you have empty strings, or numbers that are 0 or NaN, etc. the loop will break off prematurely. Again in practice this is hardly ever a problem for me, but it is something to keep in mind, which makes this a loop to think about before you use it... That may disqualify it for some people :)&lt;/p&gt;\n\n&lt;p&gt;What I like about this loop is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It&apos;s short to write&lt;/li&gt;\n&lt;li&gt;No need to access (let alone cache) the length property&lt;/li&gt;\n&lt;li&gt;The item to access is automatically defined within the loop\nbody under the name you pick.&lt;/li&gt;\n&lt;li&gt;Combines very naturally with array.push and array.splice to use arrays like lists/stacks&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The reason this works is that the array specification mandates that when you read an item from an index &amp;gt;= the array&apos;s length, it will return undefined. When you write to such a location it will actually update the length.&lt;/p&gt;\n\n&lt;p&gt;For me, this construct most closely emulates the Java 5 syntax that I love:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; item : someArray) {\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... with the added benefit of also knowing about the current index inside the loop&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re using the jQuery library, consider using \n&lt;a href=&quot;http://api.jquery.com/jQuery.each/&quot; rel=&quot;noreferrer&quot;&gt;http://api.jquery.com/jQuery.each/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;From the documentation:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;&lt;code&gt;jQuery.each( collection, callback(indexInArray, valueOfElement) )&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt; &lt;em&gt;Object&lt;/em&gt;&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;em&gt;A generic iterator function, which can be used to\n  seamlessly iterate over both objects and arrays. Arrays and array-like\n  objects with a length property (such as a function&apos;s arguments object)\n  are iterated by numeric index, from 0 to length-1. Other objects are\n  iterated via their named properties.&lt;/em&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;$.each()&lt;/code&gt; function is not the same as &lt;code&gt;$(selector).each()&lt;/code&gt;, which is\n  used to iterate, exclusively, over a jQuery object. The &lt;code&gt;$.each()&lt;/code&gt;\n  function can be used to iterate over any collection, whether it is a\n  map (JavaScript object) or an array. In the case of an array, the\n  callback is passed an array index and a corresponding array value each\n  time. (The value can also be accessed through the &lt;code&gt;this&lt;/code&gt; keyword, but\n  Javascript will always wrap the &lt;code&gt;this&lt;/code&gt; value as an &lt;code&gt;Object&lt;/code&gt; even if it is\n  a simple string or number value.) The method returns its first\n  argument, the object that was iterated.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;There are 4 ways of array iteration:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 1: for&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[i]);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2: forEach&lt;/span&gt;\n\narr.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3: for in&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[i]);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 4: for of&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; arr) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(v);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: 1 and 3 solutions create extra variable, 2 - create extra function context. &lt;strong&gt;The best way is 4th - &quot;for of&quot;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Esoteric mutable way&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a= [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( a.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;() ); }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a method to iterate over only own object properties, not including prototype&apos;s ones:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (array.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(i)) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with array[i]&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but it still will iterate over custom-defined properties.&lt;/p&gt;\n\n&lt;p&gt;In JavaScript any custom property could be assigned to any object, including an array.&lt;/p&gt;\n\n&lt;p&gt;If one wants to iterate over sparsed array, &lt;code&gt;for (var i = 0; i &amp;lt; array.length; i++) if (i in array)&lt;/code&gt; or &lt;code&gt;array.forEach&lt;/code&gt; with &lt;code&gt;es5shim&lt;/code&gt; should be used.&lt;/p&gt;\n    ","\n&lt;h2&gt;The most elegant and fast way&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1023&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value; value = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();) {\n    value + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;http://jsperf.com/native-loop-performance/8&quot; rel=&quot;noreferrer&quot;&gt;http://jsperf.com/native-loop-performance/8&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Edited (because I was wrong)&lt;/h2&gt;\n&lt;hr&gt;\n&lt;p&gt;Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://jsben.ch/#/BQhED&quot; rel=&quot;noreferrer&quot;&gt;http://jsben.ch/#/BQhED&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Preparation:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script src=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//code.jquery.com/jquery-2.1.0.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Benchmark&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setup&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Fake function with minimal action on the value&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tmp = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; process = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n            tmp = value; &lt;span class=&quot;hljs-comment&quot;&gt;// Hold a reference to the variable (prevent engine optimisation?)&lt;/span&gt;\n        };\n        \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Declare the test Array&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++)\n            arr[i] = i;\n    };\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Tests:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://jsperf.com/native-loop-performance/16&quot;&lt;/span&gt; \n   title=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://jsperf.com/native-loop-performance/16&quot;&lt;/span&gt;\n&amp;gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://i.imgur.com/YTrO68E.png&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hosted by imgur.com&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;lt;/a&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are a couple of ways to do it in JavaScript. The first two examples are JavaScript samples. The third one makes use of a JavaScript library, that is, jQuery making use of the &lt;code&gt;.each()&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myStringArray) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(myStringArray[i]);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(myStringArray[i]);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(myStringArray, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index, value&lt;/span&gt;){\n  &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(value);\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The optimized approach is to cache the length of array and using the single variable pattern, initializing all variables with a single &lt;code&gt;var&lt;/code&gt; keyword.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i, max, myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, max = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; max; i++) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(myStringArray[i]);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the order of iteration does not matter then you should try reversed loop. It is the fastest as it reduces overhead condition testing and decrement is in one statement:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i,myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;item1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;item2&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i =  myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i--) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(myStringArray[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or better and cleaner to use a &lt;em&gt;while&lt;/em&gt; loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;item1&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;item2&quot;&lt;/span&gt;],i = myStringArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i--) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Do something with fruits[i]&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In JavaScript, there are so many solutions to loop an array.&lt;/p&gt;\n\n&lt;p&gt;The code below are popular ones&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/** Declare inputs */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; items = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;World&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Solution 1. Simple for */&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;solution 1. simple for&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(items[i])\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Solution 2. Simple while */&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;solution 2. simple while&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; items.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(items[i++])\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Solution 3. forEach*/&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;solution 3. forEach&apos;&lt;/span&gt;)\n\nitems.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item)\n})\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** Solution 4. for-of*/&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;solution 4. for-of&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; items) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item)\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to use jQuery, it has a nice example in its documentation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;([ &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt; ], &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; index, value &lt;/span&gt;) {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( index + &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt; + value );\n });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best way in my opinion is to use the Array.forEach function. If you cannot use that I would suggest to get the polyfill from MDN. To make it available, it is certainly the safest way to iterate over an array in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot; rel=&quot;nofollow noreferrer&quot;&gt;Array.prototype.forEach()&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;So as others has suggested, this is almost always what you want:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\nnumbers.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n  sum += n;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This ensures that anything you need in the scope of processing the array stays within that scope, and that you are only processing the values of the array, not the object properties and other members, which is what &lt;code&gt;for ..&lt;/code&gt; in does.&lt;/p&gt;\n\n&lt;p&gt;Using a regular C-style &lt;code&gt;for&lt;/code&gt; loop works in most cases. It is just important to remember that everything within the loop shares its scope with the rest of your program, the { } does not create a new scope.&lt;/p&gt;\n\n&lt;p&gt;Hence:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numbers = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;numbers.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i){\n  sum += numbers[i];\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(i);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will output &quot;11&quot; - which may or may not be what you want.&lt;/p&gt;\n\n&lt;p&gt;A working jsFiddle example:\n&lt;a href=&quot;https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s not 100% identical, but similar:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myStringArray = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;World&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// The array uses [] not {}&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; myStringArray) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i + &lt;span class=&quot;hljs-string&quot;&gt;&apos; -&amp;gt; &apos;&lt;/span&gt; + myStringArray[i]); &lt;span class=&quot;hljs-comment&quot;&gt;// i is the index/key, not the item&lt;/span&gt;\n    }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For example, I used in a Firefox console:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[].&lt;span class=&quot;hljs-property&quot;&gt;forEach&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pre&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){ \n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e);\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can use querySelectorAll to get same result&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;pre&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { \n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(e.&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt;);\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;text 1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;text 2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;text 3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "]},"page":"46","randomQuestions":[{"title":"Using fflush(stdin)","slug":"using-fflush(stdin)-1657387602771"},{"title":"How do I compose a rotation matrix with human readable angles from scratch?","slug":"how-do-i-compose-a-rotation-matrix-with-human-readable-angles-from-scratch-1657387963457"},{"title":"How do I generate random integers within a specific range in Java?","slug":"how-do-i-generate-random-integers-within-a-specific-range-in-java-1657385458888"},{"title":"How to close/hide the Android soft keyboard programmatically?","slug":"how-to-closehide-the-android-soft-keyboard-programmatically-1657388217420"},{"title":"Is JavaScript a pass-by-reference or pass-by-value language?","slug":"is-javascript-a-pass-by-reference-or-pass-by-value-language-1657384675679"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How can you represent inheritance in a database?","slug":"how-can-you-represent-inheritance-in-a-database-1657388076553"},{"title":"Maintain the aspect ratio of a div with CSS","slug":"maintain-the-aspect-ratio-of-a-div-with-css-1657387513615"},{"title":"Why does std::getline() skip input after a formatted extraction?","slug":"why-does-std::getline()-skip-input-after-a-formatted-extraction-1657384756118"},{"title":"Sort ArrayList of custom Objects by property","slug":"sort-arraylist-of-custom-objects-by-property-1657387678339"},{"title":"What is a NullPointerException, and how do I fix it?","slug":"what-is-a-nullpointerexception-and-how-do-i-fix-it-1657384201768"},{"title":"PHP mail function doesn't complete sending of e-mail","slug":"php-mail-function-doesn't-complete-sending-of-e-mail-1657384307499"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"Identifying and solving javax.el.PropertyNotFoundException: Target Unreachable","slug":"identifying-and-solving-javax.el.propertynotfoundexception:-target-unreachable-1657388164753"},{"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445"},{"title":"How can I merge properties of two JavaScript objects dynamically?","slug":"how-can-i-merge-properties-of-two-javascript-objects-dynamically-1657387492535"},{"title":"What is the copy-and-swap idiom?","slug":"what-is-the-copy-and-swap-idiom-1657384840329"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932"},{"title":"Percentage Height HTML 5/CSS","slug":"percentage-height-html-5css-1657387471048"}]},"__N_SSG":true}