{"pageProps":{"data":{"count":610,"rows":[{"id":265,"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377","postType":"QUESTION","createdAt":"2022-07-09T17:24:18.000Z","updatedAt":"2022-07-09T17:24:18.000Z","tags":[{"id":1680,"name":"dom-events","slug":"dom-events","createdAt":"2022-07-09T17:24:18.000Z","updatedAt":"2022-07-09T17:24:18.000Z","Questions_Tags":{"questionId":265,"tagId":1680}},{"id":1681,"name":"event-handling","slug":"event-handling","createdAt":"2022-07-09T17:24:18.000Z","updatedAt":"2022-07-09T17:24:18.000Z","Questions_Tags":{"questionId":265,"tagId":1681}},{"id":1682,"name":"event-propagation","slug":"event-propagation","createdAt":"2022-07-09T17:24:18.000Z","updatedAt":"2022-07-09T17:24:18.000Z","Questions_Tags":{"questionId":265,"tagId":1682}}]},{"id":264,"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118","postType":"QUESTION","createdAt":"2022-07-09T17:24:16.000Z","updatedAt":"2022-07-09T17:24:16.000Z","tags":[]},{"id":263,"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605","postType":"QUESTION","createdAt":"2022-07-09T17:24:13.000Z","updatedAt":"2022-07-09T17:24:13.000Z","tags":[{"id":1672,"name":"extern","slug":"extern","createdAt":"2022-07-09T17:24:13.000Z","updatedAt":"2022-07-09T17:24:13.000Z","Questions_Tags":{"questionId":263,"tagId":1672}}]},{"id":262,"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244","postType":"QUESTION","createdAt":"2022-07-09T17:24:11.000Z","updatedAt":"2022-07-09T17:24:11.000Z","tags":[{"id":1668,"name":"asp.net-mvc","slug":"asp.net-mvc","createdAt":"2022-07-09T17:24:11.000Z","updatedAt":"2022-07-09T17:24:11.000Z","Questions_Tags":{"questionId":262,"tagId":1668}},{"id":1669,"name":"viewmodel","slug":"viewmodel","createdAt":"2022-07-09T17:24:11.000Z","updatedAt":"2022-07-09T17:24:11.000Z","Questions_Tags":{"questionId":262,"tagId":1669}}]},{"id":261,"title":"Sorting an array of objects by property values","slug":"sorting-an-array-of-objects-by-property-values-1657387447490","postType":"QUESTION","createdAt":"2022-07-09T17:24:07.000Z","updatedAt":"2022-07-09T17:24:07.000Z","tags":[]}]},"answers":{"261":["\n&lt;p&gt;Sort homes by price in ascending order:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or after ES6 version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some documentation can be found &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For descending order, you may use &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a more flexible version, which allows you to create \nreusable sort functions, and sort by any field.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sort_by&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;field, reverse, primer&lt;/span&gt;) =&amp;gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; key = primer ?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;primer&lt;/span&gt;(x[field])\n    } :\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x[field]\n    };\n\n  reverse = !reverse ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(a), b = &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(b), reverse * ((a &amp;gt; b) - (b &amp;gt; a));\n  }\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Now you can sort by any field at will...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; homes=[{&lt;span class=&quot;hljs-attr&quot;&gt;h_id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;zip&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;75201&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;162500&quot;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;h_id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bevery Hills&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;zip&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;90210&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;319250&quot;&lt;/span&gt;},{&lt;span class=&quot;hljs-attr&quot;&gt;h_id&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;city&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;state&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;NY&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;zip&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;00010&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;962500&quot;&lt;/span&gt;}];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort by price high to low&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sort_by&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;)));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort by city, case-insensitive, A-Z&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sort_by&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;city&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) =&amp;gt;&lt;/span&gt;  a.&lt;span class=&quot;hljs-title function_&quot;&gt;toUpperCase&lt;/span&gt;()\n)));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To sort it you need to create a comparator function taking two arguments. Then call the sort function with that comparator function as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// a and b are object elements of your array&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mycomparator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n}\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(mycomparator);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to sort ascending switch the expressions on each side of the minus sign.&lt;/p&gt;\n    ","\n&lt;p&gt;for string sorting in case some one needs it,&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; dataArr = {\n\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;114&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;zzzzzz&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;region&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Sri Lanka&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;supportGroup&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;administrators&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;category&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Category2&quot;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;115&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;aaaaa&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;region&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Japan&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;supportGroup&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;developers&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;category&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Category2&quot;&lt;/span&gt;\n  }]\n\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sortArray = dataArr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(sortArray.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-property&quot;&gt;region&lt;/span&gt; &amp;lt; b.&lt;span class=&quot;hljs-property&quot;&gt;region&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-property&quot;&gt;region&lt;/span&gt; &amp;gt; b.&lt;span class=&quot;hljs-property&quot;&gt;region&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have an &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla&quot; rel=&quot;noreferrer&quot; title=&quot;ES6&quot;&gt;ES6&lt;/a&gt; compliant browser you can use:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot; title=&quot;Arrow functions&quot;&gt;Arrow functions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number%20%22Number%20function&quot; rel=&quot;noreferrer&quot;&gt;Number() function&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot; rel=&quot;noreferrer&quot; title=&quot;sort function&quot;&gt;sort() function&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The difference between ascending and descending sort order is the sign of the value returned by your compare function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ascending = homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; descending = homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s a working code snippet:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; homes = [{\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;75201&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;162500&quot;&lt;/span&gt;\n}, {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bevery Hills&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;90210&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;319250&quot;&lt;/span&gt;\n}, {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;NY&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;00010&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;962500&quot;&lt;/span&gt;\n}];\n\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ascending&quot;&lt;/span&gt;, homes);\n\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;descending&quot;&lt;/span&gt;, homes);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You want to sort it in Javascript, right?  What you want is the &lt;a href=&quot;http://www.javascriptkit.com/javatutors/arraysort.shtml&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;sort()&lt;/code&gt; function&lt;/a&gt;.  In this case you need to write a comparator function and pass it to &lt;code&gt;sort()&lt;/code&gt;, so something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;comparator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(a[&lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(b[&lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;homes&quot;&lt;/span&gt;: [ &lt;span class=&quot;hljs-comment&quot;&gt;/* your previous data */&lt;/span&gt; ] };\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;homes&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(comparator));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your comparator takes one of each of the nested hashes inside the array and decides which one is higher by checking the &quot;price&quot; field.&lt;/p&gt;\n    ","\n&lt;p&gt;I recommend &lt;a href=&quot;https://github.com/jherax/array-sort-by&quot; rel=&quot;noreferrer&quot;&gt;GitHub: Array sortBy&lt;/a&gt; - a best implementation of &lt;code&gt;sortBy&lt;/code&gt; method which uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Schwartzian_transform&quot; rel=&quot;noreferrer&quot;&gt;Schwartzian transform&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;But for now we are going to try this approach &lt;a href=&quot;https://gist.github.com/jherax/8781f45dcd068a9e3e37&quot; rel=&quot;noreferrer&quot;&gt;Gist: sortBy-old.js&lt;/a&gt;.&lt;br&gt;\nLet&apos;s create a method to sort arrays being able to arrange objects by some property.&lt;/p&gt;\n&lt;h2&gt;Creating the sorting function&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sortBy = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; toString = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;,\n      &lt;span class=&quot;hljs-comment&quot;&gt;// default parser function&lt;/span&gt;\n      parse = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x; },\n      &lt;span class=&quot;hljs-comment&quot;&gt;// gets the item to be sorted&lt;/span&gt;\n      getItem = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isObject = x != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; x === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isProp = isObject &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parser&lt;/span&gt;(isProp ? x[&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;prop&lt;/span&gt;] : x);\n      };\n      \n  &lt;span class=&quot;hljs-comment&quot;&gt;/**\n   * Sorts an array of elements.\n   *\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;  {&lt;span class=&quot;hljs-type&quot;&gt;Array&lt;/span&gt;} array: the collection to sort\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt;  {&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt;} cfg: the configuration options\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@property&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;}   cfg.prop: property name (if it is an Array of objects)\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@property&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Boolean&lt;/span&gt;}  cfg.desc: determines whether the sort is descending\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@property&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Function&lt;/span&gt;} cfg.parser: function to parse the items to expected type\n   * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;Array&lt;/span&gt;}\n   */&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortby&lt;/span&gt; (array, cfg) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(array &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt; &amp;amp;&amp;amp; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toString.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(cfg) !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;[object Object]&quot;&lt;/span&gt;) cfg = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; cfg.&lt;span class=&quot;hljs-property&quot;&gt;parser&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;function&quot;&lt;/span&gt;) cfg.&lt;span class=&quot;hljs-property&quot;&gt;parser&lt;/span&gt; = parse;\n    cfg.&lt;span class=&quot;hljs-property&quot;&gt;desc&lt;/span&gt; = !!cfg.&lt;span class=&quot;hljs-property&quot;&gt;desc&lt;/span&gt; ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n      a = getItem.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(cfg, a);\n      b = getItem.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(cfg, b);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cfg.&lt;span class=&quot;hljs-property&quot;&gt;desc&lt;/span&gt; * (a &amp;lt; b ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : +(a &amp;gt; b));\n    });\n  };\n  \n}());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Setting unsorted data&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:30:43Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T17:22:59Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:28:54Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;visa&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:53:41Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:48:46Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T17:25:45Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;cash&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-31T17:29:52Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Visa&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:58:03Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:20:19Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-01T16:17:54Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;190&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T17:07:21Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;,  &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;tab&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;date&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-11-14T16:54:06Z&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;quantity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;total&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tip&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cash&quot;&lt;/span&gt;}\n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Using it&lt;/h2&gt;\n&lt;p&gt;Arrange the array, by &lt;code&gt;&quot;date&quot;&lt;/code&gt; as &lt;code&gt;String&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// sort by @date (ascending)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(data, { &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt; });\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected: first element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { date: &quot;2011-11-01T16:17:54Z&quot;, quantity: 2, total: 190, tip: 100, type: &quot;tab&quot; }&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected: last element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { date: &quot;2011-11-31T17:29:52Z&quot;, quantity: 1, total: 200, tip: 100, type: &quot;Visa&quot;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to ignore case sensitive, set the &lt;code&gt;parser&lt;/code&gt; callback:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// sort by @type (ascending) IGNORING case-sensitive&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(data, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;parser&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;) =&amp;gt;&lt;/span&gt; t.&lt;span class=&quot;hljs-title function_&quot;&gt;toUpperCase&lt;/span&gt;()\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected: first element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { date: &quot;2011-11-14T16:54:06Z&quot;, quantity: 1, total: 100, tip: 0, type: &quot;Cash&quot; }&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected: last element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { date: &quot;2011-11-31T17:29:52Z&quot;, quantity: 1, total: 200, tip: 100, type: &quot;Visa&quot; }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to convert the &lt;code&gt;&quot;date&quot;&lt;/code&gt; field as &lt;code&gt;Date&lt;/code&gt; type:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// sort by @date (descending) AS Date object&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(data, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;prop&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;desc&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;parser&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;d&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;(d)\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected: first element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { date: &quot;2011-11-31T17:29:52Z&quot;, quantity: 1, total: 200, tip: 100, type: &quot;Visa&quot;}&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected: last element&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// { date: &quot;2011-11-01T16:17:54Z&quot;, quantity: 2, total: 190, tip: 100, type: &quot;tab&quot; }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here you can play with the code:\n&lt;a href=&quot;http://jsbin.com/lesebi/edit?js,console&quot; rel=&quot;noreferrer&quot;&gt;jsbin.com/lesebi&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Thanks to &lt;strong&gt;@Ozesh&lt;/strong&gt; by his feedback, the issue related to properties with &lt;em&gt;&lt;strong&gt;falsy&lt;/strong&gt;&lt;/em&gt; values was fixed.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;https://lodash.com/docs#sortBy&quot; rel=&quot;noreferrer&quot;&gt;lodash.sortBy&lt;/a&gt;, (instructions using commonjs, you can also just put the &lt;a href=&quot;https://www.jsdelivr.com/projects/lodash&quot; rel=&quot;noreferrer&quot;&gt;script include-tag for the cdn&lt;/a&gt; at the top of your html)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sortBy = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lodash.sortby&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\nsortBy = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lodash&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;sortBy&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Descending order&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; descendingOrder = &lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;( homes, &lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt; ).&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ascending order&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ascendingOrder = &lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;( homes, &lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m little late for the party but below is my logic for sorting.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getSortedData&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, prop, isAsc&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a[prop] &amp;lt; b[prop] ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * (isAsc ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use string1.localeCompare(string2) for string comparison &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;myArray&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;stringProp&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;stringProp&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;code&gt;localCompare&lt;/code&gt; is case &lt;strong&gt;in&lt;/strong&gt;sensitive&lt;/p&gt;\n    ","\n&lt;p&gt;This could have been achieved through a simple one line &lt;strong&gt;valueof()&lt;/strong&gt; sort function. Run code snippet below to see demo.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; homes = [\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;75201&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;162500&quot;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bevery Hills&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;90210&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;319250&quot;&lt;/span&gt;\n    }, {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;NY&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;00010&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;962500&quot;&lt;/span&gt;\n    }\n];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;To sort descending/highest first, use operator &apos;&amp;lt;&apos;&quot;&lt;/span&gt;);\n\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;() &amp;lt; b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;();});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(homes);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;To sort ascending/lowest first, use operator &apos;&amp;gt;&apos;&quot;&lt;/span&gt;);\n\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;() &amp;gt; b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;();});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(homes);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Descending order of price: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; y.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt; - x.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ascending order of price: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt; - y.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While I am aware that the OP wanted to sort an array of numbers, this question has been marked as the answer for similar questions regarding strings.  To that fact, the above answers do not consider sorting an array of text where casing is important.  Most answers take the string values and convert them to uppercase/lowercase and then sort one way or another.  The requirements that I adhere to are simple:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sort alphabetically A-Z&lt;/li&gt;\n&lt;li&gt;Uppercase values of the same word should come before lowercase values&lt;/li&gt;\n&lt;li&gt;Same letter (A/a, B/b) values should be grouped together&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;What I expect is &lt;code&gt;[ A, a, B, b, C, c ]&lt;/code&gt; but the answers above return &lt;code&gt;A, B, C, a, b, c&lt;/code&gt;.  I actually scratched my head on this for longer than I wanted (which is why I am posting this in hopes that it will help at least one other person).  While two users mention the &lt;code&gt;localeCompare&lt;/code&gt; function in the comments for the marked answer, I didn&apos;t see that until after I stumbled upon the function while searching around.  After reading &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot; rel=&quot;noreferrer&quot;&gt;the String.prototype.localeCompare() documentation&lt;/a&gt; I was able to come up with this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; values = [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;Delta&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;charlie&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Charlie&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bravo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Alpha&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bravo&quot;&lt;/span&gt; ];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sorted = values.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;caseFirst&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;upper&quot;&lt;/span&gt; }));\n&lt;span class=&quot;hljs-comment&quot;&gt;// Result: [ &quot;Alpha&quot;, &quot;alpha&quot;, &quot;Bravo&quot;, &quot;bravo&quot;, &quot;Charlie&quot;, &quot;charlie&quot;, &quot;Delta&quot;, &quot;delta&quot; ]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This tells the function to sort uppercase values before lowercase values.  The second parameter in the &lt;code&gt;localeCompare&lt;/code&gt; function is to define the locale but if you leave it as &lt;code&gt;undefined&lt;/code&gt; it automatically figures out the locale for you.&lt;/p&gt;\n\n&lt;p&gt;This works the same for sorting an array of objects as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; values = [\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Delta&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;charlie&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Charlie&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bravo&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Alpha&quot;&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bravo&quot;&lt;/span&gt; }\n];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sorted = values\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;title&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;title&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;caseFirst&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;upper&quot;&lt;/span&gt; }));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a culmination of all answers above. &lt;/p&gt;\n\n&lt;p&gt;Fiddle validation: &lt;a href=&quot;http://jsfiddle.net/bobberino/4qqk3/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/bobberino/4qqk3/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sortOn = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;arr, prop, reverse, numeric&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Ensure there&apos;s a property&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!prop || !arr) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set up sort function&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sort_by = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;field, rev, primer&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Return the required a,b function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Reset a, b to the field&lt;/span&gt;\n            a = &lt;span class=&quot;hljs-title function_&quot;&gt;primer&lt;/span&gt;(a[field]), b = &lt;span class=&quot;hljs-title function_&quot;&gt;primer&lt;/span&gt;(b[field]);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Do actual sorting, reverse as needed&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((a &amp;lt; b) ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : ((a &amp;gt; b) ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) * (rev ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        }\n\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Distinguish between numeric and string to prevent 100&apos;s from coming before smaller&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// e.g.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 20&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 4000&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 50&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (numeric) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do sort &quot;in place&quot; with sort_by function&lt;/span&gt;\n        arr.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sort_by&lt;/span&gt;(prop, reverse, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// - Force value to a string.&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// - Replace any non numeric characters.&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// - Parse as float to allow 0.02 values.&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[^0-9.-]+/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;));\n\n        }));\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do sort &quot;in place&quot; with sort_by function&lt;/span&gt;\n        arr.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sort_by&lt;/span&gt;(prop, reverse, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// - Force value to string.&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a).&lt;span class=&quot;hljs-title function_&quot;&gt;toUpperCase&lt;/span&gt;();\n\n        }));\n    }\n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the JavaScript &lt;code&gt;sort&lt;/code&gt; method with a callback function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareASC&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;homeA, homeB&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(homeA.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(homeB.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareDESC&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;homeA, homeB&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(homeB.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(homeA.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort ASC&lt;/span&gt;\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(compareASC);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort DESC&lt;/span&gt;\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(compareDESC);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For sorting a array you must define a comparator function. This function always be different on your desired sorting pattern or order(i.e. ascending or descending).&lt;/p&gt;\n\n&lt;p&gt;Let create some functions that sort an array ascending or descending and that contains object or string or numeric values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sorterAscending&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a-b;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sorterDescending&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b-a;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sorterPriceAsc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(a[&lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt;]) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(b[&lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sorterPriceDes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(b[&lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt;]) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(b[&lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt;]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sort numbers (alphabetically and ascending):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fruits = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Orange&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mango&quot;&lt;/span&gt;];\nfruits.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sort numbers (alphabetically and descending):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fruits = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Orange&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mango&quot;&lt;/span&gt;];\nfruits.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;();\nfruits.&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sort numbers (numerically and ascending):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; points = [&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\npoints.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sorterAscending&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sort numbers (numerically and descending):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; points = [&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\npoints.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sorterDescending&lt;/span&gt;());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As above use sorterPriceAsc and sorterPriceDes method with your array with desired key.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sorterPriceAsc&lt;/span&gt;()) or homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;sorterPriceDes&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I also worked with some kind of rating and multiple fields sort:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;834&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;732&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;008&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;474&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;283&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;165&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;173&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;note&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt;},\n];\n\narr.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _a = ((a.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;===&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;:(a.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;===&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;);\n    _a += (a.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;)===-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;;\n    _a += (a.&lt;span class=&quot;hljs-property&quot;&gt;note&lt;/span&gt;&amp;gt;b.&lt;span class=&quot;hljs-property&quot;&gt;note&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _b = ((b.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;===&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;:(b.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;===&lt;span class=&quot;hljs-string&quot;&gt;&apos;P&apos;&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;);\n    _b += (b.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;)===-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;;\n    _b += (b.&lt;span class=&quot;hljs-property&quot;&gt;note&lt;/span&gt;&amp;gt;a.&lt;span class=&quot;hljs-property&quot;&gt;note&lt;/span&gt;)?&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(_a) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(_b);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Result&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;834&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;P&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;165&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;P&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;283&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;732&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;F&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;474&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;X&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;173&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;note&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt;}\n]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While it is a bit of an overkill for just sorting a single array, this prototype function allows to sort Javascript arrays by any key, in ascending or descending order, &lt;strong&gt;including nested keys&lt;/strong&gt;, using &lt;code&gt;dot&lt;/code&gt; syntax.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; keyPaths = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; saveKeyPath = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;) {\n        keyPaths.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({\n            &lt;span class=&quot;hljs-attr&quot;&gt;sign&lt;/span&gt;: (path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt; || path[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)? &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(path.&lt;span class=&quot;hljs-title function_&quot;&gt;shift&lt;/span&gt;()+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;path&lt;/span&gt;: path\n        });\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; valueOf = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, path&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ptr = object;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,l=path.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;l; i++) ptr = ptr[path[i]];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ptr;\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; comparer = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, l = keyPaths.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; l; i++) {\n            aVal = &lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(a, keyPaths[i].&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;);\n            bVal = &lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;(b, keyPaths[i].&lt;span class=&quot;hljs-property&quot;&gt;path&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (aVal &amp;gt; bVal) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; keyPaths[i].&lt;span class=&quot;hljs-property&quot;&gt;sign&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (aVal &amp;lt; bVal) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -keyPaths[i].&lt;span class=&quot;hljs-property&quot;&gt;sign&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;sortBy&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        keyPaths = [];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,l=&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i&amp;lt;l; i++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i])) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;saveKeyPath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i]); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;saveKeyPath&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[i].&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[+-]|[^.]+/g&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(comparer);\n    };    \n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = [\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Josh&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jones&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Carlos&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jacques&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Carlos&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Dante&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Tim&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Marley&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Courtney&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Smith&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Bob&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Smith&apos;&lt;/span&gt; }, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; }\n]\n\ndata.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Tim Marley(9)&quot;, &quot;Carlos Jacques(19)&quot;, &quot;Carlos Dante(23)&quot;, &quot;Courtney Smith(27)&quot;, &quot;Josh Jones(30)&quot;, &quot;Bob Smith(30)&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sorting by nested properties with dot-syntax or array-syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name.first&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Bob Smith(30)&quot;, &quot;Carlos Dante(23)&quot;, &quot;Carlos Jacques(19)&quot;, &quot;Courtney Smith(27)&quot;, &quot;Josh Jones(30)&quot;, &quot;Tim Marley(9)&quot;&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Bob Smith(30)&quot;, &quot;Carlos Dante(23)&quot;, &quot;Carlos Jacques(19)&quot;, &quot;Courtney Smith(27)&quot;, &quot;Josh Jones(30)&quot;, &quot;Tim Marley(9)&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sorting by multiple keys:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;data.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name.first&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Bob Smith(30)&quot;, &quot;Carlos Jacques(19)&quot;, &quot;Carlos Dante(23)&quot;, &quot;Courtney Smith(27)&quot;, &quot;Josh Jones(30)&quot;, &quot;Tim Marley(9)&quot;&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name.first&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-age&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Bob Smith(30)&quot;, &quot;Carlos Dante(23)&quot;, &quot;Carlos Jacques(19)&quot;, &quot;Courtney Smith(27)&quot;, &quot;Josh Jones(30)&quot;, &quot;Tim Marley(9)&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can fork the repo: &lt;a href=&quot;https://github.com/eneko/Array.sortBy&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/eneko/Array.sortBy&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;With ECMAScript 6 StoBor&apos;s answer can be done even more concise:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt; - b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For a normal array of elements values only:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortArrayOfElements&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrayToSort&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareElements&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &amp;lt; b)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &amp;gt; b)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arrayToSort.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(compareElements);\n}\n\ne.&lt;span class=&quot;hljs-property&quot;&gt;g&lt;/span&gt;. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array1 = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;545&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;676&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]\noutput : [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;545&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;676&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array2 = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;v&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;545&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;676&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;24&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-attr&quot;&gt;output&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;v&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;24&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;545&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;676&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For an array of objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortArrayOfObjects&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrayToSort, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareObjects&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[key] &amp;lt; b[key])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[key] &amp;gt; b[key])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arrayToSort.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(compareObjects);\n}\n\ne.&lt;span class=&quot;hljs-property&quot;&gt;g&lt;/span&gt;. &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array1= [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;User4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;},{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;User3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;User2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}]\n\noutput : [{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;User2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;User3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},{&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;User4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you use &lt;a href=&quot;http://underscorejs.org/&quot; rel=&quot;nofollow&quot;&gt;Underscore.js&lt;/a&gt;, try sortBy:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// price is of an integer type&lt;/span&gt;\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(homes, &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;); \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// price is of a string type&lt;/span&gt;\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;sortBy&lt;/span&gt;(homes, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;home&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;(home.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);}); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a slightly modified version of elegant implementation from the book &quot;JavaScript: The Good Parts&quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This version of &lt;code&gt;by&lt;/code&gt; is &lt;strong&gt;stable&lt;/strong&gt;. It preserves the order of the first sort while performing the next chained sort.&lt;/p&gt;\n\n&lt;p&gt;I have added &lt;code&gt;isAscending&lt;/code&gt; parameter to it. Also converted it to &lt;code&gt;ES6&lt;/code&gt; standards and &quot;newer&quot; good parts as recommended by the author.&lt;/p&gt;\n\n&lt;p&gt;You can sort ascending as well as descending and chain sort by multiple properties.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; by = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;name, minor, isAscending=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; reverseMutliplier = isAscending ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;o, p&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a, b;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; result;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o &amp;amp;&amp;amp; p &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; o === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; p === &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n            a = o[name];\n            b = p[name];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a === b) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; minor === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;minor&lt;/span&gt;(o, p) : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a === &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; b) {\n                result = a &amp;lt; b ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                result = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; a &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; b ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result * reverseMutliplier;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; {\n                &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error&quot;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-attr&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Expected an object when sorting by &quot;&lt;/span&gt; + name\n            };\n        }\n    };\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; s = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joe&apos;&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Besser&apos;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Moe&apos;&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Howard&apos;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joe&apos;&lt;/span&gt;,   &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;DeRita&apos;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Shemp&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Howard&apos;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Larry&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fine&apos;&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Curly&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Howard&apos;&lt;/span&gt;}\n];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort by: first ascending, last ascending&lt;/span&gt;\ns.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;by&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;by&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;last&quot;&lt;/span&gt;)));    \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sort by: first ascending, last ascending: &quot;&lt;/span&gt;, s);     &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;[&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Curly&quot;,&quot;last&quot;:&quot;Howard&quot;},&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Joe&quot;,&quot;last&quot;:&quot;Besser&quot;},     &amp;lt;======&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Joe&quot;,&quot;last&quot;:&quot;DeRita&quot;},     &amp;lt;======&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Larry&quot;,&quot;last&quot;:&quot;Fine&quot;},&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Moe&quot;,&quot;last&quot;:&quot;Howard&quot;},&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Shemp&quot;,&quot;last&quot;:&quot;Howard&quot;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort by: first ascending, last descending&lt;/span&gt;\ns.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;by&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;by&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;last&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)));  \n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sort by: first ascending, last descending: &quot;&lt;/span&gt;, s);    &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;[&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Curly&quot;,&quot;last&quot;:&quot;Howard&quot;},&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Joe&quot;,&quot;last&quot;:&quot;DeRita&quot;},     &amp;lt;========&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Joe&quot;,&quot;last&quot;:&quot;Besser&quot;},     &amp;lt;========&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Larry&quot;,&quot;last&quot;:&quot;Fine&quot;},&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Moe&quot;,&quot;last&quot;:&quot;Howard&quot;},&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     {&quot;first&quot;:&quot;Shemp&quot;,&quot;last&quot;:&quot;Howard&quot;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Create a function and sort based on the input using below code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; homes = [{\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;75201&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;162500&quot;&lt;/span&gt;\n\n }, {\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bevery Hills&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;90210&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;319250&quot;&lt;/span&gt;\n\n }, {\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;NY&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;00010&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;962500&quot;&lt;/span&gt;\n\n }];\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;list,order&lt;/span&gt;){\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(order==&lt;span class=&quot;hljs-string&quot;&gt;&quot;ASC&quot;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);\n        })\n     }\n     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;) - &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);\n        });\n     }\n }\n\n &lt;span class=&quot;hljs-title function_&quot;&gt;sortList&lt;/span&gt;(homes,&lt;span class=&quot;hljs-string&quot;&gt;&apos;DESC&apos;&lt;/span&gt;);\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(homes);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A more LINQ like solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;orderBy&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;selector, desc = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        a = &lt;span class=&quot;hljs-title function_&quot;&gt;selector&lt;/span&gt;(a);\n        b = &lt;span class=&quot;hljs-title function_&quot;&gt;selector&lt;/span&gt;(b);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (desc ? a &amp;gt; b : a &amp;lt; b) ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Advantages:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;autocompletion for properties&lt;/li&gt;\n&lt;li&gt;extends array prototype&lt;/li&gt;\n&lt;li&gt;does not change array&lt;/li&gt;\n&lt;li&gt;easy to use in method chaining&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;orderBy&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;selector, desc = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    a = &lt;span class=&quot;hljs-title function_&quot;&gt;selector&lt;/span&gt;(a);\n    b = &lt;span class=&quot;hljs-title function_&quot;&gt;selector&lt;/span&gt;(b);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a == b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (desc ? a &amp;gt; b : a &amp;lt; b) ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; homes = [{\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;75201&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;162500&quot;&lt;/span&gt;\n}, {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bevery Hills&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;90210&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;319250&quot;&lt;/span&gt;\n}, {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;NY&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;00010&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;962500&quot;&lt;/span&gt;\n}];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; sorted_homes = homes.&lt;span class=&quot;hljs-title function_&quot;&gt;orderBy&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;h&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(h.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sorted by price&quot;&lt;/span&gt;, sorted_homes);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; sorted_homes_desc = homes.&lt;span class=&quot;hljs-title function_&quot;&gt;orderBy&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;h&lt;/span&gt; =&amp;gt;&lt;/span&gt; h.&lt;span class=&quot;hljs-property&quot;&gt;city&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sorted by City descending&quot;&lt;/span&gt;, sorted_homes_desc);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For sort on multiple array object field.\nEnter your field name in &lt;code&gt;arrprop&lt;/code&gt; array like &lt;code&gt;[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]&lt;/code&gt;\nthen pass in second parameter &lt;code&gt;arrsource&lt;/code&gt; actual source we want to sort.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SortArrayobject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrprop,arrsource&lt;/span&gt;){\narrprop.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;){\narrsource.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((a[i] &amp;lt; b[i]) ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : ((a[i] &amp;gt; b[i]) ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n});\n});\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arrsource;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You will need two function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;desc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b &amp;lt; a ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : b &amp;gt; a ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : b &amp;gt;= a ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;NaN&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a &amp;lt; b ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : a &amp;gt; b ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : a &amp;gt;= b ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;NaN&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can apply this to any object property:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; data.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;desc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},\n];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// sort functions&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;desc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b &amp;lt; a ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : b &amp;gt; a ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : b &amp;gt;= a ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;NaN&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a &amp;lt; b ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : a &amp;gt; b ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : a &amp;gt;= b ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;NaN&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// DESC&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;desc&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;, b.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;insertAdjacentHTML&lt;/span&gt;(\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;beforeend&apos;&lt;/span&gt;, \n &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;strong&amp;gt;DESCending sorted&amp;lt;/strong&amp;gt;&amp;lt;pre&amp;gt;&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(data) +&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/pre&amp;gt;&apos;&lt;/span&gt;\n);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ASC&lt;/span&gt;\ndata.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asc&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;, b.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;insertAdjacentHTML&lt;/span&gt;(\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;beforeend&apos;&lt;/span&gt;, \n &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;strong&amp;gt;ASCending sorted&amp;lt;/strong&amp;gt;&amp;lt;pre&amp;gt;&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(data) +&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/pre&amp;gt;&apos;&lt;/span&gt;\n);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;use this function&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;r_sort&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a, b, field, asc&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; reverse = asc ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[field] &amp;gt; b[field]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * reverse;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b[field] &amp;gt; a[field]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * reverse;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    } }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;//usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes = homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;r_sort&lt;/span&gt;(a,b,price,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// true for ascending and false for descending&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I recently wrote a universal function to manage this for you if you want to use it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Sorts an object into an order\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@require&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jQuery&lt;/span&gt;\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; object Our JSON object to sort\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; type Only alphabetical at the moment\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; identifier The array or object key to sort by\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; order Ascending or Descending\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;Array&lt;/span&gt;\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortItems&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;object, type, identifier, order&lt;/span&gt;){\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; returnedArray = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; emptiesArray = []; &lt;span class=&quot;hljs-comment&quot;&gt;// An array for all of our empty cans&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Convert the given object to an array&lt;/span&gt;\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(object, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, object&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Store all of our empty cans in their own array&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Store all other objects in our returned array&lt;/span&gt;\n        object[identifier] == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; ? emptiesArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(object) : returnedArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(object);\n\n    });\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Sort the array based on the type given&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(type){\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;alphabetical&apos;&lt;/span&gt;:\n\n            returnedArray.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(a[identifier] == b[identifier]) ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : (\n\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Sort ascending or descending based on order given&lt;/span&gt;\n                    order == &lt;span class=&quot;hljs-string&quot;&gt;&apos;asc&apos;&lt;/span&gt; ? a[identifier] &amp;gt; b[identifier] : a[identifier] &amp;lt; b[identifier]\n\n                ) ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n            });\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-attr&quot;&gt;default&lt;/span&gt;:\n\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Return our sorted array along with the empties at the bottom depending on sort order&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; order == &lt;span class=&quot;hljs-string&quot;&gt;&apos;asc&apos;&lt;/span&gt; ? returnedArray.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(emptiesArray) : emptiesArray.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(returnedArray);\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nameA=a.&lt;span class=&quot;hljs-property&quot;&gt;prices&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;(), nameB=b.&lt;span class=&quot;hljs-property&quot;&gt;prices&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nameA &amp;lt; nameB) &lt;span class=&quot;hljs-comment&quot;&gt;//sort string ascending&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nameA &amp;gt; nameB)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//default return value (no sorting)&lt;/span&gt;\n})\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Hi after reading this article, I made a sortComparator for my needs, with the functionality to compare more than one json attributes, and i want to share it with you.&lt;/p&gt;\n\n&lt;p&gt;This solution compares only strings in ascending order, but the solution can be easy extended for each attribute to support: reverse ordering, other data types, to use locale, casting etc&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; homes = [{\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;TX&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;75201&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;162500&quot;&lt;/span&gt;\n\n}, {\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bevery Hills&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;90210&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;319250&quot;&lt;/span&gt;\n\n}, {\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;h_id&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;New York&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;state&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;NY&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zip&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;00010&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;price&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;962500&quot;&lt;/span&gt;\n\n}];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// comp = array of attributes to sort&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// comp = [&apos;attr1&apos;, &apos;attr2&apos;, &apos;attr3&apos;, ...]&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortComparator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, comp&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Compare the values of the first attribute&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[comp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] === b[comp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// if EQ proceed with the next attributes&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (comp.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortComparator&lt;/span&gt;(a, b, comp.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// if no more attributes then return EQ&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// return less or great&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a[comp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] &amp;lt; b[comp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]] ? -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort array homes&lt;/span&gt;\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortComparator&lt;/span&gt;(a, b, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;state&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;city&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;zip&apos;&lt;/span&gt;]);\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// display the array&lt;/span&gt;\nhomes.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;home&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(home.&lt;span class=&quot;hljs-property&quot;&gt;h_id&lt;/span&gt;, home.&lt;span class=&quot;hljs-property&quot;&gt;city&lt;/span&gt;, home.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;, home.&lt;span class=&quot;hljs-property&quot;&gt;zip&lt;/span&gt;, home.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the result is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$ node sort\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bevery&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hills&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;CA&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;90210&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;319250&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;York&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;NY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00010&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;962500&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dallas&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TX&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;75201&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;162500&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and another sort&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;homes.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sortComparator&lt;/span&gt;(a, b, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;city&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;zip&apos;&lt;/span&gt;]);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with result&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$ node sort\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bevery&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hills&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;CA&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;90210&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;319250&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dallas&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TX&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;75201&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;162500&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;York&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;NY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00010&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;962500&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"262":["\n&lt;p&gt;A &lt;code&gt;view model&lt;/code&gt; represents the data that you want to display on your view/page, whether it be used for static text or for input values (like textboxes and dropdown lists) that can be added to the database (or edited). It is something different than your &lt;code&gt;domain model&lt;/code&gt;. It is a model for the view.&lt;/p&gt;\n\n&lt;p&gt;Let us say that you have an &lt;code&gt;Employee&lt;/code&gt; class that represents your employee domain model and it contains the following properties (unique identifier, first name, last name and date created):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Employee&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;IEntity&lt;/span&gt;\n{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Id { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; FirstName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; LastName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DateTime DateCreated { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;View models differ from domain models in that view models only contain the data (represented by properties) that you want to use on your view.  For example, lets say that you want to add a new employee record, your view model might look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CreateEmployeeViewModel&lt;/span&gt;\n{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; FirstName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; LastName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see it only contains two of the properties. These two properties are also in the employee domain model.  Why is this you may ask?  &lt;code&gt;Id&lt;/code&gt; might not be set from the view, it might be auto generated by the Employee table.  And &lt;code&gt;DateCreated&lt;/code&gt; might also be set in the stored procedure or in the service layer of your application.  So &lt;code&gt;Id&lt;/code&gt; and &lt;code&gt;DateCreated&lt;/code&gt; are not needed in the view model. You might want to display these two properties when you view an employees details (an employee that has already been captured) as static text.&lt;/p&gt;\n\n&lt;p&gt;When loading the view/page, the create action method in your employee controller will create an instance of this view model, populate any fields if required, and then pass this view model to the view/page:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EmployeeController&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;Controller&lt;/span&gt;\n{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; IEmployeeService employeeService;\n\n     &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;EmployeeController&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IEmployeeService employeeService&lt;/span&gt;)&lt;/span&gt;\n     {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.employeeService = employeeService;\n     }\n\n     &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ActionResult &lt;span class=&quot;hljs-title&quot;&gt;Create&lt;/span&gt;()&lt;/span&gt;\n     {\n          CreateEmployeeViewModel model = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; CreateEmployeeViewModel();\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; View(model);\n     }\n\n     &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ActionResult &lt;span class=&quot;hljs-title&quot;&gt;Create&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;CreateEmployeeViewModel model&lt;/span&gt;)&lt;/span&gt;\n     {\n          &lt;span class=&quot;hljs-comment&quot;&gt;// Do what ever needs to be done before adding the employee to the database&lt;/span&gt;\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your view/page might look like this (assuming you are using &lt;code&gt;ASP.NET MVC&lt;/code&gt; and the &lt;code&gt;Razor&lt;/code&gt; view engine):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;@model MyProject.Web.ViewModels.CreateEmployeeViewModel\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;First Name:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;@Html.TextBoxFor(m =&amp;gt; m.FirstName, new { maxlength = &quot;50&quot;, size = &quot;50&quot; })\n              @Html.ValidationMessageFor(m =&amp;gt; m.FirstName)\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;Last Name:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;@Html.TextBoxFor(m =&amp;gt; m.LastName, new { maxlength = &quot;50&quot;, size = &quot;50&quot; })\n              @Html.ValidationMessageFor(m =&amp;gt; m.LastName)\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Validation would thus be done only on &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;LastName&lt;/code&gt;.  Using &lt;a href=&quot;https://fluentvalidation.net/&quot; rel=&quot;noreferrer&quot;&gt;FluentValidation&lt;/a&gt; you might have validation like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;public class CreateEmployeeViewModelValidator : AbstractValidator&amp;lt;CreateEmployeeViewModel&amp;gt;\n{\n     public &lt;span class=&quot;hljs-built_in&quot;&gt;CreateEmployeeViewModelValidator&lt;/span&gt;()\n     {\n          &lt;span class=&quot;hljs-built_in&quot;&gt;RuleFor&lt;/span&gt;(m =&amp;gt; m.FirstName)\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.NotEmpty&lt;/span&gt;()\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.WithMessage&lt;/span&gt;(&quot;First name required&quot;)\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.Length&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.WithMessage&lt;/span&gt;(&quot;First name must not be greater than &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; characters&quot;);\n\n          &lt;span class=&quot;hljs-built_in&quot;&gt;RuleFor&lt;/span&gt;(m =&amp;gt; m.LastName)\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.NotEmpty&lt;/span&gt;()\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.WithMessage&lt;/span&gt;(&quot;Last name required&quot;)\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.Length&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n               &lt;span class=&quot;hljs-selector-class&quot;&gt;.WithMessage&lt;/span&gt;(&quot;Last name must not be greater than &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt; characters&quot;);\n     }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And with Data Annotations it might look this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CreateEmployeeViewModel&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;ViewModelBase&lt;/span&gt;\n{\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Display(Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;First Name&quot;&lt;/span&gt;)&lt;/span&gt;]\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Required(ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;First name required&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; FirstName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Display(Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Last Name&quot;&lt;/span&gt;)&lt;/span&gt;]\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Required(ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Last name required&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; LastName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;The key thing to remember is that the view model only represents the data that you want to use&lt;/strong&gt;, nothing else.  You can imagine all the unnecessary code and validation if you have a domain model with 30 properties and you only want to update a single value.  Given this scenario you would only have this one value/property in the view model and not all the properties that are in the domain object.&lt;/p&gt;\n\n&lt;p&gt;A view model might not only have data from one database table. It can combine data from another table. Take my example above about adding a new employee record. Besides adding just the first and last names you might also want to add the department of the employee. This list of departments will come from your &lt;code&gt;Departments&lt;/code&gt; table. So now you have data from the &lt;code&gt;Employees&lt;/code&gt; and &lt;code&gt;Departments&lt;/code&gt; tables in one view model. You will just then need to add the following two properties to your view model and populate it with data:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; DepartmentId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;Department&amp;gt; Departments { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When editing employee data (an employee that has already been added to the database) it wouldnt differ much from my example above.  Create a view model, call it for example &lt;code&gt;EditEmployeeViewModel&lt;/code&gt;. Only have the data that you want to edit in this view model, like first name and last name. Edit the data and click the submit button. I wouldnt worry too much about the &lt;code&gt;Id&lt;/code&gt; field because the &lt;code&gt;Id&lt;/code&gt; value will probably been in the URL, for example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;http://www.yourwebsite.com/Employee/Edit/3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Take this &lt;code&gt;Id&lt;/code&gt; and pass it through to your repository layer, together with your first name and last name values.&lt;/p&gt;\n\n&lt;p&gt;When deleting a record, I normally follow the same path as with the edit view model. I would also have a URL, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;http://www.yourwebsite.com/Employee/Delete/3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When the view loads up for the first time I would get the employees data from the database using the &lt;code&gt;Id&lt;/code&gt; of 3. I would then just display static text on my view/page so that the user can see what employee is being deleted. When the user clicks the Delete button, I would just use the &lt;code&gt;Id&lt;/code&gt; value of 3 and pass it to my repository layer. You only need the &lt;code&gt;Id&lt;/code&gt; to delete a record from the table.&lt;/p&gt;\n\n&lt;p&gt;Another point, you dont really need a view model for every action. If it is simple data then it would be fine to only use &lt;code&gt;EmployeeViewModel&lt;/code&gt;. If it is complex views/pages and they differ from each other then I would suggest you use separate view models for each.&lt;/p&gt;\n\n&lt;p&gt;I hope this clears up any confusion that you had about view models and domain models.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;View model&lt;/strong&gt; is a class that represents the data model used in a specific view. We could use this class as a model for a login page:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoginPageVM&lt;/span&gt;\n{\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Required(ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Are you really trying to login without entering username?&quot;&lt;/span&gt;)&lt;/span&gt;]\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DisplayName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Username/e-mail&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    [&lt;span class=&quot;hljs-meta&quot;&gt;Required(ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter password:)&quot;&lt;/span&gt;)&lt;/span&gt;]\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DisplayName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Password&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Password { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DisplayName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stay logged in when browser is closed&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; RememberMe { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using this view model you can define the view (Razor view engine):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@model CamelTrap.Models.ViewModels.LoginPageVM&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@using (&lt;span class=&quot;hljs-params&quot;&gt;Html.BeginForm(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;) {&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;    @Html.EditorFor(&lt;span class=&quot;hljs-params&quot;&gt;m =&amp;gt; m&lt;/span&gt;);&lt;/span&gt;\n    &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Save&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; /&amp;gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And actions:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[HttpGet]&lt;/span&gt;\npublic ActionResult &lt;span class=&quot;hljs-built_in&quot;&gt;LoginPage&lt;/span&gt;()\n{\n    return &lt;span class=&quot;hljs-built_in&quot;&gt;View&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-selector-attr&quot;&gt;[HttpPost]&lt;/span&gt;\npublic ActionResult &lt;span class=&quot;hljs-built_in&quot;&gt;LoginPage&lt;/span&gt;(LoginPageVM model)\n{\n    ..&lt;span class=&quot;hljs-selector-class&quot;&gt;.code&lt;/span&gt; to login user to application...\n    return &lt;span class=&quot;hljs-built_in&quot;&gt;View&lt;/span&gt;(model);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which produces this result (screen is taken after submitting form, with validation messages):&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/xfiZ2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;As you can see, a view model has many roles:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;View models documents a view by consisting only fields, that are represented in view.&lt;/li&gt;\n&lt;li&gt;View models may contain specific validation rules using data annotations or IDataErrorInfo.&lt;/li&gt;\n&lt;li&gt;View model defines how a view should look (for &lt;code&gt;LabelFor&lt;/code&gt;,&lt;code&gt;EditorFor&lt;/code&gt;,&lt;code&gt;DisplayFor&lt;/code&gt; helpers).&lt;/li&gt;\n&lt;li&gt;View models can combine values from different database entities.&lt;/li&gt;\n&lt;li&gt;You can specify easily display templates for view models and reuse them in many places using DisplayFor or EditorFor helpers.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Another example of a view model and its retrieval: We want to display basic user data, his privileges and users name. We create a special view model, which contains only the required fields. We retrieve data from different entities from database, but the view is only aware of the view model class:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserVM&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; ID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; FirstName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; LastName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; IsAdministrator { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; MothersName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Retrieval:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; user = db.userRepository.GetUser(id);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; model = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UserVM() {\n   ID = user.ID,\n   FirstName = user.FirstName,\n   LastName = user.LastName,\n   IsAdministrator = user.Proviledges.IsAdministrator,\n   MothersName = user.Mother.FirstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + user.Mother.LastName\n} \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Edit: I updated this answer on my Blog:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.samwheat.com/post/The-function-of-ViewModels-in-MVC-web-development&quot; rel=&quot;noreferrer&quot;&gt;http://www.samwheat.com/post/The-function-of-ViewModels-in-MVC-web-development&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;My answer is a bit lengthy but I think it is important to compare view models to other types of commonly used models to understand why they are different and why they are necessary.&lt;/p&gt;\n&lt;p&gt;To summarize, and to directly answer the question that is asked:&lt;/p&gt;\n&lt;p&gt;Generally speaking, a view model is an object that contains all the properties and methods necessary to render a view. View model properties are often related to data objects such as customers and orders and in addition, they also contain properties related to the page or application itself such as user name, application name, etc. View models provide a convenient object to pass to a rendering engine to create an HTML page.  One of many reasons to use a view model is that view models provide a way to unit test certain presentation tasks such as handling user input, validating data, retrieving data for display, etc.&lt;/p&gt;\n&lt;p&gt;Here is a comparison of Entity models (a.ka. DTOs a.ka. models), Presentation Models, and View Models.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Data Transfer Objects a.k.a Model&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A Data Transfer Object (DTO) is a class with properties that match a table schema in a database.  DTOs are named for their common usage for shuttling data to and from a data store.&lt;br&gt;\nCharacteristics of DTOs:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Are business objects  their definition is dependent on application data.&lt;/li&gt;\n&lt;li&gt;Usually contain properties only  no code.&lt;/li&gt;\n&lt;li&gt;Primarily used for transporting data to and from a database.&lt;/li&gt;\n&lt;li&gt;Properties exactly or closely match fields on a specific table in a data store.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Database tables are usually normalized therefore DTOs are usually normalized also.  This makes them of limited use for presenting data.  However, for certain simple data structures, they often do quite well.&lt;/p&gt;\n&lt;p&gt;Here are two examples of what DTOs might look like:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Customer&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; ID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; CustomerName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Order&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; ID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; CustomerID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DateTime OrderDate { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Decimal OrderAmount { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Presentation Models&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A presentation model is a &lt;em&gt;utility&lt;/em&gt; class that is used to render data on a screen or report.  Presentation models are typically used to model complex data structures that are composed of data from multiple DTOs.  Presentation models often represent a denormalized view of data.&lt;/p&gt;\n&lt;p&gt;Characteristics of Presentation Models:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Are business objects  their definition is dependent on application data.&lt;/li&gt;\n&lt;li&gt;Contain mostly properties. Code is typically limited to formatting data or converting it to or from a DTO.  Presentation Models should not contain business logic.&lt;/li&gt;\n&lt;li&gt;Often present a denormalized view of data.  That is, they often combine properties from multiple DTOs.&lt;/li&gt;\n&lt;li&gt;Often contain properties of a different base type than a DTO.  For example, dollar amounts may be represented as strings so they can contain commas and a currency symbol.&lt;/li&gt;\n&lt;li&gt;Often defined by how they are used as well as their object characteristics.  In other words, a simple DTO that is used as the backing model for rendering a grid is in fact also a presentation model in the context of that grid.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Presentation models are used as needed and where needed (whereas DTOs are usually tied to the database schema).  A presentation model may be used to model data for an entire page, a grid on a page, or a dropdown on a grid on a page. Presentation models often contain properties that are other presentation models.  Presentation models are often constructed for a single-use purpose such as to render a specific grid on a single page.&lt;/p&gt;\n&lt;p&gt;An example presentation model:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrder&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; OrderID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DateTime OrderDate { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PrettyDate { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; OrderDate.ToShortDateString(); } }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; CustomerName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Decimal OrderAmount { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PrettyAmount { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0:C}&quot;&lt;/span&gt;, OrderAmount); } }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;View Models&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A view model is similar to a presentation model in that is a backing class for rendering a view.  However, it is very different from a Presentation Model or a DTO in how it is constructed.  View models often contain the same properties as presentation models and DTOs and for this reason, they are often confused one for the other.&lt;/p&gt;\n&lt;p&gt;Characteristics of View Models:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Are the single source of data used to render a page or screen.  Usually, this means that a view model will expose every property that any control on the page will need to render itself correctly.  Making the view model the single source of data for the view greatly improves its capability and value for unit testing.&lt;/li&gt;\n&lt;li&gt;Are &lt;strong&gt;composite objects&lt;/strong&gt; that contain properties that consist of application data as well as properties that are used by application code.  This characteristic is crucial when designing the view model for reusability and is discussed in the examples below.&lt;/li&gt;\n&lt;li&gt;Contain application code.  View Models usually contain methods that are called during rendering and when the user is interacting with the page.  This code typically relates to event handling, animation, visibility of controls, styling, etc.&lt;/li&gt;\n&lt;li&gt;Contain code that calls business services for the purpose of retrieving data or sending it to a database server.  This code is often mistakenly placed in a controller. Calling business services from a controller usually limits the usefulness of the view model for unit testing.  To be clear, view models themselves should not contain business logic but should make calls to services which do contain business logic.&lt;/li&gt;\n&lt;li&gt;Often contain properties that are other view models for other pages or screens.&lt;/li&gt;\n&lt;li&gt;Are written per page or per screen.  A unique View Model is typically written for every page or screen in an application.&lt;/li&gt;\n&lt;li&gt;Usually derive from a base class since most pages and screens share common properties.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;em&gt;View Model Composition&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;As stated earlier, view models are composite objects in that they combine application properties and business data properties on a single object.  Examples of commonly used application properties that are used on view models are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Properties that are used to display application state such as error messages, user name, status, etc.&lt;/li&gt;\n&lt;li&gt;Properties used to format, display, stylize, or animate controls.&lt;/li&gt;\n&lt;li&gt;Properties used for data binding such as list objects and properties that hold intermediate data that is input by the user.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The following examples show why the composite nature of view models is important and how we can best construct a View Model that efficient and reusable.&lt;/p&gt;\n&lt;p&gt;Assume we are writing a web application.  One of the requirements of the application design is that the page title, user name, and application name must be displayed on every page.  If we want to create a page to display a presentation order object, we may modify the presentation model as follows:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrder&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PageTitle { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; ApplicationName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; OrderID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; DateTime OrderDate { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PrettyDate { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; OrderDate.ToShortDateString(); } }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; CustomerName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Decimal OrderAmount { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PrettyAmount { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0:C}&quot;&lt;/span&gt;, OrderAmount); } }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This design might work but what if we want to create a page that will display a list of orders?  The PageTitle, UserName, and ApplicationName properties will be repeated and become unwieldy to work with.  Also, what if we want to define some page-level logic in the constructor of the class?  We can no longer do that if we create an instance for every order that will be displayed.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Composition over inheritance&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Here is a way we might re-factor the order presentation model such that it becomes a true view model and will be useful for displaying a single PresentationOrder object or a collection of PresentationOrder objects:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrderVM&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Application properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PageTitle { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; ApplicationName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Business properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PresentationOrder Order { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrderVM&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Application properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PageTitle { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; ApplicationName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Business properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;PresentationOrder&amp;gt; Orders { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Looking at the above two classes we can see that one way to think about a view model is that it is a presentation model that contains another presentation model as a property.  The top-level presentation model (i.e. view model) contains properties that are relevant to the page or application while the presentation model (property) contains properties that are relevant to application data.&lt;/p&gt;\n&lt;p&gt;We can take our design a step further and create a base view model class that can be used not only for PresentationOrders but for any other class as well:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseViewModel&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Application properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PageTitle { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; ApplicationName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we can simplify our PresentationOrderVM like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrderVM&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;BaseViewModel&lt;/span&gt;&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Business properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; PresentationOrder Order { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrderVM&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;BaseViewModel&lt;/span&gt;&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Business properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;PresentationOrder&amp;gt; Orders { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can make our BaseViewModel even more re-usable by making it generic:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BaseViewModel&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Application properties&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PageTitle { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; ApplicationName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Business property&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T BusinessObject { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now our implementations are effortless:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrderVM&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;BaseViewModel&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;PresentationOrder&lt;/span&gt;&amp;gt;&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// done!&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PresentationOrderVM&lt;/span&gt; : &lt;span class=&quot;hljs-type&quot;&gt;BaseViewModel&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;List&amp;lt;PresentationOrder&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// done!&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you have properties specific to the view, and not related to the DB/Service/Data store, it is a good practice to use ViewModels. Say, you want to leave a checkbox selected based on a DB field (or two) but the DB field itself isn&apos;t a boolean. While it is possible to create these properties in the Model itself and keep it hidden from the binding to data, you may not want to clutter the Model depending on the amount of such fields and transactions.&lt;/p&gt;\n\n&lt;p&gt;If there are too few view-specific data and/or transformations, you can use the Model itself&lt;/p&gt;\n    ","\n&lt;p&gt;I didn&apos;t read all the posts but every answer seems to be missing one concept that really helped me &quot;get it&quot;...&lt;/p&gt;\n&lt;p&gt;If a Model is akin to a database &lt;em&gt;&lt;strong&gt;Table&lt;/strong&gt;&lt;/em&gt;, then a ViewModel is akin to a database &lt;em&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/em&gt; - A view typically either returns small amounts of data from one table or, complex sets of data from multiple tables (joins).&lt;/p&gt;\n&lt;p&gt;I find myself using ViewModels to pass the info into a view/form, and then transferring that data into a valid Model when the form posts back to the controller - also very handy for storing Lists(IEnumerable).&lt;/p&gt;\n    ","\n&lt;p&gt;View model a is simple class which can contain more than one class property. We use it to inherit all the required properties, e.g. I have two classes Student and Subject &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Public &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Student&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; Id {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Name {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n}  \nPublic &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Subject&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; SubjectID {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; SubjectName {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we want to display records student&apos;s Name and Subject&apos;s Name in View (In MVC), but it&apos;s not possible to add more than one classes like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-less&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@model&lt;/span&gt; ProjectName.Model.Student  \n &lt;span class=&quot;hljs-variable&quot;&gt;@model&lt;/span&gt; ProjectName.Model.Subject\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the code above will throw an error...&lt;/p&gt;\n\n&lt;p&gt;Now we create one class and can give it any name, but this format &quot;XyzViewModel&quot; will make it easier to understand. It is inheritance concept.\nNow we create a third class with the following name:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StudentViewModel&lt;/span&gt;:&lt;span class=&quot;hljs-title&quot;&gt;Subject&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; ID {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Name {&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;;}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now  we use this ViewModel in View &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;@model ProjectName.Model.StudentViewModel&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Now we are able to access all the properties of StudentViewModel and inherited class in View.&lt;/p&gt;\n    ","\n&lt;p&gt;A lot of big examples, let me explain in a clear and crispy way.&lt;/p&gt;\n&lt;p&gt;ViewModel = Model that is created to serve the view.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;ASP.NET MVC view can&apos;t have more than one model so if we need to display properties from more than one model in the view, it is not possible. ViewModel serves this purpose.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;View Model is a model class that can hold only those properties that are required for a view. It can also contain properties from more than one entity (tables) of the database. As the name suggests, this model is created specifically for the View requirements.&lt;/p&gt;\n&lt;p&gt;A few examples of View Models are below&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;To list data from more than entities in a view page  we can create a\nView model and have properties of all the entities for which we want\nto list data. Join those database entities and set the View model\nproperties and return to the View to show data of different\nentities in one tabular form&lt;/li&gt;\n&lt;li&gt;The view model may define only specific fields of a single entity that is\nrequired for the View.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;ViewModel can also be used to insert, and update records into more than one entity however the main use of ViewModel is to display columns from multiple entities (model) into a single view.&lt;/p&gt;\n&lt;p&gt;The way of creating a ViewModel is the same as creating a Model, the way of creating a view for the ViewModel is the same as creating a view for a Model.&lt;/p&gt;\n&lt;p&gt;Here is a small example of &lt;a href=&quot;http://techfunda.com/howto/262/list-data-using-viewmodel&quot; rel=&quot;nofollow noreferrer&quot;&gt;List data using ViewModel&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Hope this will be useful.&lt;/p&gt;\n    ","\n&lt;p&gt;MVC doesn&apos;t have a view model: it has a model, view, and controller. A ViewModel is part of MVVM (Model-View-ViewModel). MVVM is derived from the Presentation Model and is popularized in WPF. There should also be a model in MVVM, but most people miss the point of that pattern completely and they will only have a view and a view model. The model in MVC is similar to the model in MVVM.&lt;/p&gt;\n&lt;p&gt;In MVC the process is split into 3 different responsibilities:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;View is responsible for presenting the data to the user&lt;/li&gt;\n&lt;li&gt;A controller is responsible for the page flow&lt;/li&gt;\n&lt;li&gt;A model is responsible for the business logic&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;MVC is not very suitable for web applications. It is a pattern introduced by Smalltalk for creating desktop applications. A web environment behaves completely differently. It doesn&apos;t make much sense to copy a 40-year-old concept from desktop development and paste it into a web environment. However, a lot of people think this is ok because their application compiles and returns the correct values. That is, in my opinion, not enough to declare a certain design choice as ok.&lt;/p&gt;\n&lt;p&gt;An example of a model in a web application could be:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoginModel&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; AuthenticationService authentication;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoginModel&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;AuthenticationService authentication&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.authentication = authentication;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Login&lt;/span&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; authentication.Login(Username, Password);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Username { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Password { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The controller can use it like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoginController&lt;/span&gt;\n{\n    [&lt;span class=&quot;hljs-meta&quot;&gt;HttpPost&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ActionResult &lt;span class=&quot;hljs-title&quot;&gt;Login&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;LoginModel model&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; success = model.Login();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (success)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RedirectResult(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/dashboard&quot;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            TempData[&lt;span class=&quot;hljs-string&quot;&gt;&quot;message&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid username and/or password&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; RedirectResult(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/login&quot;&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Your controller methods and your models will be small, easily testable, and to the point.&lt;/p&gt;\n    ","\n&lt;p&gt;ViewModel is workaround that patches the conceptual clumsiness of the MVC framework. It represents the 4th layer in the 3-layer Model-View-Controller architecture. when Model (domain model) is not appropriate, too big (bigger than 2-3 fields) for the View, we create smaller ViewModel to pass it to the View.&lt;/p&gt;\n    ","\n&lt;p&gt;View Model is a class that we can use for rendering data on View. Suppose you have two entities Place and PlaceCategory and you want to access data from both entities using a single model then we use ViewModel.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Place&lt;/span&gt;\n    {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; PlaceId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PlaceName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Latitude { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Longitude { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; BestTime { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Category&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; ID { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;? PlaceId { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PlaceCategoryName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PlaceCategoryType { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;PlaceCategoryviewModel&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PlaceName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; BestTime { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PlaceCategoryName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; PlaceCategoryType { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So in the above Example, Place and Category are the two different entities and PlaceCategory ViewModel is ViewModel which we can use on View.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;ViewModel contain fields that are represented in the view (for\nLabelFor,EditorFor,DisplayFor helpers)&lt;/li&gt;\n&lt;li&gt;ViewModel can have specific validation rules using data annotations\nor IDataErrorInfo.&lt;/li&gt;\n&lt;li&gt;ViewModel can have multiple entities or objects from different data\nmodels or data source.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Designing ViewModel&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserLoginViewModel&lt;/span&gt; \n{ \n[&lt;span class=&quot;hljs-meta&quot;&gt;Required(ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your username&quot;&lt;/span&gt;)&lt;/span&gt;] \n[&lt;span class=&quot;hljs-meta&quot;&gt;Display(Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;User Name&quot;&lt;/span&gt;)&lt;/span&gt;]\n[&lt;span class=&quot;hljs-meta&quot;&gt;MaxLength(50)&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; UserName { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; }\n [&lt;span class=&quot;hljs-meta&quot;&gt;Required(ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter your password&quot;&lt;/span&gt;)&lt;/span&gt;]\n [&lt;span class=&quot;hljs-meta&quot;&gt;Display(Name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Password&quot;&lt;/span&gt;)&lt;/span&gt;]\n [&lt;span class=&quot;hljs-meta&quot;&gt;MaxLength(50)&lt;/span&gt;]\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; Password { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;; } \n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Presenting the viewmodel in the view&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@model&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyModels&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;UserLoginViewModel&lt;/span&gt; \n@{\n &lt;span class=&quot;hljs-title class_&quot;&gt;ViewBag&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Title&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;User Login&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Layout&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;~/Views/Shared/_Layout.cshtml&quot;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;@using&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Html&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;BeginForm&lt;/span&gt;())\n{\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;editor-label&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n @Html.LabelFor(m =&amp;gt; m.UserName)\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;editor-field&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n @Html.TextBoxFor(m =&amp;gt; m.UserName)\n @Html.ValidationMessageFor(m =&amp;gt; m.UserName)\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;editor-label&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n @Html.LabelFor(m =&amp;gt; m.Password)\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;editor-field&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n @Html.PasswordFor(m =&amp;gt; m.Password)\n @Html.ValidationMessageFor(m =&amp;gt; m.Password)\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Log In&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/div&amp;gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Working with Action&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ActionResult &lt;span class=&quot;hljs-title&quot;&gt;Login&lt;/span&gt;()&lt;/span&gt;\n{ \n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; View();\n}\n[&lt;span class=&quot;hljs-meta&quot;&gt;HttpPost&lt;/span&gt;]\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ActionResult &lt;span class=&quot;hljs-title&quot;&gt;Login&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;UserLoginViewModel user&lt;/span&gt;)&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-comment&quot;&gt;// To acces data using LINQ&lt;/span&gt;\nDataClassesDataContext mobjentity = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DataClassesDataContext();\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ModelState.IsValid) \n{ \n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n {\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; q = mobjentity.tblUsers.Where(m =&amp;gt; m.UserName == user.UserName &amp;amp;&amp;amp; m.Password == user.Password).ToList(); \n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (q.Count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) \n { \n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; RedirectToAction(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MyAccount&quot;&lt;/span&gt;);\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n {\n ModelState.AddModelError(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;The user name or password provided is incorrect.&quot;&lt;/span&gt;);\n }\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n {\n } \n } \n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; View(user);\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;In ViewModel put only those fields/data that you want to display on \nthe view/page.&lt;/li&gt;\n&lt;li&gt;Since view reperesents the properties of the ViewModel, hence it is\neasy for rendering and maintenance.&lt;/li&gt;\n&lt;li&gt;Use a mapper when ViewModel become more complex.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;ViewModel is the model containing fields to use in MVC View. Using ViewModel for the view has the following benefits:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;As the database model (Entity class) contains a single table&apos;s data. If required data from multiple tables, a single ViewModel can have multiple tables&apos; fields.&lt;/li&gt;\n&lt;li&gt;User can not interact directly with the database model, so the Database layer or model is secured.&lt;/li&gt;\n&lt;li&gt;It is used to get data from the database model through the repository and pass it to view. Similarly, it utilizes for posting data to the database model to update database records.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;If you want to study code on how to set up a &quot;Baseline&quot; web application with ViewModels I can advise you to download this code on GitHub: &lt;a href=&quot;https://github.com/ajsaulsberry/BlipAjax&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ajsaulsberry/BlipAjax&lt;/a&gt;. I developed large enterprise applications. When you do this it&apos;s problematic to set up a good architecture that handles all this &quot;ViewModel&quot; functionality. I think with BlipAjax you will have a very good &quot;baseline&quot; to start with. It&apos;s just a simple website, but great in its simplicity. I like the way they used the English language to point out what&apos;s really needed in the application.&lt;/p&gt;\n    ","\n&lt;p&gt;A view model is a conceptual model of data. Its use is to for example either get a subset or combine data from different tables.&lt;/p&gt;\n&lt;p&gt;You might only want specific properties, so this allows you to only load those and not add unnecessary properties.&lt;/p&gt;\n    ","\n&lt;p&gt;View model is same as your datamodel but you can add 2 or more data model classes in it. According to that you have to change your controller to take 2 models at once&lt;/p&gt;\n    "],"263":["\n&lt;p&gt;Using &lt;code&gt;extern&lt;/code&gt; is only of relevance when the program you&apos;re building\nconsists of multiple source files linked together, where some of the\nvariables defined, for example, in source file &lt;code&gt;file1.c&lt;/code&gt; need to be\nreferenced in other source files, such as &lt;code&gt;file2.c&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It is important to &lt;a href=&quot;https://stackoverflow.com/questions/1410563&quot;&gt;understand the difference between &lt;em&gt;defining&lt;/em&gt; a\nvariable and &lt;em&gt;declaring&lt;/em&gt; a\nvariable&lt;/a&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A variable is &lt;strong&gt;declared&lt;/strong&gt; when the compiler is informed that a\nvariable exists (and this is its type); it does not allocate the\nstorage for the variable at that point.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A variable is &lt;strong&gt;defined&lt;/strong&gt; when the compiler allocates the storage for\nthe variable.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You may declare a variable multiple times (though once is sufficient);\nyou may only define it once within a given scope.\nA variable definition is also a declaration, but not all variable\ndeclarations are definitions.&lt;/p&gt;\n&lt;h2&gt;Best way to declare and define global variables&lt;/h2&gt;\n&lt;p&gt;The clean, reliable way to declare and define global variables is to use\na header file to contain an &lt;code&gt;extern&lt;/code&gt; &lt;em&gt;declaration&lt;/em&gt; of the variable.&lt;/p&gt;\n&lt;p&gt;The header is included by the one source file that defines the variable\nand by all the source files that reference the variable.\nFor each program, one source file (and only one source file) defines the\nvariable.\nSimilarly, one header file (and only one header file) should declare the\nvariable.\nThe header file is crucial; it enables cross-checking between\nindependent TUs (translation units  think source files) and ensures\nconsistency.&lt;/p&gt;\n&lt;p&gt;Although there are other ways of doing it, this method is simple and\nreliable.\nIt is demonstrated by &lt;code&gt;file3.h&lt;/code&gt;, &lt;code&gt;file1.c&lt;/code&gt; and &lt;code&gt;file2.c&lt;/code&gt;:&lt;/p&gt;\n&lt;h3&gt;file3.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Declaration of the variable */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file1.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Declaration made available here */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog1.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Function declarations */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Variable defined here */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable = &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;/* Definition checked against declaration */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog1.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s the best way to declare and define global variables.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog1&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The complete programs shown use functions, so function declarations have\ncrept in.\nBoth C99 and C11 require functions to be declared or defined before they\nare used (whereas C90 did not, for good reasons).\nI use the keyword &lt;code&gt;extern&lt;/code&gt; in front of function declarations in headers\nfor consistency &amp;nbsp;to match the &lt;code&gt;extern&lt;/code&gt; in front of variable\ndeclarations in headers.\nMany people prefer not to use &lt;code&gt;extern&lt;/code&gt; in front of function\ndeclarations; the compiler doesn&apos;t care  and ultimately, neither do I\nas long as you&apos;re consistent, at least within a source file.&lt;/p&gt;\n&lt;h3&gt;prog1.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog1.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog1.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_it();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_it();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog1&lt;/code&gt; uses &lt;code&gt;prog1.c&lt;/code&gt;, &lt;code&gt;file1.c&lt;/code&gt;, &lt;code&gt;file2.c&lt;/code&gt;, &lt;code&gt;file3.h&lt;/code&gt; and &lt;code&gt;prog1.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The file &lt;code&gt;prog1.mk&lt;/code&gt; is a makefile for &lt;code&gt;prog1&lt;/code&gt; only.\nIt will work with most versions of &lt;code&gt;make&lt;/code&gt; produced since about the turn\nof the millennium.\nIt is not tied specifically to GNU Make.&lt;/p&gt;\n&lt;h3&gt;prog1.mk&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;# Minimal makefile &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prog1\n\nPROGRAM = prog1\nFILES.c = prog1.c file1.c file2.c\nFILES.h = prog1.h file3.h\nFILES.o = ${FILES.c:.c=.o}\n\nCC      = gcc\nSFLAGS  = -&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;=c11\nGFLAGS  = -g\nOFLAGS  = -O3\nWFLAG1  = -Wall\nWFLAG2  = -Wextra\nWFLAG3  = -Werror\nWFLAG4  = -Wstrict-prototypes\nWFLAG5  = -Wmissing-prototypes\nWFLAGS  = ${WFLAG1} ${WFLAG2} ${WFLAG3} ${WFLAG4} ${WFLAG5}\nUFLAGS  = # Set on command line only\n\nCFLAGS  = ${SFLAGS} ${GFLAGS} ${OFLAGS} ${WFLAGS} ${UFLAGS}\nLDFLAGS =\nLDLIBS  =\n\nall:    ${PROGRAM}\n\n${PROGRAM}: ${FILES.o}\n    ${CC} -o $@ ${CFLAGS} ${FILES.o} ${LDFLAGS} ${LDLIBS}\n\nprog1.o: ${FILES.h}\nfile1.o: ${FILES.h}\nfile2.o: ${FILES.h}\n\n# If it exists, prog1.dSYM is a directory on macOS\nDEBRIS = a.out core *~ *.dSYM\nRM_FR  = rm -fr\n\nclean:\n    ${RM_FR} ${FILES.o} ${PROGRAM} ${DEBRIS}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Guidelines&lt;/h2&gt;\n&lt;p&gt;Rules to be broken by experts only, and only with good reason:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A header file only contains &lt;code&gt;extern&lt;/code&gt; declarations of variables  never\n&lt;code&gt;static&lt;/code&gt; or unqualified variable definitions.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For any given variable, only one header file declares it (SPOT \nSingle Point of Truth).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A source file never contains &lt;code&gt;extern&lt;/code&gt; declarations of variables \nsource files always include the (sole) header that declares them.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For any given variable, exactly one source file defines the variable,\npreferably initializing it too.  (Although there is no need to\ninitialize explicitly to zero, it does no harm and can do some good,\nbecause there can be only one initialized definition of a particular\nglobal variable in a program).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The source file that defines the variable also includes the header to\nensure that the definition and the declaration are consistent.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A function should never need to declare a variable using &lt;code&gt;extern&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Avoid global variables whenever possible  use functions instead.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sup&gt;&lt;em&gt;The source code and text of this answer are available in my\n&lt;a href=&quot;https://github.com/jleffler/soq&quot; rel=&quot;noreferrer&quot;&gt;SOQ&lt;/a&gt; (Stack Overflow Questions)\nrepository on GitHub in the\n&lt;a href=&quot;https://github.com/jleffler/soq/tree/master/src/so-0143-3204&quot; rel=&quot;noreferrer&quot;&gt;src/so-0143-3204&lt;/a&gt;\nsub-directory.&lt;/em&gt;\n&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;&lt;em&gt;If you&apos;re not an experienced C programmer, you could (and perhaps\nshould) stop reading here.&lt;/em&gt;\n&lt;/sup&gt;&lt;/p&gt;\n&lt;h2&gt;Not so good way to define global variables&lt;/h2&gt;\n&lt;p&gt;With some (indeed, many) C compilers, you can get away with what&apos;s\ncalled a &apos;common&apos; definition of a variable too.\n&apos;Common&apos;, here, refers to a technique used in Fortran for sharing\nvariables between source files, using a (possibly named) COMMON block.\nWhat happens here is that each of a number of files provides a tentative\ndefinition of the variable.\nAs long as no more than one file provides an initialized definition,\nthen the various files end up sharing a common single definition of the\nvariable:&lt;/p&gt;\n&lt;h3&gt;file10.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in portable code */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { l++; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file11.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in portable code */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { l--; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file12.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in portable code */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;l = %ld\\n&quot;&lt;/span&gt;, l); }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This technique does not conform to the letter of the C standard and the\n&apos;one definition rule&apos;  it is officially undefined behaviour:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#J.2&quot; rel=&quot;noreferrer&quot;&gt;J.2 Undefined behavior&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An identifier with external linkage is used, but in the program there\ndoes not exist exactly one external definition for the identifier, or\nthe identifier is not used and there exist multiple external\ndefinitions for the identifier (6.9).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#6.9p5&quot; rel=&quot;noreferrer&quot;&gt;§6.9 External definitions ¶5&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An &lt;em&gt;external definition&lt;/em&gt; is an external declaration that is also a\ndefinition of a function (other than an inline definition) or an\nobject.\nIf an identifier declared with external linkage is used in an\nexpression (other than as part of the operand of a &lt;code&gt;sizeof&lt;/code&gt; or\n&lt;code&gt;_Alignof&lt;/code&gt; operator whose result is an integer constant), somewhere in\nthe entire program there shall be exactly one external definition for\nthe identifier; otherwise, there shall be no more than\none.&lt;sup&gt;161)&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;sup&gt;161)&lt;/sup&gt; Thus, if an identifier declared with external linkage\nis not used in an expression, there need be no external definition for\nit.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;However, the C standard also lists it in informative Annex J as one of\nthe &lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#J.5&quot; rel=&quot;noreferrer&quot;&gt;Common extensions&lt;/a&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html#J.5.11&quot; rel=&quot;noreferrer&quot;&gt;J.5.11 Multiple external definitions&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There may be more than one external definition for the identifier of\nan object, with or without the explicit use of the keyword extern; if\nthe definitions disagree, or more than one is initialized, the\nbehavior is undefined (6.9.2).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Because this technique is not always supported, it is best to avoid\nusing it, &lt;em&gt;especially if your code needs to be portable&lt;/em&gt;.\nUsing this technique, you can also end up with unintentional type\npunning.&lt;/p&gt;\n&lt;p&gt;If one of the files above declared &lt;code&gt;l&lt;/code&gt; as a &lt;code&gt;double&lt;/code&gt; instead of as a\n&lt;code&gt;long&lt;/code&gt;, C&apos;s type-unsafe linkers probably would not spot the mismatch.\nIf you&apos;re on a machine with 64-bit &lt;code&gt;long&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt;, you&apos;d not even\nget a warning; on a machine with 32-bit &lt;code&gt;long&lt;/code&gt; and 64-bit &lt;code&gt;double&lt;/code&gt;,\nyou&apos;d probably get a warning about the different sizes  the linker\nwould use the largest size, exactly as a Fortran program would take the\nlargest size of any common blocks.&lt;/p&gt;\n&lt;p&gt;Note that GCC 10.1.0, which was released on 2020-05-07, changes the\ndefault compilation options to use\n&lt;a href=&quot;https://gcc.gnu.org/gcc-10/porting_to.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;-fno-common&lt;/code&gt;&lt;/a&gt;, which means\nthat by default, the code above no longer links unless you override the\ndefault with &lt;code&gt;-fcommon&lt;/code&gt; (or use attributes, etc  see the link).&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog2&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog2.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog2.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog2.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    inc();\n    put();\n    dec();\n    put();\n    dec();\n    put();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog2&lt;/code&gt; uses &lt;code&gt;prog2.c&lt;/code&gt;, &lt;code&gt;file10.c&lt;/code&gt;, &lt;code&gt;file11.c&lt;/code&gt;, &lt;code&gt;file12.c&lt;/code&gt;, &lt;code&gt;prog2.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h3&gt;Warning&lt;/h3&gt;\n&lt;p&gt;As noted in comments here, and as stated in my answer to a similar\n&lt;a href=&quot;https://stackoverflow.com/questions/1490693&quot;&gt;question&lt;/a&gt;, using multiple\ndefinitions for a global variable leads to undefined behaviour (J.2;\n§6.9), which is the standard&apos;s way of saying &quot;anything could happen&quot;.\nOne of the things that can happen is that the program behaves as you\nexpect; and J.5.11 says, approximately, &quot;you might be lucky more often\nthan you deserve&quot;.\nBut a program that relies on multiple definitions of an extern variable\n with or without the explicit &apos;extern&apos; keyword  is not a strictly\nconforming program and not guaranteed to work everywhere.\nEquivalently: it contains a bug which may or may not show itself.&lt;/p&gt;\n&lt;h2&gt;Violating the guidelines&lt;/h2&gt;\n&lt;p&gt;There are, of course, many ways in which these guidelines can be broken.\nOccasionally, there may be a good reason to break the guidelines, but\nsuch occasions are extremely unusual.&lt;/p&gt;\n&lt;h3&gt;faulty_header.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; some_var;    &lt;span class=&quot;hljs-comment&quot;&gt;/* Do not do this in a header!!! */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note 1: if the header defines the variable without the &lt;code&gt;extern&lt;/code&gt; keyword,\nthen each file that includes the header creates a tentative definition\nof the variable.\nAs noted previously, this will often work, but the C standard does not\nguarantee that it will work.&lt;/p&gt;\n&lt;h3&gt;broken_header.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; some_var = &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;/* Only one source file in a program can use this */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note 2: if the header defines and initializes the variable, then only\none source file in a given program can use the header.\nSince headers are primarily for sharing information, it is a bit silly\nto create one that can only be used once.&lt;/p&gt;\n&lt;h3&gt;seldom_correct.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; hidden_global = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Each source file gets its own copy  */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note 3: if the header defines a static variable (with or without\ninitialization), then each source file ends up with its own private\nversion of the &apos;global&apos; variable.&lt;/p&gt;\n&lt;p&gt;If the variable is actually a complex array, for example, this can lead\nto extreme duplication of code.  It can, very occasionally, be a\nsensible way to achieve some effect, but that is very unusual.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Summary&lt;/h2&gt;\n&lt;p&gt;Use the header technique I showed first.\nIt works reliably and everywhere.\nNote, in particular, that the header declaring the &lt;code&gt;global_variable&lt;/code&gt; is\nincluded in every file that uses it  including the one that defines it.\nThis ensures that everything is self-consistent.&lt;/p&gt;\n&lt;p&gt;Similar concerns arise with declaring and defining functions \nanalogous rules apply.\nBut the question was about variables specifically, so I&apos;ve kept the\nanswer to variables only.&lt;/p&gt;\n&lt;h3&gt;End of Original Answer&lt;/h3&gt;\n&lt;p&gt;&lt;sup&gt;&lt;em&gt;If you&apos;re not an experienced C programmer, you probably should stop reading here.&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;Late Major Addition&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Avoiding Code Duplication&lt;/h1&gt;\n&lt;p&gt;One concern that is sometimes (and legitimately) raised about the\n&apos;declarations in headers, definitions in source&apos; mechanism described\nhere is that there are two files to be kept synchronized  the header\nand the source.  This is usually followed up with an observation that a\nmacro can be used so that the header serves double duty  normally\ndeclaring the variables, but when a specific macro is set before the\nheader is included, it defines the variables instead.&lt;/p&gt;\n&lt;p&gt;Another concern can be that the variables need to be defined in each of\na number of &apos;main programs&apos;.  This is normally a spurious concern; you\ncan simply introduce a C source file to define the variables and link\nthe object file produced with each of the programs.&lt;/p&gt;\n&lt;p&gt;A typical scheme works like this, using the original global variable\nillustrated in &lt;code&gt;file3.h&lt;/code&gt;:&lt;/p&gt;\n&lt;h3&gt;file3a.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file1a.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3a.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variable defined - but not initialized */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog3.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2a.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3a.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog3&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog3.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog3.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3a.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog3.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_it();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_it();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog3&lt;/code&gt; uses &lt;code&gt;prog3.c&lt;/code&gt;, &lt;code&gt;file1a.c&lt;/code&gt;, &lt;code&gt;file2a.c&lt;/code&gt;, &lt;code&gt;file3a.h&lt;/code&gt;, &lt;code&gt;prog3.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Variable initialization&lt;/h2&gt;\n&lt;p&gt;The problem with this scheme as shown is that it does not provide for\ninitialization of the global variable.  With C99 or C11 and variable argument\nlists for macros, you could define a macro to support initialization too.\n(With C89 and no support for variable argument lists in macros, there is no\neasy way to handle arbitrarily long initializers.)&lt;/p&gt;\n&lt;h3&gt;file3b.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN                  &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZER(...)        = __VA_ARGS__&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN                  extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZER(...)        &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZER&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;)&lt;/span&gt;;\nEXTERN &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b; } oddball_struct &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZER&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; })&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;Reverse contents of &lt;code&gt;#if&lt;/code&gt; and &lt;code&gt;#else&lt;/code&gt; blocks, fixing bug identified by\n&lt;a href=&quot;https://stackoverflow.com/users/369317/denis-kniazhev&quot;&gt;Denis Kniazhev&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;h3&gt;file1b.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3b.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog4.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2b.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3b.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog4.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n    oddball_struct.a += global_variable;\n    oddball_struct.b -= global_variable / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Clearly, the code for the oddball structure is not what you&apos;d normally\nwrite, but it illustrates the point.  The first argument to the second\ninvocation of &lt;code&gt;INITIALIZER&lt;/code&gt; is &lt;code&gt;{ 41&lt;/code&gt; and the remaining argument\n(singular in this example) is &lt;code&gt;43 }&lt;/code&gt;.  Without C99 or similar support\nfor variable argument lists for macros, initializers that need to\ncontain commas are very problematic.&lt;/p&gt;\n&lt;p&gt;&lt;sup&gt;Correct header &lt;code&gt;file3b.h&lt;/code&gt; included (instead of &lt;code&gt;fileba.h&lt;/code&gt;) per\n&lt;a href=&quot;https://stackoverflow.com/users/369317/denis-kniazhev&quot;&gt;Denis Kniazhev&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog4&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog4.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;prog4.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file3b.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;prog4.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_them();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_them();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oddball:   %d\\n&quot;&lt;/span&gt;, oddball_value());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;prog4&lt;/code&gt; uses &lt;code&gt;prog4.c&lt;/code&gt;, &lt;code&gt;file1b.c&lt;/code&gt;, &lt;code&gt;file2b.c&lt;/code&gt;, &lt;code&gt;prog4.h&lt;/code&gt;, &lt;code&gt;file3b.h&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Header Guards&lt;/h2&gt;\n&lt;p&gt;Any header should be protected against reinclusion, so that type\ndefinitions (enum, struct or union types, or typedefs generally) do not\ncause problems.  The standard technique is to wrap the body of the\nheader in a header guard such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE3B_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE3B_H_INCLUDED&lt;/span&gt;\n\n...contents of header...\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE3B_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The header might be included twice indirectly.  For example, if\n&lt;code&gt;file4b.h&lt;/code&gt; includes &lt;code&gt;file3b.h&lt;/code&gt; for a type definition that isn&apos;t shown,\nand &lt;code&gt;file1b.c&lt;/code&gt; needs to use both header &lt;code&gt;file4b.h&lt;/code&gt; and &lt;code&gt;file3b.h&lt;/code&gt;, then\nyou have some more tricky issues to resolve.  Clearly, you might revise\nthe header list to include just &lt;code&gt;file4b.h&lt;/code&gt;.  However, you might not be\naware of the internal dependencies  and the code should, ideally,\ncontinue to work.&lt;/p&gt;\n&lt;p&gt;Further, it starts to get tricky because you might include &lt;code&gt;file4b.h&lt;/code&gt;\nbefore including &lt;code&gt;file3b.h&lt;/code&gt; to generate the definitions, but the normal\nheader guards on &lt;code&gt;file3b.h&lt;/code&gt; would prevent the header being reincluded.&lt;/p&gt;\n&lt;p&gt;So, you need to include the body of &lt;code&gt;file3b.h&lt;/code&gt; at most once for\ndeclarations, and at most once for definitions, but you might need both\nin a single translation unit (TU  a combination of a source file and\nthe headers it uses).&lt;/p&gt;\n&lt;h2&gt;Multiple inclusion with variable definitions&lt;/h2&gt;\n&lt;p&gt;However, it can be done subject to a not too unreasonable constraint.\nLet&apos;s introduce a new set of file names:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;external.h&lt;/code&gt; for the EXTERN macro definitions, etc.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file1c.h&lt;/code&gt; to define types (notably, &lt;code&gt;struct oddball&lt;/code&gt;, the type of &lt;code&gt;oddball_struct&lt;/code&gt;).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file2c.h&lt;/code&gt; to define or declare the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file3c.c&lt;/code&gt; which defines the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file4c.c&lt;/code&gt; which simply uses the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file5c.c&lt;/code&gt; which shows that you can declare and then define the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;file6c.c&lt;/code&gt; which shows that you can define and then (attempt to) declare the global variables.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In these examples, &lt;code&gt;file5c.c&lt;/code&gt; and &lt;code&gt;file6c.c&lt;/code&gt; directly include the header\n&lt;code&gt;file2c.h&lt;/code&gt; several times, but that is the simplest way to show that the\nmechanism works.  It means that if the header was indirectly included\ntwice, it would also be safe.&lt;/p&gt;\n&lt;p&gt;The restrictions for this to work are:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The header defining or declaring the global variables may not itself\ndefine any types.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Immediately before you include a header that should define variables,\nyou define the macro DEFINE_VARIABLES.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The header defining or declaring the variables has stylized contents.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;external.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n** This header must not contain header guards (like &amp;lt;assert.h&amp;gt; must not).\n** Each time it is invoked, it redefines the macros EXTERN, INITIALIZE\n** based on whether macro DEFINE_VARIABLES is currently defined.\n*/&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; EXTERN&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; INITIALIZE&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN              &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZE(...)     = __VA_ARGS__&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; EXTERN              extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INITIALIZE(...)     &lt;span class=&quot;hljs-comment&quot;&gt;/* nothing */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file1c.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE1C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE1C_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;oddball&lt;/span&gt;\n{&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE1C_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file2c.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard prologue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(DEFINE_VARIABLES) &amp;amp;&amp;amp; !defined(FILE2C_H_DEFINITIONS)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; FILE2C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE2C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2C_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;external.h&quot;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Support macros EXTERN, INITIALIZE */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file1c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Type definition for struct oddball */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(DEFINE_VARIABLES) || !defined(FILE2C_H_DEFINITIONS)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Global variable declarations / definitions */&lt;/span&gt;\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;)&lt;/span&gt;;\nEXTERN &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; oddball oddball_struct &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; })&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* !DEFINE_VARIABLES || !FILE2C_H_DEFINITIONS */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard epilogue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2C_H_DEFINITIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE2C_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file3c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file4c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n    oddball_struct.a += global_variable;\n    oddball_struct.b -= global_variable / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file5c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file6c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Variables now defined and initialized */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next source file completes the source (provides a main program) for &lt;code&gt;prog5&lt;/code&gt;, &lt;code&gt;prog6&lt;/code&gt; and &lt;code&gt;prog7&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog5.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_them();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_them();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oddball:   %d\\n&quot;&lt;/span&gt;, oddball_value());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog5&lt;/code&gt; uses &lt;code&gt;prog5.c&lt;/code&gt;, &lt;code&gt;file3c.c&lt;/code&gt;, &lt;code&gt;file4c.c&lt;/code&gt;, &lt;code&gt;file1c.h&lt;/code&gt;, &lt;code&gt;file2c.h&lt;/code&gt;, &lt;code&gt;external.h&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog6&lt;/code&gt; uses &lt;code&gt;prog5.c&lt;/code&gt;, &lt;code&gt;file5c.c&lt;/code&gt;, &lt;code&gt;file4c.c&lt;/code&gt;, &lt;code&gt;file1c.h&lt;/code&gt;, &lt;code&gt;file2c.h&lt;/code&gt;, &lt;code&gt;external.h&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog7&lt;/code&gt; uses &lt;code&gt;prog5.c&lt;/code&gt;, &lt;code&gt;file6c.c&lt;/code&gt;, &lt;code&gt;file4c.c&lt;/code&gt;, &lt;code&gt;file1c.h&lt;/code&gt;, &lt;code&gt;file2c.h&lt;/code&gt;, &lt;code&gt;external.h&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;This scheme avoids most problems.  You only run into a problem if a\nheader that defines variables (such as &lt;code&gt;file2c.h&lt;/code&gt;) is included by\nanother header (say &lt;code&gt;file7c.h&lt;/code&gt;) that defines variables.  There isn&apos;t an\neasy way around that other than &quot;don&apos;t do it&quot;.&lt;/p&gt;\n&lt;p&gt;You can partially work around the problem by revising &lt;code&gt;file2c.h&lt;/code&gt; into\n&lt;code&gt;file2d.h&lt;/code&gt;:&lt;/p&gt;\n&lt;h3&gt;file2d.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard prologue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(DEFINE_VARIABLES) &amp;amp;&amp;amp; !defined(FILE2D_H_DEFINITIONS)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; FILE2D_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE2D_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2D_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;external.h&quot;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Support macros EXTERN, INITIALIZE */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file1c.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* Type definition for struct oddball */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(DEFINE_VARIABLES) || !defined(FILE2D_H_DEFINITIONS)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Global variable declarations / definitions */&lt;/span&gt;\nEXTERN &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_variable &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;)&lt;/span&gt;;\nEXTERN &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; oddball oddball_struct &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; })&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* !DEFINE_VARIABLES || !FILE2D_H_DEFINITIONS */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard epilogue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE2D_H_DEFINITIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE2D_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The issue becomes &apos;should the header include &lt;code&gt;#undef DEFINE_VARIABLES&lt;/code&gt;?&apos;\nIf you omit that from the header and wrap any defining invocation with\n&lt;code&gt;#define&lt;/code&gt; and &lt;code&gt;#undef&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in the source code (so the headers never alter the value of\n&lt;code&gt;DEFINE_VARIABLES&lt;/code&gt;), then you should be clean.  It is just a nuisance to\nhave to remember to write the the extra line.  An alternative might be:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;externdef.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n** This header must not contain header guards (like &amp;lt;assert.h&amp;gt; must not).\n** Each time it is included, the macro HEADER_DEFINING_VARIABLES should\n** be defined with the name (in quotes - or possibly angle brackets) of\n** the header to be included that defines variables when the macro\n** DEFINE_VARIABLES is defined.  See also: external.h (which uses\n** DEFINE_VARIABLES and defines macros EXTERN and INITIALIZE\n** appropriately).\n**\n** #define HEADER_DEFINING_VARIABLES &quot;file2c.h&quot;\n** #include &quot;externdef.h&quot;\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(HEADER_DEFINING_VARIABLES)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; HEADER_DEFINING_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; HEADER_DEFINING_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* HEADER_DEFINING_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is getting a tad convoluted, but seems to be secure (using the\n&lt;code&gt;file2d.h&lt;/code&gt;, with no &lt;code&gt;#undef DEFINE_VARIABLES&lt;/code&gt; in the &lt;code&gt;file2d.h&lt;/code&gt;).&lt;/p&gt;\n&lt;h3&gt;file7c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Declare variables - again */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables - again */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file8c.h&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard prologue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; defined(DEFINE_VARIABLES) &amp;amp;&amp;amp; !defined(FILE8C_H_DEFINITIONS)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; FILE8C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; FILE8C_H_INCLUDED&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE8C_H_INCLUDED&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;external.h&quot;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;/* Support macros EXTERN, INITIALIZE */&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;/* struct oddball */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; !defined(DEFINE_VARIABLES) || !defined(FILE8C_H_DEFINITIONS)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Global variable declarations / definitions */&lt;/span&gt;\nEXTERN &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; oddball another &lt;span class=&quot;hljs-title function_&quot;&gt;INITIALIZE&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;({ &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; })&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* !DEFINE_VARIABLES || !FILE8C_H_DEFINITIONS */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Standard epilogue */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEFINE_VARIABLES&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; FILE8C_H_DEFINITIONS&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* DEFINE_VARIABLES */&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* FILE8C_H_INCLUDED */&lt;/span&gt;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file8c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Define variables */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HEADER_DEFINING_VARIABLES &lt;span class=&quot;hljs-string&quot;&gt;&quot;file8c.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;externdef.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; global_variable++; }\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;oddball_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; oddball_struct.a + oddball_struct.b; }\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;The next two files complete the source for &lt;code&gt;prog8&lt;/code&gt; and &lt;code&gt;prog9&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;prog8.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    use_them();\n    global_variable += &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;;\n    use_them();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Increment: %d\\n&quot;&lt;/span&gt;, increment());\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oddball:   %d\\n&quot;&lt;/span&gt;, oddball_value());\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;file9c.c&lt;/h3&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;file2d.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_them&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Global variable: %d\\n&quot;&lt;/span&gt;, global_variable++);\n    oddball_struct.a += global_variable;\n    oddball_struct.b -= global_variable / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog8&lt;/code&gt; uses &lt;code&gt;prog8.c&lt;/code&gt;, &lt;code&gt;file7c.c&lt;/code&gt;, &lt;code&gt;file9c.c&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;prog9&lt;/code&gt; uses &lt;code&gt;prog8.c&lt;/code&gt;, &lt;code&gt;file8c.c&lt;/code&gt;, &lt;code&gt;file9c.c&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;However, the problems are relatively unlikely to occur in practice,\nespecially if you take the standard advice to&lt;/p&gt;\n&lt;h1&gt;Avoid global variables&lt;/h1&gt;\n&lt;hr&gt;\n&lt;p&gt;Does this exposition miss anything?&lt;/p&gt;\n&lt;sup&gt;\n_Confession_: The &apos;avoiding duplicated code&apos; scheme outlined here was\ndeveloped because the issue affects some code I work on (but don&apos;t own),\nand is a niggling concern with the scheme outlined in the first part of\nthe answer.  However, the original scheme leaves you with just two\nplaces to modify to keep variable definitions and declarations\nsynchronized, which is a big step forward over having exernal variable\ndeclarations scattered throughout the code base (which really matters\nwhen there are thousands of files in total).  However, the code in the\nfiles with the names `fileNc.[ch]` (plus `external.h` and `externdef.h`)\nshows that it can be made to work.  Clearly, it would not be hard to\ncreate a header generator script to give you the standardized template\nfor a variable defining and declaring header file.\n&lt;/sup&gt;\n&lt;p&gt;&lt;em&gt;NB&lt;/em&gt; These are toy programs with just barely enough code to make them\nmarginally interesting.  There is repetition within the examples that\ncould be removed, but isn&apos;t to simplify the pedagogical explanation.\n(For example: the difference between &lt;code&gt;prog5.c&lt;/code&gt; and &lt;code&gt;prog8.c&lt;/code&gt; is the name\nof one of the headers that are included.  It would be possible to\nreorganize the code so that the &lt;code&gt;main()&lt;/code&gt; function was not repeated, but\nit would conceal more than it revealed.)&lt;/p&gt;\n    ","\n&lt;p&gt;An &lt;code&gt;extern&lt;/code&gt; variable is a declaration (thanks to sbi for the correction) of a variable which is defined in another translation unit. That means the storage for the variable is allocated in another file.&lt;/p&gt;\n\n&lt;p&gt;Say you have two &lt;code&gt;.c&lt;/code&gt;-files &lt;code&gt;test1.c&lt;/code&gt; and &lt;code&gt;test2.c&lt;/code&gt;. If you define a global variable &lt;code&gt;int test1_var;&lt;/code&gt; in &lt;code&gt;test1.c&lt;/code&gt; and you&apos;d like to access this variable in &lt;code&gt;test2.c&lt;/code&gt; you have to use &lt;code&gt;extern int test1_var;&lt;/code&gt; in &lt;code&gt;test2.c&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Complete sample:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ cat test1.c \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; test1_var = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n$ cat test2.c\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; test1_var;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test1_var = %d\\n&quot;&lt;/span&gt;, test1_var);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n$ gcc test1.c test2.c -o test\n$ ./test\ntest1_var = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Extern is the keyword you use to declare that the variable itself resides in another translation unit.&lt;/p&gt;\n\n&lt;p&gt;So you can decide to use a variable in a translation unit and then access it from another one, then in the second one you declare it as extern and the symbol will be resolved by the linker.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t declare it as extern you&apos;ll get 2 variables named the same but not related at all, and an error of multiple definitions of the variable.&lt;/p&gt;\n    ","\n&lt;p&gt;I like to think of an extern variable as a promise that you make to the compiler.&lt;/p&gt;\n\n&lt;p&gt;When encountering an extern, the compiler can only find out its type, not where it &quot;lives&quot;, so it can&apos;t resolve the reference.&lt;/p&gt;\n\n&lt;p&gt;You are telling it, &quot;Trust me.  At link time this reference will be resolvable.&quot;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;                 declare | define   | initialize |\n                ----------------------------------\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;    yes          no           no\n-------------\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;2019&lt;/span&gt;;    yes          yes          yes\n-------------\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;           yes          yes          no\n-------------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Declaration won&apos;t allocate memory (the variable must be defined for memory allocation) but the definition will. \nThis is just another simple view on the extern keyword since the other answers are really great.&lt;/p&gt;\n    ","\n&lt;p&gt;extern tells the compiler to trust you that the memory for this variable is declared elsewhere, so it doesnt try to allocate/check memory.  &lt;/p&gt;\n\n&lt;p&gt;Therefore, you can compile a file that has reference to an extern, but you can not link if that memory is not declared somewhere.&lt;/p&gt;\n\n&lt;p&gt;Useful for global variables and libraries, but dangerous because the linker does not type check.&lt;/p&gt;\n    ","\n&lt;p&gt;Adding an &lt;code&gt;extern&lt;/code&gt; turns a variable &lt;em&gt;definition&lt;/em&gt; into a variable &lt;em&gt;declaration&lt;/em&gt;. See &lt;a href=&quot;https://stackoverflow.com/questions/1410563/&quot;&gt;this thread&lt;/a&gt; as to what&apos;s the difference between a declaration and a definition. &lt;/p&gt;\n    ","\n&lt;p&gt;The correct interpretation of extern is that you tell something to the compiler. You tell the compiler that, despite not being present right now, the variable declared will somehow be found by the linker (typically in another object (file)). The linker will then be the lucky guy to find everything and put it together, whether you had some extern declarations or not.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;extern keyword is used with the variable for its identification as a global variable.&lt;/strong&gt;&lt;/em&gt;  &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It also represents that you can use the variable declared using extern\n  keyword in any file though it is declared/defined in other file.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In C a variable inside a file say example.c is given local scope. The compiler expects that the variable would have its definition inside the same file example.c and when it does not find the same , it would throw an error.A function on the other hand has by default global scope . Thus you do not have to explicitly mention to the compiler &quot;look dude...you might find the definition of this function here&quot;. For a function including the file which contains its declaration is enough.(The file which you actually call a header file). \n   For example consider the following 2 files :&lt;br&gt;\n example.c &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\nmain(){\n       &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The value of a is &amp;lt;%d&amp;gt;\\n&quot;&lt;/span&gt;,a);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;example1.c&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now when you compile the two files together, using the following commands :&lt;/p&gt;\n\n&lt;p&gt;step 1)cc -o ex example.c example1.c\nstep 2)./ex &lt;/p&gt;\n\n&lt;p&gt;You get the following output : The value of a is &amp;lt;5&amp;gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;GCC ELF Linux implementation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Other answers have covered the language usage side of view, so now let&apos;s have a look at how it is implemented in this implementation. &lt;/p&gt;\n\n&lt;p&gt;main.c&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; not_extern_int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; extern_int;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, not_extern_int);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, extern_int);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compile and decompile:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;gcc -c main.c\nreadelf -s main.o\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output contains:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Num:    Value          Size Type    Bind   Vis      Ndx Name\n &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; OBJECT  GLOBAL DEFAULT    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; not_extern_int\n&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; NOTYPE  GLOBAL DEFAULT  UND extern_int\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://www.sco.com/developers/gabi/2003-12-17/contents.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;System V ABI Update ELF spec&lt;/a&gt; &quot;Symbol Table&quot; chapter explains:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;SHN_UNDEF This section table index means the symbol is undefined. When the link editor combines this object file with another that defines the indicated symbol, this file&apos;s references to the symbol will be linked to the actual definition.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;which is basically the behavior the C standard gives to &lt;code&gt;extern&lt;/code&gt; variables.&lt;/p&gt;\n\n&lt;p&gt;From now on, it is the job of the linker to make the final program, but the &lt;code&gt;extern&lt;/code&gt; information has already been extracted from the source code into the object file.&lt;/p&gt;\n\n&lt;p&gt;Tested on GCC 4.8.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;C++17 inline variables&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In C++17, you might want to use inline variables instead of extern ones, as they are simple to use (can be defined just once on header) and more powerful (support constexpr). See: &lt;a href=&quot;https://stackoverflow.com/questions/177437/what-does-const-static-mean-in-c-and-c/53883715#53883715&quot;&gt;What does &apos;const static&apos; mean in C and C++?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt;\nallows one module of your program to access a global variable or function declared in another module of your program.\nYou usually have extern variables declared in header files.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t want a program to access your variables or functions, you use &lt;code&gt;static&lt;/code&gt; which tells the compiler that this variable or function cannot be used outside of this module.&lt;/p&gt;\n    ","\n&lt;p&gt;First off, the &lt;code&gt;extern&lt;/code&gt; keyword is not used for defining a variable; rather it is used for declaring a variable. I can say &lt;code&gt;extern&lt;/code&gt; is a storage class, not a data type.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; is used to let other C files or external components know this variable is already defined somewhere. Example: if  you are building a library, no need to define global variable mandatorily somewhere in library itself. The library will be compiled directly, but while linking the file, it checks for the definition.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; simply means a variable is defined elsewhere (e.g., in another file).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; is used so one &lt;code&gt;first.c&lt;/code&gt; file can have full access to a global parameter in another &lt;code&gt;second.c&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;extern&lt;/code&gt; can be declared in the &lt;code&gt;first.c&lt;/code&gt; file or in any of the header files &lt;code&gt;first.c&lt;/code&gt; includes.&lt;/p&gt;\n    ","\n&lt;p&gt;With xc8 you have to be careful about declaring a variable\nas the same type in each file as you could , erroneously,\ndeclare something an &lt;code&gt;int&lt;/code&gt; in one file and a &lt;code&gt;char&lt;/code&gt; say in another.\nThis could lead to corruption of variables.&lt;/p&gt;\n\n&lt;p&gt;This problem was elegantly solved in a microchip forum some 15 years ago\n    /* See &quot;http:www.htsoft.com&quot;                                          &lt;em&gt;/\n    /&lt;/em&gt;  &quot;forum/all/showflat.php/Cat/0/Number/18766/an/0/page/0#18766&quot; &lt;/p&gt;\n\n&lt;p&gt;But this link seems to no longer work...&lt;/p&gt;\n\n&lt;p&gt;So I;ll quickly try to explain it;\nmake a file called global.h.&lt;/p&gt;\n\n&lt;p&gt;In it declare the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; MAIN_C&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;/* #warning COMPILING MAIN.C */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL extern&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\nGLOBAL &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; testing_mode; &lt;span class=&quot;hljs-comment&quot;&gt;// example var used in several C files&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in the file main.c&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MAIN_C 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;global.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; MAIN_C&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This means in main.c the variable will be declared as an &lt;code&gt;unsigned char&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now in other files simply including global.h will\nhave it declared as an extern &lt;em&gt;for that file&lt;/em&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; testing_mode;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But it will be correctly declared as an &lt;code&gt;unsigned char&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The old forum post probably explained this a bit more clearly.\nBut this is a real potential &lt;code&gt;gotcha&lt;/code&gt; when using a compiler\nthat allows you to declare a variable in one file and then declare it extern as a different type in another. The problems associated with\nthat are if you say declared testing_mode as an int in another file\nit would think it was a 16 bit var and overwrite some other part of ram, potentially corrupting another variable. Difficult to debug!&lt;/p&gt;\n    ","\n&lt;p&gt;A very short solution I use to allow a header file to contain the extern reference or actual implementation of an object. The file that actually contains the object just does &lt;code&gt;#define GLOBAL_FOO_IMPLEMENTATION&lt;/code&gt;. Then when I add a new object to this file it shows up in that file also without me having to copy and paste the definition.&lt;/p&gt;\n\n&lt;p&gt;I use this pattern across multiple files. So in order to keep things as self contained as possible, I just reuse the single GLOBAL macro in each header. My header looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//file foo_globals.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; once  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.h&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;//contains definition of foo&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; GLOBAL  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; GLOBAL  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; GLOBAL_FOO_IMPLEMENTATION  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL extern  &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;  &lt;/span&gt;\n\nGLOBAL Foo foo1;  \nGLOBAL Foo foo2;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//file main.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; GLOBAL_FOO_IMPLEMENTATION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo_globals.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//file uses_extern_foo.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo_globals.h\n&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In short &lt;code&gt;extern&lt;/code&gt; means that variable is defined in other module and its address will be known at link time. The compiler does not reserve memory in current module and knows the variable type. To understand &lt;code&gt;extern&lt;/code&gt; is good to have at least little experience with assembler.&lt;/p&gt;\n    "],"264":["\n&lt;h1&gt;Arrays on the type level&lt;/h1&gt;\n\n&lt;p&gt;An array type is denoted as &lt;code&gt;T[n]&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the &lt;em&gt;element type&lt;/em&gt; and &lt;code&gt;n&lt;/code&gt; is a positive &lt;em&gt;size&lt;/em&gt;, the number of elements in the array. The array type is a product type of the element type and the size. If one or both of those ingredients differ, you get a distinct type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!std::is_same&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;distinct element type&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!std::is_same&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;],   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;distinct size&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the size is part of the type, that is, array types of different size are incompatible types that have absolutely nothing to do with each other. &lt;code&gt;sizeof(T[n])&lt;/code&gt; is equivalent to &lt;code&gt;n * sizeof(T)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Array-to-pointer decay&lt;/h2&gt;\n\n&lt;p&gt;The only &quot;connection&quot; between &lt;code&gt;T[n]&lt;/code&gt; and &lt;code&gt;T[m]&lt;/code&gt; is that both types can implicitly be &lt;em&gt;converted&lt;/em&gt; to &lt;code&gt;T*&lt;/code&gt;, and the result of this conversion is a pointer to the first element of the array. That is, anywhere a &lt;code&gt;T*&lt;/code&gt; is required, you can provide a &lt;code&gt;T[n]&lt;/code&gt;, and the compiler will silently provide that pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;                  +---+---+---+---+---+---+---+---+\nthe_actual_array: |   |   |   |   |   |   |   |   |   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n                  +---+---+---+---+---+---+---+---+\n                    ^\n                    |\n                    |\n                    |\n                    |  pointer_to_the_first_element   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This conversion is known as &quot;array-to-pointer decay&quot;, and it is a major source of confusion. The size of the array is lost in this process, since it is no longer part of the type (&lt;code&gt;T*&lt;/code&gt;). Pro: Forgetting the size of an array on the type level allows a pointer to point to the first element of an array of &lt;em&gt;any&lt;/em&gt; size. Con: Given a pointer to the first (or any other) element of an array, there is no way to detect how large that array is or where exactly the pointer points to relative to the bounds of the array. &lt;a href=&quot;https://stackoverflow.com/questions/4261074/&quot;&gt;Pointers are extremely stupid&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Arrays are not pointers&lt;/h2&gt;\n\n&lt;p&gt;The compiler will silently generate a pointer to the first element of an array whenever it is deemed useful, that is, whenever an operation would fail on an array but succeed on a pointer. This conversion from array to pointer is trivial, since the resulting pointer &lt;em&gt;value&lt;/em&gt; is simply the address of the array. Note that the pointer is &lt;em&gt;not&lt;/em&gt; stored as part of the array itself (or anywhere else in memory). &lt;strong&gt;An array is not a pointer.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!std::is_same&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;an array is not a pointer&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One important context in which an array does &lt;em&gt;not&lt;/em&gt; decay into a pointer to its first element is when the &lt;code&gt;&amp;amp;&lt;/code&gt; operator is applied to it. In that case, the &lt;code&gt;&amp;amp;&lt;/code&gt; operator yields a pointer to the &lt;em&gt;entire&lt;/em&gt; array, not just a pointer to its first element. Although in that case the &lt;em&gt;values&lt;/em&gt; (the addresses) are the same, a pointer to the first element of an array and a pointer to the entire array are completely distinct types:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!std::is_same&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(*)[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;distinct element type&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following ASCII art explains this distinction:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;      +-----------------------------------+\n      | +---+---+---+---+---+---+---+---+ |\n+---&amp;gt; | |   |   |   |   |   |   |   |   | | &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n|     | +---+---+---+---+---+---+---+---+ |\n|     +---^-------------------------------+\n|         |\n|         |\n|         |\n|         |  pointer_to_the_first_element   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*\n|\n|  &lt;span class=&quot;hljs-function&quot;&gt;pointer_to_the_entire_array              &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(*)&lt;/span&gt;[8]\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note how the pointer to the first element only points to a single integer (depicted as a small box), whereas the pointer to the entire array points to an array of 8 integers (depicted as a large box).&lt;/p&gt;\n\n&lt;p&gt;The same situation arises in classes and is maybe more obvious. A pointer to an object and a pointer to its first data member have the same &lt;em&gt;value&lt;/em&gt; (the same address), yet they are completely distinct types.&lt;/p&gt;\n\n&lt;p&gt;If you are unfamiliar with the C declarator syntax, the parenthesis in the type &lt;code&gt;int(*)[8]&lt;/code&gt; are essential:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;int(*)[8]&lt;/code&gt; is a pointer to an array of 8 integers.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;int*[8]&lt;/code&gt; is an array of 8 pointers, each element of type &lt;code&gt;int*&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Accessing elements&lt;/h1&gt;\n\n&lt;p&gt;C++ provides two syntactic variations to access individual elements of an array.\nNeither of them is superior to the other, and you should familiarize yourself with both.&lt;/p&gt;\n\n&lt;h2&gt;Pointer arithmetic&lt;/h2&gt;\n\n&lt;p&gt;Given a pointer &lt;code&gt;p&lt;/code&gt; to the first element of an array, the expression &lt;code&gt;p+i&lt;/code&gt; yields a pointer to the i-th element of the array. By dereferencing that pointer afterwards, one can access individual elements:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cout &amp;lt;&amp;lt; *(x+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; *(x+&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &amp;lt;&amp;lt; std::endl;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;x&lt;/code&gt; denotes an &lt;em&gt;array&lt;/em&gt;, then array-to-pointer decay will kick in, because adding an array and an integer is meaningless (there is no plus operation on arrays), but adding a pointer and an integer makes sense:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;   +---+---+---+---+---+---+---+---+\nx: |   |   |   |   |   |   |   |   |   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n   +---+---+---+---+---+---+---+---+\n     ^           ^               ^\n     |           |               |\n     |           |               |\n     |           |               |\nx+&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  |      x+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  |          x+&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  |     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note that the implicitly generated pointer has no name, so I wrote &lt;code&gt;x+0&lt;/code&gt; in order to identify it.)&lt;/p&gt;\n\n&lt;p&gt;If, on the other hand, &lt;code&gt;x&lt;/code&gt; denotes a &lt;em&gt;pointer&lt;/em&gt; to the first (or any other) element of an array, then array-to-pointer decay is not necessary, because the pointer on which &lt;code&gt;i&lt;/code&gt; is going to be added already exists:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;   +---+---+---+---+---+---+---+---+\n   |   |   |   |   |   |   |   |   |   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n   +---+---+---+---+---+---+---+---+\n     ^           ^               ^\n     |           |               |\n     |           |               |\n   +-|-+         |               |\nx: | | |    x+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  |          x+&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  |     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*\n   +---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that in the depicted case, &lt;code&gt;x&lt;/code&gt; is a pointer &lt;em&gt;variable&lt;/em&gt; (discernible by the small box next to &lt;code&gt;x&lt;/code&gt;), but it could just as well be the result of a function returning a pointer (or any other expression of type &lt;code&gt;T*&lt;/code&gt;).&lt;/p&gt;\n\n&lt;h2&gt;Indexing operator&lt;/h2&gt;\n\n&lt;p&gt;Since the syntax &lt;code&gt;*(x+i)&lt;/code&gt; is a bit clumsy, C++ provides the alternative syntax &lt;code&gt;x[i]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cout &amp;lt;&amp;lt; x[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; x[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] &amp;lt;&amp;lt; std::endl;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Due to the fact that addition is commutative, the following code does exactly the same:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;[x] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;[x] &amp;lt;&amp;lt; std::endl;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The definition of the indexing operator leads to the following interesting equivalence:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&amp;amp;x[i]  ==  &amp;amp;*(x+i)  ==  x+i\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; is generally &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;x&lt;/code&gt;. The former is a pointer, the latter an array. Only when the context triggers array-to-pointer decay can &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&amp;amp;x[0]&lt;/code&gt; be used interchangeably. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;T* p = &amp;amp;array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];  &lt;span class=&quot;hljs-comment&quot;&gt;// rewritten as &amp;amp;*(array+0), decay happens due to the addition&lt;/span&gt;\nT* q = array;      &lt;span class=&quot;hljs-comment&quot;&gt;// decay happens due to the assignment&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On the first line, the compiler detects an assignment from a pointer to a pointer, which trivially succeeds. On the second line, it detects an assignment from an &lt;em&gt;array&lt;/em&gt; to a pointer. Since this is meaningless (but &lt;em&gt;pointer&lt;/em&gt; to pointer assignment makes sense), array-to-pointer decay kicks in as usual.&lt;/p&gt;\n\n&lt;h2&gt;Ranges&lt;/h2&gt;\n\n&lt;p&gt;An array of type &lt;code&gt;T[n]&lt;/code&gt; has &lt;code&gt;n&lt;/code&gt; elements, indexed from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;; there is no element &lt;code&gt;n&lt;/code&gt;. And yet, to support half-open ranges (where the beginning is &lt;em&gt;inclusive&lt;/em&gt; and the end is &lt;em&gt;exclusive&lt;/em&gt;), C++ allows the computation of a pointer to the (non-existent) n-th element, but it is illegal to dereference that pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;   +---+---+---+---+---+---+---+---+....\nx: |   |   |   |   |   |   |   |   |   .   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;]\n   +---+---+---+---+---+---+---+---+....\n     ^                               ^\n     |                               |\n     |                               |\n     |                               |\nx+&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  |                          x+&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  |     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, if you want to sort an array, both of the following would work equally well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::&lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(x + &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, x + n);\nstd::&lt;span class=&quot;hljs-built_in&quot;&gt;sort&lt;/span&gt;(&amp;amp;x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &amp;amp;x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that it is illegal to provide &lt;code&gt;&amp;amp;x[n]&lt;/code&gt; as the second argument since this is equivalent to &lt;code&gt;&amp;amp;*(x+n)&lt;/code&gt;, and the sub-expression &lt;code&gt;*(x+n)&lt;/code&gt; technically invokes &lt;a href=&quot;https://stackoverflow.com/questions/3144904/&quot;&gt;undefined behavior&lt;/a&gt; in C++ (but not in C99).&lt;/p&gt;\n\n&lt;p&gt;Also note that you could simply provide &lt;code&gt;x&lt;/code&gt; as the first argument. That is a little too terse for my taste, and it also makes template argument deduction a bit harder for the compiler, because in that case the first argument is an array but the second argument is a pointer. (Again, array-to-pointer decay kicks in.)&lt;/p&gt;\n    ","\n&lt;p&gt;Programmers often confuse multidimensional arrays with arrays of pointers.&lt;/p&gt;\n\n&lt;h1&gt;Multidimensional arrays&lt;/h1&gt;\n\n&lt;p&gt;Most programmers are familiar with named multidimensional arrays, but many are unaware of the fact that multidimensional array can also be created anonymously. Multidimensional arrays are often referred to as &quot;arrays of arrays&quot; or &quot;&lt;em&gt;true&lt;/em&gt; multidimensional arrays&quot;.&lt;/p&gt;\n\n&lt;h2&gt;Named multidimensional arrays&lt;/h2&gt;\n\n&lt;p&gt;When using named multidimensional arrays, &lt;em&gt;all&lt;/em&gt; dimensions must be known at compile time:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; H = &lt;span class=&quot;hljs-built_in&quot;&gt;read_int&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; W = &lt;span class=&quot;hljs-built_in&quot;&gt;read_int&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; connect_four[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;// okay&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; connect_four[H][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;// ISO C++ forbids variable length array&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; connect_four[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][W];   &lt;span class=&quot;hljs-comment&quot;&gt;// ISO C++ forbids variable length array&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; connect_four[H][W];   &lt;span class=&quot;hljs-comment&quot;&gt;// ISO C++ forbids variable length array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is how a named multidimensional array looks like in memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;              +---+---+---+---+---+---+---+\nconnect_four: |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n              |   |   |   |   |   |   |   |\n              +---+---+---+---+---+---+---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that 2D grids such as the above are merely helpful visualizations. From the point of view of C++, memory is a &quot;flat&quot; sequence of bytes. The elements of a multidimensional array are stored in row-major order. That is, &lt;code&gt;connect_four[0][6]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; are neighbors in memory. In fact, &lt;code&gt;connect_four[0][7]&lt;/code&gt; and &lt;code&gt;connect_four[1][0]&lt;/code&gt; denote the same element! This means that you can take multi-dimensional arrays and treat them as large, one-dimensional arrays:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p = &amp;amp;connect_four[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* q = p + &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;some_int_sequence_algorithm&lt;/span&gt;(p, q);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Anonymous multidimensional arrays&lt;/h2&gt;\n\n&lt;p&gt;With anonymous multidimensional arrays, all dimensions &lt;em&gt;except the first&lt;/em&gt; must be known at compile time:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*p)[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;// okay&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*p)[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[H][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;// okay&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*p)[W] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][W];   &lt;span class=&quot;hljs-comment&quot;&gt;// ISO C++ forbids variable length array&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*p)[W] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[H][W];   &lt;span class=&quot;hljs-comment&quot;&gt;// ISO C++ forbids variable length array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is how an anonymous multidimensional array looks like in memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;              +---+---+---+---+---+---+---+\n        +---&amp;gt; |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |     |   |   |   |   |   |   |   |\n        |     +---+---+---+---+---+---+---+\n        |\n      +-|-+\n   p: | | |\n      +---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the array itself is still allocated as a single block in memory.&lt;/p&gt;\n\n&lt;h1&gt;Arrays of pointers&lt;/h1&gt;\n\n&lt;p&gt;You can overcome the restriction of fixed width by introducing another level of indirection.&lt;/p&gt;\n\n&lt;h2&gt;Named arrays of pointers&lt;/h2&gt;\n\n&lt;p&gt;Here is a named array of five pointers which are initialized with anonymous arrays of different lengths:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* triangle[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; ++i)\n{\n    triangle[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; - i];\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; ++i)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] triangle[i];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here is how it looks like in memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;          +---+---+---+---+---+\n          |   |   |   |   |   |\n          +---+---+---+---+---+\n            ^\n            | +---+---+---+---+\n            | |   |   |   |   |\n            | +---+---+---+---+\n            |   ^\n            |   | +---+---+---+\n            |   | |   |   |   |\n            |   | +---+---+---+\n            |   |   ^\n            |   |   | +---+---+\n            |   |   | |   |   |\n            |   |   | +---+---+\n            |   |   |   ^\n            |   |   |   | +---+\n            |   |   |   | |   |\n            |   |   |   | +---+\n            |   |   |   |   ^\n            |   |   |   |   |\n            |   |   |   |   |\n          +-|-+-|-+-|-+-|-+-|-+\ntriangle: | | | | | | | | | | |\n          +---+---+---+---+---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since each line is allocated individually now, viewing 2D arrays as 1D arrays does not work anymore.&lt;/p&gt;\n\n&lt;h2&gt;Anonymous arrays of pointers&lt;/h2&gt;\n\n&lt;p&gt;Here is an anonymous array of 5 (or any other number of) pointers which are initialized with anonymous arrays of different lengths:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-built_in&quot;&gt;calculate_five&lt;/span&gt;();   &lt;span class=&quot;hljs-comment&quot;&gt;// or any other number&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[n];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)\n{\n    p[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[n - i];\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] p[i];\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] p;   &lt;span class=&quot;hljs-comment&quot;&gt;// note the extra delete[] !&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here is how it looks like in memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;          +---+---+---+---+---+\n          |   |   |   |   |   |\n          +---+---+---+---+---+\n            ^\n            | +---+---+---+---+\n            | |   |   |   |   |\n            | +---+---+---+---+\n            |   ^\n            |   | +---+---+---+\n            |   | |   |   |   |\n            |   | +---+---+---+\n            |   |   ^\n            |   |   | +---+---+\n            |   |   | |   |   |\n            |   |   | +---+---+\n            |   |   |   ^\n            |   |   |   | +---+\n            |   |   |   | |   |\n            |   |   |   | +---+\n            |   |   |   |   ^\n            |   |   |   |   |\n            |   |   |   |   |\n          +-|-+-|-+-|-+-|-+-|-+\n          | | | | | | | | | | |\n          +---+---+---+---+---+\n            ^\n            |\n            |\n          +-|-+\n       p: | | |\n          +---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Conversions&lt;/h1&gt;\n\n&lt;p&gt;Array-to-pointer decay naturally extends to arrays of arrays and arrays of pointers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array_of_arrays[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; (*pointer_to_array)[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] = array_of_arrays;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* array_of_pointers[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** pointer_to_pointer = array_of_pointers;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, there is no implicit conversion from &lt;code&gt;T[h][w]&lt;/code&gt; to &lt;code&gt;T**&lt;/code&gt;. If such an implicit conversion did exist, the result would be a pointer to the first element of an array of &lt;code&gt;h&lt;/code&gt; pointers to &lt;code&gt;T&lt;/code&gt; (each pointing to the first element of a line in the original 2D array), but that pointer array does not exist anywhere in memory yet. If you want such a conversion, you must create and fill the required pointer array manually:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; connect_four[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; ++i)\n{\n    p[i] = connect_four[i];\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] p;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this generates a view of the original multidimensional array. If you need a copy instead, you must create extra arrays and copy the data yourself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; connect_four[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;** p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; ++i)\n{\n    p[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n    std::&lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(connect_four[i], connect_four[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], p[i]);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;; ++i)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] p[i];\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] p;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Assignment&lt;/h1&gt;\n\n&lt;p&gt;For no particular reason, arrays cannot be assigned to one another. Use &lt;code&gt;std::copy&lt;/code&gt; instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\nstd::&lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(a + &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, a + &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, b);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is more flexible than what true array assignment could provide because it is possible to copy slices of larger arrays into smaller arrays.\n&lt;code&gt;std::copy&lt;/code&gt; is usually specialized for primitive types to give maximum performance. It is unlikely that &lt;code&gt;std::memcpy&lt;/code&gt; performs better. If in doubt, measure.&lt;/p&gt;\n\n&lt;p&gt;Although you cannot assign arrays directly, you &lt;em&gt;can&lt;/em&gt; assign structs and classes which &lt;em&gt;contain&lt;/em&gt; array members. That is because &lt;a href=&quot;https://stackoverflow.com/questions/4164279/&quot;&gt;array members are copied memberwise&lt;/a&gt; by the assignment operator which is provided as a default by the compiler. If you define the assignment operator manually for your own struct or class types, you must fall back to manual copying for the array members.&lt;/p&gt;\n\n&lt;h1&gt;Parameter passing&lt;/h1&gt;\n\n&lt;p&gt;Arrays cannot be passed by value. You can either pass them by pointer or by reference.&lt;/p&gt;\n\n&lt;h2&gt;Pass by pointer&lt;/h2&gt;\n\n&lt;p&gt;Since arrays themselves cannot be passed by value, usually a pointer to their first element is passed by value instead. This is often called &quot;pass by pointer&quot;. Since the size of the array is not retrievable via that pointer, you have to pass a second parameter indicating the size of the array (the classic C solution) or a second pointer pointing after the last element of the array (the C++ iterator solution):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstddef&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p, std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;accumulate&lt;/span&gt;(p, p + n, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* q)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;accumulate&lt;/span&gt;(p, q, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As a syntactic alternative, you can also declare parameters as &lt;code&gt;T p[]&lt;/code&gt;, and it means the exact same thing as &lt;code&gt;T* p&lt;/code&gt; &lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p[], std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;accumulate&lt;/span&gt;(p, p + n, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can think of the compiler as rewriting &lt;code&gt;T p[]&lt;/code&gt; to &lt;code&gt;T *p&lt;/code&gt; &lt;strong&gt;in the context of parameter lists only&lt;/strong&gt;. This special rule is partly responsible for the whole confusion about arrays and pointers. In every other context, declaring something as an array or as a pointer makes a &lt;em&gt;huge&lt;/em&gt; difference.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately, you can also provide a size in an array parameter which is silently ignored by the compiler. That is, the following three signatures are exactly equivalent, as indicated by the compiler errors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p, std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// error: redefinition of &apos;int sum(const int*, size_t)&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p[], std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// error: redefinition of &apos;int sum(const int*, size_t)&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;], std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n)&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// the 8 has no meaning here&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Pass by reference&lt;/h2&gt;\n\n&lt;p&gt;Arrays can also be passed by reference:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (&amp;amp;a)[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;accumulate&lt;/span&gt;(a + &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, a + &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, the array size is significant. Since writing a function that only accepts arrays of exactly 8 elements is of little use, programmers usually write such functions as templates:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (&amp;amp;a)[n])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;accumulate&lt;/span&gt;(a + &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, a + n, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that you can only call such a function template with an actual array of integers, not with a pointer to an integer. The size of the array is automatically inferred, and for every size &lt;code&gt;n&lt;/code&gt;, a different function is instantiated from the template. You can also write &lt;a href=&quot;https://stackoverflow.com/questions/4759078/&quot;&gt;quite useful&lt;/a&gt; function templates that abstract from both the element type and from the size.&lt;/p&gt;\n    ","\n&lt;h1&gt;5. Common pitfalls when using arrays.&lt;/h1&gt;\n\n&lt;h2&gt;5.1 Pitfall: Trusting type-unsafe linking.&lt;/h2&gt;\n\n&lt;p&gt;OK, youve been told, or have found out yourself, that globals (namespace\nscope variables that can be accessed outside the translation unit) are\nEvil. But did you know how truly Evil they are? Consider the\nprogram below, consisting of two files [main.cpp] and [numbers.cpp]:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// [main.cpp]&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* numbers;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;  i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;  ++i )\n    {\n        cout &amp;lt;&amp;lt; (i &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;? &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &amp;lt;&amp;lt; numbers[i];\n    }\n    cout &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// [numbers.cpp]&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; numbers[&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Windows 7 this compiles and links fine with both MinGW g++ 4.4.1 and\nVisual C++ 10.0.&lt;/p&gt;\n\n&lt;p&gt;Since the types don&apos;t match, the program crashes when you run it.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/v7KJF.png&quot; alt=&quot;The Windows 7 crash dialog&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;In-the-formal explanation: the program has Undefined Behavior (UB), and instead\nof crashing it can therefore just hang, or perhaps do nothing, or it\ncan send threating e-mails to the presidents of the USA, Russia, India,\nChina and Switzerland, and make Nasal Daemons fly out of your nose.&lt;/p&gt;\n\n&lt;p&gt;In-practice explanation: in &lt;code&gt;main.cpp&lt;/code&gt; the array is treated as a pointer, placed\nat the same address as the array. For 32-bit executable this means that the first\n&lt;code&gt;int&lt;/code&gt; value in the array, is treated as a pointer. I.e., in &lt;code&gt;main.cpp&lt;/code&gt; the\n&lt;code&gt;numbers&lt;/code&gt; variable contains, or appears to contain, &lt;code&gt;(int*)1&lt;/code&gt;. This causes the\nprogram to access memory down at very bottom of the address space, which is\nconventionally reserved and trap-causing. Result: you get a crash.&lt;/p&gt;\n\n&lt;p&gt;The compilers are fully within their rights to not diagnose this error,\nbecause C++11 §3.5/10 says, about the requirement of compatible types\nfor the declarations,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;[N3290 §3.5/10]&lt;/strong&gt;&lt;br&gt;\n  A violation of this rule on type identity does not require a diagnostic.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The same paragraph details the variation that is allowed:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt; declarations for an array object can specify array types that\n  differ by the presence or absence of a major array bound (8.3.4).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This allowed variation does not include declaring a name as an array in one\ntranslation unit, and as a pointer in another translation unit.    &lt;/p&gt;\n\n&lt;h2&gt;5.2 Pitfall: Doing premature optimization (&lt;code&gt;memset&lt;/code&gt; &amp;amp; friends).&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Not written yet&lt;/em&gt;&lt;/p&gt;\n\n&lt;h2&gt;5.3 Pitfall: Using the C idiom to get number of elements.&lt;/h2&gt;\n\n&lt;p&gt;With deep C experience its natural to write &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; N_ITEMS( array )   (sizeof( array )/sizeof( array[0] ))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since an &lt;code&gt;array&lt;/code&gt; decays to pointer to first element where needed, the\nexpression &lt;code&gt;sizeof(a)/sizeof(a[0])&lt;/code&gt; can also be written as\n&lt;code&gt;sizeof(a)/sizeof(*a)&lt;/code&gt;. It means the same, and no matter how its\nwritten it is the &lt;strong&gt;C idiom&lt;/strong&gt; for finding the number elements of array.&lt;/p&gt;\n\n&lt;p&gt;Main pitfall: the C idiom is not typesafe. For example, the code\n&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; N_ITEMS( array ) (sizeof( array )/sizeof( *array ))&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;   n = &lt;span class=&quot;hljs-built_in&quot;&gt;N_ITEMS&lt;/span&gt;( a );          &lt;span class=&quot;hljs-comment&quot;&gt;// Oops.&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d elements.\\n&quot;&lt;/span&gt;, n );\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;   moohaha[]   = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;};\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d elements, calling display...\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;N_ITEMS&lt;/span&gt;( moohaha ) );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;display&lt;/span&gt;( moohaha );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;passes a pointer to &lt;code&gt;N_ITEMS&lt;/code&gt;, and therefore most likely produces a wrong\nresult. Compiled as a 32-bit executable in Windows 7 it produces &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;7 elements, calling display...&lt;br&gt;\n  1 elements.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The compiler rewrites &lt;code&gt;int const a[7]&lt;/code&gt; to just &lt;code&gt;int const a[]&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The compiler rewrites &lt;code&gt;int const a[]&lt;/code&gt; to &lt;code&gt;int const* a&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;N_ITEMS&lt;/code&gt; is therefore invoked with a pointer.&lt;/li&gt;\n&lt;li&gt;For a 32-bit executable &lt;code&gt;sizeof(array)&lt;/code&gt; (size of a pointer) is then 4.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;sizeof(*array)&lt;/code&gt; is equivalent to &lt;code&gt;sizeof(int)&lt;/code&gt;, which for a 32-bit executable is also 4.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In order to detect this error at run time you can do &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typeinfo&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; N_ITEMS( array )       (                               \\\n    assert((                                                    \\\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;N_ITEMS requires an actual array as argument&quot;&lt;/span&gt;,        \\\n        typeid( array ) != typeid( &amp;amp;*array )                    \\\n        )),                                                     \\\n    sizeof( array )/sizeof( *array )                            \\\n    )&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;7 elements, calling display...&lt;br&gt;\n  Assertion failed: ( &quot;N_ITEMS requires an actual array as argument&quot;, typeid( a ) != typeid( &amp;amp;*a ) ), file runtime_detect\n  ion.cpp, line 16  &lt;/p&gt;\n  \n  &lt;p&gt;This application has requested the Runtime to terminate it in an unusual way.&lt;br&gt;\n  Please contact the application&apos;s support team for more information.  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The runtime error detection is better than no detection, but it wastes a little\nprocessor time, and perhaps much more programmer time. Better with detection at\ncompile time! And if you&apos;re happy to not support arrays of local types with C++98,\nthen you can do that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ptrdiff_t&lt;/span&gt;   Size;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Type, Size n &amp;gt;\nSize &lt;span class=&quot;hljs-title&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Type (&amp;amp;)[n] )&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n; }\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; N_ITEMS( array )       n_items( array )&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compiling this definition substituted into the first complete program, with g++,\nI got &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;M:\\count&amp;gt; g++ compile_time_detection.cpp&lt;br&gt;\n  compile_time_detection.cpp: In function &apos;void display(const int*)&apos;:&lt;br&gt;\n  compile_time_detection.cpp:14: error: no matching function for call to &apos;n_items(const int*&amp;amp;)&apos;  &lt;/p&gt;\n  \n  &lt;p&gt;M:\\count&amp;gt; _  &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;How it works: the array is passed &lt;em&gt;by reference&lt;/em&gt; to &lt;code&gt;n_items&lt;/code&gt;, and so it does\nnot decay to pointer to first element, and the function can just return the\nnumber of elements specified by the type.&lt;/p&gt;\n\n&lt;p&gt;With C++11 you can use this also for arrays of local type, and it&apos;s the type safe\n&lt;strong&gt;C++ idiom&lt;/strong&gt; for finding the number of elements of an array.&lt;/p&gt;\n\n&lt;h2&gt;5.4 C++11 &amp;amp; C++14 pitfall: Using a &lt;code&gt;constexpr&lt;/code&gt; array size function.&lt;/h2&gt;\n\n&lt;p&gt;With C++11 and later it&apos;s natural, but as you&apos;ll see dangerous!, to\nreplace the C++03 function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ptrdiff_t&lt;/span&gt;   Size;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Type, Size n &amp;gt;\nSize &lt;span class=&quot;hljs-title&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Type (&amp;amp;)[n] )&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Size = &lt;span class=&quot;hljs-type&quot;&gt;ptrdiff_t&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Type, Size n &amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;n_items&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Type (&amp;amp;)[n] )&lt;/span&gt; -&amp;gt; Size &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where the significant change is the use of &lt;code&gt;constexpr&lt;/code&gt;, which allows\nthis function to produce a &lt;strong&gt;compile time constant&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example, in contrast to the C++03 function, such a compile time constant\ncan be used to declare an array of the same size as another:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 1&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; x[] = {&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; Size n = &lt;span class=&quot;hljs-built_in&quot;&gt;n_items&lt;/span&gt;( x );\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y[n] = {};\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Using y here.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But consider this code using the &lt;code&gt;constexpr&lt;/code&gt; version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 2&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Collection &amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Collection &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; c )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;hljs-built_in&quot;&gt;n_items&lt;/span&gt;( c );     &lt;span class=&quot;hljs-comment&quot;&gt;// Not in C++14!&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Use c here&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;( x );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The pitfall: as of July 2015 the above compiles with MinGW-64 5.1.0 with\n&lt;code&gt;-pedantic-errors&lt;/code&gt;, and,\ntesting with the online compilers at &lt;a href=&quot;http://gcc.godbolt.org/&quot; rel=&quot;noreferrer&quot;&gt;gcc.godbolt.org/&lt;/a&gt;, also with clang 3.0\nand clang 3.2, but not with clang 3.3, 3.4.1, 3.5.0, 3.5.1, 3.6 (rc1) or\n3.7 (experimental). And important for the Windows platform, it does not compile\nwith Visual C++ 2015. The reason is a C++11/C++14 statement about use of\nreferences in &lt;code&gt;constexpr&lt;/code&gt; expressions:&lt;/p&gt;\n\nC++11 C++14 $5.19/2 nine&lt;sup&gt;&lt;i&gt;th&lt;/i&gt;&lt;/sup&gt; dash\n\n&lt;blockquote&gt;\n  &lt;p&gt;A &lt;em&gt;conditional-expression&lt;/em&gt; &lt;code&gt;e&lt;/code&gt; is a &lt;em&gt;core constant expression&lt;/em&gt; unless the evaluation\n  of &lt;code&gt;e&lt;/code&gt;, following the rules of the abstract machine (1.9), would evaluate one of the\n  following expressions:&lt;br&gt;\n  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;an &lt;em&gt;id-expression&lt;/em&gt; that refers to a variable or data member of reference type\n  unless the reference has a preceding initialization and either  \n  \n  &lt;ul&gt;\n  &lt;li&gt;it is initialized with a constant expression or  &lt;/li&gt;\n  &lt;li&gt;it is a non-static data member of an object whose lifetime began within\n  the evaluation of e;&lt;/li&gt;\n  &lt;/ul&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;One can always write the more verbose&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 3  --  limited&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Size = &lt;span class=&quot;hljs-type&quot;&gt;ptrdiff_t&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Collection &amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Collection &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; c )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; Size n = std::extent&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;( c ) &amp;gt;::value;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Use c here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt; but this fails when &lt;code&gt;Collection&lt;/code&gt; is not a raw array.&lt;/p&gt;\n\n&lt;p&gt;To deal with collections that can be non-arrays one needs the overloadability of an\n&lt;code&gt;n_items&lt;/code&gt; function, but also, for compile time use one needs a compile time\nrepresentation of the array size. And the classic C++03 solution, which works fine\nalso in C++11 and C++14, is to let the function report its result not as a value\nbut via its function result &lt;em&gt;type&lt;/em&gt;. For example like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 4 - OK (not ideal, but portable and safe)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Size = &lt;span class=&quot;hljs-type&quot;&gt;ptrdiff_t&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; Size n &amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Size_carrier&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sizer[n];\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Type, Size n &amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;static_n_items&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Type (&amp;amp;)[n] )&lt;/span&gt;\n    -&amp;gt; Size_carrier&amp;lt;n&amp;gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// No implementation, is used only at compile time.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n &amp;gt;        &lt;span class=&quot;hljs-comment&quot;&gt;// size_t for g++&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;static_n_items&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( std::array&amp;lt;Type, n&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; )&lt;/span&gt;\n    -&amp;gt; Size_carrier&amp;lt;n&amp;gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// No implementation, is used only at compile time.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; STATIC_N_ITEMS( c ) \\\n    static_cast&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;Size&amp;gt;&lt;/span&gt;( sizeof( static_n_items( c ).sizer ) )&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Collection &amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( Collection &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; c )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; Size n = &lt;span class=&quot;hljs-built_in&quot;&gt;STATIC_N_ITEMS&lt;/span&gt;( c );\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Use c here&lt;/span&gt;\n    (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;) c;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;];\n    std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 43&amp;gt; y;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;( x );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;( y );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;About the choice of return type for &lt;code&gt;static_n_items&lt;/code&gt;: this code doesn&apos;t use &lt;code&gt;std::integral_constant&lt;/code&gt;\nbecause with &lt;code&gt;std::integral_constant&lt;/code&gt; the result is represented\ndirectly as a &lt;code&gt;constexpr&lt;/code&gt; value, reintroducing the original problem. Instead\nof a &lt;code&gt;Size_carrier&lt;/code&gt; class one can let the function directly return a\nreference to an array. However, not everybody is familiar with that syntax.&lt;/p&gt;\n\n&lt;p&gt;About the naming: part of this solution to the &lt;code&gt;constexpr&lt;/code&gt;-invalid-due-to-reference\nproblem is to make the choice of compile time constant explicit.&lt;/p&gt;\n\n&lt;p&gt;Hopefully the oops-there-was-a-reference-involved-in-your-&lt;code&gt;constexpr&lt;/code&gt; issue will be fixed with\nC++17, but until then a macro like the &lt;code&gt;STATIC_N_ITEMS&lt;/code&gt; above yields portability,\ne.g. to the clang and Visual C++ compilers, retaining type safety.&lt;/p&gt;\n\n&lt;p&gt;Related: macros do not respect scopes, so to avoid name collisions it can be a\ngood idea to use a name prefix, e.g. &lt;code&gt;MYLIB_STATIC_N_ITEMS&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h1&gt;Array creation and initialization&lt;/h1&gt;\n\n&lt;p&gt;As with any other kind of C++ object, arrays can be stored either directly in named variables (then the size must be a compile-time constant; &lt;a href=&quot;https://stackoverflow.com/questions/1887097/&quot;&gt;C++ does not support VLAs&lt;/a&gt;), or they can be stored anonymously on the heap and accessed indirectly via pointers (only then can the size be computed at runtime).&lt;/p&gt;\n\n&lt;h2&gt;Automatic arrays&lt;/h2&gt;\n\n&lt;p&gt;Automatic arrays (arrays living &quot;on the stack&quot;) are created each time the flow of control passes through the definition of a non-static local array variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; automatic_array[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Initialization is performed in ascending order. Note that the initial values depend on the element type &lt;code&gt;T&lt;/code&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If &lt;code&gt;T&lt;/code&gt; is a &lt;a href=&quot;https://stackoverflow.com/questions/146589/&quot;&gt;POD&lt;/a&gt; (like &lt;code&gt;int&lt;/code&gt; in the above example), no initialization takes place.&lt;/li&gt;\n&lt;li&gt;Otherwise, the default-constructor of &lt;code&gt;T&lt;/code&gt; initializes all the elements.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;T&lt;/code&gt; provides no accessible default-constructor, the program does not compile.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Alternatively, the initial values can be explicitly specified in the &lt;em&gt;array initializer&lt;/em&gt;, a comma-separated list surrounded by curly brackets:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primes[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since in this case the number of elements in the array initializer is equal to the size of the array, specifying the size manually is redundant. It can automatically be deduced by the compiler:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primes[] = {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;};   &lt;span class=&quot;hljs-comment&quot;&gt;// size 8 is deduced&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is also possible to specify the size and provide a shorter array initializer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fibonacci[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};   &lt;span class=&quot;hljs-comment&quot;&gt;// 47 trailing zeros are deduced&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In that case, the remaining elements are &lt;a href=&quot;https://stackoverflow.com/questions/1613383/&quot;&gt;zero-initialized&lt;/a&gt;. Note that C++ allows an empty array initializer (all elements are zero-initialized), whereas C89 does not (at least one value is required). Also note that array initializers can only be used to &lt;em&gt;initialize&lt;/em&gt; arrays; they cannot later be used in assignments.&lt;/p&gt;\n\n&lt;h2&gt;Static arrays&lt;/h2&gt;\n\n&lt;p&gt;Static arrays (arrays living &quot;in the data segment&quot;) are local array variables defined with the &lt;code&gt;static&lt;/code&gt; keyword and array variables at namespace scope (&quot;global variables&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; global_static_array[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; local_static_array[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note that variables at namespace scope are implicitly static. Adding the &lt;code&gt;static&lt;/code&gt; keyword to their definition has a &lt;a href=&quot;https://stackoverflow.com/questions/3891325/&quot;&gt;completely different, deprecated meaning&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;Here is how static arrays behave differently from automatic arrays:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Static arrays without an array initializer are zero-initialized prior to any further potential initialization.&lt;/li&gt;\n&lt;li&gt;Static POD arrays are initialized &lt;em&gt;exactly once&lt;/em&gt;, and the initial values are &lt;em&gt;typically&lt;/em&gt; baked into the executable, in which case there is no initialization cost at runtime. This is not always the most space-efficient solution, however, and it is not required by the standard.&lt;/li&gt;\n&lt;li&gt;Static non-POD arrays are initialized the &lt;em&gt;first time&lt;/em&gt; the flow of control passes through their definition. In the case of local static arrays, that may never happen if the function is never called.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;(None of the above is specific to arrays. These rules apply equally well to other kinds of static objects.)&lt;/p&gt;\n\n&lt;h2&gt;Array data members&lt;/h2&gt;\n\n&lt;p&gt;Array data members are created when their owning object is created. Unfortunately, C++03 provides no means to initialize arrays in the &lt;a href=&quot;https://stackoverflow.com/questions/1711990/&quot;&gt;member initializer list&lt;/a&gt;, so initialization must be faked with assignments:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primes[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;()\n    {\n        primes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        primes[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n        primes[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, you can define an automatic array in the constructor body and copy the elements over:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primes[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;()\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; local_array[] = {&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;};\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(local_array + &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, local_array + &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, primes + &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In C++0x, arrays &lt;em&gt;can&lt;/em&gt; be initialized in the member initializer list thanks to &lt;a href=&quot;http://www.youtube.com/watch?v=uEqknlxXJfg&quot; rel=&quot;noreferrer&quot;&gt;uniform initialization&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; primes[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;() : primes { &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; }\n    {\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the only solution that works with element types that have no default constructor.&lt;/p&gt;\n\n&lt;h2&gt;Dynamic arrays&lt;/h2&gt;\n\n&lt;p&gt;Dynamic arrays have no names, hence the only means of accessing them is via pointers. Because they have no names, I will refer to them as &quot;anonymous arrays&quot; from now on.&lt;/p&gt;\n\n&lt;p&gt;In C, anonymous arrays are created via &lt;code&gt;malloc&lt;/code&gt; and friends. In C++, anonymous arrays are created using the &lt;code&gt;new T[size]&lt;/code&gt; syntax which returns a pointer to the first element of an anonymous array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size = &lt;span class=&quot;hljs-built_in&quot;&gt;compute_size_at_runtime&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[size];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following ASCII art depicts the memory layout if the size is computed as 8 at runtime:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;             +---+---+---+---+---+---+---+---+\n(anonymous)  |   |   |   |   |   |   |   |   |\n             +---+---+---+---+---+---+---+---+\n               ^\n               |\n               |\n             +-|-+\n          p: | | |                               &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*\n             +---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Obviously, anonymous arrays require more memory than named arrays due to the extra pointer that must be stored separately. (There is also some additional overhead on the free store.)&lt;/p&gt;\n\n&lt;p&gt;Note that there is &lt;em&gt;no&lt;/em&gt; array-to-pointer decay going on here. Although evaluating &lt;code&gt;new int[size]&lt;/code&gt; does in fact create an &lt;em&gt;array&lt;/em&gt; of integers, the result of the expression &lt;code&gt;new int[size]&lt;/code&gt; is &lt;em&gt;already&lt;/em&gt; a pointer to a single integer (the first element), &lt;em&gt;not&lt;/em&gt; an array of integers or a pointer to an array of integers of unknown size. That would be impossible, because the static type system requires array sizes to be compile-time constants. (Hence, I did not annotate the anonymous array with static type information in the picture.)&lt;/p&gt;\n\n&lt;p&gt;Concerning default values for elements, anonymous arrays behave similar to automatic arrays.\nNormally, anonymous POD arrays are not initialized, but there is a &lt;a href=&quot;https://stackoverflow.com/questions/620137/&quot;&gt;special syntax&lt;/a&gt; that triggers value-initialization:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[some_computed_size]();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note the trailing pair of parenthesis right before the semicolon.) Again, C++0x simplifies the rules and allows specifying initial values for anonymous arrays thanks to uniform initialization:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* p = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] { &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you are done using an anonymous array, you have to release it back to the system:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] p;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You must release each anonymous array exactly once and then never touch it again afterwards. Not releasing it at all results in a memory leak (or more generally, depending on the element type, a resource leak), and trying to release it multiple times results in undefined behavior. Using the non-array form &lt;code&gt;delete&lt;/code&gt; (or &lt;code&gt;free&lt;/code&gt;) instead of &lt;code&gt;delete[]&lt;/code&gt; to release the array is also &lt;a href=&quot;https://stackoverflow.com/questions/1612031/&quot;&gt;undefined behavior&lt;/a&gt;.&lt;/p&gt;\n    "],"265":["\n&lt;p&gt;&lt;code&gt;return false&lt;/code&gt; from &lt;em&gt;within a jQuery event handler&lt;/em&gt; is effectively the same as calling both  &lt;code&gt;e.preventDefault&lt;/code&gt; and &lt;code&gt;e.stopPropagation&lt;/code&gt; on the passed &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot; rel=&quot;noreferrer&quot;&gt;jQuery.Event object.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;e.preventDefault()&lt;/code&gt; will prevent the default event from occuring, &lt;code&gt;e.stopPropagation()&lt;/code&gt; will prevent the event from bubbling up and &lt;code&gt;return false&lt;/code&gt; will do both. Note that this behaviour differs from &lt;em&gt;normal&lt;/em&gt; (non-jQuery) event handlers, in which, notably, &lt;code&gt;return false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; stop the event from bubbling up.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;http://ejohn.org/&quot; rel=&quot;noreferrer&quot;&gt;John Resig&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Any benefit to using event.preventDefault() over &quot;return false&quot; to cancel out an href click?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag&apos;s default behavior.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// custom handling here&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// oops...runtime error...where oh where will the href take me?&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor&apos;s default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n  e.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// custom handling here&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// oops...runtime error, but at least the user isn&apos;t navigated away.&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is not, as you&apos;ve titled it, a &quot;JavaScript&quot; question; it is a question regarding the design of jQuery.&lt;/p&gt;\n\n&lt;p&gt;jQuery and the &lt;a href=&quot;http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html&quot; rel=&quot;noreferrer&quot;&gt;previously linked citation&lt;/a&gt; from &lt;a href=&quot;http://ejohn.org&quot; rel=&quot;noreferrer&quot;&gt;John Resig&lt;/a&gt; (in &lt;a href=&quot;https://stackoverflow.com/users/70393&quot;&gt;karim79&apos;s&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/1357118/#1357151&quot;&gt;message&lt;/a&gt;) seem to be the source misunderstanding of how event handlers in general work. &lt;/p&gt;\n\n&lt;p&gt;Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action&quot; rel=&quot;noreferrer&quot;&gt;documentation from MDN&lt;/a&gt; explains how &lt;code&gt;return false&lt;/code&gt; in an event handler works&lt;/p&gt;\n\n&lt;p&gt;What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE &quot;attached&quot; events are a different matter altogether. &lt;/p&gt;\n\n&lt;p&gt;For further reading, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;attachEvent on MSDN&lt;/a&gt; and the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/&quot; rel=&quot;noreferrer&quot;&gt;W3C DOM 2 Events documentation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Generally, your first option (&lt;code&gt;preventDefault()&lt;/code&gt;) is the one to take, but you have to know what context you&apos;re in and what your goals are. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Fuel Your Coding&lt;/em&gt; has a great &lt;a href=&quot;https://web.archive.org/web/20160429070956/http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot; rel=&quot;noreferrer&quot;&gt;article on &lt;code&gt;return false;&lt;/code&gt; vs &lt;code&gt;event.preventDefault()&lt;/code&gt; vs &lt;code&gt;event.stopPropagation()&lt;/code&gt; vs &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;When using jQuery, &lt;code&gt;return false&lt;/code&gt; is doing 3 separate things when you call it:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;event.preventDefault();&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;event.stopPropagation();&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Stops callback execution and returns immediately when called.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot; rel=&quot;noreferrer&quot;&gt;jQuery Events: Stop (Mis)Using Return False&lt;/a&gt; for more information and examples.&lt;/p&gt;\n    ","\n&lt;p&gt;You can hang a lot of functions on the &lt;code&gt;onClick&lt;/code&gt; event for one element. How can you be sure the &lt;code&gt;false&lt;/code&gt; one will be the last one to fire? &lt;code&gt;preventDefault&lt;/code&gt; on the other hand will definitely prevent only the default behavior of the element.&lt;/p&gt;\n    ","\n&lt;p&gt;I think&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;is the w3c specified way of canceling events.&lt;/p&gt;\n\n&lt;p&gt;You can read this in the W3C spec on &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation&quot; rel=&quot;noreferrer&quot;&gt;Event cancelation&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also you can&apos;t use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.&lt;/p&gt;\n    ","\n&lt;p&gt;I think the best way to do this is to use &lt;code&gt;event.preventDefault()&lt;/code&gt; because if some exception is raised in the handler, then the return &lt;code&gt;false&lt;/code&gt; statement will be skipped and the behavior will be opposite to what you want.&lt;/p&gt;\n\n&lt;p&gt;But if you are sure that the code won&apos;t trigger any exceptions, then you can go with any of the method you wish.&lt;/p&gt;\n\n&lt;p&gt;If you still want to go with the return &lt;code&gt;false&lt;/code&gt;, then you can put your entire handler code in a try catch block like below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;{\n      your code here.........\n  }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e){}\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The main difference between &lt;code&gt;return false&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; is that your code below &lt;code&gt;return false&lt;/code&gt; will not be executed and in &lt;code&gt;event.preventDefault()&lt;/code&gt; case your code will execute after this statement.&lt;/p&gt;\n\n&lt;p&gt;When you write return false it do the following things for you behind the scenes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;* &lt;span class=&quot;hljs-title class_&quot;&gt;Stops&lt;/span&gt; callback execution and returns immediately when called.\n* event.&lt;span class=&quot;hljs-title function_&quot;&gt;stopPropagation&lt;/span&gt;();\n* event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;e.preventDefault();&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It simply stops the default action of an element.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Instance Ex.:-&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;prevents the hyperlink from following the URL, prevents the submit button to submit the form. When you have many event handlers and you just want to prevent default event from occuring, &amp;amp; occuring from many times,\nfor that we need to  use  in the top of the function(). &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Reason:-&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The reason to use &lt;code&gt;e.preventDefault();&lt;/code&gt; is that in our code so something goes wrong in the code, then it will allow to execute the link or form to get submitted or allow to execute or allow whatever action you need to do. &amp;amp; link or submit button will get submitted &amp;amp; still allow further propagation of the event.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;dir&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ltr&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://www.google.com&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;doSomethingElse()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Preventsss page from redirect&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;doSomethingElse&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n           &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is Test...&quot;&lt;/span&gt;);\n         }\n         $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n          e.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;(); \n         });\n      &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;return False;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It simply stops the execution of the function().&lt;/p&gt;\n\n&lt;p&gt;&quot;&lt;code&gt;return false;&lt;/code&gt;&quot; will end the whole execution of process.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Reason:-&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The reason to use return false; is that you don&apos;t want to execute the function any more in strictly mode.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;dir&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ltr&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;returnFalse();&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Blah&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnFalse&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n         &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;returns false without location redirection....&quot;&lt;/span&gt;)\n             &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             location.&lt;span class=&quot;hljs-property&quot;&gt;href&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.google.com/&quot;&lt;/span&gt;;\n         \n         }\n      &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Basically, this way you combine things because jQuery is a framework which mostly focuses on HTML elements, you basically preventing the default, but at the same time, you stop propagation to bubble up.&lt;/p&gt;\n\n&lt;p&gt;So we can simply say, return false in &lt;code&gt;jQuery&lt;/code&gt; is equal to:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;return false is e.preventDefault AND e.stopPropagation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;But also don&apos;t forget it&apos;s all in jQuery or DOM related functions, when you run it on the element, basically, it prevents everything from firing including the default behaviour and propagation of the event.&lt;/p&gt;\n\n&lt;p&gt;Basically before starting using &lt;code&gt;return false;&lt;/code&gt;, first understand what &lt;code&gt;e.preventDefault();&lt;/code&gt; and &lt;code&gt;e.stopPropagation();&lt;/code&gt; do, then if you think you need both at the same time, then simply use it.&lt;/p&gt;\n\n&lt;p&gt;So basically this code below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is &lt;strong&gt;equal&lt;/strong&gt; to this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n  event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n  event.&lt;span class=&quot;hljs-title function_&quot;&gt;stopPropagation&lt;/span&gt;();\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From my experience event.stopPropagation() is mostly used in CSS effect or animation works, for instance when you have hover effect for both card and button element, when you hover on the button both card and buttons hover effect will be triggered in this case, you can use event.stopPropagation() stop bubbling actions, and event.preventDefault() is for prevent default behaviour of browser actions. For instance, you have form but you only defined click event for the submit action, if the user submits the form by pressing enter, the browser triggered by keypress event, not your click event here you should use event.preventDefault() to avoid inappropriate behavior. I don&apos;t know what the hell is return false; sorry.For more clarification visit this link and play around with line #33 &lt;a href=&quot;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.codecademy.com/courses/introduction-to-javascript/lessons/requests-i/exercises/xhr-get-request-iv&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;My opinion from my experience saying, that it is always better to use &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;() \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Practically\n        to stop or prevent submit event, whenever we required rather than &lt;code&gt;return false&lt;/code&gt;\n   &lt;code&gt;event.preventDefault()&lt;/code&gt; works fine.&lt;/p&gt;\n    "]},"page":"70","randomQuestions":[{"title":"How do I access previous promise results in a .then() chain?","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"Split comma-separated strings in a column into separate rows","slug":"split-comma-separated-strings-in-a-column-into-separate-rows-1657387785823"},{"title":"How do I properly clean up Excel interop objects?","slug":"how-do-i-properly-clean-up-excel-interop-objects-1657388329706"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"Why is the command bound to a Button or event executed when declared?","slug":"why-is-the-command-bound-to-a-button-or-event-executed-when-declared-1657384872054"},{"title":"Use a content script to access the page context variables and functions","slug":"use-a-content-script-to-access-the-page-context-variables-and-functions-1657384842444"},{"title":"Asking the user for input until they give a valid response","slug":"asking-the-user-for-input-until-they-give-a-valid-response-1657384376162"},{"title":"What does it mean to \"program to an interface\"?","slug":"what-does-it-mean-to-\"program-to-an-interface\"-1657384671665"},{"title":"MySQL Error 1093 - Can't specify target table for update in FROM clause","slug":"mysql-error-1093-can't-specify-target-table-for-update-in-from-clause-1657388078961"},{"title":"How do I pass a variable by reference?","slug":"how-do-i-pass-a-variable-by-reference-1657384657232"},{"title":"How can I pivot a dataframe?","slug":"how-can-i-pivot-a-dataframe-1657384433802"},{"title":"The difference between bracket [ ] and double bracket [[ ]] for accessing the elements of a list or dataframe","slug":"the-difference-between-bracket-and-double-bracket-for-accessing-the-elements-of-a-list-or-dataframe-1657388451711"},{"title":"Why is processing a sorted array faster than processing an unsorted array?","slug":"why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array-1657385497444"},{"title":"Open a URL in a new tab (and not a new window)","slug":"open-a-url-in-a-new-tab-(and-not-a-new-window)-1657387699598"},{"title":"Sort (order) data frame rows by multiple columns","slug":"sort-(order)-data-frame-rows-by-multiple-columns-1657388355671"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"How can I upload files to a server using JSP/Servlet?","slug":"how-can-i-upload-files-to-a-server-using-jspservlet-1657384847658"}]},"__N_SSG":true}