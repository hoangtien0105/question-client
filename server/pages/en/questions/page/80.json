{"pageProps":{"data":{"count":610,"rows":[{"id":215,"title":"How can I iterate through two lists in parallel?","slug":"how-can-i-iterate-through-two-lists-in-parallel-1657387278930","postType":"QUESTION","createdAt":"2022-07-09T17:21:18.000Z","updatedAt":"2022-07-09T17:21:18.000Z","tags":[{"id":1493,"name":"iterator","slug":"iterator","createdAt":"2022-07-09T17:21:19.000Z","updatedAt":"2022-07-09T17:21:19.000Z","Questions_Tags":{"questionId":215,"tagId":1493}}]},{"id":214,"title":"What is this weird colon-member (\" : \") syntax in the constructor?","slug":"what-is-this-weird-colon-member-(\"-:-\")-syntax-in-the-constructor-1657387264047","postType":"QUESTION","createdAt":"2022-07-09T17:21:04.000Z","updatedAt":"2022-07-09T17:21:04.000Z","tags":[{"id":1487,"name":"constructor","slug":"constructor","createdAt":"2022-07-09T17:21:04.000Z","updatedAt":"2022-07-09T17:21:04.000Z","Questions_Tags":{"questionId":214,"tagId":1487}},{"id":1489,"name":"ctor-initializer","slug":"ctor-initializer","createdAt":"2022-07-09T17:21:04.000Z","updatedAt":"2022-07-09T17:21:04.000Z","Questions_Tags":{"questionId":214,"tagId":1489}}]},{"id":213,"title":"How do I use reflection to call a generic method?","slug":"how-do-i-use-reflection-to-call-a-generic-method-1657387256751","postType":"QUESTION","createdAt":"2022-07-09T17:20:56.000Z","updatedAt":"2022-07-09T17:20:56.000Z","tags":[{"id":1484,"name":"reflection","slug":"reflection","createdAt":"2022-07-09T17:20:56.000Z","updatedAt":"2022-07-09T17:20:56.000Z","Questions_Tags":{"questionId":213,"tagId":1484}}]},{"id":212,"title":"How do I set a variable to the output of a command in Bash?","slug":"how-do-i-set-a-variable-to-the-output-of-a-command-in-bash-1657387250909","postType":"QUESTION","createdAt":"2022-07-09T17:20:50.000Z","updatedAt":"2022-07-09T17:20:50.000Z","tags":[{"id":1480,"name":"command-line","slug":"command-line","createdAt":"2022-07-09T17:20:51.000Z","updatedAt":"2022-07-09T17:20:51.000Z","Questions_Tags":{"questionId":212,"tagId":1480}}]},{"id":211,"title":"Storing Images in DB - Yea or Nay?","slug":"storing-images-in-db-yea-or-nay-1657387248067","postType":"QUESTION","createdAt":"2022-07-09T17:20:48.000Z","updatedAt":"2022-07-09T17:20:48.000Z","tags":[{"id":1474,"name":"image","slug":"image","createdAt":"2022-07-09T17:20:48.000Z","updatedAt":"2022-07-09T17:20:48.000Z","Questions_Tags":{"questionId":211,"tagId":1474}},{"id":1475,"name":"theory","slug":"theory","createdAt":"2022-07-09T17:20:48.000Z","updatedAt":"2022-07-09T17:20:48.000Z","Questions_Tags":{"questionId":211,"tagId":1475}},{"id":1476,"name":"storage","slug":"storage","createdAt":"2022-07-09T17:20:48.000Z","updatedAt":"2022-07-09T17:20:48.000Z","Questions_Tags":{"questionId":211,"tagId":1476}},{"id":1477,"name":"blob","slug":"blob","createdAt":"2022-07-09T17:20:48.000Z","updatedAt":"2022-07-09T17:20:48.000Z","Questions_Tags":{"questionId":211,"tagId":1477}}]}]},"answers":{"211":["\n&lt;p&gt;I&apos;m in charge of some applications that manage many TB of images.  We&apos;ve found that storing &lt;strong&gt;file paths&lt;/strong&gt; in the database to be best.&lt;/p&gt;\n\n&lt;p&gt;There are a couple of issues:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;database storage is usually more expensive than file system storage&lt;/li&gt;\n&lt;li&gt;you can super-accelerate file system access with standard off the shelf products\n\n&lt;ul&gt;\n&lt;li&gt;for example, many web servers use the operating system&apos;s &lt;strong&gt;sendfile()&lt;/strong&gt; system call to asynchronously send a file directly from the file system to the network interface. Images stored in a database don&apos;t benefit from this optimization.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;things like web servers, etc, need no special coding or processing to access images in the file system&lt;/li&gt;\n&lt;li&gt;databases win out where transactional integrity between the image and metadata are important.\n\n&lt;ul&gt;\n&lt;li&gt;it is more complex to manage integrity between db metadata and file system data&lt;/li&gt;\n&lt;li&gt;it is difficult (within the context of a web application) to guarantee data has been flushed to disk on the filesystem&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;As with most issues, it&apos;s not as simple as it sounds. There are cases where it would make sense to store the images in the database. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You are storing images that are\nchanging dynamically, say invoices and you wanted\nto get an invoice as it was on 1 Jan\n2007?&lt;/li&gt;\n&lt;li&gt;The government wants you to maintain 6 years of history&lt;/li&gt;\n&lt;li&gt;Images stored in the database do not require a different backup strategy. Images stored on filesystem do&lt;/li&gt;\n&lt;li&gt;It is easier to control access to the images if they are in a database. Idle admins can access any folder on disk. It takes a really determined admin to go snooping in a database to extract the images&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;On the other hand there are problems associated&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Require additional code to extract\nand stream the images &lt;/li&gt;\n&lt;li&gt;Latency may be\n    slower than direct file access    &lt;/li&gt;\n&lt;li&gt;Heavier load on the database server&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;File store.  Facebook engineers had a great talk about it.  One take away was to know the practical limit of files in a directory.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://perspectives.mvdirona.com/2008/06/30/FacebookNeedleInAHaystackEfficientStorageOfBillionsOfPhotos.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;Needle in a Haystack: Efficient Storage of Billions of Photos&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This might be a bit of a long shot, but if you&apos;re using (or planning on using) SQL Server 2008 I&apos;d recommend having a look at the new &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb933993(SQL.100).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;FileStream&lt;/a&gt; data type.&lt;/p&gt;\n\n&lt;p&gt;FileStream solves most of the problems around storing the files in the DB:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The Blobs are actually stored as files in a folder.&lt;/li&gt;\n&lt;li&gt;The Blobs can be accessed using &lt;em&gt;either&lt;/em&gt; a database connection &lt;em&gt;or&lt;/em&gt; over the filesystem.&lt;/li&gt;\n&lt;li&gt;Backups are integrated.&lt;/li&gt;\n&lt;li&gt;Migration &quot;just works&quot;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;However SQL&apos;s &quot;Transparent Data Encryption&quot; does not encrypt FileStream objects, so if that is a consideration, you may be better off just storing them as varbinary.&lt;/p&gt;\n\n&lt;p&gt;From the MSDN Article:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Transact-SQL statements can insert, update, query, search, and back up FILESTREAM data. Win32 file system interfaces provide streaming access to the data.&lt;br&gt;\n  FILESTREAM uses the NT system cache for caching file data. This helps reduce any effect that FILESTREAM data might have on Database Engine performance. The SQL Server buffer pool is not used; therefore, this memory is available for query processing.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;File paths in the DB is &lt;strong&gt;definitely&lt;/strong&gt; the way to go - I&apos;ve heard story after story from customers with TB of images that it became a nightmare trying to store any significant amount of images in a DB - the performance hit alone is too much.&lt;/p&gt;\n    ","\n&lt;p&gt;In my experience, sometimes the simplest solution is to &lt;strong&gt;name the images according to the primary key&lt;/strong&gt;. So it&apos;s easy to find the image that belongs to a particular record, and vice versa. But at the same time you&apos;re not storing &lt;em&gt;anything&lt;/em&gt; about the image in the database.&lt;/p&gt;\n    ","\n&lt;p&gt;The trick here is to not become a zealot. &lt;/p&gt;\n\n&lt;p&gt;One thing to note here is that no one in the pro file system camp has listed a particular file system. Does this mean that everything from FAT16 to ZFS handily beats every database?&lt;/p&gt;\n\n&lt;p&gt;No. &lt;/p&gt;\n\n&lt;p&gt;The truth is that many databases beat many files systems, even when we&apos;re only talking about raw speed.&lt;/p&gt;\n\n&lt;p&gt;The correct course of action is to make the right decision for your precise scenario, and to do that, you&apos;ll need some numbers and some use case estimates.&lt;/p&gt;\n    ","\n&lt;p&gt;In places where you MUST guarantee referential integrity and ACID compliance, storing images in the database is required.&lt;/p&gt;\n\n&lt;p&gt;You cannot transactionaly guarantee that the image and the meta-data about that image stored in the database refer to the same file. In other words, it is impossible to guarantee that the file on the filesystem is only ever altered at the same time and in the same transaction as the metadata.&lt;/p&gt;\n    ","\n&lt;p&gt;As others have said SQL 2008 comes with a Filestream type that allows you to store a filename or identifier as a pointer in the db and automatically stores the image on your filesystem which is a great scenario.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re on an older database, then I&apos;d say that if you&apos;re storing it as blob data, then you&apos;re really not going to get anything out of the database in the way of searching features, so it&apos;s probably best to store an address on a filesystem, and store the image that way.&lt;/p&gt;\n\n&lt;p&gt;That way you also save space on your filesystem, as you are only going to save the exact amount of space, or even compacted space on the filesystem.&lt;/p&gt;\n\n&lt;p&gt;Also, you could decide to save with some structure or elements that allow you to browse the raw images in your filesystem without any db hits, or transfer the files in bulk to another system, hard drive, S3 or another scenario - updating the location in your program, but keep the structure, again without much of a hit trying to bring the images out of your db when trying to increase storage.&lt;/p&gt;\n\n&lt;p&gt;Probably, it would also allow you to throw some caching element, based on commonly hit image urls into your web engine/program, so you&apos;re saving yourself there as well.&lt;/p&gt;\n    ","\n&lt;p&gt;Small static images (not more than a couple of megs) that are not frequently edited, should be stored in the database. This method has several benefits including easier portability (images are transferred with the database), easier backup/restore (images are backed up with the database) and better scalability (a file system folder with thousands of little thumbnail files sounds like a scalability nightmare to me).&lt;/p&gt;\n\n&lt;p&gt;Serving up images from a database is easy, just implement an http handler that serves the byte array returned from the DB server as a binary stream.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s an interesting white paper on the topic.  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://research.microsoft.com/research/pubs/view.aspx?msr_tr_id=MSR-TR-2006-45&quot; rel=&quot;noreferrer&quot;&gt;To BLOB or Not To BLOB: Large Object Storage in a Database or a Filesystem&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The answer is &quot;It depends.&quot;  Certainly it would depend upon the database server and its approach to blob storage.  It also depends on the type of data being stored in blobs, as well as how that data is to be accessed.&lt;/p&gt;\n\n&lt;p&gt;Smaller sized files can be efficiently stored and delivered using the database as the storage mechanism.  Larger files would probably be best stored using the file system, especially if they will be modified/updated often.  (blob fragmentation becomes an issue in regards to performance.)&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an additional point to keep in mind.  One of the reasons supporting the use of a database to store the blobs is ACID compliance.  However, the approach that the testers used in the white paper, (Bulk Logged option of SQL Server,) which doubled SQL Server throughput, effectively changed the &apos;D&apos; in ACID to a &apos;d,&apos; as the blob data was not logged with the initial writes for the transaction.   Therefore, if full ACID compliance is an important requirement for your system, halve the SQL Server throughput figures for database writes when comparing file I/O to database blob I/O.&lt;/p&gt;\n    ","\n&lt;p&gt;One thing that I haven&apos;t seen anyone mention yet but is definitely worth noting is that there are issues associated with storing large amounts of images in most filesystems too.  For example if you take the approach mentioned above and name each image file after the primary key, on most filesystems you will run into issues if you try to put all of the images in one big directory once you reach a very large number of images (e.g. in the hundreds of thousands or millions).&lt;/p&gt;\n\n&lt;p&gt;Once common solution to this is to hash them out into a balanced tree of subdirectories.&lt;/p&gt;\n    ","\n&lt;p&gt;Something nobody has mentioned is that the DB guarantees atomic actions, transactional integrity and deals with concurrency. Even referentially integrity is out of the window with a filesystem - so how do you know your file names are really still correct?&lt;/p&gt;\n\n&lt;p&gt;If you have your images in a file-system and someone is reading the file as you&apos;re writing a new version or even deleting the file - what happens?&lt;/p&gt;\n\n&lt;p&gt;We use blobs because they&apos;re easier to manage (backup, replication, transfer) too. They work well for us.&lt;/p&gt;\n    ","\n&lt;p&gt;The problem with storing only filepaths to images in a database is that the database&apos;s integrity can no longer be forced.&lt;/p&gt;\n\n&lt;p&gt;If the actual image pointed to by the filepath becomes unavailable, the database unwittingly has an integrity error.&lt;/p&gt;\n\n&lt;p&gt;Given that the images are the actual data being sought after, and that they can be managed easier (the images won&apos;t suddenly disappear) in one integrated database rather than having to interface with some kind of filesystem (if the filesystem is independently accessed, the images MIGHT suddenly &quot;disappear&quot;), I&apos;d go for storing them directly as a BLOB or such.&lt;/p&gt;\n    ","\n&lt;p&gt;At a company where I used to work we stored 155 million images in an Oracle 8i (then 9i) database. 7.5TB worth.&lt;/p&gt;\n    ","\n&lt;p&gt;Normally, I&apos;m storngly against taking the most expensive and hardest to scale part of your infrastructure (the database) and putting all load into it. On the other hand: It greatly simplifies backup strategy, especially when you have multiple web servers and need to somehow keep the data synchronized.&lt;/p&gt;\n\n&lt;p&gt;Like most other things, It depends on the expected size and Budget.&lt;/p&gt;\n    ","\n&lt;p&gt;We have implemented a document imaging system that stores all it&apos;s images in SQL2005 blob fields.  There are several hundred GB at the moment and we are seeing excellent response times and little or no performance degradation. In addition, fr regulatory compliance, we have a middleware layer that archives newly posted documents to an optical jukebox system which exposes them as a standard NTFS file system.  &lt;/p&gt;\n\n&lt;p&gt;We&apos;ve been very pleased with the results, particularly with respect to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Ease of Replication and Backup&lt;/li&gt;\n&lt;li&gt;Ability to easily implement a document versioning system&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;If this is web-based application then there could be advantages to storing the images on a third-party storage delivery network, such as Amazon&apos;s S3 or the Nirvanix platform.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Assumption: Application is web enabled/web based&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;I&apos;m surprised no one has really mentioned this ... delegate it out to others who are specialists -&amp;gt; &lt;strong&gt;use a 3rd party image/file hosting provider&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Store your files on a paid online service like&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://aws.amazon.com/s3/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Amazon S3&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.mosso.com/cloudfiles.jsp&quot; rel=&quot;nofollow noreferrer&quot;&gt;Moso Cloud Storage&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Another StackOverflow threads talking about this &lt;a href=&quot;https://stackoverflow.com/questions/792134/alternative-to-amazon-s3-for-the-data-center&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/731526/amazon-s3-when-why&quot;&gt;This thread&lt;/a&gt; explains why you should use a 3rd party hosting provider. &lt;/p&gt;\n\n&lt;p&gt;It&apos;s so worth it. They store it efficiently. No bandwith getting uploaded from your servers to client requests, etc.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;re not on SQL Server 2008 and you have some solid reasons for putting specific image files in the database, then you could take the &quot;both&quot; approach and use the file system as a temporary cache and use the database as the master repository. &lt;/p&gt;\n\n&lt;p&gt;For example, your business logic can check if an image file exists on disc before serving it up, retrieving from the database when necessary. This buys you the capability of multiple web servers and fewer sync issues.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m not sure how much of a &quot;real world&quot; example this is, but I currently have an application out there that stores details for a trading card game, including the images for the cards. Granted the record count for the database is only 2851 records to date, but given the fact that certain cards have are released multiple times and have alternate artwork, it was actually more efficient sizewise to scan the &quot;primary square&quot; of the artwork and then dynamically generate the border and miscellaneous effects for the card when requested.&lt;/p&gt;\n\n&lt;p&gt;The original creator of this image library created a data access class that renders the image based on the request, and it does it quite fast for viewing and individual card.&lt;/p&gt;\n\n&lt;p&gt;This also eases deployment/updates when new cards are released, instead of zipping up an entire folder of images and sending those down the pipe and ensuring the proper folder structure is created, I simply update the database and have the user download it again. This currently sizes up to 56MB, which isn&apos;t great, but I&apos;m working on an incremental update feature for future releases. In addition, there is a &quot;no images&quot; version of the application that allows those over dial-up to get the application without the download delay.&lt;/p&gt;\n\n&lt;p&gt;This solution has worked great to date since the application itself is targeted as a single instance on the desktop. There is a web site where all of this data is archived for online access, but I would in no way use the same solution for this. I agree the file access would be preferable because it would scale better to the frequency and volume of requests being made for the images.&lt;/p&gt;\n\n&lt;p&gt;Hopefully this isn&apos;t too much babble, but I saw the topic and wanted to provide some my insights from a relatively successful small/medium scale application.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL Server 2008 offers a solution that has the best of both worlds : &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc716724.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;The filestream data type&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Manage it like a regular table and have the performance of the file system.&lt;/p&gt;\n    ","\n&lt;p&gt;It depends on the number of images you are going to store and also their sizes. I have used databases to store images in the past and my experience has been fairly good. &lt;/p&gt;\n\n&lt;p&gt;IMO, Pros of using database to store images are,&lt;/p&gt;\n\n&lt;p&gt;A. You don&apos;t need FS structure to hold your images&lt;br&gt;\nB. Database indexes perform better than FS trees when more number of items are to be stored&lt;br&gt;\nC. Smartly tuned database perform good job at caching the query results&lt;br&gt;\nD. Backups are simple. It also works well if you have replication set up and content is delivered from a server near to user. In such cases, explicit synchronization is not required.&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;If your images are going to be small (say &amp;lt; 64k) and the storage engine of your db supports inline (in record) BLOBs, it improves performance further as no indirection is required (Locality of reference is achieved). &lt;/p&gt;\n\n&lt;p&gt;Storing images may be a bad idea when you are dealing with small number of huge sized images. Another problem with storing images in db is that, metadata like creation, modification dates must handled by your application.&lt;/p&gt;\n    ","\n&lt;p&gt;I have recently created a PHP/MySQL app which stores PDFs/Word files in a MySQL table (as big as 40MB per file so far).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Uploaded files are replicated to backup server along with everything else, no separate backup strategy is needed (peace of mind).&lt;/li&gt;\n&lt;li&gt;Setting up the web server is slightly simpler because I don&apos;t need to have an uploads/ folder and tell all my applications where it is.&lt;/li&gt;\n&lt;li&gt;I get to use transactions for edits to improve data integrity - I don&apos;t have to worry about orphaned and missing files&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;mysqldump now takes a looooong time because there is 500MB of file data in one of the tables.&lt;/li&gt;\n&lt;li&gt;Overall not very memory/cpu efficient when compared to filesystem&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&apos;d call my implementation a success, it takes care of backup requirements and simplifies the layout of the project. The performance is fine for the 20-30 people who use the app.&lt;/p&gt;\n    ","\n&lt;p&gt;Im my experience I had to manage both situations: images stored in database and images on the file system with path stored in db.&lt;/p&gt;\n\n&lt;p&gt;The first solution, images in database, is somewhat &quot;cleaner&quot; as your data access layer will have to deal only with database objects; but this is good only when you have to deal with low numbers. &lt;/p&gt;\n\n&lt;p&gt;Obviously database access performance when you deal with binary large objects is degrading, and the database dimensions will grow a lot, causing again performance loss... and normally database space is much more expensive than file system space.&lt;/p&gt;\n\n&lt;p&gt;On the other hand having large binary objects stored in file system will cause you to have backup plans that have to consider both database and file system, and this can be an issue for some systems. &lt;/p&gt;\n\n&lt;p&gt;Another reason to go for file system is when you have to share your images data (or sounds, video, whatever) with third party access: in this days I&apos;m developing a web app that uses images that have to be accessed from &quot;outside&quot; my web farm in such a way that a database access to retrieve binary data is simply impossible. So sometimes there are also design considerations that will drive you to a choice.&lt;/p&gt;\n\n&lt;p&gt;Consider also, when making this choice, if you have to deal with permission and authentication when accessing binary objects: these requisites normally can be solved in an easier way when data are stored in db.&lt;/p&gt;\n    ","\n&lt;p&gt;I once worked on an image processing application. We stored the uploaded images in a directory that was something like /images/[today&apos;s date]/[id number]. But we also extracted the metadata (exif data) from the images and stored that in the database, along with a timestamp and such.&lt;/p&gt;\n    ","\n&lt;p&gt;In a previous project i stored images on the filesystem, and that caused a lot of headaches with backups, replication, and the filesystem getting out of sync with the database.&lt;/p&gt;\n\n&lt;p&gt;In my latest project i&apos;m storing images in the database, and caching them on the filesystem, and it works really well. I&apos;ve had no problems so far.&lt;/p&gt;\n    ","\n&lt;p&gt;Second the recommendation on file paths. I&apos;ve worked on a couple of projects that needed to manage large-ish asset collections, and any attempts to store things directly in the DB resulted in pain and frustration long-term.&lt;/p&gt;\n\n&lt;p&gt;The only real &quot;pro&quot; I can think of regarding storing them in the DB is the potential for easy of individual image assets. If there are no file paths to use, and all images are streamed straight out of the DB, there&apos;s no danger of a user finding files they shouldn&apos;t have access to.&lt;/p&gt;\n\n&lt;p&gt;That seems like it would be better solved with an intermediary script pulling data from a web-inaccessible file store, though. So the DB storage isn&apos;t REALLY necessary.&lt;/p&gt;\n    ","\n&lt;p&gt;The word on the street is that unless you are a database vendor trying to prove that your database can do it (like, let&apos;s say Microsoft boasting about Terraserver storing a bajillion images in SQL Server) it&apos;s not a very good idea. When the alternative - storing images on file servers and paths in the database is so much easier, why bother? Blob fields are kind of like the off-road capabilities of SUVs - most people don&apos;t use them, those who do usually get in trouble, and then there are those who do, but only for the fun of it.&lt;/p&gt;\n    ","\n&lt;p&gt;Storing an image in the database still means that the image data ends up somewhere in the file system but obscured so that you cannot access it directly. &lt;/p&gt;\n\n&lt;p&gt;+ves:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;database integrity&lt;/li&gt;\n&lt;li&gt;its easy to manage since you don&apos;t have to worry about keeping the filesystem in sync when an image is added or deleted&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;-ves:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;performance penalty -- a database lookup is usually slower that a filesystem lookup&lt;/li&gt;\n&lt;li&gt;you cannot edit the image directly (crop, resize)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Both methods are common and practiced. Have a look at the advantages and disadvantages. Either way, you&apos;ll have to think about how to overcome the disadvantages. Storing in database usually means tweaking database parameters and implement some kind of caching. Using filesystem requires you to find some way of keeping filesystem+database in sync.&lt;/p&gt;\n    "],"212":["\n&lt;p&gt;In addition to backticks &lt;code&gt;`command`&lt;/code&gt;, &lt;a href=&quot;http://www.gnu.org/software/bash/manual/bashref.html#Command-Substitution&quot; rel=&quot;noreferrer&quot;&gt;command substitution&lt;/a&gt; can be done with &lt;code&gt;$(command)&lt;/code&gt; or &lt;code&gt;&quot;$(command)&quot;&lt;/code&gt;, which I find easier to read, and allows for nesting.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;OUTPUT=$(&lt;span class=&quot;hljs-built_in&quot;&gt;ls&lt;/span&gt; -1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${OUTPUT}&lt;/span&gt;&quot;&lt;/span&gt;\n\nMULTILINE=$(&lt;span class=&quot;hljs-built_in&quot;&gt;ls&lt;/span&gt; \\\n   -1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${MULTILINE}&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Quoting (&lt;code&gt;&quot;&lt;/code&gt;) does matter to preserve &lt;strong&gt;multi-line variable values&lt;/strong&gt;; it is optional on the right-hand side of an assignment, as &lt;a href=&quot;https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameters&quot; rel=&quot;noreferrer&quot;&gt;word splitting is not performed&lt;/a&gt;, so &lt;code&gt;OUTPUT=$(ls -1)&lt;/code&gt; would work fine.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$(sudo run command)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;If you&apos;re going to use an apostrophe, you need &lt;code&gt;`&lt;/code&gt;, not &lt;code&gt;&apos;&lt;/code&gt;. This character is called &quot;backticks&quot; (or &quot;grave accent&quot;):&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\n\nVAR1=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;\nVAR2=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;\n\nMOREF=`sudo run &lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt; against &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$VAR1&lt;/span&gt;&quot;&lt;/span&gt; | grep name | &lt;span class=&quot;hljs-built_in&quot;&gt;cut&lt;/span&gt; -c7-`\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$MOREF&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Some &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot; rel=&quot;noreferrer&quot;&gt;Bash&lt;/a&gt; tricks I use to set variables from commands&lt;/h2&gt;\n&lt;p&gt;Sorry, there is a loong answer, but as &lt;a href=&quot;/questions/tagged/bash&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;bash&apos;&quot; rel=&quot;tag&quot;&gt;bash&lt;/a&gt; is a &lt;a href=&quot;/questions/tagged/shell&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;shell&apos;&quot; rel=&quot;tag&quot;&gt;shell&lt;/a&gt;, where the main goal is to run other &lt;a href=&quot;/questions/tagged/unix&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;unix&apos;&quot; rel=&quot;tag&quot;&gt;unix&lt;/a&gt; commands and react on &lt;em&gt;result code&lt;/em&gt; and/or &lt;em&gt;output&lt;/em&gt;, ( commands are often piped &lt;em&gt;filter&lt;/em&gt;, etc... ).&lt;/p&gt;\n&lt;p&gt;Storing command output in variables is something basic and fundamental.&lt;/p&gt;\n&lt;p&gt;Therefore, depending on&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;compatibility (&lt;a href=&quot;/questions/tagged/posix&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;posix&apos;&quot; rel=&quot;tag&quot;&gt;posix&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;kind of output (filter(s))&lt;/li&gt;\n&lt;li&gt;number of variable to set (split or interpret)&lt;/li&gt;\n&lt;li&gt;execution time (monitoring)&lt;/li&gt;\n&lt;li&gt;error trapping&lt;/li&gt;\n&lt;li&gt;repeatability of request (see long running background process, further)&lt;/li&gt;\n&lt;li&gt;interactivity (considering user input while reading from another &lt;em&gt;input file descriptor&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;do I miss something?&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;First simple, old (obsolet), and compatible way&lt;/h2&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;myPi=`&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;4*a(1)&apos;&lt;/span&gt; | bc -l`\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myPi&lt;/span&gt; \n3.14159265358979323844\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Compatible, second way&lt;/h3&gt;\n&lt;p&gt;As nesting could become heavy, parenthesis was implemented for this&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;myPi=$(bc -l &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;4*a(1)&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using backticks in script is to be avoided today.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Nested sample:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;SysStarted=$(&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(ps ho lstart 1)&lt;/span&gt;&quot;&lt;/span&gt; +%s)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$SysStarted&lt;/span&gt; \n1480656334\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;a href=&quot;/questions/tagged/bash&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;bash&apos;&quot; rel=&quot;tag&quot;&gt;bash&lt;/a&gt; features&lt;/h2&gt;\n&lt;h3&gt;Reading more than one variable (with &lt;em&gt;Bashisms&lt;/em&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k /\nFilesystem     1K-blocks   Used Available Use% Mounted on\n/dev/dm-0         999320 529020    401488  57% /\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If I just want a &lt;em&gt;used&lt;/em&gt; value:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;array=($(&lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k /))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you could see an &lt;em&gt;array&lt;/em&gt; variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -p array\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -a array=&lt;span class=&quot;hljs-string&quot;&gt;&apos;([0]=&quot;Filesystem&quot; [1]=&quot;1K-blocks&quot; [2]=&quot;Used&quot; [3]=&quot;Available&quot; [\n4]=&quot;Use%&quot; [5]=&quot;Mounted&quot; [6]=&quot;on&quot; [7]=&quot;/dev/dm-0&quot; [8]=&quot;999320&quot; [9]=&quot;529020&quot; [10]=\n&quot;401488&quot; [11]=&quot;57%&quot; [12]=&quot;/&quot;)&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${array[9]}&lt;/span&gt;\n529020\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;But I often use this:&lt;/h3&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;{ &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -r _;&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -r filesystem size using avail prct mountpoint ; } &amp;lt; &amp;lt;(&lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k /)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$using&lt;/span&gt;\n529020\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;( The first &lt;code&gt;read _&lt;/code&gt; will just &lt;em&gt;drop&lt;/em&gt; header line. ) Here, in &lt;strong&gt;only one&lt;/strong&gt; command, you will &lt;strong&gt;populate 6 different&lt;/strong&gt; variables (shown by alphabetical order):&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -p avail filesystem mountpoint prct size using\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- avail=&lt;span class=&quot;hljs-string&quot;&gt;&quot;401488&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- filesystem=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/dev/dm-0&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- mountpoint=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- prct=&lt;span class=&quot;hljs-string&quot;&gt;&quot;57%&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;999320&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- using=&lt;span class=&quot;hljs-string&quot;&gt;&quot;529020&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;{ &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -a &lt;span class=&quot;hljs-built_in&quot;&gt;head&lt;/span&gt;;varnames=(&lt;span class=&quot;hljs-variable&quot;&gt;${head[@]//[K1% -]}&lt;/span&gt;);varnames=(&lt;span class=&quot;hljs-variable&quot;&gt;${head[@]//[K1% -]}&lt;/span&gt;);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${varnames[@],,}&lt;/span&gt; ; } &amp;lt; &amp;lt;(LANG=C &lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k /)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -p varnames &lt;span class=&quot;hljs-variable&quot;&gt;${varnames[@],,}&lt;/span&gt; \n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -a varnames=([0]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Filesystem&quot;&lt;/span&gt; [1]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blocks&quot;&lt;/span&gt; [2]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Used&quot;&lt;/span&gt; [3]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Available&quot;&lt;/span&gt; [4]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Use&quot;&lt;/span&gt; [5]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mounted&quot;&lt;/span&gt; [6]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;on&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- filesystem=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/dev/dm-0&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- blocks=&lt;span class=&quot;hljs-string&quot;&gt;&quot;999320&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- used=&lt;span class=&quot;hljs-string&quot;&gt;&quot;529020&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- available=&lt;span class=&quot;hljs-string&quot;&gt;&quot;401488&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- use=&lt;span class=&quot;hljs-string&quot;&gt;&quot;57%&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- mounted=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- on=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or even:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;{ &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; _ ; &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; filesystem dsk[{6,2,9}] prct mountpoint ; } &amp;lt; &amp;lt;(&lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k /)\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -p mountpoint dsk\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- mountpoint=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -a dsk=([2]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;529020&quot;&lt;/span&gt; [6]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;999320&quot;&lt;/span&gt; [9]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;401488&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Note &lt;code&gt;Used&lt;/code&gt; and &lt;code&gt;Blocks&lt;/code&gt; is switched there: &lt;code&gt;read ... dsk[6] dsk[2] dsk[9] ...&lt;/code&gt;)&lt;/p&gt;\n&lt;p&gt;... will work with &lt;em&gt;associative arrays&lt;/em&gt; too: &lt;code&gt;read _ disk[total] disk[used] ...&lt;/code&gt;&lt;/p&gt;\n&lt;h2&gt;Dedicated &lt;em&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/em&gt; using &lt;em&gt;unnamed fifo&lt;/em&gt;:&lt;/h2&gt;\n&lt;p&gt;There is an elegent way! In this sample, I will read &lt;code&gt;/etc/passwd&lt;/code&gt; file:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;users&lt;/span&gt;=()\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; IFS=: &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$list&lt;/span&gt; user pass uid gid name home bin ;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    ((uid&amp;gt;=500)) &amp;amp;&amp;amp;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; -v &lt;span class=&quot;hljs-built_in&quot;&gt;users&lt;/span&gt;[uid] &lt;span class=&quot;hljs-string&quot;&gt;&quot;%11d %7d %-20s %s\\n&quot;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$uid&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$gid&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$home&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt; {list}&amp;lt;/etc/passwd\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using this way (&lt;code&gt;... read -u $list; ... {list}&amp;lt;inputfile&lt;/code&gt;) leave &lt;em&gt;&lt;code&gt;STDIN&lt;/code&gt;&lt;/em&gt; free for other purposes, like user interaction.&lt;/p&gt;\n&lt;p&gt;Then&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${users[@]}&lt;/span&gt;&quot;&lt;/span&gt;\n       1000    1000 user         /home/user\n...\n      65534   65534 nobody       /nonexistent\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${!users[@]}&lt;/span&gt;\n1000 ... 65534\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${users[1000]}&lt;/span&gt;&quot;&lt;/span&gt;\n      1000    1000 user       /home/user\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This could be used with static files or even &lt;code&gt;/dev/tcp/xx.xx.xx.xx/yyy&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; for ip address or hostname and &lt;code&gt;y&lt;/code&gt; for port number or with the output of a command:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$list&lt;/span&gt; -a &lt;span class=&quot;hljs-built_in&quot;&gt;head&lt;/span&gt;          &lt;span class=&quot;hljs-comment&quot;&gt;# read header in array `head`&lt;/span&gt;\n    varnames=(&lt;span class=&quot;hljs-variable&quot;&gt;${head[@]//[K1% -]}&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# drop illegal chars for variable names&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$list&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${varnames[@],,}&lt;/span&gt; ;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n        ((pct=available*100/(available+used),pct&amp;lt;10)) &amp;amp;&amp;amp;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;WARN: FS: %-20s on %-14s %3d &amp;lt;10 (Total: %11u, Use: %7s)\\n&quot;&lt;/span&gt; \\\n                &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${filesystem#*/mapper/}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$mounted&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$pct&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$blocks&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$use&lt;/span&gt;&quot;&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;\n } {list}&amp;lt; &amp;lt;(LANG=C &lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And of course with &lt;em&gt;inline documents&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; IFS=\\; &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$list&lt;/span&gt; -a myvar ;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${myvar[2]}&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt; {list}&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;eof&quot;&lt;/span&gt;\nfoo;bar;baz\nalice;bob;charlie\n&lt;span class=&quot;hljs-variable&quot;&gt;$cherry&lt;/span&gt;;&lt;span class=&quot;hljs-variable&quot;&gt;$strawberry&lt;/span&gt;;&lt;span class=&quot;hljs-variable&quot;&gt;$memberberries&lt;/span&gt;\neof\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Practical sample parsing CSV files:&lt;/h3&gt;\n&lt;p&gt;In &lt;a href=&quot;https://stackoverflow.com/a/69514496/1765658&quot;&gt;this answer to &lt;code&gt;How to parse a CSV file in Bash?&lt;/code&gt;&lt;/a&gt;, I read a file by using an &lt;em&gt;unnamed fifo&lt;/em&gt;, using &lt;code&gt;exec {FD}&amp;lt;&quot;$file&quot;&lt;/code&gt; syntax.\nAnd &lt;a href=&quot;https://f-hauri.ch/vrac/csvsample.sh.txt&quot; rel=&quot;noreferrer&quot;&gt;here is the same script, but using &lt;code&gt;CSV&lt;/code&gt; as inline document&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;Sample function for populating some variables:&lt;/h3&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; free=0 total=0 used=0 mpnt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;??&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;getDiskStat&lt;/span&gt;&lt;/span&gt;() {\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; _\n        &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; _ total used free _ mpnt\n    } &amp;lt; &amp;lt;(\n        &lt;span class=&quot;hljs-built_in&quot;&gt;df&lt;/span&gt; -k &lt;span class=&quot;hljs-variable&quot;&gt;${1:-/}&lt;/span&gt;\n    )\n}\n\ngetDiskStat &lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$mpnt&lt;/span&gt;: Tot:&lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt;, used: &lt;span class=&quot;hljs-variable&quot;&gt;$used&lt;/span&gt;, free: &lt;span class=&quot;hljs-variable&quot;&gt;$free&lt;/span&gt;.&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Nota: &lt;code&gt;declare&lt;/code&gt; line is not required, just for readability.&lt;/p&gt;\n&lt;h2&gt;About &lt;code&gt;sudo cmd | grep ... | cut ...&lt;/code&gt;&lt;/h2&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;shell=$(&lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; /etc/passwd | grep &lt;span class=&quot;hljs-variable&quot;&gt;$USER&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;cut&lt;/span&gt; -d : -f 7)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$shell&lt;/span&gt;\n/bin/bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Please avoid useless &lt;code&gt;cat&lt;/code&gt;! So this is just one fork less:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;shell=$(grep &lt;span class=&quot;hljs-variable&quot;&gt;$USER&lt;/span&gt; &amp;lt;/etc/passwd | &lt;span class=&quot;hljs-built_in&quot;&gt;cut&lt;/span&gt; -d : -f 7)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All pipes (&lt;code&gt;|&lt;/code&gt;) implies forks. Where another process have to be run, accessing disk, libraries calls and so on.&lt;/p&gt;\n&lt;p&gt;So using &lt;code&gt;sed&lt;/code&gt; for sample, will limit subprocess to only one &lt;em&gt;fork&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;shell=$(sed &amp;lt;/etc/passwd &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/^&lt;span class=&quot;hljs-variable&quot;&gt;$USER&lt;/span&gt;:.*://p;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$shell&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;And with &lt;em&gt;Bashisms&lt;/em&gt;:&lt;/h2&gt;\n&lt;p&gt;But for many actions, mostly on small files, Bash could do the job itself:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; IFS=: &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -a line ; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$USER&lt;/span&gt;&quot;&lt;/span&gt; ] &amp;amp;&amp;amp; shell=&lt;span class=&quot;hljs-variable&quot;&gt;${line[6]}&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt; &amp;lt;/etc/passwd\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$shell&lt;/span&gt;\n/bin/bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; IFS=: &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; loginname encpass uid gid fullname home shell;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$loginname&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$USER&lt;/span&gt;&quot;&lt;/span&gt; ] &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;break&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt; &amp;lt;/etc/passwd\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$shell&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$loginname&lt;/span&gt; ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Going further about &lt;em&gt;variable splitting&lt;/em&gt;...&lt;/h3&gt;\n&lt;p&gt;Have a look at my answer to &lt;a href=&quot;https://stackoverflow.com/a/15988793/1765658&quot;&gt;&lt;em&gt;How do I split a string on a delimiter in Bash?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h2&gt;Alternative: reducing &lt;em&gt;forks&lt;/em&gt; by using &lt;em&gt;backgrounded long-running tasks&lt;/em&gt;&lt;/h2&gt;\n&lt;p&gt;In order to prevent multiple forks like&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;myPi=$(bc -l &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;4*a(1)&apos;&lt;/span&gt;\nmyRay=12\nmyCirc=$(bc -l &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; 2 * &lt;span class=&quot;hljs-variable&quot;&gt;$myPi&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$myRay&lt;/span&gt; &quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;myStarted=$(&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(ps ho lstart 1)&lt;/span&gt;&quot;&lt;/span&gt; +%s)\nmySessStart=$(&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(ps ho lstart $$)&lt;/span&gt;&quot;&lt;/span&gt; +%s)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This work fine, but running many forks is heavy and slow.&lt;/p&gt;\n&lt;p&gt;And commands like &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;bc&lt;/code&gt; could make many operations, &lt;em&gt;line by line&lt;/em&gt;!!&lt;/p&gt;\n&lt;p&gt;See:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;bc -l &amp;lt;&amp;lt;&amp;lt;$&lt;span class=&quot;hljs-string&quot;&gt;&apos;3*4\\n5*6&apos;&lt;/span&gt;\n12\n30\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; -f - +%s &amp;lt; &amp;lt;(ps ho lstart 1 $$)\n1516030449\n1517853288\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So we could use a &lt;em&gt;&lt;strong&gt;long running background process&lt;/strong&gt;&lt;/em&gt; to make many jobs, without having to initiate a new &lt;em&gt;fork&lt;/em&gt; for each request.&lt;/p&gt;\n&lt;p&gt;You could have a look how reducing forks make &lt;a href=&quot;https://stackoverflow.com/a/67498861/1765658&quot;&gt;Mandelbrot bash&lt;/a&gt;, improve from more than eight hours to less than 5 seconds.&lt;/p&gt;\n&lt;p&gt;Under &lt;a href=&quot;/questions/tagged/bash&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;bash&apos;&quot; rel=&quot;tag&quot;&gt;bash&lt;/a&gt;, there is a built-in function: &lt;code&gt;coproc&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;coproc bc -l\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; 4*3 &amp;gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;${COPROC[1]}&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$COPROC&lt;/span&gt; answer\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$answer&lt;/span&gt;\n12\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &amp;gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;${COPROC[1]}&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pi=4*a(1)&apos;&lt;/span&gt;\nray=42.0\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &amp;gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;${COPROC[1]}&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;2*pi*%s\\n&apos;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ray&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$COPROC&lt;/span&gt; answer\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$answer&lt;/span&gt;\n263.89378290154263202896\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &amp;gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;${COPROC[1]}&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;pi*%s^2\\n&apos;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ray&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -u &lt;span class=&quot;hljs-variable&quot;&gt;$COPROC&lt;/span&gt; answer\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$answer&lt;/span&gt;\n5541.76944093239527260816\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As &lt;code&gt;bc&lt;/code&gt; is ready, running in background and I/O are ready too, there is no delay, nothing to load, open, close, before or after operation. Only the operation himself! This become a lot quicker than having to fork to &lt;code&gt;bc&lt;/code&gt; for each operation!&lt;/p&gt;\n&lt;p&gt;Border effect: While &lt;code&gt;bc&lt;/code&gt; stay running, they will hold all registers, so some variables or functions could be defined at &lt;em&gt;initialisation&lt;/em&gt; step, as first write to &lt;code&gt;${COPROC[1]}&lt;/code&gt;, just after starting the task (via &lt;code&gt;coproc&lt;/code&gt;).&lt;/p&gt;\n&lt;h2&gt;Into a function &lt;code&gt;newConnector&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;You may found my &lt;code&gt;newConnector&lt;/code&gt; function on &lt;a href=&quot;https://github.com/F-Hauri/Connector-bash/blob/master/shell_connector.bash&quot; rel=&quot;noreferrer&quot;&gt;GitHub.Com&lt;/a&gt; or on &lt;a href=&quot;https://f-hauri.ch/vrac/shell_connector.sh&quot; rel=&quot;noreferrer&quot;&gt;my own site&lt;/a&gt; (Note on GitHub: there are two files on my site. Function and demo are bundled into one unique file which could be sourced for use or just run for demo.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Sample:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; shell_connector.sh\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt;\n/dev/pts/20\n\nps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n    PID TTY      STAT   TIME COMMAND\n  29019 pts/20   Ss     0:00 bash\n  30745 pts/20   R+     0:00  \\_ ps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n\nnewConnector /usr/bin/bc &lt;span class=&quot;hljs-string&quot;&gt;&quot;-l&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;3*4&apos;&lt;/span&gt; 12\n\nps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n    PID TTY      STAT   TIME COMMAND\n  29019 pts/20   Ss     0:00 bash\n  30944 pts/20   S      0:00  \\_ /usr/bin/bc -l\n  30952 pts/20   R+     0:00  \\_ ps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -p PI\nbash: &lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt;: PI: not found\n\nmyBc &lt;span class=&quot;hljs-string&quot;&gt;&apos;4*a(1)&apos;&lt;/span&gt; PI\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -p PI\n&lt;span class=&quot;hljs-built_in&quot;&gt;declare&lt;/span&gt; -- PI=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.14159265358979323844&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The function &lt;code&gt;myBc&lt;/code&gt; lets you use the background task with simple syntax.&lt;/p&gt;\n&lt;p&gt;Then for date:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;newConnector /bin/date &lt;span class=&quot;hljs-string&quot;&gt;&apos;-f - +%s&apos;&lt;/span&gt; @0 0\nmyDate &lt;span class=&quot;hljs-string&quot;&gt;&apos;2000-01-01&apos;&lt;/span&gt;\n  946681200\nmyDate &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(ps ho lstart 1)&lt;/span&gt;&quot;&lt;/span&gt; boottime\nmyDate now now\n&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; utm idl &amp;lt;/proc/uptime\nmyBc &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&lt;span class=&quot;hljs-variable&quot;&gt;$boottime&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uptime&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;${utm%%.*}&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$uptime&lt;/span&gt;\n  42134906\n  42134906\n\nps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n    PID TTY      STAT   TIME COMMAND\n  29019 pts/20   Ss     0:00 bash\n  30944 pts/20   S      0:00  \\_ /usr/bin/bc -l\n  32615 pts/20   S      0:00  \\_ /bin/date -f - +%s\n   3162 pts/20   R+     0:00  \\_ ps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;From there, if you want to end one of background processes, you just have to close its &lt;em&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exec &lt;span class=&quot;hljs-variable&quot;&gt;$DATEOUT&lt;/span&gt;&amp;gt;&amp;amp;-&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;exec &lt;span class=&quot;hljs-variable&quot;&gt;$DATEIN&lt;/span&gt;&amp;gt;&amp;amp;-&quot;&lt;/span&gt;\nps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n    PID TTY      STAT   TIME COMMAND\n   4936 pts/20   Ss     0:00 bash\n   5256 pts/20   S      0:00  \\_ /usr/bin/bc -l\n   6358 pts/20   R+     0:00  \\_ ps --&lt;span class=&quot;hljs-built_in&quot;&gt;tty&lt;/span&gt; pts/20 fw\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is not needed, because all &lt;em&gt;&lt;code&gt;fd&lt;/code&gt;&lt;/em&gt; close when the main process finishes.&lt;/p&gt;\n    ","\n&lt;p&gt;As they have already indicated to you, you should use `backticks`.&lt;/p&gt;\n&lt;p&gt;The alternative proposed &lt;code&gt;$(command)&lt;/code&gt; works as well, and it also easier to read, but note that it is valid only with Bash or KornShell (and shells derived from those),\nso if your scripts have to be really portable on various Unix systems, you should prefer the old backticks notation.&lt;/p&gt;\n    ","\n&lt;p&gt;I know three ways to do it:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Functions are suitable for such tasks:**&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;func&lt;/span&gt;&lt;/span&gt; (){\n    &lt;span class=&quot;hljs-built_in&quot;&gt;ls&lt;/span&gt; -l\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Invoke it by saying &lt;code&gt;func&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Also another suitable solution could be eval:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ls -l&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The third one is using variables directly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(&lt;span class=&quot;hljs-built_in&quot;&gt;ls&lt;/span&gt; -l)\n\n    OR\n\nvar=`&lt;span class=&quot;hljs-built_in&quot;&gt;ls&lt;/span&gt; -l`\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;You can get the output of the third solution in a good way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And also in a nasty way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just to be different:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;MOREF=$(sudo run &lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt; against &lt;span class=&quot;hljs-variable&quot;&gt;$VAR1&lt;/span&gt; | grep name | &lt;span class=&quot;hljs-built_in&quot;&gt;cut&lt;/span&gt; -c7-)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When setting a variable make sure you have &lt;em&gt;&lt;strong&gt;no spaces&lt;/strong&gt;&lt;/em&gt; before and/or after the &lt;code&gt;=&lt;/code&gt; sign. I literally spent an hour trying to figure this out, trying all kinds of solutions! This is &lt;em&gt;not&lt;/em&gt; cool.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Correct:&lt;/em&gt;&lt;br&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;WTFF=`&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;`\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Example: &lt;span class=&quot;hljs-variable&quot;&gt;$WTFF&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Will Fail&lt;/em&gt; with error &quot;stuff: not found&quot; or similar&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;WTFF= `&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stuff&quot;&lt;/span&gt;`\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Example: &lt;span class=&quot;hljs-variable&quot;&gt;$WTFF&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to do it with multiline/multiple command/s then you can do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;output=$( bash &amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;EOF\n# Multiline/multiple command/s\nEOF&lt;/span&gt;\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;output=$(\n&lt;span class=&quot;hljs-comment&quot;&gt;# Multiline/multiple command/s&lt;/span&gt;\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\noutput=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$( bash &amp;lt;&amp;lt;EOF\necho first\necho second\necho third\nEOF\n)&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;first\nsecond\nthird\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using &lt;a href=&quot;http://www.gnu.org/software/bash/manual/html_node/Redirections.html#Here-Documents&quot; rel=&quot;nofollow noreferrer&quot;&gt;heredoc&lt;/a&gt;, you can simplify things pretty easily by breaking down your long single line code into a multiline one. Another example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;output=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$( ssh -p $port $user@$domain &amp;lt;&amp;lt;EOF\n# Breakdown your long ssh command into multiline here.\nEOF\n)&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to use either&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$(command-here)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;`command-here`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Example&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\n\nVAR1=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;\nVAR2=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;\n\nMOREF=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(sudo run command against &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$VAR1&lt;/span&gt;&quot;&lt;/span&gt; | grep name | cut -c7-)&lt;/span&gt;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$MOREF&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the command that you are trying to execute fails, it would write the output onto the error stream and would then be printed out to the console.&lt;/p&gt;\n\n&lt;p&gt;To avoid it, you must redirect the error stream:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;result=$(&lt;span class=&quot;hljs-built_in&quot;&gt;ls&lt;/span&gt; -l something_that_does_not_exist 2&amp;gt;&amp;amp;1)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is another way and is good to use with some text editors that are unable to correctly highlight every intricate code you create:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -r -d &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; str &amp;lt; &amp;lt;(&lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; somefile.txt)\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${#str}&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use backticks (also known as accent graves) or &lt;code&gt;$()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;OUTPUT=$(x+2);\nOUTPUT=`x+2`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both have the same effect. But OUTPUT=$(x+2) is more readable and the latest one.&lt;/p&gt;\n    ","\n&lt;p&gt;Here are two more ways: &lt;/p&gt;\n\n&lt;p&gt;Please keep in mind that space is very important in Bash. So, if you want your command to run, use as is without introducing any more spaces.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The following assigns &lt;code&gt;harshil&lt;/code&gt; to &lt;code&gt;L&lt;/code&gt; and then prints it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;L=$&lt;span class=&quot;hljs-string&quot;&gt;&quot;harshil&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$L&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The following assigns the output of the command &lt;code&gt;tr&lt;/code&gt; to L2. &lt;code&gt;tr&lt;/code&gt; is being operated on another variable, L1.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;L2=$(&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$L1&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;tr&lt;/span&gt; [:upper:] [:lower:])\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Some may find this useful. \nInteger values in variable substitution, where the trick is using &lt;code&gt;$(())&lt;/code&gt; double brackets:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;N=3\nM=3\nCOUNT=&lt;span class=&quot;hljs-variable&quot;&gt;$N&lt;/span&gt;-1\nARR[0]=3\nARR[1]=2\nARR[2]=4\nARR[3]=1\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (( COUNT &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;${#ARR[@]}&lt;/span&gt; ))\n&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n  ARR[&lt;span class=&quot;hljs-variable&quot;&gt;$COUNT&lt;/span&gt;]=$((ARR[COUNT]*M))\n  (( COUNT=&lt;span class=&quot;hljs-variable&quot;&gt;$COUNT&lt;/span&gt;+&lt;span class=&quot;hljs-variable&quot;&gt;$N&lt;/span&gt; ))\n&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"213":["\n&lt;p&gt;You need to use reflection to get the method to start with, then &quot;construct&quot; it by supplying type arguments with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.makegenericmethod.aspx&quot; rel=&quot;noreferrer&quot;&gt;MakeGenericMethod&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Sample).GetMethod(&lt;span class=&quot;hljs-keyword&quot;&gt;nameof&lt;/span&gt;(Sample.GenericMethod));\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For a static method, pass &lt;code&gt;null&lt;/code&gt; as the first argument to &lt;code&gt;Invoke&lt;/code&gt;. That&apos;s nothing to do with generic methods - it&apos;s just normal reflection.&lt;/p&gt;\n\n&lt;p&gt;As noted, a lot of this is simpler as of C# 4 using &lt;code&gt;dynamic&lt;/code&gt; - if you can use type inference, of course. It doesn&apos;t help in cases where type inference isn&apos;t available, such as the exact example in the question.&lt;/p&gt;\n    ","\n&lt;p&gt;Just an addition to the original answer. While this will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Sample).GetMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GenericMethod&quot;&lt;/span&gt;);\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is also a little dangerous in that you lose compile-time check for &lt;code&gt;GenericMethod&lt;/code&gt;. If you later do a refactoring and rename &lt;code&gt;GenericMethod&lt;/code&gt;, this code won&apos;t notice and will fail at run time. Also, if there is any post-processing of the assembly (for example obfuscating or removing unused methods/classes) this code might break too.&lt;/p&gt;\n\n&lt;p&gt;So, if you know the method you are linking to at compile time, and this isn&apos;t called millions of times so overhead doesn&apos;t matter, I would change this code to be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Action&amp;lt;&amp;gt; GenMethod = GenericMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//change int by any base type &lt;/span&gt;\n                                          &lt;span class=&quot;hljs-comment&quot;&gt;//accepted by GenericMethod&lt;/span&gt;\nMethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.GetType().GetMethod(GenMethod.Method.Name);\nMethodInfo generic = method.MakeGenericMethod(myType);\ngeneric.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While not very pretty, you have a compile time reference to &lt;code&gt;GenericMethod&lt;/code&gt; here, and if you refactor, delete or do anything with &lt;code&gt;GenericMethod&lt;/code&gt;, this code will keep working, or at least break at compile time (if for example you remove &lt;code&gt;GenericMethod&lt;/code&gt;). &lt;/p&gt;\n\n&lt;p&gt;Other way to do the same would be to create a new wrapper class, and create it through &lt;code&gt;Activator&lt;/code&gt;. I don&apos;t know if there is a better way.&lt;/p&gt;\n    ","\n&lt;p&gt;Calling a generic method with a type parameter known only at runtime can be greatly simplified by using a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264741.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dynamic&lt;/code&gt;&lt;/a&gt; type instead of the reflection API.&lt;/p&gt;\n&lt;p&gt;To use this technique the type must be known from the actual object (not just an instance of the &lt;code&gt;Type&lt;/code&gt; class). Otherwise, you have to create an object of that type or use the standard reflection API &lt;a href=&quot;https://stackoverflow.com/a/232621/350384&quot;&gt;solution&lt;/a&gt;. You can create an object by using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/wccyzw83%28v=vs.110%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;Activator.CreateInstance&lt;/a&gt; method.&lt;/p&gt;\n&lt;p&gt;If you want to call a generic method, that in &quot;normal&quot; usage would have had its type inferred, then it simply comes to casting the object of unknown type to &lt;code&gt;dynamic&lt;/code&gt;. Here&apos;s an example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Alpha&lt;/span&gt; { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Beta&lt;/span&gt; { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Service&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Process&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T item&lt;/span&gt;)&lt;/span&gt;\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.GetType(): &quot;&lt;/span&gt; + item.GetType()\n                          + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\ttypeof(T): &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T));\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Program&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Alpha();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Beta();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; service = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Service();\n        service.Process(a); &lt;span class=&quot;hljs-comment&quot;&gt;// Same as &quot;service.Process&amp;lt;Alpha&amp;gt;(a)&quot;&lt;/span&gt;\n        service.Process(b); &lt;span class=&quot;hljs-comment&quot;&gt;// Same as &quot;service.Process&amp;lt;Beta&amp;gt;(b)&quot;&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objects = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { a, b };\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; objects)\n        {\n            service.Process(o); &lt;span class=&quot;hljs-comment&quot;&gt;// Same as &quot;service.Process&amp;lt;object&amp;gt;(o)&quot;&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; objects)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt; dynObj = o;\n            service.Process(dynObj); &lt;span class=&quot;hljs-comment&quot;&gt;// Or write &quot;service.Process((dynamic)o)&quot;&lt;/span&gt;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And here&apos;s the output of this program:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;item.GetType(): &lt;span class=&quot;hljs-function&quot;&gt;Alpha    &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;): Alpha\nitem.&lt;span class=&quot;hljs-title&quot;&gt;GetType&lt;/span&gt;(): Beta     &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;): Beta\nitem.&lt;span class=&quot;hljs-title&quot;&gt;GetType&lt;/span&gt;(): Alpha    &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;): System.Object\nitem.&lt;span class=&quot;hljs-title&quot;&gt;GetType&lt;/span&gt;(): Beta     &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;): System.Object\nitem.&lt;span class=&quot;hljs-title&quot;&gt;GetType&lt;/span&gt;(): Alpha    &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;): Alpha\nitem.&lt;span class=&quot;hljs-title&quot;&gt;GetType&lt;/span&gt;(): Beta     &lt;span class=&quot;hljs-title&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T&lt;/span&gt;): Beta\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;Process&lt;/code&gt; is a generic instance method that writes the real type of the passed argument (by using the &lt;code&gt;GetType()&lt;/code&gt; method) and the type of the generic parameter (by using &lt;code&gt;typeof&lt;/code&gt; operator).&lt;/p&gt;\n&lt;p&gt;By casting the object argument to &lt;code&gt;dynamic&lt;/code&gt; type we deferred providing the type parameter until runtime. When the &lt;code&gt;Process&lt;/code&gt; method is called with the &lt;code&gt;dynamic&lt;/code&gt; argument then the compiler doesn&apos;t care about the type of this argument. The compiler generates code that at runtime checks the real types of passed arguments (by using reflection) and choose the best method to call. Here there is only this one generic method, so it&apos;s invoked with a proper type parameter.&lt;/p&gt;\n&lt;p&gt;In this example, the output is the same as if you wrote:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; objects)\n{\n    MethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Service).GetMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Process&quot;&lt;/span&gt;);\n    MethodInfo generic = method.MakeGenericMethod(o.GetType());\n    generic.Invoke(service, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { o });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The version with a dynamic type is definitely shorter and easier to write. You also shouldn&apos;t worry about performance of calling this function multiple times. The next call with arguments of the same type should be faster thanks to the &lt;a href=&quot;https://web.archive.org/web/20140422080408/http://blogs.msdn.com/b/samng/archive/2008/10/29/dynamic-in-c.aspx&quot; rel=&quot;noreferrer&quot;&gt;caching&lt;/a&gt; mechanism in DLR. Of course, you can write code that cache invoked delegates, but by using the &lt;code&gt;dynamic&lt;/code&gt; type you get this behaviour for free.&lt;/p&gt;\n&lt;p&gt;If the generic method you want to call don&apos;t have an argument of a parametrized type (so its type parameter can&apos;t be inferred) then you can wrap the invocation of the generic method in a helper method like in the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Program&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; obj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Alpha();\n\n        Helper((&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;)obj);\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Helper&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T obj&lt;/span&gt;)&lt;/span&gt;\n    {\n        GenericMethod&amp;lt;T&amp;gt;();\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenericMethod&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;()&lt;/span&gt;\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GenericMethod&amp;lt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Increased type safety&lt;/h1&gt;\n&lt;p&gt;What is really great about using &lt;code&gt;dynamic&lt;/code&gt; object as a replacement for using reflection API is that you only lose compile time checking of this particular type that you don&apos;t know until runtime. Other arguments and the name of the method are staticly analysed by the compiler as usual. If you remove or add more arguments, change their types or rename method name then you&apos;ll get a compile-time error. This won&apos;t happen if you provide the method name as a string in &lt;code&gt;Type.GetMethod&lt;/code&gt; and arguments as the objects array in &lt;code&gt;MethodInfo.Invoke&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Below is a simple example that illustrates how some errors can be caught at compile time (commented code) and other at runtime. It also shows how the DLR tries to resolve which method to call.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IItem&lt;/span&gt; { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FooItem&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;IItem&lt;/span&gt; { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BarItem&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;IItem&lt;/span&gt; { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Alpha&lt;/span&gt; { }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Program&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objects = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FooItem(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BarItem(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Alpha() };\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; objects.Length; i++)\n        {\n            ProcessItem((&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;)objects[i], &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; + i, i);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//ProcesItm((dynamic)objects[i], &quot;test&quot; + i, i);&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//compiler error: The name &apos;ProcesItm&apos; does not&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//exist in the current context&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//ProcessItem((dynamic)objects[i], &quot;test&quot; + i);&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//error: No overload for method &apos;ProcessItem&apos; takes 2 arguments&lt;/span&gt;\n        }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ProcessItem&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T item, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; text, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; T : IItem&lt;/span&gt;\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generic ProcessItem&amp;lt;{0}&amp;gt;, text {1}, number:{2}&quot;&lt;/span&gt;,\n                          &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T), text, number);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;OK&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ProcessItem&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;BarItem item, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; text, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; number&lt;/span&gt;)&lt;/span&gt;\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ProcessItem with Bar, &quot;&lt;/span&gt; + text + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt; + number);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here we again execute some method by casting the argument to the &lt;code&gt;dynamic&lt;/code&gt; type. Only verification of first argument&apos;s type is postponed to runtime. You will get a compiler error if the name of the method you&apos;re calling doesn&apos;t exist or if other arguments are invalid (wrong number of arguments or wrong types).&lt;/p&gt;\n&lt;p&gt;When you pass the &lt;code&gt;dynamic&lt;/code&gt; argument to a method then this call is &lt;a href=&quot;https://ericlippert.com/2012/02/06/what-is-late-binding/&quot; rel=&quot;noreferrer&quot;&gt;lately bound&lt;/a&gt;. Method overload resolution happens at runtime and tries to choose the best overload. So if you invoke the &lt;code&gt;ProcessItem&lt;/code&gt; method with an object of &lt;code&gt;BarItem&lt;/code&gt; type then you&apos;ll actually call the non-generic method, because it is a better match for this type. However, you&apos;ll get a runtime error when you pass an argument of the &lt;code&gt;Alpha&lt;/code&gt; type because there&apos;s no method that can handle this object (a generic method has the constraint &lt;code&gt;where T : IItem&lt;/code&gt; and &lt;code&gt;Alpha&lt;/code&gt; class doesn&apos;t implement this interface). But that&apos;s the whole point. The compiler doesn&apos;t have information that this call is valid. You as a programmer know this, and you should make sure that this code runs without errors.&lt;/p&gt;\n&lt;h2&gt;Return type gotcha&lt;/h2&gt;\n&lt;p&gt;When you&apos;re calling a non-void method with a parameter of dynamic type, its return type will probably &lt;a href=&quot;https://ericlippert.com/2012/10/22/a-method-group-of-one/&quot; rel=&quot;noreferrer&quot;&gt;be &lt;code&gt;dynamic&lt;/code&gt; too&lt;/a&gt;. So if you&apos;d change previous example to this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = ProcessItem((&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;)testObjects[i], &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; + i, i);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;then the type of the result object would be &lt;code&gt;dynamic&lt;/code&gt;. This is because the compiler don&apos;t always know which method will be called. If you know the return type of the function call then you should &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot; rel=&quot;noreferrer&quot;&gt;implicitly convert&lt;/a&gt; it to the required type so the rest of the code is statically typed:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; result = ProcessItem((&lt;span class=&quot;hljs-built_in&quot;&gt;dynamic&lt;/span&gt;)testObjects[i], &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; + i, i);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;ll get a runtime error if the type doesn&apos;t match.&lt;/p&gt;\n&lt;p&gt;Actually, if you try to get the result value in the previous example then you&apos;ll get a runtime error in the second loop iteration. This is because you tried to save the return value of a void function.&lt;/p&gt;\n    ","\n&lt;p&gt;Adding on to &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/5134251#5134251&quot;&gt;Adrian Gallero&apos;s answer&lt;/a&gt;:&lt;/p&gt;\n&lt;p&gt;Calling a generic method from type info involves three steps.&lt;/p&gt;\n&lt;p&gt;##TLDR: Calling a known generic method with a type object can be accomplished by:##&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;((Action)GenericMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n    .Method\n    .GetGenericMethodDefinition()\n    .MakeGenericMethod(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;))\n    .Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where &lt;code&gt;GenericMethod&amp;lt;object&amp;gt;&lt;/code&gt; is the method name to call and any type that satisfies the generic constraints.&lt;/p&gt;\n&lt;p&gt;(Action) matches the signature of the method to be called i.e. (&lt;code&gt;Func&amp;lt;string,string,int&amp;gt;&lt;/code&gt; or &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt;)&lt;/p&gt;\n&lt;p&gt;##Step 1 is getting the MethodInfo for the generic method definition##&lt;/p&gt;\n&lt;p&gt;###Method 1: Use GetMethod() or GetMethods() with appropriate types or binding flags.###&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Sample).GetMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GenericMethod&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;###Method 2: Create a delegate, get the MethodInfo object and then call GetGenericMethodDefinition&lt;/p&gt;\n&lt;p&gt;From inside the class that contains the methods:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = ((Action)GenericMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n    .Method\n    .GetGenericMethodDefinition();\n\nMethodInfo method = ((Action)StaticMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n    .Method\n    .GetGenericMethodDefinition();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;From outside of the class that contains the methods:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = ((Action)(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Sample())\n    .GenericMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n    .Method\n    .GetGenericMethodDefinition();\n\nMethodInfo method = ((Action)Sample.StaticMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;)\n    .Method\n    .GetGenericMethodDefinition();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In C#, the name of a method, i.e. &quot;ToString&quot; or &quot;GenericMethod&quot; actually refers to a group of methods that may contain one or more methods.  Until you provide the types of the method parameters, it is not known which\nmethod you are referring to.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;((Action)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt; refers to the delegate for a specific method.  &lt;code&gt;((Func&amp;lt;string, int&amp;gt;)GenericMethod&amp;lt;object&amp;gt;)&lt;/code&gt;\nrefers to a different overload of GenericMethod&lt;/p&gt;\n&lt;p&gt;###Method 3: Create a lambda expression containing a method call expression, get the MethodInfo object and then GetGenericMethodDefinition&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = ((MethodCallExpression)((Expression&amp;lt;Action&amp;lt;Sample&amp;gt;&amp;gt;)(\n    (Sample v) =&amp;gt; v.GenericMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;()\n    )).Body).Method.GetGenericMethodDefinition();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This breaks down to&lt;/p&gt;\n&lt;p&gt;Create a lambda expression where the body is a call to your desired method.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Expression&amp;lt;Action&amp;lt;Sample&amp;gt;&amp;gt; expr = (Sample v) =&amp;gt; v.GenericMethod&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Extract the body and cast to MethodCallExpression&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodCallExpression methodCallExpr = (MethodCallExpression)expr.Body;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get the generic method definition from the method&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo methodA = methodCallExpr.Method.GetGenericMethodDefinition();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;##Step 2 is calling MakeGenericMethod to create a generic method with the appropriate type(s).##&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo generic = method.MakeGenericMethod(myType);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;##Step 3 is invoking the method with the appropriate arguments.##&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;generic.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With C# 4.0, reflection isn&apos;t necessary as the DLR can call it using runtime types. Since using the DLR library is kind of a pain dynamically (instead of the C# compiler generating code for you), the open source framework &lt;a href=&quot;https://github.com/ekonbenefits/dynamitey&quot; rel=&quot;noreferrer&quot;&gt;Dynamitey&lt;/a&gt; (.net standard 1.5) gives you easy cached run-time access to the same calls the compiler would generate for you.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = InvokeMemberName.Create;\nDynamic.InvokeMemberAction(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, name(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GenericMethod&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[]{myType}));\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; staticContext = InvokeContext.CreateStatic;\nDynamic.InvokeMemberAction(staticContext(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Sample)), name(&lt;span class=&quot;hljs-string&quot;&gt;&quot;StaticMethod&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[]{myType}));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Nobody provided the &quot;&lt;em&gt;classic Reflection&lt;/em&gt;&quot; solution, so here is a complete code example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DictionaryRuntime&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicDictionaryFactory&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Factory to create dynamically a generic Dictionary.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IDictionary &lt;span class=&quot;hljs-title&quot;&gt;CreateDynamicGenericInstance&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Type keyType, Type valueType&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Creating the Dictionary.&lt;/span&gt;\n            Type typeDict = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Dictionary&amp;lt;,&amp;gt;);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Creating KeyValue Type for Dictionary.&lt;/span&gt;\n            Type[] typeArgs = { keyType, valueType };\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Passing the Type and create Dictionary Type.&lt;/span&gt;\n            Type genericType = typeDict.MakeGenericType(typeArgs);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//Creating Instance for Dictionary&amp;lt;K,T&amp;gt;.&lt;/span&gt;\n            IDictionary d = Activator.CreateInstance(genericType) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IDictionary;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d;\n\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above &lt;code&gt;DynamicDictionaryFactory&lt;/code&gt; class has a method &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;CreateDynamicGenericInstance(Type keyType, Type valueType)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;and it creates and returns an IDictionary instance, the types of whose keys and values are exactly the specified on the call &lt;code&gt;keyType&lt;/code&gt; and &lt;code&gt;valueType&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here is a complete example&lt;/strong&gt; how to call this method to instantiate and use a &lt;code&gt;Dictionary&amp;lt;String, int&amp;gt;&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DynamicDictionary&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Test&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factory = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DictionaryRuntime.DynamicDictionaryFactory();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dict = factory.CreateDynamicGenericInstance(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(String), &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;));\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; typedDict = dict &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Dictionary&amp;lt;String, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (typedDict != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            {\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Dictionary&amp;lt;String, int&amp;gt;&quot;&lt;/span&gt;);\n\n                typedDict.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                typedDict.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n                typedDict.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; kvp &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; typedDict)\n                {\n                    Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;&quot;&lt;/span&gt; + kvp.Key + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;: &quot;&lt;/span&gt; + kvp.Value);\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;null&quot;&lt;/span&gt;);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When the above console application is executed, we get the correct, expected result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Dictionary&amp;lt;String, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is my 2 cents based on &lt;a href=&quot;https://stackoverflow.com/questions/232535/how-do-i-use-reflection-to-call-a-generic-method/27870198#27870198&quot;&gt;Grax&apos;s answer&lt;/a&gt;, but with two parameters required for a generic method.&lt;/p&gt;\n\n&lt;p&gt;Assume your method is defined as follows in an Helpers class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Helpers&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; U &lt;span class=&quot;hljs-title&quot;&gt;ConvertCsvDataToCollection&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;U&lt;/span&gt;, &lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; csvData&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; U : ObservableCollection&amp;lt;T&amp;gt;&lt;/span&gt;\n    {\n      &lt;span class=&quot;hljs-comment&quot;&gt;//transform code here&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In my case, U type is always an observable collection storing object of type T.&lt;/p&gt;\n\n&lt;p&gt;As I have my types predefined, I first create the &quot;dummy&quot; objects that represent the observable collection (U) and the object stored in it (T) and that will be used below to get their type when calling the Make&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; myCollection = Activator.CreateInstance(collectionType);\n&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; myoObject = Activator.CreateInstance(objectType);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then call the GetMethod to find your Generic function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Helpers).\nGetMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ConvertCsvDataToCollection&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So far, the above call is pretty much identical as to what was explained above but with a small difference when you need have to pass multiple parameters to it.&lt;/p&gt;\n\n&lt;p&gt;You need to pass an Type[] array to the MakeGenericMethod function that contains the &quot;dummy&quot; objects&apos; types that were create above:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;MethodInfo generic = method.MakeGenericMethod(\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Type[] {\n   myCollection.GetType(),\n   myObject.GetType()\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once that&apos;s done, you need to call the Invoke method as mentioned above.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;generic.Invoke(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { csvData });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you&apos;re done. Works a charm!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As @Bevan highlighted, I do not need to create an array when calling the MakeGenericMethod function as it takes in params and I do not need to create an object in order to get the types as I can just pass the types directly to this function. In my case, since I have the types predefined in another class, I simply changed my code to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; myCollection = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\nMethodInfo method = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(Helpers).\nGetMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ConvertCsvDataToCollection&quot;&lt;/span&gt;);\n\nMethodInfo generic = method.MakeGenericMethod(\n   myClassInfo.CollectionType,\n   myClassInfo.ObjectType\n);\n\nmyCollection = generic.Invoke(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { csvData });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;myClassInfo contains 2 properties of type &lt;code&gt;Type&lt;/code&gt; which I set at run time based on an enum value passed to the constructor and will provide me with the relevant types which I then use in the MakeGenericMethod.&lt;/p&gt;\n\n&lt;p&gt;Thanks again for highlighting this @Bevan.&lt;/p&gt;\n    ","\n&lt;p&gt;Inspired by &lt;a href=&quot;https://stackoverflow.com/a/3958029/1016343&quot;&gt;Enigmativity&apos;s answer&lt;/a&gt; - let&apos;s assume you have two (or more) classes, like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bar&lt;/span&gt; { }\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Square&lt;/span&gt; { }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and you want to call the method &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; with &lt;code&gt;Bar&lt;/code&gt; and &lt;code&gt;Square&lt;/code&gt;, which is declared as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myClass&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Foo&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;T item&lt;/span&gt;)&lt;/span&gt;\n    {\n        Console.WriteLine(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T).Name);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can implement an &lt;strong&gt;Extension method&lt;/strong&gt; like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Extension&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;InvokeFoo&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; T t&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooMethod = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(myClass).GetMethod(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Foo&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tType = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(T);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fooTMethod = fooMethod.MakeGenericMethod(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[] { tType });\n        fooTMethod.Invoke(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; myClass(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;[] { t });\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this, you can simply invoke &lt;code&gt;Foo&lt;/code&gt; like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objSquare = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Square();\nobjSquare.InvokeFoo();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objBar = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Bar();\nobjBar.InvokeFoo();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which works for every class. In this case, it will output:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Square &lt;br&gt;\n  Bar&lt;/p&gt;\n&lt;/blockquote&gt;\n    "],"214":["\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(num)    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This construct is called a &lt;strong&gt;Member Initializer List&lt;/strong&gt; in C++.&lt;/p&gt;\n&lt;p&gt;Simply said, it &lt;strong&gt;initializes&lt;/strong&gt; your member &lt;code&gt;bar&lt;/code&gt; to a value &lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;What is the difference between Initializing and Assignment inside a constructor?&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Member Initialization:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(num) {};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Member Assignment:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num)\n{\n   bar = num;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is a significant difference between Initializing a member using Member initializer list and assigning it an value inside the constructor body.&lt;/p&gt;\n&lt;p&gt;When you &lt;em&gt;&lt;strong&gt;initialize&lt;/strong&gt;&lt;/em&gt; fields via Member initializer list the constructors will be called once and the object will be constructed and initialized in one operation.&lt;/p&gt;\n&lt;p&gt;If you use &lt;em&gt;&lt;strong&gt;assignment&lt;/strong&gt;&lt;/em&gt; then the fields will be first initialized with default constructors and then reassigned (via assignment operator) with actual values.&lt;/p&gt;\n&lt;p&gt;As you see there is an additional overhead of creation &amp;amp; assignment in the latter, which might be considerable for user defined classes.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Cost of Member Initialization = Object Construction \nCost of Member Assignment = Object Construction + Assignment\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The latter is actually equivalent to:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num) : &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;() {bar = num;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While the former is equivalent to just:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(num){}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For an inbuilt (your code example) or POD class members there is no practical overhead.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;When do you HAVE TO use Member Initializer list?&lt;/h2&gt;\n&lt;p&gt;You will &lt;strong&gt;have(rather forced) to&lt;/strong&gt; use a Member Initializer list if:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Your class has a reference member&lt;/li&gt;\n&lt;li&gt;Your class has a non static const member or&lt;/li&gt;\n&lt;li&gt;Your class member doesn&apos;t have a default constructor or&lt;/li&gt;\n&lt;li&gt;For initialization of base class members or&lt;/li&gt;\n&lt;li&gt;When constructors parameter name is same as data member(this is not really a MUST)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;A code example:&lt;/h2&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Reference member, has to be Initialized in Member Initializer List&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;i;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Non static const member, must be Initialized in Member Initializer List&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Constructors parameter name b is same as class data member&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Other way is to use this-&amp;gt;b to refer to data member&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c) : &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(a), &lt;span class=&quot;hljs-built_in&quot;&gt;b&lt;/span&gt;(b), &lt;span class=&quot;hljs-built_in&quot;&gt;k&lt;/span&gt;(c) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Without Member Initializer&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this-&amp;gt;b = b;&lt;/span&gt;\n  }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass2&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; MyClass {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; q;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MyClass2&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; m) : &lt;span class=&quot;hljs-built_in&quot;&gt;MyClass&lt;/span&gt;(x, y, z), &lt;span class=&quot;hljs-built_in&quot;&gt;p&lt;/span&gt;(l), &lt;span class=&quot;hljs-built_in&quot;&gt;q&lt;/span&gt;(m) {}\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; z = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;MyClass &lt;span class=&quot;hljs-title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x, y, z)&lt;/span&gt;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; m = &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;MyClass2 &lt;span class=&quot;hljs-title&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(x, y, z, l, m)&lt;/span&gt;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;MyClass2&lt;/code&gt; doesn&apos;t have a default constructor so it has to be initialized through member initializer list.&lt;/li&gt;\n&lt;li&gt;Base class &lt;code&gt;MyClass&lt;/code&gt; does not have a default constructor, So to initialize its member one will need to use Member Initializer List.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Important points to Note while using Member Initializer Lists:&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Class Member variables are always initialized in the order in which they are declared in the class.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;They are &lt;strong&gt;not&lt;/strong&gt; initialized in the order in which they are specified in the Member Initializer List.&lt;br&gt;\nIn short, Member initialization list does not determine the order of initialization.&lt;/p&gt;\n&lt;p&gt;Given the above it is always a good practice to maintain the same order of members for Member initialization as the order in which they are declared in the class definition. This is because compilers do not warn if the two orders are different but a relatively new user might confuse member Initializer list as the order of initialization and write some code dependent on that.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a &lt;em&gt;member initialization list&lt;/em&gt;.  You should find information about it in any &lt;a href=&quot;https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list&quot;&gt;good C++ book&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/ctors#init-lists&quot; rel=&quot;noreferrer&quot;&gt;You should, in most cases, initialize all member objects in the member initialization list&lt;/a&gt; (however, do note the exceptions listed at the end of the FAQ entry).  &lt;/p&gt;\n\n&lt;p&gt;The takeaway point from the FAQ entry is that,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;All other things being equal, your code will run faster if you use initialization lists rather than assignment. &lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;That&apos;s constructor initialisation.  It is the correct way to initialise members in a class constructor, as it prevents the default constructor being invoked.&lt;/p&gt;\n\n&lt;p&gt;Consider these two examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Example 1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(Bar b)\n{\n   bar = b;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Example 2&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(Bar b)\n   : &lt;span class=&quot;hljs-built_in&quot;&gt;bar&lt;/span&gt;(b)\n{\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In example 1:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Bar bar;  &lt;span class=&quot;hljs-comment&quot;&gt;// default constructor&lt;/span&gt;\nbar = b;  &lt;span class=&quot;hljs-comment&quot;&gt;// assignment&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In example 2:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Bar &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(b)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// copy constructor&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s all about efficiency.&lt;/p&gt;\n    ","\n&lt;p&gt;This is called an initialization list.  It is a way of initializing class members.  There are benefits to using this instead of simply assigning new values to the members in the body of the constructor, but if you have class members which are &lt;em&gt;constants&lt;/em&gt; or &lt;em&gt;references&lt;/em&gt; they &lt;em&gt;must&lt;/em&gt; be initialized.&lt;/p&gt;\n    ","\n&lt;p&gt;This is not obscure, it&apos;s the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/initializer_list&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ initialization list syntax&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Basically, in your case, &lt;code&gt;x&lt;/code&gt; will be initialized with &lt;code&gt;_x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;_y&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; with &lt;code&gt;_z&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The other already explained to you that the syntax that you observe is called &quot;constructor initializer list&quot;. This syntax lets you to custom-initialize base subobjects and member subobjects of the class (as opposed to allowing them to default-initialize or to remain uninitialized).&lt;/p&gt;\n\n&lt;p&gt;I just want to note that the syntax that, as you said, &quot;looks like a constructor call&quot;, is not necessarily a constructor call. In C++ language the &lt;code&gt;()&lt;/code&gt; syntax is just one standard form of &lt;em&gt;initialization syntax&lt;/em&gt;. It is interpreted differently for different types. For class types with user-defined constructor it means one thing (it is indeed a constructor call), for class types without user-defined constructor it means another thing (so called &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/value_initialization&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;em&gt;value initialization&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; ) for empty &lt;code&gt;()&lt;/code&gt;) and for non-class types it again means something different (since non-class types have no constructors).&lt;/p&gt;\n\n&lt;p&gt;In your case the data member has type &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;int&lt;/code&gt; is not a class type, so it has no constructor. For type &lt;code&gt;int&lt;/code&gt; this syntax means simply &quot;initialize &lt;code&gt;bar&lt;/code&gt; with the value of &lt;code&gt;num&lt;/code&gt;&quot; and that&apos;s it. It is done just like that, directly, no constructors involved, since, once again, &lt;code&gt;int&lt;/code&gt; is not a class type of therefore it can&apos;t have any constructors.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know how you could miss this one, it&apos;s pretty basic. That&apos;s the syntax for initializing member variables or base class constructors.  It works for plain old data types as well as class objects.&lt;/p&gt;\n    ","\n&lt;p&gt;This is an initialization list. It&apos;ll initialize the members before the constructor body is run.\nConsider&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n   string str;\n   &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(string &amp;amp;p)\n   {\n      str = p;\n   };\n };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;vs &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  string str;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(string &amp;amp;p): &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(p) {};\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the first example, str will be initialized by its no-argument constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before the body of the Foo constructor. Inside the foo constructor, the&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;string&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;=( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; s );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will be called on &apos;str&apos; as you do   str = p;&lt;/p&gt;\n\n&lt;p&gt;Wheras in the second example, str will be initialized directly by\ncalling its constructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; s );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with &apos;p&apos; as an argument.&lt;/p&gt;\n    ","\n&lt;p&gt;You are correct, this is indeed a way to initialize member variables.  I&apos;m not sure that there&apos;s much benefit to this, other than clearly expressing that it&apos;s an initialization.  Having a &quot;bar=num&quot; inside the code could get moved around, deleted, or misinterpreted much more easily.&lt;/p&gt;\n    ","\n&lt;p&gt;there is another &apos;benefit&apos;&lt;/p&gt;\n\n&lt;p&gt;if the member variable type does not support null initialization or if its a reference (which cannot be null initialized) then you have no choice but to supply an initialization list&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s an initialization list for the constructor. Instead of default constructing &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; and then assigning them the values received in the parameters, those members will be initialized with those values right off the bat. This may not seem terribly useful for &lt;code&gt;float&lt;/code&gt;s, but it can be quite a timesaver with custom classes that are expensive to construct.&lt;/p&gt;\n    ","\n&lt;p&gt;Not mentioned yet on this thread: since C++11, the member initializer list can use list-initialization  (aka. &quot;uniform initialization&quot;, &quot;braced initialization&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; num): bar{num} {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which has the same semantics as list-initialization in other contexts.&lt;/p&gt;\n    ","\n&lt;p&gt;Although this is an old discussion, I couldn&apos;t find any mention about &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/constructor&quot; rel=&quot;nofollow noreferrer&quot;&gt;delegating constructor&lt;/a&gt;, which uses the weird &quot;:&quot; symbol in the following way.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; \n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;: \n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y) \n    {}\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y) : &lt;span class=&quot;hljs-built_in&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, y) \n    {}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;What it does is simply delegating &lt;code&gt;Foo(y)&lt;/code&gt; into &lt;code&gt;Foo(&apos;a&apos;, y) &lt;/code&gt;. So that&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Foo &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; foo(&apos;a&apos;, 15)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When defining a delegating constructor, you cannot have any members in initializer list besides targeted constructor.&lt;/p&gt;\n    "],"215":["\n&lt;h2&gt;Python 3&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f, b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(foo, bar):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f, b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;zip&lt;/code&gt; stops when the shorter of &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt; stops.&lt;/p&gt;\n\n&lt;p&gt;In &lt;strong&gt;Python 3&lt;/strong&gt;, &lt;a href=&quot;https://docs.python.org/3/library/functions.html#zip&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;\nreturns an iterator of tuples, like &lt;code&gt;itertools.izip&lt;/code&gt; in Python2.  To get a list\nof tuples, use &lt;code&gt;list(zip(foo, bar))&lt;/code&gt;. And to zip until both iterators are\nexhausted, you would use\n&lt;a href=&quot;https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest&quot; rel=&quot;noreferrer&quot;&gt;itertools.zip_longest&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Python 2&lt;/h2&gt;\n\n&lt;p&gt;In &lt;strong&gt;Python 2&lt;/strong&gt;, &lt;a href=&quot;https://docs.python.org/2/library/functions.html#zip&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;\nreturns a list of tuples. This is fine when &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are not massive. If they are both massive then forming &lt;code&gt;zip(foo,bar)&lt;/code&gt; is an unnecessarily massive\ntemporary variable, and should be replaced by &lt;code&gt;itertools.izip&lt;/code&gt; or\n&lt;code&gt;itertools.izip_longest&lt;/code&gt;, which returns an iterator instead of a list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f,b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.izip(foo,bar):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f,b)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f,b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.izip_longest(foo,bar):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f,b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;izip&lt;/code&gt; stops when either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt; is exhausted.\n&lt;code&gt;izip_longest&lt;/code&gt; stops when both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are exhausted.\nWhen the shorter iterator(s) are exhausted, &lt;code&gt;izip_longest&lt;/code&gt; yields a tuple with &lt;code&gt;None&lt;/code&gt; in the position corresponding to that iterator. You can also set a different &lt;code&gt;fillvalue&lt;/code&gt; besides &lt;code&gt;None&lt;/code&gt; if you wish. See here for the &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.izip_longest&quot; rel=&quot;noreferrer&quot;&gt;full story&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note also that &lt;code&gt;zip&lt;/code&gt; and its &lt;code&gt;zip&lt;/code&gt;-like brethen can accept an arbitrary number of iterables as arguments. For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; num, cheese, color &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;manchego&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;stilton&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;brie&apos;&lt;/span&gt;], \n                              [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{} {} {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(num, color, cheese))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;prints&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; red manchego\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; blue stilton\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; green brie\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You want the &lt;code&gt;zip&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (f,b) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(foo, bar):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;f: &quot;&lt;/span&gt;, f ,&lt;span class=&quot;hljs-string&quot;&gt;&quot;; b: &quot;&lt;/span&gt;, b\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should use &apos;&lt;a href=&quot;https://docs.python.org/3.6/library/functions.html#zip&quot; rel=&quot;noreferrer&quot;&gt;zip&lt;/a&gt;&apos; function. Here is an example how your own zip function can look like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;custom_zip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq1, seq2&lt;/span&gt;):\n    it1 = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(seq1)\n    it2 = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(seq2)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(it1), &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(it2)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Building on the answer by &lt;a href=&quot;https://stackoverflow.com/a/1663826/5722359&quot;&gt;@unutbu&lt;/a&gt;, I have compared the iteration performance of two identical lists when using Python 3.6&apos;s &lt;code&gt;zip()&lt;/code&gt; functions, Python&apos;s &lt;code&gt;enumerate()&lt;/code&gt; function, using a manual counter (see &lt;code&gt;count()&lt;/code&gt; function), using an index-list, and during a special scenario where the elements of one of the two lists (either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt;) may be used to index the other list. Their performances for printing and creating a new list, respectively, were investigated using the &lt;code&gt;timeit()&lt;/code&gt; function where the number of repetitions used was 1000 times. One of the Python scripts that I had created to perform these investigations is given below. The sizes of the &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; lists had ranged from 10 to 1,000,000 elements.&lt;/p&gt;\n&lt;h1&gt;Results:&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;For printing purposes:&lt;/strong&gt; The performances of all the considered approaches were observed to be approximately similar to the &lt;code&gt;zip()&lt;/code&gt; function, after factoring an accuracy tolerance of +/-5%. An exception occurred when the list size was smaller than 100 elements. In such a scenario, the index-list method was slightly slower than the &lt;code&gt;zip()&lt;/code&gt; function while the &lt;code&gt;enumerate()&lt;/code&gt; function was ~9% faster. The other methods yielded similar performance to the &lt;code&gt;zip()&lt;/code&gt; function.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/NoPTu.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/NoPTu.png&quot; alt=&quot;Print loop 1000 reps&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;For creating lists:&lt;/strong&gt; Two types of list creation approaches were explored: using the (a) &lt;code&gt;list.append()&lt;/code&gt; method and (b) &lt;strong&gt;list comprehension&lt;/strong&gt;. After factoring an accuracy tolerance of +/-5%, for both of these approaches, the &lt;code&gt;zip()&lt;/code&gt; function was found to perform faster than the &lt;code&gt;enumerate()&lt;/code&gt; function, than using a list-index, than using a manual counter. The performance gain by the &lt;code&gt;zip()&lt;/code&gt; function in these comparisons can be 5% to 60% faster. Interestingly, using the element of &lt;code&gt;foo&lt;/code&gt; to index &lt;code&gt;bar&lt;/code&gt; can yield equivalent or faster performances (5% to 20%) than the &lt;code&gt;zip()&lt;/code&gt; function.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/p1w5p.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/p1w5p.png&quot; alt=&quot;Creating List - 1000reps&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h1&gt;Making sense of these results:&lt;/h1&gt;\n&lt;p&gt;A programmer has to determine the amount of compute-time per operation that is meaningful or that is of significance.&lt;/p&gt;\n&lt;p&gt;For example, for printing purposes, if this time criterion is 1 second, i.e. 10**0 sec, then looking at the y-axis of the graph that is on the left at 1 sec and projecting it horizontally until it reaches the monomials curves, we see that lists sizes that are more than 144 elements will incur significant compute cost and significance to the programmer. That is, any performance gained by the approaches mentioned in this investigation for smaller list sizes will be insignificant to the programmer. The programmer will conclude that the performance of the &lt;code&gt;zip()&lt;/code&gt; function to iterate print statements is similar to the other approaches.&lt;/p&gt;\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n&lt;p&gt;Notable performance can be gained from using the &lt;code&gt;zip()&lt;/code&gt; function to iterate through two lists in parallel during &lt;code&gt;list&lt;/code&gt; creation. When iterating through two lists in parallel to print out the elements of the two lists, the &lt;code&gt;zip()&lt;/code&gt; function will yield similar performance as the &lt;code&gt;enumerate()&lt;/code&gt; function, as to using a manual counter variable, as to using an index-list, and as to during the special scenario where the elements of one of the two lists (either &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt;) may be used to index the other list.&lt;/p&gt;\n&lt;h1&gt;The Python&amp;nbsp;3.6 script that was used to investigate list creation.&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; plt\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_zip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo, bar &lt;/span&gt;):\n    store = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f, b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(foo, bar):\n        &lt;span class=&quot;hljs-comment&quot;&gt;#print(f, b)&lt;/span&gt;\n        store.append( (f, b) )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_enumerate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo, bar &lt;/span&gt;):\n    store = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n, f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;( foo ):\n        &lt;span class=&quot;hljs-comment&quot;&gt;#print(f, bar[n])&lt;/span&gt;\n        store.append( (f, bar[n]) )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_count&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo, bar &lt;/span&gt;):\n    store = []\n    count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; foo:\n        &lt;span class=&quot;hljs-comment&quot;&gt;#print(f, bar[count])&lt;/span&gt;\n        store.append( (f, bar[count]) )\n        count += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_indices&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo, bar, indices &lt;/span&gt;):\n    store = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices:\n        &lt;span class=&quot;hljs-comment&quot;&gt;#print(foo[i], bar[i])&lt;/span&gt;\n        store.append( (foo[i], bar[i]) )\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_existing_list_indices&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo, bar &lt;/span&gt;):\n    store = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; foo:\n        &lt;span class=&quot;hljs-comment&quot;&gt;#print(f, bar[f])&lt;/span&gt;\n        store.append( (f, bar[f]) )\n\n\nlist_sizes = [ &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt; ]\ntz = []\nte = []\ntc = []\nti = []\ntii= []\n\ntcz = []\ntce = []\ntci = []\ntcii= []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list_sizes:\n    foo = [ i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(a) ]\n    bar = [ i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(a) ]\n    indices = [ i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(a) ]\n    reps = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n\n    tz.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_zip( foo, bar )&apos;&lt;/span&gt;,\n                              &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import test_zip, foo, bar&apos;&lt;/span&gt;,\n                              number=reps\n                              )\n               )\n    te.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_enumerate( foo, bar )&apos;&lt;/span&gt;,\n                              &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import test_enumerate, foo, bar&apos;&lt;/span&gt;,\n                              number=reps\n                              )\n               )\n    tc.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_count( foo, bar )&apos;&lt;/span&gt;,\n                              &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import test_count, foo, bar&apos;&lt;/span&gt;,\n                              number=reps\n                              )\n               )\n    ti.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_indices( foo, bar, indices )&apos;&lt;/span&gt;,\n                              &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import test_indices, foo, bar, indices&apos;&lt;/span&gt;,\n                              number=reps\n                              )\n               )\n    tii.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;test_existing_list_indices( foo, bar )&apos;&lt;/span&gt;,\n                               &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import test_existing_list_indices, foo, bar&apos;&lt;/span&gt;,\n                               number=reps\n                               )\n                )\n\n    tcz.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;[(f, b) for f, b in zip(foo, bar)]&apos;&lt;/span&gt;,\n                               &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import foo, bar&apos;&lt;/span&gt;,\n                               number=reps\n                               )\n                )\n    tce.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;[(f, bar[n]) for n, f in enumerate( foo )]&apos;&lt;/span&gt;,\n                               &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import foo, bar&apos;&lt;/span&gt;,\n                               number=reps\n                               )\n                )\n    tci.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;[(foo[i], bar[i]) for i in indices ]&apos;&lt;/span&gt;,\n                               &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import foo, bar, indices&apos;&lt;/span&gt;,\n                               number=reps\n                               )\n                )\n    tcii.append( timeit.timeit( &lt;span class=&quot;hljs-string&quot;&gt;&apos;[(f, bar[f]) for f in foo ]&apos;&lt;/span&gt;,\n                                &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import foo, bar&apos;&lt;/span&gt;,\n                                number=reps\n                                )\n                 )\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;te  = &lt;span class=&quot;hljs-subst&quot;&gt;{te}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;ti  = &lt;span class=&quot;hljs-subst&quot;&gt;{ti}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tii = &lt;span class=&quot;hljs-subst&quot;&gt;{tii}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tc  = &lt;span class=&quot;hljs-subst&quot;&gt;{tc}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tz  = &lt;span class=&quot;hljs-subst&quot;&gt;{tz}&lt;/span&gt;&apos;&lt;/span&gt; )\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tce  = &lt;span class=&quot;hljs-subst&quot;&gt;{te}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tci  = &lt;span class=&quot;hljs-subst&quot;&gt;{ti}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tcii = &lt;span class=&quot;hljs-subst&quot;&gt;{tii}&lt;/span&gt;&apos;&lt;/span&gt; )\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;f&apos;tcz  = &lt;span class=&quot;hljs-subst&quot;&gt;{tz}&lt;/span&gt;&apos;&lt;/span&gt; )\n\nfig, ax = plt.subplots( &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, te, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;enumerate()&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, ti, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;index-list&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tii, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;element of foo&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tc, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;count()&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tz, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;zip()&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_xscale(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_yscale(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_xlabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;List Size&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_ylabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Time (s)&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].legend()\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;major&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;minor&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\n\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(te)/np.array(tz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;enumerate()&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(ti)/np.array(tz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;index-list&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(tii)/np.array(tz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;element of foo&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(tc)/np.array(tz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;count()&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].set_xscale(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].set_xlabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;List Size&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].set_ylabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Performances ( vs zip() function )&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].legend()\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;major&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;minor&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\n\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tce, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;list comprehension using enumerate()&apos;&lt;/span&gt;,  marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tci, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;list comprehension using index-list()&apos;&lt;/span&gt;,  marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tcii, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;list comprehension using element of foo&apos;&lt;/span&gt;,  marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].plot( list_sizes, tcz, label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;list comprehension using zip()&apos;&lt;/span&gt;,  marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_xscale(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_yscale(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_xlabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;List Size&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].set_ylabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Time (s)&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].legend()\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;major&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;minor&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\n\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(tce)/np.array(tcz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;enumerate()&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(tci)/np.array(tcz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;index-list&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].plot( list_sizes, np.array(tcii)/np.array(tcz), label=&lt;span class=&quot;hljs-string&quot;&gt;&apos;element of foo&apos;&lt;/span&gt;, marker=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; )\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].set_xscale(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].set_xlabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;List Size&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].set_ylabel(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Performances ( vs zip() function )&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].legend()\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;major&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\nax[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].grid( b=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, which=&lt;span class=&quot;hljs-string&quot;&gt;&apos;minor&apos;&lt;/span&gt;, axis=&lt;span class=&quot;hljs-string&quot;&gt;&apos;both&apos;&lt;/span&gt;)\n\nplt.show()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can bundle the nth elements into a tuple or list using comprehension, then pass them out with a generator function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iterate_multi&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*lists&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;,lists))):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(l[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lists)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l1, l2, l3 &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterate_multi([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(l1)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(l2)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(l3))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;We can just use an index to iterate...&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;foo = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\nbar = [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; indx, itm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(foo):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (foo[indx], bar[indx])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s how to do it with a &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;nofollow noreferrer&quot;&gt;list comprehension&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\nb = (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n[&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f:&apos;&lt;/span&gt;, i, &lt;span class=&quot;hljs-string&quot;&gt;&apos;; b&apos;&lt;/span&gt;, j) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(a, b)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It prints:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;f: 1 ; b 4\nf: 2 ; b 5\nf: 3 ; b 6\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"80","randomQuestions":[{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Why does Date.parse give incorrect results?","slug":"why-does-date.parse-give-incorrect-results-1657384642821"},{"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839"},{"title":"The definitive guide to form-based website authentication [closed]","slug":"the-definitive-guide-to-form-based-website-authentication-closed-1657388456475"},{"title":"Should I avoid the use of set(Preferred|Maximum|Minimum)Size methods in Java Swing?","slug":"should-i-avoid-the-use-of-set(preferredormaximumorminimum)size-methods-in-java-swing-1657384628399"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"Object comparison in JavaScript [duplicate]","slug":"object-comparison-in-javascript-duplicate-1657387675463"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API","slug":"no-'access-control-allow-origin'-header-is-present-on-the-requested-resourcewhen-trying-to-get-data-from-a-rest-api-1657387628467"},{"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"How do I use shell variables in an awk script?","slug":"how-do-i-use-shell-variables-in-an-awk-script-1657387754261"},{"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929"},{"title":"What is the difference between a definition and a declaration?","slug":"what-is-the-difference-between-a-definition-and-a-declaration-1657387851618"},{"title":"Ways to deal with #document under iframe","slug":"ways-to-deal-with-document-under-iframe-1657388403345"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"}]},"__N_SSG":true}