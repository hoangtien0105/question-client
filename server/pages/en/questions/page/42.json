{"pageProps":{"data":{"count":610,"rows":[{"id":405,"title":"Is an array name a pointer?","slug":"is-an-array-name-a-pointer-1657387874827","postType":"QUESTION","createdAt":"2022-07-09T17:31:14.000Z","updatedAt":"2022-07-09T17:31:14.000Z","tags":[]},{"id":404,"title":"PHP - Failed to open stream : No such file or directory","slug":"php-failed-to-open-stream-:-no-such-file-or-directory-1657387872896","postType":"QUESTION","createdAt":"2022-07-09T17:31:12.000Z","updatedAt":"2022-07-09T17:31:12.000Z","tags":[{"id":2165,"name":"require","slug":"require","createdAt":"2022-07-09T17:31:12.000Z","updatedAt":"2022-07-09T17:31:12.000Z","Questions_Tags":{"questionId":404,"tagId":2165}},{"id":2166,"name":"fopen","slug":"fopen","createdAt":"2022-07-09T17:31:12.000Z","updatedAt":"2022-07-09T17:31:12.000Z","Questions_Tags":{"questionId":404,"tagId":2166}},{"id":2167,"name":"include-path","slug":"include-path","createdAt":"2022-07-09T17:31:12.000Z","updatedAt":"2022-07-09T17:31:12.000Z","Questions_Tags":{"questionId":404,"tagId":2167}}]},{"id":403,"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901","postType":"QUESTION","createdAt":"2022-07-09T17:31:10.000Z","updatedAt":"2022-07-09T17:31:10.000Z","tags":[]},{"id":402,"title":"How can I read and parse CSV files in C++?","slug":"how-can-i-read-and-parse-csv-files-in-c++-1657387869219","postType":"QUESTION","createdAt":"2022-07-09T17:31:09.000Z","updatedAt":"2022-07-09T17:31:09.000Z","tags":[{"id":2159,"name":"text","slug":"text","createdAt":"2022-07-09T17:31:09.000Z","updatedAt":"2022-07-09T17:31:09.000Z","Questions_Tags":{"questionId":402,"tagId":2159}},{"id":2160,"name":"csv","slug":"csv","createdAt":"2022-07-09T17:31:09.000Z","updatedAt":"2022-07-09T17:31:09.000Z","Questions_Tags":{"questionId":402,"tagId":2160}}]},{"id":401,"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894","postType":"QUESTION","createdAt":"2022-07-09T17:31:05.000Z","updatedAt":"2022-07-09T17:31:05.000Z","tags":[{"id":2156,"name":"readlines","slug":"readlines","createdAt":"2022-07-09T17:31:05.000Z","updatedAt":"2022-07-09T17:31:05.000Z","Questions_Tags":{"questionId":401,"tagId":2156}}]}]},"answers":{"401":["\n&lt;p&gt;This code will read the entire file into memory and remove all whitespace characters (newlines and spaces) from the end of each line:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    lines = file.readlines()\n    lines = [line.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lines]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you&apos;re working with a large file, then you should instead read and process it line-by-line:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; file:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(line.rstrip())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Python 3.8 and up you can use a while loop with the &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions&quot; rel=&quot;noreferrer&quot;&gt;walrus operator&lt;/a&gt; like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (line := file.readline().rstrip()):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(line)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Depending on what you plan to do with your file and how it was encoded, you may also want to manually set the &lt;a href=&quot;https://www.tutorialspoint.com/python/python_files_io.htm&quot; rel=&quot;noreferrer&quot;&gt;access mode&lt;/a&gt; and character encoding:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, encoding=&lt;span class=&quot;hljs-string&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (line := file.readline().rstrip()):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(line)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;See &lt;a href=&quot;http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files&quot; rel=&quot;noreferrer&quot;&gt;Input and Ouput&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lines = f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or with stripping the newline character:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lines = [line.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is more explicit than necessary, but does what you want.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file_in:\n    lines = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; file_in:\n        lines.append(line)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will yield an &quot;array&quot; of lines from the file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;open&lt;/code&gt; returns a file which can be iterated over. When you iterate over a file, you get the lines from that file. &lt;code&gt;tuple&lt;/code&gt; can take an iterator and instantiate a tuple instance for you from the iterator that you give it. &lt;code&gt;lines&lt;/code&gt; is a tuple created from the lines of the file.&lt;/p&gt;\n    ","\n&lt;p&gt;According to Python&apos;s &lt;a href=&quot;https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects&quot; rel=&quot;nofollow noreferrer&quot;&gt;Methods of File Objects&lt;/a&gt;, the simplest way to convert a text file into a &lt;code&gt;list&lt;/code&gt; is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    my_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(f)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# my_list = [x.rstrip() for x in f] # remove line breaks&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://trinket.io/python3/55c02e4c91&quot; rel=&quot;nofollow noreferrer&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;If you just need to iterate over the text file lines, you can use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n       ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Old answer:&lt;/p&gt;\n&lt;p&gt;Using &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;readlines()&lt;/code&gt; :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lines = f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you don&apos;t care about closing the file, this one-liner will work:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;).readlines()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;em&gt;traditional&lt;/em&gt; way:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;f = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# Open file on read mode&lt;/span&gt;\nlines = f.read().splitlines() &lt;span class=&quot;hljs-comment&quot;&gt;# List with stripped line-breaks&lt;/span&gt;\nf.close() &lt;span class=&quot;hljs-comment&quot;&gt;# Close file&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want the &lt;code&gt;\\n&lt;/code&gt; included:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fname) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    content = f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you do not want &lt;code&gt;\\n&lt;/code&gt; included:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fname) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    content = f.read().splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could simply do the following, as has been suggested:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/your/path/file&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    my_lines = f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this approach has 2 downsides:&lt;/p&gt;\n\n&lt;p&gt;1) You store all the lines in memory. In the general case, this is a very bad idea. The file could be very large, and you could run out of memory. Even if it&apos;s not large, it is simply a waste of memory.&lt;/p&gt;\n\n&lt;p&gt;2) This does not allow processing of each line as you read them. So if you process your lines after this, it is not efficient (requires two passes rather than one).&lt;/p&gt;\n\n&lt;p&gt;A better approach for the general case would be the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/your/path/file&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        process(line)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where you define your process function any way you want. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;line&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;save the world&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; line.lower():\n         superman.save_the_world()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(The implementation of the &lt;code&gt;Superman&lt;/code&gt; class is left as an exercise for you).&lt;/p&gt;\n\n&lt;p&gt;This will work nicely for any file size and you go through your file in just 1 pass. This is typically how generic parsers will work.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Having a Text file content:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nline &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nline &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;We can use this Python script in the same directory of the txt above&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;, encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    x = [l.rstrip(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; file]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 3&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Using append:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; file:\n        x.append(l.strip())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Or:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;).read().splitlines()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 3&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Or:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myfile.txt&quot;&lt;/span&gt;).readlines()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;linea 1\\n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 2\\n&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 3\\n&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Or:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_output&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lines_in_textfile&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;lines_in_textfile =&quot;&lt;/span&gt;, lines_in_textfile)\n\ny = [x.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;001.txt&quot;&lt;/span&gt;)]\nprint_output(y)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;001.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, encoding=&lt;span class=&quot;hljs-string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    file = file.read().splitlines()\n    print_output(file)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;001.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;, encoding=&lt;span class=&quot;hljs-string&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; file:\n    file = [x.rstrip(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; file]\n    print_output(file)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines_in_textfile = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 3&apos;&lt;/span&gt;]\nlines_in_textfile = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 3&apos;&lt;/span&gt;]\nlines_in_textfile = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;line 1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;line 3&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To read a file into a list you need to do three things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Open the file&lt;/li&gt;\n&lt;li&gt;Read the file&lt;/li&gt;\n&lt;li&gt;Store the contents as list&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Fortunately Python makes it very easy to do these things so the shortest way to read a file into a list is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However I&apos;ll add some more explanation.&lt;/p&gt;\n\n&lt;h2&gt;Opening the file&lt;/h2&gt;\n\n&lt;p&gt;I assume that you want to open a specific file and you don&apos;t deal directly with a file-handle (or a file-like-handle). The most commonly used function to open a file in Python is &lt;a href=&quot;https://docs.python.org/library/functions.html#open&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;, it takes one mandatory argument and two optional ones in Python 2.7:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Filename&lt;/li&gt;\n&lt;li&gt;Mode&lt;/li&gt;\n&lt;li&gt;Buffering (I&apos;ll ignore this argument in this answer)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The filename should be a string that represents the &lt;em&gt;path to the file&lt;/em&gt;. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;afile&apos;&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;# opens the file named afile in the current working directory&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;adir/afile&apos;&lt;/span&gt;)            &lt;span class=&quot;hljs-comment&quot;&gt;# relative path (relative to the current working directory)&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C:/users/aname/afile&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# absolute path (windows)&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/usr/local/afile&apos;&lt;/span&gt;)      &lt;span class=&quot;hljs-comment&quot;&gt;# absolute path (linux)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that the file extension needs to be specified. This is especially important for Windows users because file extensions like &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.doc&lt;/code&gt;, etc. are hidden &lt;em&gt;by default&lt;/em&gt; when viewed in the explorer.&lt;/p&gt;\n\n&lt;p&gt;The second argument is the &lt;code&gt;mode&lt;/code&gt;, it&apos;s &lt;code&gt;r&lt;/code&gt; by default which means &quot;read-only&quot;. That&apos;s exactly what you need in your case. &lt;/p&gt;\n\n&lt;p&gt;But in case you actually want to create a file and/or write to a file you&apos;ll need a different argument here. &lt;a href=&quot;https://stackoverflow.com/a/30566011/5393381&quot;&gt;There is an excellent answer if you want an overview&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For reading a file you can omit the &lt;code&gt;mode&lt;/code&gt; or pass it in explicitly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename)\n&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both will open the file in read-only mode. In case you want to read in a binary file on Windows you need to use the mode &lt;code&gt;rb&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rb&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On other platforms the &lt;code&gt;&apos;b&apos;&lt;/code&gt; (binary mode) is simply ignored.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now that I&apos;ve shown how to &lt;code&gt;open&lt;/code&gt; the file, let&apos;s talk about the fact that you always need to &lt;code&gt;close&lt;/code&gt; it again. Otherwise it will keep an open file-handle to the file until the process exits (or Python garbages the file-handle). &lt;/p&gt;\n\n&lt;p&gt;While you could use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;f = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename)\n&lt;span class=&quot;hljs-comment&quot;&gt;# ... do stuff with f&lt;/span&gt;\nf.close()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That will fail to close the file when something between &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt; throws an exception. You could avoid that by using a &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;f = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename)\n&lt;span class=&quot;hljs-comment&quot;&gt;# nothing in between!&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do stuff with f&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n    f.close()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However Python provides context managers that have a prettier syntax (but for &lt;code&gt;open&lt;/code&gt; it&apos;s almost identical to the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; above):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# do stuff with f&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# The file is always closed after the with-scope ends.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The last approach is the &lt;strong&gt;recommended&lt;/strong&gt; approach to open a file in Python!&lt;/p&gt;\n\n&lt;h2&gt;Reading the file&lt;/h2&gt;\n\n&lt;p&gt;Okay, you&apos;ve opened the file, now how to read it? &lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; function returns a &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#bltin-file-objects&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;file&lt;/code&gt;&lt;/a&gt; object and it supports Pythons iteration protocol. Each iteration will give you a line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(line)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will print each line of the file. Note however that each line will contain a newline character &lt;code&gt;\\n&lt;/code&gt; at the end (you might want to check if your Python is built with &lt;a href=&quot;https://docs.python.org/2/glossary.html#term-universal-newlines&quot; rel=&quot;noreferrer&quot;&gt;universal newlines support&lt;/a&gt; - otherwise you could also have &lt;code&gt;\\r\\n&lt;/code&gt; on Windows or &lt;code&gt;\\r&lt;/code&gt; on Mac as newlines). If you don&apos;t want that you can could simply remove the last character (or the last two characters on Windows):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(line[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But the last line doesn&apos;t necessarily has a trailing newline, so one shouldn&apos;t use that. One could check if it ends with a trailing newline and if so remove it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; line.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;):\n            line = line[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(line)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But you could simply remove all whitespaces (including the &lt;code&gt;\\n&lt;/code&gt; character) from the &lt;em&gt;end of the string&lt;/em&gt;, this will also remove all other &lt;em&gt;trailing&lt;/em&gt; whitespaces so you have to be careful if these are important:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(f.rstrip())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However if the lines end with &lt;code&gt;\\r\\n&lt;/code&gt; (Windows &quot;newlines&quot;) that &lt;code&gt;.rstrip()&lt;/code&gt; will also take care of the &lt;code&gt;\\r&lt;/code&gt;!&lt;/p&gt;\n\n&lt;h2&gt;Store the contents as list&lt;/h2&gt;\n\n&lt;p&gt;Now that you know how to open the file and read it, it&apos;s time to store the contents in a list. The simplest option would be to use the &lt;a href=&quot;https://docs.python.org/2/library/functions.html#func-list&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lst = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(f)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In case you want to strip the trailing newlines you could use a list comprehension instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lst = [line.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even simpler: The &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#file.readlines&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.readlines()&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;file&lt;/code&gt; object by default returns a &lt;code&gt;list&lt;/code&gt; of the lines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lst = f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will also include the trailing newline characters, if you don&apos;t want them I would recommend the &lt;code&gt;[line.rstrip() for line in f]&lt;/code&gt; approach because it avoids keeping two lists containing all the lines in memory.&lt;/p&gt;\n\n&lt;p&gt;There&apos;s an additional option to get the desired output, however it&apos;s rather &quot;suboptimal&quot;: &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#file.read&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; the complete file in a string and then split on newlines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lst = f.read().split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    lst = f.read().splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These take care of the trailing newlines automatically because the &lt;code&gt;split&lt;/code&gt; character isn&apos;t included. However they are not ideal because you keep the file as string and as a list of lines in memory!&lt;/p&gt;\n\n&lt;h2&gt;Summary&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use &lt;code&gt;with open(...) as f&lt;/code&gt; when opening files because you don&apos;t need to take care of closing the file yourself and it closes the file even if some exception happens.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;file&lt;/code&gt; objects support the iteration protocol so reading a file line-by-line is as simple as &lt;code&gt;for line in the_file_object:&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Always browse the documentation for the available functions/classes. Most of the time there&apos;s a perfect match for the task or at least one or two good ones. The obvious choice in this case would be &lt;code&gt;readlines()&lt;/code&gt; but if you want to process the lines before storing them in the list I would recommend a simple list-comprehension.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Clean and Pythonic Way of Reading the Lines of a File Into a List&lt;/strong&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;First and foremost, you should focus on opening your file and reading its contents in an efficient and pythonic way. Here is an example of the way I personally DO NOT prefer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;infile = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_file.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# Open the file for reading.&lt;/span&gt;\n\ndata = infile.read()  &lt;span class=&quot;hljs-comment&quot;&gt;# Read the contents of the file.&lt;/span&gt;\n\ninfile.close()  &lt;span class=&quot;hljs-comment&quot;&gt;# Close the file since we&apos;re done using it.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead, I prefer the below method of opening files for both reading and writing as it\nis very clean, and does not require an extra step of closing the file\nonce you are done using it. In the statement below, we&apos;re opening the file\nfor reading, and assigning it to the variable &apos;infile.&apos;  Once the code within\nthis statement has finished running, the file will be automatically closed.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Open the file for reading.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_file.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; infile:\n\n    data = infile.read()  &lt;span class=&quot;hljs-comment&quot;&gt;# Read the contents of the file into memory.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we need to focus on bringing this data into a &lt;strong&gt;Python List&lt;/strong&gt; because they are iterable, efficient, and flexible.  In your case, the desired goal is to bring each line of the text file into a separate element. To accomplish this, we will use the &lt;strong&gt;splitlines()&lt;/strong&gt; method as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Return a list of the lines, breaking at line boundaries.&lt;/span&gt;\nmy_list = data.splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Final Product:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Open the file for reading.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_file.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; infile:\n\n    data = infile.read()  &lt;span class=&quot;hljs-comment&quot;&gt;# Read the contents of the file into memory.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return a list of the lines, breaking at line boundaries.&lt;/span&gt;\nmy_list = data.splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Testing Our Code:&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Contents of the text file:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;     A fost odatã ca-n povesti,\n     A fost ca niciodatã,\n     Din rude mãri împãrãtesti,\n     O prea frumoasã fatã.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Print statements for testing purposes:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; my_list  &lt;span class=&quot;hljs-comment&quot;&gt;# Print the list.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Print each line in the list.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; line\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Print the fourth element in this list.&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; my_list[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Output (different-looking because of unicode characters):&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;     [&apos;A fost odat\\xc3\\xa3 ca-n povesti,&apos;, &apos;A fost ca niciodat\\xc3\\xa3,&apos;,\n     &apos;Din rude m\\xc3\\xa3ri \\xc3\\xaemp\\xc3\\xa3r\\xc3\\xa3testi,&apos;, &apos;O prea\n     frumoas\\xc3\\xa3 fat\\xc3\\xa3.&apos;]\n\n     A fost odatã ca-n povesti, A fost ca niciodatã, Din rude mãri\n     împãrãtesti, O prea frumoasã fatã.\n\n     O prea frumoasã fatã.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Introduced in Python 3.4, &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt; has a really convenient method for reading in text from files, as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\np = Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;my_text_file&apos;&lt;/span&gt;)\nlines = p.read_text().splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(The &lt;code&gt;splitlines&lt;/code&gt; call is what turns it from a string containing the whole contents of the file to a list of lines in the file).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pathlib&lt;/code&gt; has a lot of handy conveniences in it. &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;read_text&lt;/code&gt;&lt;/a&gt; is nice and concise, and you don&apos;t have to worry about opening and closing the file. If all you need to do with the file is read it all in in one go, it&apos;s a good choice.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s one more option by using list comprehensions on files;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = [line.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should be more efficient way as the most of the work is done inside the Python interpreter.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;f = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;your_file.txt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;)\nout = f.readlines() &lt;span class=&quot;hljs-comment&quot;&gt;# will append in the list out&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now variable out is a list (array) of what you want. You could either do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; out:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (line)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (line)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You&apos;ll get the same results.&lt;/p&gt;\n    ","\n&lt;p&gt;Another option is &lt;a href=&quot;http://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;numpy.genfromtxt&lt;/code&gt;&lt;/a&gt;, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\ndata = np.genfromtxt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;yourfile.dat&quot;&lt;/span&gt;,delimiter=&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will make &lt;code&gt;data&lt;/code&gt; a NumPy array with as many rows as are in your file.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Read and write text files with Python 2 and Python 3; it works with Unicode&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Define data&lt;/span&gt;\nlines = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;     A first string  &apos;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&apos;A Unicode sample: &apos;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&apos;German: äöüß&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Write text file&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; fp:\n    fp.write(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;.join(lines))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Read text file&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; fp:\n    read_lines = fp.readlines()\n    read_lines = [line.rstrip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; read_lines]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(lines == read_lines)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Things to notice:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;with&lt;/code&gt; is a so-called &lt;a href=&quot;https://docs.python.org/2/reference/compound_stmts.html#with&quot; rel=&quot;noreferrer&quot;&gt;context manager&lt;/a&gt;. It makes sure that the opened file is closed again.&lt;/li&gt;\n&lt;li&gt;All solutions here which simply make &lt;code&gt;.strip()&lt;/code&gt; or &lt;code&gt;.rstrip()&lt;/code&gt; will fail to reproduce the &lt;code&gt;lines&lt;/code&gt; as they also strip the white space.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Common file endings&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;.txt&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;More advanced file writing/reading&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;CSV: Super simple format (&lt;a href=&quot;https://stackoverflow.com/a/41585079/562769&quot;&gt;read &amp;amp; write&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;JSON: Nice for writing human-readable data; VERY commonly used (&lt;a href=&quot;https://stackoverflow.com/a/37795053/562769&quot;&gt;read &amp;amp; write&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;YAML: YAML is a superset of JSON, but easier to read (&lt;a href=&quot;https://stackoverflow.com/a/42054860/562769&quot;&gt;read &amp;amp; write&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/a/1729545/562769&quot;&gt;comparison of JSON and YAML&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;pickle: A Python serialization format (&lt;a href=&quot;https://stackoverflow.com/a/33245595/562769&quot;&gt;read &amp;amp; write&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://msgpack.org/&quot; rel=&quot;noreferrer&quot;&gt;MessagePack&lt;/a&gt; (&lt;a href=&quot;https://pypi.python.org/pypi/msgpack-python&quot; rel=&quot;noreferrer&quot;&gt;Python package&lt;/a&gt;): More compact representation (&lt;a href=&quot;https://stackoverflow.com/q/43442194/562769&quot;&gt;read &amp;amp; write&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_Data_Format&quot; rel=&quot;noreferrer&quot;&gt;HDF5&lt;/a&gt; (&lt;a href=&quot;http://docs.h5py.org/en/latest/quick.html&quot; rel=&quot;noreferrer&quot;&gt;Python package&lt;/a&gt;): Nice for matrices (&lt;a href=&quot;https://stackoverflow.com/a/41586571/562769&quot;&gt;read &amp;amp; write&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;XML: exists too *sigh* (&lt;a href=&quot;https://stackoverflow.com/a/1912483/562769&quot;&gt;read&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://stackoverflow.com/a/3605831/562769&quot;&gt;write&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For your application, the following might be important:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Support by other programming languages&lt;/li&gt;\n&lt;li&gt;Reading/writing performance&lt;/li&gt;\n&lt;li&gt;Compactness (file size)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;See also: &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats&quot; rel=&quot;noreferrer&quot;&gt;Comparison of data serialization formats&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;In case you are rather looking for a way to make configuration files, you might want to read my short article &lt;em&gt;&lt;a href=&quot;https://martin-thoma.com/configuration-files-in-python/&quot; rel=&quot;noreferrer&quot;&gt;Configuration files in Python&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you&apos;d like to read a file from the command line or from stdin, you can also use the &lt;code&gt;fileinput&lt;/code&gt; module:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# reader.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fileinput\n\ncontent = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;():\n    content.append(line.strip())\n\nfileinput.close()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pass files to it like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python reader.py textfile.txt \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Read more here: &lt;a href=&quot;http://docs.python.org/2/library/fileinput.html&quot;&gt;http://docs.python.org/2/library/fileinput.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The simplest way to do it&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A simple way is to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Read the whole file as a string&lt;/li&gt;\n&lt;li&gt;Split the string line by line&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In one line, that would give:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C:/path/file.txt&apos;&lt;/span&gt;).read().splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, this is quite inefficient way as this will store 2 versions of the content in memory (probably not a big issue for small files, but still). [Thanks Mark Amery].&lt;/p&gt;\n\n&lt;p&gt;There are 2 easier ways:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Using the file as an iterator&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C:/path/file.txt&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-comment&quot;&gt;# ... or if you want to have a list without EOL characters&lt;/span&gt;\nlines = [l.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C:/path/file.txt&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;If you are using Python 3.4 or above, better use &lt;code&gt;pathlib&lt;/code&gt; to create a path for your file that you could use for other operations in your program:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\nfile_path = Path(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/path/file.txt&quot;&lt;/span&gt;) \nlines = file_path.read_text().split_lines()\n&lt;span class=&quot;hljs-comment&quot;&gt;# ... or ... &lt;/span&gt;\nlines = [l.rstrip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; file_path.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;()]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use the splitlines() functions. Here is an example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;inp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;\ndata = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(inp)\ndat = data.read()\nlst = dat.splitlines()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; lst\n&lt;span class=&quot;hljs-comment&quot;&gt;# print(lst) # for python 3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the output you will have the list of lines.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to are faced with a &lt;strong&gt;very large / huge file&lt;/strong&gt; and want to &lt;strong&gt;read faster&lt;/strong&gt; (imagine you are in a Topcoder/Hackerrank coding competition), you might read a considerably bigger chunk of lines into a memory buffer at one time, rather than just iterate line by line at file level.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;buffersize = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(path) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f: \n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        lines_buffer = f.readlines(buffersize)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; lines_buffer:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lines_buffer:\n            process(line)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;The easiest ways to do that with some additional benefits are:&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lines = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the case with &lt;code&gt;set&lt;/code&gt;, we must be remembered that we don&apos;t have the line order preserved and get rid of the duplicated lines.&lt;/p&gt;\n&lt;h3&gt;Below I added an  important supplement from &lt;em&gt;@MarkAmery&lt;/em&gt;:&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Since you&apos;re not calling &lt;code&gt;.close&lt;/code&gt; on the file object nor using a &lt;code&gt;with&lt;/code&gt; statement, in some &lt;em&gt;Python&lt;/em&gt; implementations &lt;strong&gt;the file may not get closed after reading and your process will leak an open file handle&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;In &lt;em&gt;CPython&lt;/em&gt; (the normal &lt;em&gt;Python&lt;/em&gt; implementation that most people use), this isn&apos;t a problem since the file object will get immediately garbage-collected and this will close the file, but it&apos;s nonetheless generally considered best practice to do something like&lt;/strong&gt;:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f: lines = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(f) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;to ensure that the file gets closed regardless of what &lt;em&gt;Python&lt;/em&gt; implementation you&apos;re using.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In case that there are also empty lines in the document I like to read in the content and pass it through &lt;code&gt;filter&lt;/code&gt; to prevent empty string elements&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(myFile, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    excludeFileContent = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, f.read().splitlines()))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\ndata = pd.read_csv(filename) &lt;span class=&quot;hljs-comment&quot;&gt;# You can also add parameters such as header, sep, etc.&lt;/span&gt;\narray = data.values\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;data&lt;/code&gt; is a dataframe type, and uses values to get ndarray. You can also get a list by using &lt;code&gt;array.tolist()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Outline and Summary&lt;/h2&gt;\n\n&lt;p&gt;With a &lt;code&gt;filename&lt;/code&gt;, handling the file from a &lt;code&gt;Path(filename)&lt;/code&gt; object, or directly with &lt;code&gt;open(filename) as f&lt;/code&gt;, do one of the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;list(fileinput.input(filename))&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;using &lt;code&gt;with path.open() as f&lt;/code&gt;, call &lt;code&gt;f.readlines()&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;&lt;code&gt;list(f)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;path.read_text().splitlines()&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;path.read_text().splitlines(keepends=True)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;iterate over &lt;code&gt;fileinput.input&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;list.append&lt;/code&gt; each line one at a time&lt;/li&gt;\n&lt;li&gt;pass &lt;code&gt;f&lt;/code&gt; to a bound &lt;code&gt;list.extend&lt;/code&gt; method&lt;/li&gt;\n&lt;li&gt;use &lt;code&gt;f&lt;/code&gt; in a list comprehension&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I explain the use-case for each below.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h2&gt;In Python, how do I read a file line-by-line?&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is an excellent question. First, let&apos;s create some sample data:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\nPath(&lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;).write_text(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo\\nbar\\nbaz&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;File objects are lazy iterators, so just iterate over it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filename = &lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        line &lt;span class=&quot;hljs-comment&quot;&gt;# do something with the line&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, if you have multiple files, use &lt;code&gt;fileinput.input&lt;/code&gt;, another lazy iterator. With just one file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fileinput\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(filename): \n    line &lt;span class=&quot;hljs-comment&quot;&gt;# process the line&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or for multiple files, pass it a list of filenames:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;([filename]*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;): \n    line &lt;span class=&quot;hljs-comment&quot;&gt;# process the line&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Again, &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;fileinput.input&lt;/code&gt; above both are/return lazy iterators.\nYou can only use an iterator one time, so to provide functional code while avoiding verbosity I&apos;ll use the slightly more terse &lt;code&gt;fileinput.input(filename)&lt;/code&gt; where apropos from here.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h2&gt;In Python, how do I read a file line-by-line &lt;strong&gt;into a list?&lt;/strong&gt;&lt;/h2&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Ah but you want it in a list for some reason? I&apos;d avoid that if possible. But if you insist... just pass the result of &lt;code&gt;fileinput.input(filename)&lt;/code&gt; to &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(filename))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another direct answer is to call &lt;code&gt;f.readlines&lt;/code&gt;, which returns the contents of the file (up to an optional &lt;code&gt;hint&lt;/code&gt; number of characters, so you &lt;em&gt;could&lt;/em&gt; break this up into multiple lists that way). &lt;/p&gt;\n\n&lt;p&gt;You can get to this file object two ways. One way is to pass the filename to the &lt;code&gt;open&lt;/code&gt; builtin:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filename = &lt;span class=&quot;hljs-string&quot;&gt;&apos;filename&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or using the new Path object from the &lt;code&gt;pathlib&lt;/code&gt; module (which I have become quite fond of, and will use from here on):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\n\npath = Path(filename)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; path.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    f.readlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;list&lt;/code&gt; will also consume the file iterator and return a list - a quite direct method as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; path.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(f)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you don&apos;t mind reading the entire text into memory as a single string before splitting it, you can do this as a one-liner with the &lt;code&gt;Path&lt;/code&gt; object and the &lt;code&gt;splitlines()&lt;/code&gt; string method. By default, &lt;code&gt;splitlines&lt;/code&gt; removes the newlines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;path.read_text().splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to keep the newlines, pass &lt;code&gt;keepends=True&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;path.read_text().splitlines(keepends=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;I want to read the file line by line and append each line to the end of the list.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Now this is a bit silly to ask for, given that we&apos;ve demonstrated the end result easily with several methods. But you might need to filter or operate on the lines as you make your list, so let&apos;s humor this request.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;list.append&lt;/code&gt; would allow you to filter or operate on each line before you append it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;line_list = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(filename):\n    line_list.append(line)\n\nline_list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using &lt;code&gt;list.extend&lt;/code&gt; would be a bit more direct, and perhaps useful if you have a preexisting list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;line_list = []\nline_list.extend(fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(filename))\nline_list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or more idiomatically, we could instead use a list comprehension, and map and filter inside it if desirable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[line &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(filename)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or even more directly, to close the circle, just pass it to list to create a new list directly without operating on the lines:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(fileinput.&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(filename))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Conclusion&lt;/h2&gt;\n\n&lt;p&gt;You&apos;ve seen many ways to get lines from a file into a list, but I&apos;d recommend you avoid materializing large quantities of data into a list and instead use Python&apos;s lazy iteration to process the data if possible.&lt;/p&gt;\n\n&lt;p&gt;That is, prefer &lt;code&gt;fileinput.input&lt;/code&gt; or &lt;code&gt;with path.open() as f&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I like to use the following. Reading the lines immediately.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;contents = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filepath, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;).readlines():\n    contents.append(line.strip())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or using list comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;contents = [line.strip() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filepath, &lt;span class=&quot;hljs-string&quot;&gt;&apos;r&apos;&lt;/span&gt;).readlines()]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could also use the loadtxt command in NumPy. This checks for fewer conditions than genfromtxt, so it may be faster.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy\ndata = numpy.loadtxt(filename, delimiter=&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would try one of the below mentioned methods. The example file that I use has the name &lt;code&gt;dummy.txt&lt;/code&gt;. You can find the file &lt;a href=&quot;https://drive.google.com/file/d/1v7ksgTyPXTCxWKLphhzJ9pV_HnxP3Rnu/view?usp=sharing&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;. I presume, that the file is in the same directory as the code (you can change &lt;code&gt;fpath&lt;/code&gt; to include the proper file name and folder path.) &lt;/p&gt;\n\n&lt;p&gt;In both the below mentioned examples, the list that you want is given by &lt;code&gt;lst&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1.&amp;gt; First method&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fpath = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dummy.txt&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fpath, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; f: lst = [line.rstrip(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n \\t&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; lst\n&amp;gt;&amp;gt;&amp;gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE1.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE2.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE3.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE4.&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;2.&amp;gt;&lt;/strong&gt; In the &lt;strong&gt;second method&lt;/strong&gt;, one can use &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/csv.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;csv.reader&lt;/a&gt; module from Python Standard Library&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; csv\nfpath = &lt;span class=&quot;hljs-string&quot;&gt;&apos;dummy.txt&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fpath) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; csv_file:\n    csv_reader = csv.reader(csv_file, delimiter=&lt;span class=&quot;hljs-string&quot;&gt;&apos;   &apos;&lt;/span&gt;)\n    lst = [row[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; row &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; csv_reader] \n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; lst\n&amp;gt;&amp;gt;&amp;gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE1.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE2.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE3.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;THIS IS LINE4.&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use either of the two methods. Time taken for the creation of &lt;code&gt;lst&lt;/code&gt; is almost equal in the two methods.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a Python(3) helper &lt;s&gt;library&lt;/s&gt; class that I use to simplify file I/O:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# handle files using a callback method, prevents repetition&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_FileIO__file_handler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file_path, mode, callback = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; f: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n  f = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(file_path, mode)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; callback(f)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; e:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; IOError(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to %s file&quot;&lt;/span&gt; % [&lt;span class=&quot;hljs-string&quot;&gt;&quot;write to&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;read from&quot;&lt;/span&gt;][mode.lower() &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;r rb r+&quot;&lt;/span&gt;.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)])\n  &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n    f.close()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileIO&lt;/span&gt;:\n  &lt;span class=&quot;hljs-comment&quot;&gt;# return the contents of a file&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;read&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file_path, mode = &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; __file_handler(file_path, mode, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; rf: rf.read())\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;# get the lines of a file&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lines&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file_path, mode = &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;, filter_fn = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; line: &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;line&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [line &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; FileIO.read(file_path, mode).strip().split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; filter_fn(line)]\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;# create or update a file (&lt;span class=&quot;hljs-doctag&quot;&gt;NOTE:&lt;/span&gt; can also be used to replace a file&apos;s original content)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file_path, new_content, mode = &lt;span class=&quot;hljs-string&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; __file_handler(file_path, mode, &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; wf: wf.write(new_content))\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;# delete a file (if it exists)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file_path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; os.remove() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(file_path) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would then use the &lt;code&gt;FileIO.lines&lt;/code&gt; function, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;file_ext_lines = FileIO.lines(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./path/to/file.ext&quot;&lt;/span&gt;):\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, line &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(file_ext_lines):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Line {}: {}&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, line))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remember that the &lt;code&gt;mode&lt;/code&gt; (&lt;code&gt;&quot;r&quot;&lt;/code&gt; by default) and &lt;code&gt;filter_fn&lt;/code&gt; (checks for empty lines by default) parameters are optional.&lt;/p&gt;\n\n&lt;p&gt;You could even remove the &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; methods and just leave the &lt;code&gt;FileIO.lines&lt;/code&gt;, or even turn it into a separate method called &lt;code&gt;read_lines&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h3&gt;Command line version&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/bin/python3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nabspath = os.path.abspath(__file__)\ndname = os.path.dirname(abspath)\nfilename = dname + sys.argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\narr = &lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(filename).read().split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;) \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(arr)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Run with:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python3 somefile.py input_file_name.txt\n&lt;/code&gt;&lt;/pre&gt;\n    "],"402":["\n&lt;p&gt;If you don&apos;t care about escaping comma and newline,&lt;br&gt;\nAND you can&apos;t embed comma and newline in quotes (If you can&apos;t escape then...)&lt;br&gt;\nthen its only about three lines of code (OK 14 -&amp;gt;But its only 15 to read the whole file).&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getNextLineAndSplitIntoTokens&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream&amp;amp; str)&lt;/span&gt;\n&lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt;   result;\n    std::string                line;\n    std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(str,line);\n\n    &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream          &lt;span class=&quot;hljs-title&quot;&gt;lineStream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n    std::string                cell;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(lineStream,cell, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;))\n    {\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(cell);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This checks for a trailing comma with no data after it.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!lineStream &amp;amp;&amp;amp; cell.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// If there was a trailing comma then add an empty element.&lt;/span&gt;\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I would just create a class representing a row.&lt;br&gt;\nThen stream into that object:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVRow&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        std::string_view &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;[](std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; index) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;string_view&lt;/span&gt;(&amp;amp;m_line[m_data[index] + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], m_data[index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] -  (m_data[index] + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n        &lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;readNextRow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream&amp;amp; str)&lt;/span&gt;\n        &lt;/span&gt;{\n            std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(str, m_line);\n\n            m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n            m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n            std::string::size_type pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((pos = m_line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, pos)) != std::string::npos)\n            {\n                m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(pos);\n                ++pos;\n            }\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This checks for a trailing comma with no data after it.&lt;/span&gt;\n            pos   = m_line.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n            m_data.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(pos);\n        }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n        std::string         m_line;\n        std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;    m_data;\n};\n\nstd::istream&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;&amp;gt;&amp;gt;(std::istream&amp;amp; str, CSVRow&amp;amp; data)\n{\n    data.&lt;span class=&quot;hljs-built_in&quot;&gt;readNextRow&lt;/span&gt;(str);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}   \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;plop.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    CSVRow              row;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(file &amp;gt;&amp;gt; row)\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;4th Element(&quot;&lt;/span&gt; &amp;lt;&amp;lt; row[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But with a little work we could technically create an iterator:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVIterator&lt;/span&gt;\n{   \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::input_iterator_tag     iterator_category;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; CSVRow                      value_type;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt;                 difference_type;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; CSVRow*                     pointer;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; CSVRow&amp;amp;                     reference;\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;CSVIterator&lt;/span&gt;(std::istream&amp;amp; str)  :&lt;span class=&quot;hljs-built_in&quot;&gt;m_str&lt;/span&gt;(str.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()?&amp;amp;str:&lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) { ++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;); }\n        &lt;span class=&quot;hljs-built_in&quot;&gt;CSVIterator&lt;/span&gt;()                   :&lt;span class=&quot;hljs-built_in&quot;&gt;m_str&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) {}\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Pre Increment&lt;/span&gt;\n        CSVIterator&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++()               {&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (m_str) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!((*m_str) &amp;gt;&amp;gt; m_row)){m_str = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;}}&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;}\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Post increment&lt;/span&gt;\n        CSVIterator &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)             {&lt;span class=&quot;hljs-function&quot;&gt;CSVIterator    &lt;span class=&quot;hljs-title&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tmp;}\n        CSVRow &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;*()   &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;       {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; m_row;}\n        CSVRow &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;* &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;()  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;       {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;m_row;}\n\n        &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;==(CSVIterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; rhs) {&lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; == &amp;amp;rhs) || ((&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;m_str == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) &amp;amp;&amp;amp; (rhs.m_str == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;)));}\n        &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;!=(CSVIterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; rhs) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !((*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;) == rhs);}\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n        std::istream*       m_str;\n        CSVRow              m_row;\n};\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;plop.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(CSVIterator &lt;span class=&quot;hljs-built_in&quot;&gt;loop&lt;/span&gt;(file); loop != &lt;span class=&quot;hljs-built_in&quot;&gt;CSVIterator&lt;/span&gt;(); ++loop)\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;4th Element(&quot;&lt;/span&gt; &amp;lt;&amp;lt; (*loop)[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now that we are in 2020 lets add a CSVRange object:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVRange&lt;/span&gt;\n{\n    std::istream&amp;amp;   stream;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;CSVRange&lt;/span&gt;(std::istream&amp;amp; str)\n            : &lt;span class=&quot;hljs-built_in&quot;&gt;stream&lt;/span&gt;(str)\n        {}\n        &lt;span class=&quot;hljs-function&quot;&gt;CSVIterator &lt;span class=&quot;hljs-title&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CSVIterator{stream};}\n        &lt;span class=&quot;hljs-function&quot;&gt;CSVIterator &lt;span class=&quot;hljs-title&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; CSVIterator{};}\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;plop.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; row: &lt;span class=&quot;hljs-built_in&quot;&gt;CSVRange&lt;/span&gt;(file))\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;4th Element(&quot;&lt;/span&gt; &amp;lt;&amp;lt; row[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My version is not using anything but the standard C++11 library. It copes well with Excel CSV quotation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;spam eggs,&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo,bar&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;fizz buzz&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1.23&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4.567&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;-8.00E+09&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The code is written as a finite-state machine and is consuming one character at a time. I think it&apos;s easier to reason about.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;istream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;enum class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CSVState&lt;/span&gt; {\n    UnquotedField,\n    QuotedField,\n    QuotedQuote\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;readCSVRow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;row)&lt;/span&gt; &lt;/span&gt;{\n    CSVState state = CSVState::UnquotedField;\n    std::vector&amp;lt;std::string&amp;gt; fields {&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;};\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// index of the current field&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c : row) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (state) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; CSVState::UnquotedField:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;// end of field&lt;/span&gt;\n                              fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;); i++;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: state = CSVState::QuotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:  fields[i].&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(c);\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; CSVState::QuotedField:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: state = CSVState::QuotedQuote;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:  fields[i].&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(c);\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; CSVState::QuotedQuote:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;// , after closing quote&lt;/span&gt;\n                              fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;); i++;\n                              state = CSVState::UnquotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;&quot; -&amp;gt; &quot;&lt;/span&gt;\n                              fields[i].&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;);\n                              state = CSVState::QuotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:  &lt;span class=&quot;hljs-comment&quot;&gt;// end of quote&lt;/span&gt;\n                              state = CSVState::UnquotedField;\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fields;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Read CSV file, Excel dialect. Accept &quot;quoted fields &quot;&quot;with quotes&quot;&quot;&quot;&lt;/span&gt;\nstd::vector&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;(std::istream &amp;amp;in) {\n    std::vector&amp;lt;std::vector&amp;lt;std::string&amp;gt;&amp;gt; table;\n    std::string row;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!in.&lt;span class=&quot;hljs-built_in&quot;&gt;eof&lt;/span&gt;()) {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, row);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (in.&lt;span class=&quot;hljs-built_in&quot;&gt;bad&lt;/span&gt;() || in.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; fields = &lt;span class=&quot;hljs-built_in&quot;&gt;readCSVRow&lt;/span&gt;(row);\n        table.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(fields);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; table;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution using Boost Tokenizer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::vector&amp;lt;std::string&amp;gt; vec;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\ntokenizer&amp;lt;escaped_list_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tk&lt;/span&gt;(\n   line, &lt;span class=&quot;hljs-built_in&quot;&gt;escaped_list_separator&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&quot;&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (tokenizer&amp;lt;escaped_list_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &amp;gt;::iterator &lt;span class=&quot;hljs-built_in&quot;&gt;i&lt;/span&gt;(tk.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;());\n   i!=tk.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;();++i) \n{\n   vec.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(*i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.partow.net/programming/strtk/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ String Toolkit Library (StrTk)&lt;/a&gt; has a token grid class that allows you to load data either from &lt;b&gt;text files, strings or char buffers&lt;/b&gt;, and to parse/process them in a row-column fashion.&lt;/p&gt;\n\n&lt;p&gt;You can specify the row delimiters and column delimiters or just use the defaults.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   std::string data = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1,2,3,4,5\\n&quot;&lt;/span&gt;\n                      &lt;span class=&quot;hljs-string&quot;&gt;&quot;0,2,4,6,8\\n&quot;&lt;/span&gt;\n                      &lt;span class=&quot;hljs-string&quot;&gt;&quot;1,3,5,7,9\\n&quot;&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-function&quot;&gt;strtk::token_grid &lt;span class=&quot;hljs-title&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data,data.size(),&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; grid.&lt;span class=&quot;hljs-built_in&quot;&gt;row_count&lt;/span&gt;(); ++i)\n   {\n      strtk::token_grid::row_type r = grid.&lt;span class=&quot;hljs-built_in&quot;&gt;row&lt;/span&gt;(i);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; r.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++j)\n      {\n         std::cout &amp;lt;&amp;lt; r.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(j) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt;;\n      }\n      std::cout &amp;lt;&amp;lt; std::endl;\n   }\n   std::cout &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More examples can be found &lt;a href=&quot;http://www.partow.net/programming/strtk/index.html#tutorial&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;You can use Boost Tokenizer with escaped_list_separator.&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;escaped_list_separator&lt;/strong&gt; parses a superset of the csv. &lt;a href=&quot;https://www.boost.org/doc/libs/release/libs/tokenizer/doc/escaped_list_separator.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Boost::tokenizer&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This only uses Boost tokenizer header files, no linking to boost libraries required.&lt;/p&gt;\n&lt;p&gt;Here is an example, (see &lt;a href=&quot;http://mybyteofcode.blogspot.com/2010/02/parse-csv-file-with-boost-tokenizer-in.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parse CSV File With Boost Tokenizer In C++&lt;/a&gt; for details or &lt;code&gt;Boost::tokenizer&lt;/code&gt; ):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;// cout, endl&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;// fstream&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// copy&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;// ostream_operator&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/tokenizer.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\n    &lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(data.c_str())&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!in.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; tokenizer&amp;lt; escaped_list_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &amp;gt; Tokenizer;\n    vector&amp;lt; string &amp;gt; vec;\n    string line;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in,line))\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;Tokenizer &lt;span class=&quot;hljs-title&quot;&gt;tok&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n        vec.&lt;span class=&quot;hljs-built_in&quot;&gt;assign&lt;/span&gt;(tok.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(),tok.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// vector now contains strings from one row, output to cout here&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(vec.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), vec.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;|&quot;&lt;/span&gt;));\n\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n----------------------&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is not overkill to use Spirit for parsing CSVs. Spirit is well suited for micro-parsing tasks. For instance, with Spirit 2.1, it is as easy as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; r = &lt;span class=&quot;hljs-built_in&quot;&gt;phrase_parse&lt;/span&gt;(first, last,\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//  Begin grammar&lt;/span&gt;\n    (\n        double_ % &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;\n    )\n    ,\n    &lt;span class=&quot;hljs-comment&quot;&gt;//  End grammar&lt;/span&gt;\n\n    space, v);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The vector, v, gets stuffed with the values. &lt;a href=&quot;http://www.boost.org/doc/libs/1_41_0/libs/spirit/doc/html/spirit/qi/tutorials.html&quot; rel=&quot;noreferrer&quot;&gt;There is a series of tutorials&lt;/a&gt; touching on this in the new Spirit 2.1 docs that&apos;s just been released with Boost 1.41.&lt;/p&gt;\n\n&lt;p&gt;The tutorial progresses from simple to complex. The CSV parsers are presented somewhere in the middle and touches on various techniques in using Spirit. The generated code is as tight as hand written code. Check out the assembler generated!&lt;/p&gt;\n    ","\n&lt;p&gt;If you &lt;strong&gt;DO&lt;/strong&gt; care about parsing CSV correctly, this will do it...relatively slowly as it works one char at a time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ParseCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; csvSource, vector&amp;lt;vector&amp;lt;string&amp;gt; &amp;gt;&amp;amp; lines)&lt;/span&gt;\n    &lt;/span&gt;{\n       &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;inQuote&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n       &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;newLine&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n       string field;\n       lines.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n       vector&amp;lt;string&amp;gt; line;\n\n       string::const_iterator aChar = csvSource.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;();\n       &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (aChar != csvSource.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;())\n       {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (*aChar)\n          {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;:\n             newLine = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             inQuote = !inQuote;\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;:\n             newLine = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (inQuote == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n             {\n                field += *aChar;\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n             {\n                line.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(field);\n                field.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;:\n          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt;:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (inQuote == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n             {\n                field += *aChar;\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n             {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (newLine == &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n                {\n                   line.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(field);\n                   lines.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(line);\n                   field.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n                   line.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n                   newLine = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n             }\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n             newLine = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n             field.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(*aChar);\n             &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n          }\n\n          aChar++;\n       }\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (field.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;())\n          line.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(field);\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (line.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;())\n          lines.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(line);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When using the Boost Tokenizer escaped_list_separator for CSV files, then one should be aware of the following:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It requires an escape-character (default back-slash - \\)&lt;/li&gt;\n&lt;li&gt;It requires a splitter/seperator-character (default comma - ,)&lt;/li&gt;\n&lt;li&gt;It requires an quote-character (default quote - &quot;)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The CSV format specified by wiki states that data fields can contain separators in quotes (supported):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1997,Ford,E350,&quot;Super, luxurious truck&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The CSV format specified by wiki states that single quotes should be handled with double-quotes (escaped_list_separator will strip away all quote characters):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1997,Ford,E350,&quot;Super &quot;&quot;luxurious&quot;&quot; truck&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The CSV format doesn&apos;t specify that any back-slash characters should be stripped away (escaped_list_separator will strip away all escape characters).&lt;/p&gt;\n\n&lt;p&gt;A possible work-around to fix the default behavior of the boost escaped_list_separator:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;First replace all back-slash characters (\\) with two back-slash characters (\\\\) so they are not stripped away.&lt;/li&gt;\n&lt;li&gt;Secondly replace all double-quotes (&quot;&quot;) with a single back-slash character and a quote (\\&quot;)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This work-around has the side-effect that empty data-fields that are represented by a double-quote, will be transformed into a single-quote-token. When iterating through the tokens, then one must check if the token is a single-quote, and treat it like an empty string.&lt;/p&gt;\n\n&lt;p&gt;Not pretty but it works, as long there are not newlines within the quotes.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://github.com/AriaFallah/csv-parser&quot; rel=&quot;noreferrer&quot;&gt;I wrote a header-only, C++11 CSV parser&lt;/a&gt;. It&apos;s well tested, fast, supports the entire CSV spec (quoted fields, delimiter/terminator in quotes, quote escaping, etc.), and is configurable to account for the CSVs that don&apos;t adhere to the specification.&lt;/p&gt;\n\n&lt;p&gt;Configuration is done through a fluent interface:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// constructor accepts any input stream&lt;/span&gt;\nCsvParser parser = &lt;span class=&quot;hljs-built_in&quot;&gt;CsvParser&lt;/span&gt;(std::cin)\n  .&lt;span class=&quot;hljs-built_in&quot;&gt;delimiter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;// delimited by ; instead of ,&lt;/span&gt;\n  .&lt;span class=&quot;hljs-built_in&quot;&gt;quote&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;)       &lt;span class=&quot;hljs-comment&quot;&gt;// quoted fields use &apos; instead of &quot;&lt;/span&gt;\n  .&lt;span class=&quot;hljs-built_in&quot;&gt;terminator&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// terminated by \\0 instead of by \\r\\n, \\n, or \\r&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Parsing is just a range based for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;../parser.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; aria::csv;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;some_file.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;CsvParser &lt;span class=&quot;hljs-title&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f)&lt;/span&gt;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; row : parser) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; field : row) {\n      std::cout &amp;lt;&amp;lt; field &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; | &quot;&lt;/span&gt;;\n    }\n    std::cout &amp;lt;&amp;lt; std::endl;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As all the CSV questions seem to get redirected here, I thought I&apos;d post my answer here.  This answer does not directly address the asker&apos;s question. I wanted to be able to read in a stream that is known to be in CSV format, and also the types of each field was already known. Of course, the method below could be used to treat every field to be a string type.&lt;/p&gt;\n\n&lt;p&gt;As an example of how I wanted to be able to use a CSV input stream, consider the following input (taken from &lt;a href=&quot;http://en.wikipedia.org/wiki/Comma-separated_values&quot; rel=&quot;nofollow noreferrer&quot;&gt;wikipedia&apos;s page on CSV&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[] =\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;Year,Make,Model,Description,Price\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1997,Ford,E350,\\&quot;ac, abs, moon\\&quot;,3000.00\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1999,Chevy,\\&quot;Venture \\&quot;\\&quot;Extended Edition\\&quot;\\&quot;\\&quot;,\\&quot;\\&quot;,4900.00\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1999,Chevy,\\&quot;Venture \\&quot;\\&quot;Extended Edition, Very Large\\&quot;\\&quot;\\&quot;,\\&quot;\\&quot;,5000.00\\n&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;1996,Jeep,Grand Cherokee,\\&quot;MUST SELL!\\n\\\nair, moon roof, loaded\\&quot;,4799.00\\n&quot;&lt;/span&gt;\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, I wanted to be able to read in the data like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::istringstream &lt;span class=&quot;hljs-title&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(input)&lt;/span&gt;&lt;/span&gt;;\nstd::string title[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; year;\nstd::string make, model, desc;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; price;\n&lt;span class=&quot;hljs-built_in&quot;&gt;csv_istream&lt;/span&gt;(ss)\n    &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;gt;&amp;gt; title[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;csv_istream&lt;/span&gt;(ss)\n       &amp;gt;&amp;gt; year &amp;gt;&amp;gt; make &amp;gt;&amp;gt; model &amp;gt;&amp;gt; desc &amp;gt;&amp;gt; price) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//...do something with the record...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This was the solution I ended up with.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv_istream&lt;/span&gt; {\n    std::istream &amp;amp;is_;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;csv_istream&lt;/span&gt; (std::istream &amp;amp;is) : &lt;span class=&quot;hljs-built_in&quot;&gt;is_&lt;/span&gt;(is) {}\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scan_ws&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = is_.&lt;span class=&quot;hljs-built_in&quot;&gt;peek&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c != &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &amp;amp;&amp;amp; c != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n        }\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scan&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string *s = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        std::string ws;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; || c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s) {\n                    ws += c;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c != &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &amp;amp;&amp;amp; c != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;) {\n                        *s += ws;\n                        ws.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n                    }\n                }\n                c = is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;());\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;eof&lt;/span&gt;()) is_.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;set_value&lt;/span&gt; {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string in, T &amp;amp;v)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n            std::&lt;span class=&quot;hljs-built_in&quot;&gt;istringstream&lt;/span&gt;(in) &amp;gt;&amp;gt; v;\n        }\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;set_value&lt;/span&gt;&amp;lt;T, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; SIGNED&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string in, T &amp;amp;v)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (SIGNED) v = ::&lt;span class=&quot;hljs-built_in&quot;&gt;strtoll&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; v = ::&lt;span class=&quot;hljs-built_in&quot;&gt;strtoull&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;(), &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string in, T &amp;amp;v)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n            convert&amp;lt;is_signed_int&amp;lt;T&amp;gt;::val&amp;gt;(in, v);\n        }\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; csv_istream &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &amp;gt;&amp;gt; (T &amp;amp;v) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        std::string tmp;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scan&lt;/span&gt;(&amp;amp;tmp);\n        set_value&amp;lt;T, is_int&amp;lt;T&amp;gt;::val&amp;gt;()(tmp, v);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; csv_istream &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &amp;gt;&amp;gt; (std::string &amp;amp;v) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        v.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scan_ws&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;peek&lt;/span&gt;() != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-built_in&quot;&gt;scan&lt;/span&gt;(&amp;amp;v);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            std::string tmp;\n            is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n            std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(is_, tmp, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (is_.&lt;span class=&quot;hljs-built_in&quot;&gt;peek&lt;/span&gt;() == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) {\n                v += tmp;\n                v += is_.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;();\n                std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(is_, tmp, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;);\n            }\n            v += tmp;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;scan&lt;/span&gt;();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; csv_istream &amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &amp;gt;&amp;gt; (T &amp;amp;(*manip)(T &amp;amp;)) &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        is_ &amp;gt;&amp;gt; manip;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !is_.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;(); }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With the following helpers that may be simplified by the new integral traits templates in C++11:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; }; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_signed_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; }; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_unsigned_int&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;}; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_int&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { val = (is_signed_int&amp;lt;T&amp;gt;::val || is_unsigned_int&amp;lt;T&amp;gt;::val) };\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://tio.run/##rVZtT@NGEP7uXzG4UrDpFuXK0VNev/ToqRVUlaAnVQRFxt6EFc6u5d2YIi6/nc6sHbKOHTig5iWb3Zlnnnn1xln20zyOH38QMk6XCYehUNrkPFqMvc2eXm95hi@yNDK4Z@4zLqMFh4sx4PEyNiD0VIu55MlUSAMPwOVygR9FlMIIZlGqOawG@OugtOsO9Y3KzXgbAiX5dwLg33vUUyXn79WHF0BejOVSviearvZw/QXeFth2rLfEuB3pTeHeDfXuyNuAe4BPDSGoJ/li3O/TwbdvDTrVUUjWVoPHCjnWxVSUrVTBa5P0@@utDqIM7LYrGGzLhNAnewGtHlZWvlACUxtHcnqnIQghVlKvPaDn7kak3NI/nCuVBGHoHNJDDsfoIUlknN8G4aB@PoMghr0R7ONPpwPlemL2Q7hGXrdb0mSHGxek5LnFtvINXROYtAONBLpN8q7Mnd5Aupy3rBHd3c4mamtj4@EIvWL7lNFyPZHtHq41dNgCZSOu4ccRxIPWw2ei2Y5Gz4FFdAPQtHkYpzzKt5NXz8HzOzsCaoVbyqhZJXTI1YyiTssGIbcQ2tqQwbVS6VMzam6m2EhL7kTG1o/KeB4ZlVO518pISAYX0CmahVRrOBQtWyoQMoTxGIoGx8FOkk16QyROA2bs2Ntokktw/vuXP08@j0v6yK3guXkNdYpuiRFCgWmyakalKXpwGE/xSxAy6OLvVlo4vSocjeXzKqv/JdCVg8PWkTkOSLkIXxXy0oo7GjsbcpjAoJ2MS9ksso1JmkBBB7ccGrV8li@CDecwQOE67ZybZS7hwNyIqjFLR17k6rJqY100O6ea721zrhzZdor4OERKz1yetgRaOqEtLjsm@JMO7qdCcjLMwEaEjNYFnUlRcRtV3JoDrqC51mDwdLKDyqvo1Odcu0EbtNY22JXk1jL9vvRjqQYHi0iKLKR12CwAdIckrczL9fYEbifN5gawVtijKM4ikaKHqIJXEnp7LiIhSfjBqwjfRDm2dbY0l1cw8vx/sALZWXTL2ZlKeMo@cx3nIjNCSfZXLmI@kb7nf@j1PrHfVJ6wk6PjLpv4UcwgutYMFkrJic@Out3uYbe7Fu6xX294cY@CX7lEdhwm/sQ/@ddwmeAF7iQRZID2UNf@@9h7AwCDrzy/h9Mon3MX7LjO5hf2B@cZ@5JHMgHEzdUt5yh59vf5BZyfnJ7uTeTEi0ReugO5UjOGF8wITRG1T71ehYb3yubbBbQObESxsmodJ0zKL4@vBh4l4h4DXT9fUNTRIoUdEoz7wJuhUQMZxX3gObUVaB3aIsByKWG7V5v1B2f9s7M@ctYfkUbVsW24JTRxLCvylttP4kYLYkefllnoXmxjtTQwHILfJ@XRpU9fLA5tXvlbDW0lCb6StJaekSQCa1FLZrcscaxELd3dktaLStSuS1lMMN7kPW/1@B8&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;C++ (gcc)  Try It Online&quot;&gt;Try it online!&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You might want to look at my FOSS project &lt;a href=&quot;http://code.google.com/p/csvfix/&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSVfix&lt;/a&gt; (&lt;a href=&quot;https://bitbucket.org/neilb/csvfix/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;updated link&lt;/em&gt;&lt;/a&gt;), which is a CSV stream editor written in C++. The CSV parser is no prize, but does the job and the whole package may do what you need without you writing any code.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://bitbucket.org/neilb/csvfix/src/default/alib/src/a_csv.cpp?fileviewer=file-view-default&quot; rel=&quot;nofollow noreferrer&quot;&gt;alib/src/a_csv.cpp&lt;/a&gt; for the CSV parser, and &lt;a href=&quot;https://bitbucket.org/neilb/csvfix/src/default/csvfix/src/csved_ioman.cpp?fileviewer=file-view-default#csved_ioman.cpp-348&quot; rel=&quot;nofollow noreferrer&quot;&gt;csvlib/src/csved_ioman.cpp&lt;/a&gt; (&lt;code&gt;IOManager::ReadCSV&lt;/code&gt;) for a usage example.&lt;/p&gt;\n    ","\n&lt;p&gt;Another CSV I/O library can be found here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/fast-cpp-csv-parser/&quot; rel=&quot;noreferrer&quot;&gt;http://code.google.com/p/fast-cpp-csv-parser/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;csv.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;io::CSVReader&amp;lt;3&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ram.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n  in.&lt;span class=&quot;hljs-built_in&quot;&gt;read_header&lt;/span&gt;(io::ignore_extra_column, &lt;span class=&quot;hljs-string&quot;&gt;&quot;vendor&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;speed&quot;&lt;/span&gt;);\n  std::string vendor; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; speed;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;read_row&lt;/span&gt;(vendor, size, speed)){\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do stuff with the data&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another solution similar to &lt;a href=&quot;https://stackoverflow.com/a/1120224/1749822&quot;&gt;Loki Astari&apos;s answer&lt;/a&gt;, in C++11. Rows here are &lt;code&gt;std::tuple&lt;/code&gt;s of a given type. The code scans one line, then scans until each delimiter, and then converts and dumps the value directly into the tuple (with a bit of template code).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; row : &lt;span class=&quot;hljs-built_in&quot;&gt;csv&lt;/span&gt;&amp;lt;std::string, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;(file, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)) {\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;first col: &quot;&lt;/span&gt; &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&amp;gt;(row) &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Advanges:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;quite clean and simple to use, only C++11.&lt;/li&gt;\n&lt;li&gt;automatic type conversion into &lt;code&gt;std::tuple&amp;lt;t1, ...&amp;gt;&lt;/code&gt; via &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;What&apos;s missing:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;escaping and quoting&lt;/li&gt;\n&lt;li&gt;no error handling in case of malformed CSV.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The main code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; csvtools {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Read the last element of the tuple without calling recursively&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; idx, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;idx &amp;gt;= std::tuple_size&amp;lt;std::tuple&amp;lt;fields...&amp;gt;&amp;gt;::value - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;::type\n    &lt;span class=&quot;hljs-built_in&quot;&gt;read_tuple&lt;/span&gt;(std::istream &amp;amp;in, std::tuple&amp;lt;fields...&amp;gt; &amp;amp;out, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delimiter) {\n        std::string cell;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, cell, delimiter);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;cell_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cell)&lt;/span&gt;&lt;/span&gt;;\n        cell_stream &amp;gt;&amp;gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;idx&amp;gt;(out);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Read the @p idx-th element of the tuple and then calls itself with @p idx + 1 to&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// read the next element of the tuple. Automatically falls in the previous case when&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// reaches the last element of the tuple thanks to enable_if&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; idx, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;idx &amp;lt; std::tuple_size&amp;lt;std::tuple&amp;lt;fields...&amp;gt;&amp;gt;::value - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n    &lt;span class=&quot;hljs-title&quot;&gt;read_tuple&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream &amp;amp;in, std::tuple&amp;lt;fields...&amp;gt; &amp;amp;out, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delimiter)&lt;/span&gt; &lt;/span&gt;{\n        std::string cell;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(in, cell, delimiter);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;cell_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cell)&lt;/span&gt;&lt;/span&gt;;\n        cell_stream &amp;gt;&amp;gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;&amp;lt;idx&amp;gt;(out);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;read_tuple&lt;/span&gt;&amp;lt;idx + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, fields...&amp;gt;(in, out, delimiter);\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Iterable csv wrapper around a stream. @p fields the list of types that form up a row.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv&lt;/span&gt; {\n    std::istream &amp;amp;_in;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; _delim;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::tuple&amp;lt;fields...&amp;gt; value_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;iterator&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Construct from a stream.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::istream &amp;amp;in, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt; : _in(in), _delim(delim) {&lt;/span&gt;}\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Status of the underlying stream&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// @{&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;good&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _in.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::istream &amp;amp;&lt;span class=&quot;hljs-title&quot;&gt;underlying_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _in;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// @}&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &lt;span class=&quot;hljs-title&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &lt;span class=&quot;hljs-title&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Reads a line into a stringstream, and then reads the line into a tuple, that is returned&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; value_type &lt;span class=&quot;hljs-title&quot;&gt;read_row&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n        std::string line;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(_in, line);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;line_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n        std::tuple&amp;lt;fields...&amp;gt; retval;\n        csvtools::&lt;span class=&quot;hljs-built_in&quot;&gt;read_tuple&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, fields...&amp;gt;(line_stream, retval, _delim);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retval;\n    }\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Iterator; just calls recursively @ref csv::read_row and stores the result.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv&lt;/span&gt;&amp;lt;fields...&amp;gt;::iterator {\n    csv::value_type _row;\n    csv *_parent;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::input_iterator_tag iterator_category;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv::value_type         value_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt;             difference_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv::value_type *       pointer;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv::value_type &amp;amp;       reference;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Construct an empty/end iterator&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; : _parent(nullptr) {&lt;/span&gt;}\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Construct an iterator at the beginning of the @p parent csv object.&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(csv &amp;amp;parent)&lt;/span&gt; : _parent(parent.good() ? &amp;amp;parent : nullptr) {&lt;/span&gt;\n        ++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Read one row, if possible. Set to end if parent is not good anymore.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (_parent != &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;) {\n            _row = _parent-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;read_row&lt;/span&gt;();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!_parent-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;()) {\n                _parent = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; iterator &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;++(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) {\n        iterator copy = *&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;;\n        ++(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; copy;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; csv::value_type &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;*() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _row;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; csv::value_type &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;-&amp;gt;() &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;_row;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;==(iterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;other) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; == &amp;amp;other) &lt;span class=&quot;hljs-built_in&quot;&gt;or&lt;/span&gt; (_parent == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; other._parent == &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;!=(iterator &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;other) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;not&lt;/span&gt; (*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; == other);\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; csv&amp;lt;fields...&amp;gt;::iterator csv&amp;lt;fields...&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;iterator&lt;/span&gt;(*&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;... fields&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; csv&amp;lt;fields...&amp;gt;::iterator csv&amp;lt;fields...&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;iterator&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I put a tiny working example on &lt;a href=&quot;https://github.com/LizardM4/ballin-octo-tribble/tree/master/csv&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;; I&apos;ve been using it for parsing some numerical data and it served its purpose.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is another implementation of a Unicode CSV parser (works with wchar_t). I wrote part of it, while Jonathan Leffler wrote the rest.&lt;/p&gt;\n\n&lt;p&gt;Note: This parser is aimed at replicating Excel&apos;s behavior as closely as possible, specifically when importing &lt;strong&gt;broken or malformed&lt;/strong&gt; CSV files.&lt;/p&gt;\n\n&lt;p&gt;This is the original question - &lt;a href=&quot;https://stackoverflow.com/questions/15520113/parsing-csv-file-with-multiline-fields-and-escaped-double-quotes&quot;&gt;Parsing CSV file with multiline fields and escaped double quotes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the code as a SSCCE (Short, Self-Contained, Correct Example).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;wchar.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;wctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;nextCsvField&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *p, &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; sep, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; *newline)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Returns a pointer to the start of the next field,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// or zero if this is the last field in the CSV&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// p is the start position of the field&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// sep is the separator used, i.e. comma or semicolon&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// newline says whether the field ends with a newline or with a comma&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;nextCsvField&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *p, &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; sep, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; *newline)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Parse quoted sequences&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; == p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) {\n        p++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Find next double-quote&lt;/span&gt;\n            p = &lt;span class=&quot;hljs-built_in&quot;&gt;wcschr&lt;/span&gt;(p, &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-comment&quot;&gt;// If we don&apos;t find it or it&apos;s the last symbol&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// then this is the last field&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!p || !p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Check for &quot;&quot;, it is an escaped double-quote&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Skip the escaped double-quote&lt;/span&gt;\n            p += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find next newline or comma.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; newline_or_sep[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;L&quot;\\n\\r &quot;&lt;/span&gt;;\n    newline_or_sep[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = sep;\n    p = &lt;span class=&quot;hljs-built_in&quot;&gt;wcspbrk&lt;/span&gt;(p, newline_or_sep);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If no newline or separator, this is the last field.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!p)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Check if we had newline.&lt;/span&gt;\n    *newline = (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt; || p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle &quot;\\r\\n&quot;, otherwise just increment&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt; &amp;amp;&amp;amp; p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n        p += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        p++;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;csvFieldData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *fld_s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *fld_e, &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *buffer, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; buflen)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *dst = buffer;\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *end = buffer + buflen - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *src = fld_s;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*src == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *p = src + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (p &amp;lt; fld_e &amp;amp;&amp;amp; dst &amp;lt; end)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt; &amp;amp;&amp;amp; p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt; fld_s &amp;amp;&amp;amp; p[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;)\n            {\n                *dst++ = p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n                p += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;L&apos;&quot;&apos;&lt;/span&gt;)\n            {\n                p++;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                *dst++ = *p++;\n        }\n        src = p;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (src &amp;lt; fld_e &amp;amp;&amp;amp; dst &amp;lt; end)\n        *dst++ = *src++;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dst &amp;gt;= end)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    *dst = &lt;span class=&quot;hljs-string&quot;&gt;L&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(buffer);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dissect&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *line)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *start = line;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; *next;\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;     eol;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;wprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Input %3zd: [%.*ls]\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;wcslen&lt;/span&gt;(line), &lt;span class=&quot;hljs-built_in&quot;&gt;wcslen&lt;/span&gt;(line)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, line);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((next = &lt;span class=&quot;hljs-built_in&quot;&gt;nextCsvField&lt;/span&gt;(start, &lt;span class=&quot;hljs-string&quot;&gt;L&apos;,&apos;&lt;/span&gt;, &amp;amp;eol)) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; buffer[&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;wprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Raw Field: [%.*ls] (eol = %d)\\n&quot;&lt;/span&gt;, (next - start - eol), start, eol);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;csvFieldData&lt;/span&gt;(start, next&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, buffer, &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(buffer)/&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-built_in&quot;&gt;wprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Field %3zd: [%ls]\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;wcslen&lt;/span&gt;(buffer), buffer);\n        start = next;\n    }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; multiline[] =\n   &lt;span class=&quot;hljs-string&quot;&gt;L&quot;First field of first row,\\&quot;This field is multiline\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;but that&apos;s OK because it&apos;s enclosed in double quotes, and this\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;is an escaped \\&quot;\\&quot; double quote\\&quot; but this one \\&quot;\\&quot; is not\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;   \\&quot;This is second field of second row, but it is not multiline\\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;   because it doesn&apos;t start \\n&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;   with an immediate double quote\\&quot;\\n&quot;&lt;/span&gt;\n    ;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; line[&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;fgetws&lt;/span&gt;(line, &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(line)/&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(line[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), stdin))\n        &lt;span class=&quot;hljs-built_in&quot;&gt;dissect&lt;/span&gt;(line);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;dissect&lt;/span&gt;(multiline);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is an old thread but its still at the top of search results, so I&apos;m adding my solution using std::stringstream and a simple string replace method by Yves Baumes I found here.  &lt;/p&gt;\n\n&lt;p&gt;The following example will read a file line by line, ignore comment lines starting with // and parse the other lines into a combination of strings, ints and doubles. Stringstream does the parsing, but expects fields to be delimited by whitespace, so I use stringreplace to turn commas into spaces first. It handles tabs ok, but doesn&apos;t deal with quoted strings.&lt;/p&gt;\n\n&lt;p&gt;Bad or missing input is simply ignored, which may or may not be good, depending on your circumstance.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringReplace&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::string&amp;amp; str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; oldStr, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; newStr)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// code by  Yves Baumes&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// http://stackoverflow.com/questions/1494399/how-do-i-search-find-and-replace-in-a-standard-string&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(oldStr, pos)) != std::string::npos)\n  {\n     str.&lt;span class=&quot;hljs-built_in&quot;&gt;replace&lt;/span&gt;(pos, oldStr.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(), newStr);\n     pos += newStr.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;();\n  }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoadCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::string &amp;amp;filename)&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream &lt;span class=&quot;hljs-title&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(filename)&lt;/span&gt;&lt;/span&gt;;\n   std::string in_line;\n   std::string Field;\n   std::string Chan;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ChanType;\n   &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; Scale;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; Import;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(stream, in_line)) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;StringReplace&lt;/span&gt;(in_line, &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(in_line)&lt;/span&gt;&lt;/span&gt;;\n      line &amp;gt;&amp;gt; Field &amp;gt;&amp;gt; Chan &amp;gt;&amp;gt; ChanType &amp;gt;&amp;gt; Scale &amp;gt;&amp;gt; Import;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Field.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)!=&lt;span class=&quot;hljs-string&quot;&gt;&quot;//&quot;&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-comment&quot;&gt;// do your stuff &lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;// this is CBuilder code for demonstration, sorry&lt;/span&gt;\n         &lt;span class=&quot;hljs-built_in&quot;&gt;ShowMessage&lt;/span&gt;((String)Field.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + Chan.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;IntToStr&lt;/span&gt;(ChanType) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; +&lt;span class=&quot;hljs-built_in&quot;&gt;FloatToStr&lt;/span&gt;(Scale) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; +&lt;span class=&quot;hljs-built_in&quot;&gt;IntToStr&lt;/span&gt;(Import));\n      }\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed an easy-to-use C++ library for parsing CSV files but couldn&apos;t find any available, so I ended up building one.\n&lt;a href=&quot;https://github.com/d99kris/rapidcsv/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rapidcsv&lt;/a&gt; is a C++11 header-only library which gives direct access to parsed columns (or rows) as vectors, in datatype of choice. For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;rapidcsv.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;rapidcsv::Document &lt;span class=&quot;hljs-title&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../tests/msft.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n  std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt; close = doc.&lt;span class=&quot;hljs-built_in&quot;&gt;GetColumn&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Close&quot;&lt;/span&gt;);\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Read &quot;&lt;/span&gt; &amp;lt;&amp;lt; close.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; values.&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the header-only &lt;a href=&quot;https://github.com/ashaduri/csv-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;Csv::Parser&lt;/a&gt; library.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It fully supports RFC 4180, including quoted values, escaped quotes, and newlines in field values.&lt;/li&gt;\n&lt;li&gt;It requires only standard C++ (C++17).&lt;/li&gt;\n&lt;li&gt;It supports reading CSV data from &lt;code&gt;std::string_view&lt;/code&gt; at compile-time.&lt;/li&gt;\n&lt;li&gt;It&apos;s extensively tested using &lt;a href=&quot;https://github.com/catchorg/Catch2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Catch2&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Here is code for reading a matrix, note you also have a csvwrite function in matlab&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;loadFromCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; filename )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::ifstream       &lt;span class=&quot;hljs-title&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( filename.c_str() )&lt;/span&gt;&lt;/span&gt;;\n    std::vector&amp;lt; std::vector&amp;lt;std::string&amp;gt; &amp;gt;   matrix;\n    std::vector&amp;lt;std::string&amp;gt;   row;\n    std::string                line;\n    std::string                cell;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( file )\n    {\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(file,line);\n        &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;lineStream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line)&lt;/span&gt;&lt;/span&gt;;\n        row.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( std::&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;( lineStream, cell, &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; ) )\n            row.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( cell );\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( !row.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() )\n            matrix.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( row );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(matrix.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()); i++ )\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(matrix[i].&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;()); j++ )\n            std::cout &amp;lt;&amp;lt; matrix[i][j] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n\n        std::cout &amp;lt;&amp;lt; std::endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Excuse me, but this all seems like a great deal of elaborate syntax to hide a few lines of code.&lt;/p&gt;\n\n&lt;p&gt;Why not this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n\n  Read line from a CSV file\n\n  @param[in] fp file pointer to open file\n  @param[in] vls reference to vector of strings to hold next line\n\n  */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;readCSV&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( FILE *fp, std::vector&amp;lt;std::string&amp;gt;&amp;amp; vls )&lt;/span&gt;\n&lt;/span&gt;{\n    vls.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ! fp )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ! &lt;span class=&quot;hljs-built_in&quot;&gt;fgets&lt;/span&gt;( buf,&lt;span class=&quot;hljs-number&quot;&gt;999&lt;/span&gt;,fp) )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n    std::string s = buf;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; p,q;\n    q = &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// loop over columns&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ) {\n        p = q;\n        q = s.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,\\n&quot;&lt;/span&gt;,p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( q == &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; ) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        vls.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( s.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,q-p&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) );\n    }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])\n{\n    std::vector&amp;lt;std::string&amp;gt; vls;\n    FILE * fp = &lt;span class=&quot;hljs-built_in&quot;&gt;fopen&lt;/span&gt;( argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt; );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ! fp )\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;( fp, vls );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;( fp, vls );\n    &lt;span class=&quot;hljs-built_in&quot;&gt;readCSV&lt;/span&gt;( fp, vls );\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;row 3, col 4 is &quot;&lt;/span&gt; &amp;lt;&amp;lt; vls[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can open and read .csv file using fopen ,fscanf functions ,but the important thing is to parse the data.Simplest way to parse the data using delimiter.In case of .csv , delimiter is &apos;,&apos;.&lt;/p&gt;\n\n&lt;p&gt;Suppose your data1.csv file is as follows : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;A,&lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;\nB,&lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;02&lt;/span&gt;\nC,&lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;\nD,&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you can tokenize data and store in char array and later use atoi() etc function for appropriate conversions  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;FILE *fp;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; str1[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;], str2[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;], str3[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;], str4[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n\nfp = &lt;span class=&quot;hljs-built_in&quot;&gt;fopen&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;G:\\\\data1.csv&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; == fp)\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nError in opening file.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(EOF != &lt;span class=&quot;hljs-built_in&quot;&gt;fscanf&lt;/span&gt;(fp, &lt;span class=&quot;hljs-string&quot;&gt;&quot; %[^,], %[^,], %[^,], %s, %s, %s, %s &quot;&lt;/span&gt;, str1, str2, str3, str4))\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n%s %s %s %s&quot;&lt;/span&gt;, str1, str2, str3, str4);\n}\n&lt;span class=&quot;hljs-built_in&quot;&gt;fclose&lt;/span&gt;(fp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;[^,], ^ -it inverts logic , means match any string that does not contain comma then last , says to match comma that terminated previous string. &lt;/p&gt;\n    ","\n&lt;p&gt;The first thing you need to do is make sure the file exists. To accomplish\nthis you just need to try and open the file stream at the path. After you\nhave opened the file stream use stream.fail() to see if it worked as expected,\nor not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fileExists&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string fileName)&lt;/span&gt;\n&lt;/span&gt;{\n\nifstream test;\n\ntest.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fileName.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test.&lt;span class=&quot;hljs-built_in&quot;&gt;fail&lt;/span&gt;())\n{\n    test.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n{\n    test.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You must also verify that the file provided is the correct type of file.\nTo accomplish this you need to look through the file path provided until \nyou find the file extension. Once you have the file extension make sure\nthat it is a .csv file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;verifyExtension&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string filename)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; period = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filename[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n        period = i;\n}\n\nstring extension;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = period; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n    extension += filename[i];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (extension == &lt;span class=&quot;hljs-string&quot;&gt;&quot;.csv&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function will return the file extension which is used later in an error message.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;getExtension&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string filename)&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; period = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (filename[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n        period = i;\n}\n\nstring extension;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (period != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = period; i &amp;lt; filename.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n        extension += filename[i];\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    extension = &lt;span class=&quot;hljs-string&quot;&gt;&quot;NO FILE&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; extension;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function will actually call the error checks created above and then parse through the file.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parseFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string fileName)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;fileExists&lt;/span&gt;(fileName) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;verifyExtension&lt;/span&gt;(fileName))\n    {\n        ifstream fs;\n        fs.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(fileName.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n        string fileCommand;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (fs.&lt;span class=&quot;hljs-built_in&quot;&gt;good&lt;/span&gt;())\n        {\n            string temp;\n\n            &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(fs, fileCommand, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fileCommand.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;(); i++)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fileCommand[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)\n                    temp += fileCommand[i];\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                    temp += &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (temp != &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\0&quot;&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Place your code here to run the file.&lt;/span&gt;\n            }\n        }\n        fs.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;fileExists&lt;/span&gt;(fileName))\n    {\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: The provided file does not exist: &quot;&lt;/span&gt; &amp;lt;&amp;lt; fileName &amp;lt;&amp;lt; endl;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;verifyExtension&lt;/span&gt;(fileName))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getExtension&lt;/span&gt;(fileName) != &lt;span class=&quot;hljs-string&quot;&gt;&quot;NO FILE&quot;&lt;/span&gt;)\n                cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\tCheck the file extension.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\tThere is no file in the provided path.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;verifyExtension&lt;/span&gt;(fileName)) \n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getExtension&lt;/span&gt;(fileName) != &lt;span class=&quot;hljs-string&quot;&gt;&quot;NO FILE&quot;&lt;/span&gt;)\n            cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Incorrect file extension provided: &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;getExtension&lt;/span&gt;(fileName) &amp;lt;&amp;lt; endl;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;There is no file in the following path: &quot;&lt;/span&gt; &amp;lt;&amp;lt; fileName &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since i&apos;m not used to boost right now, I will suggest a more simple solution. Lets suppose that your .csv file has 100 lines with 10 numbers in each line separated by a &apos;,&apos;. You could load this data in the form of an array with the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; A[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n    ifstream ifs;\n    ifs.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name_of_file.csv&quot;&lt;/span&gt;);\n    string s1;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;; k++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(ifs,s1);\n        &lt;span class=&quot;hljs-function&quot;&gt;stringstream &lt;span class=&quot;hljs-title&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s1)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        {\n            stream &amp;gt;&amp;gt;A[k][j];\n            stream &amp;gt;&amp;gt; c;\n            j++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!stream) {&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;}\n        }\n    }\n\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use this library:\n&lt;a href=&quot;https://github.com/vadamsky/csvworker&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/vadamsky/csvworker&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Code for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;csvworker.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n    CsvWorker csv;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;loadFromFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;example.csv&quot;&lt;/span&gt;);\n    cout &amp;lt;&amp;lt; csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getRowsNumber&lt;/span&gt;() &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt; &amp;lt;&amp;lt; csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getColumnsNumber&lt;/span&gt;() &amp;lt;&amp;lt; endl;\n\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getRowsNumber&lt;/span&gt;();++i)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//cout &amp;lt;&amp;lt; csv.getRow(i) &amp;lt;&amp;lt; endl;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getColumnsNumber&lt;/span&gt;();++j)\n        {\n            cout &amp;lt;&amp;lt; csv.&lt;span class=&quot;hljs-built_in&quot;&gt;getField&lt;/span&gt;(i, j) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;;\n        }\n        cout &amp;lt;&amp;lt; endl;\n    }\n\n    csv.&lt;span class=&quot;hljs-built_in&quot;&gt;saveToFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;CsvWorker &lt;span class=&quot;hljs-title&quot;&gt;csv2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;;\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;getFieldRef&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n\n    csv2.&lt;span class=&quot;hljs-built_in&quot;&gt;saveToFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test2.csv&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You gotta feel proud when you use something so beautiful as &lt;code&gt;boost::spirit&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here my attempt of a parser (almost) complying with the CSV specifications on this link &lt;a href=&quot;http://www.ietf.org/rfc/rfc4180.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSV specs&lt;/a&gt; (I didn&apos;t need line breaks within fields. Also the spaces around the commas are dismissed).&lt;/p&gt;\n\n&lt;p&gt;After you overcome the shocking experience of waiting 10 seconds for compiling this code :), you can sit back and enjoy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// csvparser.cpp&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/spirit/include/qi.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/spirit/include/phoenix_operator.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; qi = boost::spirit::qi;\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; bascii = boost::spirit::ascii;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Iterator&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;csv_parser&lt;/span&gt; : qi::grammar&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;std::string&amp;gt;(), \n    bascii::space_type&amp;gt;\n{\n    qi::rule&amp;lt;Iterator, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;()                                           &amp;gt; COMMA;\n    qi::rule&amp;lt;Iterator, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;()                                           &amp;gt; DDQUOTE;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(),               bascii::space_type  &amp;gt; non_escaped;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(),               bascii::space_type  &amp;gt; escaped;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(),               bascii::space_type  &amp;gt; field;\n    qi::rule&amp;lt;Iterator, std::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;std::string&amp;gt;(),  bascii::space_type  &amp;gt; start;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;csv_parser&lt;/span&gt;() : csv_parser::&lt;span class=&quot;hljs-built_in&quot;&gt;base_type&lt;/span&gt;(start)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; qi;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; qi::lit;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; qi::lexeme;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; bascii::char_;\n\n        start       = field % &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;;\n        field       = escaped | non_escaped;\n        escaped     = lexeme[&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; &amp;gt;&amp;gt; *( char_ -(&lt;span class=&quot;hljs-built_in&quot;&gt;char_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) | &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) | COMMA | DDQUOTE)  &amp;gt;&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;];\n        non_escaped = lexeme[       *( char_ -(&lt;span class=&quot;hljs-built_in&quot;&gt;char_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;) | &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;)                  )        ];\n        DDQUOTE     = &lt;span class=&quot;hljs-built_in&quot;&gt;lit&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\&quot;\\&quot;&quot;&lt;/span&gt;)       [_val = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;];\n        COMMA       = &lt;span class=&quot;hljs-built_in&quot;&gt;lit&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;)          [_val = &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;];\n    }\n\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter CSV lines [empty] to quit\\n&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; bascii::space;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; std::string::const_iterator iterator_type;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; csv_parser&amp;lt;iterator_type&amp;gt; csv_parser;\n\n    csv_parser grammar;\n    std::string str;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fid;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(std::cin, str))\n    {\n        fid = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (str.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n        std::vector&amp;lt;std::string&amp;gt; csv;\n        std::string::const_iterator it_beg = str.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;();\n        std::string::const_iterator it_end = str.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; r = &lt;span class=&quot;hljs-built_in&quot;&gt;phrase_parse&lt;/span&gt;(it_beg, it_end, grammar, space, csv);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (r &amp;amp;&amp;amp; it_beg == it_end)\n        {\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Parsing succeeded\\n&quot;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp; field: csv)\n            {\n                std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;field &quot;&lt;/span&gt; &amp;lt;&amp;lt; ++fid &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt; &amp;lt;&amp;lt; field &amp;lt;&amp;lt; std::endl;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Parsing failed\\n&quot;&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compile:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;make csvparser\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test (example stolen from &lt;a href=&quot;https://en.wikipedia.org/wiki/Comma-separated_values#Example&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;./csvparser\nEnter CSV lines [empty] to quit\n\n1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00\nParsing succeeded\nfield 1: 1999\nfield 2: Chevy\nfield 3: Venture &quot;Extended Edition, Very Large&quot;\nfield 4: \nfield 5: 5000.00\n\n1999,Chevy,&quot;Venture &quot;&quot;Extended Edition, Very Large&quot;&quot;&quot;,,5000.00&quot;\nParsing failed\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution detects these 4 cases&lt;/p&gt;\n\n&lt;p&gt;complete class is at&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/pedro-vicente/csv-parser&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/pedro-vicente/csv-parser&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;field 3 quoted, with separator&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;field 3\nwith newline&quot;&lt;/span&gt;,\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,field &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;field 3\nwith newline and separator,&quot;&lt;/span&gt;,\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It reads the file character by character, and reads 1 row at a time to a vector (of strings), therefore suitable for very large files.&lt;/p&gt;\n\n&lt;p&gt;Usage is&lt;/p&gt;\n\n&lt;p&gt;Iterate until an empty row is returned (end of file). A row is a vector where each entry is a CSV column.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;read_csv_t&lt;/span&gt; csv;\ncsv.&lt;span class=&quot;hljs-built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../test.csv&quot;&lt;/span&gt;);\nstd::vector&amp;lt;std::string&amp;gt; row;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n{\n  row = csv.&lt;span class=&quot;hljs-built_in&quot;&gt;read_row&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (row.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the class declaration&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;read_csv_t&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;read_csv_t&lt;/span&gt;();\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;file_name)&lt;/span&gt;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;read_row&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n  std::ifstream m_ifs;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the implementation&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;read_csv_t::read_row&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; quote_mode = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  std::vector&amp;lt;std::string&amp;gt; row;\n  std::string column;\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (m_ifs.&lt;span class=&quot;hljs-built_in&quot;&gt;get&lt;/span&gt;(c))\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (c)\n    {\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//separator &apos;,&apos; detected. &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//in quote mode add character to column&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//push column if not in quote mode&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (quote_mode == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n      {\n        column += c;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      {\n        row.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(column);\n        column.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//quote &apos;&quot;&apos; detected. &lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//toggle quote mode&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&apos;&lt;/span&gt;:\n      quote_mode = !quote_mode;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//line end detected&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//in quote mode add character to column&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//return row if not in quote mode&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\r&apos;&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (quote_mode == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n      {\n        column += c;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n      {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; row;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//default, add character to column&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;/////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n      column += c;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//return empty vector if end of file detected &lt;/span&gt;\n  m_ifs.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n  std::vector&amp;lt;std::string&amp;gt; v;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Parsing CSV file lines with Stream&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I wrote a small example of parsing CSV file lines, it can be developed with for and while loops if desired:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;fin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Infile.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-function&quot;&gt;ofstream &lt;span class=&quot;hljs-title&quot;&gt;fout&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;OutFile.csv&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\nstring strline, strremain, strCol1 , strout;\n\nstring delimeter =&lt;span class=&quot;hljs-string&quot;&gt;&quot;;&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; d1;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to continue until the end of the file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!fin.&lt;span class=&quot;hljs-built_in&quot;&gt;eof&lt;/span&gt;()){ \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;get first line from InFile :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(fin,strline,&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);      \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;find delimeter position in line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    d1 = strline.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and parse first column:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    strCol1 = strline.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,d1); &lt;span class=&quot;hljs-comment&quot;&gt;// parse first Column&lt;/span&gt;\n    d1++;\n    strremain = strline.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(d1); &lt;span class=&quot;hljs-comment&quot;&gt;// remaining line&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;create output line in CSV format:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    strout.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(strCol1);\n    strout.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(delimeter);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;write line to Out File:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    fout &amp;lt;&amp;lt; strout &amp;lt;&amp;lt; endl; &lt;span class=&quot;hljs-comment&quot;&gt;//out file line&lt;/span&gt;\n\n} \n\nfin.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\nfout.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code is compiled and running. Good luck!&lt;/p&gt;\n    ","\n&lt;p&gt;You could also take a look at capabilities of &lt;code&gt;Qt&lt;/code&gt; library.&lt;/p&gt;\n\n&lt;p&gt;It has regular expressions support and QString class has nice methods, e.g. &lt;code&gt;split()&lt;/code&gt; returning QStringList, list of strings obtained by splitting the original string with a provided delimiter. Should suffice for csv file.. &lt;/p&gt;\n\n&lt;p&gt;To get a column with a given header name I use following: &lt;a href=&quot;https://stackoverflow.com/questions/970330/c-inheritance-qt-problem-qstring/1011601#1011601&quot;&gt;c++ inheritance Qt problem qstring&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to deal with including boost in your project (it is considerably large if all you are going to use it for is CSV parsing...)&lt;/p&gt;\n\n&lt;p&gt;I have had luck with the CSV parsing here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.zedwood.com/article/112/cpp-csv-parser&quot; rel=&quot;nofollow&quot;&gt;http://www.zedwood.com/article/112/cpp-csv-parser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It handles quoted fields - but does not handle inline \\n characters (which is probably fine for most uses).&lt;/p&gt;\n    ","\n&lt;p&gt;For what it is worth, here is my implementation. It deals with wstring input, but could be adjusted to string easily. It does not handle newline in fields (as my application does not either, but adding its support isn&apos;t too difficult) and it does not comply with &quot;\\r\\n&quot; end of line as per RFC (assuming you use std::getline), but it does handle whitespace trimming and double-quotes correctly (hopefully).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// trim whitespaces around field or double-quotes, remove double-quotes and replace escaped double-quotes (double double-quotes)&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;wstring &lt;span class=&quot;hljs-title&quot;&gt;trimquote&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; whitespace, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; quotChar)&lt;/span&gt;\n&lt;/span&gt;{\n    wstring ws;\n    wstring::size_type strBegin = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(whitespace);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (strBegin == wstring::npos)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;L&quot;&quot;&lt;/span&gt;;\n\n    wstring::size_type strEnd = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_last_not_of&lt;/span&gt;(whitespace);\n    wstring::size_type strRange = strEnd - strBegin + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((str[strBegin] == quotChar) &amp;amp;&amp;amp; (str[strEnd] == quotChar))\n    {\n        ws = str.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(strBegin+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, strRange&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;);\n        strBegin = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((strEnd = ws.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(quotChar, strBegin)) != wstring::npos)\n        {\n            ws.&lt;span class=&quot;hljs-built_in&quot;&gt;erase&lt;/span&gt;(strEnd, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            strBegin = strEnd+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        ws = str.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(strBegin, strRange);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ws;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;pair&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;nextCSVQuotePair&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; line, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; quotChar, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; ofs = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    pair&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;&amp;gt; r;\n    r.first = line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(quotChar, ofs);\n    r.second = wstring::npos;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(r.first != wstring::npos)\n    {\n        r.second = r.first;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(((r.second = line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(quotChar, r.second+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) != wstring::npos)\n            &amp;amp;&amp;amp; (line[r.second+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == quotChar)) &lt;span class=&quot;hljs-comment&quot;&gt;// WARNING: assumes null-terminated string such that line[r.second+1] always exist&lt;/span&gt;\n            r.second++;\n\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;parseLine&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(vector&amp;lt;wstring&amp;gt;&amp;amp; fields, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring&amp;amp; line)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; ofs, ofs0, np;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; delim = &lt;span class=&quot;hljs-string&quot;&gt;L&apos;,&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; wstring whitespace = &lt;span class=&quot;hljs-string&quot;&gt;L&quot; \\t\\xa0\\x3000\\x2000\\x2001\\x2002\\x2003\\x2004\\x2005\\x2006\\x2007\\x2008\\x2009\\x200a\\x202f\\x205f&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;wchar_t&lt;/span&gt; quotChar = &lt;span class=&quot;hljs-string&quot;&gt;L&apos;\\&quot;&apos;&lt;/span&gt;;\n    pair&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;&amp;gt; quot;\n\n    fields.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n\n    ofs = ofs0 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    quot = &lt;span class=&quot;hljs-built_in&quot;&gt;nextCSVQuotePair&lt;/span&gt;(line, quotChar);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((np = line.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(delim, ofs)) != wstring::npos)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((np &amp;gt; quot.first) &amp;amp;&amp;amp; (np &amp;lt; quot.second))\n        { &lt;span class=&quot;hljs-comment&quot;&gt;// skip delimiter inside quoted field&lt;/span&gt;\n            ofs = quot.second+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            quot = &lt;span class=&quot;hljs-built_in&quot;&gt;nextCSVQuotePair&lt;/span&gt;(line, quotChar, ofs);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n        }\n        fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;trimquote&lt;/span&gt;(line.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(ofs0, np-ofs0), whitespace, quotChar) );\n        ofs = ofs0 = np+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    fields.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;trimquote&lt;/span&gt;(line.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(ofs0), whitespace, quotChar) );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fields.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a ready-to use function if all you need is to load a data file of doubles (no integers, no text).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Parse a CSV data file and fill the 2d STL vector &quot;data&quot;.\n * Limits: only &quot;pure datas&quot; of doubles, not encapsulated by &quot; and without \\n inside.\n * Further no formatting in the data (e.g. scientific notation)\n * It however handles both dots and commas as decimal separators and removes thousand separator.\n * \n * returnCodes[0]: file access 0-&amp;gt; ok 1-&amp;gt; not able to read; 2-&amp;gt; decimal separator equal to comma separator\n * returnCodes[1]: number of records\n * returnCodes[2]: number of fields. -1 If rows have different field size\n * \n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-title&quot;&gt;readCsvData&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(vector &amp;lt;vector &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; data, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; filename, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; delimiter, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; decseparator)&lt;/span&gt;&lt;/span&gt;{\n\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; vv[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = { &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; };\n &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;returnCodes&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&amp;amp;vv[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &amp;amp;vv[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]+&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n string rowstring, stringtoken;\n &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; doubletoken;\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; rowcount=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fieldcount=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n data.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n\n &lt;span class=&quot;hljs-function&quot;&gt;ifstream &lt;span class=&quot;hljs-title&quot;&gt;iFile&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(filename, ios_base::in)&lt;/span&gt;&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!iFile.&lt;span class=&quot;hljs-built_in&quot;&gt;is_open&lt;/span&gt;()){\n   returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnCodes;\n }\n &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iFile, rowstring)) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rowstring==&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// empty line&lt;/span&gt;\n    rowcount ++; &lt;span class=&quot;hljs-comment&quot;&gt;//let&apos;s start with 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(delimiter == decseparator){\n      returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnCodes;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(decseparator != &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;){\n     &lt;span class=&quot;hljs-comment&quot;&gt;// remove dots (used as thousand separators)&lt;/span&gt;\n     string::iterator end_pos = &lt;span class=&quot;hljs-built_in&quot;&gt;remove&lt;/span&gt;(rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n     rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;erase&lt;/span&gt;(end_pos, rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n     &lt;span class=&quot;hljs-comment&quot;&gt;// replace decimal separator with dots.&lt;/span&gt;\n     &lt;span class=&quot;hljs-built_in&quot;&gt;replace&lt;/span&gt;(rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(),decseparator.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;); \n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n     &lt;span class=&quot;hljs-comment&quot;&gt;// remove commas (used as thousand separators)&lt;/span&gt;\n     string::iterator end_pos = &lt;span class=&quot;hljs-built_in&quot;&gt;remove&lt;/span&gt;(rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;);\n     rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;erase&lt;/span&gt;(end_pos, rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// tokenize..&lt;/span&gt;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt; tokens;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters at beginning.&lt;/span&gt;\n    string::size_type lastPos = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiter, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find first &quot;non-delimiter&quot;.&lt;/span&gt;\n    string::size_type pos     = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiter, lastPos);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (string::npos != pos || string::npos != lastPos){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Found a token, convert it to double add it to the vector.&lt;/span&gt;\n        stringtoken = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(lastPos, pos - lastPos);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (stringtoken == &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) {\n      tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          istringstream &lt;span class=&quot;hljs-built_in&quot;&gt;totalSString&lt;/span&gt;(stringtoken);\n      totalSString &amp;gt;&amp;gt; doubletoken;\n      tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(doubletoken);\n    }     \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters.  Note the &quot;not_of&quot;&lt;/span&gt;\n        lastPos = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiter, pos);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Find next &quot;non-delimiter&quot;&lt;/span&gt;\n        pos = rowstring.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiter, lastPos);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(rowcount == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n      fieldcount = tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n      returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;() != fieldcount){\n    returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n      }\n    }\n    data.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(tokens);\n }\n iFile.&lt;span class=&quot;hljs-built_in&quot;&gt;close&lt;/span&gt;();\n returnCodes[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = rowcount;\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; returnCodes;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"403":["\n&lt;p&gt;Here are some options using &lt;code&gt;toString&lt;/code&gt;, a function that concatenates a vector of strings using comma and space to separate components. If you don&apos;t want commas, you can use &lt;code&gt;paste()&lt;/code&gt; with the &lt;code&gt;collapse&lt;/code&gt; argument instead.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;data.table&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# alternative using data.table&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data.table&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nas.data.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;aggregate&lt;/strong&gt; This uses no packages:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# alternative using aggregate from the stats package in the core of R&lt;/span&gt;\naggregate&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;.&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;sqldf&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;And here is an alternative using the SQL function &lt;code&gt;group_concat&lt;/code&gt; using the &lt;a href=&quot;http://sqldf.googlecode.com&quot; rel=&quot;noreferrer&quot;&gt;sqldf package&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sqldf&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nsqldf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;select A, B, group_concat(C) C from data group by A, B&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; method &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;dplyr&lt;/strong&gt; A &lt;code&gt;dplyr&lt;/code&gt; alternative:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dplyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndata &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  group_by&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  summarise&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;test &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  ungroup&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;plyr&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# plyr&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;plyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nddply&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; .&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; summarize&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; C &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s the &lt;code&gt;stringr&lt;/code&gt;/&lt;code&gt;tidyverse&lt;/code&gt; solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;tidyverse&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;stringr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\ndata &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; C &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n\ndata &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n group_by&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n summarize&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; str_c&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; collapse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# A tibble: 4 x 3&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Groups:   A [2]&lt;/span&gt;\n      A     B text \n  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;dbl&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;int&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;chr&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; \n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;    \n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Change where you put &lt;code&gt;as.character&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; out &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; ddply&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; .&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; summarise&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; test &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;as.character&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; str&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;out&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;data.frame&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; obs. of  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; variables&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; A   &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; num  &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; B   &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; int  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; test&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;List of &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr  &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;7&quot;&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr &lt;span class=&quot;hljs-string&quot;&gt;&quot;6&quot;&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr &lt;span class=&quot;hljs-string&quot;&gt;&quot;9&quot;&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr  &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; out\n    A B  test\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note in this case that each item is still actually a separate character, not a single character string. That is, this is not an actual string that looks like &quot;5, 7&quot;, but rather, two characters, &quot;5&quot; and &quot;7&quot;, which R displays with a comma between them.&lt;/p&gt;\n&lt;p&gt;Compare with the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; out2 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; ddply&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; .&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; summarise&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; test &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; paste&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; collapse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; str&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;out2&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;data.frame&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; obs. of  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; variables&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; A   &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; num  &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; B   &lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; int  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; test&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr  &lt;span class=&quot;hljs-string&quot;&gt;&quot;5, 7&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;6&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;9&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;8, 10&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; out\n    A B  test\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;The comparable solution in base R is, of course, &lt;code&gt;aggregate&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; A1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; A &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;as.character&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; str&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;data.frame&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; obs. of  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; variables&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; A&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; num  &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; B&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; int  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; C&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;List of &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr  &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;7&quot;&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr &lt;span class=&quot;hljs-string&quot;&gt;&quot;9&quot;&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr &lt;span class=&quot;hljs-string&quot;&gt;&quot;6&quot;&lt;/span&gt;\n  ..&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr  &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; A2 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; A &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; paste&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; collapse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; str&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A2&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;data.frame&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; obs. of  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; variables&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; A&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; num  &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; B&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; int  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt; C&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; chr  &lt;span class=&quot;hljs-string&quot;&gt;&quot;5, 7&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;9&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;6&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;8, 10&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a small improvement here to avoid duplicates&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 1. Original data set&lt;/span&gt;\ndata &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n  A &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  B &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  C &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2. Add duplicate row&lt;/span&gt;\ndata &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; rbind&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n  A &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; C &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 3. Solution with duplicates&lt;/span&gt;\ndata &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  group_by&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  summarise&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;test &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  ungroup&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#      A     B test   &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1   111     1 5, 7, 5&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2   111     2 6      &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 3   222     1 9      &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 4   222     2 8, 10&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# 4. Solution without duplicates&lt;/span&gt;\ndata &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  select&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt; unique&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt; \n  group_by&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  summarise&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;test &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n  ungroup&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#    A     B test &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1   111     1 5, 7 &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2   111     2 6    &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 3   222     1 9    &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 4   222     2 8, 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope it can be useful.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;collap&lt;/code&gt; from &lt;code&gt;collapse&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;collapse&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ncollap&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; A &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; B&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; toString&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n    A B     C\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;data&lt;/h3&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;data &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;A &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; B &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; C &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"404":["\n&lt;p&gt;There are many reasons why one might run into this error and thus a good checklist of what to check first helps considerably.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s consider that we are troubleshooting the following line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h1&gt;Checklist&lt;/h1&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;1. Check the file path for typos&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;either check manually (by visually checking the path)&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;or move whatever is called by &lt;code&gt;require*&lt;/code&gt; or &lt;code&gt;include*&lt;/code&gt; to its own variable, echo it, copy it, and try accessing it from a terminal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$path&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/file&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Path : &lt;span class=&quot;hljs-subst&quot;&gt;$path&lt;/span&gt;&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$path&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, in a terminal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;cat &amp;lt;file path pasted&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;2. Check that the file path is correct regarding relative vs absolute path considerations&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;if it is starting by a forward slash &quot;/&quot; then it is not referring to the root of your website&apos;s folder (the document root), but to the root of your server.\n\n&lt;ul&gt;\n&lt;li&gt;for example, your website&apos;s directory might be &lt;code&gt;/users/tony/htdocs&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;if it is not starting by a forward slash then it is either relying on the include path (see below) or the path is relative. If it is relative, then PHP will calculate relatively to the path of the &lt;a href=&quot;https://secure.php.net/manual/en/function.getcwd.php&quot; rel=&quot;noreferrer&quot;&gt;current working directory&lt;/a&gt;.\n\n&lt;ul&gt;\n&lt;li&gt;thus, not relative to the path of your web site&apos;s root, or to the file where you are typing&lt;/li&gt;\n&lt;li&gt;for that reason, always use absolute file paths&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Best practices :&lt;/p&gt;\n\n&lt;p&gt;In order to make your script robust in case you move things around, while still generating an absolute path at runtime, you have 2 options :&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;use &lt;code&gt;require __DIR__ . &quot;/relative/path/from/current/file&quot;&lt;/code&gt;. The &lt;a href=&quot;https://secure.php.net/manual/en/language.constants.predefined.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;__DIR__&lt;/code&gt; magic constant&lt;/a&gt; returns the directory of the current file.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;define a &lt;code&gt;SITE_ROOT&lt;/code&gt; constant yourself :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;at the root of your web site&apos;s directory, create a file, e.g. &lt;code&gt;config.php&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;in &lt;code&gt;config.php&lt;/code&gt;, write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SITE_ROOT&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__DIR__&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;in every file where you want to reference the site root folder, include &lt;code&gt;config.php&lt;/code&gt;, and then use the &lt;code&gt;SITE_ROOT&lt;/code&gt; constant wherever you like :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;__DIR__&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/../config.php&quot;&lt;/span&gt;;\n...\n&lt;span class=&quot;hljs-keyword&quot;&gt;require_once&lt;/span&gt; SITE_ROOT.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/other/file.php&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;These 2 practices also make your application more portable because it does not rely on ini settings like the include path.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;3. Check your include path&lt;/h2&gt;\n\n&lt;p&gt;Another way to include files, neither relatively nor purely absolutely, is to rely on the &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.include-path&quot; rel=&quot;noreferrer&quot;&gt;include path&lt;/a&gt;. This is often the case for libraries or frameworks such as the Zend framework.&lt;/p&gt;\n\n&lt;p&gt;Such an inclusion will look like this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zend/Mail/Protocol/Imap.php&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In that case, you will want to make sure that the folder where &quot;Zend&quot; is, is part of the include path.&lt;/p&gt;\n\n&lt;p&gt;You can check the include path with :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_include_path&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can add a folder to it with :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set_include_path&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_include_path&lt;/span&gt;().&lt;span class=&quot;hljs-string&quot;&gt;&quot;:&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/new/folder&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;4. Check that your server has access to that file&lt;/h2&gt;\n\n&lt;p&gt;It might be that all together, the user running the server process (Apache or PHP) simply doesn&apos;t have permission to read from or write to that file.&lt;/p&gt;\n\n&lt;p&gt;To check under what user the server is running you can use &lt;a href=&quot;https://secure.php.net/manual/en/function.posix-getpwuid.php&quot; rel=&quot;noreferrer&quot;&gt;posix_getpwuid&lt;/a&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;posix_getpwuid&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;posix_geteuid&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To find out the permissions on the file, type the following command in the terminal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;ls -l &amp;lt;path/to/file&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and look at &lt;a href=&quot;https://en.wikipedia.org/wiki/File_system_permissions#Symbolic_notation&quot; rel=&quot;noreferrer&quot;&gt;permission symbolic notation&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;5. Check PHP settings&lt;/h2&gt;\n\n&lt;p&gt;If none of the above worked, then the issue is probably that some PHP settings forbid it to access that file.&lt;/p&gt;\n\n&lt;p&gt;Three settings could be relevant :&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.open-basedir&quot; rel=&quot;noreferrer&quot;&gt;open_basedir&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If this is set PHP won&apos;t be able to access any file outside of the specified directory (not even through a symbolic link).&lt;/li&gt;\n&lt;li&gt;However, the default behavior is for it not to be set in which case there is no restriction&lt;/li&gt;\n&lt;li&gt;This can be checked by either calling &lt;a href=&quot;https://secure.php.net/manual/en/function.phpinfo.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;phpinfo()&lt;/code&gt;&lt;/a&gt; or by using &lt;code&gt;ini_get(&quot;open_basedir&quot;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;You can change the setting either by editing your php.ini file or your httpd.conf file&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://secure.php.net/manual/en/features.safe-mode.php&quot; rel=&quot;noreferrer&quot;&gt;safe mode&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;if this is turned on restrictions might apply. However, this has been removed in PHP 5.4. If you are still on a version that supports safe mode upgrade to a PHP version that is &lt;a href=&quot;http://php.net/eol.php&quot; rel=&quot;noreferrer&quot;&gt;still being supported&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://secure.php.net/manual/en/filesystem.configuration.php&quot; rel=&quot;noreferrer&quot;&gt;allow_url_fopen and allow_url_include&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;this applies only to including or opening files through a network process such as http:// not when trying to include files on the local file system&lt;/li&gt;\n&lt;li&gt;this can be checked with &lt;code&gt;ini_get(&quot;allow_url_include&quot;)&lt;/code&gt; and set with &lt;code&gt;ini_set(&quot;allow_url_include&quot;, &quot;1&quot;)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h1&gt;Corner cases&lt;/h1&gt;\n\n&lt;p&gt;If none of the above enabled to diagnose the problem, here are some special situations that could happen :&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;1. The inclusion of library relying on the include path&lt;/h2&gt;\n\n&lt;p&gt;It can happen that you include a library, for example, the Zend framework, using a relative or absolute path. For example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/share/php/libzend-framework-php/Zend/Mail/Protocol/Imap.php&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But then you still get the same kind of error.&lt;/p&gt;\n\n&lt;p&gt;This could happen because the file that you have (successfully) included, has itself an include statement for another file, and that second include statement assumes that you have added the path of that library to the include path.&lt;/p&gt;\n\n&lt;p&gt;For example, the Zend framework file mentioned before could have the following include :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Zend/Mail/Protocol/Exception.php&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is neither an inclusion by relative path, nor by absolute path. It is assuming that the Zend framework directory has been added to the include path.&lt;/p&gt;\n\n&lt;p&gt;In such a case, the only practical solution is to add the directory to your include path.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;2. SELinux&lt;/h2&gt;\n\n&lt;p&gt;If you are running Security-Enhanced Linux, then it might be the reason for the problem, by denying access to the file from the server.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To check whether SELinux is enabled&lt;/strong&gt; on your system, run the &lt;code&gt;sestatus&lt;/code&gt; command in a terminal. If the command does not exist, then SELinux is not on your system. If it does exist, then it should tell you whether it is enforced or not.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To check whether SELinux policies are the reason&lt;/strong&gt; for the problem, you can try turning it off temporarily. However be CAREFUL, since this will disable protection entirely. Do not do this on your production server.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;setenforce &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you no longer have the problem with SELinux turned off, then this is the root cause.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To solve it&lt;/strong&gt;, you will have to configure SELinux accordingly.&lt;/p&gt;\n\n&lt;p&gt;The following context types will be necessary :&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;httpd_sys_content_t&lt;/code&gt; for files that you want your server to be able to read&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;httpd_sys_rw_content_t&lt;/code&gt; for files on which you want read and write access&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;httpd_log_t&lt;/code&gt; for log files&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;httpd_cache_t&lt;/code&gt; for the cache directory&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For example, to assign the &lt;code&gt;httpd_sys_content_t&lt;/code&gt; context type to your website root directory, run :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;semanage fcontext -a -t httpd_sys_content_t &lt;span class=&quot;hljs-string&quot;&gt;&quot;/path/to/root(/.*)?&quot;&lt;/span&gt;\nrestorecon -Rv /path/to/root\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your file is in a home directory, you will also need to turn on the &lt;code&gt;httpd_enable_homedirs&lt;/code&gt; boolean :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;setsebool -P httpd_enable_homedirs &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In any case, there could be a variety of reasons why SELinux would deny access to a file, depending on your policies. So you will need to enquire into that. &lt;a href=&quot;http://www.serverlab.ca/tutorials/linux/web-servers-linux/configuring-selinux-policies-for-apache-web-servers/&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt; is a tutorial specifically on configuring SELinux for a web server.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;3. Symfony&lt;/h2&gt;\n\n&lt;p&gt;If you are using Symfony, and experiencing this error when uploading to a server, then it can be that the app&apos;s cache hasn&apos;t been reset, either because &lt;code&gt;app/cache&lt;/code&gt; has been uploaded, or that cache hasn&apos;t been cleared.&lt;/p&gt;\n\n&lt;p&gt;You can test and fix this by running the following console command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;cache:clear\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;4. Non ACSII characters inside Zip file&lt;/h2&gt;\n\n&lt;p&gt;Apparently, this error can happen also upon calling &lt;code&gt;zip-&amp;gt;close()&lt;/code&gt; when some files inside the zip have non-ASCII characters in their filename, such as &quot;é&quot;.&lt;/p&gt;\n\n&lt;p&gt;A potential solution is to wrap the file name in &lt;code&gt;utf8_decode()&lt;/code&gt; before creating the target file.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Credits to &lt;a href=&quot;https://stackoverflow.com/users/4217158/fran-cano&quot;&gt;Fran Cano&lt;/a&gt; for identifying and suggesting a solution to this issue&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To add to the (really good) existing answer&lt;/p&gt;\n&lt;h1&gt;Shared Hosting Software&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;open_basedir&lt;/code&gt; is one that can stump you because it can be specified in a web server configuration. While this is easily remedied if you run your own dedicated server, there are some shared hosting software packages out there (like Plesk, cPanel, etc) that will configure a configuration directive on a per-domain basis. Because the software builds the configuration file (i.e. &lt;code&gt;httpd.conf&lt;/code&gt;) you cannot change that file directly because the hosting software will just overwrite it when it restarts.&lt;/p&gt;\n&lt;p&gt;With Plesk, they provide a place to override the provided &lt;code&gt;httpd.conf&lt;/code&gt; called &lt;code&gt;vhost.conf&lt;/code&gt;. Only the server admin can write this file. The configuration for Apache looks something like this&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;Directory&lt;/span&gt; /&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;/www/vhosts/domain.com&amp;gt;\n    &amp;lt;IfModule mod_php5.c&amp;gt;\n        php_admin_flag engine on\n        php_admin_flag safe_mode off\n        php_admin_value open_basedir &lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/www/vhosts/domain.com:/tmp:/usr/share/pear:/local/PEAR&quot;&lt;/span&gt;\n    &amp;lt;/IfModule&amp;gt;\n&amp;lt;/&lt;span class=&quot;hljs-built_in&quot;&gt;Directory&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Have your server admin consult the manual for the hosting and web server software they use.&lt;/p&gt;\n&lt;h1&gt;File Permissions&lt;/h1&gt;\n&lt;p&gt;It&apos;s important to note that executing a file through your web server is very different from a command line or cron job execution. The big difference is that your web server has its own user and permissions. For security reasons that user is pretty restricted. Apache, for instance, is often &lt;code&gt;apache&lt;/code&gt;, &lt;code&gt;www-data&lt;/code&gt; or &lt;code&gt;httpd&lt;/code&gt; (depending on your server). A cron job or CLI execution has whatever permissions that the user running it has (i.e. running a PHP script as root will execute with permissions of root).&lt;/p&gt;\n&lt;p&gt;A lot of times people will solve a permissions problem by doing the following (Linux example)&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;chmod &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt; /path/to/file\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is not a smart idea, because the file or directory is now world writable. If you own the server and are the only user then this isn&apos;t such a big deal, but if you&apos;re on a shared hosting environment you&apos;ve just given everyone on your server access.&lt;/p&gt;\n&lt;p&gt;What you need to do is determine the user(s) that need access and give only those them access. Once you know which users need access you&apos;ll want to make sure that&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;That user owns the file &lt;strong&gt;and possibly the parent directory&lt;/strong&gt; (especially the parent directory if you want to write files). In most shared hosting environments this won&apos;t be an issue, because your user should own all the files underneath your root. A Linux example is shown below&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; chown apache:apache /path/to/file\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The user, and only that user, has access. In Linux, a good practice would be &lt;code&gt;chmod 600&lt;/code&gt; (only owner can read and write) or &lt;code&gt;chmod 644&lt;/code&gt; (owner can write but everyone can read)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;You can &lt;a href=&quot;https://unix.stackexchange.com/questions/35711/giving-php-permission-to-write-to-files-and-folders&quot;&gt;read a more extended discussion of Linux/Unix permissions and users here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;Look at the &lt;strong&gt;exact&lt;/strong&gt; error&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;My code worked fine on all machines but only on this one started giving problem (which used to work find I guess). Used echo &quot;document_root&quot; path to debug and also looked closely at the error, found this&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Warning:\n  include(&lt;strong&gt;D:/MyProjects/testproject//functions/connections.php&lt;/strong&gt;):\n  failed to open stream:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can easily see where the problems are. The problems are // before functions&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$document_root&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;DOCUMENT_ROOT&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;root: &lt;span class=&quot;hljs-subst&quot;&gt;$document_root&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$document_root&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;/functions/connections.php&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So simply remove the lading / from include and it should work fine. What is interesting is this behaviors is different on different versions. I run the same code on Laptop, Macbook Pro and this PC, all worked fine untill. Hope this helps someone.&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Copy past the file location in the browser to make sure file exists. Sometimes files get deleted unexpectedly (happened with me) and it was also the issue in my case.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Samba Shares&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you have a Linux test server and you work from a Windows Client, the Samba share interferes with the &lt;em&gt;chmod&lt;/em&gt; command. So, even if you use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;chmod -R &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt; myfolder\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;on the Linux side it is fully possible that the Unix Group\\www-data still doesn&apos;t have write access. One working solution if your share is set up that Windows admins are mapped to root: From Windows, open the Permissions, disable Inheritance for your folder with copy, and then grant full access for www-data. &lt;/p&gt;\n    ","\n&lt;h1&gt;Add script with query parameters&lt;/h1&gt;\n\n&lt;p&gt;That was my case. It actually links to &lt;a href=&quot;https://stackoverflow.com/a/4485874/10198757&quot;&gt;question #4485874&lt;/a&gt;, but I&apos;m going to explain it here shortly.&lt;br&gt;\nWhen you try to require &lt;code&gt;path/to/script.php?parameter=value&lt;/code&gt;, PHP looks for file named &lt;code&gt;script.php?parameter=value&lt;/code&gt;, because UNIX allows you to have paths like this.&lt;br&gt;\nIf you are really need to pass some data to included script, just declare it as &lt;code&gt;$variable=...&lt;/code&gt; or &lt;code&gt;$GLOBALS[]=...&lt;/code&gt; or other way you like.&lt;/p&gt;\n    ","\n&lt;p&gt;The following PHP settings in &lt;code&gt;php.ini&lt;/code&gt; if set to non-existent directory can also raise&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;PHP Warning: Unknown: failed to open stream: Permission denied in\nUnknown on line 0&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;sys_temp_dir\nupload_tmp_dir\nsession.save_path\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;PHP - Failed to open stream : No such file or directory in mac&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;For example I will upload a picture. But I am getting this error. First thing i will do right click on the image and get info.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;$thePathOfMyPicture = &quot;/Users/misstugba/Desktop/&quot;;&lt;/code&gt;\nuse with function&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;move_uploaded_file&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_FILES&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;tmp_name&quot;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$thePathOfMyPicture&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_FILES&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;])){\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;image uploaded successfully&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;}\n&lt;a href=&quot;https://i.stack.imgur.com/zCOex.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/zCOex.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For me I got this error because I was trying to read a file which required HTTP auth, with a username and password. Hope that helps others. Might be another corner case.&lt;/p&gt;\n&lt;h2&gt;Edit&lt;/h2&gt;\n&lt;p&gt;You can check if this type of authentication is present by inspecting the headers:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$file_headers&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_headers&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$url&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$file_headers&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;File headers missing&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strpos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$file_headers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;401 Unauthorized&apos;&lt;/span&gt;) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;401 Unauthorized&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In PHP, start Apache then write you DB name and password if exist in your environment(.env).&lt;/p&gt;\n    ","\n&lt;p&gt;Aside from the other excellent answers, one thing I overlooked on Windows while writing a simple script: This error will be shown when trying to open a file with characters that Windows does not support in file names.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fopen&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d_H:i:s&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;w+&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will give:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;fopen(2022-06-01_22:53:03): Failed to open stream: No such file or directory in ...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Windows does not like &lt;code&gt;:&lt;/code&gt; in file names, as well as a number of other characters.&lt;/p&gt;\n    "],"405":["\n&lt;p&gt;An array is an array and a pointer is a pointer, but in most cases array names are &lt;em&gt;converted&lt;/em&gt; to pointers. A term often used is that they &lt;em&gt;decay&lt;/em&gt; to pointers.&lt;/p&gt;\n\n&lt;p&gt;Here is an array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;a&lt;/code&gt; contains space for seven integers, and you can put a value in one of them with an assignment, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is a pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;p&lt;/code&gt; doesn&apos;t contain any spaces for integers, but it can point to a space for an integer. We can, for example, set it to point to one of the places in the array &lt;code&gt;a&lt;/code&gt;, such as the first one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;p = &amp;amp;a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What can be confusing is that you can also write this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;p = a;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This does &lt;em&gt;not&lt;/em&gt; copy the contents of the array &lt;code&gt;a&lt;/code&gt; into the pointer &lt;code&gt;p&lt;/code&gt; (whatever that would mean). Instead, the array name &lt;code&gt;a&lt;/code&gt; is converted to a pointer to its first element. So that assignment does the same as the previous one.&lt;/p&gt;\n\n&lt;p&gt;Now you can use &lt;code&gt;p&lt;/code&gt; in a similar way to an array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason that this works is that the array dereferencing operator in C, &lt;code&gt;[ ]&lt;/code&gt;, is defined in terms of pointers. &lt;code&gt;x[y]&lt;/code&gt; means: start with the pointer &lt;code&gt;x&lt;/code&gt;, step &lt;code&gt;y&lt;/code&gt; elements forward after what the pointer points to, and then take whatever is there. Using pointer arithmetic syntax, &lt;code&gt;x[y]&lt;/code&gt; can also be written as &lt;code&gt;*(x+y)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For this to work with a normal array, such as our &lt;code&gt;a&lt;/code&gt;, the name &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;a[3]&lt;/code&gt; must first be converted to a pointer (to the first element in &lt;code&gt;a&lt;/code&gt;). Then we step 3 elements forward, and take whatever is there. In other words: take the element at position 3 in the array. (Which is the fourth element in the array, since the first one is numbered 0.)&lt;/p&gt;\n\n&lt;p&gt;So, in summary, array names in a C program are (in most cases) converted to pointers. One exception is when we use the &lt;code&gt;sizeof&lt;/code&gt; operator on an array. If &lt;code&gt;a&lt;/code&gt; was converted to a pointer in this context, &lt;code&gt;sizeof a&lt;/code&gt; would give the size of a pointer and not of the actual array, which would be rather useless, so in that case &lt;code&gt;a&lt;/code&gt; means the array itself.&lt;/p&gt;\n    ","\n&lt;p&gt;When an array is used as a value, its name represents the address of the first element.&lt;br&gt;\nWhen an array is not used as a value its name represents the whole array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* arr used as value */&lt;/span&gt;\nfoo(arr);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = *(arr + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* same as arr[1] */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* arr not used as value */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; bytes = &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; arr;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *q = &amp;amp;arr; &lt;span class=&quot;hljs-comment&quot;&gt;/* void pointers are compatible with pointers to any object */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If an expression of array type (such as the array name) appears in a larger expression and it isn&apos;t the operand of either the &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;sizeof&lt;/code&gt; operators, then the type of the array expression is converted from &quot;N-element array of T&quot; to &quot;pointer to T&quot;, and the value of the expression is the address of the first element in the array.  &lt;/p&gt;\n\n&lt;p&gt;In short, the array name is not a pointer, but in most contexts it is treated &lt;em&gt;as though&lt;/em&gt; it were a pointer.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Answering the question in the comment:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If I use sizeof, do i count the size of only the elements of the array? Then the array head also takes up space with the information about length and a pointer (and this means that it takes more space, than a normal pointer would)?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When you create an array, the only space that&apos;s allocated is the space for the elements themselves; no storage is materialized for a separate pointer or any metadata.  Given&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;what you get in memory is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;   +---+\na: |   | a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n   +---+ \n   |   | a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n   +---+\n   |   | a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n   +---+\n    ...\n   +---+\n   |   | a[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]\n   +---+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;em&gt;expression&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; refers to the entire array, but there&apos;s no &lt;em&gt;object&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; separate from the array elements themselves.  Thus, &lt;code&gt;sizeof a&lt;/code&gt; gives you the size (in bytes) of the entire array.  The expression &lt;code&gt;&amp;amp;a&lt;/code&gt; gives you the address of the array, &lt;em&gt;which is the same as the address of the first element&lt;/em&gt;.  The difference between &lt;code&gt;&amp;amp;a&lt;/code&gt; and &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; is the type of the result&lt;sup&gt;1&lt;/sup&gt; - &lt;code&gt;char (*)[10]&lt;/code&gt; in the first case and &lt;code&gt;char *&lt;/code&gt; in the second.  &lt;/p&gt;\n\n&lt;p&gt;Where things get weird is when you want to access individual elements - the expression &lt;code&gt;a[i]&lt;/code&gt; is defined as the result of &lt;code&gt;*(a + i)&lt;/code&gt; - given an address value &lt;code&gt;a&lt;/code&gt;, offset &lt;code&gt;i&lt;/code&gt; elements (&lt;em&gt;not bytes&lt;/em&gt;) from that address and dereference the result.&lt;/p&gt;\n\n&lt;p&gt;The problem is that &lt;code&gt;a&lt;/code&gt; isn&apos;t a pointer or an address - it&apos;s the entire array object.  Thus, the rule in C that whenever the compiler sees an expression of array type (such as &lt;code&gt;a&lt;/code&gt;, which has type &lt;code&gt;char [10]&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; that expression isn&apos;t the operand of the &lt;code&gt;sizeof&lt;/code&gt; or unary &lt;code&gt;&amp;amp;&lt;/code&gt; operators, the type of that expression is converted (&quot;decays&quot;) to a pointer type (&lt;code&gt;char *&lt;/code&gt;), and the value of the expression is the address of the first element of the array.  Therefore, the &lt;em&gt;expression&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; has the same type and value as the expression &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; (and by extension, the expression &lt;code&gt;*a&lt;/code&gt; has the same type and value as the expression &lt;code&gt;a[0]&lt;/code&gt;).  &lt;/p&gt;\n\n&lt;p&gt;C was derived from an earlier language called B, and in B &lt;code&gt;a&lt;/code&gt; &lt;em&gt;was&lt;/em&gt; a separate pointer object from the array elements &lt;code&gt;a[0]&lt;/code&gt;, &lt;code&gt;a[1]&lt;/code&gt;, etc.  Ritchie wanted to keep B&apos;s array semantics, but he didn&apos;t want to mess with storing the separate pointer object.  So he got rid of it.  Instead, the compiler will convert array expressions to pointer expressions during translation as necessary.  &lt;/p&gt;\n\n&lt;p&gt;Remember that I said arrays don&apos;t store any metadata about their size.  As soon as that array expression &quot;decays&quot; to a pointer, all you have is a pointer to a single element.  That element may be the first of a sequence of elements, or it may be a single object.  There&apos;s no way to know based on the pointer itself.  &lt;/p&gt;\n\n&lt;p&gt;When you pass an array expression to a function, all the function receives is a pointer to the first element - it has no idea how big the array is (this is why the &lt;code&gt;gets&lt;/code&gt; function was such a menace and was eventually removed from the library).  For the function to know how many elements the array has, you must either use a sentinel value (such as the 0 terminator in C strings) or you must pass the number of elements as a separate parameter.  &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol&gt;\n&lt;sup&gt;&lt;li&gt;Which *may* affect how the address value is interpreted - depends on the machine.&lt;/li&gt;&lt;/sup&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;An array declared like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;allocates memory for 10 &lt;code&gt;int&lt;/code&gt;s. You can&apos;t modify &lt;code&gt;a&lt;/code&gt; but you can do pointer arithmetic with &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;A pointer like this allocates memory for just the pointer &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It doesn&apos;t allocate any &lt;code&gt;int&lt;/code&gt;s. You can modify it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;p = a;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and use array subscripts as you can with a:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;p[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\na[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// same&lt;/span&gt;\n*(p+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// same effect&lt;/span&gt;\n*(a+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// same effect&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The array name by itself yields a memory location, so you can treat the array name like a pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;];\n\na[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1976&lt;/span&gt;;\na[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1984&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;memory location of a: %p&quot;&lt;/span&gt;, a);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value at memory location %p is %d&quot;&lt;/span&gt;, a, *a);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And other nifty stuff you can do to pointer (e.g. adding/substracting an offset), you can also do to an array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value at memory location %p is %d&quot;&lt;/span&gt;, a + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, *(a + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Language-wise, if C didn&apos;t expose the array as just &lt;strong&gt;some sort of &quot;pointer&quot;&lt;/strong&gt;(pedantically it&apos;s just a memory location. It cannot point to arbitrary location in memory, nor can be controlled by the programmer). We always need to code this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value at memory location %p is %d&quot;&lt;/span&gt;, &amp;amp;a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], a[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think this example sheds some light on the issue:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;};\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **b = &amp;amp;a;\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a == &amp;amp;a: %d\\n&quot;&lt;/span&gt;, a == b);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It compiles fine (with 2 warnings) in gcc 4.9.2, and prints the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;a == &amp;amp;a: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;oops :-)&lt;/p&gt;\n\n&lt;p&gt;So, the conclusion is no, the array is not a pointer, it is not stored in memory (not even read-only one) as a pointer, even though it looks like it is, since you can obtain its address with the &amp;amp; operator. But - oops - that operator does not work :-)), either way, you&apos;ve been warned:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;p.c: In function main:\npp.c:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;: warning: initialization from incompatible pointer type\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; **b = &amp;amp;a;\n            ^\np.c:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;: warning: comparison of distinct pointer types lacks a cast\n  &lt;span class=&quot;hljs-title function_&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a == &amp;amp;a: %d\\n&quot;&lt;/span&gt;, a == b)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;C++ refuses any such attempts with errors in compile-time.&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;This is what I meant to demonstrate:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;};\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *c = a;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *b = &amp;amp;a;\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *d = &amp;amp;c;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a == &amp;amp;a: %d\\n&quot;&lt;/span&gt;, a == b);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c == &amp;amp;c: %d\\n&quot;&lt;/span&gt;, c == d);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even though &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; &quot;point&quot; to the same memory, you can obtain address of the &lt;code&gt;c&lt;/code&gt; pointer, but you cannot obtain the address of the &lt;code&gt;a&lt;/code&gt; pointer.&lt;/p&gt;\n    ","\n&lt;p&gt;The following example provides a concrete difference between an array name and a pointer. Let say that you want to represent a 1D line with some given maximum dimension, you could do it either with an array or a pointer:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; line_as_array[&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;];\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* line_as_pointer;\n} Line;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s look at the behavior of the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do_something_with_line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Line line)&lt;/span&gt; {\n   line.line_as_pointer[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n   line.line_as_array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n   Line my_line;\n   my_line.length = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n   my_line.line_as_pointer = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*) &lt;span class=&quot;hljs-built_in&quot;&gt;calloc&lt;/span&gt;(my_line.length, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n\n   my_line.line_as_pointer[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n   my_line.line_as_array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n\n   do_something_with_line(my_line);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %d\\n&quot;&lt;/span&gt;, my_line.line_as_pointer[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], my_line.line_as_array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n};\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code will output:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is because in the function call to &lt;code&gt;do_something_with_line&lt;/code&gt; the object was copied so:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The pointer &lt;code&gt;line_as_pointer&lt;/code&gt; still contains the same address it was pointing to&lt;/li&gt;\n&lt;li&gt;The array &lt;code&gt;line_as_array&lt;/code&gt; was copied to a new address which does not outlive the scope of the function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So while arrays are not given by values when you directly input them to functions, when you encapsulate them in structs they are given by value (i.e. copied) which outlines here a major difference in behavior compared to the implementation using pointers.&lt;/p&gt;\n    ","\n&lt;p&gt;The array name behaves like a pointer and points to the first element of the array. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a[]={&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;};\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%p\\n&quot;&lt;/span&gt;,a);     &lt;span class=&quot;hljs-comment&quot;&gt;//result is similar to 0x7fff6fe40bc0&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%p\\n&quot;&lt;/span&gt;,&amp;amp;a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;//result is similar to 0x7fff6fe40bc0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Both the print statements will give exactly same output for a machine. In my system it gave: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0x7fff6fe40bc0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Array name is the address of 1st element of an array. So yes array name is a const pointer.&lt;/p&gt;\n    "]},"page":"42","randomQuestions":[{"title":"Default constructor with empty brackets","slug":"default-constructor-with-empty-brackets-1657388246967"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625"},{"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922"},{"title":"Asking the user for input until they give a valid response","slug":"asking-the-user-for-input-until-they-give-a-valid-response-1657384376162"},{"title":"Using global variables in a function","slug":"using-global-variables-in-a-function-1657384796002"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"How do I merge two dictionaries in a single expression?","slug":"how-do-i-merge-two-dictionaries-in-a-single-expression-1657387593160"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"},{"title":"What is the difference between a deep copy and a shallow copy?","slug":"what-is-the-difference-between-a-deep-copy-and-a-shallow-copy-1657388445063"},{"title":"Can you provide some examples of why it is hard to parse XML and HTML with a regex? [closed]","slug":"can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-regex-closed-1657388410824"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"},{"title":"How to use java.util.Scanner to correctly read user input from System.in and act on it?","slug":"how-to-use-java.util.scanner-to-correctly-read-user-input-from-system.in-and-act-on-it-1657388546306"},{"title":"How to create a MySQL hierarchical recursive query?","slug":"how-to-create-a-mysql-hierarchical-recursive-query-1657387662163"},{"title":"Order Bars in ggplot2 bar graph","slug":"order-bars-in-ggplot2-bar-graph-1657388099080"},{"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"}]},"__N_SSG":true}