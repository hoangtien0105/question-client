{"pageProps":{"data":{"count":610,"rows":[{"id":380,"title":"How to unnest (explode) a column in a pandas DataFrame, into multiple rows","slug":"how-to-unnest-(explode)-a-column-in-a-pandas-dataframe-into-multiple-rows-1657387806735","postType":"QUESTION","createdAt":"2022-07-09T17:30:06.000Z","updatedAt":"2022-07-09T17:30:06.000Z","tags":[{"id":2077,"name":"pandas-explode","slug":"pandas-explode","createdAt":"2022-07-09T17:30:06.000Z","updatedAt":"2022-07-09T17:30:06.000Z","Questions_Tags":{"questionId":380,"tagId":2077}}]},{"id":379,"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432","postType":"QUESTION","createdAt":"2022-07-09T17:30:04.000Z","updatedAt":"2022-07-09T17:30:04.000Z","tags":[{"id":2072,"name":"flask","slug":"flask","createdAt":"2022-07-09T17:30:04.000Z","updatedAt":"2022-07-09T17:30:04.000Z","Questions_Tags":{"questionId":379,"tagId":2072}},{"id":2073,"name":"werkzeug","slug":"werkzeug","createdAt":"2022-07-09T17:30:04.000Z","updatedAt":"2022-07-09T17:30:04.000Z","Questions_Tags":{"questionId":379,"tagId":2073}}]},{"id":378,"title":"Remove duplicate values from JS array [duplicate]","slug":"remove-duplicate-values-from-js-array-duplicate-1657387801931","postType":"QUESTION","createdAt":"2022-07-09T17:30:01.000Z","updatedAt":"2022-07-09T17:30:01.000Z","tags":[{"id":2069,"name":"duplicates","slug":"duplicates","createdAt":"2022-07-09T17:30:01.000Z","updatedAt":"2022-07-09T17:30:01.000Z","Questions_Tags":{"questionId":378,"tagId":2069}}]},{"id":377,"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852","postType":"QUESTION","createdAt":"2022-07-09T17:29:57.000Z","updatedAt":"2022-07-09T17:29:57.000Z","tags":[]},{"id":376,"title":"srand() — why call it only once?","slug":"srand()-why-call-it-only-once-1657387794760","postType":"QUESTION","createdAt":"2022-07-09T17:29:54.000Z","updatedAt":"2022-07-09T17:29:54.000Z","tags":[{"id":2062,"name":"srand","slug":"srand","createdAt":"2022-07-09T17:29:54.000Z","updatedAt":"2022-07-09T17:29:54.000Z","Questions_Tags":{"questionId":376,"tagId":2062}}]}]},"answers":{"376":["\n&lt;p&gt;That depends on what you are trying to achieve.&lt;/p&gt;\n\n&lt;p&gt;Randomization is performed as a function that has a starting value, namely &lt;strong&gt;the seed&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So, for the same seed, you will always get the same sequence of values.&lt;/p&gt;\n\n&lt;p&gt;If you try to set the seed every time you need a random value, and the seed is the same number, you will always get the same &quot;random&quot; value.&lt;/p&gt;\n\n&lt;p&gt;Seed is usually taken from the current time, which are the seconds, as in &lt;code&gt;time(NULL)&lt;/code&gt;, so if you always set the seed before taking the random number, you will get the same number as long as you call the srand/rand combo multiple times &lt;strong&gt;in the same second&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;To avoid this problem, srand is set only once per application, because it is doubtful that two of the application instances will be initialized in the same second, so each instance will then have a different sequence of random numbers.&lt;/p&gt;\n\n&lt;p&gt;However, there is a slight possibility that you will run your app (especially if it&apos;s a short one, or a command line tool or something like that) many times in a second, then you will have to resort to some other way of choosing a seed (unless the same sequence in different application instances is ok by you). But like I said, that depends on your application context of usage.&lt;/p&gt;\n\n&lt;p&gt;Also, you may want to try to increase the precision to microseconds (minimizing the chance of the same seed), requires (&lt;code&gt;sys/time.h&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;timeval&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;t1&lt;/span&gt;;&lt;/span&gt;\ngettimeofday(&amp;amp;t1, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\nsrand(t1.tv_usec * t1.tv_sec);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Random numbers are actually pseudo random. A seed is set first, from which each call of &lt;code&gt;rand&lt;/code&gt; gets a random number, and modifies the internal state and this new state is used in the next &lt;code&gt;rand&lt;/code&gt; call to get another number. Because a certain formula is used to generate these &quot;random numbers&quot; therefore setting a certain value of seed after every call to &lt;code&gt;rand&lt;/code&gt; will return the same number from the call. For example &lt;code&gt;srand (1234); rand ();&lt;/code&gt; will return the same value. Initializing once the initial state with the seed value will generate enough random numbers as you do not set the internal state with &lt;code&gt;srand&lt;/code&gt;, thus making the numbers more probable to be random.&lt;/p&gt;\n\n&lt;p&gt;Generally we use the &lt;code&gt;time (NULL)&lt;/code&gt; returned seconds value when initializing the seed value. Say the &lt;code&gt;srand (time (NULL));&lt;/code&gt; is in a loop. Then loop can iterate more than once in one second, therefore the number of times the loop iterates inside the loop in a second &lt;code&gt;rand&lt;/code&gt; call in the loop will return the same &quot;random number&quot;, which is not desired. Initializing it once at program start will set the seed once, and each time &lt;code&gt;rand&lt;/code&gt; is called, a new number is generated and the internal state is modified, so the next call &lt;code&gt;rand&lt;/code&gt; returns a number which is random enough.&lt;/p&gt;\n\n&lt;p&gt;For example this code from &lt;a href=&quot;http://linux.die.net/man/3/rand&quot; rel=&quot;noreferrer&quot;&gt;http://linux.die.net/man/3/rand&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; next = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* RAND_MAX assumed to be 32767 */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myrand&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; {\n    next = next * &lt;span class=&quot;hljs-number&quot;&gt;1103515245&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;12345&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;)(next/&lt;span class=&quot;hljs-number&quot;&gt;65536&lt;/span&gt;) % &lt;span class=&quot;hljs-number&quot;&gt;32768&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mysrand&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; seed)&lt;/span&gt; {\n    next = seed;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The internal state &lt;code&gt;next&lt;/code&gt; is declared as global. Each &lt;code&gt;myrand&lt;/code&gt; call will modify the internal state and update it, and return a random number. Every call of &lt;code&gt;myrand&lt;/code&gt; will have a different &lt;code&gt;next&lt;/code&gt; value therefore the the method will return the different numbers every call. &lt;/p&gt;\n\n&lt;p&gt;Look at the &lt;code&gt;mysrand&lt;/code&gt; implementation; it simply sets the seed value you pass to &lt;code&gt;next&lt;/code&gt;. Therefore if you set the &lt;code&gt;next&lt;/code&gt; value the same  everytime before calling &lt;code&gt;rand&lt;/code&gt; it will return the same random value, because of the identical formula applied on it, which is not desirable, as the function is made to be random.&lt;/p&gt;\n\n&lt;p&gt;But depending on your needs you can set the seed to some certain value to generate the same &quot;random sequence&quot; each run, say for some benchmark or others.&lt;/p&gt;\n    ","\n&lt;p&gt;Short answer: calling &lt;code&gt;srand()&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; like &quot;rolling the dice&quot; for the random number generator.  Nor is it like shuffling a deck of cards.  If anything, it&apos;s more like just cutting a deck of cards.&lt;/p&gt;\n&lt;p&gt;Think of it like this.  &lt;code&gt;rand()&lt;/code&gt; deals from a big deck of cards, and every time you call it, all it does is pick the next card off the top of the deck, give you the value, and return that card to the bottom of the deck.  (Yes, that means the &quot;random&quot; sequence will repeat after a while.  It&apos;s a &lt;em&gt;very&lt;/em&gt; big deck, though: typically 4,294,967,296 cards.)&lt;/p&gt;\n&lt;p&gt;Furthermore, every time your program runs, a brand-new pack of cards is bought from the game shop, &lt;em&gt;and&lt;/em&gt; every brand-new pack of cards always has the same sequence.  So unless you do something special, every time your program runs, it will get exactly the same &quot;random&quot; numbers back from &lt;code&gt;rand()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Now, you might say, &quot;Okay, so how do I shuffle the deck?&quot;  And the answer -- at least as far as &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;srand&lt;/code&gt; are concerned -- is that there is no way of shuffling the deck.&lt;/p&gt;\n&lt;p&gt;So what does &lt;code&gt;srand&lt;/code&gt; do?  Based on the analogy I&apos;ve been building here, calling &lt;code&gt;srand(n)&lt;/code&gt; is basically like saying, &quot;cut the deck &lt;code&gt;n&lt;/code&gt; cards from the top&quot;.  But wait, one more thing: it&apos;s actually &lt;em&gt;start with another brand-new deck and cut it &lt;code&gt;n&lt;/code&gt; cards from the top&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;So if you call &lt;code&gt;srand(n)&lt;/code&gt;, &lt;code&gt;rand()&lt;/code&gt;, &lt;code&gt;srand(n)&lt;/code&gt;, &lt;code&gt;rand()&lt;/code&gt;, ..., with the same &lt;code&gt;n&lt;/code&gt; every time, you won&apos;t just get a not-very-random sequence, you&apos;ll actually get the same number back from &lt;code&gt;rand()&lt;/code&gt; every time.  (Probably not the same number you handed to &lt;code&gt;srand&lt;/code&gt;, but the same number back from &lt;code&gt;rand&lt;/code&gt; over and over.)&lt;/p&gt;\n&lt;p&gt;So the best you can do is to cut the deck &lt;em&gt;once&lt;/em&gt;, that is, call &lt;code&gt;srand()&lt;/code&gt; once, at the beginning of your program, with an &lt;code&gt;n&lt;/code&gt; that&apos;s reasonably random, so that you&apos;ll start at a different random place in the big deck each time your program runs.  With &lt;code&gt;rand()&lt;/code&gt;, that really is the best you can do.&lt;/p&gt;\n&lt;p&gt;[P.S. Yes, I know, in real life, when you buy a brand-new deck of cards it&apos;s typically in order, not in random order.  For the analogy here to work, I&apos;m imagining that each deck you buy from the game shop is in a seemingly random order, but the exact same seemingly-random order as every other deck of cards you buy from that same shop.  Sort of like the identically shuffled decks of cards they use in bridge tournaments.]&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Addendum: For a very cute demonstration of the fact that for a given PRNG algorithm and a given seed value, you always get the same sequence, see &lt;a href=&quot;https://stackoverflow.com/questions/15182496/why-does-this-code-using-random-strings-print-hello-world&quot;&gt;this question&lt;/a&gt; (which is about Java, not C, but anyway).&lt;/p&gt;\n    ","\n&lt;p&gt;The reason is that &lt;code&gt;srand()&lt;/code&gt; sets the initial state of the random generator, and all the values that generator produces are only &quot;random enough&quot; if you don&apos;t touch the state yourself in between.&lt;/p&gt;\n\n&lt;p&gt;For example you could do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    srand(time(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rand();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then if you call that function repeatedly so that &lt;code&gt;time()&lt;/code&gt; returns the same values in adjacent calls you just get the same value generated - that&apos;s by design.&lt;/p&gt;\n    ","\n&lt;p&gt;A simpler solution for using &lt;code&gt;srand()&lt;/code&gt; for generating different seeds for application instances run at the same second is as seen.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;srand(time(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)-getpid());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This method makes your seed very close to random as there is no way to guess at what time your thread started and the pid will be different also.&lt;/p&gt;\n    ","\n&lt;p&gt;srand seeds the pseudorandom number generator.  If you call it more than once, you will reseed the RNG.  And if you call it with the same argument, it will restart the same sequence.&lt;/p&gt;\n&lt;p&gt;To prove it, if you do something simple like this, you will see the same number printed 100 times:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i != &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;; ++i) {\n        srand(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, rand());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It seems that every time &lt;code&gt;rand()&lt;/code&gt; runs, it will set a new seed for the next &lt;code&gt;rand()&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If &lt;code&gt;srand()&lt;/code&gt; runs multiple times, the problem is if the two running happen in one second (the &lt;code&gt;time(NULL)&lt;/code&gt; does not change), the next &lt;code&gt;rand()&lt;/code&gt; will be the same as the &lt;code&gt;rand()&lt;/code&gt; right after the previous &lt;code&gt;srand()&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    "],"377":["\n&lt;p&gt;With JDK1.6, you can use the built-in Javascript engine.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngineManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngine;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptException;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ScriptException {\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mgr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mgr.getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;40+2&quot;&lt;/span&gt;;\n    System.out.println(engine.eval(foo));\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve written this &lt;code&gt;eval&lt;/code&gt; method for arithmetic expressions to answer this question. It does addition, subtraction, multiplication, division, exponentiation (using the &lt;code&gt;^&lt;/code&gt; symbol), and a few basic functions like &lt;code&gt;sqrt&lt;/code&gt;. It supports grouping using &lt;code&gt;(&lt;/code&gt;...&lt;code&gt;)&lt;/code&gt;, and it gets the operator &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot; rel=&quot;noreferrer&quot;&gt;precedence&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Operator_associativity&quot; rel=&quot;noreferrer&quot;&gt;associativity&lt;/a&gt; rules correct.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String str)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ch;\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            ch = (++pos &amp;lt; str.length()) ? str.charAt(pos) : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; charToEat)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) nextChar();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch == charToEat) {\n                nextChar();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            nextChar();\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseExpression();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pos &amp;lt; str.length()) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n        \n        &lt;span class=&quot;hljs-comment&quot;&gt;// Grammar:&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// expression = term | expression `+` term | expression `-` term&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// term = factor | term `*` factor | term `/` factor&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// factor = `+` factor | `-` factor | `(` expression `)` | number&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//        | functionName `(` expression `)` | functionName factor&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//        | factor `^` factor&lt;/span&gt;\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseTerm();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) x += parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// addition&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) x -= parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// subtraction&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseTerm&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseFactor();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;)) x *= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// multiplication&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)) x /= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// division&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n        \n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseFactor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; +parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary plus&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary minus&lt;/span&gt;\n            \n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; x;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;startPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// parentheses&lt;/span&gt;\n                x = parseExpression();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing &apos;)&apos;&quot;&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// numbers&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) nextChar();\n                x = Double.parseDouble(str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos));\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// functions&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) nextChar();\n                &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;)) {\n                    x = parseExpression();\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing &apos;)&apos; after argument to &quot;&lt;/span&gt; + func);\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    x = parseFactor();\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sqrt&quot;&lt;/span&gt;)) x = Math.sqrt(x);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sin&quot;&lt;/span&gt;)) x = Math.sin(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cos&quot;&lt;/span&gt;)) x = Math.cos(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tan&quot;&lt;/span&gt;)) x = Math.tan(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unknown function: &quot;&lt;/span&gt; + func);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            }\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^&apos;&lt;/span&gt;)) x = Math.pow(x, parseFactor()); &lt;span class=&quot;hljs-comment&quot;&gt;// exponentiation&lt;/span&gt;\n            \n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n    }.parse();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;((4 - 2^3 + 1) * -sqrt(3*3+4*4)) / 2&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output: 7.5 &lt;a href=&quot;https://www.wolframalpha.com/input/?i=%28%284%20-%202%5E3%20%2B%201%29%20*%20-sqrt%283*3%2B4*4%29%29%20%2F%202&quot; rel=&quot;noreferrer&quot;&gt;(which is correct)&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The parser is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Recursive_descent_parser&quot; rel=&quot;noreferrer&quot;&gt;recursive descent parser&lt;/a&gt;, so internally uses separate parse methods for each level of operator precedence in its grammar. I deliberately kept it &lt;strong&gt;short&lt;/strong&gt;, but here are some ideas you might want to expand it with:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Variables:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The bit of the parser that reads the names for functions can easily be changed to handle custom variables too, by looking up names in a variable table passed to the &lt;code&gt;eval&lt;/code&gt; method, such as a &lt;code&gt;Map&amp;lt;String,Double&amp;gt; variables&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Separate compilation and evaluation:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;What if, having added support for variables, you wanted to evaluate the same expression millions of times with changed variables, without parsing it every time? It&apos;s possible. First define an interface to use to evaluate the precompiled expression:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@FunctionalInterface&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; {\n      &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now to rework the original &quot;eval&quot; function into a &quot;parse&quot; function, change all the methods that return &lt;code&gt;double&lt;/code&gt;s, so instead they return an instance of that interface. Java 8&apos;s lambda syntax works well for this. Example of one of the changed methods:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  Expression &lt;span class=&quot;hljs-title function_&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n      &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseTerm();\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// addition&lt;/span&gt;\n              &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x, b = parseTerm();\n              x = (() -&amp;gt; a.eval() + b.eval());\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// subtraction&lt;/span&gt;\n              &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x, b = parseTerm();\n              x = (() -&amp;gt; a.eval() - b.eval());\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n          }\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That builds a recursive tree of &lt;code&gt;Expression&lt;/code&gt; objects representing the compiled expression (an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot; rel=&quot;noreferrer&quot;&gt;abstract syntax tree&lt;/a&gt;). Then you can compile it once and evaluate it repeatedly with different values:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n      Map&amp;lt;String,Double&amp;gt; variables = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n      &lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x^2 - x + 2&quot;&lt;/span&gt;, variables);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;; x &amp;lt;= +&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;; x++) {\n          variables.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, x);\n          System.out.println(x + &lt;span class=&quot;hljs-string&quot;&gt;&quot; =&amp;gt; &quot;&lt;/span&gt; + exp.eval());\n      }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Different datatypes:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Instead of &lt;code&gt;double&lt;/code&gt;, you could change the evaluator to use something more powerful like &lt;code&gt;BigDecimal&lt;/code&gt;, or a class that implements complex numbers, or rational numbers (fractions). You could even use &lt;code&gt;Object&lt;/code&gt;, allowing some mix of datatypes in expressions, just like a real programming language. :)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sub&gt;All code in this answer released &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot; rel=&quot;noreferrer&quot;&gt;to the public domain&lt;/a&gt;. Have fun!&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For my university project, I was looking for a parser / evaluator supporting both basic formulas and more complicated equations (especially iterated operators). I found very nice open source library for JAVA and .NET called mXparser. I will give a few examples to make some feeling on the syntax, for further instructions please visit project website (especially tutorial section).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://mathparser.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mathparser.org/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://mathparser.org/mxparser-tutorial/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mathparser.org/mxparser-tutorial/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://mathparser.org/api/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mathparser.org/api/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;And few examples&lt;/p&gt;\n&lt;p&gt;1 - Simple furmula&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;( 2 + 3/4 + sin(pi) )/2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2 - User defined arguments and constants&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Argument&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Argument&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x = 10&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Constant&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Constant&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a = pi^2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cos(a*x)&quot;&lt;/span&gt;, x, a);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;3 - User defined functions&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f(x, y, z) = sin(x) + cos(y*z)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f(3,2,5)&quot;&lt;/span&gt;, f);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;4 - Iteration&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sum( i, 1, 100, sin(i) )&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.calculate()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Found recently - in case you would like to try the syntax (and see the advanced use case) you can download the &lt;a href=&quot;https://scalarmath.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;Scalar&lt;/a&gt; &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&quot; rel=&quot;nofollow noreferrer&quot;&gt;Calculator&lt;/a&gt; &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&quot; rel=&quot;nofollow noreferrer&quot;&gt;app&lt;/a&gt; that is powered by mXparser.&lt;/p&gt;\n    ","\n&lt;p&gt;The correct way to solve this is with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Lexical_analysis&quot; rel=&quot;noreferrer&quot;&gt;lexer&lt;/a&gt; and a &lt;a href=&quot;http://en.wikipedia.org/wiki/Parser&quot; rel=&quot;noreferrer&quot;&gt;parser&lt;/a&gt;. You can write simple versions of these yourself, or those pages also have links to Java lexers and parsers.&lt;/p&gt;\n\n&lt;p&gt;Creating a recursive descent parser is a really good learning exercise.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://github.com/uklimaschewski/EvalEx&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt; is another open source library on GitHub named EvalEx.&lt;/p&gt;\n\n&lt;p&gt;Unlike the JavaScript engine this library is focused in evaluating mathematical expressions only. Moreover, the library is extensible and supports use of boolean operators as well as parentheses.&lt;/p&gt;\n    ","\n&lt;p&gt;You can evaluate expressions easily if your Java application already accesses a database, without using any other JARs.&lt;/p&gt;\n\n&lt;p&gt;Some databases require you to use a dummy table (eg, Oracle&apos;s &quot;dual&quot; table) and others will allow you to evaluate expressions without &quot;selecting&quot; from any table.&lt;/p&gt;\n\n&lt;p&gt;For example, in Sql Server or Sqlite&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;select (((&lt;span class=&quot;hljs-number&quot;&gt;12.10&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;12.0&lt;/span&gt;))/ &lt;span class=&quot;hljs-number&quot;&gt;233.0&lt;/span&gt;) amount\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in Oracle&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;select (((&lt;span class=&quot;hljs-number&quot;&gt;12.10&lt;/span&gt; +&lt;span class=&quot;hljs-number&quot;&gt;12.0&lt;/span&gt;))/ &lt;span class=&quot;hljs-number&quot;&gt;233.0&lt;/span&gt;) amount from dual;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The advantage of using a DB is that you can evaluate many expressions at the same time. Also most DB&apos;s will allow you to use highly complex expressions and   will also have a number of extra functions that can be called as necessary.  &lt;/p&gt;\n\n&lt;p&gt;However performance may suffer if many single expressions need to be evaluated individually, particularly when the DB is located on a network server.&lt;/p&gt;\n\n&lt;p&gt;The following addresses the performance problem to some extent, by using a Sqlite in-memory database.    &lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a full working example in Java&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Class. forName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.sqlite.JDBC&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; DriverManager.getConnection(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:sqlite::memory:&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; conn.createStatement();\n&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stat.executeQuery( &lt;span class=&quot;hljs-string&quot;&gt;&quot;select (1+10)/20.0 amount&quot;&lt;/span&gt;);\nrs.next();\nSystem.out.println(rs.getBigDecimal(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\nstat.close();\nconn.close();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course you could extend the above code to handle multiple calculations at the same time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stat.executeQuery( &lt;span class=&quot;hljs-string&quot;&gt;&quot;select (1+10)/20.0 amount, (1+100)/20.0 amount2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can also try the &lt;a href=&quot;http://www.beanshell.org&quot; rel=&quot;noreferrer&quot;&gt;BeanShell&lt;/a&gt; interpreter:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Interpreter&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;interpreter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Interpreter&lt;/span&gt;();\ninterpreter.eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result = (7+21*6)/(32-27)&quot;&lt;/span&gt;);\nSystem.out.println(interpreter.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way is to use the &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spring Expression Language or SpEL&lt;/a&gt; which does a whole lot more along with evaluating mathematical expressions, therefore maybe slightly overkill. You do not have to be using Spring framework to use this expression library as it is stand-alone. Copying examples from SpEL&apos;s documentation:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ExpressionParser&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpelExpressionParser&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parser.parseExpression(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 + 1&quot;&lt;/span&gt;).getValue(Integer.class); &lt;span class=&quot;hljs-comment&quot;&gt;// 2 &lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;twentyFour&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parser.parseExpression(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.0 * 3e0 * 4&quot;&lt;/span&gt;).getValue(Double.class); &lt;span class=&quot;hljs-comment&quot;&gt;//24.0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/&quot; rel=&quot;noreferrer&quot;&gt;This article&lt;/a&gt; discusses various approaches. Here are the 2 key approaches mentioned in the article:&lt;/p&gt;\n&lt;h3&gt;&lt;a href=&quot;http://commons.apache.org/proper/commons-jexl/&quot; rel=&quot;noreferrer&quot;&gt;JEXL from Apache&lt;/a&gt;&lt;/h3&gt;\n&lt;p&gt;Allows for scripts that include references to java objects.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Create or retrieve a JexlEngine&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;JexlEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jexl&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JexlEngine&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create an expression object&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jexlExp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo.innerFoo.bar()&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jexl.createExpression( jexlExp );\n \n&lt;span class=&quot;hljs-comment&quot;&gt;// Create a context and add data&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;JexlContext&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jctx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MapContext&lt;/span&gt;();\njctx.set(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;() );\n \n&lt;span class=&quot;hljs-comment&quot;&gt;// Now evaluate the expression, getting the result&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; e.evaluate(jctx);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Use the javascript engine embedded in the JDK:&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;jsEvalWithVariable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    List&amp;lt;String&amp;gt; namesList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jill&quot;&lt;/span&gt;);\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;);\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Laureen&quot;&lt;/span&gt;);\n    namesList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ed&quot;&lt;/span&gt;);\n \n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mgr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;();\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jsEngine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mgr.getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;);\n \n    jsEngine.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;namesListKey&quot;&lt;/span&gt;, namesList);\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Executing in script environment...&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n      jsEngine.eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;var x;&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;var names = namesListKey.toArray();&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;for(x in names) {&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;  println(names[x]);&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt; +\n                    &lt;span class=&quot;hljs-string&quot;&gt;&quot;namesListKey.add(\\&quot;Dana\\&quot;);&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ScriptException ex)\n    {\n        ex.printStackTrace();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if we are going to implement it then we can can use the below algorithm :--&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;While there are still tokens to be read in,&lt;/p&gt;\n\n&lt;p&gt;1.1 Get the next token.\n1.2 If the token is:&lt;/p&gt;\n\n&lt;p&gt;1.2.1 A number: push it onto the value stack.&lt;/p&gt;\n\n&lt;p&gt;1.2.2 A variable: get its value, and push onto the value stack.&lt;/p&gt;\n\n&lt;p&gt;1.2.3 A left parenthesis: push it onto the operator stack.&lt;/p&gt;\n\n&lt;p&gt;1.2.4 A right parenthesis:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; While the thing on top of the operator stack is not a \n   left parenthesis,\n     &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Pop the operator from the operator stack.\n     &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Pop the value stack twice, getting two operands.\n     &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; Apply the operator to the operands, in the correct order.\n     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Push the result onto the value stack.\n &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Pop the left parenthesis from the operator stack, and discard it.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;1.2.5 An operator (call it thisOp):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; While the operator stack is not empty, and the top thing on the\n   operator stack has the same or greater precedence as thisOp,\n   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Pop the operator from the operator stack.\n   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Pop the value stack twice, getting two operands.\n   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; Apply the operator to the operands, in the correct order.\n   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Push the result onto the value stack.\n &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Push thisOp onto the operator stack.\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;While the operator stack is not empty,\n1 Pop the operator from the operator stack.\n2 Pop the value stack twice, getting two operands.\n3 Apply the operator to the operands, in the correct order.\n4 Push the result onto the value stack.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;At this point the operator stack should be empty, and the value\nstack should have only one value in it, which is the final result.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;This is another interesting alternative \n&lt;a href=&quot;https://github.com/Shy-Ta/expression-evaluator-demo&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Shy-Ta/expression-evaluator-demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The usage is very simple and gets the job done, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;ExpressionsEvaluator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;evalExpr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ExpressionsFactory.create(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2+3*4-6/2&quot;&lt;/span&gt;);  \n  assertEquals(BigDecimal.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;), evalExpr.eval()); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It seems like &lt;a href=&quot;http://sourceforge.net/projects/jep/&quot; rel=&quot;noreferrer&quot;&gt;JEP&lt;/a&gt; should do the job&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s too late to answer but I came across same situation to evaluate expression in java, it might help someone&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;MVEL&lt;/code&gt; does runtime evaluation of expressions, we can write a java code in &lt;code&gt;String&lt;/code&gt; to get it evaluated in this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;expressionStr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;x+y&quot;&lt;/span&gt;;\n    Map&amp;lt;String, Object&amp;gt; vars = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Object&amp;gt;();\n    vars.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    vars.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;ExecutableStatement&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (ExecutableStatement) MVEL.compileExpression(expressionStr);\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MVEL.executeExpression(statement, vars);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think what ever way you do this it&apos;s going to involve a lot of conditional statements. But for single operations like in your examples you could limit it to 4 if statements with something like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1+4&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (math.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;).length == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//do calculation&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (math.split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;).length == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//do calculation&lt;/span&gt;\n} ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It gets a whole lot more complicated when you want to deal with multiple operations like &quot;4+5*6&quot;.&lt;/p&gt;\n\n&lt;p&gt;If you are trying to build a calculator then I&apos;d surgest passing each section of the calculation separatly (each number or operator) rather than as a single string.&lt;/p&gt;\n    ","\n&lt;p&gt;You might have a look at the &lt;a href=&quot;https://bitbucket.org/axelclk/symja_android_library/wiki/Home&quot; rel=&quot;nofollow&quot;&gt;Symja framework&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;ExprEvaluator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExprEvaluator&lt;/span&gt;(); \n&lt;span class=&quot;hljs-type&quot;&gt;IExpr&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; util.evaluate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;10-40&quot;&lt;/span&gt;);\nSystem.out.println(result.toString()); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &quot;-30&quot; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Take note that definitively more complex expressions can be evaluated:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// D(...) gives the derivative of the function Sin(x)*Cos(x)&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;IAST&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; D(Times(Sin(x), Cos(x)), x);\n&lt;span class=&quot;hljs-type&quot;&gt;IExpr&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; util.evaluate(function);\n&lt;span class=&quot;hljs-comment&quot;&gt;// print: Cos(x)^2-Sin(x)^2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try the following sample code using JDK1.6&apos;s Javascript engine with code injection handling.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngine;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngineManager;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvalUtil&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;().getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        System.out.println((&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvalUtil&lt;/span&gt;()).eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(((5+5)/2) &amp;gt; 5) || 5 &amp;gt;3 &quot;&lt;/span&gt;));\n        System.out.println((&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvalUtil&lt;/span&gt;()).eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(((5+5)/2) &amp;gt; 5) || true&quot;&lt;/span&gt;));\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n        e.printStackTrace();\n    }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String input)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(input.matches(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.*[a-zA-Z;~`#$_{}\\\\[\\\\]:\\\\\\\\;\\&quot;&apos;,\\\\.\\\\?]+.*&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid expression : &quot;&lt;/span&gt; + input );\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; engine.eval(input);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {\n        e.printStackTrace();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; e;\n    }\n }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is actually complementing the answer given by @Boann. It has a slight bug which causes &quot;-2 ^ 2&quot; to give an erroneous result of -4.0. The problem for that is the point at which the exponentiation is evaluated in his. Just move the exponentiation to the block of parseTerm(), and you&apos;ll be all fine. Have a look at the below, which is &lt;a href=&quot;https://stackoverflow.com/a/26227947/3126973&quot;&gt;@Boann&apos;s answer&lt;/a&gt; slightly modified. Modification is in the comments.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String str)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, ch;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            ch = (++pos &amp;lt; str.length()) ? str.charAt(pos) : -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; charToEat)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;) nextChar();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch == charToEat) {\n                nextChar();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            nextChar();\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseExpression();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pos &amp;lt; str.length()) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Grammar:&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// expression = term | expression `+` term | expression `-` term&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// term = factor | term `*` factor | term `/` factor&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// factor = `+` factor | `-` factor | `(` expression `)`&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//        | number | functionName factor | factor `^` factor&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseTerm();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) x += parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// addition&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) x -= parseTerm(); &lt;span class=&quot;hljs-comment&quot;&gt;// subtraction&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseTerm&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; parseFactor();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;      (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;)) x *= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// multiplication&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)) x /= parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// division&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;^&apos;&lt;/span&gt;)) x = Math.pow(x, parseFactor()); &lt;span class=&quot;hljs-comment&quot;&gt;//exponentiation -&amp;gt; Moved in to here. So the problem is fixed&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n            }\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parseFactor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary plus&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -parseFactor(); &lt;span class=&quot;hljs-comment&quot;&gt;// unary minus&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; x;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;startPos&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;)) { &lt;span class=&quot;hljs-comment&quot;&gt;// parentheses&lt;/span&gt;\n                x = parseExpression();\n                eat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// numbers&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;) || ch == &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) nextChar();\n                x = Double.parseDouble(str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos));\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// functions&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;) nextChar();\n                &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; str.substring(startPos, &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.pos);\n                x = parseFactor();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sqrt&quot;&lt;/span&gt;)) x = Math.sqrt(x);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sin&quot;&lt;/span&gt;)) x = Math.sin(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cos&quot;&lt;/span&gt;)) x = Math.cos(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (func.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tan&quot;&lt;/span&gt;)) x = Math.tan(Math.toRadians(x));\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unknown function: &quot;&lt;/span&gt; + func);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unexpected: &quot;&lt;/span&gt; + (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)ch);\n            }\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;//if (eat(&apos;^&apos;)) x = Math.pow(x, parseFactor()); // exponentiation -&amp;gt; This is causing a bit of problem&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n        }\n    }.parse();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; ExpressionCalculator.expressioncalculator;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.text.DecimalFormat;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Scanner;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ExpressionCalculator&lt;/span&gt; {\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;addSpaces&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String exp)&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Add space padding to operands.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//https://regex101.com/r/sJ9gM7/73&lt;/span&gt;\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[\\\\/]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; / &quot;&lt;/span&gt;);\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[\\\\^]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; ^ &quot;&lt;/span&gt;);\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[\\\\*]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; * &quot;&lt;/span&gt;);\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[+]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; + &quot;&lt;/span&gt;); \n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;lt;=[0-9()])[-]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; - &quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Keep replacing double spaces with single spaces until your string is properly formatted&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*while(exp.indexOf(&quot;  &quot;) != -1){\n        exp = exp.replace(&quot;  &quot;, &quot; &quot;);\n     }*/&lt;/span&gt;\n    exp = exp.replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot; {2,}&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; exp;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Double &lt;span class=&quot;hljs-title function_&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String expr)&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-type&quot;&gt;DecimalFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DecimalFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#.####&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Format the expression properly before performing operations&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; addSpaces(expr);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//We will evaluate using rule BDMAS, i.e. brackets, division, power, multiplication, addition and&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//subtraction will be processed in following order&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;indexClose&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;indexOpen&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (indexClose != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;substring&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexClose);\n            indexOpen = substring.lastIndexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt;);\n            substring = substring.substring(indexOpen + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).trim();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(indexOpen != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexClose != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; evaluate(substring);\n                expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexOpen).trim() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + result + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + expression.substring(indexClose + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).trim();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; evaluate(expression.trim());\n            }\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; / &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;;\n        }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; ^ &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;^&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; * &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; + &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; - &quot;&lt;/span&gt;) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;//Avoid negative numbers&lt;/span&gt;\n            operation = &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Double.parseDouble(expression);\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.indexOf(operation);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(index != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            indexOpen = expression.lastIndexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, index - &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n            indexOpen = (indexOpen == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)?&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:indexOpen;\n            indexClose = expression.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, index + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n            indexClose = (indexClose == -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)?expression.length():indexClose;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(indexOpen != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexClose != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lhs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Double.parseDouble(expression.substring(indexOpen, index));\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rhs&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Double.parseDouble(expression.substring(index + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, indexClose));\n                &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (operation){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;:\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//Prevent divide by 0 exception.&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(rhs == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n                        }\n                        result = lhs / rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;^&quot;&lt;/span&gt;:\n                        result = Math.pow(lhs, rhs);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;:\n                        result = lhs * rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;:\n                        result = lhs - rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;:\n                        result = lhs + rhs;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(indexClose == expression.length()){\n                    expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexOpen) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + result + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + expression.substring(indexClose);\n                }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n                    expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, indexOpen) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + result + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + expression.substring(indexClose + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Double.valueOf(df.format(evaluate(expression.trim())));\n            }\n        }\n    }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(Exception exp){\n        exp.printStackTrace();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-type&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Scanner&lt;/span&gt;(System.in);\n    System.out.print(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter an Mathematical Expression to Evaluate: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; scanner.nextLine();\n    System.out.println(evaluate(input));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;check&lt;/span&gt; { \n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ans;\n   String str=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7 + 5&quot;&lt;/span&gt;;\n   StringTokenizer st=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringTokenizer&lt;/span&gt;(str);\n\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; v1=Integer.parseInt(st.nextToken());\n   String op=st.nextToken();\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; v2=Integer.parseInt(st.nextToken());\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(op.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;+&quot;&lt;/span&gt;)) { ans= v1 + v2; }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(op.equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;)) { ans= v1 - v2; }\n   &lt;span class=&quot;hljs-comment&quot;&gt;//.........&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A Java class that can evaluate mathematical expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; test;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Calculator&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Double &lt;span class=&quot;hljs-title function_&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String expression)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || expression.length() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; calc(expression.replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Double &lt;span class=&quot;hljs-title function_&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String expression)&lt;/span&gt; {\n        String[] containerArr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{expression};\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;leftVal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getNextOperand(containerArr);\n        expression = containerArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression.length() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal;\n        }\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; expression.charAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n        expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt; || operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;) {\n            containerArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = expression;\n            &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rightVal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getNextOperand(containerArr);\n            expression = containerArr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;) {\n                leftVal = leftVal * rightVal;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                leftVal = leftVal / rightVal;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (expression.length() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                operator = expression.charAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n                expression = expression.substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal;\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (operator == &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal + calc(expression);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; leftVal - calc(expression);\n        }\n\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNextOperand&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] exp)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; res;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].startsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (open != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(i) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt;) {\n                    open++;\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(i) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;) {\n                    open--;\n                }\n                i++;\n            }\n            res = calc(exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n            exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(i);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;) {\n                i++;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].length() &amp;gt; i &amp;amp;&amp;amp; isNumber((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].charAt(i))) {\n                i++;\n            }\n            res = Double.parseDouble(exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i));\n            exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = exp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].substring(i);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n    }\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isNumber&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nine&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (c &amp;gt;= zero &amp;amp;&amp;amp; c &amp;lt;= nine) || c ==&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        System.out.println(calculate(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(((( -6 )))) * 9 * -1&quot;&lt;/span&gt;));\n        System.out.println(calc(&lt;span class=&quot;hljs-string&quot;&gt;&quot;(-5.2+-5*-5*((5/4+2)))&quot;&lt;/span&gt;));\n\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;How about something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10+3&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;st.length();i++)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(st.charAt(i)==&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;)\n  {\n    result=Integer.parseInt(st.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, i))+Integer.parseInt(st.substring(i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, st.length()));\n    System.out.print(result);\n  }         \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and do the similar thing for every other mathematical operator accordingly .. &lt;/p&gt;\n    ","\n&lt;p&gt;It is possible to convert any expression string in infix notation to a postfix notation using &lt;a href=&quot;https://en.wikipedia.org/wiki/Shunting-yard_algorithm&quot; rel=&quot;nofollow&quot;&gt;Djikstra&apos;s shunting-yard algorithm&lt;/a&gt;. The result of the algorithm can then serve as input to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_Polish_notation&quot; rel=&quot;nofollow&quot;&gt;postfix algorithm&lt;/a&gt; with returns the result of the expression.&lt;/p&gt;\n\n&lt;p&gt;I wrote an article about it &lt;a href=&quot;http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/&quot; rel=&quot;nofollow&quot;&gt;here, with an implementation in java&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another option: &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser&quot; rel=&quot;nofollow&quot;&gt;https://github.com/stefanhaustein/expressionparser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I have implemented this to have a simple but flexible option to permit both:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Immediate processing (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/calculator/Calculator.java&quot; rel=&quot;nofollow&quot;&gt;Calculator.java&lt;/a&gt;, &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/sets/SetDemo.java&quot; rel=&quot;nofollow&quot;&gt;SetDemo.java&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Building and processing a parse tree (&lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/blob/master/src/main/java/org/kobjects/expressionparser/demo/cas/TreeBuilder.java&quot; rel=&quot;nofollow&quot;&gt;TreeBuilder.java&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The TreeBuilder linked above is part of a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/cas&quot; rel=&quot;nofollow&quot;&gt;CAS demo package&lt;/a&gt; that does symbolic derivation. There is also a &lt;a href=&quot;https://github.com/stefanhaustein/expressionparser/tree/master/src/main/java/org/kobjects/expressionparser/demo/basic&quot; rel=&quot;nofollow&quot;&gt;BASIC interpreter&lt;/a&gt; example and I have started to build a &lt;a href=&quot;https://github.com/stefanhaustein/typo&quot; rel=&quot;nofollow&quot;&gt;TypeScript interpreter&lt;/a&gt; using it.&lt;/p&gt;\n    ","\n&lt;p&gt;External library like RHINO or NASHORN can be used to run javascript. And javascript can evaluate simple formula without parcing the string. No performance impact as well if code is written well.\nBelow is an example with RHINO - &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RhinoApp&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;simpleAdd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(12+13+2-2)*2+(12+13+2-2)*2&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;runJavaScript&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;jsCx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Context.enter();\n    Context.getCurrentContext().setOptimizationLevel(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;ScriptableObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsCx.initStandardObjects();\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsCx.evaluateString(scope, simpleAdd , &lt;span class=&quot;hljs-string&quot;&gt;&quot;formula&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    Context.exit();\n    System.out.println(result);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngine;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptEngineManager;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.script.ScriptException;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test2&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; ScriptException {\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;10+2&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mn&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScriptEngineManager&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;ScriptEngine&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; mn.getEngineByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;js&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; en.eval(s);\n        System.out.println(result);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"378":["\n&lt;h2&gt;TL;DR&lt;/h2&gt;\n&lt;p&gt;Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;Set&lt;/a&gt; constructor and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot; rel=&quot;noreferrer&quot;&gt;spread syntax&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;uniq = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(array)];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;&quot;Smart&quot; but naïve way&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;uniqueArray = a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, pos&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item) == pos;\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Basically, we iterate over the array and, for each element, check if the first position of this element in the array is equal to the current position. Obviously, these two positions are different for duplicate elements.&lt;/p&gt;\n&lt;p&gt;Using the 3rd (&quot;this array&quot;) parameter of the filter callback we can avoid a closure of the array variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;uniqueArray = a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, pos, self&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item) == pos;\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although concise, this algorithm is not particularly efficient for large arrays (quadratic time).&lt;/p&gt;\n&lt;h2&gt;Hashtables to the rescue&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seen = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(item) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : (seen[item] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is how it&apos;s usually done. The idea is to place each element in a hashtable and then check for its presence instantly. This gives us linear time, but has at least two drawbacks:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;since hash keys can only be strings or symbols in JavaScript, this code doesn&apos;t distinguish numbers and &quot;numeric strings&quot;. That is, &lt;code&gt;uniq([1,&quot;1&quot;])&lt;/code&gt; will return just &lt;code&gt;[1]&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;for the same reason, all objects will be considered equal: &lt;code&gt;uniq([{foo:1},{foo:2}])&lt;/code&gt; will return just &lt;code&gt;[{foo:1}]&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;That said, if your arrays contain only primitives and you don&apos;t care about types (e.g. it&apos;s always numbers), this solution is optimal.&lt;/p&gt;\n&lt;h2&gt;The best from two worlds&lt;/h2&gt;\n&lt;p&gt;A universal solution combines both approaches: it uses hash lookups for primitives and linear search for objects.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; prims = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;:{}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;number&quot;&lt;/span&gt;:{}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;:{}}, objs = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; type = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; item;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(type &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; prims)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prims[type].&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(item) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : (prims[type][item] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; objs.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item) &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : objs.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(item);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;sort | uniq&lt;/h2&gt;\n&lt;p&gt;Another option is to sort the array first, and then remove each element equal to the preceding one:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, pos, ary&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !pos || item != ary[pos - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, this doesn&apos;t work with objects (because all objects are equal for &lt;code&gt;sort&lt;/code&gt;). Additionally, we silently change the original array as a side effect - not good! However, if your input is already sorted, this is the way to go (just remove &lt;code&gt;sort&lt;/code&gt; from the above).&lt;/p&gt;\n&lt;h2&gt;Unique by...&lt;/h2&gt;\n&lt;p&gt;Sometimes it&apos;s desired to uniquify a list based on some criteria other than just equality, for example, to filter out objects that are different, but share some property. This can be done elegantly by passing a callback. This &quot;key&quot; callback is applied to each element, and elements with equal &quot;keys&quot; are removed. Since &lt;code&gt;key&lt;/code&gt; is expected to return a primitive, hash table will work fine here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqBy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seen = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(item);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(k) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : (seen[k] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    })\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A particularly useful &lt;code&gt;key()&lt;/code&gt; is &lt;code&gt;JSON.stringify&lt;/code&gt; which will remove objects that are physically different, but &quot;look&quot; the same:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]]\nb = &lt;span class=&quot;hljs-title function_&quot;&gt;uniqBy&lt;/span&gt;(a, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;stringify&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b) &lt;span class=&quot;hljs-comment&quot;&gt;// [[1,2,3], [4,5,6]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the &lt;code&gt;key&lt;/code&gt; is not primitive, you have to resort to the linear search:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqBy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k = &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(item);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; index.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(k) &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : index.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(k);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In ES6 you can use a &lt;code&gt;Set&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqBy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; seen = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; k = &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(item);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(k) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : seen.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(k);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or a &lt;code&gt;Map&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqBy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [\n        ...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(\n            a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(x), x])\n        ).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()\n    ]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which both also work with non-primitive keys.&lt;/p&gt;\n&lt;h2&gt;First or last?&lt;/h2&gt;\n&lt;p&gt;When removing objects by a key, you might to want to keep the first of &quot;equal&quot; objects or the last one.&lt;/p&gt;\n&lt;p&gt;Use the &lt;code&gt;Set&lt;/code&gt; variant above to keep the first, and the &lt;code&gt;Map&lt;/code&gt; to keep the last:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqByKeepFirst&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; seen = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; k = &lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(item);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(k) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : seen.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(k);\n    });\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqByKeepLast&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [\n        ...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;(\n            a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-title function_&quot;&gt;key&lt;/span&gt;(x), x])\n        ).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;()\n    ]\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n\ndata = [\n    {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;},\n    {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;u&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;},\n];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;uniqByKeepFirst&lt;/span&gt;(data, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;it&lt;/span&gt; =&amp;gt;&lt;/span&gt; it.&lt;span class=&quot;hljs-property&quot;&gt;u&lt;/span&gt;))\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;uniqByKeepLast&lt;/span&gt;(data, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;it&lt;/span&gt; =&amp;gt;&lt;/span&gt; it.&lt;span class=&quot;hljs-property&quot;&gt;u&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Libraries&lt;/h2&gt;\n&lt;p&gt;Both &lt;a href=&quot;http://underscorejs.org/#uniq&quot; rel=&quot;noreferrer&quot;&gt;underscore&lt;/a&gt; and &lt;a href=&quot;https://lodash.com/docs#uniq&quot; rel=&quot;noreferrer&quot;&gt;Lo-Dash&lt;/a&gt; provide &lt;code&gt;uniq&lt;/code&gt; methods. Their algorithms are basically similar to the first snippet above and boil down to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = [];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(result.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n         result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(item);\n     }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is quadratic, but there are nice additional goodies, like wrapping native &lt;code&gt;indexOf&lt;/code&gt;, ability to uniqify by a key (&lt;code&gt;iteratee&lt;/code&gt; in their parlance), and optimizations for already sorted arrays.&lt;/p&gt;\n&lt;p&gt;If you&apos;re using jQuery and can&apos;t stand anything without a dollar before it, it goes like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  $.uniqArray = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;grep&lt;/span&gt;(a, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, pos&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(item, a) === pos;\n        });\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which is, again, a variation of the first snippet.&lt;/p&gt;\n&lt;h2&gt;Performance&lt;/h2&gt;\n&lt;p&gt;Function calls are expensive in JavaScript, therefore the above solutions, as concise as they are, are not particularly efficient. For maximal performance, replace &lt;code&gt;filter&lt;/code&gt; with a loop and get rid of other function calls:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq_fast&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seen = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; out = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item = a[i];\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(seen[item] !== &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n               seen[item] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n               out[j++] = item;\n         }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This chunk of ugly code does the same as the snippet #3 above, &lt;s&gt;but an order of magnitude faster&lt;/s&gt; (as of 2017 it&apos;s only twice as fast - JS core folks are doing a great job!)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seen = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seen.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(item) ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : (seen[item] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq_fast&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seen = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; out = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; item = a[i];\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(seen[item] !== &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n               seen[item] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n               out[j++] = item;\n         }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/////&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],\n    a = [],\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;LEN&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,\n    &lt;span class=&quot;hljs-variable constant_&quot;&gt;LOOPS&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable constant_&quot;&gt;LEN&lt;/span&gt;--)\n    a = a.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(r);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;LOOPS&lt;/span&gt;; i++)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br&amp;gt;uniq, ms/loop: &apos;&lt;/span&gt; + (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;() - d)/&lt;span class=&quot;hljs-variable constant_&quot;&gt;LOOPS&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;LOOPS&lt;/span&gt;; i++)\n    &lt;span class=&quot;hljs-title function_&quot;&gt;uniq_fast&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br&amp;gt;uniq_fast, ms/loop: &apos;&lt;/span&gt; + (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;() - d)/&lt;span class=&quot;hljs-variable constant_&quot;&gt;LOOPS&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;ES6&lt;/h2&gt;\n&lt;p&gt;ES6 provides the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;Set&lt;/a&gt; object, which makes things a whole lot easier:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(a));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt; = a =&amp;gt; [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(a)];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that, unlike in python, ES6 sets are iterated in insertion order, so this code preserves the order of the original array.&lt;/p&gt;\n&lt;p&gt;However, if you need an array with unique elements, why not use sets right from the beginning?&lt;/p&gt;\n&lt;h2&gt;Generators&lt;/h2&gt;\n&lt;p&gt;A &quot;lazy&quot;, generator-based version of &lt;code&gt;uniq&lt;/code&gt; can be built on the same basis:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;take the next value from the argument&lt;/li&gt;\n&lt;li&gt;if it&apos;s been seen already, skip it&lt;/li&gt;\n&lt;li&gt;otherwise, yield it and add it to the set of already seen values&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;uniqIter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; seen = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; a) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!seen.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(x)) {\n            seen.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(x);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; x;\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// example:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;randomsBelow&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;limit&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * limit);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// note that randomsBelow is endless&lt;/span&gt;\n\ncount = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\nlimit = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqIter&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;randomsBelow&lt;/span&gt;(limit))) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(r);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (--count === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// exercise for the reader: what happens if we set `limit` less than `count` and why&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Quick and dirty using jQuery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniqueNames = [];\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(names, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i, el&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;($.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(el, uniqueNames) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) uniqueNames.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(el);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Got tired of seeing all bad examples with for-loops or jQuery. Javascript has the perfect tools for this nowadays: sort, map and reduce. &lt;/p&gt;\n\n&lt;h2&gt;Uniq reduce while keeping existing order&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniq = names.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(b) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n  },[]);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(uniq, names) &lt;span class=&quot;hljs-comment&quot;&gt;// [ &apos;Mike&apos;, &apos;Matt&apos;, &apos;Nancy&apos;, &apos;Adam&apos;, &apos;Jenny&apos;, &apos;Carl&apos; ]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// one liner&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; names.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(b)&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(b);&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;},[]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Faster uniq with sorting&lt;/h2&gt;\n\n&lt;p&gt;There are probably faster ways but this one is pretty decent.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniq = names.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// slice makes copy of array before sorting it&lt;/span&gt;\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a &amp;gt; b;\n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] !== b) a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(b); &lt;span class=&quot;hljs-comment&quot;&gt;// slice(-1)[0] means last item in array without removing it (like .pop())&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n  },[]); &lt;span class=&quot;hljs-comment&quot;&gt;// this empty array becomes the starting value for a&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// one liner&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; names.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a &amp;gt; b}).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] !== b) a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(b);&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;},[]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Update 2015: ES6 version:&lt;/h2&gt;\n\n&lt;p&gt;In ES6 you have Sets and Spread which makes it very easy and performant to remove all duplicates:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniq = [ ...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(names) ]; &lt;span class=&quot;hljs-comment&quot;&gt;// [ &apos;Mike&apos;, &apos;Matt&apos;, &apos;Nancy&apos;, &apos;Adam&apos;, &apos;Jenny&apos;, &apos;Carl&apos; ]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sort based on occurrence:&lt;/h2&gt;\n\n&lt;p&gt;Someone asked about ordering the results based on how many unique names there are:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Mike&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Matt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Nancy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Adam&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jenny&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Nancy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Carl&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniq = names\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: name}\n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n    a[b.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;] = (a[b.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;] || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) + b.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n  }, {})\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sorted = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(uniq).&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; uniq[a] &amp;lt; uniq[b])\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(sorted)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Vanilla JS: Remove duplicates using an Object like a Set&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can always try putting it into an object, and then iterating through its keys:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret_arr = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        obj[arr[i]] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj) {\n        ret_arr.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(key);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret_arr;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Vanilla JS: Remove duplicates by tracking already seen values (order-safe)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Or, for an order-safe version, use an object to store all previously seen values, and check values against it before before adding to an array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates_safe&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seen = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret_arr = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(arr[i] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seen)) {\n            ret_arr.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arr[i]);\n            seen[arr[i]] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret_arr;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;ECMAScript 6: Use the new Set data structure (order-safe)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;ECMAScript 6 adds the new &lt;code&gt;Set&lt;/code&gt; Data-Structure, which lets you store values of any type.  &lt;code&gt;Set.values&lt;/code&gt; returns elements in insertion order.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates_es6&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(arr);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; it = s.&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(it);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;];\n\nb = &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-comment&quot;&gt;// b:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// [&quot;Adam&quot;, &quot;Carl&quot;, &quot;Jenny&quot;, &quot;Matt&quot;, &quot;Mike&quot;, &quot;Nancy&quot;]&lt;/span&gt;\n\nc = &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates_safe&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-comment&quot;&gt;// c:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// [&quot;Mike&quot;, &quot;Matt&quot;, &quot;Nancy&quot;, &quot;Adam&quot;, &quot;Jenny&quot;, &quot;Carl&quot;]&lt;/span&gt;\n\nd = &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates_es6&lt;/span&gt;(a);\n&lt;span class=&quot;hljs-comment&quot;&gt;// d:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// [&quot;Mike&quot;, &quot;Matt&quot;, &quot;Nancy&quot;, &quot;Adam&quot;, &quot;Jenny&quot;, &quot;Carl&quot;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A single line version using array &lt;code&gt;.filter&lt;/code&gt; and &lt;code&gt;.indexOf&lt;/code&gt; function:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;arr = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;value, index, array&lt;/span&gt;) { \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(value) === index;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Use &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;It&apos;s a library with a host of functions for manipulating arrays. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s the tie to go along with jQuery&apos;s tux, and Backbone.js&apos;s\n  suspenders.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://underscorejs.org/#uniq&quot;&gt;_.uniq&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;_.uniq(array, [isSorted], [iterator])&lt;/code&gt; &lt;em&gt;Alias:&lt;/em&gt; &lt;strong&gt;unique&lt;/strong&gt;&lt;br&gt;\n  Produces a duplicate-free version of the &lt;strong&gt;array&lt;/strong&gt;, using === to test object\n  equality. If you know in advance that the &lt;strong&gt;array&lt;/strong&gt; is sorted, passing\n  &lt;em&gt;true&lt;/em&gt; for &lt;strong&gt;isSorted&lt;/strong&gt; will run a much faster algorithm. If you want to\n  compute unique items based on a transformation, pass an &lt;strong&gt;iterator&lt;/strong&gt;\n  function.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jsfiddle.net/ZNLUP/1/&quot;&gt;Example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(_.&lt;span class=&quot;hljs-title function_&quot;&gt;uniq&lt;/span&gt;(names, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Note: &lt;a href=&quot;http://lodash.com&quot;&gt;Lo-Dash&lt;/a&gt; (an &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore&lt;/a&gt; competitor) also offers a comparable &lt;a href=&quot;http://lodash.com/docs#uniq&quot;&gt;.uniq&lt;/a&gt; implementation.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;One line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Mike&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Matt&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Nancy&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Adam&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jenny&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Nancy&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Carl&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Nancy&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; dup = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(names)];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(dup);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can simply do it in JavaScript, with the help of the second - index - parameter of the &lt;code&gt;filter&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\na.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(value) == index });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or in short hand&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v,i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(v) == i)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;use &lt;code&gt;Array.filter()&lt;/code&gt; like this&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; actualArr = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Banana&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mango&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Strawberry&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Banana&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Actual Array: &apos;&lt;/span&gt; + actualArr);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; filteredArr = actualArr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, index&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (actualArr.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item) == index)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item;\n});\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Filtered Array: &apos;&lt;/span&gt; + filteredArr);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;this can be made shorter in ES6 to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;actualArr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item,index,self&lt;/span&gt;) =&amp;gt;&lt;/span&gt; self.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(item)==index);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt; is nice explanation of &lt;code&gt;Array.filter()&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The most concise way to remove duplicates from an array using native javascript functions is to use a sequence like below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;vals.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b != a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) a.&lt;span class=&quot;hljs-title function_&quot;&gt;unshift&lt;/span&gt;(b); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a }, [])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;there&apos;s no need for &lt;code&gt;slice&lt;/code&gt; nor &lt;code&gt;indexOf&lt;/code&gt; within the reduce function, like i&apos;ve seen in other examples! it makes sense to use it along with a filter function though:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;vals.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v, i, a&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i == a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(v) })\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yet another ES6(2015) way of doing this that already works on a few browsers is: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(vals))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or even using the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(vals)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;cheers!&lt;/p&gt;\n    ","\n&lt;p&gt;The top answers have complexity of &lt;code&gt;O(n²)&lt;/code&gt;, but this can be done with just &lt;code&gt;O(n)&lt;/code&gt; by using an object as a hash:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDistinctArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; dups = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hash = el.&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isDup = dups[hash];\n        dups[hash] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !isDup;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will work for strings, numbers, and dates.  If your array contains objects, the above solution won&apos;t work because when coerced to a string, they will all have a value of &lt;code&gt;&quot;[object Object]&quot;&lt;/code&gt; (or something similar) and that isn&apos;t suitable as a lookup value.  You can get an &lt;code&gt;O(n)&lt;/code&gt; implementation for objects by setting a flag on the object itself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDistinctObjArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; distinctArr = arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isDup = el.&lt;span class=&quot;hljs-property&quot;&gt;inArray&lt;/span&gt;;\n        el.&lt;span class=&quot;hljs-property&quot;&gt;inArray&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !isDup;\n    });\n    distinctArr.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; el.&lt;span class=&quot;hljs-property&quot;&gt;inArray&lt;/span&gt;;\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; distinctArr;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;2019 edit:&lt;/strong&gt; Modern versions of JavaScript make this a much easier problem to solve.  Using &lt;code&gt;Set&lt;/code&gt; will work, regardless of whether your array contains objects, strings, numbers, or any other type.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDistinctArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(arr)];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The implementation is so simple, defining a function is no longer warranted.&lt;/p&gt;\n    ","\n&lt;p&gt;Simplest One I&apos;ve run into so far. In es6.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;]\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; noDupe = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(names))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In ECMAScript 6 (aka ECMAScript 2015), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; can be used to filter out duplicates. Then it can be converted back to an array using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator&quot;&gt;spread operator&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;],\n    unique = [...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(names)];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Solution 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;unique&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; current = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(current) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(current);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution 2 (using Set)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;unique&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x=[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\nx.&lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;//[1,2,3]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When I tested both implementation (with and without Set) for performance in chrome, I found that the one with Set is much much faster!&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;unique1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; current = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(current) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) a.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(current);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;unique2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x=[];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;;i++){\n\tx.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;+i);x.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;+(i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique1&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x.&lt;span class=&quot;hljs-title function_&quot;&gt;unique1&lt;/span&gt;());\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;timeEnd&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique1&quot;&lt;/span&gt;);\n\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x.&lt;span class=&quot;hljs-title function_&quot;&gt;unique2&lt;/span&gt;());\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;timeEnd&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique2&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Go for this one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniqueArray = duplicateArray.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem, pos&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; duplicateArray.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(elem) == pos;\n}); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now uniqueArray contains no duplicates.&lt;/p&gt;\n    ","\n&lt;p&gt;The following is more than 80% faster than the jQuery method listed (see tests below).\nIt is an answer from a similar question a few years ago. If I come across the person who originally proposed it I will post credit.\nPure JS.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; temp = {};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++)\n  temp[array[i]] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = [];\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; temp)\n  r.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(k);\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My test case comparison:\n&lt;a href=&quot;http://jsperf.com/remove-duplicate-array-tests&quot; rel=&quot;noreferrer&quot;&gt;http://jsperf.com/remove-duplicate-array-tests&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I had done a detailed comparison of dupes removal at some other question but having noticed that this is the real place i just wanted to share it here as well.&lt;/p&gt;\n\n&lt;p&gt;I believe this is the best way to do this&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myArray = [&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;],\n    reduced = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (p[c] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,p),{}));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(reduced);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;OK .. even though this one is O(n) and the others are O(n^2) i was curious to see benchmark comparison between this reduce / look up table and filter/indexOf combo (I choose Jeetendras very nice implementation &lt;a href=&quot;https://stackoverflow.com/a/37441144/4543207&quot;&gt;https://stackoverflow.com/a/37441144/4543207&lt;/a&gt;). I prepare a 100K item array filled with random positive integers in range 0-9999 and and it removes the duplicates. I repeat the test for 10 times and the average of the results show that they are no match in performance.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In firefox v47 reduce &amp;amp; lut : 14.85ms vs filter &amp;amp; indexOf : 2836ms&lt;/li&gt;\n&lt;li&gt;In chrome  v51 reduce &amp;amp; lut : 23.90ms vs filter &amp;amp; indexOf : 1066ms&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Well ok so far so good. But let&apos;s do it properly this time in the ES6 style. It looks so cool..! But as of now how it will perform against the powerful lut solution is a mystery to me. Lets first see the code and then benchmark it.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myArray = [&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;],\n    reduced = [...myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(c,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;()];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(reduced);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Wow that was short..! But how about the performance..? It&apos;s beautiful... Since the heavy weight of the filter / indexOf lifted over our shoulders now i can test an array 1M random items of positive integers in range 0..99999 to get an average from 10 consecutive tests. I can say this time it&apos;s a real match. See the result for yourself :)&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ranar = [],\n     red1 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (p[c] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,p),{})),\n     red2 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; reduced = [...a.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(c,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;()],\n     avg1 = [],\n     avg2 = [],\n       ts = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n       te = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n     res1 = [],\n     res2 = [],\n     count= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;count; i++){\n  ranar = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;));\n  ts = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  res1 = &lt;span class=&quot;hljs-title function_&quot;&gt;red1&lt;/span&gt;(ranar);\n  te = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  avg1.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(te-ts);\n  ts = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  res2 = &lt;span class=&quot;hljs-title function_&quot;&gt;red2&lt;/span&gt;(ranar);\n  te = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  avg2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(te-ts);\n}\n\navg1 = avg1.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p+c)/count;\navg2 = avg2.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p+c)/count;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;reduce &amp;amp; lut took: &quot;&lt;/span&gt; + avg1 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;msec&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;map &amp;amp; spread took: &quot;&lt;/span&gt; + avg2 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;msec&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Which one would  you use..? Well not so fast...! Don&apos;t be deceived. Map is at displacement. Now look... in all of the above cases we fill an array of size n with numbers of range &amp;lt; n. I mean we have an array of size 100 and we fill with random numbers 0..9 so there are definite duplicates and &quot;almost&quot; definitely each number has a duplicate. How about if we fill the array in size 100 with random numbers 0..9999. Let&apos;s now see Map playing at home. This time an Array of 100K items but random number range is 0..100M. We will do 100 consecutive tests to average the results. OK let&apos;s see the bets..! &amp;lt;- no typo&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ranar = [],\n     red1 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(a.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (p[c] = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,p),{})),\n     red2 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; reduced = [...a.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(c,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;()],\n     avg1 = [],\n     avg2 = [],\n       ts = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n       te = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n     res1 = [],\n     res2 = [],\n     count= &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;count; i++){\n  ranar = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;100000000&lt;/span&gt;));\n  ts = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  res1 = &lt;span class=&quot;hljs-title function_&quot;&gt;red1&lt;/span&gt;(ranar);\n  te = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  avg1.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(te-ts);\n  ts = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  res2 = &lt;span class=&quot;hljs-title function_&quot;&gt;red2&lt;/span&gt;(ranar);\n  te = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  avg2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(te-ts);\n}\n\navg1 = avg1.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p+c)/count;\navg2 = avg2.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p+c)/count;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;reduce &amp;amp; lut took: &quot;&lt;/span&gt; + avg1 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;msec&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;map &amp;amp; spread took: &quot;&lt;/span&gt; + avg2 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;msec&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Now this is the spectacular comeback of Map()..! May be now you can make a better decision when you want to remove the dupes.&lt;/p&gt;\n\n&lt;p&gt;Well ok we are all happy now. But the lead role always comes last with some applause. I am sure some of you wonder what Set object would do. Now that since we are open to ES6 and we know Map is the winner of the previous games let us compare Map with Set as a final. A typical Real Madrid vs Barcelona game this time... or is it? Let&apos;s see who will win the el classico :)&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ranar = [],\n     red1 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; reduced = [...a.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(c,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;),&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Map&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;()],\n     red2 = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(a)),\n     avg1 = [],\n     avg2 = [],\n       ts = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n       te = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n     res1 = [],\n     res2 = [],\n     count= &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;count; i++){\n  ranar = (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;));\n  ts = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  res1 = &lt;span class=&quot;hljs-title function_&quot;&gt;red1&lt;/span&gt;(ranar);\n  te = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  avg1.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(te-ts);\n  ts = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  res2 = &lt;span class=&quot;hljs-title function_&quot;&gt;red2&lt;/span&gt;(ranar);\n  te = performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;();\n  avg2.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(te-ts);\n}\n\navg1 = avg1.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p+c)/count;\navg2 = avg2.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p,c&lt;/span&gt;) =&amp;gt;&lt;/span&gt; p+c)/count;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;map &amp;amp; spread took: &quot;&lt;/span&gt; + avg1 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;msec&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;set &amp;amp; A.from took: &quot;&lt;/span&gt; + avg2 + &lt;span class=&quot;hljs-string&quot;&gt;&quot;msec&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Wow.. man..! Well unexpectedly it didn&apos;t turn out to be an el classico at all. More like Barcelona FC against CA Osasuna :))&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a simple answer to the question.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; names = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Alex&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tony&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;James&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Suzane&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Marie&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Laurence&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Alex&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Suzane&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Marie&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Marie&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;James&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Tony&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Alex&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniqueNames = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; names){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(uniqueNames.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(names[i]) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            uniqueNames.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(names[i]);\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A simple but effective technique, is to use the &lt;code&gt;filter&lt;/code&gt; method in combination with the filter &lt;code&gt;function(value, index){ return this.indexOf(value) == index }&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Code example :&lt;/h3&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; filter = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, index&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(value) == index };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; filteredData = data.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(filter, data );\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;pre&amp;gt;&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(filteredData, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;) +  &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/pre&amp;gt;&apos;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://jsfiddle.net/s6skxLtz/4/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;this Fiddle&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;So the options is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; b = []\n\n\nb = [ ...&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(a) ];     \n&lt;span class=&quot;hljs-comment&quot;&gt;// b = [11, 22]&lt;/span&gt;\n\nb = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(a))   \n&lt;span class=&quot;hljs-comment&quot;&gt;// b = [11, 22]&lt;/span&gt;\n\nb = a.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val,i&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(val)==i\n})                        \n&lt;span class=&quot;hljs-comment&quot;&gt;// b = [11, 22]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is very simple for understanding and working anywhere (even in PhotoshopScript) code. Check it!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; peoplenames = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;);\n\npeoplenames = &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(peoplenames);\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(peoplenames);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unique&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len = array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; j &amp;lt; len; j++) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array[j] == array[i]){\n            array.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(j,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            j--;\n            len--;\n        }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//*result* peoplenames == [&quot;Mike&quot;,&quot;Matt&quot;,&quot;Nancy&quot;,&quot;Adam&quot;,&quot;Jenny&quot;,&quot;Carl&quot;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;here is the simple method without any special libraries are special function,&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;name_list = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;];\nget_uniq = name_list.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val,ind&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name_list.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(val) == ind; })\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Original name list:&quot;&lt;/span&gt;+name_list.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, name_list)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n Unique name list:&quot;&lt;/span&gt;+get_uniq.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, get_uniq)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/PbJoQ.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/PbJoQ.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Apart from being a simpler, more terse solution than the current answers (minus the future-looking ES6 ones), I perf tested this and it was much faster as well: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniqueArray = dupeArray.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item, i, self&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.&lt;span class=&quot;hljs-title function_&quot;&gt;lastIndexOf&lt;/span&gt;(item) == i;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One caveat: Array.lastIndexOf() was added in IE9, so if you need to go lower than that, you&apos;ll need to look elsewhere.&lt;/p&gt;\n    ","\n&lt;h2&gt;Generic Functional Approach&lt;/h2&gt;\n\n&lt;p&gt;Here is a generic and strictly functional approach with ES2015:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// small, reusable auxiliary functions&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(a);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flip&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;b&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(a) (b);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uncurry&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(a) (b);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt; = x =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt; =&amp;gt;&lt;/span&gt; (xs.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(x), xs);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foldl&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;acc&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt; =&amp;gt;&lt;/span&gt; xs.&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;uncurry&lt;/span&gt;(f), acc);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt; =&amp;gt;&lt;/span&gt; xs.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(f));\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the actual de-duplicate function&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uniqueBy&lt;/span&gt; = f =&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foldl&lt;/span&gt;(\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;acc&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(x)) (acc)\n    ? acc\n    : &lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(x) (acc)\n ) ([]);\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// comparators&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eq&lt;/span&gt; = y =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x === y;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// string equality case insensitive :D&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;seqCI&lt;/span&gt; = y =&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; x.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;() === y.&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;();\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// mock data&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xs = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; ys = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;];\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;uniqueBy&lt;/span&gt;(eq) (xs) );\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;uniqueBy&lt;/span&gt;(seqCI) (ys) );&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;We can easily derive &lt;code&gt;unique&lt;/code&gt; from &lt;code&gt;unqiueBy&lt;/code&gt; or use the faster implementation utilizing &lt;code&gt;Set&lt;/code&gt;s:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; unqiue = &lt;span class=&quot;hljs-title function_&quot;&gt;uniqueBy&lt;/span&gt;(eq);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// const unique = xs =&amp;gt; Array.from(new Set(xs));&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Benefits of this approach:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;generic solution by using a separate comparator function&lt;/li&gt;\n&lt;li&gt;declarative and succinct implementation&lt;/li&gt;\n&lt;li&gt;reuse of other small, generic functions&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Performance Considerations&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;uniqueBy&lt;/code&gt; isn&apos;t as fast as an imperative implementation with loops, but it is way more expressive due to its genericity.&lt;/p&gt;\n\n&lt;p&gt;If you identify &lt;code&gt;uniqueBy&lt;/code&gt; as the cause of a concrete performance penalty in your app, replace it with optimized code. That is, write your code first in an functional, declarative way. Afterwards, provided that you encounter performance issues, try to optimize the code at the locations, which are the cause of the problem.&lt;/p&gt;\n\n&lt;h2&gt;Memory Consumption and Garbage Collection&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;uniqueBy&lt;/code&gt; utilizes mutations (&lt;code&gt;push(x) (acc)&lt;/code&gt;) hidden inside its body. It reuses the accumulator instead of throwing it away after each iteration. This reduces memory consumption and GC pressure. Since this side effect is wrapped inside the function, everything outside remains pure.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;originalArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!newArray.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(originalArray[i])) {\n        newArray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(originalArray[i]); \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following script returns a new array containing only unique values. It works on string and numbers. No requirement for additional libraries only vanilla JS.&lt;/p&gt;\n\n&lt;p&gt;Browser support:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Feature&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt;  &lt;span class=&quot;hljs-title class_&quot;&gt;Firefox&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Gecko&lt;/span&gt;)     &lt;span class=&quot;hljs-title class_&quot;&gt;Internet&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Explorer&lt;/span&gt;   &lt;span class=&quot;hljs-title class_&quot;&gt;Opera&lt;/span&gt;   &lt;span class=&quot;hljs-title class_&quot;&gt;Safari&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Basic&lt;/span&gt; support   (&lt;span class=&quot;hljs-title class_&quot;&gt;Yes&lt;/span&gt;)   &lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1.8&lt;/span&gt;)   &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;                   (&lt;span class=&quot;hljs-title class_&quot;&gt;Yes&lt;/span&gt;)   (&lt;span class=&quot;hljs-title class_&quot;&gt;Yes&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/fzmcgcxv/3/&quot; rel=&quot;noreferrer&quot;&gt;https://jsfiddle.net/fzmcgcxv/3/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; duplicates = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Matt&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Adam&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jenny&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nancy&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Carl&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; unique = duplicates.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem, pos&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; duplicates.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(elem) == pos;\n  }); \n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(unique);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If by any chance you were using&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;D3.js&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You could do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;d3.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;]).&lt;span class=&quot;hljs-title function_&quot;&gt;values&lt;/span&gt;() ==&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/mbostock/d3/wiki/Arrays#set_values&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/mbostock/d3/wiki/Arrays#set_values&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A slight modification of thg435&apos;s excellent answer to use a custom comparator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(array[i], obj)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//comparator&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isEqual&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj1, obj2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj1.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; == obj2.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeDuplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ary&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ary.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; !&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(arr, x) &amp;amp;&amp;amp; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(x);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr1=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;fish&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;fish&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;orange&quot;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr2=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;fish&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;mango&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;apple&quot;&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uniquevalue=[];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; seconduniquevalue=[];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; finalarray=[];\n\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(arr1,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key,value&lt;/span&gt;){\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;($.inArray (value,uniquevalue) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n       {\n           uniquevalue.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(value)\n\n       }\n\n    });\n\n     $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(arr2,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key,value&lt;/span&gt;){\n\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;($.inArray (value,seconduniquevalue) === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n       {\n           seconduniquevalue.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(value)\n\n       }\n\n    });\n\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(uniquevalue,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ikey,ivalue&lt;/span&gt;){\n\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(seconduniquevalue,&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ukey,uvalue&lt;/span&gt;){\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( ivalue == uvalue)\n\n            {\n                finalarray.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(ivalue);\n            }   \n\n        });\n\n    });\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(finalarray);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/2w0k5tz8/&quot; rel=&quot;nofollow&quot;&gt;https://jsfiddle.net/2w0k5tz8/&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array_&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret_array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = array_.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; a &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; a--) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = array_.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; b &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; b--) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array_[a] == array_[b] &amp;amp;&amp;amp; a != b){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; array_[b];\n            }\n        };\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array_[a] != &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)\n            ret_array.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(array_[a]);\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret_array;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;remove_duplicates&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Loop through, remove duplicates, and create a clone array place holder because the array index will not be updated.&lt;/p&gt;\n\n&lt;p&gt;Loop backward for better performance ( your loop wont need to keep checking the length of your array) &lt;/p&gt;\n    "],"379":["\n&lt;p&gt;The &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; describe the attributes available on the &lt;code&gt;request&lt;/code&gt; object (&lt;code&gt;from flask import request&lt;/code&gt;) during a request. In most common cases &lt;code&gt;request.data&lt;/code&gt; will be empty because it&apos;s used as a fallback:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;request.data&lt;/code&gt; Contains the incoming request data as string in case it came with a mimetype Flask does not handle.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.args&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.args&lt;/code&gt;&lt;/a&gt;: the key/value pairs in the URL query string&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.form&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.form&lt;/code&gt;&lt;/a&gt;: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn&apos;t JSON encoded&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.files&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.files&lt;/code&gt;&lt;/a&gt;: the files in the body, which Flask keeps separate from &lt;code&gt;form&lt;/code&gt;. HTML forms must use &lt;code&gt;enctype=multipart/form-data&lt;/code&gt; or files will not be uploaded.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.values&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.values&lt;/code&gt;&lt;/a&gt;: combined &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;form&lt;/code&gt;, preferring &lt;code&gt;args&lt;/code&gt; if keys overlap&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.json&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.json&lt;/code&gt;&lt;/a&gt;: parsed JSON data. The request must have the &lt;code&gt;application/json&lt;/code&gt; content type, or use &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.get_json&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.get_json(force=True)&lt;/code&gt;&lt;/a&gt; to ignore the content type.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;All of these are &lt;a href=&quot;https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; instances (except for &lt;code&gt;json&lt;/code&gt;). You can access values using:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;request.form[&apos;name&apos;]&lt;/code&gt;: use indexing if you know the key exists&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.form.get(&apos;name&apos;)&lt;/code&gt;: use &lt;code&gt;get&lt;/code&gt; if the key might not exist&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.form.getlist(&apos;name&apos;)&lt;/code&gt;: use &lt;code&gt;getlist&lt;/code&gt; if the key is sent multiple times and you want a list of values. &lt;code&gt;get&lt;/code&gt; only returns the first value.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;To get the raw data, use &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.data&lt;/code&gt;&lt;/a&gt;. This only works if it couldn&apos;t be parsed as form data, otherwise it will be empty and &lt;code&gt;request.form&lt;/code&gt; will have the parsed data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; request\nrequest.data\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For URL query parameters, use &lt;code&gt;request.args&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;search = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;search&quot;&lt;/span&gt;)\npage = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;page&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For posted form input, use &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;email = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;email&apos;&lt;/span&gt;)\npassword = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For JSON posted with content type &lt;code&gt;application/json&lt;/code&gt;, use &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.get_json&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.get_json()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s an example of parsing posted JSON data and echoing it back.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, request, jsonify\n\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;) &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;():\n    data = request.json\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jsonify(data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To post JSON with curl:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;curl -i -H &quot;Content-Type: application/json&quot; -X POST -d &apos;{&quot;userId&quot;:&quot;1&quot;, &quot;username&quot;: &quot;fizz bizz&quot;}&apos; http://localhost:5000/foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or to use Postman:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/2CaoI.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/2CaoI.png&quot; alt=&quot;using postman to post JSON&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To get the raw post body regardless of the content type, use &lt;code&gt;request.get_data()&lt;/code&gt;. If you use &lt;code&gt;request.data&lt;/code&gt;, it calls &lt;code&gt;request.get_data(parse_form_data=True)&lt;/code&gt;, which will populate the &lt;code&gt;request.form&lt;/code&gt; &lt;code&gt;MultiDict&lt;/code&gt; and leave &lt;code&gt;data&lt;/code&gt; empty.&lt;/p&gt;\n    ","\n&lt;p&gt;If you post JSON with content type &lt;code&gt;application/json&lt;/code&gt;, use &lt;code&gt;request.get_json()&lt;/code&gt; to get it in Flask. If the content type is not correct, &lt;code&gt;None&lt;/code&gt; is returned. If the data is not JSON, an error is raised.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/something&quot;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do_something&lt;/span&gt;():\n    data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To get &lt;code&gt;request.form&lt;/code&gt; as a normal dictionary , use &lt;code&gt;request.form.to_dict(flat=False)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;To return JSON data for an API, pass it to &lt;code&gt;jsonify&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;This example returns form data as JSON data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/form_to_json&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;form_to_json&lt;/span&gt;():\n    data = request.form.to_dict(flat=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jsonify(data)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s an example of POST form data with curl, returning as JSON:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$ curl http://127.0.0.1:5000/data -d &quot;name=ivanleoncz&amp;amp;role=Software Developer&quot;\n{\n  &quot;name&quot;: &quot;ivanleoncz&quot;, \n  &quot;role&quot;: &quot;Software Developer&quot;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;request.get_json()&lt;/code&gt; to get posted JSON data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\nname = data.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;code&gt;request.form&lt;/code&gt; to get data when submitting a form with the POST method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;code&gt;request.args&lt;/code&gt; to get data passed in the query string of the URL, like when submitting a form with the GET method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;request.form&lt;/code&gt; etc. are dict-like, use the &lt;code&gt;get&lt;/code&gt; method to get a value with a default if it wasn&apos;t passed.&lt;/p&gt;\n    ","\n&lt;p&gt;To get JSON posted without the &lt;code&gt;application/json&lt;/code&gt; content type, use &lt;code&gt;request.get_json(force=True)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/process_data&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process_data&lt;/span&gt;():\n    req_data = request.get_json(force=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    language = req_data[&lt;span class=&quot;hljs-string&quot;&gt;&apos;language&apos;&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;The language value is: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(language)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To post JSON with jQuery in JavaScript, use &lt;code&gt;JSON.stringify&lt;/code&gt; to dump the data, and set the content type to &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value_data = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/process&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(value_data),\n    &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;application/json&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;response_data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;);\n    }   \n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Parse it in Flask with &lt;code&gt;request.get_json()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Import request:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; request\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;URL query parameters:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;)\nage = request.args.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Form Input:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;)\nage = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OR (use indexing if you know the key exists, &lt;strong&gt;specify the name of input fields&lt;/strong&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;name = request.form[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]\nage = request.form[&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;JSON Data (for content type &lt;strong&gt;application/json&lt;/strong&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;data = request.get_json()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The raw data is passed in to the Flask application from the WSGI server as &lt;code&gt;request.stream&lt;/code&gt;. The length of the stream is in the &lt;code&gt;Content-Length&lt;/code&gt; header.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;length = request.headers[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;]\ndata = request.stream.read(length)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is usually safer to use &lt;code&gt;request.get_data()&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s an example of posting form data to add a user to a database. Check &lt;code&gt;request.method == &quot;POST&quot;&lt;/code&gt; to check if the form was submitted. Use keys from &lt;code&gt;request.form&lt;/code&gt; to get the form data. Render an HTML template with a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; otherwise. The fields in the form should have &lt;code&gt;name&lt;/code&gt; attributes that match the keys in &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Flask, request, render_template\n\napp = Flask(__name__)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/user/add&quot;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add_user&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;:\n        user = User(\n            username=request.form[&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;],\n            email=request.form[&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt;],\n        )\n        db.session.add(user)\n        db.session.commit()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; redirect(url_for(&lt;span class=&quot;hljs-string&quot;&gt;&quot;index&quot;&lt;/span&gt;))\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; render_template(&lt;span class=&quot;hljs-string&quot;&gt;&quot;add_user.html&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Username&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Email&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;email&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can get request data from&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;request.form&lt;/code&gt; for form data, this includes form and file data,&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.json&lt;/code&gt; and &lt;code&gt;request.get_json&lt;/code&gt; for JSON data&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.headers&lt;/code&gt; for headers&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;request.args&lt;/code&gt; to get query params&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;They&apos;re all like a dictionary, use &lt;code&gt;request.form[&apos;name&apos;]&lt;/code&gt; if you know the key exists, or &lt;code&gt;request.form.get(&apos;name&apos;)&lt;/code&gt; if it is optional.&lt;/p&gt;\n    ","\n&lt;p&gt;To parse JSON, use &lt;code&gt;request.get_json()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;/something&quot;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;do_something&lt;/span&gt;():\n    result = handle(request.get_json())\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jsonify(data=result)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When writing a Slack bot, which is supposed to send JSON data, I got a payload where the &lt;code&gt;Content-Type&lt;/code&gt; was &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I tried &lt;code&gt;request.get_json()&lt;/code&gt; and it didn&apos;t work.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/process_data&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;process_data&lt;/span&gt;():\n   req_data = request.get_json(force=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Instead I used &lt;code&gt;request.form&lt;/code&gt; to get the form data field that &lt;em&gt;contained&lt;/em&gt; JSON, then loaded that.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; json\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@ app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/slack/request_handler&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;request_handler&lt;/span&gt;():\n   req_data = json.loads(request.form[&lt;span class=&quot;hljs-string&quot;&gt;&quot;payload&quot;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the content type is recognized as form data, &lt;code&gt;request.data&lt;/code&gt; will parse that into &lt;code&gt;request.form&lt;/code&gt; and return an empty string.&lt;/p&gt;\n\n&lt;p&gt;To get the raw data regardless of content type, call &lt;a href=&quot;https://flask.palletsprojects.com/api/#flask.Request.get_data&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;request.get_data()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;request.data&lt;/code&gt; calls &lt;code&gt;get_data(parse_form_data=True)&lt;/code&gt;, while the default is &lt;code&gt;False&lt;/code&gt; if you call it directly.&lt;/p&gt;\n    ","\n&lt;p&gt;If the body is recognized as form data, it will be in &lt;code&gt;request.form&lt;/code&gt;. If it&apos;s JSON, it will be in &lt;code&gt;request.get_json()&lt;/code&gt;. Otherwise the raw data will be in &lt;code&gt;request.data&lt;/code&gt;. If you&apos;re not sure how data will be submitted, you can use an &lt;code&gt;or&lt;/code&gt; chain to get the first one with data.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_request_data&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n        request.args\n        &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; request.form\n        &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; request.get_json(force=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, silent=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; request.data\n    )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;request.args&lt;/code&gt; contains args parsed from the query string, regardless of what was in the body, so you would remove that from &lt;code&gt;get_request_data()&lt;/code&gt; if both it and a body should data at  the same time.&lt;/p&gt;\n    ","\n&lt;p&gt;When posting form data with an HTML form, be sure the &lt;code&gt;input&lt;/code&gt; tags have &lt;code&gt;name&lt;/code&gt; attributes, otherwise they won&apos;t be present in &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;index&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(request.form)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n&amp;lt;form method=&quot;post&quot;&amp;gt;\n    &amp;lt;input type=&quot;text&quot;&amp;gt;\n    &amp;lt;input type=&quot;text&quot; id=&quot;txt2&quot;&amp;gt;\n    &amp;lt;input type=&quot;text&quot; name=&quot;txt3&quot; id=&quot;txt3&quot;&amp;gt;  \n    &amp;lt;input type=&quot;submit&quot;&amp;gt;\n&amp;lt;/form&amp;gt;\n&quot;&quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;ImmutableMultiDict([(&apos;txt3&apos;, &apos;text 3&apos;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Only the &lt;code&gt;txt3&lt;/code&gt; input had a &lt;code&gt;name&lt;/code&gt;, so it&apos;s the only key present in &lt;code&gt;request.form&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/addData&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add_data&lt;/span&gt;():\n     data_in = mongo.db.Data\n     &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt; = request.values.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;)\n     name = request.values.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;)\n     newuser = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; : name}\n     &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; voter.find({&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; : name}).count() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Data Exists&quot;&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            data_in.insert(newuser)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Data Added&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just faced the same need. I have to save information in case of any unexpected situation. So, I use the following formula:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Info = &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s/%s/%s&quot;&lt;/span&gt; % (request.remote_addr, &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(request), &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(session))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;repr(request) will give a string representation of the basic information. You could add user-agent data with:\nrequest.headers.get(&apos;User-Agent&apos;)&lt;/p&gt;\n&lt;p&gt;I also save the session continent as it could contain valuable information&lt;/p&gt;\n    ","\n&lt;p&gt;Try - &amp;gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; request\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@app.route(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, methods=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;GET&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;parse_request&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;:\n       data = request.form.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;request.data\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is great to use but remember that it comes in as a string and will need iterated through.&lt;/p&gt;\n    "],"380":["\n&lt;p&gt;I know &lt;code&gt;object&lt;/code&gt; dtype columns makes the data hard to convert with pandas functions. When I receive data like this, the first thing that came to mind was to &quot;flatten&quot; or unnest the columns.&lt;/p&gt;\n&lt;p&gt;I am using pandas and Python functions for this type of question. If you are worried about the speed of the above solutions, check out &lt;a href=&quot;https://stackoverflow.com/questions/53219045&quot;&gt;user3483203&apos;s answer&lt;/a&gt;, since it&apos;s using numpy and most of the time numpy is faster. I recommend &lt;a href=&quot;https://cython.org/&quot; rel=&quot;noreferrer&quot;&gt;Cython&lt;/a&gt; or &lt;a href=&quot;http://numba.pydata.org/&quot; rel=&quot;noreferrer&quot;&gt;numba&lt;/a&gt; if speed matters.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 0 [pandas &amp;gt;= 0.25]&lt;/strong&gt;\nStarting from &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/version/0.25/user_guide/reshaping.html#exploding-a-list-like-column&quot; rel=&quot;noreferrer&quot;&gt;pandas 0.25&lt;/a&gt;, if you only need to explode &lt;em&gt;one&lt;/em&gt; column, you can use the &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.explode.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pandas.DataFrame.explode&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)\n\n       A  B\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Given a dataframe with an empty &lt;code&gt;list&lt;/code&gt; or a &lt;code&gt;NaN&lt;/code&gt; in the column. An empty list will not cause an issue, but a &lt;code&gt;NaN&lt;/code&gt; will need to be filled with a &lt;code&gt;list&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [], np.nan]})\ndf.B = df.B.fillna({i: [] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df.index})  &lt;span class=&quot;hljs-comment&quot;&gt;# replace NaN with []&lt;/span&gt;\ndf.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)\n\n   A    B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  NaN\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  NaN\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 1&lt;/strong&gt;\n&lt;strong&gt;&lt;code&gt;apply + pd.Series&lt;/code&gt;&lt;/strong&gt; (easy to understand but in terms of performance not recommended . )&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;).B.apply(pd.Series).stack().reset_index(level=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).rename(columns={&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;})\nOut[&lt;span class=&quot;hljs-number&quot;&gt;463&lt;/span&gt;]:\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;\nUsing &lt;code&gt;repeat&lt;/code&gt; with &lt;code&gt;DataFrame&lt;/code&gt; constructor , re-create your dataframe (good at performance, not good at multiple columns )&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:df.A.repeat(df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()),&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:np.concatenate(df.B.values)})\ndf\nOut[&lt;span class=&quot;hljs-number&quot;&gt;465&lt;/span&gt;]:\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Method 2.1&lt;/strong&gt;\nfor example besides A we have A.1 .....A.n. If we still use the method(&lt;strong&gt;Method 2&lt;/strong&gt;) above it is hard for us to re-create the columns one by one .&lt;/p&gt;\n&lt;p&gt;Solution : &lt;code&gt;join&lt;/code&gt; or &lt;code&gt;merge&lt;/code&gt; with the &lt;code&gt;index&lt;/code&gt; after &apos;unnest&apos; the single columns&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:np.concatenate(df.B.values)},index=df.index.repeat(df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()))\ns.join(df.drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;477&lt;/span&gt;]:\n   B  A\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need the column order exactly the same as before, add &lt;code&gt;reindex&lt;/code&gt; at the end.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s.join(df.drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;).reindex(columns=df.columns)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 3&lt;/strong&gt;\nrecreate the &lt;code&gt;list&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pd.DataFrame([[x] + [z] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df.values &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y],columns=df.columns)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;488&lt;/span&gt;]:\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If more than two columns, use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;s=pd.DataFrame([[x] + [z] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(df.index,df.B) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y])\ns.merge(df,left_on=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,right_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;491&lt;/span&gt;]:\n   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A       B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 4&lt;/strong&gt;\nusing &lt;code&gt;reindex&lt;/code&gt;  or &lt;code&gt;loc&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.reindex(df.index.repeat(df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;())).assign(B=np.concatenate(df.B.values))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;554&lt;/span&gt;]:\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#df.loc[df.index.repeat(df.B.str.len())].assign(B=np.concatenate(df.B.values))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 5&lt;/strong&gt;\nwhen the list only contains unique values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]})\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ChainMap\nd = &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(ChainMap(*&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.fromkeys, df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;], df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;])))\npd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d.items()),columns=df.columns[::-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;574&lt;/span&gt;]:\n   B  A\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 6&lt;/strong&gt;\nusing &lt;code&gt;numpy&lt;/code&gt; for high performance:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newvalues=np.dstack((np.repeat(df.A.values,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;,df.B.values))),np.concatenate(df.B.values)))\npd.DataFrame(data=newvalues[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],columns=df.columns)\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Method 7&lt;/strong&gt;\nusing base function &lt;code&gt;itertools&lt;/code&gt; &lt;code&gt;cycle&lt;/code&gt; and &lt;code&gt;chain&lt;/code&gt;: Pure python solution just for fun&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cycle,chain\nl=df.values.tolist()\nl1=[&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;([x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]], cycle(x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;([x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]) &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(cycle([x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]), x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]))) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l]\npd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(chain.from_iterable(l1)),columns=df.columns)\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Generalizing to multiple columns&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]],&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]})\ndf\nOut[&lt;span class=&quot;hljs-number&quot;&gt;592&lt;/span&gt;]:\n   A       B       C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Self-def function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unnesting&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df, explode&lt;/span&gt;):\n    idx = df.index.repeat(df[explode[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]].&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;())\n    df1 = pd.concat([\n        pd.DataFrame({x: np.concatenate(df[x].values)}) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; explode], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    df1.index = idx\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df1.join(df.drop(explode, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n\n\nunnesting(df,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;609&lt;/span&gt;]:\n   B  C  A\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;strong&gt;Column-wise Unnesting&lt;/strong&gt;&lt;/h3&gt;\n&lt;p&gt;All above method is talking about the &lt;em&gt;&lt;strong&gt;vertical&lt;/strong&gt;&lt;/em&gt; unnesting and explode , If you do need expend the list &lt;em&gt;&lt;strong&gt;horizontal&lt;/strong&gt;&lt;/em&gt;, Check with &lt;code&gt;pd.DataFrame&lt;/code&gt; constructor&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.join(pd.DataFrame(df.B.tolist(),index=df.index).add_prefix(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B_&apos;&lt;/span&gt;))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;]:\n   A       B       C  B_0  B_1\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Updated function&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unnesting&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df, explode, axis&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; axis==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        idx = df.index.repeat(df[explode[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]].&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;())\n        df1 = pd.concat([\n            pd.DataFrame({x: np.concatenate(df[x].values)}) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; explode], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        df1.index = idx\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df1.join(df.drop(explode, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; :\n        df1 = pd.concat([\n                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; explode], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df1.join(df.drop(explode, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Test Output&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;unnesting(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;], axis=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]:\n   B0  B1  C0  C1  A\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Update 2021-02-17 with original explode function&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unnesting&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df, explode, axis&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; axis==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        df1 = pd.concat([df[x].explode() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; explode], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df1.join(df.drop(explode, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; :\n        df1 = pd.concat([\n                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; explode], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df1.join(df.drop(explode, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Option 1&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If all of the sublists in the other column are the same length, &lt;code&gt;numpy&lt;/code&gt; can be an efficient option here:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;vals = np.array(df.B.values.tolist())    \na = np.repeat(df.A, vals.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n\npd.DataFrame(np.column_stack((a, vals.ravel())), columns=df.columns)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Option 2&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If the sublists have different length, you need an additional step:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;vals = df.B.values.tolist()\nrs = [&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(r) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; vals]    \na = np.repeat(df.A, rs)\n\npd.DataFrame(np.column_stack((a, np.concatenate(vals))), columns=df.columns)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Option 3&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I took a shot at generalizing this to work to flatten &lt;code&gt;N&lt;/code&gt; columns and tile &lt;code&gt;M&lt;/code&gt; columns, I&apos;ll work later on making it more efficient:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]],\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]], &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A          B          C  D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]  A\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  B\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;        [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  C\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unnest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df, tile, explode&lt;/span&gt;):\n    vals = df[explode].&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    rs = [&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(r) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; vals]\n    a = np.repeat(df[tile].values, rs, axis=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    b = np.concatenate(vals.values)\n    d = np.column_stack((a, b))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(d, columns = tile +  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;_&apos;&lt;/span&gt;.join(explode)])\n\nunnest(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A  D B_C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  B   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  B   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  B   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  B   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  B   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  C   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  C   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  C   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Functions&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wen1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;).B.apply(pd.Series).stack().reset_index(level=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).rename(columns={&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;})\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wen2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:df.A.repeat(df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()),&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:np.concatenate(df.B.values)})\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wen3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    s = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: np.concatenate(df.B.values)}, index=df.index.repeat(df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.join(df.drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), how=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wen4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame([[x] + [z] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df.values &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y],columns=df.columns)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chris1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    vals = np.array(df.B.values.tolist())\n    a = np.repeat(df.A, vals.shape[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(np.column_stack((a, vals.ravel())), columns=df.columns)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;chris2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    vals = df.B.values.tolist()\n    rs = [&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(r) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; vals]\n    a = np.repeat(df.A.values, rs)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(np.column_stack((a, np.concatenate(vals))), columns=df.columns)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Timings&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; plt\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\nres = pd.DataFrame(\n       index=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;wen1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wen2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wen3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wen4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chris1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;chris2&apos;&lt;/span&gt;],\n       columns=[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;],\n       dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;\n)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; res.index:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; res.columns:\n        df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]})\n        df = pd.concat([df]*c)\n        stmt = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{}(df)&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(f)\n        setp = &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import df, {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(f)\n        res.at[f, c] = timeit(stmt, setp, number=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\n\nax = res.div(res.&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;()).T.plot(loglog=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nax.set_xlabel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;N&quot;&lt;/span&gt;)\nax.set_ylabel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;time (relative)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Performance&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SWzSN.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SWzSN.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Exploding a list-like column has been &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/version/0.25/user_guide/reshaping.html#exploding-a-list-like-column&quot; rel=&quot;noreferrer&quot;&gt;simplified significantly in pandas 0.25&lt;/a&gt; with the addition of the &lt;code&gt;explode()&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]})\ndf.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Out:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One alternative is to apply the &lt;a href=&quot;https://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays&quot;&gt;meshgrid recipe&lt;/a&gt; over the rows of the columns to unnest:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;unnest&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;frame, explode&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mesh&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;values&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; np.array(np.meshgrid(*values)).T.reshape(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(values))\n\n    data = np.vstack(mesh(row) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; row &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; frame[explode].values)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(data=data, columns=explode)\n\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]})\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(unnest(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]))  &lt;span class=&quot;hljs-comment&quot;&gt;# base&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]], &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]})\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(unnest(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]))  &lt;span class=&quot;hljs-comment&quot;&gt;# multiple columns&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]],\n                   &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]], &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]})\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(unnest(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]))  &lt;span class=&quot;hljs-comment&quot;&gt;# uneven length lists&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(unnest(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]))  &lt;span class=&quot;hljs-comment&quot;&gt;# different types&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n   A  B  C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n\n   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n   D  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  A  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  B  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  B  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  B  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Problem Setup&lt;/h3&gt;\n\n&lt;p&gt;Assume there are multiple columns with different length objects within it&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n})\n\ndf\n\n   A       B          C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When the lengths are the same, it is easy for us to assume that the varying elements coincide and should be &quot;zipped&quot; together.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A       B          C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# Typical to assume these should be zipped [(1, 1), (2, 2)]&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, the assumption gets challenged when we see different length objects, should we &quot;zip&quot;, if so, how do we handle the excess in one of the objects.  &lt;strong&gt;OR&lt;/strong&gt;, maybe we want the product of all of the objects.  This will get big fast, but might be what is wanted.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A       B          C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# is this [(3, 3), (4, 4), (None, 5)]?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A       B          C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# is this [(3, 3), (3, 4), (3, 5), (4, 3), (4, 4), (4, 5)]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;The Function&lt;/h3&gt;\n\n&lt;p&gt;This function gracefully handles &lt;code&gt;zip&lt;/code&gt; or &lt;code&gt;product&lt;/code&gt; based on a parameter and assumes to &lt;code&gt;zip&lt;/code&gt; according to the length of the longest object with &lt;code&gt;zip_longest&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; zip_longest, product\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;xplode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df, explode, zipped=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    method = zip_longest &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; zipped &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; product\n\n    rest = {*df} - {*explode}\n\n    zipped = &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(*&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(df.get, rest)), &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(*&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(df.get, explode)))\n    tups = [tup + exploded\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; tup, pre &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; zipped\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; exploded &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; method(*pre)]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(tups, columns=[*rest, *explode])[[*df]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Zipped&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;xplode(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;])\n\n   A    B  C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  NaN  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Product&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;xplode(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;], zipped=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n\n   A  B  C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;New Setup&lt;/h3&gt;\n\n&lt;p&gt;Varying up the example a bit&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;: [(&lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;W&apos;&lt;/span&gt;,)]\n})\n\ndf\n\n   A       B  C          D          E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  C     [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  (X, Y, Z)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]  C  [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]       (W,)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Zipped&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;xplode(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;])\n\n   A    B  C    D     E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;     X\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;     Y\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  NaN  C  NaN     Z\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;     W\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  NaN  C  &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;  &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;h3&gt;Product&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;xplode(df, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;], zipped=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n\n    A  B  C  D  E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  X\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Y\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Z\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  X\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  Y\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  Z\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  X\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Y\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Z\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  X\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  Y\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  Z\n&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  W\n&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  W\n&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  W\n&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  W\n&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  W\n&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  C  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  W\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My 5 cents:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B2&apos;&lt;/span&gt;]] = pd.DataFrame(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].values.tolist())\n\ndf[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]].append(df[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B2&apos;&lt;/span&gt;]].rename(columns={&lt;span class=&quot;hljs-string&quot;&gt;&apos;B2&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;}),\n                      ignore_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and another 5&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B2&apos;&lt;/span&gt;]] = pd.DataFrame([*df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]]) &lt;span class=&quot;hljs-comment&quot;&gt;# if values.tolist() is too boring&lt;/span&gt;\n\n(pd.wide_to_long(df.drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n .reset_index(level=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, drop=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n .reset_index())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;both resulting in the same&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Because normally sublist length are different and join/merge is far more computational expensive. I retested the method for different length sublist and more normal columns.&lt;/p&gt;\n\n&lt;p&gt;MultiIndex should be also a easier way to write and has near the same performances as numpy way.&lt;/p&gt;\n\n&lt;p&gt;Surprisingly, in my implementation comprehension way has the best performance.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;stack&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df.set_index([&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]).B.apply(pd.Series).stack()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;comprehension&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame([x + [z] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(df[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]].values.tolist(), df.B) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y])\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multiindex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(np.concatenate(df.B.values), index=df.set_index([&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]).index.repeat(df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.DataFrame(\n        np.column_stack((\n            np.repeat(df[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]].values, df.B.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(), axis=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;),\n            np.concatenate(df.B.values)\n        ))\n    )\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; plt\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\nres = pd.DataFrame(\n    index=[\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;stack&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;comprehension&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;multiindex&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;array&apos;&lt;/span&gt;,\n    ],\n    columns=[&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50000&lt;/span&gt;],\n    dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;\n)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; res.index:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; res.columns:\n        df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;def&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;j&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;k&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;l&apos;&lt;/span&gt;]]})\n        df = pd.concat([df] * c)\n        stmt = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{}(df)&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(f)\n        setp = &lt;span class=&quot;hljs-string&quot;&gt;&apos;from __main__ import df, {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(f)\n        res.at[f, c] = timeit(stmt, setp, number=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n\nax = res.div(res.&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;()).T.plot(loglog=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\nax.set_xlabel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;N&quot;&lt;/span&gt;)\nax.set_ylabel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;time (relative)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Performance&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/4SFWo.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;Relative time of each method&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I generalized the problem a bit to be applicable to more columns.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Summary of what my solution does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In[&lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;]: df\nOut[&lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;]: \n    A   B             C             columnD\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  A1  B1  [C1&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;, C1&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]                D1\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A2  B2  [C2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;, C2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]  [D2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;, D2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;, D2&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  A3  B3            C3        [D3&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;, D3&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;]\n\nIn[&lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;]: dfListExplode(df,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;columnD&apos;&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;]: \n    A   B     C columnD\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  A1  B1  C1&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;    D1\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  A1  B1  C1&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;    D1\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  A2  B2  C2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;    D2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  A2  B2  C2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;    D2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  A2  B2  C2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;    D2&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  A2  B2  C2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;    D2&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  A2  B2  C2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;    D2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  A2  B2  C2&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;    D2&lt;span class=&quot;hljs-number&quot;&gt;.3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  A3  B3    C3    D3&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;  A3  B3    C3    D3&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Complete example:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The actual explosion is performed in 3 lines.&lt;/strong&gt; The rest is cosmetics (multi column explosion, handling of strings instead of lists in the explosion column, ...).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf=pd.DataFrame( {&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A3&apos;&lt;/span&gt;],\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;B2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;B3&apos;&lt;/span&gt;],\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: [ [&lt;span class=&quot;hljs-string&quot;&gt;&apos;C1.1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;C1.2&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C2.1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;C2.2&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;C3&apos;&lt;/span&gt;],\n                  &lt;span class=&quot;hljs-string&quot;&gt;&apos;columnD&apos;&lt;/span&gt;: [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;D1&apos;&lt;/span&gt;,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;D2.1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;D2.2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D2.3&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;D3.1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;D3.2&apos;&lt;/span&gt;]],\n                  })\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;df&apos;&lt;/span&gt;,df, sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dfListExplode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df, explodeKeys&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(explodeKeys, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        explodeKeys=[explodeKeys]\n    &lt;span class=&quot;hljs-comment&quot;&gt;# recursive handling of explodeKeys&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(explodeKeys)==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; df\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(explodeKeys)==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        explodeKey=explodeKeys[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dfListExplode( dfListExplode(df, explodeKeys[:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]), explodeKeys[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n    &lt;span class=&quot;hljs-comment&quot;&gt;# perform explosion/unnesting for key: explodeKey&lt;/span&gt;\n    dfPrep=df[explodeKey].apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [x]) &lt;span class=&quot;hljs-comment&quot;&gt;#casts all elements to a list&lt;/span&gt;\n    dfIndExpl=pd.DataFrame([[x] + [z] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x, y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(dfPrep.index,dfPrep.values) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y ], columns=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;explodedIndex&apos;&lt;/span&gt;,explodeKey])\n    dfMerged=dfIndExpl.merge(df.drop(explodeKey, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), left_on=&lt;span class=&quot;hljs-string&quot;&gt;&apos;explodedIndex&apos;&lt;/span&gt;, right_index=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    dfReind=dfMerged.reindex(columns=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(df))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dfReind\n\ndfExpl=dfListExplode(df,[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;columnD&apos;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;dfExpl&apos;&lt;/span&gt;,dfExpl, sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Credits to &lt;a href=&quot;https://stackoverflow.com/a/53218939/7128154&quot;&gt;WeNYoBen&apos;s answer&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Something pretty not recommended (at least work in this case):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.concat([df]*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).sort_index()\nit=&lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].tolist()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]+df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].tolist()[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]=df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x:&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(it))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;concat&lt;/code&gt; + &lt;code&gt;sort_index&lt;/code&gt; + &lt;code&gt;iter&lt;/code&gt; + &lt;code&gt;apply&lt;/code&gt; + &lt;code&gt;next&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If care about index:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=df.reset_index(drop=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;   A  B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]})\n\npd.concat([df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;], pd.DataFrame(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;].values.tolist())], axis = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\\\n  .melt(id_vars = &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, value_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)\\\n  .dropna()\\\n  .drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;variable&apos;&lt;/span&gt;, axis = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n    A   B\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any opinions on this method I thought of? or is doing both concat and melt considered too &quot;expensive&quot;?&lt;/p&gt;\n    ","\n&lt;p&gt;I have another good way to solves this when you have more than one column to explode.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]], &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]]})\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n   A       B          C\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I want to explode the columns B and C. First I explode B, second C. Than I drop B and C from the original df. After that I will do an index join on the 3 dfs.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;explode_b = df.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;]\nexplode_c = df.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]\ndf = df.drop([&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\ndf = df.join([explode_b, explode_c])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]})\n\nout = pd.concat([df.loc[:,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;],(df.B.apply(pd.Series))], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, sort=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n\nout = out.set_index(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;).stack().droplevel(level=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).reset_index().rename(columns={&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;})\n\n       A    B\n   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;you can implement this as one liner, if you don&apos;t wish to create intermediate object&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Here&apos;s the answer to the related question in:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# https://stackoverflow.com/q/56708671/11426125&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# initial dataframe&lt;/span&gt;\ndf12=pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Date&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-string&quot;&gt;&apos;2007-12-03&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2008-09-07&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;names&apos;&lt;/span&gt;:\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Peter&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Alex&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Donald&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Stan&apos;&lt;/span&gt;]]})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert dataframe to array for indexing list values (names)&lt;/span&gt;\na = np.array(df12.values)  \n\n&lt;span class=&quot;hljs-comment&quot;&gt;# create a new, dataframe with dimensions for unnested&lt;/span&gt;\nb = np.ndarray(shape = (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\ndf2 = pd.DataFrame(b, columns = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;Date&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;names&quot;&lt;/span&gt;], dtype = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# implement loops to assign date/name values as required&lt;/span&gt;\ni = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\nj = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; i:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; j:\n        df2.iat[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*x+y, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = a[x][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n        df2.iat[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*x+y, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = a[x][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][y]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# set Date column as Index&lt;/span&gt;\ndf2.Date=pd.to_datetime(df2.Date)\ndf2.index=df2.Date\ndf2.drop(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Date&apos;&lt;/span&gt;,axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,inplace =&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In my case with more than one column to explode, and with variables lengths for the arrays that needs to be unnested.&lt;/p&gt;\n\n&lt;p&gt;I ended up applying the new pandas 0.25 &lt;code&gt;explode&lt;/code&gt; function two times, then removing generated duplicates and it does the job !&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = df.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;)\ndf = df.explode(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)\ndf = df.drop_duplicates()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Below is a simple function for horizontal explode, based on @BEN_YO&apos;s answer.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; typing\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;horizontal_explode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;df: pd.DataFrame, col_name: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, new_columns: typing.&lt;span class=&quot;hljs-type&quot;&gt;Union&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;]=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;) -&amp;gt; pd.DataFrame:\n    t = pd.DataFrame(df[col_name].tolist(), columns=new_columns, index=df.index)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pd.concat([df, t], axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Running example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;items = [\n    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;]],\n    [&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;]]\n]\n\ndf = pd.DataFrame(items, columns = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;col1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n\nt = horizontal_explode(df=df, col_name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; t[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(t)\n\nt = horizontal_explode(df=df, col_name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;, new_columns=[&lt;span class=&quot;hljs-string&quot;&gt;&quot;new_col1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;new_col2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;new_col3&quot;&lt;/span&gt;])\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; t[&lt;span class=&quot;hljs-string&quot;&gt;&quot;col2&quot;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(t)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This the relevant output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  col1       col2\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  [a, b, c]\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  [d, e, f]\n\n  col1  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  a  b  c\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  d  e  f\n\n  col1 new_col1 new_col2 new_col3\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;        a        b        c\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;        d        e        f\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; demo = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;set1&apos;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&apos;t1&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;t2&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;t3&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]}, &lt;span class=&quot;hljs-string&quot;&gt;&apos;set2&apos;&lt;/span&gt;:{&lt;span class=&quot;hljs-string&quot;&gt;&apos;t1&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;t2&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;t3&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]}, &lt;span class=&quot;hljs-string&quot;&gt;&apos;set3&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;t1&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;t2&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;t3&apos;&lt;/span&gt;:[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]}}\n df = pd.DataFrame.from_dict(demo, orient=&lt;span class=&quot;hljs-string&quot;&gt;&apos;index&apos;&lt;/span&gt;) \n\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df.head())\n my_list=[]\n df2=pd.DataFrame(columns=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;set&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;t3&apos;&lt;/span&gt;])\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key,item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df.iterrows():\n    t1=item.t1\n    t2=item.t2\n    t3=item.t3\n    mat1=np.matrix([t1,t2,t3])\n    row1=[key,mat1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],mat1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],mat1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n    df2.loc[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(df2)]=row1\n    row2=[key,mat1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],mat1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],mat1[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n    df2.loc[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(df2)]=row2\n    row3=[key,mat1[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],mat1[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],mat1[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n    df2.loc[&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(df2)]=row3\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df2) \n\n&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; t1 t2 t3\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  set1  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  set1  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  set1  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  set2  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  set2  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  set2  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;  set3  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  set3  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  set3  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;   \n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"47","randomQuestions":[{"title":"How to parse JSON in Java","slug":"how-to-parse-json-in-java-1657384575136"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"How can I combine two strings together in PHP?","slug":"how-can-i-combine-two-strings-together-in-php-1657388279401"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"Convert columns into rows with Pandas","slug":"convert-columns-into-rows-with-pandas-1657388374964"},{"title":"When can I use a forward declaration?","slug":"when-can-i-use-a-forward-declaration-1657388251827"},{"title":"What are good ways to prevent SQL injection? [duplicate]","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570"},{"title":"What is SQL injection? [duplicate]","slug":"what-is-sql-injection-duplicate-1657387944486"},{"title":"String.equals versus == [duplicate]","slug":"string.equals-versus-duplicate-1657387599972"},{"title":"Sorting object property by values","slug":"sorting-object-property-by-values-1657388367300"},{"title":"What is a debugger and how can it help me diagnose problems?","slug":"what-is-a-debugger-and-how-can-it-help-me-diagnose-problems-1657384472469"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"PHP parse/syntax errors; and how to solve them","slug":"php-parsesyntax-errors-and-how-to-solve-them-1657384264713"},{"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240"},{"title":"What are the nuances of scope prototypal / prototypical inheritance in AngularJS?","slug":"what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs-1657387340067"},{"title":"Why does my JavaScript code receive a \"No 'Access-Control-Allow-Origin' header is present on the requested resource\" error, while Postman does not?","slug":"why-does-my-javascript-code-receive-a-\"no-'access-control-allow-origin'-header-is-present-on-the-requested-resource\"-error-while-postman-does-not-1657384636363"},{"title":"How do I make a flat list out of a list of lists?","slug":"how-do-i-make-a-flat-list-out-of-a-list-of-lists-1657384500439"},{"title":"Providing white space in a Swing GUI","slug":"providing-white-space-in-a-swing-gui-1657384734588"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"}]},"__N_SSG":true}