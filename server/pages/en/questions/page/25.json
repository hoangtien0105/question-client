{"pageProps":{"data":{"count":610,"rows":[{"id":490,"title":"Identifying and solving javax.el.PropertyNotFoundException: Target Unreachable","slug":"identifying-and-solving-javax.el.propertynotfoundexception:-target-unreachable-1657388164753","postType":"QUESTION","createdAt":"2022-07-09T17:36:04.000Z","updatedAt":"2022-07-09T17:36:04.000Z","tags":[{"id":2460,"name":"el","slug":"el","createdAt":"2022-07-09T17:36:04.000Z","updatedAt":"2022-07-09T17:36:04.000Z","Questions_Tags":{"questionId":490,"tagId":2460}},{"id":2461,"name":"cdi","slug":"cdi","createdAt":"2022-07-09T17:36:04.000Z","updatedAt":"2022-07-09T17:36:04.000Z","Questions_Tags":{"questionId":490,"tagId":2461}},{"id":2463,"name":"propertynotfoundexception","slug":"propertynotfoundexception","createdAt":"2022-07-09T17:36:04.000Z","updatedAt":"2022-07-09T17:36:04.000Z","Questions_Tags":{"questionId":490,"tagId":2463}}]},{"id":489,"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827","postType":"QUESTION","createdAt":"2022-07-09T17:36:01.000Z","updatedAt":"2022-07-09T17:36:01.000Z","tags":[]},{"id":488,"title":"How to access a local variable from a different function using pointers?","slug":"how-to-access-a-local-variable-from-a-different-function-using-pointers-1657388159760","postType":"QUESTION","createdAt":"2022-07-09T17:35:59.000Z","updatedAt":"2022-07-09T17:35:59.000Z","tags":[]},{"id":487,"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033","postType":"QUESTION","createdAt":"2022-07-09T17:35:57.000Z","updatedAt":"2022-07-09T17:35:57.000Z","tags":[]},{"id":486,"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135","postType":"QUESTION","createdAt":"2022-07-09T17:35:52.000Z","updatedAt":"2022-07-09T17:35:52.000Z","tags":[{"id":2447,"name":"virtual-destructor","slug":"virtual-destructor","createdAt":"2022-07-09T17:35:52.000Z","updatedAt":"2022-07-09T17:35:52.000Z","Questions_Tags":{"questionId":486,"tagId":2447}},{"id":2448,"name":"shared-ptr","slug":"shared-ptr","createdAt":"2022-07-09T17:35:52.000Z","updatedAt":"2022-07-09T17:35:52.000Z","Questions_Tags":{"questionId":486,"tagId":2448}}]}]},"answers":{"486":["\n&lt;p&gt;Virtual destructors are useful when you might potentially delete an instance of a derived class through a pointer to base class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt; \n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some virtual methods&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base\n{\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;()\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Do some important cleanup&lt;/span&gt;\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, you&apos;ll notice that I didn&apos;t declare Base&apos;s destructor to be &lt;code&gt;virtual&lt;/code&gt;. Now, let&apos;s have a look at the following snippet:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Base *b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// use b&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; b; &lt;span class=&quot;hljs-comment&quot;&gt;// Here&apos;s the problem!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since Base&apos;s destructor is not &lt;code&gt;virtual&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is a &lt;code&gt;Base*&lt;/code&gt; pointing to a &lt;code&gt;Derived&lt;/code&gt; object, &lt;code&gt;delete b&lt;/code&gt; has &lt;a href=&quot;https://stackoverflow.com/q/2397984/20984&quot;&gt;undefined behaviour&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[In &lt;code&gt;delete b&lt;/code&gt;], if the static type of the\n  object to be deleted is different from its dynamic type, the static\n  type shall be a base class of the dynamic type of the object to be\n  deleted and &lt;strong&gt;the static type shall have a virtual destructor or the\n  behavior is undefined&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In most implementations, the call to the destructor will be resolved like any non-virtual code, meaning that the destructor of the base class will be called but not the one of the derived class, resulting in a resources leak.&lt;/p&gt;\n\n&lt;p&gt;To sum up, always make base classes&apos; destructors &lt;code&gt;virtual&lt;/code&gt; when they&apos;re meant to be manipulated polymorphically.&lt;/p&gt;\n\n&lt;p&gt;If you want to prevent the deletion of an instance through a base class pointer, you can make the base class destructor protected and nonvirtual; by doing so, the compiler won&apos;t let you call &lt;code&gt;delete&lt;/code&gt; on a base class pointer.&lt;/p&gt;\n\n&lt;p&gt;You can learn more about virtuality and virtual base class destructor in &lt;a href=&quot;http://www.gotw.ca/publications/mill18.htm&quot; rel=&quot;noreferrer&quot;&gt;this article from Herb Sutter&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;A virtual constructor is not possible but virtual destructor is possible.\nLet us experiment.......&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Base Constructor Called\\n&quot;&lt;/span&gt;;\n    }\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Base Destructor called\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Derived1&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Derived constructor called\\n&quot;&lt;/span&gt;;\n    }\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Derived1&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Derived destructor called\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Base *b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Derived1&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above code output the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Base Constructor Called\nDerived constructor called\nBase Destructor called\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The construction of derived object follow the construction rule but when we delete the &quot;b&quot; pointer(base pointer) we have found that only the base destructor is called. But this must not happen. To do the appropriate thing, we have to make the base destructor virtual.\nNow let see what happens in the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt;\n{ \n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Base Constructor Called\\n&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Base Destructor called\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived1&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Derived1&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Derived constructor called\\n&quot;&lt;/span&gt;;\n    }\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Derived1&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Derived destructor called\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    Base *b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Derived1&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output changed as following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Base Constructor Called\nDerived Constructor called\nDerived destructor called\nBase destructor called\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the destruction of the base pointer (which takes an allocation on derived object!) follows the destruction rule, i.e first the Derived, then the Base.\nOn the other hand, there is nothing like a virtual constructor.       &lt;/p&gt;\n    ","\n&lt;p&gt;Declare destructors virtual in polymorphic base classes.  This is Item 7 in Scott Meyers&apos; &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201924889&quot; rel=&quot;noreferrer&quot;&gt;Effective C++&lt;/a&gt;.  Meyers goes on to summarize that if a class has &lt;em&gt;any&lt;/em&gt; virtual function, it should have a virtual destructor, and that classes not designed to be base classes or not designed to be used polymorphically should &lt;em&gt;not&lt;/em&gt; declare virtual destructors.&lt;/p&gt;\n    ","\n&lt;p&gt;Also be aware that deleting a base class pointer when there is no virtual destructor will result in &lt;strong&gt;&lt;em&gt;undefined behavior&lt;/em&gt;&lt;/strong&gt;.  Something that I learned just recently:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/408196/how-should-overriding-delete-in-c-behave&quot;&gt;How should overriding delete in C++ behave?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve been using C++ for years and I still manage to hang myself.&lt;/p&gt;\n    ","\n&lt;p&gt;Make the destructor virtual whenever your class is polymorphic.&lt;/p&gt;\n    ","\n&lt;h3&gt;Calling destructor via a pointer to a base class&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt; {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n  &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;() {}\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : Base {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;/span&gt;{}\n  ~&lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; {}\n};\n\nBase* base = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Derived;\nbase-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// calls Derived::f&lt;/span&gt;\nbase-&amp;gt;~&lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// calls Derived::~Derived&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Virtual destructor call is no different from any other virtual function call.&lt;/p&gt;\n\n&lt;p&gt;For &lt;code&gt;base-&amp;gt;f()&lt;/code&gt;, the call will be dispatched to &lt;code&gt;Derived::f()&lt;/code&gt;, and it&apos;s the same for &lt;code&gt;base-&amp;gt;~Base()&lt;/code&gt; - its overriding function - the &lt;code&gt;Derived::~Derived()&lt;/code&gt; will be called.&lt;/p&gt;\n\n&lt;p&gt;Same happens when destructor is being called indirectly, e.g. &lt;code&gt;delete base;&lt;/code&gt;. The &lt;code&gt;delete&lt;/code&gt; statement will call &lt;code&gt;base-&amp;gt;~Base()&lt;/code&gt; which will be dispatched to &lt;code&gt;Derived::~Derived()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Abstract class with non-virtual destructor&lt;/h3&gt;\n\n&lt;p&gt;If you are not going to delete object through a pointer to its base class - then there is no need to have a virtual destructor. Just make it &lt;code&gt;protected&lt;/code&gt; so that it won&apos;t be called accidentally:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// library.hpp&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt; {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt;:\n  ~&lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;() = &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CallsF&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Base&amp;amp; base)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// CallsF is not going to own &quot;base&quot; (i.e. call &quot;delete &amp;amp;base;&quot;).&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// It will only call Base::f() so it doesn&apos;t need to access Base::~Base.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//-------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// application.cpp&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt; : Base {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;/span&gt;{ ... }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  Derived derived;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;CallsF&lt;/span&gt;(derived);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// No need for virtual destructor here as well.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To be simple,\nVirtual destructor is to destruct the resources in a proper order, when you delete a base class pointer pointing to derived class object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt; &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n       &lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;(){\n          cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;B()\\n&quot;&lt;/span&gt;;\n       }\n       &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;(){ \n          cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;~B()\\n&quot;&lt;/span&gt;;\n       }\n };\n &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;D&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; B{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n       &lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;(){\n          cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;D()\\n&quot;&lt;/span&gt;;\n       }\n       ~&lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;(){\n          cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;~D()\\n&quot;&lt;/span&gt;;\n       }\n };\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{\n    B *b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n }\n\nOUTPUT:\n&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;()\n&lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;()\n~&lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;()\n~&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;()\n\n==============\nIf you don&lt;span class=&quot;hljs-number&quot;&gt;&apos;&lt;/span&gt;t give ~&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;()  as &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt;. then output would be \n&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;()\n&lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;()\n~&lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;()\nwhere destruction of ~&lt;span class=&quot;hljs-built_in&quot;&gt;D&lt;/span&gt;() is &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; done which leads to leak\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n    ","\n&lt;p&gt;Virtual keyword for destructor is necessary when you want different destructors should follow proper order while objects is being deleted through base class pointer. \nfor example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;Base *myObj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// Some code which is using myObj object&lt;/span&gt;\nmyObj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;fun&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;//Now delete the object&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; myObj ; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your base class destructor is virtual then objects will be destructed in a order(firstly derived object then base ). If your base class destructor is NOT virtual then only base class object will get deleted(because pointer is of base class &quot;Base *myObj&quot;). So there will be memory leak for derived object.&lt;/p&gt;\n    ","\n&lt;p&gt;I like to think about interfaces and implementations of interfaces. In C++ speak interface is pure virtual class. Destructor is part of the interface and expected to implemented. Therefore destructor should be pure virtual. How about constructor? Constructor is actually not part of the interface because object is always instantiated explicitly. &lt;/p&gt;\n    ","\n&lt;p&gt;Virtual base class destructors are &quot;best practice&quot; - you should always use them to avoid (hard to detect) memory leaks. Using them, you can be sure all destructors in the inheritance chain of your classes are beeing called (in proper order). Inheriting from a base class using virtual destructor makes the destructor of the inheriting class automatically virtual, too (so you do not have to retype &apos;virtual&apos; in the inheriting class destructor declaration).&lt;/p&gt;\n    ","\n&lt;p&gt;I think the core of this question is about virtual methods and polymorphism, not the destructor specifically. Here is a clearer example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;A&lt;/span&gt;() {}\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is A.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; A\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;() {}\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is B.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    A *a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;B&lt;/span&gt;();\n    a-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will print out:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;This is B.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Without &lt;code&gt;virtual&lt;/code&gt; it will print out:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;This is A.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now you should understand when to use virtual destructors.&lt;/p&gt;\n    ","\n&lt;p&gt;If you use &lt;code&gt;shared_ptr&lt;/code&gt;(only shared_ptr, not unique_ptr), you don&apos;t have to have the base class destructor virtual:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Base&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Base Constructor Called\\n&quot;&lt;/span&gt;;\n    }\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Base&lt;/span&gt;(){ &lt;span class=&quot;hljs-comment&quot;&gt;// not virtual&lt;/span&gt;\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Base Destructor called\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Derived&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Base\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Derived constructor called\\n&quot;&lt;/span&gt;;\n    }\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Derived&lt;/span&gt;(){\n        cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Derived destructor called\\n&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;shared_ptr&amp;lt;Base&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Derived())&lt;/span&gt;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Base Constructor Called\nDerived constructor called\nDerived destructor called\nBase Destructor called\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;What is a virtual destructor or how to use virtual destructor&lt;/p&gt;\n\n&lt;p&gt;A class destructor is a function with same name of the class preceding with ~ that will reallocate the memory that is allocated by the class. Why we need a virtual destructor&lt;/p&gt;\n\n&lt;p&gt;See  the  following  sample with some virtual functions&lt;/p&gt;\n\n&lt;p&gt;The sample also tell how you can convert a letter to upper or lower&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stdafx.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-comment&quot;&gt;// program to convert the lower to upper orlower&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;convertch&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-comment&quot;&gt;//void convertch(){};&lt;/span&gt;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;convertChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  ~&lt;span class=&quot;hljs-built_in&quot;&gt;convertch&lt;/span&gt;(){};\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MakeLower&lt;/span&gt; :&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; convertch\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MakeLower&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *passLetter)\n  {\n    tolower = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    Letter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(Letter, passLetter);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;MakeLower&lt;/span&gt;()\n  {\n    cout&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;called ~MakeLower()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] Letter;\n  }\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;convertChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n  &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(Letter);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;len;i++)\n      Letter[i] = Letter[i] + &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Letter;\n  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *Letter;\n  &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; tolower;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MakeUpper&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; convertch\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;MakeUpper&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *passLetter)\n  {\n    Letter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;];\n    toupper = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(Letter, passLetter);\n  }\n\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;convertChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n  &lt;/span&gt;{   \n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(Letter);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;len;i++)\n      Letter[i] = Letter[i] - &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Letter;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;MakeUpper&lt;/span&gt;()\n  {\n    cout&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;called ~MakeUpper()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; Letter;\n  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *Letter;\n  &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; toupper;\n};\n\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])\n{\n  convertch *makeupper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MakeUpper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hai&quot;&lt;/span&gt;); \n  cout&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Eneterd : hai = &quot;&lt;/span&gt; &amp;lt;&amp;lt;makeupper-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;convertChar&lt;/span&gt;()&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;     \n  &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; makeupper;\n  convertch *makelower = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MakeLower&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HAI&quot;&lt;/span&gt;);;\n  cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Eneterd : HAI = &quot;&lt;/span&gt; &amp;lt;&amp;lt;makelower-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;convertChar&lt;/span&gt;()&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; makelower;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From the above sample you can see that the destructor for both MakeUpper and MakeLower class is not called.&lt;/p&gt;\n\n&lt;p&gt;See the next sample with the virtual destructor&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;stdafx.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-comment&quot;&gt;// program to convert the lower to upper orlower&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;convertch&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n&lt;span class=&quot;hljs-comment&quot;&gt;//void convertch(){};&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;convertChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;convertch&lt;/span&gt;(){}; &lt;span class=&quot;hljs-comment&quot;&gt;// defined the virtual destructor&lt;/span&gt;\n\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MakeLower&lt;/span&gt; :&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; convertch\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n&lt;span class=&quot;hljs-built_in&quot;&gt;MakeLower&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *passLetter)\n{\ntolower = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\nLetter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(Letter, passLetter);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;MakeLower&lt;/span&gt;()\n{\ncout&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;called ~MakeLower()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] Letter;\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;convertChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(Letter);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;len;i++)\n{\nLetter[i] = Letter[i] + &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;\n\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Letter;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *Letter;\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; tolower;\n\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MakeUpper&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; convertch\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n&lt;span class=&quot;hljs-built_in&quot;&gt;MakeUpper&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *passLetter)\n{\nLetter = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;];\ntoupper = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(Letter, passLetter);\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;convertChar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(Letter);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;len;i++)\n{\nLetter[i] = Letter[i] - &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Letter;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;MakeUpper&lt;/span&gt;()\n{\n      cout&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;called ~MakeUpper()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; Letter;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *Letter;\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; toupper;\n};\n\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; _tmain(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, _TCHAR* argv[])\n{\n\nconvertch *makeupper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MakeUpper&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hai&quot;&lt;/span&gt;);\n\ncout&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Eneterd : hai = &quot;&lt;/span&gt; &amp;lt;&amp;lt;makeupper-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;convertChar&lt;/span&gt;()&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; \\n&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; makeupper;\nconvertch *makelower = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MakeLower&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HAI&quot;&lt;/span&gt;);;\ncout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Eneterd : HAI = &quot;&lt;/span&gt; &amp;lt;&amp;lt;makelower-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;convertChar&lt;/span&gt;()&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n &quot;&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; makelower;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The virtual destructor will call explicitly the most derived run time destructor of class so that it will be able to clear the object in a proper way.&lt;/p&gt;\n\n&lt;p&gt;Or visit the link&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20130822173509/http://www.programminggallery.com/article_details.php?article_id=138&quot; rel=&quot;nofollow&quot;&gt;https://web.archive.org/web/20130822173509/http://www.programminggallery.com/article_details.php?article_id=138&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I thought it would be beneficial to discuss the &quot;undefined&quot; behavior, or at least the &quot;crash&quot; undefined behavior that may occur when deleting through a base class(/struct) without a virtual destructor, or more precisely no vtable.  The code below list a few simple structs (the same would be true for classes).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;a&lt;/span&gt;\n{\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;a&lt;/span&gt;() {}\n\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; i;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;b&lt;/span&gt; : a\n{\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;b&lt;/span&gt;() {}\n\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; j;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;c&lt;/span&gt; : b\n{\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;() {}\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; k;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;d&lt;/span&gt; : c\n{\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;d&lt;/span&gt;() {}\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(a): &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(a) &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(b): &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(b) &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(c): &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(c) &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;sizeof(d): &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(d) &amp;lt;&amp;lt; endl;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// No issue.&lt;/span&gt;\n\n    a* a1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;a&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; a1 &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; a1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// No issue.&lt;/span&gt;\n\n    b* b1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;b&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(a*) b1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; (a*) b1 &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; b1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// No issue.&lt;/span&gt;\n\n    c* c1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;c1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; c1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(b*) c1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; (b*) c1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(a*) c1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; (a*) c1 &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; c1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// No issue.&lt;/span&gt;\n\n    d* d1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;d&lt;/span&gt;();\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;d1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; d1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(c*) d1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; (c*) d1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(b*) d1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; (b*) d1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(a*) d1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; (a*) d1 &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; d1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Doesn&apos;t crash, but may not produce the results you want.&lt;/span&gt;\n\n    c1 = (c*) &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;d&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; c1;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Crashes due to passing an invalid address to the method which&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// frees the memory.&lt;/span&gt;\n\n    d1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;d&lt;/span&gt;();\n    b1 = (b*) d1;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;d1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; d1 &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; b1;  \n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n\n    // This is similar to what&apos;s happening above in the &quot;crash&quot; case.\n\n    char* buf = new char[32];\n    cout &amp;lt;&amp;lt; &quot;buf: &quot; &amp;lt;&amp;lt; (void*) buf &amp;lt;&amp;lt; endl;\n    buf += 8;\n    cout &amp;lt;&amp;lt; &quot;buf after adding 8: &quot; &amp;lt;&amp;lt; (void*) buf &amp;lt;&amp;lt; endl;\n    delete buf;\n*/&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m not suggesting whether you need virtual destructors or not, though I think in general it&apos;s a good practice to have them.  I&apos;m just pointing out the reason you may end up with a crash if your base class(/struct) does not have a vtable and your derived class(/struct) does and you delete an object via a base class(/struct) pointer.  In this case, the address you pass to the heap&apos;s free routine is invalid and thus the reason for the crash.&lt;/p&gt;\n\n&lt;p&gt;If you run the above code you&apos;ll see clearly when the issue occurs.  When the this pointer of the base class(/struct) is different from the this pointer of the derived class(/struct) you&apos;re going to run into this problem.  In the sample above, struct a and b don&apos;t have vtables.  structs c and d do have vtables.  Thus an a or b pointer to a c or d object instance will be fixed up to account for the vtable.  If you pass this a or b pointer to delete it will crash due to the address being invalid to the heap&apos;s free routine.&lt;/p&gt;\n\n&lt;p&gt;If you plan to delete derived instances which have vtables from base class pointers, you need to ensure the base class has a vtable.  One way to do that is to add a virtual destructor, which you might want anyway to properly clean up resources.&lt;/p&gt;\n    ","\n&lt;p&gt;when you need to call derived class destructor from base class. you need to declare virtual base class destructor in base class.&lt;/p&gt;\n    ","\n&lt;p&gt;I think most answers here miss the point, with the exception of the accepted one, which is a good thing. However, let me add one more with a different view on the issue: You need a virtual destructor if you want to polymorphically delete instances of this class.&lt;/p&gt;\n&lt;p&gt;This kind-of sidesteps the question, so let me elaborate: As many pointed out, you get undesired behaviour if you invoke &lt;code&gt;delete base_ptr&lt;/code&gt; and the destructor is not virtual. However, there are several assumptions there that need to be make explicit:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If your class is not a baseclass, you will hopefully not write code like this. In this case I don&apos;t mean the manual memory management, which is bad in and of itself, but deriving publicly from this class. A class not designed as baseclass should not be inherited from, like e.g. &lt;code&gt;std::string&lt;/code&gt;. C++ allows you to shoot yourself in the foot. This is your fault though, not that of the baseclass not having a virtual destructor.&lt;/li&gt;\n&lt;li&gt;If the destructor is not accessible (protected or private), this code won&apos;t compile, so the undesired behaviour can not occur. Having a protected destructor is useful, especially for mixins but also (to a lesser extent) for interfaces. You don&apos;t want to incur the overhead of virtual functions unless you actually make use of them. Making the destructor protected instead prevents undesired behaviour but doesn&apos;t restrict you otherwise.&lt;/li&gt;\n&lt;li&gt;If you actually write a class that is supposed to be derived from, you will typically have virtual functions anyways. As a user of them, you will typically only use them via a pointer to the baseclass. When this use includes disposing of them, it then needs to be polymorphic as well. This is then the case when you should make the destructor virtual.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For a similarly different view on the subject, also read &lt;a href=&quot;https://stackoverflow.com/questions/300986/when-should-you-not-use-virtual-destructors&quot;&gt;When should you not use virtual destructors?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A basic definition about &lt;code&gt;virtual&lt;/code&gt; is it determines if a member function of a class can be over-ridden in its derived classes. &lt;/p&gt;\n\n&lt;p&gt;A class&apos;s D-tor is called basically at the end of the scope, but there is a problem, for example when we define an instance on the Heap (dynamic allocation), we should delete it manually.&lt;/p&gt;\n\n&lt;p&gt;As soon as the instruction get executed, the base class destructor get called, but not for the derived one.&lt;/p&gt;\n\n&lt;p&gt;A Pratical example is when, in control field, you have to manipulate effectors, actuators.&lt;/p&gt;\n\n&lt;p&gt;At the end of the scope, if the destructor of one of the power elements (Actuator), isn&apos;t called, there will be fatal consequences.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Mother&lt;/span&gt;{\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Mother&lt;/span&gt;(){\n\n          std::cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mother Ctor&quot;&lt;/span&gt;&amp;lt;&amp;lt;std::endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt;~&lt;span class=&quot;hljs-built_in&quot;&gt;Mother&lt;/span&gt;(){\n\n        std::cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mother D-tor&quot;&lt;/span&gt;&amp;lt;&amp;lt;std::endl;\n    }\n\n\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Child&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Mother{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;Child&lt;/span&gt;(){\n\n        std::cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Child C-tor&quot;&lt;/span&gt;&amp;lt;&amp;lt;std::endl;\n    }\n\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;Child&lt;/span&gt;(){\n\n         std::cout&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Child D-tor&quot;&lt;/span&gt;&amp;lt;&amp;lt;std::endl;\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n\n    Mother *c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Child&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; c;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Make all destructors virtual unless you have good reason not to.&lt;/p&gt;\n&lt;p&gt;Otherwise evil like this happens:&lt;/p&gt;\n&lt;p&gt;Suppose you have an array of Fruit pointers with both Apple and Orange objects.&lt;/p&gt;\n&lt;p&gt;When you delete from the collection of Fruit objects,\n~Apple() and ~Orange() fail to be called unless ~Fruit() is virtual.&lt;/p&gt;\n&lt;p&gt;Example done right:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fruit&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// good&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Fruit&lt;/span&gt;() { cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;peel or core should have been tossed&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; } \n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Apple&lt;/span&gt;:  Fruit { &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Apple&lt;/span&gt;()  {cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toss core&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Orange&lt;/span&gt;: Fruit { &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Orange&lt;/span&gt;() {cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toss peel&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; } };\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ \n  Fruit *basket[]={ &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Apple&lt;/span&gt;(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Orange&lt;/span&gt;() };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; fruit: basket) &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; fruit;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;good output&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;toss core\npeel &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; core should have been tossed\ntoss peel\npeel &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; core should have been tossed\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example done wrong:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fruit&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// bad &lt;/span&gt;\n  ~&lt;span class=&quot;hljs-built_in&quot;&gt;Fruit&lt;/span&gt;() { cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;peel or core should have been tossed&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; } \n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Apple&lt;/span&gt;:  Fruit { &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Apple&lt;/span&gt;()  {cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toss core&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; } };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Orange&lt;/span&gt;: Fruit { &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;hljs-built_in&quot;&gt;Orange&lt;/span&gt;() {cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toss peel&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl; } };\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ \n  Fruit *basket[]={ &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Apple&lt;/span&gt;(), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Orange&lt;/span&gt;() };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; fruit: basket) &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; fruit;\n};\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;bad output&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;peel &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; core should have been tossed\npeel &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; core should have been tossed\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(Note: Where I used struct for brevity, normally use class and specify public)&lt;/p&gt;\n    ","\n&lt;p&gt;Any class that is inherited publicly, polymorphic or not, should have a virtual destructor. To put another way, if it can be pointed to by a base class pointer, its base class should have a virtual destructor.&lt;/p&gt;\n&lt;p&gt;If virtual, the derived class destructor gets called and then the base class destructor. If not virtual, only the base class destructor gets called.&lt;/p&gt;\n    "],"487":["\n&lt;p&gt;You cannot pass variable values from the current page JavaScript code to the current page PHP code... PHP code runs at the server side, and it doesn&apos;t know anything about what is going on on the client side.&lt;/p&gt;\n\n&lt;p&gt;You need to pass variables to PHP code from the HTML form using another mechanism, such as submitting the form using the GET or POST methods.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My Test Form&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Please, choose the salary id to proceed result:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;salarieids&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;SalarieID:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n          &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM salarie&quot;&lt;/span&gt;;\n          &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;) :\n        &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;salarieids&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;salarieid&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;option value=&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salaried&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;&amp;gt;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salaried&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/option&amp;gt;&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//between &amp;lt;option&amp;gt;&amp;lt;/option&amp;gt; tags you can output something more human-friendly (like $row[&apos;name&apos;], if table &quot;salaried&quot; have one)&lt;/span&gt;\n            }\n          &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sumbit my choice&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salaried&apos;&lt;/span&gt;]) : &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n      &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM salarie WHERE salarieid = &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salarieid&apos;&lt;/span&gt;];\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$query&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;) :\n      &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_fetch_assoc&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;tr&amp;gt;&apos;&lt;/span&gt;;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;td&amp;gt;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;salaried&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;bla-bla-bla&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/td&amp;gt;&apos;&lt;/span&gt; ...; &lt;span class=&quot;hljs-comment&quot;&gt;// and others&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/tr&amp;gt;&apos;&lt;/span&gt;;\n            }\n          &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n    &lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just save it in a cookie:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;createCookie&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;height&quot;&lt;/span&gt;, $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;);\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createCookie&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, value, days&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expires;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (days) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; date = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n    date.&lt;span class=&quot;hljs-title function_&quot;&gt;setTime&lt;/span&gt;(date.&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;() + (days * &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;));\n    expires = &lt;span class=&quot;hljs-string&quot;&gt;&quot;; expires=&quot;&lt;/span&gt; + date.&lt;span class=&quot;hljs-title function_&quot;&gt;toGMTString&lt;/span&gt;();\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    expires = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cookie&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(name) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;=&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;escape&lt;/span&gt;(value) + expires + &lt;span class=&quot;hljs-string&quot;&gt;&quot;; path=/&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then read it with PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;?P&lt;/span&gt;HP\n   &lt;span class=&quot;hljs-variable&quot;&gt;$_COOKIE&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;height&quot;&lt;/span&gt;];\n&lt;span class=&quot;hljs-string&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s not a pretty solution, but it works.&lt;/p&gt;\n    ","\n&lt;p&gt;There are several ways of passing variables from JavaScript to PHP (not the current page, of course).&lt;/p&gt;\n\n&lt;p&gt;You could:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Send the information in a form as stated here (will result in a page refresh)&lt;/li&gt;\n&lt;li&gt;Pass it in Ajax (several posts are on here about that) (without a page refresh)&lt;/li&gt;\n&lt;li&gt;Make an HTTP request via an XMLHttpRequest request (without a page refresh) like this:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;XMLHttpRequest&lt;/span&gt;){\n     xmlhttp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n     xmlhttp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActiveXObject&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Microsoft.XMLHTTP&quot;&lt;/span&gt;);\n }\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PageToSendTo&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;nowitworks.php?&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyVariable&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;variableData&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;VariablePlaceholder&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;variableName=&quot;&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UrlToSend&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;PageToSendTo&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;VariablePlaceholder&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;MyVariable&lt;/span&gt;;\n\n xmlhttp.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;UrlToSend&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n xmlhttp.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;m sure this could be made to look fancier and loop through all the variables and whatnot - but I&apos;ve kept it basic as to make it easier to understand for the novices.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is the Working example: Get javascript variable value on the same page in php.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;;\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script&amp;gt;document.writeln(p1);&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;when your page first loads the PHP code first run and set the complete layout of your webpage. after the page layout, it set the JavaScript load up. now JavaScript directly interacts with DOM and can manipulate the layout but PHP can&apos;t it needs to refresh the page. There is only way is to refresh your page to and pass the parameters in the page URL so that you can get the data via PHP. So we use AJAX to interact Javascript with PHP without page reload. AJAX can also be used as an API. one more thing if you have already declared the variable in PHP. before the page load then you can use it with your Javascript example.&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; username = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myname&lt;/span&gt;;&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&quot;;\nalert(username);\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the above code is correct and it will work. but the code below is totally wrong and it will never work.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; username = &lt;span class=&quot;hljs-string&quot;&gt;&quot;syed ali&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myname&lt;/span&gt;;&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt; = username;\n    alert(myname);\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pass value from JavaScript to PHP via AJAX&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;it is the most secure way to do it. because HTML content can be edited via developer tools and the user can manipulate the data. so it is better to use AJAX if you want security over that variable.if you are a newbie to AJAX please learn AJAX it is very simple.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The best and most secure way to pass JavaScript variable into PHP is\n  via AJAX&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;simple AJAX example&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mydata = &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myname = &lt;span class=&quot;hljs-string&quot;&gt;&quot;syed ali&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; userdata = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;:mydata,&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;:myname};\n    $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n            &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;YOUR PHP URL HERE&quot;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;:userdata, \n            &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n            }\n            });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;PASS value from javascript to php via hidden fields.&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;otherwise, you can create hidden HTML input inside your form. like&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mydata&quot;&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then via jQuery or javaScript pass the value to the hidden field. like&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myvalue = &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#mydata&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(myvalue);\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now when you submit the form you can get the value in PHP. &lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s how I did it (I needed to insert a local timezone into PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ob_start&lt;/span&gt;();\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(d.&lt;span class=&quot;hljs-title function_&quot;&gt;getTimezoneOffset&lt;/span&gt;());\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ob_get_clean&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$offset&lt;/span&gt;);\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I was trying to figure this out myself and then realized that the problem is that this is kind of a backwards way of looking at the situation.  Rather than trying to pass things from JavaScript to php, maybe it&apos;s best to go the other way around, in most cases.  PHP code executes on the server and creates the html code (and possibly java script as well).  Then the browser loads the page and executes the html and java script.&lt;/p&gt;\n\n&lt;p&gt;It seems like the sensible way to approach situations like this is to use the PHP to create the JavaScript and the html you want and then to use the JavaScript in the page to do whatever PHP can&apos;t do.  It seems like this would give you the benefits of both PHP and JavaScript in a fairly simple and straight forward way.&lt;/p&gt;\n\n&lt;p&gt;One thing I&apos;ve done that gives the appearance of passing things to PHP from your page on the fly is using the html image tag to call on PHP code.  Something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pic.php&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The PHP code in pic.php would actually create html code before your web page was even loaded, but that html code is basically called upon on the fly.  The php code here can be used to create a picture on your page, but it can have any commands you like besides that in it.  Maybe it changes the contents of some files on your server, etc.  The upside of this is that the php code can be executed from html and I assume JavaScript, but the down side is that the only output it can put on your page is an image.  You also have the option of passing variables to the php code through parameters in the url.  Page counters will use this technique in many cases.&lt;/p&gt;\n    ","\n&lt;p&gt;PHP runs on the server before the page is sent to the user, JavaScript is run on the user&apos;s computer once it is received, so the PHP script has already executed.&lt;/p&gt;\n\n&lt;p&gt;If you want to pass a JavaScript value to a PHP script, you&apos;d have to do an XMLHttpRequest to send the data back to the server.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a previous question that you can follow for more information: &lt;a href=&quot;https://stackoverflow.com/questions/257110/ajax-tutorial&quot;&gt;Ajax Tutorial&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now if you just need to pass a form value to the server, you can also just do a normal form post, that does the same thing, but the whole page has to be refreshed.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;))\n{\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;PHP_SELF&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clicking submit will submit the page, and print out the submitted data.&lt;/p&gt;\n    ","\n&lt;p&gt;We can easily pass values even on same/ different pages using the cookies shown in the code as follows (In my case, I&apos;m using it with facebook integration) -&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;statusChangeCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;statusChangeCallback&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;connected&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Logged into your app and Facebook.&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable constant_&quot;&gt;FB&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;api&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/me?fields=id,first_name,last_name,email&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cookie&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;fbdata = &quot;&lt;/span&gt; + result.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; + result.&lt;span class=&quot;hljs-property&quot;&gt;first_name&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; + result.&lt;span class=&quot;hljs-property&quot;&gt;last_name&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; + result.&lt;span class=&quot;hljs-property&quot;&gt;email&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cookie&lt;/span&gt;);\n        });\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And I&apos;ve accessed it (in any file) using - &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; \n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_COOKIE&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;fbdata&apos;&lt;/span&gt;])) { \n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;welcome &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$_COOKIE&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;fbdata&apos;&lt;/span&gt;];\n    }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Your code has a few things wrong with it.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You define a JavaScript function, func_load3(), but do not call it.&lt;/li&gt;\n&lt;li&gt;Your function is defined in the wrong place. When it is defined in your page, the HTML objects it refers to have not yet been loaded. Most JavaScript code checks whether the document is fully loaded before executing, or you can just move your code past the elements it refers to in the page.&lt;/li&gt;\n&lt;li&gt;Your form has no means to submit it. It needs a submit button.&lt;/li&gt;\n&lt;li&gt;You do not check whether your form has been submitted.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It is possible to set a JavaScript variable in a hidden variable in a form, then submit it, and read the value back in PHP. Here is a simple example that shows this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?php\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt;($_POST[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hidden1&apos;&lt;/span&gt;])) {\n   echo &lt;span class=&quot;hljs-string&quot;&gt;&quot;You submitted {$_POST[&apos;hidden1&apos;]}&quot;&lt;/span&gt;;\n   die;\n}\n\necho &amp;lt;&amp;lt;&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;HTML&lt;/span&gt;\n   &amp;lt;&lt;span class=&quot;hljs-attr&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myform&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{$_SERVER[&apos;PHP_SELF&apos;]}&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myform&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test this mess!&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hidden1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;hidden1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hidden1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is an example&quot;&lt;/span&gt;;\n   &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\nHTML;\n?&amp;gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use JQuery Ajax and POST method:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj;\n\n                \n$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#button1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; username=$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#username&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; password=$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#password&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n  $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;addperson.php&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, \n    &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: {\n        &lt;span class=&quot;hljs-attr&quot;&gt;username&lt;/span&gt;: username,\n        &lt;span class=&quot;hljs-attr&quot;&gt;password&lt;/span&gt;: password\n    }\n})\n.&lt;span class=&quot;hljs-property&quot;&gt;done&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, textStatus, jqXHR&lt;/span&gt;) { \n    \n   obj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(data);\n   \n})\n.&lt;span class=&quot;hljs-property&quot;&gt;fail&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;jqXHR, textStatus, errorThrown&lt;/span&gt;) { \n    \n})\n.&lt;span class=&quot;hljs-property&quot;&gt;always&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;jqXHROrData, textStatus, jqXHROrErrorThrown&lt;/span&gt;) { \n    \n});\n  \n \n            });\n        });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To take a response back from the php script JSON parse the the respone in &lt;code&gt;.done()&lt;/code&gt; method.\nHere is the php script you can modify to your needs:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n     &lt;span class=&quot;hljs-variable&quot;&gt;$username1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt;] : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    \n     &lt;span class=&quot;hljs-variable&quot;&gt;$password1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;] : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$servername&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$dbname&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create connection&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$servername&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$dbname&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// Check connection&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;connect_error) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connection failed: &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;connect_error);\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO user (username, password)\nVALUES (&apos;&lt;span class=&quot;hljs-subst&quot;&gt;$username1&lt;/span&gt;&apos;, &apos;&lt;span class=&quot;hljs-subst&quot;&gt;$password1&lt;/span&gt;&apos; )&quot;&lt;/span&gt;;\n\n    ;  \n    \n    \n   \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;) {\n    \n   &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;success&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n    \n    \n  &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;success&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n}\n\n\n\n\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$conn&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;close&lt;/span&gt;();\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Is your function, which sets the hidden form value, being called? It is not in this example. You should have no problem modifying a hidden value &lt;em&gt;before&lt;/em&gt; posting the form back to the server.&lt;/p&gt;\n    ","\n&lt;p&gt;May be you could use jquery serialize() method so that everything will be at one go.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;=$(&apos;#&lt;span class=&quot;hljs-title&quot;&gt;myForm&apos;&lt;/span&gt;).serialize();&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;//this way you could get the hidden value as well in the server side.&lt;/p&gt;\n    ","\n&lt;p&gt;This obviously solution was not mentioned earlier. You can also use cookies to pass data from the browser back to the server.&lt;/p&gt;\n\n&lt;p&gt;Just set a cookie with the data you want to pass to PHP using javascript in the browser.&lt;/p&gt;\n\n&lt;p&gt;Then, simply read this cookie on the PHP side.&lt;/p&gt;\n    ","\n&lt;p&gt;We cannot pass JavaScript variable values to the PHP code directly... PHP code runs at the server side, and it doesn&apos;t know anything about what is going on on the client side.&lt;/p&gt;\n\n&lt;p&gt;So it&apos;s better to use the AJAX to parse the JavaScript value into the php Code.&lt;/p&gt;\n\n&lt;p&gt;Or alternatively we can make this done with the help of COOKIES in our code.&lt;/p&gt;\n\n&lt;p&gt;Thanks &amp;amp; Cheers.&lt;/p&gt;\n    ","\n&lt;p&gt;Use the + sign to concatenate your javascript variable into your php function call.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php-template&quot;&gt;&lt;span class=&quot;language-xml&quot;&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSvar&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;success&quot;&lt;/span&gt;;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSnewVar&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?=&lt;/span&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;myphpFunction&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; + JSvar + &quot;&apos;&lt;/span&gt;);&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;language-xml&quot;&gt;&quot;;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;`\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice the = sign is there twice.&lt;/p&gt;\n    "],"488":["\n&lt;p&gt;&lt;code&gt;myArray&lt;/code&gt; is a local variable and as thus the pointer is only valid until the end of its scope (which is in this case the containing function &lt;code&gt;getArray&lt;/code&gt;) is left. If you access it later you get undefined behavior.&lt;/p&gt;\n\n&lt;p&gt;In practice what happens is that the call to &lt;code&gt;printf&lt;/code&gt; overwrites the part of the stack used by &lt;code&gt;myArray&lt;/code&gt; and it then contains some other data.&lt;/p&gt;\n\n&lt;p&gt;To fix your code you need to either declare the array in a scope that lives long enough (the &lt;code&gt;main&lt;/code&gt; function in your example) or allocate it on the heap. If you allocate it on the heap you need to free it either manually, or in C++ using RAII.&lt;/p&gt;\n\n&lt;p&gt;One alternative I missed (probably even the best one here, provided the array is not too big) is to wrap your array into a struct and thus make it a value type. Then returning it creates a copy which survives the function return. See &lt;a href=&quot;https://stackoverflow.com/users/560684/tp1&quot;&gt;tp1&lt;/a&gt;&apos;s &lt;a href=&quot;https://stackoverflow.com/a/4581061/&quot;&gt;answer&lt;/a&gt; for details on this.&lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t access a local variable once it goes out of scope.  This is what it means to be a local variable.  &lt;/p&gt;\n\n&lt;p&gt;When you are accessing the array in the &lt;code&gt;replaceNumberAndPrint&lt;/code&gt; function the result is undefined. The fact it appears to work first time is just a fortunate coincidence. Probably the memory location you are pointing to is unallocated on the stack and is still correctly set for the first call,  but the call to &lt;code&gt;printf&lt;/code&gt; then overwrites this by pushing values onto the stack during its operation which is why the second call to &lt;code&gt;printf&lt;/code&gt; displays something different.&lt;/p&gt;\n\n&lt;p&gt;You need to store the array data on the heap and pass a pointer, or in a variable that remains in scope (e.g. a global or something scoped within the main function).&lt;/p&gt;\n    ","\n&lt;p&gt;Try something like that. The way you do it &quot;kills&quot; &lt;code&gt;myArray&lt;/code&gt; cause if it locally defined.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * array)&lt;/span&gt; &lt;/span&gt;{\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt; , array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(array);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * myArray = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;;\n myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n &lt;span class=&quot;hljs-comment&quot;&gt;//{4, 65, 23};&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n &lt;span class=&quot;hljs-built_in&quot;&gt;replaceNumberAndPrint&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;getArray&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More : &lt;a href=&quot;http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/&quot;&gt;http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; As Comments correctly pointed out:  A better way to do it would be that :&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * array)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!array)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt; , array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;createArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * myArray = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!myArray)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * array = &lt;span class=&quot;hljs-built_in&quot;&gt;createArray&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;replaceNumberAndPrint&lt;/span&gt;(array);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(array);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;myArray goes out of scope as soon as you leave getArray. You need to allocate space for it on the heap instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Your code invokes Undefined Behaviour because &lt;code&gt;myArray&lt;/code&gt; goes out of scope as soon as &lt;code&gt;getArray()&lt;/code&gt; returns and any attempt to &lt;em&gt;use&lt;/em&gt; (dereference) the dangling pointer is UB.&lt;/p&gt;\n    ","\n&lt;p&gt;Local variables go out of scope upon return, so you can&apos;t return a pointer to a local variable. &lt;/p&gt;\n\n&lt;p&gt;You need to allocate it dynamically (on the heap), using &lt;code&gt;malloc&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;create_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;assert&lt;/span&gt;(array != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n    array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array;\n }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;destroy_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(array);\n }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array = &lt;span class=&quot;hljs-built_in&quot;&gt;create_array&lt;/span&gt;();\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; ++i)\n         &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, array[i]);\n     &lt;span class=&quot;hljs-built_in&quot;&gt;destroy_array&lt;/span&gt;(array);\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, you can declare the array as static, keeping in mind the semantics are different. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;get_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[] = { &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt; };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array;\n }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n     &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *array = &lt;span class=&quot;hljs-built_in&quot;&gt;get_array&lt;/span&gt;();\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; ++i)\n         &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, array[i]);\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you don&apos;t know what &lt;code&gt;static&lt;/code&gt; means, read &lt;a href=&quot;https://stackoverflow.com/questions/572547/what-does-static-mean-in-a-c-program&quot;&gt;this question &amp;amp; answer&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Right way to do this is as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Arr&lt;/span&gt; {\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n};\n&lt;span class=&quot;hljs-function&quot;&gt;Arr &lt;span class=&quot;hljs-title&quot;&gt;get_array&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n   Arr a;\n   a.array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n   a.array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n   a.array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;{\n   Arr a = &lt;span class=&quot;hljs-built_in&quot;&gt;get_array&lt;/span&gt;();\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++)\n       &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, a.array[i]);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To understand why you need to do this, you need to know how sizeof(array) works. C (and thus c++) tries hard to avoid copying the array, and you need the struct to go past that. Why copying is needed is because of scopes -- the get_array() function&apos;s scope disappears and every value still needed from that scope will need to be copied to calling scope.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;C++ solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;May I have any access to a local variable in a different function? If so, how?&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The answer is no, not after the function has ended. Local variables are destroyed at that point.&lt;/p&gt;\n\n&lt;p&gt;In &lt;code&gt;C++&lt;/code&gt; the way to deal with returning arrays is to manage them in a &lt;em&gt;container&lt;/em&gt; like a &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/array&quot; rel=&quot;nofollow noreferrer&quot;&gt;std::array&lt;/a&gt; (fixed size) or a &lt;a href=&quot;http://en.cppreference.com/w/cpp/container/vector&quot; rel=&quot;nofollow noreferrer&quot;&gt;std::vector&lt;/a&gt; (dynamic size).&lt;/p&gt;\n\n&lt;p&gt;Eg:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;replaceNumberAndPrint&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;gt;&amp;amp; array)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 3&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    std::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, 3&amp;gt; myArray = {&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the second function the returned value is optimized by the compiler so you don&apos;t pay the price of actually copying the array.&lt;/p&gt;\n    ","\n&lt;p&gt;In this code you have used pointer to local objects but when a function returns all local variables goes out of scope. If you will allocate memory (using &lt;code&gt;malloc()&lt;/code&gt; function for allocation) then no data will be lost or overwrite.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *myArray = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(size*&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *vector = &lt;span class=&quot;hljs-built_in&quot;&gt;getArray&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;i++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;,vector[i]);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;getch&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code will print all the array elements and no overwritten will be happened.&lt;/p&gt;\n    ","\n&lt;p&gt;Static ..or.. Global within your .c will do the trick ;)&lt;/p&gt;\n&lt;p&gt;However the entire time the program will occupy those 3 bytes BUT you avoid doing malloc on simple things like this (malloc recommended for big arrays)&lt;/p&gt;\n&lt;p&gt;On the other hand if the outside function modify the pointer, then the internal &apos;myArray&apos; will be modified cause it points to it, that&apos;s it&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; myArray[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; * &lt;span class=&quot;hljs-title&quot;&gt;getArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n    myArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"489":["\n&lt;p&gt;you may force the capture of a variable using an argument with a default value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;   adders[i]=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a,i=i: i+a  &lt;span class=&quot;hljs-comment&quot;&gt;# note the dummy parameter with a default value&lt;/span&gt;\n...\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;( adders[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;](&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) )\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the idea is to declare a parameter (cleverly named &lt;code&gt;i&lt;/code&gt;) and give it a default value of the variable you want to capture (the value of  &lt;code&gt;i&lt;/code&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;Your second question has been answered, but as for your first:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;what does the closure capture exactly?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Scoping in Python is &lt;strike&gt;dynamic and&lt;/strike&gt; lexical. A closure will always remember the name and scope of the variable, not the object it&apos;s pointing to. Since all the functions in your example are created in the same scope and use the same variable name, they always refer to the same variable.&lt;/p&gt;\n&lt;p&gt;Regarding your other question of how to overcome this, there are two ways that come to mind:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The most concise, but not strictly equivalent way is the &lt;a href=&quot;https://stackoverflow.com/a/2295372/181765&quot;&gt;one recommended by Adrien Plisson&lt;/a&gt;. Create a lambda with an extra argument, and set the extra argument&apos;s default value to the object you want preserved.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A little more verbose but less hacky would be to create a new scope each time you create the lambda:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &amp;gt;&amp;gt;&amp;gt; adders = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]:\n ...     adders[i] = (&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; b: &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: b + a)(i)\n ...     \n &amp;gt;&amp;gt;&amp;gt; adders[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;](&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n &amp;gt;&amp;gt;&amp;gt; adders[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;](&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The scope here is created using a new function (a lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createAdder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; y: y + x\nadders = [createAdder(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For completeness another answer to your second question: You could use &lt;a href=&quot;http://docs.python.org/library/functools.html#functools.partial&quot; rel=&quot;nofollow noreferrer&quot;&gt;partial&lt;/a&gt; in the &lt;a href=&quot;http://docs.python.org/library/functools.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;functools&lt;/a&gt; module.&lt;/p&gt;\n&lt;p&gt;With importing add from operator as Chris Lutz proposed the example becomes:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; partial\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; add   &lt;span class=&quot;hljs-comment&quot;&gt;# add(a, b) -- Same as a + b.&lt;/span&gt;\n\nadders = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# store callable object with first argument given as (current) i&lt;/span&gt;\n    adders[i] = partial(add, i) \n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; adders[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;](&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Consider the following code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_x&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; x\n\nx = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;\n\nprint_x() &lt;span class=&quot;hljs-comment&quot;&gt;# Outputs &quot;bar&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I think most people won&apos;t find this confusing at all. It is the expected behaviour.&lt;/p&gt;\n\n&lt;p&gt;So, why do people think it would be different when it is done in a loop? I know I did that mistake myself, but I don&apos;t know why. It is the loop? Or perhaps the lambda?&lt;/p&gt;\n\n&lt;p&gt;After all, the loop is just a shorter version of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;adders= [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nadders[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: i+a\ni = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nadders[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: i+a\ni = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nadders[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: i+a\ni = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nadders[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: i+a\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a new example that highlights the data structure and contents of a closure, to help clarify when the enclosing context is &quot;saved.&quot;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;make_funcs&lt;/span&gt;():\n    i = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n    my_str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hi&quot;&lt;/span&gt;\n\n    f_one = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: i\n\n    i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    f_two = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    f_three = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: my_str\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f_one, f_two, f_three\n\nf_1, f_2, f_3 = make_funcs()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What is in a closure?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; f_1.func_closure, f_1.func_closure[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].cell_contents\n(&amp;lt;cell at &lt;span class=&quot;hljs-number&quot;&gt;0x106a99a28&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fbb20c11170&lt;/span&gt;&amp;gt;,) &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notably, my_str is not in f1&apos;s closure.&lt;/p&gt;\n\n&lt;p&gt;What&apos;s in f2&apos;s closure?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; f_2.func_closure, f_2.func_closure[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].cell_contents\n(&amp;lt;cell at &lt;span class=&quot;hljs-number&quot;&gt;0x106a99a28&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fbb20c11170&lt;/span&gt;&amp;gt;,) &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice (from the memory addresses) that both closures contain the same objects. So, you can &lt;em&gt;start&lt;/em&gt; to think of the lambda function as having a reference to the scope. However, my_str is not in the closure for f_1 or f_2, and i is not in the closure for f_3 (not shown), which suggests the closure objects themselves are distinct objects.&lt;/p&gt;\n\n&lt;p&gt;Are the closure objects themselves the same object?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; f_1.func_closure &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; f_2.func_closure\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In answer to your second question, the most elegant way to do this would be to use a function that takes two parameters instead of an array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;add = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a, b: a + b\nadd(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, using lambda here is a bit silly. Python gives us the &lt;code&gt;operator&lt;/code&gt; module, which provides a functional interface to the basic operators. The lambda above has unnecessary overhead just to call the addition operator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; add\nadd(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I understand that you&apos;re playing around, trying to explore the language, but I can&apos;t imagine a situation I would use an array of functions where Python&apos;s scoping weirdness would get in the way.&lt;/p&gt;\n\n&lt;p&gt;If you wanted, you could write a small class that uses your array-indexing syntax:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Adders&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__getitem__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, item&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: a + item\n\nadders = Adders()\nadders[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;](&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One way to sort out the scope of &lt;code&gt;i&lt;/code&gt; is to generate the lambda in another scope (a closure function), handing over the necessary parameters for it to make the lambda:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_funky&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; a: i+a\n\nadders=[&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]:\n   adders[i]=get_funky(i)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(*(ar(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ar &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; adders))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;giving &lt;code&gt;5 6 7 8&lt;/code&gt; of course.&lt;/p&gt;\n    "],"490":["\n&lt;h2 id=&quot;target-unreachable-identifier-bean-resolved-to-null-3zox&quot;&gt;1. Target Unreachable, identifier &apos;bean&apos; resolved to null&lt;/h2&gt;\n&lt;p&gt;This boils down to that the managed bean instance itself could not be found by exactly that identifier (managed bean name) in EL like so &lt;code&gt;#{bean}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Identifying the cause can be broken down into three steps:&lt;/p&gt;\n&lt;p&gt;a. Who&apos;s managing the bean?&lt;br&gt;\nb. What&apos;s the (default) managed bean name?&lt;br&gt;\nc. Where&apos;s the backing bean class?&lt;/p&gt;\n&lt;h3 id=&quot;a.whos-managing-the-bean-r4jf&quot;&gt;1a. Who&apos;s managing the bean?&lt;/h3&gt;\n&lt;p&gt;First step would be checking which bean management framework is responsible for managing the bean instance. Is it &lt;strong&gt;CDI&lt;/strong&gt; via &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/inject/Named.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@Named&lt;/code&gt;&lt;/a&gt;? Or is it &lt;strong&gt;JSF&lt;/strong&gt; via &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/bean/ManagedBean.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ManagedBean&lt;/code&gt;&lt;/a&gt;? Or is it &lt;strong&gt;Spring&lt;/strong&gt; via &lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt;? Can you make sure that you&apos;re not mixing multiple bean management framework specific annotations on the very same backing bean class? E.g. &lt;code&gt;@Named @ManagedBean&lt;/code&gt;, &lt;code&gt;@Named @Component&lt;/code&gt;, or &lt;code&gt;@ManagedBean @Component&lt;/code&gt;. This is wrong. The bean must be managed by at most one bean management framework and that framework must be properly configured. If you already have no idea which to choose, head to &lt;a href=&quot;https://stackoverflow.com/questions/4347374/backing-beans-managedbean-or-cdi-beans-named/4347707#4347707&quot;&gt;Backing beans (@ManagedBean) or CDI Beans (@Named)?&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/18387993/spring-jsf-integration-how-to-inject-a-spring-component-service-in-jsf-managed/18388289#18388289&quot;&gt;Spring JSF integration: how to inject a Spring component/service in JSF managed bean?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In case it&apos;s &lt;strong&gt;CDI&lt;/strong&gt; who&apos;s managing the bean via &lt;code&gt;@Named&lt;/code&gt;, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;CDI 1.0 (Java EE 6) requires an &lt;code&gt;/WEB-INF/beans.xml&lt;/code&gt; file in order to enable CDI in WAR. It can be &lt;em&gt;empty&lt;/em&gt; or it can have just the following content:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt; \n         &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee\n                             http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javaee/7/tutorial/cdi-adv001.htm&quot; rel=&quot;noreferrer&quot;&gt;CDI 1.1 (Java EE 7)&lt;/a&gt; without any &lt;code&gt;beans.xml&lt;/code&gt;, or an empty &lt;code&gt;beans.xml&lt;/code&gt; file, or with the above CDI 1.0 compatible &lt;code&gt;beans.xml&lt;/code&gt; will behave the same as CDI 1.0. When there&apos;s a CDI 1.1 compatible &lt;code&gt;beans.xml&lt;/code&gt; with an explicit &lt;code&gt;version=&quot;1.1&quot;&lt;/code&gt;, then it will by default only register &lt;code&gt;@Named&lt;/code&gt; beans &lt;em&gt;with&lt;/em&gt; an explicit CDI scope annotation such as &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@RequestScoped&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/view/ViewScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ViewScoped&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/SessionScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@SessionScoped&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/ApplicationScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ApplicationScoped&lt;/code&gt;&lt;/a&gt;, etc. In case you intend to register all beans as CDI managed beans, even those without an explicit CDI scope, use the below CDI 1.1 compatible &lt;code&gt;/WEB-INF/beans.xml&lt;/code&gt; with &lt;code&gt;bean-discovery-mode=&quot;all&quot;&lt;/code&gt; set (the default is &lt;code&gt;bean-discovery-mode=&quot;annotated&quot;&lt;/code&gt;).&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee \n                             http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean-discovery-mode&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using CDI 1.1+ with &lt;code&gt;bean-discovery-mode=&quot;annotated&quot;&lt;/code&gt; (default), make sure that you didn&apos;t accidentally import a JSF scope such as &lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/faces/bean/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.faces.bean.RequestScoped&lt;/code&gt;&lt;/a&gt; instead of a CDI scope &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/enterprise/context/RequestScoped.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.enterprise.context.RequestScoped&lt;/code&gt;&lt;/a&gt;. Watch out with IDE autocomplete.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using Mojarra 2.3.0-2.3.2 and CDI 1.1+ with &lt;code&gt;bean-discovery-mode=&quot;annotated&quot;&lt;/code&gt; (default), then you need to upgrade Mojarra to 2.3.3 or newer due to a &lt;a href=&quot;https://github.com/javaserverfaces/mojarra/issues/4264&quot; rel=&quot;noreferrer&quot;&gt;bug&lt;/a&gt;. In case you can&apos;t upgrade, then you need either to set &lt;code&gt;bean-discovery-mode=&quot;all&quot;&lt;/code&gt; in &lt;code&gt;beans.xml&lt;/code&gt;, or to put the JSF 2.3 specific &lt;code&gt;@FacesConfig&lt;/code&gt; annotation on an arbitrary class in the WAR (generally some sort of an application scoped startup class).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using JSF 2.3 on a Servlet 4.0 container with a &lt;code&gt;web.xml&lt;/code&gt; declared conform Servlet 4.0, then you need to explicitly put the JSF 2.3 specific &lt;code&gt;@FacesConfig&lt;/code&gt; annotation on an arbitrary class in the WAR (generally some sort of an application scoped startup class). This is not necessary in Servlet 3.x.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using CDI 3.0, the first version with package renamed from &lt;code&gt;javax.*&lt;/code&gt; to &lt;code&gt;jakarta.*&lt;/code&gt;, then you need to ensure that all deployment descriptor files &lt;code&gt;beans.xml&lt;/code&gt;, &lt;code&gt;web.xml&lt;/code&gt;, &lt;code&gt;faces-config.xml&lt;/code&gt; are conform &lt;a href=&quot;https://jakarta.ee/xml/ns/jakartaee/&quot; rel=&quot;noreferrer&quot;&gt;the new &lt;code&gt;jakartaee&lt;/code&gt; schemas&lt;/a&gt; and thus not conform the old &lt;code&gt;javaee&lt;/code&gt; schemes.&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jakarta.ee/xml/ns/jakartaee&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://jakarta.ee/xml/ns/jakartaee \n                             https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bean-discovery-mode&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;all&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Non-JEE containers like Tomcat and Jetty doesn&apos;t ship with CDI bundled. You need to install it manually. It&apos;s a bit more work than just adding the library JAR(s). For Tomcat, make sure that you follow the instructions in this answer: &lt;a href=&quot;https://stackoverflow.com/questions/18995951/how-to-install-and-use-cdi-on-tomcat/19003725#19003725&quot;&gt;How to install and use CDI on Tomcat?&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your runtime classpath is clean and free of duplicates in CDI API related JARs. Make sure that you&apos;re not mixing multiple CDI implementations (Weld, OpenWebBeans, etc). Make sure that you don&apos;t provide another CDI or even Java EE API JAR file along webapp when the target container already bundles CDI API out the box.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re packaging CDI managed beans for JSF views in a JAR, then make sure that the JAR has at least a valid &lt;code&gt;/META-INF/beans.xml&lt;/code&gt; (which can be kept empty).&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In case it&apos;s &lt;strong&gt;JSF&lt;/strong&gt; who&apos;s managing the bean via the since 2.3 deprecated &lt;code&gt;@ManagedBean&lt;/code&gt;, and you can&apos;t migrate to CDI, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;faces-config.xml&lt;/code&gt; root declaration is compatible with JSF 2.0. So the XSD file and the &lt;code&gt;version&lt;/code&gt; must &lt;strong&gt;at least&lt;/strong&gt; specify JSF 2.0 or higher and thus not 1.x.&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;faces-config&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For JSF 2.1, just replace &lt;code&gt;2_0&lt;/code&gt; and &lt;code&gt;2.0&lt;/code&gt; by &lt;code&gt;2_1&lt;/code&gt; and &lt;code&gt;2.1&lt;/code&gt; respectively.&lt;/p&gt;\n&lt;p&gt;If you&apos;re on JSF 2.2 or higher, then make sure you&apos;re using &lt;code&gt;xmlns.jcp.org&lt;/code&gt; namespaces instead of &lt;code&gt;java.sun.com&lt;/code&gt; over all place.&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;faces-config&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd&quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For JSF 2.3, just replace &lt;code&gt;2_2&lt;/code&gt; and &lt;code&gt;2.2&lt;/code&gt; by &lt;code&gt;2_3&lt;/code&gt; and &lt;code&gt;2.3&lt;/code&gt; respectively.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You didn&apos;t accidentally import &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.annotation.ManagedBean&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/faces/bean/ManagedBean.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;javax.faces.bean.ManagedBean&lt;/code&gt;&lt;/a&gt;. Watch out with IDE autocomplete, Eclipse is known to autosuggest the wrong one as first item in the list.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You didn&apos;t override the &lt;code&gt;@ManagedBean&lt;/code&gt; by a JSF 1.x style &lt;code&gt;&amp;lt;managed-bean&amp;gt;&lt;/code&gt; entry in &lt;code&gt;faces-config.xml&lt;/code&gt; on the very same backing bean class along with a different managed bean name. This one will have precedence over &lt;code&gt;@ManagedBean&lt;/code&gt;. Registering a managed bean in &lt;code&gt;faces-config.xml&lt;/code&gt; is not necessary since JSF 2.0, just remove it.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Your runtime classpath is clean and free of duplicates in JSF API related JARs. Make sure that you&apos;re not mixing multiple JSF implementations (Mojarra and MyFaces). Make sure that you don&apos;t provide another JSF or even Java EE API JAR file along webapp when the target container already bundles JSF API out the box. See also &lt;a href=&quot;https://stackoverflow.com/tags/jsf/info&quot;&gt;&quot;Installing JSF&quot; section of our JSF wiki page&lt;/a&gt; for JSF installation instructions. In case you intend to upgrade container-bundled JSF from the WAR on instead of in container itself, make sure that you&apos;ve instructed the target container to use WAR-bundled JSF API/impl.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re packaging JSF managed beans in a JAR, then make sure that the JAR has at least a JSF 2.0 compatible &lt;code&gt;/META-INF/faces-config.xml&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/7663818/how-to-reference-jsf-managed-beans-which-are-provided-in-a-jar-file/7663898#7663898&quot;&gt;How to reference JSF managed beans which are provided in a JAR file?&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re &lt;em&gt;actually&lt;/em&gt; using the jurassic JSF 1.x, and you can&apos;t upgrade, then you need to register the bean via &lt;code&gt;&amp;lt;managed-bean&amp;gt;&lt;/code&gt; in &lt;code&gt;faces-config.xml&lt;/code&gt; instead of &lt;code&gt;@ManagedBean&lt;/code&gt;. Don&apos;t forget to fix your project build path as such that you don&apos;t have JSF 2.x libraries anymore (so that the &lt;code&gt;@ManagedBean&lt;/code&gt; annotation wouldn&apos;t confusingly successfully compile).&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In case it&apos;s &lt;strong&gt;Spring&lt;/strong&gt; who&apos;s managing the bean via &lt;code&gt;@Component&lt;/code&gt;, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Spring is being installed and integrated as per &lt;a href=&quot;http://docs.spring.io/autorepo/docs/spring/current/spring-framework-reference/html/web-integration.html&quot; rel=&quot;noreferrer&quot;&gt;its documentation&lt;/a&gt;. Importantingly, you need to at least have this in &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener-class&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;listener&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And this in &lt;code&gt;faces-config.xml&lt;/code&gt;:&lt;/p&gt;\n  &lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-resolver&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.jsf.el.SpringBeanFacesELResolver&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-resolver&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;(above is all I know with regard to Spring  I don&apos;t do Spring  feel free to edit/comment with other probable Spring related causes; e.g. some XML configuration related trouble)&lt;/em&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In case it&apos;s a &lt;strong&gt;repeater component&lt;/strong&gt; who&apos;s managing the (nested) bean via its &lt;code&gt;var&lt;/code&gt; attribute (e.g. &lt;code&gt;&amp;lt;h:dataTable var=&quot;item&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ui:repeat var=&quot;item&quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p:tabView var=&quot;item&quot;&amp;gt;&lt;/code&gt;, etc) and you actually got a &quot;Target Unreachable, identifier &apos;item&apos; resolved to null&quot;, then you need to make sure of the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;#{item}&lt;/code&gt; is not referenced in &lt;code&gt;binding&lt;/code&gt; attribtue of any child component. This is incorrect as &lt;code&gt;binding&lt;/code&gt; attribute runs during view build time, not during view render time. Moreover, there&apos;s physically only one component in the component tree which is simply reused during every iteration round. In other words, you should actually be using &lt;code&gt;binding=&quot;#{bean.component}&quot;&lt;/code&gt; instead of &lt;code&gt;binding=&quot;#{item.component}&quot;&lt;/code&gt;. But much better is to get rid of component bining to bean altogether and investigate/ask the proper approach for the problem you thought to solve this way. See also &lt;a href=&quot;https://stackoverflow.com/questions/14911158/how-does-the-binding-attribute-work-in-jsf-when-and-how-should-it-be-used&quot;&gt;How does the &apos;binding&apos; attribute work in JSF? When and how should it be used?&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3 id=&quot;b.whats-the-default-managed-bean-name-95af&quot;&gt;1b. What&apos;s the (default) managed bean name?&lt;/h3&gt;\n&lt;p&gt;Second step would be checking the registered managed bean name. JSF and Spring use conventions conform &lt;a href=&quot;http://www.oracle.com/technetwork/articles/javaee/spec-136004.html&quot; rel=&quot;noreferrer&quot;&gt;JavaBeans specification&lt;/a&gt; while CDI has exceptions depending on CDI impl/version.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;FooBean&lt;/code&gt; backing bean class like below,&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@Named&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooBean&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;will in all bean management frameworks have a default managed bean name of &lt;code&gt;#{fooBean}&lt;/code&gt;, as per JavaBeans specification.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A &lt;code&gt;FOOBean&lt;/code&gt; backing bean class like below,&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@Named&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FOOBean&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;whose unqualified classname starts with at least two capitals will in JSF and Spring have a default managed bean name of exactly the unqualified class name &lt;code&gt;#{FOOBean}&lt;/code&gt;, also conform JavaBeans specificiation. In CDI, this is also the case in Weld versions released before June 2015, but not in Weld versions released after June 2015 (2.2.14/2.3.0.B1/3.0.0.A9) nor in OpenWebBeans due to &lt;a href=&quot;https://issues.jboss.org/browse/CDI-525&quot; rel=&quot;noreferrer&quot;&gt;an oversight in CDI spec&lt;/a&gt;. In those Weld versions and in all OWB versions it is only with the first character lowercased &lt;code&gt;#{fOOBean}&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you have explicitly specified a managed bean name &lt;code&gt;foo&lt;/code&gt; like below,&lt;/p&gt;\n  &lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-meta&quot;&gt;@Named(&quot;foo&quot;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FooBean&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or equivalently with &lt;code&gt;@ManagedBean(name=&quot;foo&quot;)&lt;/code&gt; or &lt;code&gt;@Component(&quot;foo&quot;)&lt;/code&gt;, then it will only be available by &lt;code&gt;#{foo}&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; by &lt;code&gt;#{fooBean}&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3 id=&quot;c.wheres-the-backing-bean-class-9nn3&quot;&gt;1c. Where&apos;s the backing bean class?&lt;/h3&gt;\n&lt;p&gt;Third step would be doublechecking if the backing bean class is at the right place in the built and deployed WAR file. Make sure that you&apos;ve properly performed a full clean, rebuild, redeploy and restart of the project and server in case you was actually busy writing code and impatiently pressing F5 in the browser. If still in vain, let the build system produce a WAR file, which you then extract and inspect with a ZIP tool. The compiled &lt;code&gt;.class&lt;/code&gt; file of the backing bean class must reside in its package structure in &lt;code&gt;/WEB-INF/classes&lt;/code&gt;. Or, when it&apos;s packaged as part of a JAR module, the JAR containing the compiled &lt;code&gt;.class&lt;/code&gt; file must reside in &lt;code&gt;/WEB-INF/lib&lt;/code&gt; and thus not e.g. EAR&apos;s &lt;code&gt;/lib&lt;/code&gt; or elsewhere.&lt;/p&gt;\n&lt;p&gt;If you&apos;re using Eclipse, make sure that the backing bean class is in &lt;code&gt;src&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; &lt;code&gt;WebContent&lt;/code&gt;, and make sure that &lt;em&gt;Project &amp;gt; Build Automatically&lt;/em&gt; is enabled. If you&apos;re using Maven, make sure that the backing bean class is in &lt;code&gt;src/main/java&lt;/code&gt; and thus &lt;em&gt;not&lt;/em&gt; in &lt;code&gt;src/main/resources&lt;/code&gt; or &lt;code&gt;src/main/webapp&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If you&apos;re packaging the web application as part of an EAR with EJB+WAR(s), then you need to make sure that the backing bean classes are in WAR module and thus not in EAR module nor EJB module. The business tier (EJB) must be free of any web tier (WAR) related artifacts, so that the business tier is reusable across multiple different web tiers (JSF, JAX-RS, JSP/Servlet, etc).&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-entity-returned-null-4eqc&quot;&gt;2. Target Unreachable, &apos;entity&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This boils down to that the &lt;em&gt;nested&lt;/em&gt; property &lt;code&gt;entity&lt;/code&gt; as in &lt;code&gt;#{bean.entity.property}&lt;/code&gt; returned &lt;code&gt;null&lt;/code&gt;. This usually only exposes when JSF needs to &lt;strong&gt;set&lt;/strong&gt; the value for &lt;code&gt;property&lt;/code&gt; via an input component like below, while the &lt;code&gt;#{bean.entity}&lt;/code&gt; actually returned &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h:inputText&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#{bean.entity.property}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You need to make sure that you have prepared the model entity beforehand in a &lt;code&gt;@PostConstruct&lt;/code&gt;, or &lt;code&gt;&amp;lt;f:viewAction&amp;gt;&lt;/code&gt; method, or perhaps an &lt;code&gt;add()&lt;/code&gt; action method in case you&apos;re working with CRUD lists and/or dialogs on same view.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Named&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@ViewScoped&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bean&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Entity entity; &lt;span class=&quot;hljs-comment&quot;&gt;// +getter (setter is not necessary).&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Inject&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; EntityService entityService;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@PostConstruct&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// In case you&apos;re updating an existing entity.&lt;/span&gt;\n        entity = entityService.getById(entityId);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Or in case you want to create a new entity.&lt;/span&gt;\n        entity = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Entity&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As to the importance of &lt;code&gt;@PostConstruct&lt;/code&gt;; doing this in a regular constructor would fail in case you&apos;re using a bean management framework which uses &lt;a href=&quot;https://stackoverflow.com/questions/29651008/field-getobj-returns-all-nulls-on-injected-cdi-managed-beans-while-manually-i/29672591#29672591&quot;&gt;proxies&lt;/a&gt;, such as CDI. Always use &lt;code&gt;@PostConstruct&lt;/code&gt; to hook on managed bean instance initialization (and use &lt;code&gt;@PreDestroy&lt;/code&gt; to hook on managed bean instance destruction). Additionally, in a constructor you wouldn&apos;t have access to any injected dependencies yet, see also &lt;a href=&quot;https://stackoverflow.com/questions/16399974/nullpointerexception-while-trying-to-access-inject-bean-in-constructor&quot;&gt;NullPointerException while trying to access @Inject bean in constructor&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;In case the &lt;code&gt;entityId&lt;/code&gt; is supplied via &lt;code&gt;&amp;lt;f:viewParam&amp;gt;&lt;/code&gt;, you&apos;d need to use &lt;code&gt;&amp;lt;f:viewAction&amp;gt;&lt;/code&gt; instead of &lt;code&gt;@PostConstruct&lt;/code&gt;. See also &lt;a href=&quot;https://stackoverflow.com/questions/9844526/when-to-use-fviewaction-prerenderview-versus-postconstruct&quot;&gt;When to use f:viewAction / preRenderView versus PostConstruct?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;You also need to make sure that you preserve the non-&lt;code&gt;null&lt;/code&gt; model during postbacks in case you&apos;re creating it only in an &lt;code&gt;add()&lt;/code&gt; action method. Easiest would be to put the bean in the view scope. See also &lt;a href=&quot;https://stackoverflow.com/questions/7031885/how-to-choose-the-right-bean-scope&quot;&gt;How to choose the right bean scope?&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-null-returned-null-v1bu&quot;&gt;3. Target Unreachable, &apos;null&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This has actually the same cause as #2, only the (older) EL implementation being used is somewhat buggy in preserving the property name to display in the exception message, which ultimately incorrectly exposed as &apos;null&apos;. This only makes debugging and fixing a bit harder when you&apos;ve quite some nested properties like so &lt;code&gt;#{bean.entity.subentity.subsubentity.property}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The solution is still the same: make sure that the nested entity in question is not &lt;code&gt;null&lt;/code&gt;, in all levels.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-0-returned-null-2986&quot;&gt;4. Target Unreachable, &apos;&apos;0&apos;&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This has also the same cause as #2, only the (older) EL implementation being used is buggy in formulating the exception message. This exposes only when you use the brace notation &lt;code&gt;[]&lt;/code&gt; in EL as in &lt;code&gt;#{bean.collection[index]}&lt;/code&gt; where the &lt;code&gt;#{bean.collection}&lt;/code&gt; itself is non-null, but the item at the specified index doesn&apos;t exist. Such a message must then be interpreted as:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Target Unreachable, &apos;collection[0]&apos; returned null&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The solution is also the same as #2: make sure that the collection item is available.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2 id=&quot;target-unreachable-bracketsuffix-returned-null-pm08&quot;&gt;5. Target Unreachable, &apos;BracketSuffix&apos; returned null&lt;/h2&gt;\n&lt;p&gt;This has actually the same cause as #4, only the (older) EL implementation being used is somewhat buggy in preserving the iteration index to display in the exception message, which ultimately incorrectly exposed as &apos;BracketSuffix&apos; which is really the character &lt;code&gt;]&lt;/code&gt;. This only makes debugging and fixing a bit harder when you&apos;ve multiple items in the collection.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3 id=&quot;other-possible-causes-of-javax.el.propertynotfoundexception-5b2n&quot;&gt;Other possible causes of &lt;code&gt;javax.el.PropertyNotFoundException&lt;/code&gt;:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34196075/javax-el-elexception-error-reading-foo-on-type-com-example-bean/&quot;&gt;javax.el.ELException: Error reading &apos;foo&apos; on type com.example.Bean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7950628/javax-el-elexception-could-not-find-property-actionmethod-in-class-com-example&quot;&gt;javax.el.ELException: Could not find property actionMethod in class com.example.Bean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8577545/javax-el-propertynotfoundexception-property-foo-not-found-on-type-com-example/&quot;&gt;javax.el.PropertyNotFoundException: Property &apos;foo&apos; not found on type com.example.Bean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/13952630/javax-el-propertynotfoundexception-property-foo-not-readable-on-type-java-lan&quot;&gt;javax.el.PropertyNotFoundException: Property &apos;foo&apos; not readable on type java.lang.Boolean&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31515230/javax-el-propertynotfoundexception-property-not-found-on-type-org-hibernate-col/&quot;&gt;javax.el.PropertyNotFoundException: Property not found on type org.hibernate.collection.internal.PersistentSet&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14692560/outcommented-facelets-code-still-invokes-el-expressions-like-bean-action-an/&quot;&gt;Outcommented Facelets code still invokes EL expressions like #{bean.action()} and causes javax.el.PropertyNotFoundException on #{bean.action}&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;For those who are still stuck...&lt;/p&gt;\n\n&lt;p&gt;Using NetBeans 8.1 and GlassFish 4.1 with CDI, for some reason I had this issue only locally, not on the remote server. What did the trick:&lt;/p&gt;\n\n&lt;p&gt;-&amp;gt; using javaee-web-api 7.0 instead of the default pom version provided by NetBeans, which is javaee-web-api 6.0, so:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;javaee-web-api&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;7.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;-&amp;gt; upload this javaee-web-api-7.0.jar as a lib to on the server (lib folder in the domain1 folder) and restart the server.&lt;/p&gt;\n    ","\n&lt;p&gt;I decided to share my finding on this error after resolving it myself.&lt;/p&gt;\n\n&lt;p&gt;First of all, BalusC solutions should be taken seriously but then there is another likely issue in Netbeans to be aware of especially when building an &lt;strong&gt;Enterprise Application Project(EAR)&lt;/strong&gt; using Maven.&lt;/p&gt;\n\n&lt;p&gt;Netbeans generates, a &lt;strong&gt;parent POM file&lt;/strong&gt;, an &lt;strong&gt;EAR project&lt;/strong&gt;, an &lt;strong&gt;EJB project&lt;/strong&gt; and a &lt;strong&gt;WAR project&lt;/strong&gt;. \nEverything else in my project was fine, and I almost assumed the problem is a bug in probably GlassFish 4.0(I had to install and plug it into Netbeans) because GlassFish 4.1 has a Weld CDI bug which makes the embedded GlassFish 4.1 in Netbeans 8.0.2 unusable except through a patch.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To resolve the &lt;strong&gt;&quot;Target Unreachable, identifier &apos;bean&apos; resolved to null&quot;&lt;/strong&gt;\nerror-&lt;/p&gt;\n\n&lt;p&gt;I Right-click the parent POM project, and select &lt;strong&gt;Properties&lt;/strong&gt;. A Project Properties Dialog appears, click &quot;Sources&quot;, you will be surprised to see the &quot;&lt;strong&gt;Source/Binary Format&lt;/strong&gt;&quot; set to 1.5 and &quot;&lt;strong&gt;Encoding&lt;/strong&gt;&quot; set to Windows 1250.\nChange the &quot;&lt;strong&gt;Source/Binary Format&lt;/strong&gt;&quot; to 1.6 0r 1.7, whichever you prefer to make your project CDI compliant, and &quot;&lt;strong&gt;Encoding&lt;/strong&gt;&quot; to UTF-8. &lt;/p&gt;\n\n&lt;p&gt;Do the same for all the other subprojects(EAR, EJB, WAR) if they are not already compartible.\nRun your project, and you won&apos;t get that error again. &lt;/p&gt;\n\n&lt;p&gt;I hope this helps someone out there having similar error. &lt;/p&gt;\n    ","\n&lt;p&gt;I decided to share my solution, because although many answers provided here were helpful, I still had this problem. In my case, I am using JSF 2.3, jdk10, jee8, cdi 2.0 for my new project and I did run my app on wildfly 12, starting server with parameter standalone.sh -Dee8.preview.mode=true as recommended on wildfly website. The problem with &quot;bean resolved to null disappeared after downloading wildfly 13. Uploading exactly the same war to wildfly 13 made it all work.&lt;/p&gt;\n    ","\n&lt;p&gt;I got stuck on this error because in the class that has the &lt;code&gt;@SpringBootApplication&lt;/code&gt; I forgot to specify the controller&apos;s package name.&lt;/p&gt;\n\n&lt;p&gt;I wanted to be more specific this time pointing out which components Spring had to scan, instead of configuring the base package.&lt;/p&gt;\n\n&lt;p&gt;It was like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ComponentScan(basePackages = {&quot;br.com.company.project.repository&quot;, &quot;br.com.company.project.service&quot;})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;But the correct form is one of these:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ComponentScan(basePackages = {&quot;br.com.company.project.repository&quot;, &quot;br.com.company.project.service&quot;, &quot;br.com.company.project.controller&quot;})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ComponentScan(basePackages = {&quot;br.com.company.project&quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I decided to share my solution, because although the correct answer is very comprehensive, it doesn&apos;t cover this (idiotic) mistake :)&lt;/p&gt;\n    ","\n&lt;p&gt;It can also be a bug in Mojarra 2.3 &lt;a href=&quot;https://github.com/eclipse-ee4j/mojarra/issues/4734&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/eclipse-ee4j/mojarra/issues/4734&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In my case, I commited a spell mistake in @Named(&quot;beanName&quot;), it was suppose to be &quot;beanName&quot;, but I wrote &quot;beanNam&quot;, for example.&lt;/p&gt;\n    ","\n&lt;p&gt;I am using wildfly 10 for javaee container . I had experienced &quot;Target Unreachable, &apos;entity&apos; returned null&quot; issue. Thanks for suggestions by BalusC but the my issue out of the solutions explained. \nAccidentally using &quot;import com.sun.istack.logging.Logger;&quot; instead of &quot;import org.jboss.logging.Logger;&quot; caused CDI implemented JSF EL.\nHope it helps to improve solution . &lt;/p&gt;\n    ","\n&lt;p&gt;I had the same problem. The solution turned out to be much simpler. It appears that a datatable wants the method in the form of a getter, ie getSomeMethod(), not just someMethod(). In my case in the  datatable I was calling findResults. I changed the method in my backing bean to getFindResults() and it worked. &lt;/p&gt;\n\n&lt;p&gt;A commandButton worked find without the get which served to make it only more confusing.&lt;/p&gt;\n    ","\n&lt;p&gt;As for #2, in my case it magically came to life after replacing &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;tag with &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h:body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After having done several (simpler, to be honest) JSF projects, I couldn&apos;t remember of doing anything different setting it up now, and I got this kind of error for the first time. I was making a very basic login page (username, password, user Bean...) and set up everything like usual. The only difference I spotted is tags aforementioned. Maybe someone finds this useful.&lt;/p&gt;\n    ","\n&lt;p&gt;The issue in my case was I included a constructor taking parameters but not an empty constructor with the Inject annotation, like so. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;@Inject &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;VisitorBean&lt;/span&gt;()&lt;/span&gt; {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I just tested it without any constructor and this appears to work also.&lt;/p&gt;\n    ","\n&lt;p&gt;For 1. topic (&lt;strong&gt;Target Unreachable, identifier &apos;bean&apos; resolved to null&lt;/strong&gt;);&lt;/p&gt;\n\n&lt;p&gt;I checked valuable answers the @BalusC and the other sharers but I exceed the this problem like this on my scenario.\nAfter the creating a new xhtml with different name and creating bean class with different name then I wrote (not copy-paste) the codes step by step to the new bean class and new xhtml file.&lt;/p&gt;\n    ","\n&lt;p&gt;When I remove AnnotationConfigWebApplicationContext context param from web.xml file This is work &lt;/p&gt;\n\n&lt;p&gt;If you have got like param which as shown below you must remove it from web.xml file&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;contextClass&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First at all, I work with: Eclipse, Weblogic, CDI, JSF, PrimeFaces. If you too, maybe my solution could help you.&lt;/p&gt;\n&lt;p&gt;In my case, the reason of the error was a little setting on &quot;Eclipse&quot;.&lt;/p&gt;\n&lt;p&gt;Check this:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Right click over your Weblogic server on &quot;Servers&quot; tab&lt;/li&gt;\n&lt;li&gt;Select &quot;Properties&quot;&lt;/li&gt;\n&lt;li&gt;In the new little window of Properties, expand &quot;Weblogic&quot; menu&lt;/li&gt;\n&lt;li&gt;Inside &quot;Weblogic&quot; menu, clic over &quot;Publishing&quot; option&lt;/li&gt;\n&lt;li&gt;Now, on the right side, be sure that option &quot;Publish as an exploded archive&quot; is checked.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In my case, I had checked &quot;Publish as a virtual application&quot;, so, changing that I solved &quot;Target Unreachable&quot; error.&lt;/p&gt;\n    ","\n&lt;p&gt;Working with JSF in the old style You have to define the managed bean in the \n&lt;strong&gt;beans-config.xml&lt;/strong&gt; file (located in the WEB-INF folder) and make a reference to it in the &lt;strong&gt;web.xml&lt;/strong&gt; file, this way:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;beans-config.xml&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;the name by wich your backing bean will be referenced&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;your backing bean fully qualified class name&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-class&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-scope&lt;/span&gt;&amp;gt;&lt;/span&gt;session&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean-scope&lt;/span&gt;&amp;gt;&lt;/span&gt;    \n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;managed-bean&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(I&apos;ve tried using other scopes, but ...)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;web.xml&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.faces.CONFIG_FILES&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-name&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;/WEB-INF/beans-config.xml&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;param-value&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context-param&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another clue:\nI was using JSF, and added mvn dependencies:\n        \n            com.sun.faces\n            jsf-api\n            2.2.11\n        &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.sun.faces&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jsf-impl&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.2.11&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, I tried to change to Primefaces, and add primefaces dependency:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.primefaces&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;primefaces&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I changed my xhtml from h: to p:, adding xmlns:p=&quot;http://primefaces.org/ui to the template.\nOnly with JSF the proyect was running ok, and the managedbean was reached ok. When I add Primefaces I was getting the unreachable object (javax.el.propertynotfoundexception). The problem was that JSF was generating the ManagedBean, not Primefaces, and I was asking primefaces for the object. I had to delete jsf-impl from my .pom, clean and install the proyect.\nAll went ok from this point.\nHope that helps.&lt;/p&gt;\n    ","\n&lt;p&gt;EL interprets ${bean.propretyName} as described - the propertyName becomes getPropertyName() on the assumption you are using explicit or implicit methods of generating getter/setters&lt;/p&gt;\n\n&lt;p&gt;You can override this behavior by explicitly identifying the name as a function: ${bean.methodName()} This calls the function method Name() directly without modification.  &lt;/p&gt;\n\n&lt;p&gt;It isn&apos;t always true that your  accessors are named &quot;get...&quot;. &lt;/p&gt;\n    ","\n&lt;p&gt;In my case &quot;el-ri-1.0.jar&quot; was missing.&lt;/p&gt;\n    "]},"page":"25","randomQuestions":[{"title":"Arrays, linked lists and other data structures in cmd.exe (batch) script","slug":"arrays-linked-lists-and-other-data-structures-in-cmd.exe-(batch)-script-1657387558484"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233"},{"title":"Prefer composition over inheritance?","slug":"prefer-composition-over-inheritance-1657387399409"},{"title":"Why does a RegExp with global flag give wrong results?","slug":"why-does-a-regexp-with-global-flag-give-wrong-results-1657387788550"},{"title":"What is the difference between client-side and server-side programming?","slug":"what-is-the-difference-between-client-side-and-server-side-programming-1657384372926"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"},{"title":"Self-references in object literals / initializers","slug":"self-references-in-object-literals-initializers-1657384835356"},{"title":"Merge/flatten an array of arrays","slug":"mergeflatten-an-array-of-arrays-1657387827427"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"},{"title":"Why is 24.0000 not equal to 24.0000 in MATLAB?","slug":"why-is-24.0000-not-equal-to-24.0000-in-matlab-1657388376753"},{"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762"},{"title":"How to remove all duplicates from an array of objects?","slug":"how-to-remove-all-duplicates-from-an-array-of-objects-1657388256190"},{"title":"How do I use extern to share variables between source files?","slug":"how-do-i-use-extern-to-share-variables-between-source-files-1657387453605"},{"title":"How to create a generic array in Java?","slug":"how-to-create-a-generic-array-in-java-1657387532298"},{"title":"Transitions on the CSS display property","slug":"transitions-on-the-css-display-property-1657387761601"}]},"__N_SSG":true}