{"pageProps":{"data":{"count":610,"rows":[{"id":360,"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804","postType":"QUESTION","createdAt":"2022-07-09T17:29:03.000Z","updatedAt":"2022-07-09T17:29:03.000Z","tags":[]},{"id":359,"title":"What is the difference between __str__ and __repr__?","slug":"what-is-the-difference-between-__str__-and-__repr__-1657387738760","postType":"QUESTION","createdAt":"2022-07-09T17:28:58.000Z","updatedAt":"2022-07-09T17:28:58.000Z","tags":[{"id":2003,"name":"magic-methods","slug":"magic-methods","createdAt":"2022-07-09T17:28:58.000Z","updatedAt":"2022-07-09T17:28:58.000Z","Questions_Tags":{"questionId":359,"tagId":2003}},{"id":2004,"name":"repr","slug":"repr","createdAt":"2022-07-09T17:28:58.000Z","updatedAt":"2022-07-09T17:28:58.000Z","Questions_Tags":{"questionId":359,"tagId":2004}}]},{"id":358,"title":"Strange result when removing item from a list while iterating over it [duplicate]","slug":"strange-result-when-removing-item-from-a-list-while-iterating-over-it-duplicate-1657387735759","postType":"QUESTION","createdAt":"2022-07-09T17:28:55.000Z","updatedAt":"2022-07-09T17:28:55.000Z","tags":[]},{"id":357,"title":"Correctly allocating multi-dimensional arrays","slug":"correctly-allocating-multi-dimensional-arrays-1657387733756","postType":"QUESTION","createdAt":"2022-07-09T17:28:53.000Z","updatedAt":"2022-07-09T17:28:53.000Z","tags":[{"id":1996,"name":"dynamic-arrays","slug":"dynamic-arrays","createdAt":"2022-07-09T17:28:53.000Z","updatedAt":"2022-07-09T17:28:53.000Z","Questions_Tags":{"questionId":357,"tagId":1996}},{"id":1997,"name":"dynamic-allocation","slug":"dynamic-allocation","createdAt":"2022-07-09T17:28:53.000Z","updatedAt":"2022-07-09T17:28:53.000Z","Questions_Tags":{"questionId":357,"tagId":1997}}]},{"id":356,"title":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","slug":"how-does-the-windows-command-interpreter-(cmd.exe)-parse-scripts-1657387731560","postType":"QUESTION","createdAt":"2022-07-09T17:28:51.000Z","updatedAt":"2022-07-09T17:28:51.000Z","tags":[{"id":1993,"name":"variable-expansion","slug":"variable-expansion","createdAt":"2022-07-09T17:28:51.000Z","updatedAt":"2022-07-09T17:28:51.000Z","Questions_Tags":{"questionId":356,"tagId":1993}}]}]},"answers":{"356":["\n&lt;p&gt;We performed experiments to investigate the grammar of batch scripts. We also investigated differences between batch and command line mode.&lt;/p&gt;\n&lt;h2&gt;Batch Line Parser:&lt;/h2&gt;\n&lt;p&gt;Here is a brief overview of phases in the batch file line parser:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 0) Read Line:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 1) Percent Expansion:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 2) Process special characters, tokenize, and build a cached command block:&lt;/strong&gt; This is a complex process that is affected by things such as quotes, special characters, token delimiters, and caret escapes.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 3) Echo the parsed command(s)&lt;/strong&gt; Only if the command block did not begin with &lt;code&gt;@&lt;/code&gt;, and ECHO was ON at the start of the preceding step.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 4) FOR &lt;code&gt;%X&lt;/code&gt; variable expansion:&lt;/strong&gt; Only if a FOR command is active and the commands after DO are being processed.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5) Delayed Expansion:&lt;/strong&gt; Only if delayed expansion is enabled&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5.3) Pipe processing:&lt;/strong&gt; Only if commands are on either side of a pipe&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5.5) Execute Redirection:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 6) CALL processing/Caret doubling:&lt;/strong&gt; Only if the command token is CALL&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 7) Execute:&lt;/strong&gt; The command is executed\n&lt;br&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Here are details for each phase:&lt;/p&gt;\n&lt;p&gt;Note that the phases described below are only a model of how the batch parser works. The actual cmd.exe internals may not reflect these phases. But this model is effective at predicting behavior of batch scripts.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 0) Read Line:&lt;/strong&gt; Read line of input through first &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;When reading a line to be parsed as a command, &lt;code&gt;&amp;lt;Ctrl-Z&amp;gt;&lt;/code&gt; (0x1A) is read as &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; (LineFeed 0x0A)&lt;/li&gt;\n&lt;li&gt;When GOTO or CALL reads lines while scanning for a :label, &lt;code&gt;&amp;lt;Ctrl-Z&amp;gt;&lt;/code&gt;, is treated as itself - it is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; converted to &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 1) Percent Expansion:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;A double &lt;code&gt;%%&lt;/code&gt; is replaced by a single &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Expansion of arguments (&lt;code&gt;%*&lt;/code&gt;, &lt;code&gt;%1&lt;/code&gt;, &lt;code&gt;%2&lt;/code&gt;, etc.)&lt;/li&gt;\n&lt;li&gt;Expansion of &lt;code&gt;%var%&lt;/code&gt;, if var does not exist replace it with nothing&lt;/li&gt;\n&lt;li&gt;Line is truncated at first &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; not within &lt;code&gt;%var%&lt;/code&gt; expansion&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;For a complete explanation read the first half of this from dbenham &lt;a href=&quot;https://stackoverflow.com/a/7970912/1012053&quot;&gt;Same thread: Percent Phase&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 2) Process special characters, tokenize, and build a cached command block:&lt;/strong&gt; This is a complex process that is affected by things such as quotes, special characters, token delimiters, and caret escapes. What follows is an approximation of this process.&lt;/p&gt;\n&lt;p&gt;There are concepts that are important throughout this phase.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;A token is simply a string of characters that is treated as a unit.&lt;/li&gt;\n&lt;li&gt;Tokens are separated by token delimiters. The standard token delimiters are &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; &lt;code&gt;&amp;lt;0x0B&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;0x0C&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;0xFF&amp;gt;&lt;/code&gt;&lt;br&gt;\nConsecutive token delimiters are treated as one - there are no empty tokens between token delimiters&lt;/li&gt;\n&lt;li&gt;There are no token delimiters within a quoted string. The entire quoted string is always treated as part of a single token. A single token may consist of a combination of quoted strings and unquoted characters.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The following characters may have special meaning in this phase, depending on context: &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;@&lt;/code&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; &lt;code&gt;&amp;lt;0x0B&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;0x0C&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;0xFF&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Look at each character from left to right:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; then remove it, as if it were never there (except for weird &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?t=9429&quot; rel=&quot;noreferrer&quot;&gt;redirection behavior&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;If a caret (&lt;code&gt;^&lt;/code&gt;), the next character is escaped, and the escaping caret is removed. Escaped characters lose all special meaning (except for &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;If a quote (&lt;code&gt;&quot;&lt;/code&gt;), toggle the quote flag. If the quote flag is active, then only &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; are special. All other characters lose their special meaning until the next quote toggles the quote flag off. It is not possible to escape the closing quote. All quoted characters are always within the same token.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; always turns off the quote flag. Other behaviors vary depending on context, but quotes never alter the behavior of &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;.\n&lt;ul&gt;\n&lt;li&gt;Escaped &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; is stripped&lt;/li&gt;\n&lt;li&gt;The next character is escaped. If at the end of line buffer, then the next line is read and processed by phases 1 and 1.5 and appended to the current one before escaping the next character. If the next character is &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;, then it is treated as a literal, meaning this process is not recursive.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Unescaped &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; not within parentheses\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; is stripped and parsing of the current line is terminated.&lt;/li&gt;\n&lt;li&gt;Any remaining characters in the line buffer are simply ignored.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Unescaped &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; within a FOR IN parenthesized block\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; is converted into a &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;If at the end of the line buffer, then the next line is read and appended to the current one.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Unescaped &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; within a parenthesized command block\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; is converted into &lt;code&gt;&amp;lt;LF&amp;gt;&amp;lt;space&amp;gt;&lt;/code&gt;, and the &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; is treated as part of the next line of the command block.&lt;/li&gt;\n&lt;li&gt;If at the end of line buffer, then the next line is read and appended to the space.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If one of the special characters &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;, split the line at this point in order to handle pipes, command concatenation, and redirection.\n&lt;ul&gt;\n&lt;li&gt;In the case of a pipe (&lt;code&gt;|&lt;/code&gt;), each side is a separate command (or command block) that gets special handling in phase 5.3&lt;/li&gt;\n&lt;li&gt;In the case of &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, or &lt;code&gt;||&lt;/code&gt; command concatenation, each side of the concatenation is treated as a separate command.&lt;/li&gt;\n&lt;li&gt;In the case of &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; redirection, the redirection clause is parsed, temporarily removed, and then appended to the end of the current command. A redirection clause consists of an optional file handle digit, the redirection operator, and the redirection destination token.\n&lt;ul&gt;\n&lt;li&gt;If the token that precedes the redirection operator is a single unescaped digit, then the digit specifies the file handle to be redirected. If the handle token is not found, then output redirection defaults to 1 (stdout), and input redirection defaults to 0 (stdin).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If the very first token for this command (prior to moving redirection to the end) begins with &lt;code&gt;@&lt;/code&gt;, then the &lt;code&gt;@&lt;/code&gt; has special meaning. (&lt;code&gt;@&lt;/code&gt; is not special in any other context)\n&lt;ul&gt;\n&lt;li&gt;The special &lt;code&gt;@&lt;/code&gt; is removed.&lt;/li&gt;\n&lt;li&gt;If ECHO is ON, then this command, along with any following concatenated commands on this line, are excluded from the phase 3 echo. If the &lt;code&gt;@&lt;/code&gt; is before an opening &lt;code&gt;(&lt;/code&gt;, then the entire parenthesized block is excluded from the phase 3 echo.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Process parenthesis (provides for compound statements across multiple lines):\n&lt;ul&gt;\n&lt;li&gt;If the parser is not looking for a command token, then &lt;code&gt;(&lt;/code&gt; is not special.&lt;/li&gt;\n&lt;li&gt;If the parser is looking for a command token and finds &lt;code&gt;(&lt;/code&gt;, then start a new compound statement and increment the parenthesis counter&lt;/li&gt;\n&lt;li&gt;If the parenthesis counter is &amp;gt; 0 then &lt;code&gt;)&lt;/code&gt; terminates the compound statement and decrements the parenthesis counter.&lt;/li&gt;\n&lt;li&gt;If the line end is reached and the parenthesis counter is &amp;gt; 0 then the next line will be appended to the compound statement (starts again with phase 0)&lt;/li&gt;\n&lt;li&gt;If the parenthesis counter is 0 and the parser is looking for a command, then &lt;code&gt;)&lt;/code&gt; functions similar to a &lt;code&gt;REM&lt;/code&gt; statement as long as it is immediately followed by a token delimiter, special character, newline, or end-of-file\n&lt;ul&gt;\n&lt;li&gt;All special characters lose their meaning except &lt;code&gt;^&lt;/code&gt; (line concatenation is possible)&lt;/li&gt;\n&lt;li&gt;Once the end of the logical line is reached, the entire &quot;command&quot; is discarded.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Each command is parsed into a series of tokens. The first token is always treated as a command token (after special &lt;code&gt;@&lt;/code&gt; have been stripped and redirection moved to the end).\n&lt;ul&gt;\n&lt;li&gt;Leading token delimiters prior to the command token are stripped&lt;/li&gt;\n&lt;li&gt;When parsing the command token, &lt;code&gt;(&lt;/code&gt; functions as a command token delimiter, in addition to the standard token delimiters&lt;/li&gt;\n&lt;li&gt;The handling of subsequent tokens depends on the command.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Most commands simply concatenate all arguments after the command token into a single argument token. All argument token delimiters are preserved. Argument options are typically not parsed until phase 7.&lt;/li&gt;\n&lt;li&gt;Three commands get special handling - IF, FOR, and REM\n&lt;ul&gt;\n&lt;li&gt;IF is split into two or three distinct parts that are processed independently. A syntax error in the IF construction will result in a fatal syntax error.\n&lt;ul&gt;\n&lt;li&gt;The comparison operation is the actual command that flows all the way through to phase 7\n&lt;ul&gt;\n&lt;li&gt;All IF options are fully parsed in phase 2.&lt;/li&gt;\n&lt;li&gt;Consecutive token delimiters collapse into a single space.&lt;/li&gt;\n&lt;li&gt;Depending on the comparison operator, there will be one or two value tokens that are identified.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The True command block is the set of commands after the condition, and is parsed like any other command block. If ELSE is to be used, then the True block must be parenthesized.&lt;/li&gt;\n&lt;li&gt;The optional False command block is the set of commands after ELSE. Again, this command block is parsed normally.&lt;/li&gt;\n&lt;li&gt;The True and False command blocks do not automatically flow into the subsequent phases. Their subsequent processing is controled by phase 7.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;FOR is split in two after the DO. A syntax error in the FOR construction will result in a fatal syntax error.\n&lt;ul&gt;\n&lt;li&gt;The portion through DO is the actual FOR iteration command that flows all the way through phase 7\n&lt;ul&gt;\n&lt;li&gt;All FOR options are fully parsed in phase 2.&lt;/li&gt;\n&lt;li&gt;The IN parenthesized clause treats &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;. After the IN clause is parsed, all tokens are concatenated together to form a single token.&lt;/li&gt;\n&lt;li&gt;Consecutive unescaped/unquoted token delimiters collapse into a single space throughout the FOR command through DO.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The portion after DO is a command block that is parsed normally. Subsequent processing of the DO command block is controled by the iteration in phase 7.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;REM detected in phase 2 is treated dramatically different than all other commands.\n&lt;ul&gt;\n&lt;li&gt;Only one argument token is parsed - the parser ignores characters after the first argument token.&lt;/li&gt;\n&lt;li&gt;The REM command may appear in phase 3 output, but the command is never executed, and the original argument text is echoed - escaping carets are not removed, except...\n&lt;ul&gt;\n&lt;li&gt;If there is only one argument token that ends with an unescaped &lt;code&gt;^&lt;/code&gt; that ends the line, then the argument token is thrown away, and the subsequent line is parsed and appended to the REM. This repeats until there is more than one token, or the last character is not &lt;code&gt;^&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If the command token begins with &lt;code&gt;:&lt;/code&gt;, and this is the first round of phase 2 (not a restart due to CALL in phase 6) then\n&lt;ul&gt;\n&lt;li&gt;The token is normally treated as an &lt;em&gt;Unexecuted Label&lt;/em&gt;.\n&lt;ul&gt;\n&lt;li&gt;The remainder of the line is parsed, however &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; no longer have special meaning. The entire remainder of the line is considered to be part of the label &quot;command&quot;.&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;^&lt;/code&gt; continues to be special, meaning that line continuation can be used to append the subsequent line to the label.&lt;/li&gt;\n&lt;li&gt;An &lt;em&gt;Unexecuted Label&lt;/em&gt; within a parenthesized block will result in a fatal syntax error unless it is immediately followed by a command or &lt;em&gt;Executed Label&lt;/em&gt; on the next line.\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;(&lt;/code&gt; no longer has special meaning for the first command that follows the &lt;em&gt;Unexecuted Label&lt;/em&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The command is aborted after label parsing is complete. Subsequent phases do not take place for the label&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;There are three exceptions that can cause a label found in phase 2 to be treated as an &lt;em&gt;Executed Label&lt;/em&gt; that continues parsing through phase 7.\n&lt;ul&gt;\n&lt;li&gt;There is redirection that precedes the label token, and there is a &lt;code&gt;|&lt;/code&gt; pipe or &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, or &lt;code&gt;||&lt;/code&gt; command concatenation on the line.&lt;/li&gt;\n&lt;li&gt;There is redirection that precedes the label token, and the command is within a parenthesized block.&lt;/li&gt;\n&lt;li&gt;The label token is the very first command on a line within a parenthesized block, and the line above ended with an &lt;em&gt;Unexecuted Label&lt;/em&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The following occurs when an &lt;em&gt;Executed Label&lt;/em&gt; is discovered in phase 2\n&lt;ul&gt;\n&lt;li&gt;The label, its arguments, and its redirection are all excluded from any echo output in phase 3&lt;/li&gt;\n&lt;li&gt;Any subsequent concatenated commands on the line are fully parsed and executed.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;For more information about &lt;em&gt;Executed Labels&lt;/em&gt; vs. &lt;em&gt;Unexecuted Labels&lt;/em&gt;, see &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?f=3&amp;amp;t=3803&amp;amp;p=55405#p55405&quot; rel=&quot;noreferrer&quot;&gt;https://www.dostips.com/forum/viewtopic.php?f=3&amp;amp;t=3803&amp;amp;p=55405#p55405&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 3) Echo the parsed command(s)&lt;/strong&gt; Only if the command block did not begin with &lt;code&gt;@&lt;/code&gt;, and ECHO was ON at the start of the preceding step.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 4) FOR &lt;code&gt;%X&lt;/code&gt; variable expansion:&lt;/strong&gt; Only if a FOR command is active and the commands after DO are being processed.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;At this point, phase 1 of batch processing will have already converted a FOR variable like &lt;code&gt;%%X&lt;/code&gt; into &lt;code&gt;%X&lt;/code&gt;. The command line has different percent expansion rules for phase 1. This is the reason that command lines use &lt;code&gt;%X&lt;/code&gt; but batch files use &lt;code&gt;%%X&lt;/code&gt; for FOR variables.&lt;/li&gt;\n&lt;li&gt;FOR variable names are case sensitive, but &lt;code&gt;~modifiers&lt;/code&gt; are not case sensitive.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;~modifiers&lt;/code&gt; take precedence over variable names. If a character following &lt;code&gt;~&lt;/code&gt; is both a modifier and a valid FOR variable name, and there exists a subsequent character that is an active FOR variable name, then the character is interpreted as a modifier.&lt;/li&gt;\n&lt;li&gt;FOR variable names are global, but only within the context of a DO clause. If a routine is CALLed from within a FOR DO clause, then the FOR variables are not expanded within the CALLed routine. But if the routine has its own FOR command, then &lt;em&gt;&lt;strong&gt;all&lt;/strong&gt;&lt;/em&gt; currently defined FOR variables are accessible to the inner DO commands.&lt;/li&gt;\n&lt;li&gt;FOR variable names can be reused within nested FORs. The inner FOR value takes precedence, but once the INNER FOR closes, then the outer FOR value is restored.&lt;/li&gt;\n&lt;li&gt;If ECHO was ON at the start of this phase, then phase 3) is repeated to show the parsed DO commands after the FOR variables have been expanded.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;---- From this point onward, each command identified in phase 2 is processed separately.&lt;br&gt;\n---- Phases 5 through 7 are completed for one command before moving on to the next.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5) Delayed Expansion:&lt;/strong&gt; Only if delayed expansion is on, the command is not in a &lt;a href=&quot;https://stackoverflow.com/q/8192318/1012053&quot;&gt;parenthesized block on either side of a pipe&lt;/a&gt;, and the command is not a &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?f=3&amp;amp;t=7761&quot; rel=&quot;noreferrer&quot;&gt;&quot;naked&quot; batch script&lt;/a&gt; (script name without parentheses, CALL, command concatenation, or pipe).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Each token for a command is parsed for delayed expansion independently.\n&lt;ul&gt;\n&lt;li&gt;Most commands parse two or more tokens - the command token, the arguments token, and each redirection destination token.&lt;/li&gt;\n&lt;li&gt;The FOR command parses the IN clause token only.&lt;/li&gt;\n&lt;li&gt;The IF command parses the comparison values only - either one or two, depending on the comparison operator.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;For each parsed token, first check if it contains any &lt;code&gt;!&lt;/code&gt;. If not, then the token is not parsed - important for &lt;code&gt;^&lt;/code&gt; characters.\nIf the token does contain &lt;code&gt;!&lt;/code&gt;, then scan each character from left to right:\n&lt;ul&gt;\n&lt;li&gt;If it is a caret (&lt;code&gt;^&lt;/code&gt;) the next character has no special meaning, the caret itself is removed&lt;/li&gt;\n&lt;li&gt;If it is an exclamation mark, search for the next exclamation mark (carets are not observed anymore), expand to the value of the variable.\n&lt;ul&gt;\n&lt;li&gt;Consecutive opening &lt;code&gt;!&lt;/code&gt; are collapsed into a single &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Any remaining unpaired &lt;code&gt;!&lt;/code&gt; is removed&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Expanding vars at this stage is &quot;safe&quot;, because special characters are not detected anymore (even &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;For a more complete explanation, read the 2nd half of this from dbenham\n&lt;a href=&quot;https://stackoverflow.com/a/7970912/1012053&quot;&gt;same thread - Exclamation Point Phase&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5.3) Pipe processing:&lt;/strong&gt; Only if commands are on either side of a pipe&lt;br&gt;\nEach side of the pipe is processed independently and asynchronously.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If command is internal to cmd.exe, or it is a batch file, or if it is a parenthesized command block, then it is executed in a new cmd.exe thread via &lt;code&gt;%comspec% /S /D /c&quot; commandBlock&quot;&lt;/code&gt;, so the command block gets a phase restart, but this time in command line mode.\n&lt;ul&gt;\n&lt;li&gt;If a parenthesized command block, then all &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; with a command before and after are converted to &lt;code&gt;&amp;lt;space&amp;gt;&amp;amp;&lt;/code&gt;. Other &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; are stripped.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;This is the end of processing for the pipe commands.&lt;/li&gt;\n&lt;li&gt;See &lt;a href=&quot;https://stackoverflow.com/q/8192318/1012053&quot;&gt;Why does delayed expansion fail when inside a piped block of code?&lt;/a&gt; for more about pipe parsing and processing&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5.5) Execute Redirection:&lt;/strong&gt; Any redirection that was discovered in phase 2 is now executed.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The results of phases 4 and 5 can impact the redirection that was discovered in phase 2.&lt;/li&gt;\n&lt;li&gt;If the redirection fails, then the remainder of the command is aborted. &lt;a href=&quot;https://stackoverflow.com/q/10354016/1012053&quot;&gt;Note that failed redirection does not set ERRORLEVEL to 1 unless &lt;code&gt;||&lt;/code&gt; is used&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 6) CALL processing/Caret doubling:&lt;/strong&gt; Only if the command token is CALL, or if the text before the first occurring standard token delimiter is CALL. If CALL is parsed from a larger command token, then the unused portion is prepended to the arguments token before proceeding.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Scan the arguments token for an unquoted &lt;code&gt;/?&lt;/code&gt;. If found anywhere within the tokens, then abort phase 6 and proceed to Phase 7, where the HELP for CALL will be printed.&lt;/li&gt;\n&lt;li&gt;Remove the first &lt;code&gt;CALL&lt;/code&gt;, so multiple CALL&apos;s can be stacked&lt;/li&gt;\n&lt;li&gt;Double all carets&lt;/li&gt;\n&lt;li&gt;Restart phases 1, 1.5, and 2, but do not continue to phase 3\n&lt;ul&gt;\n&lt;li&gt;Any doubled carets are reduced back to one caret as long as they are not quoted. But unfortunately, quoted carets remain doubled.&lt;/li&gt;\n&lt;li&gt;Phase 1 changes a bit\n- Expansion errors in step 1.2 or 1.3 abort the CALL, but the error is not fatal - batch processing continues.&lt;/li&gt;\n&lt;li&gt;Phase 2 tasks are altered a bit\n&lt;ul&gt;\n&lt;li&gt;Any newly appearing unquoted, unescaped redirection that was not detected in the first round of phase 2 is detected, but it is removed (including the file name) without actually performing the redirection&lt;/li&gt;\n&lt;li&gt;Any newly appearing unquoted, unescaped caret at the end of the line is removed without performing line continuation&lt;/li&gt;\n&lt;li&gt;The CALL is aborted without error if any of the following are detected\n&lt;ul&gt;\n&lt;li&gt;Newly appearing unquoted, unescaped &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;The resultant command token begins with unquoted, unescaped &lt;code&gt;(&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;The very first token after the removed CALL began with &lt;code&gt;@&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If the resultant command is a seemingly valid IF or FOR, then execution will subsequently fail with an error stating that &lt;code&gt;IF&lt;/code&gt; or &lt;code&gt;FOR&lt;/code&gt; is not recognized as an internal or external command.&lt;/li&gt;\n&lt;li&gt;Of course the CALL is not aborted in this 2nd round of phase 2 if the resultant command token is a label beginning with &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If the resultant command token is CALL, then restart Phase 6 (repeats until no more CALL)&lt;/li&gt;\n&lt;li&gt;If the resultant command token is a batch script or a :label, then execution of the CALL is fully handled by the remainder of Phase 6.\n&lt;ul&gt;\n&lt;li&gt;Push the current batch script file position on the call stack so that execution can resume from the correct position when the CALL is completed.&lt;/li&gt;\n&lt;li&gt;Setup the %0, %1, %2, ...%N and %* argument tokens for the CALL, using all resultant tokens&lt;/li&gt;\n&lt;li&gt;If the command token is a label that begins with &lt;code&gt;:&lt;/code&gt;, then\n&lt;ul&gt;\n&lt;li&gt;Restart Phase 5. This can impact what :label is CALLed. But since the %0 etc. tokens have already been setup, it will not alter the arguments that are passed to the CALLed routine.&lt;/li&gt;\n&lt;li&gt;Execute GOTO label to position the file pointer at the beginning of the subroutine (ignore any other tokens that may follow the :label) See Phase 7 for rules on how GOTO works.\n&lt;ul&gt;\n&lt;li&gt;If the :label token is missing, or the :label is not found, then the call stack is immediately popped to restore the saved file position, and the CALL is aborted.&lt;/li&gt;\n&lt;li&gt;If the :label happens to contain /?, then GOTO help is printed instead of searching for the :label. The file pointer does not move, such that code after the CALL is executed twice, once in the CALL context, and then again after the CALL return. See &lt;a href=&quot;https://stackoverflow.com/q/31987023/1012053&quot;&gt;Why CALL prints the GOTO help message in this script?And why command after that are executed twice?&lt;/a&gt; for more info.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else transfer control to the specified batch script.&lt;/li&gt;\n&lt;li&gt;Execution of the CALLed :label or script continues until either EXIT /B or end-of-file is reached, at which point the CALL stack is popped and execution resumes from the saved file position.&lt;br&gt;\nPhase 7 is not executed for CALLed scripts or :labels.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else the result of phase 6 falls through into phase 7 for execution.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 7) Execute:&lt;/strong&gt; The command is executed&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;7.1 - Execute internal command&lt;/strong&gt; - If the command token is quoted, then skip this step. Otherwise, attempt to parse out an internal command and execute.\n&lt;ul&gt;\n&lt;li&gt;The following tests are made to determine if an unquoted command token represents an internal command:\n&lt;ul&gt;\n&lt;li&gt;If the command token exactly matches an internal command, then execute it.&lt;/li&gt;\n&lt;li&gt;Else break the command token before the first occurrence of &lt;code&gt;+&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;[&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt;&lt;br&gt;\nIf the preceding text is an internal command, then remember that command\n&lt;ul&gt;\n&lt;li&gt;If in command line mode, or if the command is from a parenthesized block, IF true or false command block, FOR DO command block, or involved with command concatenation, then execute the internal command&lt;/li&gt;\n&lt;li&gt;Else (must be a stand-alone command in batch mode) scan the current folder and the PATH for a .COM, .EXE, .BAT, or .CMD file whose base name matches the original command token\n&lt;ul&gt;\n&lt;li&gt;If the first matching file is a .BAT or .CMD, then goto 7.3.exec and execute that script&lt;/li&gt;\n&lt;li&gt;Else (match not found or first match is .EXE or .COM) execute the remembered internal command&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else break the command token before the first occurrence of &lt;code&gt;.&lt;/code&gt; &lt;code&gt;\\&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt;&lt;br&gt;\nIf the preceding text is not an internal command, then goto 7.2&lt;br&gt;\nElse the preceding text may be an internal command. Remember this command.&lt;/li&gt;\n&lt;li&gt;Break the command token before the first occurrence of &lt;code&gt;+&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;[&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt;&lt;br&gt;\nIf the preceding text is a path to an existing file, then goto 7.2&lt;br&gt;\nElse execute the remembered internal command.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If an internal command is parsed from a larger command token, then the unused portion of the command token is included in the argument list&lt;/li&gt;\n&lt;li&gt;Just because a command token is parsed as an internal command does not mean that it will execute successfully. Each internal command has its own rules as to how the arguments and options are parsed, and what syntax is allowed.&lt;/li&gt;\n&lt;li&gt;All internal commands will print help instead of performing their function if &lt;code&gt;/?&lt;/code&gt; is detected. Most recognize &lt;code&gt;/?&lt;/code&gt; if it appears anywhere in the arguments. But a few commands like ECHO and SET only print help if the first argument token begins with &lt;code&gt;/?&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;SET has some interesting semantics:\n&lt;ul&gt;\n&lt;li&gt;If a SET command has a quote before the variable name and extensions are enabled&lt;br&gt;\n&lt;code&gt;set &quot;name=content&quot; ignored&lt;/code&gt; &lt;strong&gt;--&amp;gt;&lt;/strong&gt; value=&lt;code&gt;content&lt;/code&gt;&lt;br&gt;\nthen the text between the first equal sign and the last quote is used as the content (first equal and last quote excluded). Text after the last quote is ignored. If there is no quote after the equal sign, then the rest of the line is used as content.&lt;/li&gt;\n&lt;li&gt;If a SET command does not have a quote before the name&lt;br&gt;\n&lt;code&gt;set name=&quot;content&quot; not ignored&lt;/code&gt; &lt;strong&gt;--&amp;gt;&lt;/strong&gt; value=&lt;code&gt;&quot;content&quot; not ignored&lt;/code&gt;&lt;br&gt;\nthen the entire remainder of the line after the equal is used as content, including any and all quotes that may be present.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;An IF comparison is evaluated, and depending on whether the condition is true or false, the appropriate already parsed dependent command block is processed, starting with phase 5.&lt;/li&gt;\n&lt;li&gt;The IN clause of a FOR command is iterated appropriately.\n&lt;ul&gt;\n&lt;li&gt;If this is a FOR /F that iterates the output of a command block, then:\n&lt;ul&gt;\n&lt;li&gt;The IN clause is executed in a new cmd.exe process via CMD /C.&lt;/li&gt;\n&lt;li&gt;The command block must go through the entire parsing process a second time, but this time in a command line context&lt;/li&gt;\n&lt;li&gt;ECHO will start out ON, and delayed expansion will usually start out disabled (dependent on the registry setting)&lt;/li&gt;\n&lt;li&gt;All environment changes made by the IN clause command block will be lost once the child cmd.exe process terminates&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;For each iteration:\n&lt;ul&gt;\n&lt;li&gt;The FOR variable values are defined&lt;/li&gt;\n&lt;li&gt;The already parsed DO command block is then processed, starting with phase 4.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;GOTO uses the following logic to locate the :label\n&lt;ul&gt;\n&lt;li&gt;Parse the label from the first argument token&lt;/li&gt;\n&lt;li&gt;Scan for the next occurrence of the label\n&lt;ul&gt;\n&lt;li&gt;Start from the current file position&lt;/li&gt;\n&lt;li&gt;If end of file is reached, then loop back to the beginning of file and continue to the original starting point.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The scan stops at the first occurrence of the label that it finds, and the file pointer is set to the line immediately following the label. Execution of the script resumes from that point. Note that a successful true GOTO will immediately abort any parsed block of code, including FOR loops.&lt;/li&gt;\n&lt;li&gt;If the label is not found, or the label token is missing, then the GOTO fails, an error message is printed, and the call stack is popped. This effectively functions as an EXIT /B, except any already parsed commands in the current command block that follow the GOTO are still executed, but in the context of the CALLer (the context that exists after EXIT /B)&lt;/li&gt;\n&lt;li&gt;See &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?t=3803&quot; rel=&quot;noreferrer&quot;&gt;https://www.dostips.com/forum/viewtopic.php?t=3803&lt;/a&gt; for a more precise description of label parsing rules, and &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?t=8988&quot; rel=&quot;noreferrer&quot;&gt;https://www.dostips.com/forum/viewtopic.php?t=8988&lt;/a&gt; for label scanning rules.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;RENAME and COPY both accept wildcards for the source and target paths. But Microsoft does a terrible job documenting how the wildcards work, especially for the target path. A useful set of wildcard rules may be found at &lt;a href=&quot;https://superuser.com/q/475874/109090&quot;&gt;How does the Windows RENAME command interpret wildcards?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;7.2 - Execute volume change&lt;/strong&gt; - Else if the command token does not begin with a quote, is exactly two characters long, and the 2nd character is a colon, then change the volume\n&lt;ul&gt;\n&lt;li&gt;All argument tokens are ignored&lt;/li&gt;\n&lt;li&gt;If the volume specified by the first character cannot be found, then abort with an error&lt;/li&gt;\n&lt;li&gt;A command token of &lt;code&gt;::&lt;/code&gt; will always result in an error unless SUBST is used to define a volume for &lt;code&gt;::&lt;/code&gt;&lt;br&gt;\nIf SUBST is used to define a volume for &lt;code&gt;::&lt;/code&gt;, then the volume will be changed, it will not be treated as a label.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;7.3 - Execute external command&lt;/strong&gt; - Else try to treat the command as an external command.\n&lt;ul&gt;\n&lt;li&gt;If in command line mode and the command is not quoted and does not begin with a volume specification, white-space, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; then break the command token at the first occurrence of &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; and prepend the remainder to the argument token(s).&lt;/li&gt;\n&lt;li&gt;If the 2nd character of the command token is a colon, then verify the volume specified by the 1st character can be found.&lt;br&gt;\nIf the volume cannot be found, then abort with an error.&lt;/li&gt;\n&lt;li&gt;If in batch mode and the command token begins with &lt;code&gt;:&lt;/code&gt;, then goto 7.4&lt;br&gt;\nNote that if the label token begins with &lt;code&gt;::&lt;/code&gt;, then this will not be reached because the preceding step will have aborted with an error unless SUBST is used to define a volume for &lt;code&gt;::&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Identify the external command to execute.\n&lt;ul&gt;\n&lt;li&gt;This is a complex process that may involve the current volume, current directory, PATH variable, PATHEXT variable, and or file associations.&lt;/li&gt;\n&lt;li&gt;If a valid external command cannot be identified, then abort with an error.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;If in command line mode and the command token begins with &lt;code&gt;:&lt;/code&gt;, then goto 7.4&lt;br&gt;\nNote that this is rarely reached because the preceding step will have aborted with an error unless the command token begins with &lt;code&gt;::&lt;/code&gt;, and SUBST is used to define a volume for &lt;code&gt;::&lt;/code&gt;, and the entire command token is a valid path to an external command.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;7.3.exec&lt;/strong&gt; - Execute the external command.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;7.4 - Ignore a label&lt;/strong&gt; - Ignore the command and all its arguments if the command token begins with &lt;code&gt;:&lt;/code&gt;.&lt;br&gt;\nRules in 7.2 and 7.3 may prevent a label from reaching this point.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Command Line Parser:&lt;/h2&gt;\n&lt;p&gt;Works like the BatchLine-Parser, except:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 1) Percent Expansion:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;No &lt;code&gt;%*&lt;/code&gt;, &lt;code&gt;%1&lt;/code&gt; etc. argument expansion&lt;/li&gt;\n&lt;li&gt;If var is undefined, then &lt;code&gt;%var%&lt;/code&gt; is left unchanged.&lt;/li&gt;\n&lt;li&gt;No special handling of &lt;code&gt;%%&lt;/code&gt;. If var=content, then &lt;code&gt;%%var%%&lt;/code&gt; expands to &lt;code&gt;%content%&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 3) Echo the parsed command(s)&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;This is not performed after phase 2. It is only performed after phase 4 for the FOR DO command block.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5) Delayed Expansion:&lt;/strong&gt; only if DelayedExpansion is enabled&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If var is undefined, then &lt;code&gt;!var!&lt;/code&gt; is left unchanged.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Phase 7) Execute Command&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Attempts to CALL or GOTO a :label result in an error.&lt;/li&gt;\n&lt;li&gt;As already documented in phase 7, an executed label may result in an error under different scenarios.\n&lt;ul&gt;\n&lt;li&gt;Batch executed labels can only cause an error if they begin with &lt;code&gt;::&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Command line executed labels almost always result in an error&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;Parsing of integer values&lt;/h2&gt;\n&lt;p&gt;There are many different contexts where cmd.exe parses integer values from strings, and the rules are inconsistent:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;SET /A&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;IF&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;%var:~n,m%&lt;/code&gt; (variable substring expansion)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FOR /F &quot;TOKENS=n&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FOR /F &quot;SKIP=n&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;FOR /L %%A in (n1 n2 n3)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;EXIT [/B] n&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Details for these rules may be found at &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?t=3758&quot; rel=&quot;noreferrer&quot;&gt;Rules for how CMD.EXE parses numbers&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;For anyone wishing to improve the cmd.exe parsing rules, there is a &lt;a href=&quot;https://www.dostips.com/forum/viewtopic.php?f=3&amp;amp;t=8355&quot; rel=&quot;noreferrer&quot;&gt;discussion topic on the DosTips forum&lt;/a&gt; where issues can be reported and suggestions made.&lt;/p&gt;\n&lt;p&gt;Hope it helps&lt;br&gt;\nJan Erik (jeb) - Original author and discoverer of phases&lt;br&gt;\nDave Benham (dbenham) - Much additional content and editing&lt;/p&gt;\n    ","\n&lt;p&gt;When invoking a command from a command window, tokenization of the command line arguments is not done by &lt;code&gt;cmd.exe&lt;/code&gt; (a.k.a. &quot;the shell&quot;).  Most often the tokenization is done by the newly formed processes&apos; C/C++ runtime, but this is not necessarily so -- for example, if the new process was not written in C/C++, or if the new process chooses to ignore &lt;code&gt;argv&lt;/code&gt; and process the raw commandline for itself (e.g. with &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms683156.aspx&quot; rel=&quot;noreferrer&quot;&gt;GetCommandLine()&lt;/a&gt;).  At the OS level, Windows passes command lines untokenized as a single string to new processes.  This is in contrast to most *nix shells, where the shell tokenizes arguments in a consistent, predictable way before passing them to the newly formed process.  All this means that you may experience wildly divergent argument tokenization behavior across different programs on Windows, as individual programs often take argument tokenization into their own hands.&lt;/p&gt;\n\n&lt;p&gt;If it sounds like anarchy, it kind of is.  However, since a large number of Windows programs &lt;em&gt;do&lt;/em&gt; utilize the Microsoft C/C++ runtime&apos;s &lt;code&gt;argv&lt;/code&gt;, it may be generally useful to understand &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/a1y7w461.aspx&quot; rel=&quot;noreferrer&quot;&gt;how the MSVCRT tokenizes&lt;/a&gt; arguments.  Here is an excerpt:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Arguments are delimited by white space, which is either a space or a tab.&lt;/li&gt;\n&lt;li&gt;A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument. Note that the caret (^) is not recognized as an escape character or delimiter.&lt;/li&gt;\n&lt;li&gt;A double quotation mark preceded by a backslash, \\&quot;, is interpreted as a literal double quotation mark (&quot;).&lt;/li&gt;\n&lt;li&gt;Backslashes are interpreted literally, unless they immediately precede a double quotation mark.&lt;/li&gt;\n&lt;li&gt;If an even number of backslashes is followed by a double quotation mark, then one backslash () is placed in the argv array for every pair of backslashes (\\), and the double quotation mark (&quot;) is interpreted as a string delimiter.&lt;/li&gt;\n&lt;li&gt;If an odd number of backslashes is followed by a double quotation mark, then one backslash () is placed in the argv array for every pair of backslashes (\\) and the double quotation mark is interpreted as an escape sequence by the remaining backslash, causing a literal double quotation mark (&quot;) to be placed in argv.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The Microsoft &quot;batch language&quot; (&lt;code&gt;.bat&lt;/code&gt;) is no exception to this anarchic environment, and it has developed its own unique rules for tokenization and escaping. It also looks like cmd.exe&apos;s command prompt does do some preprocessing of the command line argument (mostly for variable substitution and escaping) before passing the argument off to the newly executing process.  You can read more about the low-level details of the batch language and cmd escaping in the excellent answers by jeb and dbenham on this page.  &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Let&apos;s build a simple command line utility in C and see what it says about your test cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; argc; i++) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;argv[%d][%s]\\n&quot;&lt;/span&gt;, i, argv[i]);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Notes: argv[0] is always the name of the executable, and is omitted below for brevity.  Tested on Windows XP SP3. Compiled with Visual Studio 2005.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt; test.exe &quot;a &quot;&quot;b&quot;&quot; c&quot;\nargv[1][a &quot;b&quot; c]\n\n&amp;gt; test.exe &quot;&quot;&quot;a b c&quot;&quot;&quot;\nargv[1][&quot;a b c&quot;]\n\n&amp;gt; test.exe &quot;a&quot;&quot; b c\nargv[1][a&quot; b c]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a few of my own tests:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt; test.exe a &quot;b&quot; c\nargv[1][a]\nargv[2][b]\nargv[3][c]\n\n&amp;gt; test.exe a &quot;b c&quot; &quot;d e\nargv[1][a]\nargv[2][b c]\nargv[3][d e]\n\n&amp;gt; test.exe a \\&quot;b\\&quot; c\nargv[1][a]\nargv[2][&quot;b&quot;]\nargv[3][c]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Percent Expansion Rules&lt;/h1&gt;\n&lt;p&gt;Here is an expanded explanation of Phase 1 in &lt;a href=&quot;https://stackoverflow.com/a/4095133/1012053&quot;&gt;jeb&apos;s answer&lt;/a&gt; (valid for both batch mode and command line mode).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 1) Percent Expansion&lt;/strong&gt;\nStarting from left, scan each character for &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;. If found then&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;1.05 (truncate line at &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;If the character is &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;Drop (ignore) the remainder of the line from the &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt; onward&lt;/li&gt;\n&lt;li&gt;Goto Phase 2.0&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else the character must be &lt;code&gt;%&lt;/code&gt;, so proceed to 1.1&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;1.1 (escape &lt;code&gt;%&lt;/code&gt;)&lt;/strong&gt; &lt;em&gt;skipped if command line mode&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;If batch mode and followed by another &lt;code&gt;%&lt;/code&gt; then&lt;br&gt;\nReplace &lt;code&gt;%%&lt;/code&gt; with single &lt;code&gt;%&lt;/code&gt; and continue scan&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;1.2 (expand argument)&lt;/strong&gt; &lt;em&gt;skipped if command line mode&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Else if batch mode then\n&lt;ul&gt;\n&lt;li&gt;If followed by &lt;code&gt;*&lt;/code&gt; and command extensions are enabled then&lt;br&gt;\nReplace &lt;code&gt;%*&lt;/code&gt; with the text of all command line arguments (Replace with nothing if there are no arguments) and continue scan.&lt;/li&gt;\n&lt;li&gt;Else if followed by &lt;code&gt;&amp;lt;digit&amp;gt;&lt;/code&gt; then&lt;br&gt;\nReplace &lt;code&gt;%&amp;lt;digit&amp;gt;&lt;/code&gt; with argument value (replace with nothing if undefined) and continue scan.&lt;/li&gt;\n&lt;li&gt;Else if followed by &lt;code&gt;~&lt;/code&gt; and command extensions are enabled then\n&lt;ul&gt;\n&lt;li&gt;If followed by optional valid list of argument modifiers followed by required &lt;code&gt;&amp;lt;digit&amp;gt;&lt;/code&gt; then&lt;br&gt;\nReplace &lt;code&gt;%~[modifiers]&amp;lt;digit&amp;gt;&lt;/code&gt; with modified argument value (replace with nothing if not defined or if specified $PATH: modifier is not defined) and continue scan.&lt;br&gt;\n&lt;em&gt;Note: modifiers are case insensitive and can appear multiple times in any order, except $PATH: modifier can only appear once and must be the last modifier before the &lt;code&gt;&amp;lt;digit&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Else invalid modified argument syntax raises &lt;em&gt;&lt;strong&gt;fatal error: All parsed commands are aborted, and batch processing aborts if in batch mode!&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;1.3 (expand variable)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Else if command extensions are disabled then&lt;br&gt;\nLook at next string of characters, breaking before &lt;code&gt;%&lt;/code&gt; or end of buffer, and call them VAR (may be an empty list)\n&lt;ul&gt;\n&lt;li&gt;If next character is &lt;code&gt;%&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If VAR is defined then&lt;br&gt;\nReplace &lt;code&gt;%VAR%&lt;/code&gt; with value of VAR and continue scan&lt;/li&gt;\n&lt;li&gt;Else if batch mode then&lt;br&gt;\nRemove &lt;code&gt;%VAR%&lt;/code&gt; and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 1.4&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else goto 1.4&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if command extensions are enabled then&lt;br&gt;\nLook at next string of characters, breaking before &lt;code&gt;%&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; or end of buffer, and call them VAR (may be an empty list). If VAR breaks before &lt;code&gt;:&lt;/code&gt; and the subsequent character is &lt;code&gt;%&lt;/code&gt; then include &lt;code&gt;:&lt;/code&gt; as the last character in VAR and break before &lt;code&gt;%&lt;/code&gt;.\n&lt;ul&gt;\n&lt;li&gt;If next character is &lt;code&gt;%&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If VAR is defined then&lt;br&gt;\nReplace &lt;code&gt;%VAR%&lt;/code&gt; with value of VAR and continue scan&lt;/li&gt;\n&lt;li&gt;Else if batch mode then&lt;br&gt;\nRemove &lt;code&gt;%VAR%&lt;/code&gt; and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 1.4&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if next character is &lt;code&gt;:&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If VAR is undefined then\n&lt;ul&gt;\n&lt;li&gt;If batch mode then&lt;br&gt;\nRemove &lt;code&gt;%VAR:&lt;/code&gt; and continue scan.&lt;/li&gt;\n&lt;li&gt;Else goto 1.4&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if next character is &lt;code&gt;~&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If next string of characters matches pattern of &lt;code&gt;[integer][,[integer]]%&lt;/code&gt; then&lt;br&gt;\nReplace &lt;code&gt;%VAR:~[integer][,[integer]]%&lt;/code&gt; with substring of value of VAR (possibly resulting in empty string) and continue scan.&lt;/li&gt;\n&lt;li&gt;Else goto 1.4&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if followed by &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;*=&lt;/code&gt; then&lt;br&gt;\nInvalid variable search and replace syntax raises &lt;em&gt;&lt;strong&gt;fatal error: All parsed commands are aborted, and batch processing aborts if in batch mode!&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Else if next string of characters matches pattern of &lt;code&gt;[*]search=[replace]%&lt;/code&gt;, where search may include any set of characters except &lt;code&gt;=&lt;/code&gt;, and replace may include any set of characters except &lt;code&gt;%&lt;/code&gt;, then&lt;br&gt;\nReplace &lt;code&gt;%VAR:[*]search=[replace]%&lt;/code&gt; with value of VAR after performing search and replace (possibly resulting in empty string) and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 1.4&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;1.4 (strip %)&lt;/strong&gt;\n&lt;ul&gt;\n&lt;li&gt;Else If batch mode then&lt;br&gt;\nRemove &lt;code&gt;%&lt;/code&gt; and continue scan starting with the next character after the &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Else preserve the leading &lt;code&gt;%&lt;/code&gt; and continue scan starting with the next character after the preserved leading &lt;code&gt;%&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The above helps explain why this batch&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;@echo off\nsetlocal enableDelayedExpansion\nset &quot;1var=varA&quot;\nset &quot;~f1var=varB&quot;\ncall :test &quot;arg1&quot;\nexit /b  \n::\n:test &quot;arg1&quot;\necho %%1var%% = %1var%\necho ^^^!1var^^^! = !1var!\necho --------\necho %%~f1var%% = %~f1var%\necho ^^^!~f1var^^^! = !~f1var!\nexit /b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives these results:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;%1var% = &quot;arg1&quot;var\n!1var! = varA\n--------\n%~f1var% = P:\\arg1var\n!~f1var! = varB\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note 1&lt;/strong&gt;&lt;/em&gt; - Phase 1 occurs prior to the recognition of REM statements. This is very important because it means even a remark can generate a fatal error if it has invalid argument expansion syntax or invalid variable search and replace syntax!&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;@echo off\nrem %~x This generates a fatal argument expansion error\necho this line is never reached\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note 2&lt;/strong&gt;&lt;/em&gt; - Another interesting consequence of the % parsing rules: Variables containing : in the name can be defined, but they cannot be expanded unless command extensions are disabled. There is one exception - a variable name containing a single colon at the end can be expanded while command extensions are enabled. However, you cannot perform substring or search and replace operations on variable names ending with a colon. The batch file below (courtesy of jeb) demonstrates this behavior&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;@echo off\nsetlocal\nset var=content\nset var:=Special\nset var::=double colon\nset var:~0,2=tricky\nset var::~0,2=unfortunate\necho %var%\necho %var:%\necho %var::%\necho %var:~0,2%\necho %var::~0,2%\necho Now with DisableExtensions\nsetlocal DisableExtensions\necho %var%\necho %var:%\necho %var::%\necho %var:~0,2%\necho %var::~0,2%\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note 3&lt;/strong&gt;&lt;/em&gt; - An interesting outcome of the order of the parsing rules that jeb lays out in his post: When performing find and replace with delayed expansion, special characters in both the find and replace terms must be escaped or quoted. But the situation is different for percent expansion - the find term must not be escaped (though it can be quoted). The percent replace string may or may not require escape or quote, depending on your intent.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;@echo off\nsetlocal enableDelayedExpansion\nset &quot;var=this &amp;amp; that&quot;\necho %var:&amp;amp;=and%\necho &quot;%var:&amp;amp;=and%&quot;\necho !var:^&amp;amp;=and!\necho &quot;!var:&amp;amp;=and!&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;#Delayed Expansion Rules\nHere is an expanded, and more accurate explanation of Phase 5 in &lt;a href=&quot;https://stackoverflow.com/a/4095133/1012053&quot;&gt;jeb&apos;s answer&lt;/a&gt; (Valid for both batch mode and command line mode)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Phase 5) Delayed Expansion&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This phase is skipped if any of the following conditions apply:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Delayed expansion is disabled.&lt;/li&gt;\n&lt;li&gt;The command is within a parenthesized block on either side of a pipe.&lt;/li&gt;\n&lt;li&gt;The incoming command token is a &quot;naked&quot; batch script, meaning it is not associated with &lt;code&gt;CALL&lt;/code&gt;, parenthesized block, any form of command concatenation (&lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;), or a pipe &lt;code&gt;|&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The delayed expansion process is applied to tokens independently. A command may have multiple tokens:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The command token. For most commands the command name itself is a token. But a few commands have specialized regions that are considered a TOKEN for Phase 5.\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;for ... in(TOKEN) do&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if defined TOKEN&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if exists TOKEN&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if errorlevel TOKEN&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if cmdextversion TOKEN&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;if TOKEN comparison TOKEN&lt;/code&gt;, where comparison is one of &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;equ&lt;/code&gt;, &lt;code&gt;neq&lt;/code&gt;, &lt;code&gt;lss&lt;/code&gt;, &lt;code&gt;leq&lt;/code&gt;, &lt;code&gt;gtr&lt;/code&gt;, or &lt;code&gt;geq&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;The arguments token&lt;/li&gt;\n&lt;li&gt;The destination token of redirection (one per redirection)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;No change is made to tokens that do not contain &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For each token that does contain at least one &lt;code&gt;!&lt;/code&gt;, scan each character from left to right for &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;!&lt;/code&gt;, and if found, then&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;5.1 (caret escape)&lt;/strong&gt; Needed for &lt;code&gt;!&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt; literals&lt;/li&gt;\n&lt;li&gt;If character is a caret &lt;code&gt;^&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;Remove the &lt;code&gt;^&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Scan the next character and preserve it as a literal&lt;/li&gt;\n&lt;li&gt;Continue the scan&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;5.2 (expand variable)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;If character is &lt;code&gt;!&lt;/code&gt;, then\n&lt;ul&gt;\n&lt;li&gt;If command extensions are disabled then&lt;br&gt;\nLook at next string of characters, breaking before &lt;code&gt;!&lt;/code&gt; or &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;, and call them VAR (may be an empty list)\n&lt;ul&gt;\n&lt;li&gt;If next character is &lt;code&gt;!&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If VAR is defined, then&lt;br&gt;\nReplace &lt;code&gt;!VAR!&lt;/code&gt; with value of VAR and continue scan&lt;/li&gt;\n&lt;li&gt;Else if batch mode then&lt;br&gt;\nRemove &lt;code&gt;!VAR!&lt;/code&gt; and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if command extensions are enabled then&lt;br&gt;\nLook at next string of characters, breaking before &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, or &lt;code&gt;&amp;lt;LF&amp;gt;&lt;/code&gt;, and call them VAR (may be an empty list). If VAR breaks before &lt;code&gt;:&lt;/code&gt; and the subsequent character is &lt;code&gt;!&lt;/code&gt; then include &lt;code&gt;:&lt;/code&gt; as the last character in VAR and break before &lt;code&gt;!&lt;/code&gt;\n&lt;ul&gt;\n&lt;li&gt;If next character is &lt;code&gt;!&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If VAR exists, then&lt;br&gt;\nReplace &lt;code&gt;!VAR!&lt;/code&gt; with value of VAR and continue scan&lt;/li&gt;\n&lt;li&gt;Else if batch mode then&lt;br&gt;\nRemove &lt;code&gt;!VAR!&lt;/code&gt; and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if next character is &lt;code&gt;:&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If VAR is undefined then\n&lt;ul&gt;\n&lt;li&gt;If batch mode then&lt;br&gt;\nRemove &lt;code&gt;!VAR:&lt;/code&gt; and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if next character is &lt;code&gt;~&lt;/code&gt; then\n&lt;ul&gt;\n&lt;li&gt;If next string of characters matches pattern of &lt;code&gt;[integer][,[integer]]!&lt;/code&gt; then Replace &lt;code&gt;!VAR:~[integer][,[integer]]!&lt;/code&gt; with substring of value of VAR (possibly resulting in empty string) and continue scan.&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else if next string of characters matches pattern of &lt;code&gt;[*]search=[replace]!&lt;/code&gt;, where search may include any set of characters except &lt;code&gt;=&lt;/code&gt;, and replace may include any set of characters except &lt;code&gt;!&lt;/code&gt;, then&lt;br&gt;\nReplace &lt;code&gt;!VAR:[*]search=[replace]!&lt;/code&gt; with value of VAR after performing search and replace (possibly resulting in an empty string) and continue scan&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Else goto 5.2.1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;5.2.1\n&lt;ul&gt;\n&lt;li&gt;If batch mode then remove the leading &lt;code&gt;!&lt;/code&gt;&lt;br&gt;\nElse preserve the leading &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Continue the scan starting with the next character after the preserved leading &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;As pointed out, commands are passed the entire argument string in μSoft land, and it is up to them to parse this into separate arguments for their own use. There is no consistencty in this between different programs, and therefore there is no one set of rules to describe this process. You really need to check each corner case for whatever C library your program uses.&lt;/p&gt;\n\n&lt;p&gt;As far as the system &lt;code&gt;.bat&lt;/code&gt; files go, here is that test:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;c&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; args.cmd\n@&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; off\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; cmdcmdline:[%cmdcmdline%]\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; 0:[%0]\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; *:[%*]\n&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; allargs=%*\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; not defined allargs goto :eof\nsetlocal\n@rem Wot about a &lt;span class=&quot;hljs-built_in&quot;&gt;nice&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; loop?\n@rem Then we are &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the land of delayedexpansion, !n!, call, etc.\n@rem Plays havoc with args like %t%, a&lt;span class=&quot;hljs-string&quot;&gt;&quot;b etc. ugh!\nset n=1\n:loop\n    echo %n%:[%1]\n    set /a n+=1\n    shift\n    set param=%1\n    if defined param goto :loop\nendlocal\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we can run some tests. See if you can figure out just what μSoft are trying to do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C&amp;gt;args a b c\ncmdcmdline:[cmd.exe ]\n0:[args]\n*:[a b c]\n1:[a]\n2:[b]\n3:[c]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Fine so far. (I&apos;ll leave out the uninteresting &lt;code&gt;%cmdcmdline%&lt;/code&gt; and &lt;code&gt;%0&lt;/code&gt; from now on.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C&amp;gt;args *.*\n*:[*.*]\n1:[*.*]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No filename expansion.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C&amp;gt;args &quot;a b&quot; c\n*:[&quot;a b&quot; c]\n1:[&quot;a b&quot;]\n2:[c]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No quote stripping, though quotes do prevent argument splitting.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;c&amp;gt;args &quot;&quot;a b&quot; c\n*:[&quot;&quot;a b&quot; c]\n1:[&quot;&quot;a]\n2:[b&quot; c]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Consecutive double quotes causes them to lose any special parsing abilities they may have had. @Beniot&apos;s example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C&amp;gt;args &quot;a &quot;&quot;&quot; b &quot;&quot; c&quot;&quot;&quot;\n*:[&quot;a &quot;&quot;&quot; b &quot;&quot; c&quot;&quot;&quot;]\n1:[&quot;a &quot;&quot;&quot;]\n2:[b]\n3:[&quot;&quot;]\n4:[c&quot;&quot;&quot;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Quiz: How do you pass the value of any environment var as a &lt;em&gt;single&lt;/em&gt; argument (i.e., as &lt;code&gt;%1&lt;/code&gt;) to a bat file?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;c&amp;gt;set t=a &quot;b c\nc&amp;gt;set t\nt=a &quot;b c\nc&amp;gt;args %t%\n1:[a]\n2:[&quot;b c]\nc&amp;gt;args &quot;%t%&quot;\n1:[&quot;a &quot;b]\n2:[c&quot;]\nc&amp;gt;Aaaaaargh!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sane parsing seems forever broken.&lt;/p&gt;\n\n&lt;p&gt;For your entertainment, try adding miscellaneous &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt;, &lt;code&gt;&apos;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; (&amp;amp;c.) characters to these examples.&lt;/p&gt;\n    ","\n&lt;p&gt;You have some great answers above already, but to answer one part of your question:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;set a =b, echo %a %b% c%  bb c%\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What is happening there is that because you have a space before the =, a variable is created called &lt;code&gt;%a&amp;lt;space&amp;gt;%&lt;/code&gt;\nso when you &lt;code&gt;echo %a %&lt;/code&gt; that is evaluated correctly as &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The remaining part &lt;code&gt;b% c%&lt;/code&gt; is then evaluated as plain text + an undefined variable &lt;code&gt;% c%&lt;/code&gt;, which should be echoed as typed, for me &lt;code&gt;echo %a %b% c%&lt;/code&gt; returns &lt;code&gt;bb% c%&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I suspect that the ability to include spaces in variable names is more of an oversight than a planned &apos;feature&apos;&lt;/p&gt;\n    ","\n&lt;h1&gt;&lt;code&gt;FOR&lt;/code&gt;-Loop Meta-Variable Expansion&lt;/h1&gt;\n&lt;p&gt;This is an extended explanation of &lt;em&gt;&lt;strong&gt;Phase 4)&lt;/strong&gt;&lt;/em&gt; in the &lt;a href=&quot;https://stackoverflow.com/a/4095133&quot;&gt;accepted answer&lt;/a&gt; (applicable for both batch file mode and command line mode). Of course a &lt;code&gt;for&lt;/code&gt; command must be active. The following describes the processing of the command line portion after the &lt;code&gt;do&lt;/code&gt; clause. Note that in batch file mode, &lt;code&gt;%%&lt;/code&gt; has already been converted to &lt;code&gt;%&lt;/code&gt; due to the foregoing immediate &lt;code&gt;%&lt;/code&gt;-expansion phase (&lt;em&gt;Phase 1)&lt;/em&gt;).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;scan for &lt;code&gt;%&lt;/code&gt;-sign, beginning from the left up to the end of the line; if one is found, then:\n&lt;ul&gt;\n&lt;li&gt;if &lt;a href=&quot;https://ss64.com/nt/cmd.html&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;CMD.exe&quot;&gt;Command Extensions&lt;/a&gt; are enabled (default), check if next character is &lt;code&gt;~&lt;/code&gt;; if yes, then:\n&lt;ul&gt;\n&lt;li&gt;take as many as possible of the following characters in the case-insensitive set &lt;code&gt;fdpnxsatz&lt;/code&gt; (even multiple times each) that are preceding a character that defines a &lt;code&gt;for&lt;/code&gt; variable reference or a &lt;code&gt;$&lt;/code&gt;-sign; if such a &lt;code&gt;$&lt;/code&gt;-sign is encountered, then:\n&lt;ul&gt;\n&lt;li&gt;scan for a &lt;code&gt;:&lt;/code&gt;&lt;sup&gt;1&lt;/sup&gt;; if found, then:\n&lt;ul&gt;\n&lt;li&gt;if there is a character following the &lt;code&gt;:&lt;/code&gt;, use it as a &lt;code&gt;for&lt;/code&gt; variable reference and expand as expected, unless it is not defined, then do not expand and continue scan at that character position;&lt;/li&gt;\n&lt;li&gt;if the &lt;code&gt;:&lt;/code&gt; is the last character, &lt;strong&gt;&lt;code&gt;cmd.exe&lt;/code&gt; will crash!&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;else (no &lt;code&gt;:&lt;/code&gt; is found) do not expand anything;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;else (if no &lt;code&gt;$&lt;/code&gt;-sign is encountered) expand the &lt;code&gt;for&lt;/code&gt; variable using all the modifiers, unless it is not defined, then do not expand and continue scan at that character position;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;else (if no &lt;code&gt;~&lt;/code&gt; is found or Command Extensions are disabled) check the next character:\n&lt;ul&gt;\n&lt;li&gt;if there is no more character available, do not expand anything;&lt;/li&gt;\n&lt;li&gt;if the next character is &lt;code&gt;%&lt;/code&gt;, do not expand anything and go back to the beginning of the scan at this character position&lt;sup&gt;2&lt;/sup&gt;;&lt;/li&gt;\n&lt;li&gt;else use the next character as a &lt;code&gt;for&lt;/code&gt; variable reference and expand, unless such is not defined, then do not expand;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;go back to the beginning of the scan at the next character position (as long as there still characters available);&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sub&gt;1)  The string between &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt; is considered as the name of an environment variable, which may even be empty; since an environment variable cannot have an empty name, the behaviour is just the same as for an undefined environment variable.&lt;/sub&gt;\n&lt;br&gt;\n&lt;sub&gt;2)  This implies that a &lt;code&gt;for&lt;/code&gt; meta-variable named &lt;code&gt;%&lt;/code&gt; cannot be expanded without a &lt;code&gt;~&lt;/code&gt;-modifier.&lt;/sub&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sub&gt;Original source: &lt;a href=&quot;https://stackoverflow.com/a/56240800&quot; title=&quot;How to safely echo FOR variable %%~p followed by a string literal&quot;&gt;How to safely echo FOR variable %%~p followed by a string literal&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;edit: see accepted answer, what follows is wrong and explains only how to pass a command line to TinyPerl.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Regarding quotes, I have the feeling that the behaviour is the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;when a &lt;code&gt;&quot;&lt;/code&gt; is found, string globbing begins&lt;/li&gt;\n&lt;li&gt;when string globbing occurs:\n&lt;ul&gt;\n&lt;li&gt;every character that is not a &lt;code&gt;&quot;&lt;/code&gt; is globbed&lt;/li&gt;\n&lt;li&gt;when a &lt;code&gt;&quot;&lt;/code&gt; is found:\n&lt;ul&gt;\n&lt;li&gt;if it is followed by &lt;code&gt;&quot;&quot;&lt;/code&gt; (thus a triple &lt;code&gt;&quot;&lt;/code&gt;) then a double quote is added to the string&lt;/li&gt;\n&lt;li&gt;if it is followed by &lt;code&gt;&quot;&lt;/code&gt; (thus a double &lt;code&gt;&quot;&lt;/code&gt;) then a double quote is added to the string and string globbing ends&lt;/li&gt;\n&lt;li&gt;if the next character is not &lt;code&gt;&quot;&lt;/code&gt;, string globbing ends&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;when line ends, string globbing ends.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In short:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&quot;a &quot;&quot;&quot; b &quot;&quot; c&quot;&quot;&quot;&lt;/code&gt; consists of two strings: &lt;code&gt;a &quot; b &quot;&lt;/code&gt; and &lt;code&gt;c&quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&quot;a&quot;&quot;&lt;/code&gt;, &lt;code&gt;&quot;a&quot;&quot;&quot;&lt;/code&gt; and&lt;code&gt;&quot;a&quot;&quot;&quot;&quot;&lt;/code&gt; are all the same string if at the end of a line&lt;/p&gt;\n    ","\n&lt;p&gt;Note that Microsoft has published its Terminal&apos;s source code. It may work similar to the command line with respect to syntax parsing. Maybe someone is interested in testing the reverse-engineered parsing rules on accordance with the terminal&apos;s parsing rules.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/Terminal&quot; rel=&quot;nofollow noreferrer&quot;&gt;Link&lt;/a&gt; to the source code.&lt;/p&gt;\n    "],"357":["\n&lt;p&gt;In order to answer the question, we should first clear up some concepts. What is an array and how can it be used? And what is the code in the question, if not an array?&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;What is an array?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The formal definition of an array is found in the C standard, &lt;em&gt;ISO 9899:2011 6.2.5/20 Types&lt;/em&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An array type describes a contiguously allocated non-empty set of\n  objects with a particular member object type, called the element type.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In plain English, an array is a collection of items of the same type allocated contiguously, in adjacent memory cells. &lt;/p&gt;\n\n&lt;p&gt;For example an array of 3 integers &lt;code&gt;int arr[3] = {1,2,3};&lt;/code&gt; would be allocated in memory like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;+-------+-------+-------+\n|       |       |       |\n|   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   |\n|       |       |       |\n+-------+-------+-------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So what about the formal definition of a multi-dimensional array? Actually, it is the very same definition as cited above. It applies recursively. &lt;/p&gt;\n\n&lt;p&gt;If we would allocate a 2D array, &lt;code&gt;int arr[2][3] = { {1,2,3}, {1,2,3} };&lt;/code&gt; it would get allocated in memory like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;+-------+-------+-------+-------+-------+-------+\n|       |       |       |       |       |       |\n|   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   |\n|       |       |       |       |       |       |\n+-------+-------+-------+-------+-------+-------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What we have in this example is actually an array of arrays. An array which has 2 items, each of them an array of 3 integers. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;An array is a type like any other&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Arrays in C often follow the same type system as regular variables. As shown above, you can have an array of arrays, like you can have an array of any other type. &lt;/p&gt;\n\n&lt;p&gt;You can also apply the same kind of pointer arithmetic on &lt;em&gt;n&lt;/em&gt;-dimensional arrays as on plain one-dimensional arrays. With a regular one-dimensional arrays, applying pointer arithmetic should be trivial:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* ptr = arr; &lt;span class=&quot;hljs-comment&quot;&gt;// integer pointer to the first element.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++)\n{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, *ptr); &lt;span class=&quot;hljs-comment&quot;&gt;// print contents.&lt;/span&gt;\n  ptr++; &lt;span class=&quot;hljs-comment&quot;&gt;// set pointer to point at the next element.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This was made possible through &quot;array decay&quot;. When &lt;code&gt;arr&lt;/code&gt; was used inside an expression, it &quot;decayed&quot; into a pointer to the first element.&lt;/p&gt;\n\n&lt;p&gt;Similarly, we can use the very same kind of pointer arithmetic to iterate through an array of arrays, by using an &lt;em&gt;array pointer&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = { {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}, {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} };\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*ptr)[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = arr; &lt;span class=&quot;hljs-comment&quot;&gt;// int array pointer to the first element, which is an int[3] array.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; i++)\n{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %d %d\\n&quot;&lt;/span&gt;, (*ptr)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], (*ptr)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], (*ptr)[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// print contents&lt;/span&gt;\n  ptr++; &lt;span class=&quot;hljs-comment&quot;&gt;// set pointer to point at the next element&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Again there was array decay. The variable &lt;code&gt;arr&lt;/code&gt; which was of type &lt;code&gt;int [2][3]&lt;/code&gt; decayed into a pointer to the first element. The first element was an &lt;code&gt;int [3]&lt;/code&gt; and a pointer to such an element is declared as &lt;code&gt;int(*)[3]&lt;/code&gt; - an array pointer.&lt;/p&gt;\n\n&lt;p&gt;Understanding array pointers and array decay is necessary in order to work with multi-dimensional arrays.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;There are more cases where arrays behave just like regular variables. The &lt;code&gt;sizeof&lt;/code&gt; operator works just the same for (non-VLA) arrays as for regular variables. Examples for a 32 bit system:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;int x; printf(&quot;%zu&quot;, sizeof(x));&lt;/code&gt; prints &lt;code&gt;4&lt;/code&gt;.&lt;br&gt;\n&lt;code&gt;int arr[3] = {1,2,3}; printf(&quot;%zu&quot;, sizeof(arr));&lt;/code&gt; prints &lt;code&gt;12&lt;/code&gt; (3*4=12)&lt;br&gt;\n&lt;code&gt;int arr[2][3] = { {1,2,3}, {1,2,3} }; printf(&quot;%zu&quot;, sizeof(arr));&lt;/code&gt; prints &lt;code&gt;24&lt;/code&gt; (2*3*4=24)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Like any other type, arrays can be used with library functions and generic APIs. Since arrays fulfil the requirement of being allocated contiguously, we can for example safely copy them with &lt;code&gt;memcpy&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr_a[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;};\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr_b[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;memcpy&lt;/span&gt;(arr_b, arr_a, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(arr_a));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Contiguous allocation is also the reason why other similar standard library functions like &lt;code&gt;memset&lt;/code&gt;, &lt;code&gt;strcpy&lt;/code&gt;, &lt;code&gt;bsearch&lt;/code&gt; and &lt;code&gt;qsort&lt;/code&gt; work. They are designed to work on arrays allocated contiguously. So if you have a multi-dimensional array, you can efficiently search it and sort it with &lt;code&gt;bsearch&lt;/code&gt; and &lt;code&gt;qsort&lt;/code&gt;, saving you the fuss of implementing binary search and quick sort yourself and thereby re-inventing the wheel for every project.&lt;/p&gt;\n\n&lt;p&gt;All of the above consistencies between arrays and other types is a very good thing that we want to take advantage of, particularly when doing generic programming.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;What is the pointer-to-pointer thing, if not an array?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Now to get back to the code in the question, which used a different syntax with a pointer-to-pointer. There is nothing mysterious about it. It is a pointer to pointer to type, no more no less. It is not an array. It is not a 2D array. Strictly speaking, it cannot be used to point at an array, nor can it be used to point at a 2D array.&lt;/p&gt;\n\n&lt;p&gt;A pointer-to-pointer can however be used to point at the first element of an array of pointers, instead of pointing at the array as whole. And that is how it is used in the question - as a way to &quot;emulate&quot; an array pointer. In the question, it is used to point at an array of 2 pointers. And then each of the 2 pointers is used to point at an array of 3 integers.&lt;/p&gt;\n\n&lt;p&gt;This is known as a look-up table, which is a kind of abstract data type (ADT), which is something different from the lower level concept of plain arrays. The main difference is how the look-up table is allocated:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;+------------+\n|            |\n| &lt;span class=&quot;hljs-number&quot;&gt;0x12340000&lt;/span&gt; |\n|            |\n+------------+\n      |\n      |\n      v\n+------------+     +-------+-------+-------+\n|            |     |       |       |       |\n| &lt;span class=&quot;hljs-number&quot;&gt;0x22223333&lt;/span&gt; |----&amp;gt;|   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   |\n|            |     |       |       |       |\n+------------+     +-------+-------+-------+\n|            | \n| &lt;span class=&quot;hljs-number&quot;&gt;0xAAAABBBB&lt;/span&gt; |--+\n|            |  | \n+------------+  |  \n                |\n                |  +-------+-------+-------+\n                |  |       |       |       |\n                +-&amp;gt;|   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   |   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   |\n                   |       |       |       |\n                   +-------+-------+-------+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The 32 bit addresses in this example are made-up. The &lt;code&gt;0x12340000&lt;/code&gt; box represents the pointer-to-pointer. It contains an address &lt;code&gt;0x12340000&lt;/code&gt; to the first item in an array of pointers. Each pointer in that array in turn, contains an address pointing at the first item in an array of integers. &lt;/p&gt;\n\n&lt;p&gt;And here is where the problems start.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Problems with the look-up table version&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The look-up table is scattered all over the heap memory. It is not contiguously allocated memory in adjacent cells, because each call to &lt;code&gt;malloc()&lt;/code&gt; gives a new memory area, not necessarily located adjacently to the others. This in turn gives us lots of problems:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;We can&apos;t use pointer arithmetic as expected. While we can use a form of pointer arithmetic to index and access the items in the look-up table, we can&apos;t do so using array pointers.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;We can&apos;t use the sizeof operator. Used on the pointer-to-pointer, it would give us the size of a pointer-to-pointer. Used to the first item pointed at, it would give us the size of a pointer. Neither of them is the size of an array.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;We can&apos;t use standard library functions that excepts an array type (&lt;code&gt;memcpy&lt;/code&gt;, &lt;code&gt;memset&lt;/code&gt;, &lt;code&gt;strcpy&lt;/code&gt;, &lt;code&gt;bsearch&lt;/code&gt;, &lt;code&gt;qsort&lt;/code&gt; and so on). All such functions assume to get arrays as input, with data allocated contiguously. Calling them with our look-up table as parameter would result in undefined behavior bugs, such as program crashes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Repeated calls of &lt;code&gt;malloc&lt;/code&gt; to allocate several segments leads to heap &lt;a href=&quot;https://stackoverflow.com/questions/3770457/what-is-memory-fragmentation&quot;&gt;fragmentation&lt;/a&gt;, which in turn results in poor use of RAM memory.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Since the memory is scattered, the CPU cannot utilize cache memory when iterating through the look-up table. Efficient use of the data cache requires a contiguous chunk of memory which is iterated through from top to bottom. This means that the look-up table, by design, has significantly slower access time than a real multi-dimensional array. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For each call to &lt;code&gt;malloc()&lt;/code&gt;, the library code managing the heap has to calculate where there is free space. Similarly for each call to &lt;code&gt;free()&lt;/code&gt;, there is overhead code which has to be executed. Therefore, as few calls to these functions as possible is often preferable, for the sake of performance.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Are look-up tables all bad?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As we can see, there are a lot of problems with pointer-based look-up tables. But they aren&apos;t all bad, it is a tool like any other. It just has to be used for the right purpose. If you are looking for a multi-dimensional array, which should be used as an array, look-up tables are clearly the wrong tool. But they can be used for other purposes.&lt;/p&gt;\n\n&lt;p&gt;A look-up table is the right choice when you need all dimensions to have completely variable sizes, individually. Such a container can be handy when for example creating a list of C strings. It is then often justified to take the above mentioned execution speed performance loss in order to save memory.&lt;/p&gt;\n\n&lt;p&gt;Also, the look-up table has the advantage that you can re-alloce parts of the table in run-time without the need to re-allocate a whole multi-dimensional array. If this is something that needs to be done frequently, the look-up table might even outperform the multi-dimensional array in terms of execution speed. For example, similar look-up tables can be used when implementing a chained hash table.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;How to properly allocate a multi-dimensional array dynamically then?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The easiest form in modern C is to simply use a variable-length array (VLA). &lt;code&gt;int array[x][y];&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are variables given values in run-time, prior array declaration. However, VLAs have local scope and do not persist throughout the duration of the program - they have automatic storage duration. So while VLAs may be convenient and fast to use for temporary arrays, it is not an universal replacement to the look-up table in the question.&lt;/p&gt;\n\n&lt;p&gt;To truly allocate a multi-dimensional array dynamically, so that it gets &lt;em&gt;allocated storage duration&lt;/em&gt;, we have to use &lt;code&gt;malloc()&lt;/code&gt;/&lt;code&gt;calloc()&lt;/code&gt;/&lt;code&gt;realloc()&lt;/code&gt;. I&apos;ll give   one example below.&lt;/p&gt;\n\n&lt;p&gt;In modern C, you would use array pointers to a VLA. You can use such pointers even when no actual VLA is present in the program. The benefit of using them over a plain &lt;code&gt;type*&lt;/code&gt; or a &lt;code&gt;void*&lt;/code&gt; is increased type-safety. Using a pointer to a VLA also allows you to pass the array dimensions as parameters to the function using the array, making it both variable and type safe at once.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately, in order to use the benefits of having a pointer to VLA, we can&apos;t return that pointer as a function result. So if we need to return a pointer to the array to the caller, it must be passed as a parameter (for the reasons described in &lt;a href=&quot;https://stackoverflow.com/questions/39486797/dynamic-memory-access-only-works-inside-function&quot;&gt;Dynamic memory access only works inside function&lt;/a&gt;). This is fine practice in C, but makes the code a bit hard to read. It would look something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arr_alloc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(**aptr)[x][y])&lt;/span&gt;\n{\n  *aptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[x][y]) ); &lt;span class=&quot;hljs-comment&quot;&gt;// allocate a true 2D array&lt;/span&gt;\n  assert(*aptr != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this syntax with &lt;em&gt;a pointer to an array pointer&lt;/em&gt; might look a bit strange and intimidating, it doesn&apos;t get more complex than this even if we add more dimensions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arr_alloc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; z, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(**aptr)[x][y][z])&lt;/span&gt;\n{\n  *aptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[x][y][z]) ); &lt;span class=&quot;hljs-comment&quot;&gt;// allocate a true 3D array&lt;/span&gt;\n  assert(*aptr != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now compare that code with the code for adding one more dimension to the look-up table version:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Bad. Don&apos;t write code like this! */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*** &lt;span class=&quot;hljs-title function_&quot;&gt;arr_alloc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; z)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*** ppp = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(*ppp) * x);\n  assert(ppp != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;x; i++)\n  {\n    ppp[i] = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(**ppp) * y);\n    assert(ppp[i] != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;y; j++)\n    {\n      ppp[i][j] = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(***ppp) * z);\n      assert(ppp[i][j] != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n    }\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ppp;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now &lt;em&gt;that&lt;/em&gt; is one unreadble mess of &quot;three-star programming&quot;. And lets not even consider 4 dimensions...&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;The full code of a version using true 2D arrays&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arr_alloc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(**aptr)[x][y])&lt;/span&gt;\n{\n  *aptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[x][y]) ); &lt;span class=&quot;hljs-comment&quot;&gt;// allocate a true 2D array&lt;/span&gt;\n  assert(*aptr != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arr_fill&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[x][y])&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;x; i++)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;y; j++)\n    {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[i][j] = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;arr_print&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[x][y])&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;x; i++)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;y; j++)\n    {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;array&lt;/span&gt;[i][j]);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n  }\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*aptr)[x][y];\n\n  arr_alloc(x, y, &amp;amp;aptr);\n  arr_fill(x, y, *aptr);\n  arr_print(x, y, *aptr);\n  &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(aptr); &lt;span class=&quot;hljs-comment&quot;&gt;// free the whole 2D array&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;C doesn&apos;t have multidimensional arrays&lt;/strong&gt; (as a &lt;em&gt;primitive&lt;/em&gt; data type). But you could have arrays of arrays (or of other aggregates) and arrays of pointers.&lt;/p&gt;\n\n&lt;p&gt;A possible approach is to &lt;strong&gt;reason with some &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_data_type&quot; rel=&quot;nofollow noreferrer&quot;&gt;abstract data type&lt;/a&gt;&lt;/strong&gt; (perhaps using &lt;a href=&quot;https://en.wikipedia.org/wiki/Flexible_array_member&quot; rel=&quot;nofollow noreferrer&quot;&gt;flexible array members&lt;/a&gt;, which is one implementation trick, and you could use other approaches) like in &lt;a href=&quot;https://stackoverflow.com/a/47235897/841108&quot;&gt;this answer&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;We can&apos;t suggest any abstract data type, because that depends on the text of your homework, which we don&apos;t have. You need to &lt;strong&gt;design your abstract data type&lt;/strong&gt; (on a piece of paper), and later to implement it.&lt;/p&gt;\n\n&lt;p&gt;Once you have listed (on a paper or on a board) all the operations needed on your ADT, implementing them is straightforward.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This code works just fine! How could it be wrong?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That sentence is inconsistent (wrong w.r.t. what specifications?) ...&lt;/p&gt;\n\n&lt;p&gt;I recommend to compile with all warnings and debug info (e.g. &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;with&lt;/a&gt; &lt;code&gt;gcc -Wall -Wextra -g&lt;/code&gt; with &lt;a href=&quot;https://gcc.gnu.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;GCC&lt;/a&gt;), to improve your code till you get no warnings, to use the debugger &lt;code&gt;gdb&lt;/code&gt; (to understand what is happening in your program) and other tools like &lt;a href=&quot;http://valgrind.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;valgrind&lt;/a&gt;.&lt;/p&gt;\n    "],"358":["\n&lt;p&gt;You&apos;re modifying the list while you iterate over it. That means that the first time through the loop, &lt;code&gt;i == 1&lt;/code&gt;, so 1 is removed from the list. Then the &lt;code&gt;for&lt;/code&gt; loop goes to the second item in the list, which is not 2, but 3! Then that&apos;s removed from the list, and then the &lt;code&gt;for&lt;/code&gt; loop goes on to the third item in the list, which is now 5. And so on. Perhaps it&apos;s easier to visualize like so, with a ^ pointing to the value of &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6.&lt;/span&gt;..]\n ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s the state of the list initially; then 1 is removed and the loop goes to the second item in the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6.&lt;/span&gt;..]\n    ^\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6.&lt;/span&gt;..]\n       ^\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And so on. &lt;/p&gt;\n\n&lt;p&gt;There&apos;s no good way to alter a list&apos;s length while iterating over it. The best you can do is something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numbers = [n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; numbers &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or this, for in-place alteration (the thing in parens is a generator expression, which is implicitly converted into a tuple before slice-assignment):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numbers[:] = (n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; numbers &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to perform an operation on n before removing it, one trick you could try is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(numbers):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; :\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;do something&quot;&lt;/span&gt;)\n        numbers[i] = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\nnumbers = [n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; numbers &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Begin at the list&apos;s end and go backwards:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;li = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(li)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(li) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; li[i] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; li[i]\n        \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(li)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;] \n[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6260089/strange-result-when-removing-item-from-a-list/6260097#6260097&quot;&gt;@senderle&apos;s&lt;/a&gt; answer is the way to go!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Having said that to further illustrate even a bit more your problem, if you think about it, you will always want to remove the index 0 twenty times:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5.&lt;/span&gt;..........&lt;span class=&quot;hljs-number&quot;&gt;.50&lt;/span&gt;]\n ^\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5.&lt;/span&gt;..........&lt;span class=&quot;hljs-number&quot;&gt;.50&lt;/span&gt;]\n ^\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5.&lt;/span&gt;..........&lt;span class=&quot;hljs-number&quot;&gt;.50&lt;/span&gt;]\n ^\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So you could actually go with something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;aList = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;))\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    aList.pop(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(aList) &lt;span class=&quot;hljs-comment&quot;&gt;#[21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I hope it helps.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The ones below are &lt;strong&gt;not&lt;/strong&gt; bad practices AFAIK.&lt;/p&gt;\n&lt;p&gt;EDIT (Some more):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lis = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\nlis = lis[&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Will do the job also.&lt;/p&gt;\n&lt;p&gt;EDIT2 (I&apos;m bored):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;functional = &lt;span class=&quot;hljs-built_in&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So I found a solution but it&apos;s really clumsy...&lt;/p&gt;\n&lt;p&gt;First of all you make an index array, where you list all the index&apos; you want to delete like in the following&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numbers = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\nindex_arr = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(numbers):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; numbers[i] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n        index_arr.append(i)\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;after that you want to delete all the entries from the numbers list with the index saved in the index_arr. The problem you will encounter is the same as before. Therefore you have to subtract 1 from every index in the index_arr after you just removed a number from the numbers arr, like in the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numbers = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)\nindex_arr = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(numbers):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; numbers[i] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n        index_arr.append(i)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; del_index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; index_list:\n    numbers.pop(del_index)\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;#the nasty part&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(index_list)):\n        index_list[i] -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will work, but I guess it&apos;s not the intended way to do it&lt;/p&gt;\n    ","\n&lt;p&gt;Building on and simplying the answer by @eyquem ...&lt;/p&gt;\n&lt;p&gt;The problem is that elements are being yanked out from under you as you iterate, skipping numbers as you progress to what &lt;em&gt;was&lt;/em&gt; the next number.&lt;/p&gt;\n&lt;p&gt;If you start from the end and go backwards, removing items on-the-go won&apos;t matter, because when it steps to the &quot;next&quot; item (actually the prior item), the deletion does not affect the first half of the list.&lt;/p&gt;\n&lt;p&gt;Simply adding &lt;code&gt;reversed()&lt;/code&gt; to your iterator solves the problem. A comment would be good form to preclude future developers from &quot;tidying up&quot; your code and breaking it mysteriously.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(numbers): &lt;span class=&quot;hljs-comment&quot;&gt;# `reversed` so removing doesn&apos;t foobar iteration&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n    numbers.remove(i)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As an additional information to @Senderle&apos;s answer, just for records,  I thought it&apos;s helpful to visualize the logic behind the scene when python sees &lt;code&gt;for&lt;/code&gt; on a &quot;&lt;strong&gt;Sequence type&lt;/strong&gt;&quot;.&lt;/p&gt;\n&lt;p&gt;Let&apos;s say we have :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; lst:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is actually going to be :&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        i = lst.__getitem__(index)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; IndexError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    index += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s what it is, there is a try-catch mechanism that &lt;code&gt;for&lt;/code&gt; has when we use it on a Sequence types or Iterables(It&apos;s a little different though - calling &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;StopIteration&lt;/code&gt; Exception).&lt;/p&gt;\n&lt;p&gt;*All I&apos;m trying to say is, python will keep track of an independent variable here called &lt;code&gt;index&lt;/code&gt;, so no matter what happens to the list (removing or adding), python increments that variable and calls &lt;code&gt;__getitem__()&lt;/code&gt; method with &quot;this variable&quot; and asks for item.&lt;/p&gt;\n    ","\n&lt;p&gt;You could also use continue to &lt;strong&gt;ignore the values less than 20&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        mylist.append(i)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(mylist)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.3.html#other-language-changes&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python 3.3&lt;/a&gt; you may use the list &lt;code&gt;copy()&lt;/code&gt; method as the iterator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;numbers = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; numbers.copy():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n        numbers.remove(i)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(numbers)\n\n[&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"359":["\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/95810/alex-martelli&quot;&gt;Alex&lt;/a&gt; summarized well but, surprisingly, was too succinct.&lt;/p&gt;\n&lt;p&gt;First, let me reiterate the main points in &lt;a href=&quot;https://stackoverflow.com/a/1436756/3798217&quot;&gt;Alexs post&lt;/a&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The default implementation is useless (its hard to think of one which wouldnt be, but yeah)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt; goal is to be unambiguous&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt; goal is to be readable&lt;/li&gt;\n&lt;li&gt;Containers &lt;code&gt;__str__&lt;/code&gt; uses contained objects &lt;code&gt;__repr__&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Default implementation is useless&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is mostly a surprise because Pythons defaults tend to be fairly useful. However, in this case, having a default for &lt;code&gt;__repr__&lt;/code&gt; which would act like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s(%r)&quot;&lt;/span&gt; % (self.__class__, self.__dict__)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if &lt;code&gt;__repr__&lt;/code&gt; is defined, and &lt;code&gt;__str__&lt;/code&gt; is not, the object will behave as though &lt;code&gt;__str__=__repr__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This means, in simple terms: almost every object you implement should have a functional &lt;code&gt;__repr__&lt;/code&gt; thats usable for understanding the object. Implementing &lt;code&gt;__str__&lt;/code&gt; is optional: do that if you need a pretty print functionality (for example, used by a report generator).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Let me come right out and say it  I do not believe in debuggers. I dont really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature  most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;log(INFO, &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am in the weird function and a is&quot;&lt;/span&gt;, a, &lt;span class=&quot;hljs-string&quot;&gt;&quot;and b is&quot;&lt;/span&gt;, b, &lt;span class=&quot;hljs-string&quot;&gt;&quot;but I got a null C  using default&quot;&lt;/span&gt;, default_c)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But you have to do the last step  make sure every object you implement has a useful repr, so code like that can just work. This is why the eval thing comes up: if you have enough information so &lt;code&gt;eval(repr(c))==c&lt;/code&gt;, that means you know everything there is to know about &lt;code&gt;c&lt;/code&gt;. If thats easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about &lt;code&gt;c&lt;/code&gt; anyway. I usually use an eval-like format: &lt;code&gt;&quot;MyClass(this=%r,that=%r)&quot; % (self.this,self.that)&lt;/code&gt;. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments  but it is a useful form to express this is everything you need to know about this instance.&lt;/p&gt;\n&lt;p&gt;Note: I used &lt;code&gt;%r&lt;/code&gt; above, not &lt;code&gt;%s&lt;/code&gt;. You always want to use &lt;code&gt;repr()&lt;/code&gt; [or &lt;code&gt;%r&lt;/code&gt; formatting character, equivalently] inside &lt;code&gt;__repr__&lt;/code&gt; implementation, or youre defeating the goal of repr. You want to be able to differentiate &lt;code&gt;MyClass(3)&lt;/code&gt; and &lt;code&gt;MyClass(&quot;3&quot;)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The goal of &lt;code&gt;__str__&lt;/code&gt; is to be readable&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Specifically, it is not intended to be unambiguous  notice that &lt;code&gt;str(3)==str(&quot;3&quot;)&lt;/code&gt;. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be &quot;2010/4/12 15:35:22&quot;, etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class  as long is it supports readability, it is an improvement.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Containers &lt;code&gt;__str__&lt;/code&gt; uses contained objects &lt;code&gt;__repr__&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This seems surprising, doesnt it? It is a little, but how readable would it be if it used their &lt;code&gt;__str__&lt;/code&gt;?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[moshe &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, hello\nworld, this &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, oh I don&lt;span class=&quot;hljs-string&quot;&gt;&apos;t know, containing just 4 elements]\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when youre printing a list, just&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;.join(l) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(you can probably also figure out what to do about dictionaries.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Implement &lt;code&gt;__repr__&lt;/code&gt; for any class you implement. This should be second nature. Implement &lt;code&gt;__str__&lt;/code&gt; if you think it would be useful to have a string version which errs on the side of readability.&lt;/p&gt;\n    ","\n&lt;p&gt;My rule of thumb:  &lt;code&gt;__repr__&lt;/code&gt; is for developers, &lt;code&gt;__str__&lt;/code&gt; is for customers.&lt;/p&gt;\n    ","\n&lt;p&gt;Unless you specifically act to ensure otherwise, most classes don&apos;t have helpful results for either:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(Sic()))\n&amp;lt;__main__.Sic &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8b7d0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(Sic()))\n&amp;lt;__main__.Sic &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x8b7d0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you see -- no difference, and no info beyond the class and object&apos;s &lt;code&gt;id&lt;/code&gt;.  If you only override one of the two...:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;): \n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(Sic()))\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(Sic()))\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Sic&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(Sic()))\nfoo\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(Sic()))\n&amp;lt;__main__.Sic &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x2617f0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;as you see, if you override &lt;code&gt;__repr__&lt;/code&gt;, that&apos;s ALSO used for &lt;code&gt;__str__&lt;/code&gt;, but not vice versa.&lt;/p&gt;\n&lt;p&gt;Other crucial tidbits to know: &lt;code&gt;__str__&lt;/code&gt; on a built-on container uses the &lt;code&gt;__repr__&lt;/code&gt;, NOT the &lt;code&gt;__str__&lt;/code&gt;, for the items it contains. And, despite the words on the subject found in typical docs, hardly anybody bothers making the &lt;code&gt;__repr__&lt;/code&gt; of objects be a string that &lt;code&gt;eval&lt;/code&gt; may use to build an equal object (it&apos;s just too hard, AND not knowing how the relevant module was actually imported makes it actually flat out impossible).&lt;/p&gt;\n&lt;p&gt;So, my advice: focus on making &lt;code&gt;__str__&lt;/code&gt; reasonably human-readable, and &lt;code&gt;__repr__&lt;/code&gt; as unambiguous as you possibly can, even if that interferes with the fuzzy unattainable goal of making &lt;code&gt;__repr__&lt;/code&gt;&apos;s returned value acceptable as input to &lt;code&gt;__eval__&lt;/code&gt;!&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/strong&gt;: representation of python object usually eval will convert it back to that object&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/strong&gt;: is whatever you think is that object in text form&lt;/p&gt;\n\n&lt;p&gt;e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;w&apos;o&quot;w&quot;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(s)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;w\\\\\\&apos;o&quot;w\\&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(s)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;w\\&apos;o&quot;w&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(s))==s\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    w&lt;span class=&quot;hljs-string&quot;&gt;&apos;o&quot;w\n       ^\nSyntaxError: EOL while scanning single-quoted string\n&amp;gt;&amp;gt;&amp;gt; eval(repr(s))==s\nTrue\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;In short, the goal of &lt;code&gt;__repr__&lt;/code&gt; is to be unambiguous and &lt;code&gt;__str__&lt;/code&gt; is to be\n  readable.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is a good example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;today = datetime.datetime.now()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(today)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;2012-03-14 09:21:58.130922&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(today)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;datetime.datetime(2012, 3, 14, 9, 21, 58, 130922)&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Read this documentation for repr:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;repr(object)&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse\n  quotes). It is sometimes useful to be able to access this operation as\n  an ordinary function. For many types, this function makes an attempt\n  to return a string that would yield an object with the same value when\n  passed to &lt;code&gt;eval()&lt;/code&gt;, otherwise the representation is a string enclosed in\n  angle brackets that contains the name of the type of the object\n  together with additional information often including the name and\n  address of the object. A class can control what this function returns\n  for its instances by defining a &lt;code&gt;__repr__()&lt;/code&gt; method.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is the documentation for str:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;str(object=&apos;&apos;)&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Return a string containing a nicely printable\n  representation of an object. For strings, this returns the string\n  itself. The difference with &lt;code&gt;repr(object)&lt;/code&gt; is that &lt;code&gt;str(object)&lt;/code&gt; does not\n  always attempt to return a string that is acceptable to &lt;code&gt;eval()&lt;/code&gt;; its\n  goal is to return a printable string. If no argument is given, returns\n  the empty string, &lt;code&gt;&apos;&apos;&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;blockquote&gt;\n&lt;h1&gt;What is the difference between &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; in Python?&lt;/h1&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; (read as &quot;dunder (double-underscore) string&quot;) and &lt;code&gt;__repr__&lt;/code&gt; (read as &quot;dunder-repper&quot; (for &quot;representation&quot;)) are both special methods that return strings based on the state of the object.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; provides backup behavior if &lt;code&gt;__str__&lt;/code&gt; is missing.&lt;/p&gt;\n&lt;p&gt;So one should first write a &lt;code&gt;__repr__&lt;/code&gt; that allows you to reinstantiate an equivalent object from the string it returns e.g. using &lt;code&gt;eval&lt;/code&gt; or by typing it in character-for-character in a Python shell.&lt;/p&gt;\n&lt;p&gt;At any time later, one can write a &lt;code&gt;__str__&lt;/code&gt; for a user-readable string representation of the instance, when one believes it to be necessary.&lt;/p&gt;\n&lt;h1&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;If you print an object, or pass it to &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;str.format&lt;/code&gt;, or &lt;code&gt;str&lt;/code&gt;, then if a &lt;code&gt;__str__&lt;/code&gt; method is defined, that method will be called, otherwise, &lt;code&gt;__repr__&lt;/code&gt; will be used.&lt;/p&gt;\n&lt;h1&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;The &lt;code&gt;__repr__&lt;/code&gt; method is called by the builtin function &lt;code&gt;repr&lt;/code&gt; and is what is echoed on your python shell when it evaluates an expression that returns an object.&lt;/p&gt;\n&lt;p&gt;Since it provides a backup for &lt;code&gt;__str__&lt;/code&gt;, if you can only write one, start with &lt;code&gt;__repr__&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Here&apos;s the builtin help on &lt;code&gt;repr&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(...)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;) -&amp;gt; string\n    \n    Return the canonical string representation of the &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.\n    For most &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; types, &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)) == &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is, for most objects, if you type in what is printed by &lt;code&gt;repr&lt;/code&gt;, you should be able to create an equivalent object. &lt;em&gt;But this is not the default implementation.&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Default Implementation of &lt;code&gt;__repr__&lt;/code&gt;&lt;/h1&gt;\n&lt;p&gt;The default object &lt;code&gt;__repr__&lt;/code&gt; is (&lt;a href=&quot;https://github.com/python/cpython/blob/v3.7.3/Objects/object.c#L496&quot; rel=&quot;noreferrer&quot;&gt;C Python source&lt;/a&gt;) something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;{0}.{1} object at {2}&amp;gt;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(\n      &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__module__, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(self).__qualname__, &lt;span class=&quot;hljs-built_in&quot;&gt;hex&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(self)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That means by default you&apos;ll print the module the object is from, the class name, and the hexadecimal representation of its location in memory - for example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&amp;lt;__main__.Foo &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7f80665abdd0&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This information isn&apos;t very useful, but there&apos;s no way to derive how one might accurately create a canonical representation of any given instance, and it&apos;s better than nothing, at least telling us how we might uniquely identify it in memory.&lt;/p&gt;\n&lt;h1&gt;How can &lt;code&gt;__repr__&lt;/code&gt; be useful?&lt;/h1&gt;\n&lt;p&gt;Let&apos;s look at how useful it can be, using the Python shell and &lt;code&gt;datetime&lt;/code&gt; objects. First we need to import the &lt;code&gt;datetime&lt;/code&gt; module:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we call &lt;code&gt;datetime.now&lt;/code&gt; in the shell, we&apos;ll see everything we need to recreate an equivalent datetime object. This is created by the datetime &lt;code&gt;__repr__&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;datetime.datetime.now()\ndatetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;491180&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we print a datetime object, we see a nice human readable (in fact, ISO) format. This is implemented by datetime&apos;s &lt;code&gt;__str__&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(datetime.datetime.now())\n&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;-01-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:05:&lt;span class=&quot;hljs-number&quot;&gt;44.977951&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is a simple matter to recreate the object we lost because we didn&apos;t assign it to a variable by copying and pasting from the &lt;code&gt;__repr__&lt;/code&gt; output, and then printing it, and we get it in the same human readable output as the other object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;the_past = datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;491180&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(the_past)\n&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;-01-&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:05:&lt;span class=&quot;hljs-number&quot;&gt;36.491180&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;#How do I implement them?&lt;/p&gt;\n&lt;p&gt;As you&apos;re developing, you&apos;ll want to be able to reproduce objects in the same state, if possible. This, for example, is how the datetime object defines &lt;code&gt;__repr__&lt;/code&gt; (&lt;a href=&quot;https://github.com/python/cpython/blob/v3.7.3/Lib/datetime.py#L1876&quot; rel=&quot;noreferrer&quot;&gt;Python source&lt;/a&gt;). It is fairly complex, because of all of the attributes needed to reproduce such an object:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Convert to formal string, for repr().&quot;&quot;&quot;&lt;/span&gt;\n    L = [self._year, self._month, self._day,  &lt;span class=&quot;hljs-comment&quot;&gt;# These are never zero&lt;/span&gt;\n         self._hour, self._minute, self._second, self._microsecond]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; L[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;%s.%s(%s)&quot;&lt;/span&gt; % (self.__class__.__module__,\n                       self.__class__.__qualname__,\n                       &lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;.join(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, L)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._tzinfo &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; s[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;\n        s = s[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, tzinfo=%r&quot;&lt;/span&gt; % self._tzinfo + &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._fold:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; s[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;\n        s = s[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, fold=1)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want your object to have a more human readable representation, you can implement &lt;code&gt;__str__&lt;/code&gt; next. Here&apos;s how the datetime object (&lt;a href=&quot;https://github.com/python/cpython/blob/v3.7.3/Lib/datetime.py#L1895&quot; rel=&quot;noreferrer&quot;&gt;Python source&lt;/a&gt;) implements &lt;code&gt;__str__&lt;/code&gt;, which it easily does because it already has a function to display it in ISO format:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Convert to string, for str().&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.isoformat(sep=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Set &lt;code&gt;__repr__ = __str__&lt;/code&gt;?&lt;/h2&gt;\n&lt;p&gt;This is a critique of another answer here that suggests setting &lt;code&gt;__repr__ = __str__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Setting &lt;code&gt;__repr__ = __str__&lt;/code&gt; is silly - &lt;code&gt;__repr__&lt;/code&gt; is a fallback for &lt;code&gt;__str__&lt;/code&gt; and a &lt;code&gt;__repr__&lt;/code&gt;, written for developers usage in debugging, should be written before you write a &lt;code&gt;__str__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You need a &lt;code&gt;__str__&lt;/code&gt; only when you need a textual representation of the object.&lt;/p&gt;\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n&lt;p&gt;Define &lt;code&gt;__repr__&lt;/code&gt; for objects you write so you and other developers have a reproducible example when using it as you develop. Define &lt;code&gt;__str__&lt;/code&gt; when you need a human readable string representation of it.&lt;/p&gt;\n    ","\n&lt;p&gt;On page 358 of the book &lt;strong&gt;&lt;em&gt;Python scripting for computational science&lt;/em&gt;&lt;/strong&gt; by Hans Petter Langtangen, it clearly states that &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The &lt;code&gt;__repr__&lt;/code&gt; aims at a complete string representation of the object;&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;__str__&lt;/code&gt; is to return a nice string for printing.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So, I prefer to understand them as&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;repr = reproduce&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;str = string (representation)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;from the user&apos;s point of view\nalthough this is a misunderstanding I made when learning python.&lt;/p&gt;\n\n&lt;p&gt;A small but good example is also given on the same page as follows:&lt;/p&gt;\n\n&lt;h2&gt;Example&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;s&apos;&quot;&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;))\nTraceback (most recent call last):\n\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;ipython-input-40-abd46c0c43e7&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;))\n\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Apart from all the answers given, I would like to add few points :-&lt;/p&gt;\n\n&lt;p&gt;1) &lt;code&gt;__repr__()&lt;/code&gt; is invoked when you simply write object&apos;s name on interactive python console and press enter.&lt;/p&gt;\n\n&lt;p&gt;2) &lt;code&gt;__str__()&lt;/code&gt; is invoked when you use object with print statement.&lt;/p&gt;\n\n&lt;p&gt;3) In case, if &lt;code&gt;__str__&lt;/code&gt; is missing, then print and any function using &lt;code&gt;str()&lt;/code&gt; invokes &lt;code&gt;__repr__()&lt;/code&gt; of object.&lt;/p&gt;\n\n&lt;p&gt;4) &lt;code&gt;__str__()&lt;/code&gt; of containers, when invoked will execute &lt;code&gt;__repr__()&lt;/code&gt; method of its contained elements.&lt;/p&gt;\n\n&lt;p&gt;5) &lt;code&gt;str()&lt;/code&gt; called within &lt;code&gt;__str__()&lt;/code&gt; could potentially recurse without a base case, and error on maximum recursion depth.&lt;/p&gt;\n\n&lt;p&gt;6) &lt;code&gt;__repr__()&lt;/code&gt; can call &lt;code&gt;repr()&lt;/code&gt; which will attempt to avoid infinite recursion automatically, replacing an already represented object with &lt;code&gt;...&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;(2020 entry)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; What&apos;s the difference between &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt;?&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/cpqeK.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cpqeK.png&quot; alt=&quot;Differences between str()/repr() and __str__()/__repr__()&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;LONG&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This question has been around a long time, and there are a variety of answers of which most are correct (not to mention from several Python community legends[!]). However when it comes down to the nitty-gritty, this question is analogous to asking the difference between the &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; built-in functions. I&apos;m going to describe the differences in my own words (which means I may be &quot;borrowing&quot; liberally from &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0132269937&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Core Python Programming&lt;/em&gt;&lt;/a&gt; so pls forgive me).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Both&lt;/strong&gt; &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; have the same basic job: their goal is to return a string representation of a Python object. What &lt;em&gt;kind&lt;/em&gt; of string representation is what differentiates them.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;str()&lt;/code&gt; &amp;amp; &lt;code&gt;__str__()&lt;/code&gt; return a &lt;em&gt;printable&lt;/em&gt; string representation of\nan object... something human-readable/for human consumption&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;repr()&lt;/code&gt; &amp;amp; &lt;code&gt;__repr__()&lt;/code&gt; return a string representation of an object that is a &lt;em&gt;valid Python expression&lt;/em&gt;, an object you can pass to &lt;code&gt;eval()&lt;/code&gt; or type into the Python shell without getting an error.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For example, let&apos;s assign a string to &lt;code&gt;x&lt;/code&gt; and an &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;y&lt;/code&gt;, and simply showing human-readable string versions of each:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x, y = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x), &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(y)\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Can we take &lt;strong&gt;what is inside the quotes&lt;/strong&gt; in both cases and enter them verbatim into the Python interpreter? Let&apos;s give it a try:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Clearly you can for an &lt;code&gt;int&lt;/code&gt; but not necessarily for a &lt;code&gt;str&lt;/code&gt;. Similarly, while I can pass &lt;code&gt;&apos;123&apos;&lt;/code&gt; to &lt;code&gt;eval()&lt;/code&gt;, that doesn&apos;t work for &lt;code&gt;&apos;foo&apos;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;string&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nNameError: name &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; defined\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So this tells you the Python shell just &lt;code&gt;eval()&lt;/code&gt;s what you give it. Got it? Now, let&apos;s &lt;code&gt;repr()&lt;/code&gt; both expressions and see what we get. More specifically, take its output and dump &lt;em&gt;those&lt;/em&gt; out in the interpreter (there&apos;s a point to this which we&apos;ll address afterwards):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(x), &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(y)\n(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;foo&apos;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Wow, they &lt;em&gt;both&lt;/em&gt; work? That&apos;s because &lt;code&gt;&apos;foo&apos;&lt;/code&gt;, while a printable string representation of that string, it&apos;s &lt;strong&gt;not&lt;/strong&gt; evaluatable, but &lt;code&gt;&quot;&apos;foo&apos;&quot;&lt;/code&gt; is. &lt;code&gt;123&lt;/code&gt; is a valid Python &lt;code&gt;int&lt;/code&gt; called by either &lt;code&gt;str()&lt;/code&gt; or &lt;code&gt;repr()&lt;/code&gt;. What happens when we call &lt;code&gt;eval()&lt;/code&gt; with these?&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;foo&apos;&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It works because &lt;code&gt;123&lt;/code&gt; and &lt;code&gt;&apos;foo&apos;&lt;/code&gt; are valid Python objects. Another key takeaway is that while sometimes both return the same thing (the same string representation), that&apos;s not always the case. (And yes, yes, I can go create a variable &lt;code&gt;foo&lt;/code&gt; where the &lt;code&gt;eval()&lt;/code&gt; works, but that&apos;s not the point.)&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;More factoids about both pairs&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Sometimes, &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; are called &lt;em&gt;implicitly&lt;/em&gt;, meaning they&apos;re called on behalf of users: when users execute &lt;strong&gt;&lt;code&gt;print&lt;/code&gt;&lt;/strong&gt; (Py1/Py2) or call &lt;code&gt;print()&lt;/code&gt; (Py3+), even if users don&apos;t call &lt;code&gt;str()&lt;/code&gt; explicitly, such a call is made on their behalf before the object is displayed.&lt;/li&gt;\n&lt;li&gt;In the Python shell (interactive interpreter), if you enter a variable at the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prompt and press RETURN, the interpreter displays the results of &lt;code&gt;repr()&lt;/code&gt; implicitly called on that object.&lt;/li&gt;\n&lt;li&gt;To connect &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; to &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt;, realize that calls to the built-in functions, i.e., &lt;code&gt;str(x)&lt;/code&gt; or &lt;code&gt;repr(y)&lt;/code&gt; result in calling their object&apos;s corresponding special methods: &lt;code&gt;x.__str__()&lt;/code&gt; or &lt;code&gt;y.__repr()__&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;By implementing &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; for &lt;em&gt;your&lt;/em&gt; Python classes, you overload the built-in functions (&lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt;), allowing instances of your classes to be passed in to &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt;. When such calls are made, they turn around and call the class&apos; &lt;code&gt;__str__()&lt;/code&gt; and &lt;code&gt;__repr__()&lt;/code&gt; (per #3).&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;To put it simply:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; is used in to show a string representation of your object &lt;strong&gt;to be read easily&lt;/strong&gt; by others.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; is used to show a string representation of &lt;strong&gt;the&lt;/strong&gt; object.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s say I want to create a &lt;code&gt;Fraction&lt;/code&gt; class where the string representation of a fraction is &apos;(1/2)&apos; and the object (Fraction class) is to be represented as &apos;Fraction (1,2)&apos;&lt;/p&gt;\n\n&lt;p&gt;So we can create a simple Fraction class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Fraction&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, num, den&lt;/span&gt;):\n        self.__num = num\n        self.__den = den\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;(&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__num) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__den) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Fraction (&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__num) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self.__den) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;)&apos;&lt;/span&gt;\n\n\n\nf = Fraction(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;I want to represent the Fraction STRING as &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(f)) &lt;span class=&quot;hljs-comment&quot;&gt;# (1/2)&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;I want to represent the Fraction OBJECT as &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(f)) &lt;span class=&quot;hljs-comment&quot;&gt;# Fraction (1,2)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;https://web.archive.org/web/20071127054034/http://pyref.infogami.com/__str__&quot; rel=&quot;nofollow noreferrer&quot;&gt;an (An Unofficial) Python Reference Wiki (archive copy)&lt;/a&gt; by effbot:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; &quot;&lt;em&gt;computes the &quot;informal&quot; string representation of an object. This differs from &lt;code&gt;__repr__&lt;/code&gt; in that it does not have to be a valid Python expression: a more convenient or concise representation may be used instead.&lt;/em&gt;&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;In all honesty, &lt;code&gt;eval(repr(obj))&lt;/code&gt; is never used. If you find yourself using it, you should stop, because &lt;code&gt;eval&lt;/code&gt; is dangerous, and strings are a very inefficient way to serialize your objects (use &lt;code&gt;pickle&lt;/code&gt; instead).&lt;/p&gt;\n&lt;p&gt;Therefore, I would recommend setting &lt;code&gt;__repr__ = __str__&lt;/code&gt;. The reason is that &lt;code&gt;str(list)&lt;/code&gt; calls &lt;code&gt;repr&lt;/code&gt; on the elements (I consider this to be one of the biggest design flaws of Python that was not addressed by Python 3). An actual &lt;code&gt;repr&lt;/code&gt; will probably not be very helpful as the output of &lt;code&gt;print([your, objects])&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;To qualify this, in my experience, the most useful use case of the &lt;code&gt;repr&lt;/code&gt; function is to put a string inside another string (using string formatting). This way, you don&apos;t have to worry about escaping quotes or anything. But note that there is no &lt;code&gt;eval&lt;/code&gt; happening here.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;str&lt;/code&gt; - Creates a new string object from the given object.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;repr&lt;/code&gt; - Returns the canonical string representation of the object.&lt;/p&gt;\n\n&lt;p&gt;The differences:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;str():&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;makes object readable&lt;/li&gt;\n&lt;li&gt;generates output for end-user&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;repr():&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;needs code that reproduces object&lt;/li&gt;\n&lt;li&gt;generates output for developer&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;One aspect that is missing in other answers. It&apos;s true that in general the pattern is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Goal of &lt;code&gt;__str__&lt;/code&gt;: human-readable&lt;/li&gt;\n&lt;li&gt;Goal of &lt;code&gt;__repr__&lt;/code&gt;: unambiguous, possibly machine-readable via &lt;code&gt;eval&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Unfortunately, this differentiation is flawed, because the Python REPL and also IPython use &lt;code&gt;__repr__&lt;/code&gt; for printing objects in a REPL console (see related questions for &lt;a href=&quot;https://stackoverflow.com/questions/28304092/when-i-am-in-the-python-or-ipython-console-what-is-called-when-i-am-returned-an&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/41453624/tell-ipython-to-use-an-objects-str-instead-of-repr-for-output&quot;&gt;IPython&lt;/a&gt;). Thus, projects which are targeted for interactive console work (e.g., Numpy or Pandas) have started to ignore above rules and provide a human-readable &lt;code&gt;__repr__&lt;/code&gt; implementation instead.&lt;/p&gt;\n    ","\n&lt;p&gt;From the book &lt;em&gt;Fluent Python&lt;/em&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A basic requirement for a Python object is to provide usable \n       string   representations of itself, one used for debugging and\n       logging, another for presentation to end users. That is why the&lt;br&gt;\n       special methods &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; exist in the data model.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You can get some insight from this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;repr&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;str&quot;&lt;/span&gt;)\n\nfoo = Foo()\nfoo &lt;span class=&quot;hljs-comment&quot;&gt;#repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(foo) &lt;span class=&quot;hljs-comment&quot;&gt;#str&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; can be invoked on an object by calling &lt;code&gt;str(obj)&lt;/code&gt; and should return a human readable string. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; can be invoked on an object by calling &lt;code&gt;repr(obj)&lt;/code&gt; and should return internal object (object fields/attributes)&lt;/p&gt;\n\n&lt;p&gt;This example may help:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C1&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C2&lt;/span&gt;:        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class str &quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C3&lt;/span&gt;:        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):        \n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class repr&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C4&lt;/span&gt;:        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class str &quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):        \n         &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{self.__class__.__name__}&lt;/span&gt; class repr&quot;&lt;/span&gt;)\n\n\nci1 = C1()    \nci2 = C2()  \nci3 = C3()  \nci4 = C4()\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci1)       &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C1 object at 0x0000024C44A80C18&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci1))  &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C1 object at 0x0000024C44A80C18&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci1)) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C1 object at 0x0000024C44A80C18&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci2)       &lt;span class=&quot;hljs-comment&quot;&gt;#C2 class str&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci2))  &lt;span class=&quot;hljs-comment&quot;&gt;#C2 class str&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci2)) &lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;__main__.C2 object at 0x0000024C44AE12E8&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci3)       &lt;span class=&quot;hljs-comment&quot;&gt;#C3 class repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci3))  &lt;span class=&quot;hljs-comment&quot;&gt;#C3 class repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci3)) &lt;span class=&quot;hljs-comment&quot;&gt;#C3 class repr&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ci4)       &lt;span class=&quot;hljs-comment&quot;&gt;#C4 class str &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(ci4))  &lt;span class=&quot;hljs-comment&quot;&gt;#C4 class str &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(ci4)) &lt;span class=&quot;hljs-comment&quot;&gt;#C4 class repr&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Excellent answers already cover the difference between &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt;, which for me boils down to the former being readable even by an end user, and the latter being as useful as possible to developers. Given that, I find that the default implementation of &lt;code&gt;__repr__&lt;/code&gt; often fails to achieve this goal because it &lt;em&gt;omits&lt;/em&gt; information useful to developers.&lt;/p&gt;\n\n&lt;p&gt;For this reason, if I have a simple enough &lt;code&gt;__str__&lt;/code&gt;, I generally just try to get the best of both worlds with something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{0} ({1})&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;.__repr__(self), &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(self))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(decimal.Decimal(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;) / decimal.Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.05&quot;&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;21.90476190476190476190476190&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;decimal.Decimal(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;) / decimal.Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.05&quot;&lt;/span&gt;)\nDecimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;21.90476190476190476190476190&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When &lt;code&gt;print()&lt;/code&gt; is called on the result of &lt;code&gt;decimal.Decimal(23) / decimal.Decimal(&quot;1.05&quot;)&lt;/code&gt; the raw number is printed; this output is in &lt;strong&gt;string form&lt;/strong&gt; which can be achieved with &lt;code&gt;__str__()&lt;/code&gt;. If we simply enter the expression we get a &lt;code&gt;decimal.Decimal&lt;/code&gt; output  this output is in &lt;strong&gt;representational form&lt;/strong&gt; which can be achieved with &lt;code&gt;__repr__()&lt;/code&gt;. All Python objects have two output forms. String form is designed to be human-readable. The representational form is designed to produce output that if fed to a Python interpreter would (when possible) reproduce the represented object.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;One important thing to keep in mind is that container&apos;s &lt;code&gt;__str__&lt;/code&gt; uses contained objects&apos; &lt;code&gt;__repr__&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; decimal &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Decimal\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;52&apos;&lt;/span&gt;), datetime.now())\n(Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;52&apos;&lt;/span&gt;), datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2015&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;185000&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;((Decimal(&lt;span class=&quot;hljs-string&quot;&gt;&apos;52&apos;&lt;/span&gt;), datetime.now()))\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;(Decimal(&apos;52&apos;), datetime.datetime(2015, 11, 16, 10, 52, 22, 176000))&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Python favors unambiguity over readability&lt;/em&gt;, the &lt;code&gt;__str__&lt;/code&gt; call of a &lt;code&gt;tuple&lt;/code&gt; calls the contained objects&apos; &lt;code&gt;__repr__&lt;/code&gt;, the &lt;em&gt;&quot;formal&quot;&lt;/em&gt; representation of an object. Although the formal representation is harder to read than an informal one, it is unambiguous and more robust against bugs.&lt;/p&gt;\n    ","\n&lt;p&gt;In a nutshell:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Demo&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;repr&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;\n\ndemo = Demo()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __str__, output &apos;str&apos; to stdout&lt;/span&gt;\n\ns = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# __str__ is used, return &apos;str&apos;&lt;/span&gt;\nr = &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# __repr__ is used, return &apos;repr&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; logging\nlogger = logging.getLogger(logging.INFO)\nlogger.info(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __str__, output &apos;str&apos; to stdout&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pprint &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pprint, pformat\npprint(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __repr__, output &apos;repr&apos; to stdout&lt;/span&gt;\nresult = pformat(demo) &lt;span class=&quot;hljs-comment&quot;&gt;# use __repr__, result is string which value is &apos;str&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Understand &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; intuitively and permanently distinguish them at all.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__str__&lt;/code&gt; return the string disguised body of a given object for readable of eyes&lt;br&gt;\n&lt;code&gt;__repr__&lt;/code&gt; return the real flesh body of a given object (return itself) for unambiguity to identify.&lt;/p&gt;\n\n&lt;p&gt;See it in an example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(datetime.datetime.now())\nOut[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-12-07 15:41:14.002752&apos;&lt;/span&gt;\nDisguised &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; string form\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As to &lt;code&gt;__repr__&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;]: datetime.datetime.now()\nOut[&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;297769&lt;/span&gt;)\nPresence &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; real body which allows to be manipulated directly.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can do arithmetic operation on &lt;code&gt;__repr__&lt;/code&gt; results conveniently.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;]: datetime.datetime.now()\nOut[&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;741521&lt;/span&gt;)\nIn [&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]: datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;741521&lt;/span&gt;) - datetime.datetime(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    ...: 017, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;297769&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]: datetime.timedelta(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;222&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;443752&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if apply the operation on &lt;code&gt;__str__&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-12-07 15:43:14.002752&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-string&quot;&gt;&apos;2017-12-07 15:41:14.002752&apos;&lt;/span&gt;\nTypeError: unsupported operand &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(s) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; -: &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;str&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns nothing but error.&lt;/p&gt;\n\n&lt;p&gt;Another example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;string_body&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;string_body&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# in string form&lt;/span&gt;\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;real_body&apos;&lt;/span&gt;)\nOut[&lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;real_body&apos;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#its real body hide inside&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope this help you build concrete grounds to explore more answers.&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;__str__&lt;/code&gt; must return string object whereas &lt;code&gt;__repr__&lt;/code&gt; can return any python expression.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;__str__&lt;/code&gt; implementation is missing then &lt;code&gt;__repr__&lt;/code&gt; function is used as fallback. There is no fallback if &lt;code&gt;__repr__&lt;/code&gt; function implementation is missing.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;__repr__&lt;/code&gt; function is returning String representation of the object, we can skip implementation of &lt;code&gt;__str__&lt;/code&gt; function.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://www.journaldev.com/22460/python-str-repr-functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.journaldev.com/22460/python-str-repr-functions&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; is used everywhere, except by &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; methods (when a &lt;code&gt;__str__&lt;/code&gt;is defined !)&lt;/p&gt;\n    ","\n&lt;p&gt;Every object inherits &lt;code&gt;__repr__&lt;/code&gt;  from the base class that all objects created.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n     &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\np=Person()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you call &lt;code&gt;repr(p)&lt;/code&gt; you will get this as default:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &amp;lt;__main__.Person &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fb2604f03a0&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you call &lt;code&gt;str(p)&lt;/code&gt; you will get the same output. it is because when &lt;code&gt;__str__&lt;/code&gt; does not exist, Python calls &lt;code&gt;__repr__&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Let&apos;s implement our own &lt;code&gt;__str__&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self,name,age&lt;/span&gt;):\n        self.name=name\n        self.age=age\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;__repr__ called&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&quot;Person(name=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;{self.name}&lt;/span&gt;&apos;,age=&lt;span class=&quot;hljs-subst&quot;&gt;{self.age}&lt;/span&gt;)&quot;&lt;/span&gt;\n\np=Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ali&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;print(p)&lt;/code&gt; and &lt;code&gt;str(p)&lt;/code&gt;will return&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; __repr__ called\n     Person(name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;ali&apos;&lt;/span&gt;,age=&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;let&apos;s add &lt;code&gt;__str__()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n        self.name = name\n        self.age = age\n        \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__repr__ called&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&quot;Person(name=&apos;&lt;span class=&quot;hljs-subst&quot;&gt;{self.name}&lt;/span&gt;, age=self.age&apos;)&quot;&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__str__ called&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.name\n\np=Person(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ali&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if we call &lt;code&gt;print(p)&lt;/code&gt; and str(p), it will call &lt;code&gt;__str__()&lt;/code&gt; so it will return&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;__str__ called\nali\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;repr(p)&lt;/code&gt; will return&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;repr&lt;/strong&gt; called\n&quot;Person(name=&apos;ali, age=self.age&apos;)&quot;&lt;/p&gt;\n&lt;p&gt;Let&apos;s omit &lt;code&gt;__repr__&lt;/code&gt; and just implement &lt;code&gt;__str__&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;:\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, name, age&lt;/span&gt;):\n    self.name = name\n    self.age = age\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__str__ called&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self.name\n\np=Person(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ali&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;print(p)&lt;/code&gt; will look for the &lt;code&gt;__str__&lt;/code&gt; and will return:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;__str__ called\nali\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;NOTE= if we had &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; defined, &lt;code&gt;f&apos;name is {p}&apos;&lt;/code&gt; would call &lt;code&gt;__str__&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Programmers with prior experience in languages with a &lt;code&gt;toString&lt;/code&gt; method tend to implement &lt;code&gt;__str__&lt;/code&gt; and not &lt;code&gt;__repr__&lt;/code&gt;.\nIf you only implement one of these special methods in Python, choose &lt;code&gt;__repr__&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;From &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/B09WZJMMJP&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fluent Python&lt;/a&gt; book, by Ramalho, Luciano.&lt;/p&gt;\n    ","\n&lt;p&gt;Basically &lt;code&gt;__str__&lt;/code&gt; or &lt;strong&gt;str()&lt;/strong&gt; is used for creating output that is human-readable are must be for end-users.\nOn the other hand, &lt;strong&gt;repr()&lt;/strong&gt; or &lt;code&gt;__repr__&lt;/code&gt; mainly returns canonical string representation of objects which serve the purpose of debugging and development helps the programmers.&lt;/p&gt;\n    "],"360":["\n&lt;p&gt;Close chrome (or chromium) and restart with the &lt;code&gt;--disable-web-security&lt;/code&gt; argument. I just tested this and verified that I can access the contents of an iframe with src=&quot;http://google.com&quot; embedded in a page served from &quot;localhost&quot; (tested under chromium 5 / ubuntu). For me the exact command was:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note  :  Kill all chrome instances before running command&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chromium-browser --disable-web-security --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;[some directory here]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The browser will warn you that &quot;you are using an unsupported command line&quot; when it first opens, which you can ignore.&lt;/p&gt;\n\n&lt;p&gt;From the chromium source:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t enforce the same-origin policy. (Used by people testing their sites.)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; wchar_t kDisableWebSecurity[] = L&lt;span class=&quot;hljs-string&quot;&gt;&quot;disable-web-security&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Before Chrome 48, you could just use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chromium-browser --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Yep. For OSX, open Terminal and run:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$ open -a &lt;span class=&quot;hljs-title class_&quot;&gt;Google&lt;/span&gt;\\ &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt; --args --disable-web-security --user-data-dir\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/35509189/773263&quot;&gt;--user-data-dir required on Chrome 49+ on OSX&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For Linux run:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$ google-chrome --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also if you&apos;re trying to access local files for dev purposes like AJAX or JSON, you can use this flag too.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;--allow-file-access-&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;-files\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For Windows go into the command prompt and go into the folder where Chrome.exe is and type&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chrome.&lt;span class=&quot;hljs-property&quot;&gt;exe&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That should disable the same origin policy and allow you to access local files.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; For Chrome 22+ you will be presented with an error message that says:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You are using an unsupported command-line flag: --disable-web-security. Stability and security will suffer.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;However you can just ignore that message while developing.&lt;/p&gt;\n    ","\n&lt;p&gt;For Windows users:&lt;/p&gt;\n&lt;p&gt;The problem with the solution accepted here, in my opinion is that if you already have Chrome open and try to run the &lt;code&gt;chrome.exe --disable-web-security&lt;/code&gt; command it won&apos;t work.&lt;/p&gt;\n&lt;p&gt;However, when researching this, I came across a post on Super&amp;nbsp;User, &lt;em&gt;&lt;a href=&quot;https://superuser.com/questions/593726/is-it-possible-to-run-chrome-with-and-without-web-security-at-the-same-time&quot;&gt;Is it possible to run Chrome with and without web security at the same time?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Basically, you need to add to the command and run it like this instead (or create a shortcut with it and run a new Chrome instance through that)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chrome.&lt;span class=&quot;hljs-property&quot;&gt;exe&lt;/span&gt; --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/Chrome dev session&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which will open a new &quot;insecure&quot; instance of Chrome at the same time as you keep your other &quot;secure&quot; browser instances open and working as normal.&lt;/p&gt;\n&lt;p&gt;This works by creating a new folder/directory &quot;Chrome dev session&quot; under C: and tells this new Chrome instance to use that folder/directory for its user and session data. Because of this, the new instance is separated from your &quot;normal&quot; Chrome data and your bookmarks and other saved data will not be available in this instance.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; only the first &quot;new&quot; instance of Chrome opened with this method, is effected, hence it is only the first tab in the first new Chrome window, which is effected.\nIf you close that instance, you can use the same command again and for example any bookmarks to your local app or similar will still be there as it&apos;s pointing to the same folder.&lt;/p&gt;\n&lt;p&gt;If you want to run multiple &quot;insecure&quot; instances, each one will need its own folder/directory, so you will need to runt he command again with a different folder name. This however also means that each insecure instance will be separated from the others, so any bookmarks or other saves user or session data will not be available across instances.&lt;/p&gt;\n    ","\n&lt;p&gt;For &lt;strong&gt;Windows&lt;/strong&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Open the start menu&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Type &lt;kbd&gt;windows&lt;/kbd&gt;+&lt;kbd&gt;R&lt;/kbd&gt; or open &quot;Run&quot;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Execute the following command:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; chrome.&lt;span class=&quot;hljs-property&quot;&gt;exe&lt;/span&gt; --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;C://Chrome dev session&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;p&gt;For &lt;strong&gt;Mac&lt;/strong&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Go to Terminal&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Execute the following command:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; open /&lt;span class=&quot;hljs-title class_&quot;&gt;Applications&lt;/span&gt;/&lt;span class=&quot;hljs-title class_&quot;&gt;Google&lt;/span&gt;\\ &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt; --args --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/tmp/Chrome dev session&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;p&gt;A new web security disabled chrome browser should open with the following message:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/i6RZ5.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/i6RZ5.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For &lt;strong&gt;Mac&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you want to open new instance of web security disabled Chrome browser without closing existing tabs then use below command&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -na &lt;span class=&quot;hljs-title class_&quot;&gt;Google&lt;/span&gt;\\ &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt; --args --user-data-dir=&lt;span class=&quot;hljs-regexp&quot;&gt;/tmp/&lt;/span&gt;temporary-chrome-profile-dir --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will open new instance of web security disabled Chrome browser  as shown below&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/3QxAi.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3QxAi.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Using the current latest chrome &lt;strong&gt;Version 100.0.4896.127 (Official Build) (64-bit)&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;windows :&lt;/strong&gt; click the start button then copy paste the below (change the &lt;em&gt;&lt;strong&gt;D:\\temp&lt;/strong&gt;&lt;/em&gt; to your liking).:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chrome.&lt;span class=&quot;hljs-property&quot;&gt;exe&lt;/span&gt;  --disable-site-isolation-trials --disable-web-security --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D:\\temp&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Linux :&lt;/strong&gt; start a terminal then run the below command (change the &lt;strong&gt;~/tmp&lt;/strong&gt; directory to your liking)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;google-chrome --disable-site-isolation-trials --disable-web-security --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;~/tmp&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Note : This solution will start chrome in an isolated sandbox and it will not affect the main chrome profile.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For &lt;strong&gt;windows&lt;/strong&gt; users with &lt;strong&gt;Chrome Versions 60.0.3112.78 (the day the solution was tested and worked) and at least until today 19.01.2019 (ver. 71.0.3578.98)&lt;/strong&gt;. You &lt;strong&gt;do not&lt;/strong&gt; need to close any chrome instance.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Create a shortcut on your desktop&lt;/li&gt;\n&lt;li&gt;Right-click on the shortcut and click Properties&lt;/li&gt;\n&lt;li&gt;Edit the Target property&lt;/li&gt;\n&lt;li&gt;Set it to &lt;strong&gt;&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; --disable-web-security --user-data-dir=&quot;C:/ChromeDevSession&quot;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Start chrome and &lt;strong&gt;ignore&lt;/strong&gt; the message that says --disable-web-security is not supported!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;BEWARE NOT TO USE THIS PARTICULAR BROWSER INSTANCE FOR BROWSING BECAUSE YOU CAN BE HACKED WITH IT!&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;EDIT 3: Seems that the extension no longer exists...&lt;/strong&gt; Normally to get around CORS these days I &lt;a href=&quot;https://stackoverflow.com/a/3177718/2759427&quot;&gt;set up another version of Chrome with a separate directory&lt;/a&gt; or I use Firefox with &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/&lt;/a&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;EDIT 2: I can no longer get this to work consistently.&lt;/p&gt;\n\n&lt;p&gt;EDIT: I tried using the just the other day for another project and it stopped working. Uninstalling and reinstalling the extension fixed it (to reset the defaults).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Original Answer:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I didn&apos;t want to restart Chrome and disable my web security (because I was browsing while developing) and stumbled onto this Chrome extension.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome Web Store Allow-Control-Allow-Origin: * &lt;br&gt;(https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Basically it&apos;s a little toggle switch to toggle on and off the Allow-Access-Origin-Control check. Works perfectly for me for what I&apos;m doing.&lt;/p&gt;\n    ","\n&lt;p&gt;Seems none of above solutions are actually working. The &lt;strong&gt;--disable-web-security&lt;/strong&gt; is no longer supported in recent chrome versions. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Allow-Control-Allow-Origin: * - chrome extension&lt;/strong&gt; partially solved the problem. It works only if your request is using GET method and there&apos;s no custom HTTP Header. Otherwise, chrome will send OPTIONS HTTP request as a pre-flight request. If the server doesn&apos;t support CORS, it will respond with 404 HTTP status code. The plugin can&apos;t modify the response HTTP status code. So chrome will reject this request. There&apos;s no way for chrome plugin to modify the response HTTP status code based on current chrome extension API. And you can&apos;t do a redirect as well for XHR initiated request.&lt;/p&gt;\n\n&lt;p&gt;Not sure why Chrome makes developers life so difficult. It blocks all the possible ways to disable XSS security check even for development use which is totally unnecessary.&lt;/p&gt;\n\n&lt;p&gt;After days struggle and research, one solution works perfectly for me: to use &lt;strong&gt;corsproxy&lt;/strong&gt;. You have two options here: \n1. use [&lt;a href=&quot;https://cors-anywhere.herokuapp.com/]&quot; rel=&quot;noreferrer&quot;&gt;https://cors-anywhere.herokuapp.com/]&lt;/a&gt;\n2. install corsproxy in the local box: &lt;strong&gt;npm install -g corsproxy&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;[Updated on Jun 23, 2018]&lt;/strong&gt; Recent I&apos;m developing an SPA app which need to use corsproxy again. But seem none of the corsproxy on the github can meet my requirement. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;need it to run inside firewall for security reason. So I can&apos;t use &lt;a href=&quot;https://cors-anywhere.herokuapp.com/&quot; rel=&quot;noreferrer&quot;&gt;https://cors-anywhere.herokuapp.com/&lt;/a&gt;. &lt;/li&gt;\n&lt;li&gt;It has to support https as chrome will block no-https ajax request in an https page. &lt;/li&gt;\n&lt;li&gt;I need to run on nodejs. I don&apos;t want to maintain another language stack.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So I decide to develop my own version of corsproxy with nodejs. It&apos;s actually very simple. I have published it as a gist on the github. Here is the source code gist: \n&lt;a href=&quot;https://gist.github.com/jianwu/8e76eaec95d9b1300c59596fbfc21b10&quot; rel=&quot;noreferrer&quot;&gt;https://gist.github.com/jianwu/8e76eaec95d9b1300c59596fbfc21b10&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It&apos;s in plain nodejs code without any additional dependencies&lt;/li&gt;\n&lt;li&gt;You can run in http and https mode (by passing the https port\nnumber in command line), to run https, you need to generate cert and\nkey and put them in the webroot directory. &lt;/li&gt;\n&lt;li&gt;It also serves as static file server&lt;/li&gt;\n&lt;li&gt;It supports pre-flight OPTION request as well.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To start the CORSProxy server (http port 8080):\nnode static_server.js 8080&lt;/p&gt;\n\n&lt;p&gt;to access the proxy:\n&lt;a href=&quot;http://host:8080/http://www.somesite.com&quot; rel=&quot;noreferrer&quot;&gt;http://host:8080/http://www.somesite.com&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Try this command on Mac terminal-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -n -a &lt;span class=&quot;hljs-string&quot;&gt;&quot;Google Chrome&quot;&lt;/span&gt; --args --user-data-dir=&lt;span class=&quot;hljs-regexp&quot;&gt;/tmp/&lt;/span&gt;temp_chrome_user_data_dir &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8100/ --disable-web-security &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It opens another instance of chrome with disabled security and there is no CORS issue anymore. Also, you don&apos;t need to close other chrome instances anymore. Change localhost URL to your&apos;s one.&lt;/p&gt;\n    ","\n&lt;p&gt;For Windows... create a Chrome shortcut on your desktop.&lt;br&gt;\nRight-click &amp;gt; properties &amp;gt; Shortcut&lt;br&gt;\nEdit &quot;target&quot; path :  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;&lt;/span&gt; --args --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Change the &apos;C:....\\chrome.exe&apos; to where ever your chrome is located).&lt;/p&gt;\n\n&lt;p&gt;et voilà :)           &lt;/p&gt;\n    ","\n&lt;p&gt;I find the best way to do this is duplicate a Chrome or Chrome Canary shortcut on your windows desktop. Rename this shortcut to &quot;NO CORS&quot; then edit the properties of that shortcut. &lt;/p&gt;\n\n&lt;p&gt;in the target add &lt;code&gt;--disable-web-security --user-data-dir=&quot;D:/Chrome&quot;&lt;/code&gt; to the end of the target path. &lt;/p&gt;\n\n&lt;p&gt;your target should look something like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; New Flags added.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;&lt;/span&gt; --disable-web-security --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;D:/Chrome&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/PvMLm.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/PvMLm.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Don&apos;t do this!&lt;/strong&gt; &lt;a href=&quot;https://games.greggman.com/game/dont-disable-web-security/&quot; rel=&quot;noreferrer&quot;&gt;You&apos;re opening your accounts to attacks&lt;/a&gt;. Once you do this any 3rd party site can start issuing requests to other websites, sites that you are logged into.&lt;/p&gt;\n&lt;p&gt;Instead run a local server. It&apos;s as easy as opening a shell/terminal/commandline and typing&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;cd path/to/files\npython -m &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleHTTPServer&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then pointing your browser to&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you find it&apos;s too slow &lt;a href=&quot;https://stackoverflow.com/questions/12905426/faster-alternative-to-pythons-simplehttpserver&quot;&gt;consider this solution&lt;/a&gt;&lt;/p&gt;\n&lt;h1&gt;Update&lt;/h1&gt;\n&lt;p&gt;People downvoting this answer should go over here and &lt;a href=&quot;https://stackoverflow.com/a/33801287/128511&quot;&gt;downvote this one too&lt;/a&gt; to be consistent. No idea why my answer is so downvoted and the same answer over &lt;a href=&quot;https://stackoverflow.com/a/33801287/128511&quot;&gt;here&lt;/a&gt; is the top voted answer.&lt;/p&gt;\n&lt;p&gt;You &lt;strong&gt;are&lt;/strong&gt; opening yourself to attacks. Every single 3rd party script you include on your site remotely or locally like via npm can now upload your data or steal your credentials. You are doing something you have no need to do. The suggested solution is not hard, takes 30 seconds, doesn&apos;t leave you open attack. Why would you choose to make yourself vulnerable when the better thing to do is so simple?&lt;/p&gt;\n&lt;p&gt;Telling people to disable security is like telling your friends to leave their front door unlocked and/or a key under the doormat. Sure the odds might be low but if they do get burgled, without proof of forced entry they might have a hard time collecting insurance. Similarly if you &lt;strong&gt;disable security&lt;/strong&gt; you are doing just that &lt;strong&gt;disabling&lt;/strong&gt; &lt;strong&gt;security&lt;/strong&gt;. It&apos;s irresponsible to do this when you can solve the issue so simply without disabling security. I&apos;d be surprised if you couldn&apos;t be fired at some companies for disabling security.&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Create a shortcut&lt;/strong&gt;:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/7aXq7.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/7aXq7.png&quot; alt=&quot;Create new shortcut&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Paste the command&lt;/strong&gt;:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;code&gt;cmd /c start chrome --disable-web-security --user-data-dir=&quot;c:\\temp\\chrome&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Run as administrator&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;For Selenium Webdriver, you can have selenium start Chrome with the appropriate arguments (or &quot;switches&quot;) in this case.&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; @driver = &lt;span class=&quot;hljs-title class_&quot;&gt;Selenium&lt;/span&gt;::&lt;span class=&quot;hljs-title class_&quot;&gt;WebDriver&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;for&lt;/span&gt;(:&lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt;, { \n       :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;detach&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n       :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;switches&lt;/span&gt; =&amp;gt;&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;--disable-web-security&quot;&lt;/span&gt;]\n    })\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use this chrome plugin called &quot;Allow-Control-Allow-Origin: *&quot; ... It make it a dead simple and work very well.\n&lt;a href=&quot;https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi/related?hl=en&quot; rel=&quot;noreferrer&quot;&gt;check it here: *&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/f8wap.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/f8wap.png&quot; alt=&quot;Chrome extenstion&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For OSX, run the following command from the terminal:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -na &lt;span class=&quot;hljs-title class_&quot;&gt;Google&lt;/span&gt;\\ &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt; --args --disable-web-security --user-data-dir=$HOME/profile-folder-name\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will start a new instance of Google Chrome with a warning on top.&lt;/p&gt;\n&lt;p&gt;CAUTION: if you use &lt;code&gt;--user-data-dir&lt;/code&gt; then chrome disconnect with you user-data folder (and logout you from all your sites) - even if you run it again without any params. To rollback this, you need to open in above way but without that prameter.&lt;/p&gt;\n    ","\n&lt;p&gt;You can simply use this chrome extension &lt;a href=&quot;https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf&quot; rel=&quot;noreferrer&quot;&gt;Allow-Control-Allow-Origin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;just click the icon of the extensnion to turn enable cross-resource sharing  ON or OFF as you want &lt;/p&gt;\n    ","\n&lt;p&gt;If you are using Google Chrome on Linux, following command works.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;google-chrome  --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This Chrome plugin works for me:\n&lt;a href=&quot;https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi&quot; rel=&quot;noreferrer&quot;&gt;Allow-Control-Allow-Origin: * - Chrome Web Store&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;FOR MAC USER ONLY&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -n -a /&lt;span class=&quot;hljs-title class_&quot;&gt;Applications&lt;/span&gt;/&lt;span class=&quot;hljs-title class_&quot;&gt;Google&lt;/span&gt;\\ &lt;span class=&quot;hljs-title class_&quot;&gt;Chrome&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;app&lt;/span&gt; --args --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/tmp/someFolderName&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;On Linux- Ubuntu, to run simultaneously a normal session and an unsafe session run the following command:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;google-chrome  --user-data-dir=/tmp --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Following on Ola Karlsson answer, indeed the best way would be to open the unsafe Chrome in a different session. This way you don&apos;t need to worry about closing all of the currently opened tabs, and also can continue to surf the web securely with the original Chrome session.&lt;/p&gt;\n\n&lt;p&gt;These batch files should just work for you on Windows.&lt;/p&gt;\n\n&lt;p&gt;Put it in a &lt;a href=&quot;https://gist.github.com/guy-a/7423ba4d15d0c2a3e3c7&quot; rel=&quot;noreferrer&quot;&gt;Chrome_CORS.bat file&lt;/a&gt; for easy use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;start &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;c:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;&lt;/span&gt; --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;c:/_chrome_dev&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This one is for &lt;strong&gt;Chrome Canary&lt;/strong&gt;. &lt;a href=&quot;https://gist.github.com/guy-a/ba50857ce4d0a9a9b8f2&quot; rel=&quot;noreferrer&quot;&gt;Canary_CORS.bat&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;start &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;c:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome SxS\\Application\\chrome.exe&quot;&lt;/span&gt; --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&quot;c:/_canary_dev&quot;&lt;/span&gt; --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;chromium-browser --disable-web-security --user-data-dir=~&lt;span class=&quot;hljs-regexp&quot;&gt;/ChromeUserData/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;On Windows 10, the following will work.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;&amp;lt;path&amp;gt;&amp;gt;\\chrome.&lt;span class=&quot;hljs-property&quot;&gt;exe&lt;/span&gt; --allow-file-access-&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;-files --allow-file-access --allow-cross-origin-auth-prompt\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;this is an ever moving target.... today I needed to add another flag to get it to work:\n&lt;code&gt;--disable-site-isolation-trials&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;OS X:\n&lt;code&gt;open /Applications/Google\\ Chrome.app --args --user-data-dir=&quot;/var/tmp/Chrome_dev_2&quot; --disable-web-security --disable-site-isolation-trials\n&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;for mac users:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -a &lt;span class=&quot;hljs-string&quot;&gt;&quot;Google Chrome&quot;&lt;/span&gt; --args --disable-web-security --user-data-dir\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and before Chrome 48, you could just use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;open -a &lt;span class=&quot;hljs-string&quot;&gt;&quot;Google Chrome&quot;&lt;/span&gt; --args --disable-web-security\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a Chrome extension called CORS Toggle.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/cors-toggle/omcncfnpmcabckcddookmnajignpffnh?hl=en&quot; rel=&quot;noreferrer&quot;&gt;Click here to access it and add it to Chrome&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;After adding it, toggle it to the &lt;em&gt;on&lt;/em&gt; position to allow cross-domain requests.&lt;/p&gt;\n    ","\n&lt;p&gt;Used below command in Ubuntu to start chrome (disable same origin policy and open chrome in detached mode):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;nohup google-chrome --disable-web-security --user-data-dir=&lt;span class=&quot;hljs-string&quot;&gt;&apos;/tmp&apos;&lt;/span&gt; &amp;amp;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For Windows:&lt;/p&gt;\n\n&lt;p&gt;(using &lt;strong&gt;windows 8.1, chrome 44.0&lt;/strong&gt;) &lt;/p&gt;\n\n&lt;p&gt;First, close google chrome.&lt;/p&gt;\n\n&lt;p&gt;Then, open command prompt and go to the folder where &apos;chrome.exe&apos; is.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;me&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;chrome.exe&apos;&lt;/span&gt; is here &lt;span class=&quot;hljs-string&quot;&gt;&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application&quot;&lt;/span&gt;.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So I type: \n    &lt;code&gt;cd C:\\Program Files (x86)\\Google\\Chrome\\Application&lt;/code&gt; )&lt;/p&gt;\n\n&lt;p&gt;now type: &lt;code&gt;chrome.exe --disable-web-security&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;a new window of chrome will open.&lt;/p&gt;\n    ","\n&lt;p&gt;On a Windows PC, use an older version of Chrome and the command will work for all you guys. \nI downgraded my Chrome to 26 version and it worked.&lt;/p&gt;\n    "]},"page":"51","randomQuestions":[{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"What is the difference between == and equals() in Java?","slug":"what-is-the-difference-between-and-equals()-in-java-1657387729654"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445"},{"title":"How can I make an AJAX call without jQuery?","slug":"how-can-i-make-an-ajax-call-without-jquery-1657388448955"},{"title":"Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()","slug":"truth-value-of-a-series-is-ambiguous.-use-a.empty-a.bool()-a.item()-a.any()-or-a.all()-1657387724259"},{"title":"Arrays, linked lists and other data structures in cmd.exe (batch) script","slug":"arrays-linked-lists-and-other-data-structures-in-cmd.exe-(batch)-script-1657387558484"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Understanding slicing","slug":"understanding-slicing-1657384397680"},{"title":"How can I get useful error messages in PHP?","slug":"how-can-i-get-useful-error-messages-in-php-1657384609065"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"What is a stack trace, and how can I use it to debug my application errors?","slug":"what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors-1657384750732"},{"title":"JSTL in JSF2 Facelets... makes sense?","slug":"jstl-in-jsf2-facelets...-makes-sense-1657387667435"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"Remove duplicate values from JS array [duplicate]","slug":"remove-duplicate-values-from-js-array-duplicate-1657387801931"},{"title":"Generating random whole numbers in JavaScript in a specific range","slug":"generating-random-whole-numbers-in-javascript-in-a-specific-range-1657388112728"},{"title":"How does Access-Control-Allow-Origin header work?","slug":"how-does-access-control-allow-origin-header-work-1657384881723"},{"title":"JQuery - $ is not defined","slug":"jquery-dollar-is-not-defined-1657388385731"},{"title":"Should I avoid the use of set(Preferred|Maximum|Minimum)Size methods in Java Swing?","slug":"should-i-avoid-the-use-of-set(preferredormaximumorminimum)size-methods-in-java-swing-1657384628399"}]},"__N_SSG":true}