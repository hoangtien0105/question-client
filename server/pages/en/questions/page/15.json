{"pageProps":{"data":{"count":610,"rows":[{"id":540,"title":"Templated check for the existence of a class member function?","slug":"templated-check-for-the-existence-of-a-class-member-function-1657388363414","postType":"QUESTION","createdAt":"2022-07-09T17:39:23.000Z","updatedAt":"2022-07-09T17:39:23.000Z","tags":[{"id":2640,"name":"template-meta-programming","slug":"template-meta-programming","createdAt":"2022-07-09T17:39:23.000Z","updatedAt":"2022-07-09T17:39:23.000Z","Questions_Tags":{"questionId":540,"tagId":2640}},{"id":2641,"name":"sfinae","slug":"sfinae","createdAt":"2022-07-09T17:39:23.000Z","updatedAt":"2022-07-09T17:39:23.000Z","Questions_Tags":{"questionId":540,"tagId":2641}}]},{"id":539,"title":"Why do I need to override the equals and hashCode methods in Java?","slug":"why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java-1657388359877","postType":"QUESTION","createdAt":"2022-07-09T17:39:19.000Z","updatedAt":"2022-07-09T17:39:19.000Z","tags":[]},{"id":538,"title":"Sort (order) data frame rows by multiple columns","slug":"sort-(order)-data-frame-rows-by-multiple-columns-1657388355671","postType":"QUESTION","createdAt":"2022-07-09T17:39:15.000Z","updatedAt":"2022-07-09T17:39:15.000Z","tags":[]},{"id":537,"title":"Where should I put <script> tags in HTML markup?","slug":"where-should-i-put-lessscriptgreater-tags-in-html-markup-1657388350798","postType":"QUESTION","createdAt":"2022-07-09T17:39:10.000Z","updatedAt":"2022-07-09T17:39:10.000Z","tags":[]},{"id":536,"title":"How do I profile a Python script?","slug":"how-do-i-profile-a-python-script-1657388346692","postType":"QUESTION","createdAt":"2022-07-09T17:39:06.000Z","updatedAt":"2022-07-09T17:39:06.000Z","tags":[]}]},"answers":{"536":["\n&lt;p&gt;Python includes a profiler called &lt;a href=&quot;https://docs.python.org/3/library/profile.html#module-cProfile&quot; rel=&quot;noreferrer&quot;&gt;cProfile&lt;/a&gt;. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.&lt;/p&gt;\n\n&lt;p&gt;You can call it from within your code, or from the interpreter, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile\ncProfile.run(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo()&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even more usefully, you can invoke the cProfile when running a script:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile myscript.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To make it even easier, I made a little batch file called &apos;profile.bat&apos;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile %&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So all I have to do is run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;profile euler048.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And I get this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(&amp;lt;lambda&amp;gt;)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(&amp;lt;module&amp;gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method &apos;disable&apos; of &apos;_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: Updated link to a good video resource from PyCon 2013 titled \n&lt;a href=&quot;https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;em&gt;Python Profiling&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://www.youtube.com/watch?v=QJwVYlDzAXs&quot; rel=&quot;noreferrer&quot;&gt;Also via YouTube&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;A while ago I made &lt;a href=&quot;http://pycallgraph.slowchop.com/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pycallgraph&lt;/code&gt;&lt;/a&gt; which generates a visualisation from your Python code. &lt;strong&gt;Edit:&lt;/strong&gt; I&apos;ve updated the example to work with 3.3, the latest release as of this writing.&lt;/p&gt;\n\n&lt;p&gt;After a &lt;code&gt;pip install pycallgraph&lt;/code&gt; and installing &lt;a href=&quot;http://www.graphviz.org/&quot; rel=&quot;noreferrer&quot;&gt;GraphViz&lt;/a&gt; you can run it from the command line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pycallgraph graphviz -- ./mypythonscript.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, you can profile particular parts of your code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pycallgraph &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; PyCallGraph\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pycallgraph.output &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; GraphvizOutput\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; PyCallGraph(output=GraphvizOutput()):\n    code_to_profile()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Either of these will generate a &lt;code&gt;pycallgraph.png&lt;/code&gt; file similar to the image below:&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/aiNEA.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s worth pointing out that using the profiler only works (by default) on the main thread, and you won&apos;t get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the &lt;a href=&quot;http://docs.python.org/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;profiler documentation&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you also want to profile threads, you&apos;ll want to look at the &lt;a href=&quot;http://docs.python.org/library/threading.html#threading.setprofile&quot; rel=&quot;noreferrer&quot; title=&quot;threading.setprofile() function&quot;&gt;&lt;code&gt;threading.setprofile()&lt;/code&gt; function&lt;/a&gt; in the docs.&lt;/p&gt;\n\n&lt;p&gt;You could also create your own &lt;code&gt;threading.Thread&lt;/code&gt; subclass to do it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProfiledThread&lt;/span&gt;(threading.Thread):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Overrides threading.Thread.run()&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        profiler = cProfile.Profile()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; profiler.runcall(threading.Thread.run, self)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n            profiler.dump_stats(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myprofile-%d.profile&apos;&lt;/span&gt; % (self.ident,))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and use that &lt;code&gt;ProfiledThread&lt;/code&gt; class instead of the standard one.  It might give you more flexibility, but I&apos;m not sure it&apos;s worth it, especially if you are using third-party code which wouldn&apos;t use your class.&lt;/p&gt;\n    ","\n&lt;p&gt;The python wiki is a great page for profiling resources:\n&lt;a href=&quot;http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code&quot; rel=&quot;noreferrer&quot;&gt;http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;as is the python docs:\n&lt;a href=&quot;http://docs.python.org/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.python.org/library/profile.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;as shown by Chris Lawlor cProfile is a great tool and can easily be used to print to the screen:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile -s time mine.py &amp;lt;args&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or to file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile -o output.file mine.py &amp;lt;args&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS&amp;gt; If you are using Ubuntu, make sure to install python-profile&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;apt-get install python-profiler \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you output to file you can get nice visualizations using the following tools&lt;/p&gt;\n\n&lt;p&gt;PyCallGraph : a tool to create call graph images &lt;br&gt;\n  install:&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; pip install pycallgraph\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; pycallgraph mine.py args\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;view:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; gimp pycallgraph.png\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;You can use whatever you like to view the png file, I used gimp&lt;/em&gt;&lt;br&gt;\nUnfortunately I often get &lt;/p&gt;\n\n&lt;p&gt;dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.257079 to fit&lt;/p&gt;\n\n&lt;p&gt;which makes my images unusably small.  So I generally create svg files:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pycallgraph -f svg -o pycallgraph.svg mine.py &amp;lt;args&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS&amp;gt; make sure to install graphviz (which provides the dot program):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install graphviz\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternative Graphing using gprof2dot via @maxy / @quodlibetor :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install gprof2dot\npython -m cProfile -o profile.pstats mine.py\ngprof2dot -f pstats profile.pstats | dot -Tsvg -o mine.svg\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;@Maxy&apos;s comment on &lt;a href=&quot;https://stackoverflow.com/a/7693928/25616&quot;&gt;this answer&lt;/a&gt; helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn&apos;t want to re-run things with pycallgraph, so I used &lt;a href=&quot;https://github.com/jrfonseca/gprof2dot&quot; rel=&quot;noreferrer&quot;&gt;gprof2dot&lt;/a&gt;, and got pretty svgs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ sudo apt-get install graphviz\n$ git clone https://github.com/jrfonseca/gprof2dot\n$ ln -s &lt;span class=&quot;hljs-string&quot;&gt;&quot;$PWD&quot;&lt;/span&gt;/gprof2dot/gprof2dot.py ~/&lt;span class=&quot;hljs-built_in&quot;&gt;bin&lt;/span&gt;\n$ cd $PROJECT_DIR\n$ gprof2dot.py -f pstats profile.pstats | dot -Tsvg -o callgraph.svg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and BLAM!&lt;/p&gt;\n&lt;p&gt;It uses dot (the same thing that pycallgraph uses) so output looks similar. I get the impression that gprof2dot loses less information though:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JjSvt.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JjSvt.png&quot; alt=&quot;gprof2dot example output&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Simplest&lt;/strong&gt; and &lt;strong&gt;quickest&lt;/strong&gt; way to find where all the time is going.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; pip install snakeviz\n\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; python -m cProfile -o temp.dat &amp;lt;PROGRAM&amp;gt;.py\n\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; snakeviz temp.dat\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Draws a pie chart in a browser. Biggest piece is the problem function. Very simple.&lt;/p&gt;\n    ","\n&lt;p&gt;I ran into a handy tool called &lt;a href=&quot;https://jiffyclub.github.io/snakeviz/&quot;&gt;SnakeViz&lt;/a&gt; when researching this topic. SnakeViz is a web-based profiling visualization tool. It is very easy to install and use. The usual way I use it is to generate a stat file with &lt;code&gt;%prun&lt;/code&gt; and then do analysis in SnakeViz.&lt;/p&gt;\n\n&lt;p&gt;The main viz technique used is &lt;strong&gt;Sunburst chart&lt;/strong&gt; as shown below, in which the hierarchy of function calls is arranged as layers of arcs and time info encoded in their angular widths.&lt;/p&gt;\n\n&lt;p&gt;The best thing is you can interact with the chart. For example, to zoom in one can click on an arc, and the arc and its descendants will be enlarged as a new sunburst to display more details.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/kCmSY.png&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/kCmSY.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; is great for profiling, while &lt;a href=&quot;https://kcachegrind.github.io/html/Home.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;kcachegrind&lt;/code&gt;&lt;/a&gt; is great for visualizing the results. The &lt;a href=&quot;https://pypi.python.org/pypi/pyprof2calltree&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pyprof2calltree&lt;/code&gt;&lt;/a&gt; in between handles the file conversion.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python -m cProfile -o script.profile script.py\npyprof2calltree -i script.profile -o script.calltree\nkcachegrind script.calltree\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Required system packages:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;kcachegrind&lt;/code&gt; (Linux), &lt;code&gt;qcachegrind&lt;/code&gt; (MacOs)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Setup on Ubuntu:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;apt-get install kcachegrind \npip install pyprof2calltree\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/1TFZe.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/1TFZe.png&quot; alt=&quot;Screenshot of the result&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I recently created &lt;a href=&quot;https://github.com/nschloe/tuna&quot; rel=&quot;noreferrer&quot;&gt;tuna&lt;/a&gt; for visualizing Python runtime and import profiles; this may be helpful here.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZpP6M.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZpP6M.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Install with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install tuna\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Create a runtime profile&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python3 -m cProfile -o program.prof yourfile.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or an import profile (Python 3.7+ required)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;python3 -X importprofile yourfile.py &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt;.log\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then just run tuna on the file&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;tuna program.prof\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also worth mentioning is the GUI cProfile dump viewer &lt;a href=&quot;http://www.vrplumber.com/programming/runsnakerun/&quot;&gt;RunSnakeRun&lt;/a&gt;.  It allows you to sort and select, thereby zooming in on the relevant parts of the program.  The sizes of the rectangles in the picture is proportional to the time taken.  If you mouse over a rectangle it highlights that call in the table and everywhere on the map.  When you double-click on a rectangle it zooms in on that portion.  It will show you who calls that portion and what that portion calls.&lt;/p&gt;\n\n&lt;p&gt;The descriptive information is very helpful.  It shows you the code for that bit which can be helpful when you are dealing with built-in library calls.  It tells you what file and what line to find the code.&lt;/p&gt;\n\n&lt;p&gt;Also want to point at that the OP said &apos;profiling&apos; but it appears he meant &apos;timing&apos;.  Keep in mind programs will run slower when profiled.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/2GahD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;pprofile&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt; (already presented here) also inspired  &lt;a href=&quot;https://github.com/vpelletier/pprofile&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pprofile&lt;/code&gt;&lt;/a&gt;, which is described as:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Line-granularity, thread-aware deterministic and statistic pure-python\n  profiler&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It provides line-granularity as &lt;code&gt;line_profiler&lt;/code&gt;, is pure Python, can be used as a standalone command or a module, and can even generate callgrind-format files that can be easily analyzed with &lt;code&gt;[k|q]cachegrind&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;vprof&lt;/h1&gt;\n\n&lt;p&gt;There is also &lt;a href=&quot;https://github.com/nvdv/vprof&quot; rel=&quot;noreferrer&quot;&gt;vprof&lt;/a&gt;, a Python package described as:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;[...] providing rich and interactive visualizations for various Python program characteristics such as running time and memory usage.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uafO3.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uafO3.png&quot; alt=&quot;heatmap&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded &lt;a href=&quot;http://packages.python.org/line_profiler/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;My understanding is that cProfile only gives information about total time spent in each function.  So individual lines of code are not timed.  This is an issue in scientific computing since often one single line can take a lot of time.  Also, as I remember, cProfile didn&apos;t catch the time I was spending in say numpy.dot.&lt;/p&gt;\n    ","\n&lt;p&gt;The terminal-only (and simplest) solution, in case all those fancy UI&apos;s fail to install or to run:&lt;br&gt;\nignore &lt;code&gt;cProfile&lt;/code&gt; completely and replace it with &lt;code&gt;pyinstrument&lt;/code&gt;, that will collect and display the tree of calls right after execution.&lt;/p&gt;\n\n&lt;p&gt;Install:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ pip install pyinstrument\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Profile and display result:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python -m pyinstrument ./prog.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Works with python2 and 3.&lt;/p&gt;\n\n&lt;p&gt;[EDIT]\nThe documentation of the API, for profiling only a part of the code, can be found &lt;a href=&quot;https://github.com/joerick/pyinstrument#profile-a-specific-chunk-of-code&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a lot of great answers but they either use command line or some external program for profiling and/or sorting the results.&lt;/p&gt;\n&lt;p&gt;I really missed some way I could use in my IDE (eclipse-PyDev) without touching the command line or installing anything. So here it is.&lt;/p&gt;\n&lt;h1&gt;Profiling without command line&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;count&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sqrt\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n        sqrt(x)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile, pstats\n    cProfile.run(&lt;span class=&quot;hljs-string&quot;&gt;&quot;count()&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;{}.profile&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__file__))\n    s = pstats.Stats(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{}.profile&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__file__))\n    s.strip_dirs()\n    s.sort_stats(&lt;span class=&quot;hljs-string&quot;&gt;&quot;time&quot;&lt;/span&gt;).print_stats(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See &lt;a href=&quot;https://docs.python.org/3.4/library/profile.html&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; or other answers for more info.&lt;/p&gt;\n    ","\n&lt;p&gt;Following Joe Shaw&apos;s answer about multi-threaded code not to work as expected, I figured that the &lt;code&gt;runcall&lt;/code&gt; method in cProfile is merely doing &lt;code&gt;self.enable()&lt;/code&gt; and &lt;code&gt;self.disable()&lt;/code&gt; calls around the profiled function call, so you can simply do that yourself and have whatever code you want in-between with minimal interference with existing code.&lt;/p&gt;\n    ","\n&lt;p&gt;With a statistical profiler like &lt;a href=&quot;https://github.com/P403n1x87/austin&quot; rel=&quot;noreferrer&quot;&gt;austin&lt;/a&gt;, no instrumentation is required, meaning that you can get profiling data out of a Python application simply with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;austin python3 my_script.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The raw output isn&apos;t very useful, but you can pipe that to &lt;a href=&quot;https://github.com/brendangregg/FlameGraph/blob/master/flamegraph.pl&quot; rel=&quot;noreferrer&quot;&gt;flamegraph.pl&lt;/a&gt;\nto get a flame graph representation of that data that gives you a breakdown of where the time (measured in microseconds of real time) is being spent.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;austin python3 my_script.py | flamegraph.pl &amp;gt; my_script_profile.svg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, you can also use the web application &lt;a href=&quot;http://speedscope.app/&quot; rel=&quot;noreferrer&quot;&gt;Speedscope.app&lt;/a&gt; for quick visualisation of the collected samples. If you have &lt;a href=&quot;https://github.com/google/pprof&quot; rel=&quot;noreferrer&quot;&gt;pprof&lt;/a&gt; installed, you can also get &lt;a href=&quot;https://github.com/P403n1x87/austin-python&quot; rel=&quot;noreferrer&quot;&gt;austin-python&lt;/a&gt; (with e.g. &lt;code&gt;pipx install austin-python&lt;/code&gt;) and use the &lt;code&gt;austin2pprof&lt;/code&gt; to covert to the pprof format.&lt;/p&gt;\n&lt;p&gt;However, if you have VS Code installed you could use the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode&quot; rel=&quot;noreferrer&quot;&gt;Austin extension&lt;/a&gt; for a more interactive experience, with source code heat maps, top functions and collected call stacks&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://github.com/P403n1x87/austin-vscode/raw/main/art/demo.gif&quot; alt=&quot;Austin VS Code extension&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In Virtaal&apos;s &lt;a href=&quot;https://github.com/translate/virtaal/blob/master/devsupport/profiling.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;source&lt;/a&gt; there&apos;s a very useful class and decorator that can make profiling (even for specific methods/functions) very easy. The output can then be viewed very comfortably in KCacheGrind.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to make a cumulative profiler,\nmeaning to run the function several times in a row and watch the sum of the results.&lt;/p&gt;\n\n&lt;p&gt;you can use this &lt;code&gt;cumulative_profiler&lt;/code&gt; decorator:&lt;/p&gt;\n\n&lt;p&gt;it&apos;s python &amp;gt;= 3.6 specific, but you can remove &lt;code&gt;nonlocal&lt;/code&gt; for it work on older versions.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile, pstats\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;_ProfileFunc&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, func, sort_stats_by&lt;/span&gt;):\n        self.func =  func\n        self.profile_runs = []\n        self.sort_stats_by = sort_stats_by\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__call__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args, **kwargs&lt;/span&gt;):\n        pr = cProfile.Profile()\n        pr.enable()  &lt;span class=&quot;hljs-comment&quot;&gt;# this is the profiling section&lt;/span&gt;\n        retval = self.func(*args, **kwargs)\n        pr.disable()\n\n        self.profile_runs.append(pr)\n        ps = pstats.Stats(*self.profile_runs).sort_stats(self.sort_stats_by)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retval, ps\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cumulative_profiler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;amount_of_times, sort_stats_by=&lt;span class=&quot;hljs-string&quot;&gt;&apos;time&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;real_decorator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwargs&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;nonlocal&lt;/span&gt; function, amount_of_times, sort_stats_by  &lt;span class=&quot;hljs-comment&quot;&gt;# for python 2.x remove this row&lt;/span&gt;\n\n            profiled_func = _ProfileFunc(function, sort_stats_by)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(amount_of_times):\n                retval, ps = profiled_func(*args, **kwargs)\n            ps.print_stats()\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retval  &lt;span class=&quot;hljs-comment&quot;&gt;# returns the results of the function&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;callable&lt;/span&gt;(amount_of_times):  &lt;span class=&quot;hljs-comment&quot;&gt;# incase you don&apos;t want to specify the amount of times&lt;/span&gt;\n        func = amount_of_times  &lt;span class=&quot;hljs-comment&quot;&gt;# amount_of_times is the function in here&lt;/span&gt;\n        amount_of_times = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# the default amount&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; real_decorator(func)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; real_decorator\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;profiling the function &lt;code&gt;baz&lt;/code&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@cumulative_profiler&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;():\n    time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    time.sleep(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nbaz()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;baz&lt;/code&gt; ran 5 times and printed this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;         &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; function calls &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt; seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n       &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.500&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1.500&lt;/span&gt; {built-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; method time.sleep}\n        &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;15.003&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3.001&lt;/span&gt; &amp;lt;ipython-&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-c89afe010372&amp;gt;:&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;(baz)\n        &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.000&lt;/span&gt; {method &lt;span class=&quot;hljs-string&quot;&gt;&apos;disable&apos;&lt;/span&gt; of &lt;span class=&quot;hljs-string&quot;&gt;&apos;_lsprof.Profiler&apos;&lt;/span&gt; objects}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;specifying the amount of times&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@cumulative_profiler(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;baz&lt;/span&gt;():\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For getting quick profile stats on an IPython notebook.\nOne can embed &lt;strong&gt;line_profiler&lt;/strong&gt; and &lt;strong&gt;memory_profiler&lt;/strong&gt; straight into their notebooks.&lt;/p&gt;\n&lt;p&gt;Another useful package is &lt;strong&gt;Pympler&lt;/strong&gt;. It is a powerful profiling package that&apos;s capable to track classes,objects,functions,memory leaks etc. Examples below, Docs attached.&lt;/p&gt;\n&lt;h2&gt;Get it!&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;!pip install line_profiler\n!pip install memory_profiler\n!pip install pympler\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Load it!&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%load_ext line_profiler\n%load_ext memory_profiler\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Use it!&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h1&gt;%time&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%time &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Outputs CPU time,Wall Clock time&apos;&lt;/span&gt;) \n&lt;span class=&quot;hljs-comment&quot;&gt;#CPU times: user 2 µs, sys: 0 ns, total: 2 µs Wall time: 5.96 µs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;CPU times: CPU level execution time&lt;/li&gt;\n&lt;li&gt;sys times: system level execution time&lt;/li&gt;\n&lt;li&gt;total: CPU time + system time&lt;/li&gt;\n&lt;li&gt;Wall time: Wall Clock Time&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;%timeit&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%timeit -r &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; -n &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Outputs execution time of the snippet&apos;&lt;/span&gt;) \n&lt;span class=&quot;hljs-comment&quot;&gt;#1000 loops, best of 7: 7.46 ns per loop&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Gives best time out of given number of runs(r) in looping (n) times.&lt;/li&gt;\n&lt;li&gt;Outputs details on system caching:\n&lt;ul&gt;\n&lt;li&gt;When code snippets are executed multiple times, system caches a few opearations and doesn&apos;t execute them again that may hamper the accuracy of the profile reports.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;%prun&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%prun -s cumulative &lt;span class=&quot;hljs-string&quot;&gt;&apos;Code to profile&apos;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;number of function calls(ncalls)&lt;/li&gt;\n&lt;li&gt;has entries per function call(distinct)&lt;/li&gt;\n&lt;li&gt;time taken per call(percall)&lt;/li&gt;\n&lt;li&gt;time elapsed till that function call(cumtime)&lt;/li&gt;\n&lt;li&gt;name of the func/module called etc...&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/1IkgA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/1IkgA.png&quot; alt=&quot;Cumulative profile&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;%memit&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%memit &lt;span class=&quot;hljs-string&quot;&gt;&apos;Code to profile&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#peak memory: 199.45 MiB, increment: 0.00 MiB&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Memory usage&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;%lprun&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Example function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Usage: %lprun &amp;lt;name_of_the_function&amp;gt; function&lt;/span&gt;\n%lprun -f fun fun()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Gives:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Line wise stats&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rusPA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rusPA.png&quot; alt=&quot;LineProfile&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;sys.getsizeof&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;sys.getsizeof(&lt;span class=&quot;hljs-string&quot;&gt;&apos;code to profile&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# 64 bytes&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Returns the size of an object in bytes.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;asizeof() from pympler&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pympler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; asizeof\nobj = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hey&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;ha&quot;&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(asizeof.asizeof(obj,stats=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;pympler.asizeof can be used to investigate how much memory certain Python objects consume.\nIn contrast to sys.getsizeof, asizeof sizes objects recursively&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/8jxQX.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8jxQX.png&quot; alt=&quot;pympler.asizeof&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;tracker from pympler&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pympler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tracker\ntr = tracker.SummaryTracker()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fun&lt;/span&gt;():\n  li = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n  di = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;ha&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;haha&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;duh&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Umm&quot;&lt;/span&gt;}\nfun()\ntr.print_diff()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Tracks the lifetime of a function.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SrRj9.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SrRj9.png&quot; alt=&quot;tracker output&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Pympler package consists of a huge number of high utility functions to profile code. All of which cannot be covered here. See the documentation attached for verbose profile implementations.&lt;/p&gt;\n&lt;h3&gt;Pympler &lt;a href=&quot;https://readthedocs.org/projects/pympler/downloads/pdf/latest/&quot; rel=&quot;noreferrer&quot;&gt;doc&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;Recently I created a plugin for PyCharm with which you can easily analyse and visualise the results of &lt;code&gt;line_profiler&lt;/code&gt; in the PyCharm editor.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt; has been mentioned in other answers as well and is a great tool to analyse exactly how much time is spent by the python interpreter in certain lines.&lt;/p&gt;\n&lt;p&gt;The PyCharm plugin I&apos;ve created can be found here:\n&lt;a href=&quot;https://plugins.jetbrains.com/plugin/16536-line-profiler&quot; rel=&quot;noreferrer&quot;&gt;https://plugins.jetbrains.com/plugin/16536-line-profiler&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It needs a helper package in your python environment called &lt;code&gt;line-profiler-pycharm&lt;/code&gt; which can be installed with pip or by the plugin itself.&lt;/p&gt;\n&lt;p&gt;After installing the plugin in PyCharm:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Decorate any function you want to profile with the &lt;code&gt;line_profiler_pycharm.profile&lt;/code&gt; decorator&lt;/li&gt;\n&lt;li&gt;Run with the &apos;Profile Lines&apos; runner&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Screenshot of results:\n&lt;a href=&quot;https://i.stack.imgur.com/nj0LP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nj0LP.png&quot; alt=&quot;Line Profiler Pycharm results&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;cProfile is great for quick profiling but most of the time it was ending for me with the errors. Function runctx solves this problem by initializing correctly the environment and variables, hope it can be useful for someone:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; cProfile\ncProfile.runctx(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo()&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;locals&lt;/span&gt;())\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;gprof2dot_magic&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Magic function for &lt;code&gt;gprof2dot&lt;/code&gt; to profile any Python statement as a DOT graph in JupyterLab or Jupyter Notebook.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/IE4Py.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/IE4Py.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub repo: &lt;a href=&quot;https://github.com/mattijn/gprof2dot_magic&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/mattijn/gprof2dot_magic&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Make sure you&apos;ve the Python package &lt;code&gt;gprof2dot_magic&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install gprof2dot_magic\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Its dependencies &lt;code&gt;gprof2dot&lt;/code&gt; and &lt;code&gt;graphviz&lt;/code&gt; will be installed as well&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To enable the magic function, first load the &lt;code&gt;gprof2dot_magic&lt;/code&gt; module&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%load_ext gprof2dot_magic\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then profile any line statement as a DOT graph as such:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%gprof2dot &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello world&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/fiGeD.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/fiGeD.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;My way is to use yappi (&lt;a href=&quot;https://github.com/sumerc/yappi&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sumerc/yappi&lt;/a&gt;). It&apos;s especially useful combined with an RPC server where (even just for debugging) you register method to start, stop and print profiling information, e.g. in this way: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;startProfiler&lt;/span&gt;():\n    yappi.start()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;stopProfiler&lt;/span&gt;():\n    yappi.stop()\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printProfiler&lt;/span&gt;():\n    stats = yappi.get_stats(yappi.SORTTYPE_TTOT, yappi.SORTORDER_DESC, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n    statPrint = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;\n    namesArr = [&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stat &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stats.func_stats]\n    log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;namesArr %s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(namesArr))\n    maxNameLen = &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(namesArr)\n    log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxNameLen: %s&quot;&lt;/span&gt;, maxNameLen)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; stat &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; stats.func_stats:\n        nameAppendSpaces = [&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(maxNameLen - &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))]\n        log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&apos;nameAppendSpaces: %s&apos;&lt;/span&gt;, nameAppendSpaces)\n        blankSpace = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; space &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nameAppendSpaces:\n            blankSpace += space\n\n        log.debug(&lt;span class=&quot;hljs-string&quot;&gt;&quot;adding spaces: %s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(nameAppendSpaces))\n        statPrint = statPrint + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + blankSpace + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]).ljust(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(\n            &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)).ljust(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; - &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]))) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;(stat[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;\n\n    log.log(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nname&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;.ljust(maxNameLen - &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; ncall \\tttot \\ttsub&quot;&lt;/span&gt;)\n    log.log(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, statPrint)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then when your program work you can start profiler at any time by calling the &lt;code&gt;startProfiler&lt;/code&gt; RPC method and dump profiling information to a log file by calling &lt;code&gt;printProfiler&lt;/code&gt; (or modify the rpc method to return it to the caller) and get such output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-02-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;-|SVR-MAIN  |-(Thread-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   )-Level &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;: \nname                                                                                                                                      ncall     ttot    tsub\n&lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-02-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;-|SVR-MAIN  |-(Thread-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   )-Level &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;: \nC:\\Python27\\lib\\sched.py.run:&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;                                                                                                           &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\xmlRpc.py.iterFnc:&lt;span class=&quot;hljs-number&quot;&gt;293&lt;/span&gt;                                                &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\serverMain.py.makeIteration:&lt;span class=&quot;hljs-number&quot;&gt;515&lt;/span&gt;                                                    &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;hljs-number&quot;&gt;0.11&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\PicklingXMLRPC.py._dispatch:&lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;                                       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\BaseHTTPServer.py.date_time_string:&lt;span class=&quot;hljs-number&quot;&gt;464&lt;/span&gt;                                                                                    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nc:\\users\\zasiec~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;-py2&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;-win32.egg.tmp\\psutil\\_psmswindows.py._get_raw_meminfo:&lt;span class=&quot;hljs-number&quot;&gt;243&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.decode_request_content:&lt;span class=&quot;hljs-number&quot;&gt;537&lt;/span&gt;                                                                          &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nc:\\users\\zasiec~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;-py2&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;-win32.egg.tmp\\psutil\\_psmswindows.py.get_system_cpu_times:&lt;span class=&quot;hljs-number&quot;&gt;148&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&amp;lt;string&amp;gt;.__new__:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                                                                                                        &lt;span class=&quot;hljs-number&quot;&gt;220&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\socket.py.close:&lt;span class=&quot;hljs-number&quot;&gt;276&lt;/span&gt;                                                                                                       &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\threading.py.__init__:&lt;span class=&quot;hljs-number&quot;&gt;558&lt;/span&gt;                                                                                                 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\n&amp;lt;string&amp;gt;.__new__:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;                                                                                                                        &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\threading.py.notify:&lt;span class=&quot;hljs-number&quot;&gt;372&lt;/span&gt;                                                                                                   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\rfc822.py.getheader:&lt;span class=&quot;hljs-number&quot;&gt;285&lt;/span&gt;                                                                                                   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\BaseHTTPServer.py.handle_one_request:&lt;span class=&quot;hljs-number&quot;&gt;301&lt;/span&gt;                                                                                  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\xmlrpclib.py.end:&lt;span class=&quot;hljs-number&quot;&gt;816&lt;/span&gt;                                                                                                      &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.do_POST:&lt;span class=&quot;hljs-number&quot;&gt;467&lt;/span&gt;                                                                                         &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.is_rpc_path_valid:&lt;span class=&quot;hljs-number&quot;&gt;460&lt;/span&gt;                                                                               &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nC:\\Python27\\lib\\SocketServer.py.close_request:&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;                                                                                         &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;\nc:\\users\\zasiec~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;-py2&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;-win32.egg.tmp\\psutil\\__init__.py.cpu_times:&lt;span class=&quot;hljs-number&quot;&gt;1066&lt;/span&gt;               &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It may not be very useful for short scripts but helps to optimize server-type processes especially given the &lt;code&gt;printProfiler&lt;/code&gt; method can be called multiple times over time to profile and compare e.g. different program usage scenarios. &lt;/p&gt;\n\n&lt;p&gt;In newer versions of yappi, the following code will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@staticmethod&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printProfile&lt;/span&gt;():\n    yappi.get_func_stats().print_all()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To add on to &lt;a href=&quot;https://stackoverflow.com/a/582337/1070617&quot;&gt;https://stackoverflow.com/a/582337/1070617&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;I wrote this module that allows you to use cProfile and view its output easily. More here: &lt;a href=&quot;https://github.com/ymichael/cprofilev&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/ymichael/cprofilev&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python -m cprofilev /your/python/program\n&lt;span class=&quot;hljs-comment&quot;&gt;# Go to http://localhost:4000 to view collected statistics.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also see: &lt;a href=&quot;http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html&lt;/a&gt; on how to make sense of the collected statistics.&lt;/p&gt;\n    ","\n&lt;p&gt;A new tool to handle profiling in Python is PyVmMonitor: &lt;a href=&quot;http://www.pyvmmonitor.com/&quot; rel=&quot;noreferrer&quot;&gt;http://www.pyvmmonitor.com/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It has some unique features such as&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Attach profiler to a running (CPython) program&lt;/li&gt;\n&lt;li&gt;On demand profiling with Yappi integration&lt;/li&gt;\n&lt;li&gt;Profile on a different machine&lt;/li&gt;\n&lt;li&gt;Multiple processes support (multiprocessing, django...)&lt;/li&gt;\n&lt;li&gt;Live sampling/CPU view (with time range selection)&lt;/li&gt;\n&lt;li&gt;Deterministic profiling through cProfile/profile integration&lt;/li&gt;\n&lt;li&gt;Analyze existing PStats results&lt;/li&gt;\n&lt;li&gt;Open DOT files&lt;/li&gt;\n&lt;li&gt;Programatic API access&lt;/li&gt;\n&lt;li&gt;Group samples by method or line&lt;/li&gt;\n&lt;li&gt;PyDev integration&lt;/li&gt;\n&lt;li&gt;PyCharm integration&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note: it&apos;s commercial, but free for open source.&lt;/p&gt;\n    ","\n&lt;p&gt;It would depend on what you want to see out of profiling. Simple time \nmetrics can be given by (bash). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;time python python_prog.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Even &apos;/usr/bin/time&apos; can output detailed metrics by using &apos;--verbose&apos; flag.&lt;/p&gt;\n\n&lt;p&gt;To check time metrics given by each function and to better understand how much time is spent on functions, you can use the inbuilt cProfile in python. &lt;/p&gt;\n\n&lt;p&gt;Going into more detailed metrics like performance, time is not the only metric. You can worry about memory, threads etc.&lt;br&gt;\nProfiling options:&lt;br&gt;\n1. &lt;strong&gt;line_profiler&lt;/strong&gt; is another profiler used commonly to find out timing metrics line-by-line.&lt;br&gt;\n2. &lt;strong&gt;memory_profiler&lt;/strong&gt; is a tool to profile memory usage.&lt;br&gt;\n3. &lt;strong&gt;heapy (from project Guppy)&lt;/strong&gt; Profile how objects in the heap are used. &lt;/p&gt;\n\n&lt;p&gt;These are some of the common ones I tend to use. But if you want to find out more, try reading this &lt;a href=&quot;http://shop.oreilly.com/product/0636920028963.do&quot; rel=&quot;noreferrer&quot;&gt;book&lt;/a&gt;\nIt is a pretty good book on starting out with performance in mind. You can move onto advanced topics on using Cython and JIT(Just-in-time) compiled python. &lt;/p&gt;\n    ","\n&lt;p&gt;I just developed my own profiler inspired from pypref_time:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/modaresimr/auto_profiler&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/modaresimr/auto_profiler&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;By adding a decorator it will show a tree of time-consuming functions&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;@Profiler(depth=4, on_disable=show)&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Install by: pip install auto_profiler\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Example&lt;/h1&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time &lt;span class=&quot;hljs-comment&quot;&gt;# line number 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; auto_profiler &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Profiler, Tree\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f1&lt;/span&gt;():\n    mysleep(&lt;span class=&quot;hljs-number&quot;&gt;.6&lt;/span&gt;+random.random())\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mysleep&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;t&lt;/span&gt;):\n    time.sleep(t)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fact&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;):\n    f1()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i*fact(i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Time   [Hits * PerHit] Function name [Called from] [Function Location]\\n&apos;&lt;/span&gt;+\\\n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------------------------------------------------&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(Tree(p.root, threshold=&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;))\n    \n&lt;span class=&quot;hljs-meta&quot;&gt;@Profiler(&lt;span class=&quot;hljs-params&quot;&gt;depth=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, on_disable=show&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n        f1()\n\n    fact(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    main()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Example Output&lt;/h2&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;\nTime   [Hits * PerHit] Function name [Called &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;] [function location]\n-----------------------------------------------------------------------\n&lt;span class=&quot;hljs-number&quot;&gt;8.974&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;8.974&lt;/span&gt;]  main  [auto-profiler/profiler.py:&lt;span class=&quot;hljs-number&quot;&gt;267&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]\n &lt;span class=&quot;hljs-number&quot;&gt;5.954&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.191&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n    &lt;span class=&quot;hljs-number&quot;&gt;5.954&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.191&lt;/span&gt;]  mysleep  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]\n        &lt;span class=&quot;hljs-number&quot;&gt;5.954&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.191&lt;/span&gt;]  &amp;lt;time.sleep&amp;gt;\n|\n|\n|   &lt;span class=&quot;hljs-comment&quot;&gt;# The rest is for the example recursive function call fact&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;3.020&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;3.020&lt;/span&gt;]  fact  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n     &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n        &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;]  mysleep  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]\n            &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.849&lt;/span&gt;]  &amp;lt;time.sleep&amp;gt;\n     &lt;span class=&quot;hljs-number&quot;&gt;2.171&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;2.171&lt;/span&gt;]  fact  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n         &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n            &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;1.552&lt;/span&gt;]  mysleep  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;]\n         &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;]  fact  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;]\n             &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;s [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.619&lt;/span&gt;]  f1  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]  [/test/t2.py:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Ever want to know what the hell that python script is doing? Enter the\n  Inspect Shell. Inspect Shell lets you print/alter globals and run\n  functions without interrupting the running script. Now with\n  auto-complete and command history (only on linux).&lt;/p&gt;\n  \n  &lt;p&gt;Inspect Shell is not a pdb-style debugger.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/amoffat/Inspect-Shell&quot; rel=&quot;nofollow&quot;&gt;https://github.com/amoffat/Inspect-Shell&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You could use that (and your wristwatch).&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s also a statistical profiler called &lt;a href=&quot;https://pypi.python.org/pypi/statprof/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;statprof&lt;/code&gt;&lt;/a&gt;. It&apos;s a sampling profiler, so it adds minimal overhead to your code and gives line-based (not just function-based) timings. It&apos;s more suited to soft real-time applications like games, but may be have less precision than cProfile.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;https://pypi.python.org/pypi/statprof/&quot; rel=&quot;nofollow noreferrer&quot;&gt;version in pypi&lt;/a&gt; is a bit old, so can install it with &lt;code&gt;pip&lt;/code&gt; by specifying &lt;a href=&quot;https://github.com/bos/statprof.py&quot; rel=&quot;nofollow noreferrer&quot;&gt;the git repository&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install git+git://github.com/bos/statprof.py@1a33eba91899afe17a8b752c6dfdec6f05dd0c01\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can run it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; statprof\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; statprof.profile():\n    my_questionable_function()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/a/10333592/320036&quot;&gt;https://stackoverflow.com/a/10333592/320036&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I found cprofiler and other ressources to be more for optimization purpose rather than debugging.&lt;/p&gt;\n&lt;p&gt;I made my own testing module instead for simple python scripts speed testing. (In my case 1K+ lines py file was tested using ScriptProfilerPy and speedup the code by 10x in minutes afterwards.&lt;/p&gt;\n&lt;p&gt;The module ScriptProfilerPy() will run your code adding timestamp to it.\nI put the module here:\n&lt;a href=&quot;https://github.com/Lucas-BLP/ScriptProfilerPy&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/Lucas-BLP/ScriptProfilerPy&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Use:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; speed_testpy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ScriptProfilerPy\n\nScriptProfilerPy(&lt;span class=&quot;hljs-string&quot;&gt;&quot;path_to_your_script_to_test.py&quot;&lt;/span&gt;).Profiler()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output:\n&lt;a href=&quot;https://i.stack.imgur.com/RkRZD.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RkRZD.png&quot; alt=&quot;Output of the code after testing&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "],"537":["\n&lt;p&gt;Here&apos;s what happens when a browser loads a website with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag on it:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Fetch the HTML page (e.g. &lt;em&gt;index.html&lt;/em&gt;)&lt;/li&gt;\n&lt;li&gt;Begin parsing the HTML&lt;/li&gt;\n&lt;li&gt;The parser encounters a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag referencing an external script file.&lt;/li&gt;\n&lt;li&gt;The browser requests the script file. Meanwhile, the parser blocks and stops parsing the other HTML on your page.&lt;/li&gt;\n&lt;li&gt;After some time the script is downloaded and subsequently executed.&lt;/li&gt;\n&lt;li&gt;The parser continues parsing the rest of the HTML document.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Step #4 causes a bad user experience. Your website basically stops loading until you&apos;ve downloaded all scripts. If there&apos;s one thing that users hate it&apos;s waiting for a website to load.&lt;/p&gt;\n&lt;h2&gt;Why does this even happen?&lt;/h2&gt;\n&lt;p&gt;Any script can insert its own HTML via &lt;code&gt;document.write()&lt;/code&gt; or other DOM manipulations. This implies that the parser has to wait until the script has been downloaded and executed before it can safely parse the rest of the document. After all, the script &lt;em&gt;could&lt;/em&gt; have inserted its own HTML in the document.&lt;/p&gt;\n&lt;p&gt;However, most JavaScript developers no longer manipulate the DOM &lt;em&gt;while&lt;/em&gt; the document is loading. Instead, they wait until the document has been loaded before modifying it. For example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My Page&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my-script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user-greeting&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Welcome back, user&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;JavaScript:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// my-script.js&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;DOMContentLoaded&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this function runs when the DOM is ready, i.e. when the document has been parsed&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user-greeting&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Welcome back, Bart&quot;&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because your browser does not know &lt;em&gt;my-script.js&lt;/em&gt; isn&apos;t going to modify the document until it has been downloaded and executed, the parser stops parsing.&lt;/p&gt;\n&lt;h2&gt;Antiquated recommendation&lt;/h2&gt;\n&lt;p&gt;The old approach to solving this problem was to put &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags at the bottom of your &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, because this ensures the parser isn&apos;t blocked until the very end.&lt;/p&gt;\n&lt;p&gt;This approach has its own problem: the browser cannot start downloading the scripts until the entire document is parsed. For larger websites with large scripts and stylesheets, being able to download the script as soon as possible is very important for performance. If your website doesn&apos;t load within 2 seconds, people will go to another website.&lt;/p&gt;\n&lt;p&gt;In an optimal solution, the browser would start downloading your scripts as soon as possible, while at the same time parsing the rest of your document.&lt;/p&gt;\n&lt;h2&gt;The modern approach&lt;/h2&gt;\n&lt;p&gt;Today, browsers support the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes on scripts. These attributes tell the browser it&apos;s safe to continue parsing while the scripts are being downloaded.&lt;/p&gt;\n&lt;h3&gt;async&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script1.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script2.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Scripts with the async attribute are executed asynchronously. This means the script is executed as soon as it&apos;s downloaded, without blocking the browser in the meantime.\nThis implies that it&apos;s possible that script 2 is downloaded and executed before script 1.&lt;/p&gt;\n&lt;p&gt;According to &lt;a href=&quot;http://caniuse.com/#feat=script-async&quot; rel=&quot;noreferrer&quot;&gt;http://caniuse.com/#feat=script-async&lt;/a&gt;, 97.78% of all browsers support this.&lt;/p&gt;\n&lt;h3&gt;defer&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script1.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;path/to/script2.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Scripts with the defer attribute are executed in order (i.e. first script 1, then script 2). This also does not block the browser.&lt;/p&gt;\n&lt;p&gt;Unlike async scripts, defer scripts are only executed after the entire document has been loaded.&lt;/p&gt;\n&lt;p&gt;According to &lt;a href=&quot;http://caniuse.com/#feat=script-defer&quot; rel=&quot;noreferrer&quot;&gt;http://caniuse.com/#feat=script-defer&lt;/a&gt;, 97.79% of all browsers support this. 98.06% support it at least partially.&lt;/p&gt;\n&lt;p&gt;An important note on browser compatibility: in some circumstances, Internet&amp;nbsp;Explorer 9 and earlier may execute deferred scripts out of order. If you need to support those browsers, please read &lt;a href=&quot;https://github.com/h5bp/lazyweb-requests/issues/42&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt; first!&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;(To learn more and see some really helpful visual representations of the differences between async, defer and normal scripts check the first two links at the references section of this answer)&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n&lt;p&gt;The current state-of-the-art is to put scripts in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag and use the &lt;code&gt;async&lt;/code&gt; or &lt;code&gt;defer&lt;/code&gt; attributes. This allows your scripts to be downloaded ASAP without blocking your browser.&lt;/p&gt;\n&lt;p&gt;The good thing is that your website should still load correctly on the 2% of browsers that do not support these attributes while speeding up the other 98%.&lt;/p&gt;\n&lt;h2&gt;References&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html&quot; rel=&quot;noreferrer&quot;&gt;async vs defer attributes&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://flaviocopes.com/javascript-async-defer/&quot; rel=&quot;noreferrer&quot;&gt;Efficiently load JavaScript with defer and async&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/docs/insights/BlockingJS&quot; rel=&quot;noreferrer&quot;&gt;Remove Render-Blocking JavaScript&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://gist.github.com/jakub-g/385ee6b41085303a53ad92c7c8afd7a6#visual-representation&quot; rel=&quot;noreferrer&quot;&gt;Async, Defer, Modules: A Visual Cheatsheet&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Just before the closing body tag, as stated on &lt;em&gt;&lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#js_bottom&quot; rel=&quot;nofollow noreferrer&quot;&gt;Put Scripts at the Bottom&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Put Scripts at the Bottom&lt;/p&gt;\n&lt;p&gt;The problem caused by scripts is that they block parallel downloads. The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won&apos;t start any other downloads, even on different hostnames.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Non-blocking script tags can be placed just about anywhere:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;script.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/scripting-1.html#attr-script-async&quot;&gt;&lt;strong&gt;&lt;code&gt;async&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; script will be executed asynchronously as soon as it is available&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/scripting-1.html#attr-script-defer&quot;&gt;&lt;strong&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; script is executed when the document has finished parsing&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;async defer&lt;/code&gt;&lt;/strong&gt; script falls back to the defer behavior if async is not supported&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Such scripts will be executed asynchronously/after document ready, which means you cannot do this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;jQuery(something);&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might throw &quot;jQuery is not defined&quot; error\n  * defer will not work either\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;document.write(something).js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might issue &quot;cannot write into document from an asynchronous script&quot; warning\n  * defer will not work either\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jQuery(something).js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might throw &quot;jQuery is not defined&quot; error (no guarantee which script runs first)\n  * defer will work in sane browsers\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;document.getElementById(header).js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  * might not locate #header (script could fire before parser looks at the next line)\n  * defer will work in sane browsers\n--&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Having said that, asynchronous scripts offer these advantages:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Parallel download of resources&lt;/strong&gt;:&lt;br&gt;\nBrowser can download stylesheets, images and other scripts in parallel without waiting for a script to download and execute.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Source order independence&lt;/strong&gt;:&lt;br&gt;\nYou can place the scripts inside head or body without worrying about blocking (useful if you are using a CMS). Execution order still matters though.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It is possible to circumvent the execution order issues by using external scripts that support callbacks. Many third party JavaScript APIs now support non-blocking execution. Here is an example of &lt;a href=&quot;http://salman-w.blogspot.com/2014/05/google-maps-asynchronous-loading.html&quot;&gt;loading the Google Maps API asynchronously&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The standard advice, promoted by the Yahoo! Exceptional Performance team, is to put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags at the end of the document body so they don&apos;t block rendering of the page.&lt;/p&gt;\n\n&lt;p&gt;But there are some newer approaches that offer better performance, as described in &lt;a href=&quot;https://stackoverflow.com/a/435295/578288&quot;&gt;this answer&lt;/a&gt; about the load time of the Google Analytics JavaScript file:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;There are some &lt;a href=&quot;http://stevesouders.com/docs/googleio-20080529.ppt&quot; rel=&quot;noreferrer&quot;&gt;great slides&lt;/a&gt; by Steve Souders (client-side performance expert) about:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Different techniques to load external JavaScript files in parallel&lt;/li&gt;\n  &lt;li&gt;their effect on loading time and page rendering&lt;/li&gt;\n  &lt;li&gt;what kind of &quot;in progress&quot; indicators the browser displays (e.g. &apos;loading&apos; in the status bar, hourglass mouse cursor).&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The modern approach in 2019 is using ES6 module type scripts&lt;/strong&gt;.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;module&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;...&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;By default, modules are loaded asynchronously and deferred. i.e. you can place them anywhere and they will load in parallel and execute when the page finishes loading.&lt;/p&gt;\n&lt;p&gt;The differences between a script and a module are described here:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39652618/classic-scripts-vs-module-scripts-in-javascript/53821485#53821485&quot;&gt;Classic scripts vs. module scripts in JavaScript&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The execution of a module compared to a script is described here:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/modules#defer&quot; rel=&quot;noreferrer&quot;&gt;Modules are deferred by default&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Support is shown here:&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://caniuse.com/#feat=es6-module&quot; rel=&quot;noreferrer&quot;&gt;Can I use... Support tables for HTML5, CSS3, etc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using jQuery then put the JavaScript code wherever you find it best and use &lt;code&gt;$(document).ready()&lt;/code&gt; to ensure that things are loaded properly before executing any functions.&lt;/p&gt;\n&lt;p&gt;On a side note: I like all my script tags in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section as that seems to be the cleanest place.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myjs.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The script tag should always be used before the &lt;strong&gt;body close&lt;/strong&gt; or at the &lt;strong&gt;bottom in HTML&lt;/strong&gt; file.&lt;/p&gt;\n&lt;p&gt;The Page will load with HTML and CSS and later JavaScript will load.&lt;/p&gt;\n&lt;p&gt;Check this if required:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://stevesouders.com/hpws/rule-js-bottom.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://stevesouders.com/hpws/rule-js-bottom.php&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;strong&gt;best&lt;/strong&gt; place to put &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is before closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag, so the downloading and executing it doesn&apos;t block the browser to parse the HTML in document,&lt;/p&gt;\n&lt;p&gt;Also loading the JavaScript files externally has its own advantages like it will be cached by browsers and can speed up page load times, it separates the HTML and JavaScript code and help to manage the code base better.&lt;/p&gt;\n&lt;p&gt;But modern browsers also support some other optimal ways, like &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; to load external JavaScript files.&lt;/p&gt;\n&lt;h2&gt;Async and Defer&lt;/h2&gt;\n&lt;p&gt;Normally HTML page execution starts line by line. When an external JavaScript &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element is encountered, HTML parsing is stopped until a JavaScript is download and ready for execution. This normal page execution can be changed using the &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attribute.&lt;/p&gt;\n&lt;h2&gt;&lt;code&gt;Defer&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;When a defer attribute is used, JavaScript is downloaded parallelly with HTML parsing, but it will be execute only after full HTML parsing is done.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/local-js-path/myScript.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;defer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;&lt;code&gt;Async&lt;/code&gt;&lt;/h2&gt;\n&lt;p&gt;When the async attribute is used, JavaScript is downloaded as soon as the script is encountered and after the download, it will be executed asynchronously (parallelly) along with HTML parsing.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/local-js-path/myScript.js&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;When to use which attributes&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;If your script is independent of other scripts and is modular, use &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If you are loading script1 and script2 with &lt;code&gt;async&lt;/code&gt;, both will run\nparallelly along with HTML parsing, as soon as they are downloaded\nand available.&lt;/li&gt;\n&lt;li&gt;If your script depends on another script then use &lt;code&gt;defer&lt;/code&gt; for both:&lt;/li&gt;\n&lt;li&gt;When script1 and script2 are loaded in that order with &lt;code&gt;defer&lt;/code&gt;, then script1 is guaranteed to execute first,&lt;/li&gt;\n&lt;li&gt;Then script2 will execute after script1 is fully executed.&lt;/li&gt;\n&lt;li&gt;Must do this if script2 depends on script1.&lt;/li&gt;\n&lt;li&gt;If your script is small enough and is depended by another script\nof type &lt;code&gt;async&lt;/code&gt; then use your script with no attributes and place it above all the &lt;code&gt;async&lt;/code&gt; scripts.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Reference: &lt;em&gt;&lt;a href=&quot;http://knowledgehills.com/javascript/external-javascript-syntax-disadvantages.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;External JavaScript JS File  Advantages, Disadvantages, Syntax, Attributes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;It turns out it can be everywhere.&lt;/p&gt;\n&lt;p&gt;You can defer the execution with something like jQuery so it doesn&apos;t matter where it&apos;s placed (except for a small performance hit during parsing).&lt;/p&gt;\n    ","\n&lt;p&gt;The most conservative (and widely accepted) answer is &quot;at the bottom just before the ending  tag&quot;, because then the entire DOM will have been loaded before anything can start executing.&lt;/p&gt;\n&lt;p&gt;There are dissenters, for various reasons, starting with the available practice to intentionally begin execution with a page onload event.&lt;/p&gt;\n    ","\n&lt;p&gt;It depends. If you are loading a script that&apos;s necessary to style your page / using actions in your page (like click of a button) then you better place it at the top. If your styling is 100% CSS and you have all fallback options for the button actions then you can place it at the bottom.&lt;/p&gt;\n&lt;p&gt;Or the best thing (if that&apos;s not a concern) is you can make a modal loading box, place your JavaScript code at the bottom of your page and make it disappear when the last line of your script gets loaded. This way you can avoid users using actions in your page before the scripts are loaded. And also avoid the improper styling.&lt;/p&gt;\n    ","\n&lt;p&gt;Including scripts at the end is mainly used where the content/ styles of the web page is to be shown first.&lt;/p&gt;\n&lt;p&gt;Including the scripts in the head loads the scripts early and can be used before the loading of the whole web page.&lt;/p&gt;\n&lt;p&gt;If the scripts are entered at last the validation will happen only after the loading of the entire styles and design which is not appreciated for fast responsive websites.&lt;/p&gt;\n    ","\n&lt;p&gt;You can add JavaScript code in an HTML document by employing the dedicated HTML tag &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; that wraps around JavaScript code.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag can be placed in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML, in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section, or after the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; close tag, depending on when you want the JavaScript to load.&lt;/p&gt;\n&lt;p&gt;Generally, JavaScript code can go inside of the document &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section in order to keep them contained and out of the main content of your HTML document.&lt;/p&gt;\n&lt;p&gt;However, if your script needs to run at a certain point within a pages layout  like when using &lt;code&gt;document.write&lt;/code&gt; to generate content  you should put it at the point where it should be called, usually within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section.&lt;/p&gt;\n    ","\n&lt;p&gt;Depending on the script and its usage the best possible (in terms of page load and rendering time) may be to not use a conventional &amp;lt;script&amp;gt;-tag per se, but to dynamically trigger the loading of the script asynchronously.&lt;/p&gt;\n&lt;p&gt;There are some different techniques, but the most straightforward is to use document.createElement(&quot;script&quot;) when the window.onload event is triggered. Then the script is loaded first when the page itself has rendered, thus not impacting the time the user has to wait for the page to appear.&lt;/p&gt;\n&lt;p&gt;This naturally requires that the script itself is not needed for the rendering of the page.&lt;/p&gt;\n&lt;p&gt;For more information, see the post &lt;em&gt;&lt;a href=&quot;http://www.stevesouders.com/blog/2008/12/27/coupling-async-scripts/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Coupling async scripts&lt;/a&gt;&lt;/em&gt; by Steve Souders (creator of &lt;a href=&quot;http://yslow.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;YSlow&lt;/a&gt;, but now at Google).&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Script&lt;/em&gt; blocks DOM load until it&apos;s loaded and executed.&lt;/p&gt;\n&lt;p&gt;If you place scripts at the end of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, all of the DOM has a chance to load and render (the page will &quot;display&quot; faster). &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; will have access to all of those DOM elements.&lt;/p&gt;\n&lt;p&gt;On the other hand, placing it after the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; start or above will execute the script (where there still aren&apos;t any DOM elements).&lt;/p&gt;\n&lt;p&gt;You are including jQuery which means you can place it wherever you wish and use &lt;a href=&quot;https://learn.jquery.com/using-jquery-core/document-ready/&quot; rel=&quot;nofollow noreferrer&quot;&gt;.ready()&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you still care a lot about support and performance in Internet&amp;nbsp;Explorer before &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_11#Internet_Explorer_10&quot; rel=&quot;nofollow noreferrer&quot;&gt;version&amp;nbsp;10&lt;/a&gt;, it&apos;s best to &lt;em&gt;always&lt;/em&gt; make your script tags the last tags of your HTML body. That way, you&apos;re certain that the rest of the DOM has been loaded and you won&apos;t block and rendering.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you don&apos;t care too much any more about in Internet&amp;nbsp;Explorer before version&amp;nbsp;10, you might want to put your scripts in the head of your document and use &lt;code&gt;defer&lt;/code&gt; to ensure they only run after your DOM has been loaded (&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;path/to/script1.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;). If you still want your code to work in Internet&amp;nbsp;Explorer before version&amp;nbsp;10, don&apos;t forget to wrap your code in a &lt;code&gt;window.onload&lt;/code&gt; even, though!&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;You can place most of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; references at the end of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;But &lt;em&gt;if&lt;/em&gt; there are active components on your page which are using external scripts, then their dependency (.js files) should come before that (ideally in the &lt;em&gt;head&lt;/em&gt; tag).&lt;/p&gt;\n    ","\n&lt;p&gt;The best place to write your JavaScript code is at the end of the document after or right before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag to load the document first and then execute the JavaScript code.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; ... your code here ... &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And if you write in &lt;a href=&quot;https://en.wikipedia.org/wiki/JQuery&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery&lt;/a&gt;, the following can be in the head document and it will execute after the document loads:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Your code here...&lt;/span&gt;\n    });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think it depends on the webpage execution.&lt;/p&gt;\n&lt;p&gt;If the page that you want to display can not displayed properly  without loading JavaScript first then you should include the JavaScript file first.&lt;/p&gt;\n&lt;p&gt;But if you can display/render a webpage without initially download JavaScript file, then you should put JavaScript code at the bottom of the page. Because it will emulate a speedy page load, and from a user&apos;s point of view, it would seems like that the page is loading faster.&lt;/p&gt;\n    ","\n&lt;p&gt;Always, we have to put scripts before the closing body tag expect some specific scenario.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;For Example :&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;`&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;demo&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello JavaScript!&quot;&lt;/span&gt;; &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;`\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Prefer to put it before the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; closing tag.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;\nAs per the official doc: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#a_hello_world!_example&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#a_hello_world!_example&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note: The reason the instructions (above) place the  element\nnear the bottom of the HTML file is that the browser reads code in the\norder it appears in the file.&lt;/p&gt;\n&lt;p&gt;If the JavaScript loads first and it is supposed to affect the HTML\nthat hasn&apos;t loaded yet, there could be problems. Placing JavaScript\nnear the bottom of an HTML page is one way to accommodate this\ndependency. To learn more about alternative approaches, see Script\nloading strategies.&lt;/p&gt;\n&lt;/blockquote&gt;\n    "],"538":["\n&lt;p&gt;You can use the &lt;a href=&quot;http://stat.ethz.ch/R-manual/R-devel/library/base/html/order.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;order()&lt;/code&gt;&lt;/a&gt; function directly without resorting to add-on tools -- see this simpler answer which uses a trick right from the top of the &lt;code&gt;example(order)&lt;/code&gt; code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;R&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n    b x y z\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Low C &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Med D &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Edit some 2+ years later:&lt;/em&gt;  It was just asked how to do this by column index. The answer is to simply pass the desired sorting column(s) to the &lt;code&gt;order()&lt;/code&gt; function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;R&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n    b x y z\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Low C &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Med D &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nR&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;rather than using the name of the column (and &lt;code&gt;with()&lt;/code&gt; for easier/more direct access).&lt;/p&gt;\n    ","\n&lt;h3&gt;Your choices&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;order&lt;/code&gt; from &lt;code&gt;base&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;setorder&lt;/code&gt; and &lt;code&gt;setorderv&lt;/code&gt; from &lt;code&gt;data.table&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt; from &lt;code&gt;plyr&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;sort&lt;/code&gt; from &lt;code&gt;taRifx&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;orderBy&lt;/code&gt; from &lt;code&gt;doBy&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;sortData&lt;/code&gt; from &lt;code&gt;Deducer&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Most of the time you should use the &lt;code&gt;dplyr&lt;/code&gt; or &lt;code&gt;data.table&lt;/code&gt; solutions, unless having no-dependencies is important, in which case use &lt;code&gt;base::order&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;I recently added sort.data.frame to a CRAN package, making it class compatible as discussed here:\n&lt;a href=&quot;https://stackoverflow.com/questions/6836963/best-way-to-create-generic-method-consistency-for-sort-data-frame&quot;&gt;Best way to create generic/method consistency for sort.data.frame?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Therefore, given the data.frame dd, you can sort as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dd &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; factor&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Med&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Low&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n      levels &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Low&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Med&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ordered &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      z &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;taRifx&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nsort&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you are one of the original authors of this function, please contact me.  Discussion as to public domaininess is here: &lt;a href=&quot;https://chat.stackoverflow.com/transcript/message/1094290#1094290&quot;&gt;https://chat.stackoverflow.com/transcript/message/1094290#1094290&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;You can also use the &lt;code&gt;arrange()&lt;/code&gt; function from &lt;code&gt;plyr&lt;/code&gt; as Hadley pointed out in the above thread:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;plyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\narrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Benchmarks: Note that I loaded each package in a new R session since there were a lot of conflicts.  In particular loading the doBy package causes &lt;code&gt;sort&lt;/code&gt; to return &quot;The following object(s) are masked from &apos;x (position 17)&apos;: b, x, y, z&quot;, and loading the Deducer package overwrites &lt;code&gt;sort.data.frame&lt;/code&gt; from Kevin Wright or the taRifx package.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#Load each time&lt;/span&gt;\ndd &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; factor&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Med&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Low&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n      levels &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Low&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Med&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ordered &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n      z &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;microbenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Reload R between benchmarks&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;dd&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; dd&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n    times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Median times:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;dd[with(dd, order(-z, b)), ]&lt;/code&gt; &lt;strong&gt;778&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;dd[order(-dd$z, dd$b),]&lt;/code&gt; &lt;strong&gt;788&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;taRifx&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sort&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;b &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Median time: &lt;strong&gt;1,567&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;plyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Median time: &lt;strong&gt;862&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;doBy&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;orderBy&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Median time: &lt;strong&gt;1,694&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Note that doBy takes a good bit of time to load the package.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;Deducer&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sortData&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;increasing&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Couldn&apos;t make Deducer load.  Needs JGR console.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;esort &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; sortvar&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\nattach&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nx &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; x&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sortvar&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;...&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndetach&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;esort&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Doesn&apos;t appear to be compatible with microbenchmark due to the attach/detach.&lt;/p&gt;\n&lt;hr&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;m &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; microbenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n  arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  sort&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; f&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;b &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;dd&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; dd&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\nuq &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; fivenum&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;  \nlq &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; fivenum&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n\ny_min &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; 0 &lt;span class=&quot;hljs-comment&quot;&gt;# min(by(m$time,m$expr,lq))&lt;/span&gt;\ny_max &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;by&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;time&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;m&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;expr&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;uq&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.05&lt;/span&gt;\n  \np &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;aes&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;expr&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;time&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; coord_cartesian&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;ylim &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; y_min &lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y_max &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \np &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; stat_summary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;fun.y&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;median&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;fun.ymin &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; lq&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; fun.ymax &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; uq&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; aes&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;fill&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;expr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/9z6Oq.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/9z6Oq.png&quot; alt=&quot;microbenchmark plot&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;(lines extend from lower quartile to upper quartile, dot is the median)&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Given these results and weighing simplicity vs. speed, I&apos;d have to give the nod to &lt;strong&gt;&lt;code&gt;arrange&lt;/code&gt; in the &lt;code&gt;plyr&lt;/code&gt; package&lt;/strong&gt;.  It has a simple syntax and yet is almost as speedy as the base R commands with their convoluted machinations.  Typically brilliant Hadley Wickham work.  My only gripe with it is that it breaks the standard R nomenclature where sorting objects get called by &lt;code&gt;sort(object)&lt;/code&gt;, but I understand why Hadley did it that way due to issues discussed in the question linked above.&lt;/p&gt;\n    ","\n&lt;p&gt;Dirk&apos;s answer is great. It also highlights a key difference in the syntax used for indexing &lt;code&gt;data.frame&lt;/code&gt;s and &lt;code&gt;data.table&lt;/code&gt;s:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;## The data.frame way&lt;/span&gt;\ndd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;## The data.table way: (7 fewer characters, but that&apos;s not the important bit)&lt;/span&gt;\ndd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The difference between the two calls is small, but it can have important consequences. Especially if you write production code and/or are concerned with correctness in your research, it&apos;s best to avoid unnecessary repetition of variable names. &lt;code&gt;data.table&lt;/code&gt;\n helps you do this.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example of how repetition of variable names might get you into trouble:&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s change the context from Dirk&apos;s answer, and say this is part of a bigger project where there are a lot of object names and they are long and meaningful; instead of &lt;code&gt;dd&lt;/code&gt; it&apos;s called &lt;code&gt;quarterlyreport&lt;/code&gt;. It becomes :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;quarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;quarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ok, fine. Nothing wrong with that. Next your boss asks you to include last quarter&apos;s report in the report. You go through your code, adding an object &lt;code&gt;lastquarterlyreport&lt;/code&gt; in various places and somehow (how on earth?) you end up with this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;quarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;lastquarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That isn&apos;t what you meant but you didn&apos;t spot it because you did it fast and it&apos;s nestled on a page of similar code. The code doesn&apos;t fall over (no warning and no error) because R thinks it is what you meant. You&apos;d hope whoever reads your report spots it, but maybe they don&apos;t. If you work with programming languages a lot then this situation may be all to familiar. It was a &quot;typo&quot; you&apos;ll say. I&apos;ll fix the &quot;typo&quot; you&apos;ll say to your boss.&lt;/p&gt;\n\n&lt;p&gt;In &lt;a href=&quot;http://datatable.r-forge.r-project.org/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt; we&apos;re concerned about tiny details like this. So we&apos;ve done something simple to avoid typing variable names twice. Something very simple. &lt;code&gt;i&lt;/code&gt; is evaluated within the frame of &lt;code&gt;dd&lt;/code&gt; already, automatically. You don&apos;t need &lt;code&gt;with()&lt;/code&gt; at all.&lt;/p&gt;\n\n&lt;p&gt;Instead of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it&apos;s just&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And instead of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;quarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;lastquarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it&apos;s just&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;quarterlyreport&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s a very small difference, but it might just save your neck one day. When weighing up the different answers to this question, consider counting the repetitions of variable names as one of your criteria in deciding.  Some answers have quite a few repeats, others have none.&lt;/p&gt;\n    ","\n&lt;p&gt;There are a lot of excellent answers here, but &lt;a href=&quot;http://github.com/hadley/dplyr&quot;&gt;dplyr&lt;/a&gt; gives the only syntax that I can quickly and easily remember (and so now use very often):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dplyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# sort mtcars by mpg, ascending... use desc(mpg) for descending&lt;/span&gt;\narrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mtcars&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; mpg&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# sort mtcars first by mpg, then by cyl, then by wt)&lt;/span&gt;\narrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;mtcars &lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; mpg&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; cyl&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; wt&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For the OP&apos;s problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;  b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\n    b x y z\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Low C &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Med D &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The R package &lt;code&gt;data.table&lt;/code&gt; provides both &lt;em&gt;fast&lt;/em&gt; and &lt;em&gt;memory efficient&lt;/em&gt; ordering of &lt;em&gt;data.tables&lt;/em&gt; with a straightforward syntax (a part of which Matt has highlighted quite nicely &lt;a href=&quot;https://stackoverflow.com/a/10758086/559784&quot;&gt;in his answer&lt;/a&gt;). There has been quite a lot of improvements and also a new function &lt;code&gt;setorder()&lt;/code&gt; since then. From &lt;code&gt;v1.9.5+&lt;/code&gt;, &lt;code&gt;setorder()&lt;/code&gt; also works with &lt;em&gt;data.frames&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;First, we&apos;ll create a dataset big enough and benchmark the different methods mentioned from other answers and then list the features of &lt;em&gt;data.table&lt;/em&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Data:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;require&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;plyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nrequire&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;doBy&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nrequire&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data.table&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nrequire&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dplyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nrequire&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;taRifx&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\nset.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;45L&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndat &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; as.factor&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Med&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Low&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1e8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                 x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1e8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                 y &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1e8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n                 z &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1e8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n                 stringsAsFactors &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Benchmarks:&lt;/h3&gt;\n\n&lt;p&gt;The timings reported are from running &lt;code&gt;system.time(...)&lt;/code&gt; on these functions shown below. The timings are tabulated below (in the order of slowest to fastest).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;orderBy&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dat&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;## doBy&lt;/span&gt;\nplyr&lt;span class=&quot;hljs-operator&quot;&gt;::&lt;/span&gt;arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dat&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;## plyr&lt;/span&gt;\narrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dat&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;hljs-comment&quot;&gt;## dplyr&lt;/span&gt;\nsort&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dat&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; f &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;hljs-comment&quot;&gt;## taRifx&lt;/span&gt;\ndat&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dat&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;## base R&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# convert to data.table, by reference&lt;/span&gt;\nsetDT&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dat&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\ndat&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;                  &lt;span class=&quot;hljs-comment&quot;&gt;## data.table, base R like syntax&lt;/span&gt;\nsetorder&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dat&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;hljs-comment&quot;&gt;## data.table, using setorder()&lt;/span&gt;\n                                   &lt;span class=&quot;hljs-comment&quot;&gt;## setorder() now also works with data.frames &lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# R-session memory usage (BEFORE) = ~2GB (size of &apos;dat&apos;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Package      function    Time (s)  Peak memory   Memory used&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# doBy          orderBy      409.7        6.7 GB        4.7 GB&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# taRifx           sort      400.8        6.7 GB        4.7 GB&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# plyr          arrange      318.8        5.6 GB        3.6 GB &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# base R          order      299.0        5.6 GB        3.6 GB&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# dplyr         arrange       62.7        4.2 GB        2.2 GB&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# data.table      order        6.2        4.2 GB        2.2 GB&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# data.table   setorder        4.5        2.4 GB        0.4 GB&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# ------------------------------------------------------------&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;data.table&lt;/code&gt;&apos;s &lt;code&gt;DT[order(...)]&lt;/code&gt; syntax was &lt;strong&gt;~10x&lt;/strong&gt; faster than the fastest of other methods (&lt;code&gt;dplyr&lt;/code&gt;), while consuming the same amount of memory as &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;data.table&lt;/code&gt;&apos;s &lt;code&gt;setorder()&lt;/code&gt; was &lt;strong&gt;~14x&lt;/strong&gt; faster than the fastest of other methods (&lt;code&gt;dplyr&lt;/code&gt;), while taking &lt;strong&gt;just 0.4GB extra memory&lt;/strong&gt;. &lt;code&gt;dat&lt;/code&gt; is now in the order we require (as it is updated by reference).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;data.table features:&lt;/h3&gt;\n\n&lt;p&gt;&lt;strong&gt;Speed:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;data.table&lt;/em&gt;&apos;s ordering is extremely fast because it implements &lt;a href=&quot;http://en.wikipedia.org/wiki/Radix_sort&quot; rel=&quot;noreferrer&quot;&gt;radix ordering&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The syntax &lt;code&gt;DT[order(...)]&lt;/code&gt; is optimised internally to use &lt;em&gt;data.table&lt;/em&gt;&apos;s fast ordering as well. You can keep using the familiar base R syntax but speed up the process (and use less memory).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Memory:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Most of the times, we don&apos;t require the original &lt;em&gt;data.frame&lt;/em&gt; or &lt;em&gt;data.table&lt;/em&gt; after reordering. That is, we usually assign the result back to the same object, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;DF &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; DF&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;...&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The issue is that this requires at least twice (2x) the memory of the original object. To be &lt;em&gt;memory efficient&lt;/em&gt;, &lt;em&gt;data.table&lt;/em&gt; therefore also provides a function &lt;code&gt;setorder()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;setorder()&lt;/code&gt; reorders &lt;em&gt;data.tables&lt;/em&gt; &lt;code&gt;by reference&lt;/code&gt; (&lt;em&gt;in-place&lt;/em&gt;), without making any additional copies. It only uses extra memory equal to the size of one column.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Other features:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;It supports &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;logical&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;character&lt;/code&gt; and even &lt;code&gt;bit64::integer64&lt;/code&gt; types.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Note that &lt;code&gt;factor&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;POSIXct&lt;/code&gt; etc.. classes are all &lt;code&gt;integer&lt;/code&gt;/&lt;code&gt;numeric&lt;/code&gt; types underneath with additional attributes and are therefore supported as well. &lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In base R, we can not use &lt;code&gt;-&lt;/code&gt; on a character vector to sort by that column in decreasing order. Instead we have to use &lt;code&gt;-xtfrm(.)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;However, in &lt;em&gt;data.table&lt;/em&gt;, we can just do, for example, &lt;code&gt;dat[order(-x)]&lt;/code&gt; or &lt;code&gt;setorder(dat, -x)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://web.archive.org/web/20131108055534/http://rwiki.sciviews.org/doku.php?id=tips%3adata-frames%3asort&quot; rel=&quot;noreferrer&quot;&gt;this (very helpful) function by Kevin Wright&lt;/a&gt;, posted in the tips section of the R wiki, this is easily achieved.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;sort&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#     b x y z&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 4 Low C 9 2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 2 Med D 3 1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 1  Hi A 8 1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# 3  Hi A 9 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Suppose you have a &lt;code&gt;data.frame&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; and you want to sort it using column called &lt;code&gt;x&lt;/code&gt; descending order. Call the sorted &lt;code&gt;data.frame&lt;/code&gt; &lt;code&gt;newdata&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;newdata &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; A&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want ascending order then replace &lt;code&gt;&quot;-&quot;&lt;/code&gt; with nothing. You can have something like &lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;newdata &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; A&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; A&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;y&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;A&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are some columns in &lt;code&gt;data.frame&lt;/code&gt; &lt;code&gt;A&lt;/code&gt;. This means sort &lt;code&gt;data.frame&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; by &lt;code&gt;x&lt;/code&gt; descending, &lt;code&gt;y&lt;/code&gt; ascending and &lt;code&gt;z&lt;/code&gt; descending.&lt;/p&gt;\n    ","\n&lt;p&gt;or you can use package doBy&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;doBy&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndd &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; orderBy&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if SQL comes naturally to you, &lt;code&gt;sqldf&lt;/code&gt; package handles &lt;code&gt;ORDER BY&lt;/code&gt; as Codd intended.&lt;/p&gt;\n    ","\n&lt;p&gt;Alternatively, using the package Deducer&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;Deducer&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndd&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; sortData&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;increasing&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In response to a comment added in the OP for how to sort programmatically:&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;data.table&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dplyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;data.table&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;dplyr&lt;/h1&gt;\n\n&lt;p&gt;Just use &lt;code&gt;arrange_&lt;/code&gt;, which is the Standard Evaluation version for &lt;code&gt;arrange&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;df1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; tbl_df&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;iris&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#using strings or formula&lt;/span&gt;\narrange_&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;df1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Length&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Width&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\narrange_&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;df1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;Petal.Length&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt;Petal.Width&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n    Source&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; local data frame &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt; x &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;fctr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.6&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.6&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.8&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.9&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.5&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4.5&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;  setosa\n..          ...         ...          ...         ...     ...\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Or using a variable&lt;/span&gt;\nsortBy &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Length&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Width&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\narrange_&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;df1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; .dots &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sortBy&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n    Source&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt; local data frame &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt; x &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dbl&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;fctr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.6&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.6&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.8&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.5&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;4.4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;  setosa\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4.5&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;  setosa\n..          ...         ...          ...         ...     ...\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Doing the same operation except sorting Petal.Length in descending order&lt;/span&gt;\nsortByDesc &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;desc(Petal.Length)&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Width&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\narrange_&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;df1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; .dots &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sortByDesc&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;more info here: &lt;a href=&quot;https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html&quot;&gt;https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It is better to use formula as it also captures the environment to evaluate an expression in&lt;/p&gt;\n\n&lt;h1&gt;data.table&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dt1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;iris&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#not really required, as you can work directly on your data.frame&lt;/span&gt;\nsortBy &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Length&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Petal.Width&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nsortType &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nsetorderv&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dt1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; sortBy&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; sortType&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndt1\n     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;7.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.6&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;6.9&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.3&lt;/span&gt; virginica\n  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;7.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.8&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;6.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt; virginica\n  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;7.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.8&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;6.7&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.2&lt;/span&gt; virginica\n  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;7.6&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;6.6&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.1&lt;/span&gt; virginica\n  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;7.9&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.8&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;6.4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt; virginica\n &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;                                                            \n&lt;span class=&quot;hljs-number&quot;&gt;146&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;5.4&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.9&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;    setosa\n&lt;span class=&quot;hljs-number&quot;&gt;147&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;5.8&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;4.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;    setosa\n&lt;span class=&quot;hljs-number&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.2&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.2&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;    setosa\n&lt;span class=&quot;hljs-number&quot;&gt;149&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4.3&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.0&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;    setosa\n&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4.6&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;3.6&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;         &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;    setosa\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The arrange() in dplyr is my favorite option. Use the pipe operator and go from least important to most important aspect&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dd1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; dd &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n    arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%&amp;gt;%&lt;/span&gt;\n    arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I learned about &lt;code&gt;order&lt;/code&gt; with the following example which then confused me for a long time:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;set.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\nID        &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nAge       &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rnorm&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ndiag      &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Depression&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bipolar&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nDiagnosis &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;diag&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\ndata &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;ID&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Age&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; Diagnosis&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\ndatabyAge &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;Age&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\ndatabyAge\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only reason this example works is because &lt;code&gt;order&lt;/code&gt; is sorting by the &lt;code&gt;vector Age&lt;/code&gt;, not by the column named &lt;code&gt;Age&lt;/code&gt; in the &lt;code&gt;data frame data&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;To see this create an identical data frame using &lt;code&gt;read.table&lt;/code&gt; with slightly different column names and without making use of any of the above vectors:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;my.data &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;text &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\n\n  id age  diagnosis\n   1  49 Depression\n   2  50 Depression\n   3  51 Depression\n   4  48 Depression\n   5  50 Depression\n   6  51    Bipolar\n   7  49    Bipolar\n   8  49    Bipolar\n   9  49    Bipolar\n  10  49 Depression\n\n&apos;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; header &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above line structure for &lt;code&gt;order&lt;/code&gt; no longer works because there is no vector named &lt;code&gt;age&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;databyage &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; my.data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;age&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following line works because &lt;code&gt;order&lt;/code&gt; sorts on the column &lt;code&gt;age&lt;/code&gt; in &lt;code&gt;my.data&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;databyage &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; my.data&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;my.data&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;age&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I thought this was worth posting given how confused I was by this example for so long.  If this post is not deemed appropriate for the thread I can remove it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;EDIT: May 13, 2014&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Below is a generalized way of sorting a data frame by every column without specifying column names.  The code below shows how to sort from left to right or by right to left.  This works if every column is numeric.  I have not tried with a character column added.  &lt;/p&gt;\n\n&lt;p&gt;I found the &lt;code&gt;do.call&lt;/code&gt; code a month or two ago in an old post on a different site, but only after extensive and difficult searching.  I am not sure I could relocate that post now.  The present thread is the first hit for ordering a &lt;code&gt;data.frame&lt;/code&gt; in &lt;code&gt;R&lt;/code&gt;.  So, I thought my expanded version of that original &lt;code&gt;do.call&lt;/code&gt; code might be useful.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;set.seed&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\nv1  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nv2  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nv3  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nv4  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n\ndf.1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;v1&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; v2&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; v3&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; v4&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \ndf.1\n\nrdf.1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; df.1&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;sample&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;nrow&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;df.1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; nrow&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;df.1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; replace &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\nrdf.1\n\norder.rdf.1 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; rdf.1&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;do.call&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; as.list&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rdf.1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\norder.rdf.1\n\norder.rdf.2 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; rdf.1&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;do.call&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; rev&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;as.list&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rdf.1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\norder.rdf.2\n\nrdf.3 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rdf.1&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;v2&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; rdf.1&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;v4&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; rdf.1&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;v3&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; rdf.1&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;v1&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \nrdf.3\n\norder.rdf.3 &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; rdf.1&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;do.call&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; as.list&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rdf.3&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\norder.rdf.3\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Dirk&apos;s answer is good but if you need the sort to persist you&apos;ll want to apply the sort back onto the name of that data frame.  Using the example code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dd &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just for the sake of completeness, since not much has been said about sorting by column numbers... It can surely be argued that it is often not desirable (because the order of the columns could change, paving the way to errors), but in some specific situations (when for instance you need a quick job done and there is no such risk of columns changing orders), it might be the most sensible thing to do, especially when dealing with large numbers of columns.&lt;/p&gt;\n\n&lt;p&gt;In that case, &lt;code&gt;do.call()&lt;/code&gt; comes to the rescue:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;ind &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; do.call&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;what &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; args &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iris&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\niris&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;ind&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;##        Sepal.Length Sepal.Width Petal.Length Petal.Width    Species&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    14           4.3         3.0          1.1         0.1     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    9            4.4         2.9          1.4         0.2     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    39           4.4         3.0          1.3         0.2     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    43           4.4         3.2          1.3         0.2     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    42           4.5         2.3          1.3         0.3     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    4            4.6         3.1          1.5         0.2     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    48           4.6         3.2          1.4         0.2     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    7            4.6         3.4          1.4         0.3     setosa&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;##    (...)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For the sake of completeness: you can also use the &lt;code&gt;sortByCol()&lt;/code&gt; function from the &lt;code&gt;BBmisc&lt;/code&gt; package:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;BBmisc&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nsortByCol&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; asc &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n    b x y z\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Low C &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Med D &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Performance comparison:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;microbenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;sortByCol&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; asc &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; times &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmedian &lt;span class=&quot;hljs-number&quot;&gt;202.878&lt;/span&gt;\n\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;plyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;arrange&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;desc&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;times&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmedian &lt;span class=&quot;hljs-number&quot;&gt;148.758&lt;/span&gt;\n\nmicrobenchmark&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;with&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; times &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nmedian &lt;span class=&quot;hljs-number&quot;&gt;115.872&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just like the mechanical card sorters of long ago, first sort by the least significant key, then the next most significant, etc.  No library required, works with any number of keys and any combination of ascending and descending keys.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt; dd &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; decreasing &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we&apos;re ready to do the most significant key.  The sort is stable, and any ties in the most significant key have already been resolved.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dd &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; dd&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;order&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;z&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; decreasing &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This may not be the fastest, but it is certainly simple and reliable&lt;/p&gt;\n    ","\n&lt;p&gt;Another alternative, using the &lt;code&gt;rgr&lt;/code&gt; package:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; library&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;rgr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; gx.sort.df&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dd&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;z&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n    b x y z\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; Low C &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Med D &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  Hi A &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I was struggling with the above solutions when I wanted to automate my ordering process for n columns, whose column names could be different each time. I found a super helpful function from the &lt;code&gt;psych&lt;/code&gt; package to do this in a straightforward manner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dfOrder&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;myDf&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; columnIndices&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where &lt;code&gt;columnIndices&lt;/code&gt; are indices of one or more columns, in the order in which you want to sort them. More information here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.rdocumentation.org/packages/psych/versions/1.8.4/topics/dfOrder&quot; rel=&quot;noreferrer&quot;&gt;dfOrder function from &apos;psych&apos; package&lt;/a&gt; &lt;/p&gt;\n    "],"539":["\n&lt;p&gt;Joshua Bloch says on Effective Java&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;You must override hashCode() in every class that overrides equals(). Failure to do so will result in a violation of the general contract for Object.hashCode(), which will prevent your class from functioning properly in conjunction with all hash-based collections, including HashMap, HashSet, and Hashtable.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Let&apos;s try to understand it with an example of what would happen if we override &lt;code&gt;equals()&lt;/code&gt; without overriding &lt;code&gt;hashCode()&lt;/code&gt; and attempt to use a &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Say we have a class like this and that two objects of &lt;code&gt;MyClass&lt;/code&gt; are equal if their &lt;code&gt;importantField&lt;/code&gt; is equal (with &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; generated by eclipse)&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String importantField;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String anotherField;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String equalField, &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String anotherField)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.importantField = equalField;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.anotherField = anotherField;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        result = prime * result\n                + ((importantField == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : importantField.hashCode());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getClass() != obj.getClass())\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (MyClass) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (importantField == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (other.importantField != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!importantField.equals(other.importantField))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Imagine you have this&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Override only &lt;code&gt;equals&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If only &lt;code&gt;equals&lt;/code&gt; is overriden, then when you call &lt;code&gt;myMap.put(first,someValue)&lt;/code&gt; first will hash to some bucket and when you call &lt;code&gt;myMap.put(second,someOtherValue)&lt;/code&gt; it will hash to some other bucket (as they have a different &lt;code&gt;hashCode&lt;/code&gt;). So, although they are equal, as they don&apos;t hash to the same bucket, the map can&apos;t realize it and both of them stay in the map.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Although it is not necessary to override &lt;code&gt;equals()&lt;/code&gt; if we override &lt;code&gt;hashCode()&lt;/code&gt;, let&apos;s see what would happen in this particular case where we know that two objects of &lt;code&gt;MyClass&lt;/code&gt; are equal if their &lt;code&gt;importantField&lt;/code&gt; is equal but we do not override &lt;code&gt;equals()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Override only &lt;code&gt;hashCode&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you only override &lt;code&gt;hashCode&lt;/code&gt; then when you call &lt;code&gt;myMap.put(first,someValue)&lt;/code&gt; it takes first, calculates its &lt;code&gt;hashCode&lt;/code&gt; and stores it in a given bucket. Then when you call &lt;code&gt;myMap.put(second,someOtherValue)&lt;/code&gt; it should replace first with second  as per the &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html#put%28java.lang.Object,%20java.lang.Object%29&quot; rel=&quot;noreferrer&quot;&gt;Map Documentation&lt;/a&gt; because they are equal (according to the business requirement).&lt;/p&gt;\n&lt;p&gt;But the problem is that equals was not redefined, so when the map hashes &lt;code&gt;second&lt;/code&gt; and iterates through the bucket looking if there is an object &lt;code&gt;k&lt;/code&gt; such that &lt;code&gt;second.equals(k)&lt;/code&gt; is true it won&apos;t find any as &lt;code&gt;second.equals(first)&lt;/code&gt; will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Hope it was clear&lt;/p&gt;\n    ","\n&lt;p&gt;Collections such as &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;HashSet&lt;/code&gt; use a &lt;em&gt;hashcode&lt;/em&gt; value of an object to determine how it should be stored inside a collection, and the &lt;em&gt;hashcode&lt;/em&gt; is used again in order to locate the object\nin its collection.&lt;/p&gt;\n\n&lt;p&gt;Hashing retrieval is a two-step process:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Find the right bucket (using &lt;code&gt;hashCode()&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;Search the bucket for the right element (using &lt;code&gt;equals()&lt;/code&gt; )&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Here is a small example on why we should overrride &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashcode()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Consider an &lt;code&gt;Employee&lt;/code&gt; class which has two fields: age and name.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n\n    String name;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.age = age;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; age;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.age = age;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Employee))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Employee) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; employee.getAge() == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getAge()\n                &amp;amp;&amp;amp; employee.getName() == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getName();\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// commented    &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/*  @Override\n        public int hashCode() {\n            int result=17;\n            result=31*result+age;\n            result=31*result+(name!=null ? name.hashCode():0);\n            return result;\n        }\n     */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now create a class, insert &lt;code&gt;Employee&lt;/code&gt; object into a &lt;code&gt;HashSet&lt;/code&gt; and test whether that object is present or not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ClientTest&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rajeev&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rajeev&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;employee2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rajeev&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n\n        HashSet&amp;lt;Employee&amp;gt; employees = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;Employee&amp;gt;();\n        employees.add(employee);\n        System.out.println(employees.contains(employee2));\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;employee.hashCode():  &quot;&lt;/span&gt; + employee.hashCode()\n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;  employee2.hashCode():&quot;&lt;/span&gt; + employee2.hashCode());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will print the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\nemployee.hashCode():  &lt;span class=&quot;hljs-number&quot;&gt;321755204&lt;/span&gt;  employee2.hashCode():&lt;span class=&quot;hljs-number&quot;&gt;375890482&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now uncomment &lt;code&gt;hashcode()&lt;/code&gt; method , execute the same and the output would be: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\nemployee.hashCode():  -&lt;span class=&quot;hljs-number&quot;&gt;938387308&lt;/span&gt;  employee2.hashCode():-&lt;span class=&quot;hljs-number&quot;&gt;938387308&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now can you see why if two objects are considered equal, their &lt;em&gt;hashcode&lt;/em&gt;s must\nalso be equal? Otherwise, you&apos;d never be able to find the object since the default\n&lt;em&gt;hashcode&lt;/em&gt; method in class Object virtually always comes up with a unique number\nfor each object, even if the &lt;code&gt;equals()&lt;/code&gt; method is overridden in such a way that two\nor more objects are considered equal. It doesn&apos;t matter how equal the objects are if\ntheir &lt;em&gt;hashcode&lt;/em&gt;s don&apos;t reflect that. So one more time: If two objects are equal, their\n&lt;em&gt;hashcode&lt;/em&gt;s must be equal as well.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;You must override hashCode() in every\nclass that overrides equals(). Failure\nto do so will result in a violation of\nthe general contract for\nObject.hashCode(), which will prevent\nyour class from functioning properly\nin conjunction with all hash-based\ncollections, including HashMap,\nHashSet, and Hashtable.&lt;/p&gt;\n&lt;p&gt;&lt;br&gt; &amp;nbsp; &amp;nbsp;from &lt;em&gt;Effective Java&lt;/em&gt;, by Joshua Bloch&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;By defining &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; consistently, you can improve the usability of your classes as keys in hash-based collections. As the API doc for hashCode explains: &quot;This method is supported for the benefit of hashtables such as those provided by &lt;code&gt;java.util.Hashtable&lt;/code&gt;.&quot;&lt;/p&gt;\n&lt;p&gt;The best answer to your question about how to implement these methods efficiently is suggesting you to read Chapter 3 of &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0134685997&quot; rel=&quot;nofollow noreferrer&quot;&gt;Effective Java&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Identity is not equality.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;equals operator &lt;code&gt;==&lt;/code&gt; test identity.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;equals(Object obj)&lt;/code&gt; method compares equality test(i.e. we need to tell equality by overriding the method)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Why do I need to override the equals and hashCode methods in Java?   &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;First we have to understand the use of equals method.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In order to identity differences between two objects we need to override equals method.   &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Customer customer1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nCustomer customer2=customer1;\ncustomer1.equals(customer2); &lt;span class=&quot;hljs-comment&quot;&gt;// returns true by JVM. i.e. both are refering same Object&lt;/span&gt;\n------------------------------\nCustomer customer1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nCustomer customer2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\ncustomer1.equals(customer2); &lt;span class=&quot;hljs-comment&quot;&gt;//return false by JVM i.e. we have two different peter customers.&lt;/span&gt;\n\n------------------------------\nNow I have overriden Customer &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;equals&lt;/span&gt; method as follows:\n &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj)   &lt;span class=&quot;hljs-comment&quot;&gt;// it checks references&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// checks null&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getClass() != obj.getClass()) &lt;span class=&quot;hljs-comment&quot;&gt;// both object are instances of same class or not&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Customer) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (other.name != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!name.equals(other.name)) &lt;span class=&quot;hljs-comment&quot;&gt;// it again using bulit in String object equals to identify the difference &lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; \n    }\nCustomer customer1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nCustomer customer2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Customer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;peter&quot;&lt;/span&gt;);\nInsteady identify the Object equality by JVM, we can &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; it by overring equals method.\ncustomer1.equals(customer2);  &lt;span class=&quot;hljs-comment&quot;&gt;// returns true by our own logic&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Now hashCode method can understand easily.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;hashCode produces integer in order to store object in data structures like &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;HashSet&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Assume we have override equals method of &lt;code&gt;Customer&lt;/code&gt; as above, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;customer1.equals(customer2);  &lt;span class=&quot;hljs-comment&quot;&gt;// returns true by our own logic&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While working with data structure when we store object in buckets(bucket is a fancy name for folder). If we use built-in hash technique, for above two customers it generates two different hashcode. So we are storing the same identical object in two different places. To avoid this kind of issues we should override the hashCode method also based on the following principles.  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;un-equal instances may have same hashcode.&lt;/li&gt;\n&lt;li&gt;equal instances should return same hashcode.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Why we override &lt;code&gt;equals()&lt;/code&gt; method&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;In Java we can not overload how operators like ==, +=, -+ behave. They are behaving a certain way. So let&apos;s focus on the operator == for our case here.&lt;/p&gt;\n&lt;p&gt;How operator == works.&lt;/p&gt;\n&lt;p&gt;It checks if 2 references that we compare point to the same instance in memory. Operator &lt;code&gt;==&lt;/code&gt; will resolve to true only if those 2 references represent the same instance in memory.&lt;/p&gt;\n&lt;p&gt;So now let&apos;s consider the following example&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer age;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n    \n      ..getters, setters, constructors\n      }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So let&apos;s say that in your program you have built 2 Person objects on different places and you wish to compare them.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\nSystem.out.println ( person1 == person2 );  --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Those 2 objects from business perspective look the same right? For JVM they are not the same. Since they are both created with &lt;code&gt;new&lt;/code&gt; keyword those instances are located in different segments in memory. Therefore the operator == will return &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;But if we can not override the == operator how can we say to JVM that we want those 2 objects to be treated as same. There comes the &lt;code&gt;.equals()&lt;/code&gt; method in play.&lt;/p&gt;\n&lt;p&gt;You can override &lt;code&gt;equals()&lt;/code&gt; to check if some objects have same values for specific fields to be considered equal.&lt;/p&gt;\n&lt;p&gt;You can select which fields you want to be compared. If we say that 2 Person objects will be the same if and only if they have the same age and same name, then the IDE will create something like the following for automatic generation of equals()&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == o) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || getClass() != o.getClass()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Person) o;\n        &lt;span class=&quot;hljs-type&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person.age &amp;amp;&amp;amp;\n                name.equals(person.name);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s go back to our previous example&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    System.out.println ( person1 == person2 );   --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;!\n    System.out.println ( person1.equals(person2) );  --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So we can not overload == operator to compare objects the way we want but Java gave us another way, the &lt;code&gt;equals()&lt;/code&gt; method, which we can override as we want.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Keep in mind&lt;/strong&gt; however, if we don&apos;t provide our custom version of &lt;code&gt;.equals()&lt;/code&gt; (aka override) in our class then the predefined &lt;code&gt;.equals()&lt;/code&gt; from Object class and &lt;code&gt;==&lt;/code&gt; operator will behave exactly the same.&lt;/p&gt;\n&lt;p&gt;Default &lt;code&gt;equals()&lt;/code&gt; method which is inherited from Object will check whether both compared instances are the same in memory!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Why we override &lt;code&gt;hashCode()&lt;/code&gt; method&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Some Data Structures in java like HashSet, HashMap store their elements based on a hash function which is applied on those elements. The hashing function is the &lt;code&gt;hashCode()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If we have a choice of overriding &lt;code&gt;.equals()&lt;/code&gt; method then we must also have a choice of overriding &lt;code&gt;hashCode()&lt;/code&gt; method. There is a reason for that.&lt;/p&gt;\n&lt;p&gt;Default implementation of &lt;code&gt;hashCode()&lt;/code&gt; which is inherited from Object considers all objects in memory unique!&lt;/p&gt;\n&lt;p&gt;Let&apos;s get back to those hash data structures. There is a rule for those data structures.&lt;/p&gt;\n&lt;p&gt;HashSet can not contain duplicate values and HashMap can not contain duplicate keys&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;HashSet is implemented with a HashMap behind the scenes where each value of a HashSet is stored as a key in a HashMap.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;So we have to understand how a HashMap works.&lt;/p&gt;\n&lt;p&gt;In a simple way a HashMap is a native array that has some buckets. Each bucket has a linkedList. In that linkedList our keys are stored. HashMap locates the correct linkedList for each key by applying &lt;code&gt;hashCode()&lt;/code&gt; method and after that it iterates through all elements of that linkedList and applies &lt;code&gt;equals()&lt;/code&gt; method on each of these elements to check if that element is already contained there. No duplicate keys are allowed.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/aMwel.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/aMwel.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;When we put something inside a HashMap, the key is stored in one of those linkedLists. In which linkedList that key will be stored is shown by the result of &lt;code&gt;hashCode()&lt;/code&gt; method on that key. So if &lt;code&gt;key1.hashCode()&lt;/code&gt; has as a result 4, then that key1 will be stored on the 4th bucket of the array, in the linkedList that exists there.&lt;/p&gt;\n&lt;p&gt;By default &lt;code&gt;hashCode()&lt;/code&gt; method returns a different result for each different instance. If we have the default &lt;code&gt;equals()&lt;/code&gt; which behaves like == which considers all instances in memory as different objects we don&apos;t have any problem.&lt;/p&gt;\n&lt;p&gt;But in our previous example we said we want Person instances to be considered equal if their ages and names match.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;);\n    System.out.println ( person1.equals(person2) );  --&amp;gt; will print &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s create a map to store those instances as keys with some string as pair value&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;Person, String&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\nmap.put(person1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\nmap.put(person2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In Person class we have not overridden the &lt;code&gt;hashCode&lt;/code&gt; method but we have overridden &lt;code&gt;equals&lt;/code&gt; method. Since the default &lt;code&gt;hashCode&lt;/code&gt; provides different results for different java instances &lt;code&gt;person1.hashCode()&lt;/code&gt; and &lt;code&gt;person2.hashCode()&lt;/code&gt; have big chances of having different results.&lt;/p&gt;\n&lt;p&gt;Our map might end with those persons in different linkedLists.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/TOSNY.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/TOSNY.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This is against the logic of a HashMap&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A HashMap is not allowed to have multiple equal keys!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;But ours now has and the reason is that the default &lt;code&gt;hashCode()&lt;/code&gt; which was inherited from Object Class was not enough. Not after we have overridden the &lt;code&gt;equals()&lt;/code&gt; method on Person Class.&lt;/p&gt;\n&lt;p&gt;That is the reason why we must override &lt;code&gt;hashCode()&lt;/code&gt; method after we have overridden &lt;code&gt;equals&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s fix that. Let&apos;s override our &lt;code&gt;hashCode()&lt;/code&gt; method to consider the same fields that &lt;code&gt;equals()&lt;/code&gt; considers, namely &lt;code&gt;age, name&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer age;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n    \n      ..getters, setters, constructors\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object o)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == o) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || getClass() != o.getClass()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Person) o;\n        &lt;span class=&quot;hljs-type&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;= person.age &amp;amp;&amp;amp;\n                name.equals(person.name);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Objects.hash(name, age);\n    }\n\n      }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s try again to save those keys in our HashMap&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;Person, String&amp;gt; map = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\nmap.put(person1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;);\nmap.put(person2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;person1.hashCode()&lt;/code&gt; and &lt;code&gt;person2.hashCode()&lt;/code&gt; will definitely be the same. Let&apos;s say it is 0.&lt;/p&gt;\n&lt;p&gt;HashMap will go to bucket 0 and in that LinkedList will save the person1 as key with the value &quot;1&quot;. For the second put HashMap is intelligent enough and when it goes again to bucket 0 to save person2 key with value &quot;2&quot; it will see that another equal key already exists there. So it will overwrite the previous key. So in the end only person2 key will exist in our HashMap.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/i7hek.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/i7hek.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Now we are aligned with the rule of Hash Map that says no multiple equal keys are allowed!&lt;/p&gt;\n    ","\n&lt;p&gt;Simply put, the equals-method in Object check for reference equality, where as two instances of your class could still be semantically equal when the properties are equal. This is for instance important when putting your objects into a container that utilizes equals and hashcode, like &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/HashMap.html&quot; rel=&quot;noreferrer&quot; title=&quot;HashMap.java&quot;&gt;HashMap&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Set.html&quot; rel=&quot;noreferrer&quot; title=&quot;Set.java&quot;&gt;Set&lt;/a&gt;. Let&apos;s say we have a class like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    String id;\n    String whatevs;\n\n    Foo(String id, String whatevs) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.whatevs = whatevs;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We create two instances with the same &lt;strong&gt;id&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;something else&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Without overriding equals we are getting:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;a.equals(b) is false because they are two different instances&lt;/li&gt;\n&lt;li&gt;a.equals(a) is true since it&apos;s the same instance&lt;/li&gt;\n&lt;li&gt;b.equals(b) is true since it&apos;s the same instance&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Correct? Well maybe, if this is what you want. But let&apos;s say we want objects with the same id to be the same object, regardless if it&apos;s two different instances. We override the equals (and hashcode):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n    String id;\n    String whatevs;\n\n    Foo(String id, String whatevs) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id = id;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.whatevs = whatevs;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object other)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (other &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Foo) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((Foo)other).id.equals(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id);   \n        }\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id.hashCode();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As for implementing equals and hashcode I can recommend using &lt;a href=&quot;http://code.google.com/p/guava-libraries/wiki/CommonObjectUtilitiesExplained&quot; rel=&quot;noreferrer&quot;&gt;Guava&apos;s helper methods&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let me explain the concept in very simple words.&lt;/p&gt;\n&lt;p&gt;Firstly from a broader perspective we have collections, and hashmap is one of the datastructure in the collections.&lt;/p&gt;\n&lt;p&gt;To understand why we have to override the both equals and hashcode method, if need to first understand what is hashmap and what is does.&lt;/p&gt;\n&lt;p&gt;A hashmap is a datastructure which stores key value pairs of data in array fashion. Lets say a[], where each element in &apos;a&apos; is a key value pair.&lt;/p&gt;\n&lt;p&gt;Also each index in the above array can be linked list thereby having more than one values at one index.&lt;/p&gt;\n&lt;p&gt;Now why is a hashmap used?&lt;/p&gt;\n&lt;p&gt;If we have to search among  a large array then searching through each if them will not be efficient, so what hash technique tells us that lets pre process the array with some logic and group the elements based on that logic i.e. Hashing&lt;/p&gt;\n&lt;p&gt;EG: we have array 1,2,3,4,5,6,7,8,9,10,11 and we apply a hash function mod 10 so 1,11 will be grouped in together. So if we had to search for 11 in previous array then we would have to iterate the complete array but when we group it we limit our scope of iteration thereby improving speed. That datastructure used to store all the above information can be thought of as a 2d array for simplicity&lt;/p&gt;\n&lt;p&gt;Now apart from the above hashmap also tells that it wont add any Duplicates in it. And this is the main reason why we have to override the equals and hashcode&lt;/p&gt;\n&lt;p&gt;So when its said that explain the internal working of hashmap , we need to find what methods the hashmap has and how does it follow the above rules which i explained above&lt;/p&gt;\n&lt;p&gt;so the hashmap has method called as put(K,V) , and according to hashmap it should follow the above rules of efficiently distributing the array and not adding any duplicates&lt;/p&gt;\n&lt;p&gt;so what put does is that it will first generate the hashcode for the given key to decide which index the value should go in.if nothing is present at that index then the new value will be added over there, if something is already present over there then the new value should be added after the end of the linked list at that index. but remember no duplicates should be added as per the desired behavior of the hashmap. so lets say you have two Integer objects aa=11,bb=11.&lt;/p&gt;\n&lt;p&gt;As every object derived from the object class, the default implementation for comparing two objects is that it compares the reference and not values inside the object. So in the above case both though semantically equal will fail the equality test, and possibility that two objects which same hashcode and same values will exists thereby creating duplicates. If we override then we could avoid adding duplicates.\nYou could also refer to &lt;a href=&quot;http://howtodoinjava.com/2012/10/09/how-hashmap-works-in-java/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Detail working&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n    String name;\n    String mobile;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name,String mobile)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mobile = mobile;\n    }\n    \n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;calling hascode method of Employee&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; str.length(); i++) {\n            sum = sum + str.charAt(i);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sum;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;calling equals method of Employee&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Employee) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.mobile.equalsIgnoreCase(emp.mobile)) {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;returning true&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;returning false&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hhh&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hhh&quot;&lt;/span&gt;);\n        HashMap&amp;lt;Employee, Employee&amp;gt; h = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n        &lt;span class=&quot;hljs-comment&quot;&gt;//for (int i = 0; i &amp;lt; 5; i++) {&lt;/span&gt;\n            h.put(emp, emp);\n            h.put(emp2, emp2);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//}&lt;/span&gt;\n        \n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;----------------&quot;&lt;/span&gt;);\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;size of hashmap: &quot;&lt;/span&gt;+h.size());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt; :&lt;/p&gt;\n&lt;p&gt;If you only override the hash-code method nothing happens, because it always returns a new &lt;code&gt;hashCode&lt;/code&gt; for each object as an Object class.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; :&lt;/p&gt;\n&lt;p&gt;If you only override the equals method, if &lt;code&gt;a.equals(b)&lt;/code&gt; is true it means the &lt;code&gt;hashCode&lt;/code&gt; of a and b must be the same but that does not happen since you did not override the &lt;code&gt;hashCode&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;Note :  &lt;code&gt;hashCode()&lt;/code&gt; method of Object class always returns a new &lt;code&gt;hashCode&lt;/code&gt; for each object.&lt;/p&gt;\n&lt;p&gt;So when you need to use your object in the hashing based collection, you must override both &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Java puts a rule that &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;If two objects are equal using Object class equals method, then the hashcode method should give the same value for these two objects.&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, if in our class we override &lt;code&gt;equals()&lt;/code&gt; we should override &lt;code&gt;hashcode()&lt;/code&gt; method also to follow this rule.\nBoth methods, &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashcode()&lt;/code&gt;, are used in &lt;code&gt;Hashtable&lt;/code&gt;, for example, to store values as key-value pairs. If we override one and not the other, there is a possibility that the &lt;code&gt;Hashtable&lt;/code&gt; may not work as we want, if we use such object as a key.&lt;/p&gt;\n    ","\n&lt;p&gt;Because if you do not override them you will be use the default implentation in Object.&lt;/p&gt;\n\n&lt;p&gt;Given that instance equality and hascode values generally require knowledge of what makes up an object they generally will need to be redefined in your class to have any tangible meaning.&lt;/p&gt;\n    ","\n&lt;p&gt;In order to use our own class objects as keys in collections like HashMap, Hashtable etc.. , we should override both methods ( hashCode() and equals() ) by having an awareness on internal working of collection. Otherwise, it leads to wrong results which we are not expected.&lt;/p&gt;\n    ","\n&lt;p&gt;Adding to @Lombo &apos;s answer&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;When will you need to override equals() ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The default implementation of Object&apos;s equals() is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which means two objects will be considered equal only if they have the same memory address which will be true only if you are\ncomparing an object with itself.&lt;/p&gt;\n\n&lt;p&gt;But you might want to consider two objects the same if they have the same value for one\nor more of their properties (Refer the example given in @Lombo &apos;s answer). &lt;/p&gt;\n\n&lt;p&gt;So you will override &lt;code&gt;equals()&lt;/code&gt; in these situations and you would give your own conditions for equality.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;I have successfully implemented equals() and it is working great.So why are they asking to override hashCode() as well?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Well.As long as you don&apos;t use &lt;em&gt;&quot;Hash&quot; based Collections&lt;/em&gt; on your user-defined class,it is fine.\nBut some time in the future you might want to use &lt;code&gt;HashMap&lt;/code&gt; or &lt;code&gt;HashSet&lt;/code&gt; and if you don&apos;t &lt;code&gt;override&lt;/code&gt; and &lt;em&gt;&quot;correctly implement&quot; hashCode()&lt;/em&gt;, these Hash based collection won&apos;t work as intended.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Override only equals (Addition to @Lombo &apos;s answer)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;myMap.put(first,someValue)\nmyMap.contains(second); --&amp;gt; But it should be the same since the key are the same.But returns &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;!!! How?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;First of all,HashMap checks if the hashCode of &lt;code&gt;second&lt;/code&gt; is the same as &lt;code&gt;first&lt;/code&gt;.\nOnly if the values are the same,it will proceed to check the equality in the same bucket.&lt;/p&gt;\n\n&lt;p&gt;But here the hashCode is different for these 2 objects (because they have different memory address-from default implementation).\nHence it will not even care to check for equality.&lt;/p&gt;\n\n&lt;p&gt;If you have a breakpoint inside your overridden equals() method,it wouldn&apos;t step in if they have different hashCodes.\n&lt;code&gt;contains()&lt;/code&gt; checks &lt;code&gt;hashCode()&lt;/code&gt; and only if they are the same it would call your &lt;code&gt;equals()&lt;/code&gt; method.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why can&apos;t we make the HashMap check for equality in all the buckets? So there is no necessity for me to override hashCode() !!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Then you are missing the point of Hash based Collections.\nConsider the following :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Your &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; implementation : intObject%&lt;span class=&quot;hljs-number&quot;&gt;9.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following are the keys stored in the form of buckets.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Bucket &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;,... (in thousands)\nBucket &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;29.&lt;/span&gt;..\nBucket &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,...\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Say,you want to know if the map contains the key 10.\nWould you want to search all the buckets? or Would you want to search only one bucket?&lt;/p&gt;\n\n&lt;p&gt;Based on the hashCode,you would identify that if 10 is present,it must be present in Bucket 1.\nSo only Bucket 1 will be searched !!&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Hashing Algorithm&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; even number &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Equals Algorithm,&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.i &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;put(&apos;key&apos;,&apos;value&apos;) will calculate the hash value using &lt;code&gt;hashCode()&lt;/code&gt; to determine the\nbucket and uses &lt;code&gt;equals()&lt;/code&gt; method to find whether the value is already\npresent in the Bucket. If not it will added else it will be replaced with current value&lt;/li&gt;\n&lt;li&gt;get(&apos;key&apos;) will use &lt;code&gt;hashCode()&lt;/code&gt; to find the Entry (bucket) first and\n&lt;code&gt;equals()&lt;/code&gt; to find the value in Entry&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;if Both are overridden,&lt;/p&gt;\n\n&lt;p&gt;Map&amp;lt;&lt;strong&gt;A&lt;/strong&gt;&amp;gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map.Entry &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,...\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if equals is not overridden&lt;/p&gt;\n\n&lt;p&gt;Map&amp;lt;&lt;strong&gt;A&lt;/strong&gt;&amp;gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map.Entry &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,...,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,... &lt;span class=&quot;hljs-comment&quot;&gt;// Duplicate values as equals not overridden&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,...,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If hashCode is not overridden&lt;/p&gt;\n\n&lt;p&gt;Map&amp;lt;&lt;strong&gt;A&lt;/strong&gt;&amp;gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map.Entry &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nMap.Entry &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; --&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Same values are Stored in different hasCodes violates Contract 1&lt;/span&gt;\nSo on...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;HashCode Equal Contract&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Two keys equal according to equal method should generate same hashCode&lt;/li&gt;\n&lt;li&gt;Two Keys generating same hashCode need not be equal (In above example all even numbers generate same hash Code)&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;1) &lt;strong&gt;The common mistake is shown in the example below.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String color;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String color)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.color = color;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(obj==&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Car))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;   \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj == &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.color.equals(((Car) obj).color);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//hashMap stores Car type and its quantity&lt;/span&gt;\n        HashMap&amp;lt;Car, Integer&amp;gt; m = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;Car, Integer&amp;gt;();\n        m.put(a1, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n        m.put(a2, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;);\n        System.out.println(m.get(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;)));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the green Car is not found&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Problem caused by hashCode()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The problem is caused by the un-overridden method &lt;code&gt;hashCode()&lt;/code&gt;. The contract between &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; is:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If two objects are equal, then they must have the same hash code.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If two objects have the same hash code, they may or may not be equal.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.color.hashCode(); \n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;It is useful when using &lt;a href=&quot;http://wiki.c2.com/?ValueObject&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Value Objects&lt;/strong&gt;&lt;/a&gt;. The following is an excerpt from the &lt;a href=&quot;http://wiki.c2.com/?PortlandPatternRepository&quot; rel=&quot;nofollow noreferrer&quot;&gt;Portland Pattern Repository&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Examples of value objects are things\n  like numbers, dates, monies and\n  strings. Usually, they are small\n  objects which are used quite widely.\n  Their identity is based on their state\n  rather than on their object identity.\n  This way, you can have multiple copies\n  of the same conceptual value object.&lt;/p&gt;\n  \n  &lt;p&gt;So I can have multiple copies of an\n  object that represents the date 16 Jan\n  1998. Any of these copies will be equal to each other. For a small\n  object such as this, it is often\n  easier to create new ones and move\n  them around rather than rely on a\n  single object to represent the date.&lt;/p&gt;\n  \n  &lt;p&gt;A value object should always override\n  .equals() in Java (or = in Smalltalk).\n  (Remember to override .hashCode() as\n  well.)&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Assume you have class (A) that aggregates two other (B) (C), and you need to store instances of (A) inside hashtable. Default implementation only allows distinguishing of instances, but not by (B) and (C). So two instances of A could be equal, but default wouldn&apos;t allow you to compare them in correct way.  &lt;/p&gt;\n    ","\n&lt;p&gt;Consider collection of balls in a bucket all in black color. Your Job is to color those balls as follows and use it for appropriate game,&lt;/p&gt;\n\n&lt;p&gt;For Tennis - Yellow, Red.\nFor Cricket - White&lt;/p&gt;\n\n&lt;p&gt;Now bucket has balls in three colors Yellow, Red and White. And that now &lt;strong&gt;you did the coloring Only you know which color is for which game.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Coloring the balls - Hashing.\nChoosing the ball for game - Equals.&lt;/p&gt;\n\n&lt;p&gt;If you did the coloring and some one chooses the ball for either cricket or tennis they wont mind the color!!!&lt;/p&gt;\n    ","\n&lt;p&gt;I was looking into the explanation &quot; If you only override hashCode then when you call &lt;code&gt;myMap.put(first,someValue)&lt;/code&gt; it takes first, calculates its hashCode and stores it in a given bucket. Then when you call &lt;code&gt;myMap.put(first,someOtherValue)&lt;/code&gt; it should replace first with second as per the Map Documentation because they are equal (according to our definition).&quot; :&lt;/p&gt;\n\n&lt;p&gt;I think 2nd time when we are adding in &lt;code&gt;myMap&lt;/code&gt; then it should be the &apos;second&apos; object like &lt;code&gt;myMap.put(second,someOtherValue)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The methods equals and hashcode are defined in the object class. By default if the equals method returns true, then the system will go further and check the value of the hash code. If the hash code of the 2 objects is also same only then the objects will be considered as same. So if you override only equals method, then even though the overridden equals method indicates 2 objects to be equal , the system defined hashcode may not indicate that the 2 objects are equal. So we need to override hash code as well.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Equals and Hashcode methods in Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;They are methods of java.lang.Object class which is the super class of all the classes (custom classes as well and others defined in java API).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;public boolean equals(Object obj)&lt;/p&gt;\n  \n  &lt;p&gt;public int hashCode()&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/0aaFt.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/0aaFt.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;public boolean equals(Object obj)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This method simply checks if two object references x and y refer to the same object. i.e. It checks if x == y.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is reflexive:&lt;/em&gt; for any reference value x, x.equals(x) should return true.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is symmetric:&lt;/em&gt; for any reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is transitive:&lt;/em&gt; for any reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;It is consistent:&lt;/em&gt; for any reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the object is modified.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;For any non-null reference value x, x.equals(null) should return\n  false.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;public int hashCode()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This method returns the hash code value for the object on which this method is invoked. This method returns the hash code value as an integer and is supported for the benefit of hashing based collection classes such as Hashtable, HashMap, HashSet etc. This method must be overridden in every class that overrides the equals method.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The general contract of hashCode is:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. &lt;/p&gt;\n\n&lt;p&gt;This integer need not remain consistent from one execution of an application to another execution of the same application.&lt;/p&gt;\n\n&lt;p&gt;If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.&lt;/p&gt;\n\n&lt;p&gt;It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Equal objects must produce the same hash code as long as they are\n  equal, however unequal objects need not produce distinct hash codes.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Resources: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.javaranch.com/journal/2002/10/equalhash.html&quot; rel=&quot;noreferrer&quot;&gt;JavaRanch&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.google.co.in/imgres?imgurl=https%3A%2F%2Fi.ytimg.com%2Fvi%2FfAlRR2p9Le0%2Fmaxresdefault.jpg&amp;amp;imgrefurl=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DfAlRR2p9Le0&amp;amp;docid=tHx46In-72mrAM&amp;amp;tbnid=VTZXQ9fiF-XDcM%3A&amp;amp;w=1280&amp;amp;h=720&amp;amp;bih=678&amp;amp;biw=1319&amp;amp;ved=0ahUKEwiQj-fBuePOAhXHq48KHY8VBt4QMwgmKAgwCA&amp;amp;iact=mrc&amp;amp;uact=8&quot; rel=&quot;noreferrer&quot;&gt;Picture&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you override &lt;code&gt;equals()&lt;/code&gt; and not &lt;code&gt;hashcode()&lt;/code&gt;, you will not find any problem unless you or someone else uses that class type in a hashed collection like &lt;code&gt;HashSet&lt;/code&gt;.\nPeople before me have clearly explained the documented theory multiple times, I am just here to provide a very simple example.&lt;/p&gt;\n\n&lt;p&gt;Consider a class whose &lt;code&gt;equals()&lt;/code&gt; need to mean something customized :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rishav&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String rshv;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Rishav&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String rshv)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.rshv = rshv;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/**\n        * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; the rshv\n        */&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getRshv&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rshv;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/**\n        * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; rshv the rshv to set\n        */&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setRshv&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String rshv)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.rshv = rshv;\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Rishav) {\n                obj = (Rishav) obj;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.rshv.equals(((Rishav) obj).getRshv())) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                }\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n            }\n        }\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rshv.hashCode();\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now consider this main class :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.HashSet;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Set;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TestRishav&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;Rishav&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rA&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rishav&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rishav&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;Rishav&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rB&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rishav&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rishav&quot;&lt;/span&gt;);\n            System.out.println(rA.equals(rB));\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----------------------------------&quot;&lt;/span&gt;);\n\n            Set&amp;lt;Rishav&amp;gt; hashed = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;&amp;gt;();\n            hashed.add(rA);\n            System.out.println(hashed.contains(rB));\n            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-----------------------------------&quot;&lt;/span&gt;);\n\n            hashed.add(rB);\n            System.out.println(hashed.size());\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will yield the following output :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am happy with the results. But if I have not overridden &lt;code&gt;hashCode()&lt;/code&gt;, it will cause nightmare as objects of &lt;code&gt;Rishav&lt;/code&gt; with same member content will no longer be treated as unique as the &lt;code&gt;hashCode&lt;/code&gt; will be different, as generated by default behavior, here&apos;s the would be output :-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    -----------------------------------\n    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In the example below, if you comment out the override for equals or hashcode in the Person class, this code will fail to look up Tom&apos;s order. Using the default implementation of hashcode can cause failures in hashtable lookups.&lt;/p&gt;\n\n&lt;p&gt;What I have below is a simplified code that pulls up people&apos;s order by Person. Person is being used as a key in the hashtable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n    String name;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age;\n    String socialSecurityNumber;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; age, String socialSecurityNumber)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.age = age;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.socialSecurityNumber = socialSecurityNumber;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object p)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Person is same if social security number is same&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((p &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Person) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.socialSecurityNumber.equals(((Person) p).socialSecurityNumber)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {        &lt;span class=&quot;hljs-comment&quot;&gt;//I am using a hashing function in String.java instead of writing my own.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; socialSecurityNumber.hashCode();\n    }\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt; {\n    String[]  items;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;insertOrder&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[]  items)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.items=items;\n    }\n\n}\n\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.Hashtable;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Main&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n       Person p1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;548-56-4412&quot;&lt;/span&gt;);\n        Person p2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jerry&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;456-74-4125&quot;&lt;/span&gt;);\n        Person p3=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sherry&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;418-55-1235&quot;&lt;/span&gt;);\n\n        Order order1=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt;();\n        order1.insertOrder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;mouse&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;car charger&quot;&lt;/span&gt;});\n\n        Order order2=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt;();\n        order2.insertOrder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;Multi vitamin&quot;&lt;/span&gt;});\n\n        Order order3=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Order&lt;/span&gt;();\n        order3.insertOrder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;handbag&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;iPod&quot;&lt;/span&gt;});\n\n        Hashtable&amp;lt;Person,Order&amp;gt; hashtable=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hashtable&lt;/span&gt;&amp;lt;Person,Order&amp;gt;();\n        hashtable.put(p1,order1);\n        hashtable.put(p2,order2);\n        hashtable.put(p3,order3);\n\n       &lt;span class=&quot;hljs-comment&quot;&gt;//The line below will fail if Person class does not override hashCode()&lt;/span&gt;\n       Order tomOrder= hashtable.get(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;548-56-4412&quot;&lt;/span&gt;));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String item:tomOrder.items)\n        {\n            System.out.println(item);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt; method is used to get a unique integer for given object. This integer is used for determining the bucket location, when this object needs to be stored in some &lt;code&gt;HashTable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; like data structure. By default, Objects &lt;code&gt;hashCode()&lt;/code&gt; method returns and integer representation of memory address where object is stored.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; method of objects is used when we insert them into a &lt;code&gt;HashTable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt; or &lt;code&gt;HashSet&lt;/code&gt;. More about &lt;code&gt;HashTables&lt;/code&gt; on Wikipedia.org for reference.&lt;/p&gt;\n\n&lt;p&gt;To insert any entry in map data structure, we need both key and value. If both key and values are user define data types, the &lt;code&gt;hashCode()&lt;/code&gt; of the key will be determine where to store the object internally. When require to lookup the object from the map also, the hash code of the key will be determine where to search for the object.&lt;/p&gt;\n\n&lt;p&gt;The hash code only points to a certain &quot;area&quot; (or list, bucket etc) internally. Since different key objects could potentially have the same hash code, the hash code itself is no guarantee that the right key is found. The &lt;code&gt;HashTable&lt;/code&gt; then iterates this area (all keys with the same hash code) and uses the key&apos;s &lt;code&gt;equals()&lt;/code&gt; method to find the right key. Once the right key is found, the object stored for that key is returned.&lt;/p&gt;\n\n&lt;p&gt;So, as we can see, a combination of the &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; methods are used when storing and when looking up objects in a &lt;code&gt;HashTable&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;NOTES:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Always use same attributes of an object to generate &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; both. As in our case, we have used employee id.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; must be consistent (if the objects are not modified, then it must keep returning the same value).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Whenever &lt;code&gt;a.equals(b)&lt;/code&gt;, then &lt;code&gt;a.hashCode()&lt;/code&gt; must be same as &lt;code&gt;b.hashCode()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you override one, then you should override the other.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://parameshk.blogspot.in/2014/10/examples-of-comparable-comporator.html&quot; rel=&quot;nofollow&quot;&gt;http://parameshk.blogspot.in/2014/10/examples-of-comparable-comporator.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;String class and wrapper classes have different implementation of &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods than Object class. equals() method of Object class compares the references of the objects, not the contents. hashCode() method of Object class returns distinct hashcode for every single object whether the contents are same.&lt;/p&gt;\n\n&lt;p&gt;It leads problem when you use Map collection and the key is of Persistent type, StringBuffer/builder type. Since they don&apos;t override equals() and hashCode() unlike String class, equals() will return false when you compare two different objects even though both have same contents. It will make the hashMap storing same content keys. Storing same content keys means it is violating the rule of Map because Map doesnt allow duplicate keys at all.\nTherefore you override equals() as well as hashCode() methods in your class and provide the implementation(IDE can generate these methods) so that they work same as String&apos;s equals() and hashCode() and prevent same content keys. &lt;/p&gt;\n\n&lt;p&gt;You have to override hashCode() method along with equals() because equals() work according hashcode. &lt;/p&gt;\n\n&lt;p&gt;Moreover overriding hashCode() method along with equals() helps to intact the equals()-hashCode() contract: &quot;If two objects are equal, then they must have the same hash code.&quot;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;When do you need to write custom implementation for hashCode()?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As we know that internal working of HashMap is on principle of Hashing. There are certain buckets where entrysets get stored. You customize the hashCode() implementation according your requirement so that same category objects can be stored into same index. \nwhen you store the values into Map collection using &lt;code&gt;put(k,v)&lt;/code&gt;method, the internal implementation of put() is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;put(k, v){\nhash(k);\nindex=hash &amp;amp; (n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Means, it generates index and the index is generated based on the hashcode of particular key object. So make this method generate hashcode according your requirement because same hashcode entrysets will be stored into same bucket or index. &lt;/p&gt;\n\n&lt;p&gt;That&apos;s it!&lt;/p&gt;\n    ","\n&lt;p&gt;IMHO, it&apos;s as per the rule says - If two objects are equal then they should have same hash, i.e., equal objects should produce equal hash values.&lt;/p&gt;\n\n&lt;p&gt;Given above, default equals() in Object is == which does comparison on the address, hashCode() returns the address in integer(hash on actual address) which is again distinct for distinct Object.&lt;/p&gt;\n\n&lt;p&gt;If you need to use the custom Objects in the Hash based collections, you need to override both equals() and hashCode(), example If I want to maintain the HashSet of the Employee Objects, if I don&apos;t use stronger hashCode and equals I may endup overriding the two different Employee Objects, this happen when I use the age as the hashCode(), however I should be using the unique value which can be the Employee ID.&lt;/p&gt;\n    ","\n&lt;h2&gt;To help you check for duplicate Objects, we need a custom equals and hashCode.&lt;/h2&gt;\n\n&lt;p&gt;Since hashcode always returns a number its always fast to retrieve an object using a number rather than an alphabetic key. &lt;strong&gt;How will it do?&lt;/strong&gt; Assume we created a new object by passing some value which is already available in some other object. Now the new object will return the same hash value as of another object because the value passed is same. Once the same hash value is returned, JVM will go to the same memory address every time and if in case there are more than one objects present for the same hash value it will use equals() method to identify the correct object.&lt;/p&gt;\n    ","\n&lt;p&gt;When you want to store and retrieve your custom object as a key in Map, then you should always override equals and hashCode in your custom Object .\nEg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;HashMap&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\nmap.put(p1,&lt;span class=&quot;hljs-string&quot;&gt;&quot;value 1&quot;&lt;/span&gt;);\nmap.put(p2,&lt;span class=&quot;hljs-string&quot;&gt;&quot;value 2&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here p1 &amp;amp; p2 will consider as only one object and &lt;code&gt;map&lt;/code&gt; size will be only 1 because they are equal.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; empId;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String empName;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; empId, String empName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empId = empId;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empName = empName;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getEmpId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; empId;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setEmpId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; empId)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empId = empId;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getEmpName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; empName;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setEmpName&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String empName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.empName = empName;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Employee [empId=&quot;&lt;/span&gt; + empId + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, empName=&quot;&lt;/span&gt; + empName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; empId + empName.hashCode();\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object obj)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; == obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Employee)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Employee) obj;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getEmpId() == emp.getEmpId() &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getEmpName().equals(emp.getEmpName());\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test Class &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Manash&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Manash&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;emp3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Employee&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;103&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ranjan&quot;&lt;/span&gt;);\n        System.out.println(emp1.hashCode());\n        System.out.println(emp2.hashCode());\n        System.out.println(emp1.equals(emp2));\n        System.out.println(emp1.equals(emp3));\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Object Class equals(Object obj) is used to compare address comparesion thats why when in Test class if you compare two objects then equals method giving false but when we override hashcode() the it can compare content and give proper result.&lt;/p&gt;\n    ","\n&lt;p&gt;Both the methods are defined in Object class. And both are in its simplest implementation. So when you need you want add some more implementation to these methods then you have override in  your class. &lt;/p&gt;\n\n&lt;p&gt;For Ex: equals() method in object only checks its equality on the reference. So if you need compare its state as well then you can override that as it is done in String class.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s no mention in this answer of testing the equals/hashcode contract.&lt;/p&gt;\n&lt;p&gt;I&apos;ve found the &lt;a href=&quot;https://github.com/jqno/equalsverifier&quot; rel=&quot;nofollow noreferrer&quot;&gt;EqualsVerifier&lt;/a&gt; library to be very useful and comprehensive. It is also very easy to use.&lt;/p&gt;\n&lt;p&gt;Also, building &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods from scratch involves a lot of boilerplate code. The &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Commons Lang&lt;/a&gt; library provides the &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;EqualsBuilder&lt;/a&gt; and &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;HashCodeBuilder&lt;/a&gt; classes. These classes greatly simplify implementing &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; methods for complex classes.&lt;/p&gt;\n&lt;p&gt;As an aside, it&apos;s worth considering overriding the &lt;code&gt;toString()&lt;/code&gt; method to aid debugging. &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Commons Lang&lt;/a&gt; library provides the &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/index.html?org/apache/commons/lang3/builder/HashCodeBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ToStringBuilder&lt;/a&gt; class to help with this.&lt;/p&gt;\n    "],"540":["\n&lt;p&gt;Yes, with SFINAE you can check if a given class does provide a certain method. Here&apos;s the working code:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hello&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Generic&lt;/span&gt; {};    \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// SFINAE test&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_helloworld&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; one;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;two&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]; };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; C&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; one &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&amp;amp;C::helloworld) )&lt;/span&gt; &lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; C&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; two &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;    \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { value = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;) };\n};\n    \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    std::cout &amp;lt;&amp;lt; has_helloworld&amp;lt;Hello&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n    std::cout &amp;lt;&amp;lt; has_helloworld&amp;lt;Generic&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;ve just tested it with Linux and gcc 4.1/4.3. I don&apos;t know if it&apos;s portable to other platforms running different compilers.&lt;/p&gt;\n    ","\n&lt;p&gt;This question is old, but with C++11 we got a new way to check for a functions existence (or existence of any non-type member, really), relying on SFINAE again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;serialize_imp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::ostream&amp;amp; os, T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; obj, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;\n    -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(os &amp;lt;&amp;lt; obj, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;())&lt;/span&gt;\n&lt;/span&gt;{\n  os &amp;lt;&amp;lt; obj;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;serialize_imp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::ostream&amp;amp; os, T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; obj, &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)&lt;/span&gt;\n    -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(obj.stream(os), &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;())&lt;/span&gt;\n&lt;/span&gt;{\n  obj.&lt;span class=&quot;hljs-built_in&quot;&gt;stream&lt;/span&gt;(os);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::ostream&amp;amp; os, T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; obj)&lt;/span&gt;\n    -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(serialize_imp(os, obj, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;())&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;serialize_imp&lt;/span&gt;(os, obj, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now onto some explanations. First thing, I use &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2634.html&quot; rel=&quot;noreferrer&quot;&gt;expression SFINAE&lt;/a&gt; to exclude the &lt;code&gt;serialize(_imp)&lt;/code&gt; functions from overload resolution, if the first expression inside &lt;code&gt;decltype&lt;/code&gt; isn&apos;t valid (aka, the function doesn&apos;t exist).&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;void()&lt;/code&gt; is used to make the return type of all those functions &lt;code&gt;void&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;0&lt;/code&gt; argument is used to prefer the &lt;code&gt;os &amp;lt;&amp;lt; obj&lt;/code&gt; overload if both are available (literal &lt;code&gt;0&lt;/code&gt; is of type &lt;code&gt;int&lt;/code&gt; and as such the first overload is a better match).&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now, you probably want a trait to check if a function exists. Luckily, it&apos;s easy to write that. Note, though, that you need to write a trait &lt;em&gt;yourself&lt;/em&gt; for every different function name you might want.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;sfinae_true&lt;/span&gt; : std::true_type{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; detail{\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; A0&amp;gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;\n      -&amp;gt; sfinae_true&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::declval&amp;lt;T&amp;gt;().stream(std::declval&amp;lt;A0&amp;gt;()))&lt;/span&gt;&amp;gt;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; A0&amp;gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test_stream&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)&lt;/span&gt; -&amp;gt; std::false_type&lt;/span&gt;;\n} &lt;span class=&quot;hljs-comment&quot;&gt;// detail::&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Arg&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_stream&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(detail::&lt;span class=&quot;hljs-built_in&quot;&gt;test_stream&lt;/span&gt;&amp;lt;T, Arg&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/a/cd139d95d214c5c3&quot; rel=&quot;noreferrer&quot;&gt;Live example.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And on to explanations. First, &lt;code&gt;sfinae_true&lt;/code&gt; is a helper type, and it basically amounts to the same as writing &lt;code&gt;decltype(void(std::declval&amp;lt;T&amp;gt;().stream(a0)), std::true_type{})&lt;/code&gt;. The advantage is simply that it&apos;s shorter.&lt;br&gt;\nNext, the &lt;code&gt;struct has_stream : decltype(...)&lt;/code&gt; inherits from either &lt;code&gt;std::true_type&lt;/code&gt; or &lt;code&gt;std::false_type&lt;/code&gt; in the end, depending on whether the &lt;code&gt;decltype&lt;/code&gt; check in &lt;code&gt;test_stream&lt;/code&gt; fails or not.&lt;br&gt;\nLast, &lt;code&gt;std::declval&lt;/code&gt; gives you a &quot;value&quot; of whatever type you pass, without you needing to know how you can construct it. Note that this is only possible inside an unevaluated context, such as &lt;code&gt;decltype&lt;/code&gt;, &lt;code&gt;sizeof&lt;/code&gt; and others.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note that &lt;code&gt;decltype&lt;/code&gt; is not necessarily needed, as &lt;code&gt;sizeof&lt;/code&gt; (and all unevaluated contexts) got that enhancement. It&apos;s just that &lt;code&gt;decltype&lt;/code&gt; already delivers a type and as such is just cleaner. Here&apos;s a &lt;code&gt;sizeof&lt;/code&gt; version of one of the overloads:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;serialize_imp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::ostream&amp;amp; os, T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;&amp;amp; obj, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*)[&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;((os &amp;lt;&amp;lt; obj),&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n  os &amp;lt;&amp;lt; obj;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; parameters are still there for the same reason. The array pointer is used to provide a context where &lt;code&gt;sizeof&lt;/code&gt; can be used.&lt;/p&gt;\n    ","\n&lt;p&gt;C++ allows &lt;a href=&quot;http://en.wikipedia.org/wiki/SFINAE&quot; rel=&quot;nofollow noreferrer&quot;&gt;SFINAE&lt;/a&gt; to be used for this (notice that with C++11 features this is simplier because it supports extended SFINAE on nearly arbitrary expressions - the below was crafted to work with common C++03 compilers):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HAS_MEM_FUNC(func, name)                                        \\\n    template&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename Sign&amp;gt;&lt;/span&gt;                                 \\\n    struct name {                                                       \\\n        typedef char yes[1];                                            \\\n        typedef char no [2];                                            \\\n        template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename U, U&amp;gt;&lt;/span&gt; struct type_check;                     \\\n        template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename _1&amp;gt;&lt;/span&gt; static yes &amp;amp;chk(type_check&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;Sign, &amp;amp;_1::func &amp;gt;&lt;/span&gt; *); \\\n        template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename   &amp;gt;&lt;/span&gt; static no  &amp;amp;chk(...);                    \\\n        static bool const value = sizeof(chk&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;(0)) == sizeof(yes);     \\\n    }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above template and macro tries to instantiate a template, giving it a member function pointer type, and the actual member function pointer. If the types do not fit, SFINAE causes the template to be ignored. Usage like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM_FUNC&lt;/span&gt;(toString, has_to_string);\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;\n&lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(has_to_string&amp;lt;T, std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(T::*)()&amp;gt;::value) {\n      ...\n   } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      ...\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But note that you cannot just call that &lt;code&gt;toString&lt;/code&gt; function in that &lt;code&gt;if&lt;/code&gt; branch. Since the compiler will check for validity in both branches, that would fail for cases the function doesn&apos;t exist. One way is to use SFINAE once again (&lt;code&gt;enable_if&lt;/code&gt; can be obtained from boost, too):&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; C, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; enable_if {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; T type;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;enable_if&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, T&amp;gt; { };\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM_FUNC&lt;/span&gt;(toString, has_to_string);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; enable_if&amp;lt;has_to_string&amp;lt;T, \n                   std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(T::*)()&amp;gt;::value, std::string&amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n&lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T * t)&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* something when T has toString ... */&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; t-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; enable_if&amp;lt;!has_to_string&amp;lt;T, \n                   std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(T::*)()&amp;gt;::value, std::string&amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n&lt;span class=&quot;hljs-title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T * t)&lt;/span&gt; &lt;/span&gt;{\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* something when T doesnt have toString ... */&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;T::toString() does not exist.&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Have fun using it. The advantage of it is that it also works for overloaded member functions, and also for &lt;code&gt;const&lt;/code&gt; member functions (remember using  &lt;code&gt;std::string(T::*)() const&lt;/code&gt; as the member function pointer type then!).&lt;/p&gt;\n    ","\n&lt;h2&gt;C++20 - &lt;code&gt;requires&lt;/code&gt; expressions&lt;/h2&gt;\n&lt;p&gt;With C++20 come concepts and assorted tools such as &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/constraints&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;requires&lt;/code&gt; expressions&lt;/a&gt; which are a built-in way to check for a function existence. With them you could rewrite your &lt;code&gt;optionalToString&lt;/code&gt; function as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_toString = &lt;span class=&quot;hljs-built_in&quot;&gt;requires&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp; t) {\n        t.&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n    };\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(has_toString)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Pre-C++20 - Detection toolkit&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf&quot; rel=&quot;noreferrer&quot;&gt;N4502&lt;/a&gt; proposes a detection toolkit for inclusion into the C++17 standard library that eventually made it into the library fundamentals TS v2. It most likely won&apos;t ever get into the standard because it has been subsumed by &lt;code&gt;requires&lt;/code&gt; expressions since, but it still solves the problem in a somewhat elegant manner. The toolkit introduces some metafunctions, including &lt;a href=&quot;http://en.cppreference.com/w/cpp/experimental/is_detected&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::is_detected&lt;/code&gt;&lt;/a&gt; which can be used to easily write type or function detection metafunctions on the top of it. Here is how you could use it:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; toString_t = &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;( std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;amp;&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;() );\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_toString = std::is_detected_v&amp;lt;toString_t, T&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the example above is untested. The detection toolkit is not available in standard libraries yet but the proposal contains a full implementation that you can easily copy if you really need it. It plays nice with the C++17 feature &lt;code&gt;if constexpr&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(has_toString&amp;lt;T&amp;gt;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;C++14 - Boost.Hana&lt;/h2&gt;\n&lt;p&gt;Boost.Hana apparently builds upon this specific example and provides a solution for C++14 in its documentation, so I&apos;m going to quote it directly:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;[...] Hana provides a &lt;code&gt;is_valid&lt;/code&gt; function that can be combined with C++14 generic lambdas to obtain a much cleaner implementation of the same thing:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; has_toString = hana::&lt;span class=&quot;hljs-built_in&quot;&gt;is_valid&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; obj) -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(obj.&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;()) { });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This leaves us with a function object &lt;code&gt;has_toString&lt;/code&gt; which returns whether the given expression is valid on the argument we pass to it. The result is returned as an &lt;code&gt;IntegralConstant&lt;/code&gt;, so constexpr-ness is not an issue here because the result of the function is represented as a type anyway. Now, in addition to being less verbose (that&apos;s a one liner!), the intent is much clearer. Other benefits are the fact that &lt;code&gt;has_toString&lt;/code&gt; can be passed to higher order algorithms and it can also be defined at function scope, so there is no need to pollute the namespace scope with implementation details.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;Boost.TTI&lt;/h2&gt;\n&lt;p&gt;Another somewhat idiomatic toolkit to perform such a check - even though less elegant - is &lt;a href=&quot;http://www.boost.org/doc/libs/1_55_0/libs/tti/doc/html/index.html&quot; rel=&quot;noreferrer&quot;&gt;Boost.TTI&lt;/a&gt;, introduced in Boost 1.54.0. For your example, you would have to use the macro &lt;code&gt;BOOST_TTI_HAS_MEMBER_FUNCTION&lt;/code&gt;. Here is how you could use it:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/tti/has_member_function.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Generate the metafunction&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;BOOST_TTI_HAS_MEMBER_FUNCTION&lt;/span&gt;(toString)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Check whether T has a member function toString&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// which takes no parameter and returns a std::string&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; foo = has_member_function_toString&amp;lt;T, std::string&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, you could use the &lt;code&gt;bool&lt;/code&gt; to create a SFINAE check.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Explanation&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The macro &lt;code&gt;BOOST_TTI_HAS_MEMBER_FUNCTION&lt;/code&gt; generates the metafunction &lt;code&gt;has_member_function_toString&lt;/code&gt; which takes the checked type as its first template parameter. The second template parameter corresponds to the return type of the member function, and the following parameters correspond to the types of the function&apos;s parameters. The member &lt;code&gt;value&lt;/code&gt; contains &lt;code&gt;true&lt;/code&gt; if the class &lt;code&gt;T&lt;/code&gt; has a member function &lt;code&gt;std::string toString()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Alternatively, &lt;code&gt;has_member_function_toString&lt;/code&gt; can take a member function pointer as a template parameter. Therefore, it is possible to replace &lt;code&gt;has_member_function_toString&amp;lt;T, std::string&amp;gt;::value&lt;/code&gt; by &lt;code&gt;has_member_function_toString&amp;lt;std::string T::* ()&amp;gt;::value&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Though this question is two years old, I&apos;ll dare to add my answer. Hopefully it will clarify the previous, indisputably excellent, solution. I took the very helpful answers of Nicola Bonelli and Johannes Schaub and merged them into a solution that is, IMHO, more readable, clear and does not require the &lt;code&gt;typeof&lt;/code&gt; extension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeHasToString&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This type won&apos;t compile if the second template parameter isn&apos;t of type T,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// so I can put a function pointer type in the first parameter and the function&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// itself in the second thus checking that the function has a specific signature.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeCheck&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Yes;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; No;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A helper struct to hold the declaration of the function pointer.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Change it if the function signature changes.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ToString&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(T::*fptr)&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; Yes &lt;span class=&quot;hljs-title&quot;&gt;HasToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TypeCheck&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ToString&amp;lt;T&amp;gt;::fptr, &amp;amp;T::toString &amp;gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; No  &lt;span class=&quot;hljs-title&quot;&gt;HasToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; value = (&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;HasToString&lt;/span&gt;&amp;lt;Type&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(Yes));\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I checked it with gcc 4.1.2.\nThe credit goes mainly to Nicola Bonelli and Johannes Schaub, so give them a vote up if my answer helps you :)&lt;/p&gt;\n    ","\n&lt;p&gt;A simple solution for C++11:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt;\n -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(  obj-&amp;gt;toString()  )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;     obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt; -&amp;gt; string\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Update, 3 years later: (and this is untested). To test for the existence, I think this will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test_has_toString_method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt;\n -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(  obj-&amp;gt;toString() , std::true_type{} )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;     obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test_has_toString_method&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt; -&amp;gt; std::false_type\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Well, this question has a long list of answers already, but I would like to emphasize the comment from Morwenn: there is a proposal for C++17 that makes it really much simpler.  See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf&quot; rel=&quot;noreferrer&quot; title=&quot;Proposing Standard Library Support for the C++ Detection Idiom, v2&quot;&gt;N4502&lt;/a&gt; for details, but as a self-contained example consider the following.&lt;/p&gt;\n\n&lt;p&gt;This part is the constant part, put it in a header.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;...&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Primary template handles all types not supporting the operation.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt;&amp;lt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; detect : std::false_type {};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Specialization recognizes/validates only types supporting the archetype.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Op&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;detect&lt;/span&gt;&amp;lt;T, Op, &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt;&amp;lt;Op&amp;lt;T&amp;gt;&amp;gt;&amp;gt; : std::true_type {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then there is the variable part, where you specify what you are looking for (a type, a member type, a function, a member function etc.).  In the case of the OP:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; toString_t = &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; has_toString = detect&amp;lt;T, toString_t&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following example, taken from &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf&quot; rel=&quot;noreferrer&quot; title=&quot;Proposing Standard Library Support for the C++ Detection Idiom, v2&quot;&gt;N4502&lt;/a&gt;, shows a more elaborate probe:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Archetypal expression for assignment operation.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;assign_t&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;amp;&amp;gt;() = std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;&amp;gt;())\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Trait corresponding to that archetype.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; is_assignable = detect&amp;lt;T, &lt;span class=&quot;hljs-type&quot;&gt;assign_t&lt;/span&gt;&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compared to the other implementations described above, this one is fairly simple: a reduced set of tools (&lt;code&gt;void_t&lt;/code&gt; and &lt;code&gt;detect&lt;/code&gt;) suffices, no need for hairy macros.  Besides, it was reported (see &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf&quot; rel=&quot;noreferrer&quot; title=&quot;Proposing Standard Library Support for the C++ Detection Idiom, v2&quot;&gt;N4502&lt;/a&gt;) that it is measurably more efficient (compile-time and compiler memory consumption) than previous approaches.&lt;/p&gt;\n\n&lt;p&gt;Here is a &lt;a href=&quot;http://coliru.stacked-crooked.com/a/7eae9c76232a2d20&quot; rel=&quot;noreferrer&quot; title=&quot;Detection idiom&quot;&gt;live example&lt;/a&gt;.  It works fine with Clang, but unfortunately, GCC versions before 5.1 followed a different interpretation of the C++11 standard which caused &lt;code&gt;void_t&lt;/code&gt; to not work as expected.  Yakk already provided the work-around: use the following definition of &lt;code&gt;void_t&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/questions/28967003/void-t-in-parameter-list-works-but-not-as-return-type/28967049#28967049&quot;&gt;void_t in parameter list works but not as return type&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __GNUC__ &amp;lt; 5 &amp;amp;&amp;amp; ! defined __clang__&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// https://stackoverflow.com/a/28967049/1353549&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;...&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;voider&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; type = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;;\n};\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;...Ts&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; voider&amp;lt;Ts...&amp;gt;::type;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;...&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is what type traits are there for. Unfortunately, they have to be defined manually. In your case, imagine the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;response_trait&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; has_tostring = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;response_trait&lt;/span&gt;&amp;lt;your_type_with_tostring&amp;gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; has_tostring = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a C++11 solution for the general problem if &quot;If I did X, would it compile?&quot;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;type_sink&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; type; }; &lt;span class=&quot;hljs-comment&quot;&gt;// consumes a type, and makes it `void`&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;type_sink_t&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; type_sink&amp;lt;T&amp;gt;::type;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; has_to_string : std::false_type {}; \\\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_to_string&lt;/span&gt;&amp;lt;\n  T,\n  &lt;span class=&quot;hljs-type&quot;&gt;type_sink_t&lt;/span&gt;&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;( std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;() ) &amp;gt;\n&amp;gt;: std::true_type {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Trait &lt;code&gt;has_to_string&lt;/code&gt; such that &lt;code&gt;has_to_string&amp;lt;T&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;T&lt;/code&gt; has a method &lt;code&gt;.toString&lt;/code&gt; that can be invoked with 0 arguments in this context.&lt;/p&gt;\n\n&lt;p&gt;Next, I&apos;d use tag dispatching:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; details {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n  std::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString_helper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj, std::true_type &lt;span class=&quot;hljs-comment&quot;&gt;/*has_to_string*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n  }\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n  std::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString_helper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj, std::false_type &lt;span class=&quot;hljs-comment&quot;&gt;/*has_to_string*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n  }\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; details::&lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString_helper&lt;/span&gt;( obj, has_to_string&amp;lt;T&amp;gt;{} );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which tends to be more maintainable than complex SFINAE expressions.&lt;/p&gt;\n\n&lt;p&gt;You can write these traits with a macro if you find yourself doing it alot, but they are relatively simple (a few lines each) so maybe not worth it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MAKE_CODE_TRAIT( TRAIT_NAME, ... ) \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;class T, class=void&amp;gt;&lt;/span&gt; struct TRAIT_NAME : std::false_type {}; \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;class T&amp;gt;&lt;/span&gt; struct TRAIT_NAME&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; T, type_sink_t&amp;lt; decltype( __VA_ARGS__ ) &amp;gt;&lt;/span&gt; &amp;gt;: std::true_type {};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;what the above does is create a macro &lt;code&gt;MAKE_CODE_TRAIT&lt;/code&gt;.  You pass it the name of the trait you want, and some code that can test the type &lt;code&gt;T&lt;/code&gt;.  Thus:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;MAKE_CODE_TRAIT&lt;/span&gt;( has_to_string, std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;() )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;creates the above traits class.&lt;/p&gt;\n\n&lt;p&gt;As an aside, the above technique is part of what MS calls &quot;expression SFINAE&quot;, and their 2013 compiler fails pretty hard.&lt;/p&gt;\n\n&lt;p&gt;Note that in C++1y the following syntax is possible:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;compiled_if&lt;/span&gt;&amp;lt; has_to_string &amp;gt;(*obj, [&amp;amp;](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; obj) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n  }) *&lt;span class=&quot;hljs-built_in&quot;&gt;compiled_else&lt;/span&gt; ([&amp;amp;]{ \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is an inline compilation conditional branch that abuses lots of C++ features.  Doing so is probably not worth it, as the benefit (of code being inline) is not worth the cost (of next to nobody understanding how it works), but the existence of that above solution may be of interest.&lt;/p&gt;\n    ","\n&lt;p&gt;With C++ 20 you can write the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;concept&lt;/span&gt; has_toString = &lt;span class=&quot;hljs-built_in&quot;&gt;requires&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp; t) {\n    t.&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp; obj)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(has_toString&amp;lt;T&amp;gt;)&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj.&lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here are some usage snippets:\n*The guts for all this are farther down&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for member &lt;code&gt;x&lt;/code&gt; in a given class.  Could be var, func, class, union, or enum:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_x = has_member_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for member function &lt;code&gt;void x()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Func signature MUST have T as template variable here... simpler this way :\\\nCREATE_MEMBER_FUNC_SIG_CHECK(x, void (T::*)(), void__x);&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_func_sig_void__x = has_member_func_void__x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for member variable &lt;code&gt;x&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_VAR_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_var_x = has_member_var_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for member class &lt;code&gt;x&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_CLASS_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_class_x = has_member_class_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for member union &lt;code&gt;x&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_UNION_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_union_x = has_member_union_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for member enum &lt;code&gt;x&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_ENUM_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_enum_x = has_member_enum_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Check for any member function &lt;code&gt;x&lt;/code&gt; regardless of signature:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_VAR_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_CLASS_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_UNION_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_ENUM_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_FUNC_CHECK&lt;/span&gt;(x);\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_any_func_x = has_member_func_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;OR&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;CREATE_MEMBER_CHECKS&lt;/span&gt;(x);  &lt;span class=&quot;hljs-comment&quot;&gt;//Just stamps out the same macro calls as above.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_any_func_x = has_member_func_x&amp;lt;class_to_check_for_x&amp;gt;::value;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Details and core:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n    - Multiple inheritance forces ambiguity of member names.\n    - SFINAE is used to make aliases to member names.\n    - Expression SFINAE is used in just one generic has_member that can accept\n      any alias we pass it.\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Variadic to force ambiguity of class members.  C++11 and up.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;... Args&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ambiguate&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Args... {};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Non-variadic version of the line above.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//template &amp;lt;typename A, typename B&amp;gt; struct ambiguate : public A, public B {};&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; A, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; got_type : std::false_type {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; A&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;got_type&lt;/span&gt;&amp;lt;A&amp;gt; : std::true_type {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; A type;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;sig_check&lt;/span&gt; : std::true_type {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Alias, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; AmbiguitySeed&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_member&lt;/span&gt; {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; C&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;((&amp;amp;f(&lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&amp;amp;C::value))))&lt;/span&gt;[1]&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; C&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;((&amp;amp;f(...)))&lt;/span&gt;[2]&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Make sure the member name is consistently spelled the same.&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(\n        (&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;&amp;lt;AmbiguitySeed&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        , &lt;span class=&quot;hljs-string&quot;&gt;&quot;Member name specified in AmbiguitySeed is different from member name specified in Alias, or wrong Alias/AmbiguitySeed has been specified.&quot;&lt;/span&gt;\n    );\n\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; value = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;f&lt;/span&gt;&amp;lt;Alias&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Macros (El Diablo!):&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for any member with given name, whether var, func, class, union, enum.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_CHECK(member)                                         \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename = std::true_type&amp;gt;&lt;/span&gt;                             \\\nstruct Alias_##member;                                                      \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                                        \\\nstruct Alias_##member &amp;lt;                                                     \\\n    T, std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool, got_type&amp;lt;decltype(&amp;amp;T::member)&amp;gt;&lt;/span&gt;::value&amp;gt;  \\\n&amp;gt; { static const decltype(&amp;amp;T::member) value; };                             \\\n                                                                            \\\nstruct AmbiguitySeed_##member { char member; };                             \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                                        \\\nstruct has_member_##member {                                                \\\n    static const bool value                                                 \\\n        = has_member&amp;lt;                                                       \\\n            Alias_##member&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ambiguate&amp;lt;T, AmbiguitySeed_##member&amp;gt;&lt;/span&gt;&amp;gt;            \\\n            , Alias_##member&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;AmbiguitySeed_##member&amp;gt;&lt;/span&gt;                        \\\n        &amp;gt;::value                                                            \\\n    ;                                                                       \\\n}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_VAR_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for member variable with given name.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_VAR_CHECK(var_name)                                   \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename = std::true_type&amp;gt;&lt;/span&gt;                             \\\nstruct has_member_var_##var_name : std::false_type {};                      \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                                        \\\nstruct has_member_var_##var_name&amp;lt;                                           \\\n    T                                                                       \\\n    , std::integral_constant&amp;lt;                                               \\\n        bool                                                                \\\n        , !std::is_member_function_pointer&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;decltype(&amp;amp;T::var_name)&amp;gt;&lt;/span&gt;::value   \\\n    &amp;gt;                                                                       \\\n&amp;gt; : std::true_type {}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_FUNC_SIG_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for member function with given name AND signature.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_FUNC_SIG_CHECK(func_name, func_sig, templ_postfix)    \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename = std::true_type&amp;gt;&lt;/span&gt;                             \\\nstruct has_member_func_##templ_postfix : std::false_type {};                \\\n                                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                                        \\\nstruct has_member_func_##templ_postfix&amp;lt;                                     \\\n    T, std::integral_constant&amp;lt;                                              \\\n        bool                                                                \\\n        , sig_check&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;func_sig, &amp;amp;T::func_name&amp;gt;&lt;/span&gt;::value                         \\\n    &amp;gt;                                                                       \\\n&amp;gt; : std::true_type {}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_CLASS_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for member class with given name.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_CLASS_CHECK(class_name)               \\\n                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename = std::true_type&amp;gt;&lt;/span&gt;             \\\nstruct has_member_class_##class_name : std::false_type {};  \\\n                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                        \\\nstruct has_member_class_##class_name&amp;lt;                       \\\n    T                                                       \\\n    , std::integral_constant&amp;lt;                               \\\n        bool                                                \\\n        , std::is_class&amp;lt;                                    \\\n            typename got_type&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T::class_name&amp;gt;&lt;/span&gt;::type \\\n        &amp;gt;::value                                            \\\n    &amp;gt;                                                       \\\n&amp;gt; : std::true_type {}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_UNION_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for member union with given name.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_UNION_CHECK(union_name)               \\\n                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename = std::true_type&amp;gt;&lt;/span&gt;             \\\nstruct has_member_union_##union_name : std::false_type {};  \\\n                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                        \\\nstruct has_member_union_##union_name&amp;lt;                       \\\n    T                                                       \\\n    , std::integral_constant&amp;lt;                               \\\n        bool                                                \\\n        , std::is_union&amp;lt;                                    \\\n            typename got_type&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T::union_name&amp;gt;&lt;/span&gt;::type \\\n        &amp;gt;::value                                            \\\n    &amp;gt;                                                       \\\n&amp;gt; : std::true_type {}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_ENUM_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for member enum with given name.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_ENUM_CHECK(enum_name)                 \\\n                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T, typename = std::true_type&amp;gt;&lt;/span&gt;             \\\nstruct has_member_enum_##enum_name : std::false_type {};    \\\n                                                            \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                        \\\nstruct has_member_enum_##enum_name&amp;lt;                         \\\n    T                                                       \\\n    , std::integral_constant&amp;lt;                               \\\n        bool                                                \\\n        , std::is_enum&amp;lt;                                     \\\n            typename got_type&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T::enum_name&amp;gt;&lt;/span&gt;::type  \\\n        &amp;gt;::value                                            \\\n    &amp;gt;                                                       \\\n&amp;gt; : std::true_type {}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_FUNC_CHECK:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Check for function with given name, any signature.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_FUNC_CHECK(func)          \\\ntemplate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                            \\\nstruct has_member_func_##func {                 \\\n    static const bool value                     \\\n        = has_member_##func&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;::value           \\\n        &amp;amp;&amp;amp; !has_member_var_##func&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;::value     \\\n        &amp;amp;&amp;amp; !has_member_class_##func&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;::value   \\\n        &amp;amp;&amp;amp; !has_member_union_##func&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;::value   \\\n        &amp;amp;&amp;amp; !has_member_enum_##func&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;::value    \\\n    ;                                           \\\n}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CREATE_MEMBER_CHECKS:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//Create all the checks for one member.  Does NOT include func sig checks.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; CREATE_MEMBER_CHECKS(member)    \\\nCREATE_MEMBER_CHECK(member);            \\\nCREATE_MEMBER_VAR_CHECK(member);        \\\nCREATE_MEMBER_CLASS_CHECK(member);      \\\nCREATE_MEMBER_UNION_CHECK(member);      \\\nCREATE_MEMBER_ENUM_CHECK(member);       \\\nCREATE_MEMBER_FUNC_CHECK(member)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Yet another way to do it in C++17 (inspired by &lt;code&gt;boost:hana&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;This solution does not require &lt;code&gt;has_something&amp;lt;T&amp;gt;&lt;/code&gt; SFINAE type traits classes.&lt;/p&gt;\n&lt;h3&gt;Solution&lt;/h3&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// has_member implementation&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;////////////////////////////////////////////&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; F&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;has_member_impl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(F&amp;amp;&amp;amp; f)&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f(std::declval&amp;lt;T&amp;gt;()), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;has_member_impl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; }\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; has_member(T, EXPR) \\\n has_member_impl&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;( [](auto&amp;amp;&amp;amp; obj)-&amp;gt;decltype(obj.EXPR){} )&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Test&lt;/h3&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Test&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;////////////////////////////////////////////&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; Foo;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello from Example::toString()!&quot;&lt;/span&gt;; }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example2&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; X;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;constexpr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(has_member(T, toString()))&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;has_member&lt;/span&gt;(Example, Foo), \n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Example class must have Foo member&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;has_member&lt;/span&gt;(Example, &lt;span class=&quot;hljs-built_in&quot;&gt;Bar&lt;/span&gt;()), \n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Example class must have Bar() member function&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;has_member&lt;/span&gt;(Example, ZFoo), \n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Example class must not have ZFoo member.&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!&lt;span class=&quot;hljs-built_in&quot;&gt;has_member&lt;/span&gt;(Example, &lt;span class=&quot;hljs-built_in&quot;&gt;ZBar&lt;/span&gt;()), \n                  &lt;span class=&quot;hljs-string&quot;&gt;&quot;Example class must not have ZBar() member function&quot;&lt;/span&gt;);\n\n    Example e1;\n    Example2 e2;\n\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;e1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;(&amp;amp;e1) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;e1: &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;(&amp;amp;e2) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wrote an answer to this in another thread that (unlike the solutions above) also checks inherited member functions:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1966362/sfinae-to-check-for-inherited-member-functions/8752988#8752988&quot;&gt;SFINAE to check for inherited member functions&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here are some example from that solution:&lt;/p&gt;\n\n&lt;h2&gt;Example1:&lt;/h2&gt;\n\n&lt;p&gt;We are checking for a member with the following signature: \n&lt;code&gt;T::const_iterator begin() const&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_const_begin&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&amp;amp;Yes)&lt;/span&gt;[1]&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&amp;amp;No)&lt;/span&gt;[2]&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; U&amp;gt; \n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; Yes &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(U &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; * data, \n                    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;std::is_same&amp;lt;\n                             &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U::const_iterator, \n                             &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(data-&amp;gt;begin())\n                    &amp;gt;::value&amp;gt;::type * = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; No &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; value = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(Yes) == &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(has_const_begin::&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::remove_reference&amp;lt;T&amp;gt;::type*)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please notice that it even checks the constness of the method, and works with primitive types, as well. (I mean &lt;code&gt;has_const_begin&amp;lt;int&amp;gt;::value&lt;/code&gt; is false and doesn&apos;t cause a compile-time error.) &lt;/p&gt;\n\n&lt;h2&gt;Example 2&lt;/h2&gt;\n\n&lt;p&gt;Now we are looking for the signature: &lt;code&gt;void foo(MyClass&amp;amp;, unsigned)&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&amp;amp;Yes)&lt;/span&gt;[1]&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&amp;amp;No)&lt;/span&gt;[2]&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; U&amp;gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; Yes &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(U * data, MyClass* arg1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;std::is_void&amp;lt;\n                             &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(data-&amp;gt;foo(*arg1, &lt;span class=&quot;hljs-number&quot;&gt;1u&lt;/span&gt;))\n                    &amp;gt;::value&amp;gt;::type * = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; No &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; value = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(Yes) == &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(has_foo::&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::remove_reference&amp;lt;T&amp;gt;::type*)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please notice that MyClass doesn&apos;t has to be default constructible or to satisfy any special concept. The technique works with template members, as well.&lt;/p&gt;\n\n&lt;p&gt;I am eagerly waiting opinions regarding this.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is the most concise way I found in C++20, which is very close from your question:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;requires&lt;/span&gt; { obj-&amp;gt;toString(); })&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See it live on godbolt: &lt;a href=&quot;https://gcc.godbolt.org/z/5jb1d93Ms&quot; rel=&quot;noreferrer&quot;&gt;https://gcc.godbolt.org/z/5jb1d93Ms&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The standard C++ solution presented here by litb will not work as expected if the method happens to be defined in a base class. &lt;/p&gt;\n\n&lt;p&gt;For a solution that handles this situation refer to :&lt;/p&gt;\n\n&lt;p&gt;In Russian :\n&lt;a href=&quot;http://www.rsdn.ru/forum/message/2759773.1.aspx&quot; rel=&quot;noreferrer&quot;&gt;http://www.rsdn.ru/forum/message/2759773.1.aspx&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;English Translation by Roman.Perepelitsa : \n&lt;a href=&quot;http://groups.google.com/group/comp.lang.c++.moderated/tree/browse_frm/thread/4f7c7a96f9afbe44/c95a7b4c645e449f?pli=1&quot; rel=&quot;noreferrer&quot;&gt;http://groups.google.com/group/comp.lang.c++.moderated/tree/browse_frm/thread/4f7c7a96f9afbe44/c95a7b4c645e449f?pli=1&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;It is insanely clever. However one issue with this solutiion is that gives compiler errors if the type being tested is one that cannot be used as a base class (e.g. primitive types)&lt;/p&gt;\n\n&lt;p&gt;In Visual Studio, I noticed that if working with method having no arguments, an extra pair of redundant ( )  needs to be inserted around the argments to deduce( )  in the sizeof expression.&lt;/p&gt;\n    ","\n&lt;p&gt;Now this was a &lt;em&gt;nice&lt;/em&gt; little puzzle - great question!&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an alternative to &lt;a href=&quot;https://stackoverflow.com/questions/257288/possible-for-c-template-to-check-for-a-functions-existence#257382&quot;&gt;Nicola Bonelli&apos;s solution&lt;/a&gt; that does not rely on the non-standard &lt;code&gt;typeof&lt;/code&gt; operator.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately, it does not work on GCC (MinGW) 3.4.5 or Digital Mars 8.42n, but it does work on all versions of MSVC (including VC6) and on Comeau C++.&lt;/p&gt;\n\n&lt;p&gt;The longer comment block has the details on how it works (or is supposed to work).  As it says, I&apos;m not sure which behavior is standards compliant - I&apos;d welcome commentary on that.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;update - 7 Nov 2008:&lt;/p&gt;\n\n&lt;p&gt;It looks like while this code is syntactically correct, the behavior that MSVC and Comeau C++ show does not follow the standard (thanks to &lt;a href=&quot;https://stackoverflow.com/users/4727/leon-timmermans&quot;&gt;Leon Timmermans&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/users/34509/litb&quot;&gt;litb&lt;/a&gt; for pointing me in the right direction).  The C++03 standard says the following:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;14.6.2 Dependent names [temp.dep]&lt;/p&gt;\n  \n  &lt;p&gt;Paragraph 3&lt;/p&gt;\n  \n  &lt;p&gt;In the definition of a class template\n  or a member of a class template, if a\n  base class of the class template\n  depends on a template-parameter, the\n  base class scope is not examined\n  during unqualified name lookup either\n  at the point of definition of the\n  class template or member or during an\n  instantiation of the class template or\n  member.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So, it looks like that when MSVC or Comeau consider the &lt;code&gt;toString()&lt;/code&gt; member function of &lt;code&gt;T&lt;/code&gt; performing name lookup at the call site in &lt;code&gt;doToString()&lt;/code&gt; when the template is instantiated, that is incorrect (even though it&apos;s actually the behavior I was looking for in this case).&lt;/p&gt;\n\n&lt;p&gt;The behavior of GCC and Digital Mars looks to be correct - in both cases the non-member &lt;code&gt;toString()&lt;/code&gt; function is bound to the call.&lt;/p&gt;\n\n&lt;p&gt;Rats - I thought I might have found a clever solution, instead I uncovered a couple compiler bugs...&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hello&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Generic&lt;/span&gt; {};\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the following namespace keeps the toString() method out of&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  most everything - except the other stuff in this&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//  compilation unit&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; {\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;optionalToStringImpl&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T\n    {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;doToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// in theory, the name lookup for this call to &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  toString() should find the toString() in &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  the base class T if one exists, but if one &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  doesn&apos;t exist in the base class, it&apos;ll &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  find the free toString() function in &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  the private namespace.&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// This theory works for MSVC (all versions&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  from VC6 to VC9) and Comeau C++, but&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  does not work with MinGW 3.4.5 or &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  Digital Mars 8.42n&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;// I&apos;m honestly not sure what the standard says &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  is the correct behavior here - it&apos;s sort &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  of like ADL (Argument Dependent Lookup - &lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  also known as Koenig Lookup) but without&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;//  arguments (except the implied &quot;this&quot; pointer)&lt;/span&gt;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n        }\n    };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T &amp;amp; obj)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ugly, hacky cast...&lt;/span&gt;\n    optionalToStringImpl&amp;lt;T&amp;gt;* temp = &lt;span class=&quot;hljs-keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;optionalToStringImpl&amp;lt;T&amp;gt;*&amp;gt;( &amp;amp;obj);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; temp-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;doToString&lt;/span&gt;();\n}\n\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    Hello helloObj;\n    Generic genericObj;\n\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;( helloObj) &amp;lt;&amp;lt; std::endl;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;( genericObj) &amp;lt;&amp;lt; std::endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;An example using SFINAE and template partial specialization, by writing a &lt;code&gt;Has_foo&lt;/code&gt; concept check: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt;{ &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;C&lt;/span&gt;{&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;D&lt;/span&gt;{&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;E&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; B{};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// available in C++17 onwards as part of &amp;lt;type_traits&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;...&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; Has_foo: std::false_type{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Has_foo&lt;/span&gt;&amp;lt;T, &lt;span class=&quot;hljs-type&quot;&gt;void_t&lt;/span&gt;&amp;lt;\n    std::&lt;span class=&quot;hljs-type&quot;&gt;enable_if_t&lt;/span&gt;&amp;lt;\n        std::is_same&amp;lt;\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, \n            &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;))\n        &amp;gt;::value\n    &amp;gt;\n&amp;gt;&amp;gt;: std::true_type{};\n\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; Has_foo&amp;lt;A&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A does not have a foo&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(Has_foo&amp;lt;B&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B has a foo&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; Has_foo&amp;lt;C&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C has a foo with the wrong return. &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; Has_foo&amp;lt;D&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D has a foo with the wrong arguments. &quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(Has_foo&amp;lt;E&amp;gt;::value, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E has a foo since it inherits from B&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;MSVC has the __if_exists and __if_not_exists keywords (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/x7wy9xh3(VS.80).aspx&quot; rel=&quot;noreferrer&quot;&gt;Doc&lt;/a&gt;). Together with the typeof-SFINAE approach of Nicola I could create a check for GCC and MSVC like the OP looked for.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Source can be found &lt;a href=&quot;https://github.com/nob13/sfserialization/blob/master/sfserialization/isdefault.h&quot; rel=&quot;noreferrer&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I modified the solution provided in &lt;a href=&quot;https://stackoverflow.com/a/264088/2712152&quot;&gt;https://stackoverflow.com/a/264088/2712152&lt;/a&gt; to make it a bit more general. Also since it doesn&apos;t use any of the new C++11 features we can use it with old compilers and should also work with msvc. But the compilers should enable C99 to use this since it uses variadic macros.&lt;/p&gt;\n\n&lt;p&gt;The following macro can be used to check if a particular class has a particular typedef or not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/** \n * @class      : HAS_TYPEDEF\n * @brief      : This macro will be used to check if a class has a particular\n * typedef or not.\n * @param typedef_name : Name of Typedef\n * @param name  : Name of struct which is going to be run the test for\n * the given particular typedef specified in typedef_name\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HAS_TYPEDEF(typedef_name, name)                           \\\n   template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                          \\\n   struct name {                                                  \\\n      typedef char yes[1];                                        \\\n      typedef char no[2];                                         \\\n      template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename U&amp;gt;&lt;/span&gt;                                       \\\n      struct type_check;                                          \\\n      template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename _1&amp;gt;&lt;/span&gt;                                      \\\n      static yes&amp;amp; chk(type_check&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename _1::typedef_name&amp;gt;&lt;/span&gt;*);    \\\n      template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename&amp;gt;&lt;/span&gt;                                         \\\n      static no&amp;amp; chk(...);                                        \\\n      static bool const value = sizeof(chk&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;(0)) == sizeof(yes); \\\n   }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following macro can be used to check if a particular class has a particular member function or not with any given number of arguments.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/** \n * @class      : HAS_MEM_FUNC\n * @brief      : This macro will be used to check if a class has a particular\n * member function implemented in the public section or not. \n * @param func : Name of Member Function\n * @param name : Name of struct which is going to be run the test for\n * the given particular member function name specified in func\n * @param return_type: Return type of the member function\n * @param ellipsis(...) : Since this is macro should provide test case for every\n * possible member function we use variadic macros to cover all possibilities\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HAS_MEM_FUNC(func, name, return_type, ...)                \\\n   template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename T&amp;gt;&lt;/span&gt;                                          \\\n   struct name {                                                  \\\n      typedef return_type (T::*Sign)(__VA_ARGS__);                \\\n      typedef char yes[1];                                        \\\n      typedef char no[2];                                         \\\n      template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename U, U&amp;gt;&lt;/span&gt;                                    \\\n      struct type_check;                                          \\\n      template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename _1&amp;gt;&lt;/span&gt;                                      \\\n      static yes&amp;amp; chk(type_check&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;Sign, &amp;amp;_1::func&amp;gt;&lt;/span&gt;*);              \\\n      template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typename&amp;gt;&lt;/span&gt;                                         \\\n      static no&amp;amp; chk(...);                                        \\\n      static bool const value = sizeof(chk&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;(0)) == sizeof(yes); \\\n   }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can use the above 2 macros to perform the checks for has_typedef and has_mem_func as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; check;\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;check_function&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;{}\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{}\n};\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM_FUNC&lt;/span&gt;(check_function, has_check_function, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM_FUNC&lt;/span&gt;(hello, hello_check, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM_FUNC&lt;/span&gt;(hello, hello_void_check, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_TYPEDEF&lt;/span&gt;(check, has_typedef_check);\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Check Function A:&quot;&lt;/span&gt; &amp;lt;&amp;lt; has_check_function&amp;lt;A&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Check Function B:&quot;&lt;/span&gt; &amp;lt;&amp;lt; has_check_function&amp;lt;B&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Function A:&quot;&lt;/span&gt; &amp;lt;&amp;lt; hello_check&amp;lt;A&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello Function B:&quot;&lt;/span&gt; &amp;lt;&amp;lt; hello_check&amp;lt;B&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello void Function A:&quot;&lt;/span&gt; &amp;lt;&amp;lt; hello_void_check&amp;lt;A&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello void Function B:&quot;&lt;/span&gt; &amp;lt;&amp;lt; hello_void_check&amp;lt;B&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Check Typedef A:&quot;&lt;/span&gt; &amp;lt;&amp;lt; has_typedef_check&amp;lt;A&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Check Typedef B:&quot;&lt;/span&gt; &amp;lt;&amp;lt; has_typedef_check&amp;lt;B&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Strange nobody suggested the following nice trick I saw once on this very site :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_foo&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;S&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;; };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;derived&lt;/span&gt; : S, T {};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; V, V&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;W&lt;/span&gt; {};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; X&amp;gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; (&amp;amp;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(W&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; (X::*)(), &amp;amp;X::foo&amp;gt; *))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; (&amp;amp;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(...))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; value = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;&amp;lt;derived&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You have to make sure T is a class. It seems that ambiguity in the lookup of foo is a substitution failure. I made it work on gcc, not sure if it is standard though.&lt;/p&gt;\n    ","\n&lt;p&gt;The generic template that can be used for checking if some &quot;feature&quot; is supported by the type:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeChecker&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Type&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;is_supported&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// these structs are used to recognize which version&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// of the two functions was chosen during overload resolution&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;supported&lt;/span&gt; {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;not_supported&lt;/span&gt; {};\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this overload of chk will be ignored by SFINAE principle&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if TypeChecker&amp;lt;Type_&amp;gt; is invalid type&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Type_&amp;gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; supported &lt;span class=&quot;hljs-title&quot;&gt;chk&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::decay&amp;lt;TypeChecker&amp;lt;Type_&amp;gt;&amp;gt;::type *)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ellipsis has the lowest conversion rank, so this overload will be&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// chosen during overload resolution only if the template overload above is ignored&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Type_&amp;gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; not_supported &lt;span class=&quot;hljs-title&quot;&gt;chk&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if the template overload of chk is chosen during&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// overload resolution then the feature is supported&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// if the ellipses overload is chosen the the feature is not supported&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; value = std::is_same&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;chk&lt;/span&gt;&amp;lt;Type&amp;gt;(&lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;)),supported&amp;gt;::value;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The template that checks whether there is a method &lt;code&gt;foo&lt;/code&gt; that is compatible with signature &lt;code&gt;double(const char*)&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// if T doesn&apos;t have foo method with the signature that allows to compile the bellow&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// expression then instantiating this template is Substitution Failure (SF)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// which Is Not An Error (INAE) if this happens during overload resolution&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; has_foo = &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt;())));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Examples&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// types that support has_foo&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct1&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;; };            &lt;span class=&quot;hljs-comment&quot;&gt;// exact signature match&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct2&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;str)&lt;/span&gt;&lt;/span&gt;; }; &lt;span class=&quot;hljs-comment&quot;&gt;// compatible signature&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct3&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;  &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;; };                    &lt;span class=&quot;hljs-comment&quot;&gt;// compatible ellipsis signature&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct4&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n                 &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T t)&lt;/span&gt;&lt;/span&gt;; };                    &lt;span class=&quot;hljs-comment&quot;&gt;// compatible template signature&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// types that do not support has_foo&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct5&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;        &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;; }; &lt;span class=&quot;hljs-comment&quot;&gt;// returns void&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct6&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;; }; &lt;span class=&quot;hljs-comment&quot;&gt;// std::string can&apos;t be converted to double&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct7&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(      &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *)&lt;/span&gt;&lt;/span&gt;; }; &lt;span class=&quot;hljs-comment&quot;&gt;// const char* can&apos;t be converted to int*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;struct8&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;      &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;; }; &lt;span class=&quot;hljs-comment&quot;&gt;// there is no foo method&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::cout &amp;lt;&amp;lt; std::boolalpha;\n\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;    &amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct1&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct2&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct3&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct4&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct5&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct6&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct7&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; is_supported&amp;lt;has_foo, struct8&amp;gt;::value &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/a/83c6a631ed42cea4&quot; rel=&quot;nofollow&quot;&gt;http://coliru.stacked-crooked.com/a/83c6a631ed42cea4&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I know that this question is years old, but I think it would useful for people like me to have a more complete updated answer that also works for &lt;code&gt;const&lt;/code&gt; overloaded methods such as &lt;code&gt;std::vector&amp;lt;&amp;gt;::begin&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Based on that &lt;a href=&quot;https://stackoverflow.com/a/257382/4602726&quot;&gt;answer&lt;/a&gt; and that &lt;a href=&quot;https://stackoverflow.com/a/63818399/4602726&quot;&gt;answer&lt;/a&gt; from my follow up question, here&apos;s a more complete answer. Note that this will only work with C++11 and higher.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EmptyClass&lt;/span&gt;{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_begin&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;has_begin&lt;/span&gt;() = &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;one&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;two&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; x[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]; };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; C&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; one &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;(std::declval&amp;lt;C &amp;amp;&amp;gt;().begin())) * )&lt;/span&gt; &lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; C&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; two &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;    \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; value = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(one);\n};\n    \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    std::cout &amp;lt;&amp;lt; std::boolalpha;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;vector&amp;lt;int&amp;gt;::begin() exists: &quot;&lt;/span&gt; &amp;lt;&amp;lt; has_begin&amp;lt;std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;EmptyClass::begin() exists: &quot;&lt;/span&gt; &amp;lt;&amp;lt; has_begin&amp;lt;EmptyClass&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or the shorter version:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EmptyClass&lt;/span&gt;{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; has_begin : std::false_type {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_begin&lt;/span&gt;&amp;lt;T, &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T &amp;amp;&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;()))&amp;gt; : std::true_type {};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    std::cout &amp;lt;&amp;lt; std::boolalpha;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;vector&amp;lt;int&amp;gt;::begin() exists: &quot;&lt;/span&gt; &amp;lt;&amp;lt; has_begin&amp;lt;std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;EmptyClass exists: &quot;&lt;/span&gt; &amp;lt;&amp;lt; has_begin&amp;lt;EmptyClass&amp;gt;::value &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that here a complete sample call must be provided. This means that if we tested for the &lt;code&gt;resize&lt;/code&gt; method&apos;s existence then we would have put &lt;code&gt;resize(0)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Deep magic explanation&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;The first answer posted of this question used &lt;code&gt;test( decltype(&amp;amp;C::helloworld) )&lt;/code&gt;; however this is problematic when the method it is testing is ambiguous due const overloading, thus making the substitution attempt fail.&lt;/p&gt;\n&lt;p&gt;To solve this ambiguity we use a void statement which can take any parameters because it is always translated into a &lt;code&gt;noop&lt;/code&gt; and thus the ambiguity is nullified and the call is valid as long as the method exists:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;has_begin&amp;lt;T, &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;T &amp;amp;&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;()))&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s what&apos;s happening in order:\nWe use &lt;code&gt;std::declval&amp;lt;T &amp;amp;&amp;gt;()&lt;/code&gt; to create a callable value for which &lt;code&gt;begin&lt;/code&gt; can then be called. After that the value of &lt;code&gt;begin&lt;/code&gt; is passed as a parameter to a void statement. We then retrieve the type of that void expression using the builtin &lt;code&gt;decltype&lt;/code&gt; so that it can be used as a template type argument. If &lt;code&gt;begin&lt;/code&gt; doesn&apos;t exist then the substitution is invalid and as per SFINAE the other declaration is used instead.&lt;/p&gt;\n    ","\n&lt;p&gt;How about this solution?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; hasToString : std::false_type { };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;hasToString&lt;/span&gt;&amp;lt;U,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&amp;amp;U::toString))&amp;gt;::type\n&amp;gt; : std::true_type { };\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are a lot of answers here, but I failed, to find a version, that performs &lt;em&gt;real&lt;/em&gt; method resolution ordering, while not using any of the newer c++ features (only using c++98 features).&lt;br&gt;\nNote: This version is tested and working with vc++2013, g++ 5.2.0 and the onlline compiler.&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;So I came up with a version, that only uses sizeof():&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; T &lt;span class=&quot;hljs-title&quot;&gt;declval&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;fake_void&lt;/span&gt; { };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; T &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;,(T &amp;amp;,fake_void);\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;,(T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &amp;amp;,fake_void);\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; T &lt;span class=&quot;hljs-keyword&quot;&gt;volatile&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;,(T &lt;span class=&quot;hljs-keyword&quot;&gt;volatile&lt;/span&gt; &amp;amp;,fake_void);\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;volatile&lt;/span&gt; &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;operator&lt;/span&gt;,(T &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;volatile&lt;/span&gt; &amp;amp;,fake_void);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;yes&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; v[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;no&lt;/span&gt;  { &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; v[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;yes_no&lt;/span&gt;:yes{};\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;yes_no&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&amp;gt;:no{};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;has_awesome_member&lt;/span&gt; {\n &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; U&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; yes_no&amp;lt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;((\n   &lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;U&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;awesome_member&lt;/span&gt;(),&lt;span class=&quot;hljs-built_in&quot;&gt;fake_void&lt;/span&gt;()\n  ))!=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;check&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;);\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; no &lt;span class=&quot;hljs-title&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt;{value=&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;check&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) == &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(yes)};\n};\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;foo&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;awesome_member&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;bar&lt;/span&gt; { };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;foo_void&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;awesome_member&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;wrong_params&lt;/span&gt; { &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;awesome_member&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; };\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(has_awesome_member&amp;lt;foo&amp;gt;::value,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!has_awesome_member&amp;lt;bar&amp;gt;::value,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(has_awesome_member&amp;lt;foo_void&amp;gt;::value,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;(!has_awesome_member&amp;lt;wrong_params&amp;gt;::value,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Live demo (with extended return type checking and vc++2010 workaround): &lt;a href=&quot;http://cpp.sh/5b2vs&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://cpp.sh/5b2vs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;No source, as I came up with it myself.&lt;/p&gt;\n\n&lt;p&gt;When running the Live demo on the g++ compiler, please note that array sizes of 0 are allowed, meaning that the static_assert used will not trigger a compiler error, even when it fails.&lt;br&gt;\nA commonly used work-around is to replace the &apos;typedef&apos; in the macro with &apos;extern&apos;.&lt;/p&gt;\n    ","\n&lt;p&gt;My take: to universally determine if something is callable without making verbose type traits for each and every one, or using experimental features, or long code:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Callable, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;... Args, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;Callable&amp;gt;()(&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;Args&amp;gt;()...))&amp;gt;\nstd::true_type &lt;span class=&quot;hljs-built_in&quot;&gt;isCallableImpl&lt;/span&gt;(Callable, Args...) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {}; }\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::false_type &lt;span class=&quot;hljs-title&quot;&gt;isCallableImpl&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(...)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {}; }\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;... Args, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Callable&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isCallable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Callable callable)&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;isCallableImpl&lt;/span&gt;(callable, &lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;Args&amp;gt;()...)){};\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; TO_STRING_TEST = [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; in) -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(in.&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;()) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {}; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; TO_STRING_WORKS = &lt;span class=&quot;hljs-built_in&quot;&gt;isCallable&lt;/span&gt;&amp;lt;T&amp;gt;(TO_STRING_TEST);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is my version that handles all possible member function overloads with arbitrary arity, including template member functions, possibly with default arguments. It distinguishes 3 mutually exclusive scenarios when making a member function call to some class type, with given arg types: (1) valid, or (2) ambiguous, or (3) non-viable. Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM&lt;/span&gt;(bar)\n&lt;span class=&quot;hljs-built_in&quot;&gt;HAS_MEM_FUN_CALL&lt;/span&gt;(bar)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T &amp;gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; std::is_integral&amp;lt;T&amp;gt;::value &amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n   &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;amp;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;{}\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T &amp;gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; std::enable_if&amp;lt; std::is_integral&amp;lt;T&amp;gt;::value &amp;gt;::&lt;span class=&quot;hljs-function&quot;&gt;type\n   &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::vector&amp;lt;T&amp;gt;&amp;amp;, T*)&lt;/span&gt;&lt;/span&gt;{}\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T &amp;gt;\n   &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;{}\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_mem_bar&amp;lt;test&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_valid_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;*,&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_valid_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(std::string&amp;amp;,&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_valid_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_no_viable_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;*)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_valid_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( std::is_same&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;,result_of_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&amp;gt;::type&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_valid_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; has_valid_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; has_ambiguous_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_ambiguous_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_viable_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_viable_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-built_in&quot;&gt;static_assert&lt;/span&gt;( has_no_viable_mem_fun_call_bar&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&amp;gt;::value , &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is the code, written in c++11, however, you can easily port it (with minor tweaks) to non-c++11 that has typeof extensions (e.g. gcc). You can replace the HAS_MEM macro with your own.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;pragma&lt;/span&gt; once&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 201103&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HAS_MEM(mem)                                                                                     \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename T &amp;gt;&lt;/span&gt;                                                                               \\\nstruct has_mem_##mem                                                                                  \\\n{                                                                                                     \\\n  struct yes {};                                                                                     \\\n  struct no  {};                                                                                     \\\n                                                                                                     \\\n  struct ambiguate_seed { char mem; };                                                               \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename U &amp;gt;&lt;/span&gt; struct ambiguate : U, ambiguate_seed {};                                   \\\n                                                                                                     \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename U, typename = decltype(&amp;amp;U::mem) &amp;gt;&lt;/span&gt; static constexpr no  test(int);              \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename                                 &amp;gt;&lt;/span&gt; static constexpr yes test(...);              \\\n                                                                                                     \\\n  static bool constexpr value = std::is_same&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;decltype(test&amp;lt; ambiguate&amp;lt;T&amp;gt;&lt;/span&gt; &amp;gt;(0)),yes&amp;gt;::value ;         \\\n  typedef std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool,value&amp;gt;&lt;/span&gt;    type;                                                \\\n};&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; HAS_MEM_FUN_CALL(memfun)                                                                         \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename Signature &amp;gt;&lt;/span&gt;                                                                       \\\nstruct has_valid_mem_fun_call_##memfun;                                                               \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename T, typename... Args &amp;gt;&lt;/span&gt;                                                             \\\nstruct has_valid_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; T(Args...) &amp;gt;&lt;/span&gt;                                                  \\\n{                                                                                                     \\\n  struct yes {};                                                                                     \\\n  struct no  {};                                                                                     \\\n                                                                                                     \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename U, bool = has_mem_##memfun&amp;lt;U&amp;gt;&lt;/span&gt;::value &amp;gt;                                         \\\n  struct impl                                                                                        \\\n  {                                                                                                  \\\n     template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename V, typename = decltype(std::declval&amp;lt;V&amp;gt;&lt;/span&gt;().memfun(std::declval&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;Args&amp;gt;&lt;/span&gt;()...)) &amp;gt; \\\n     struct test_result { using type = yes; };                                                       \\\n                                                                                                     \\\n     template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename V &amp;gt;&lt;/span&gt; static constexpr typename test_result&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;V&amp;gt;&lt;/span&gt;::type test(int);               \\\n     template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename   &amp;gt;&lt;/span&gt; static constexpr                            no test(...);               \\\n                                                                                                     \\\n     static constexpr bool value = std::is_same&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;decltype(test&amp;lt;U&amp;gt;&lt;/span&gt;(0)),yes&amp;gt;::value;                    \\\n     using type = std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool, value&amp;gt;&lt;/span&gt;;                                               \\\n  };                                                                                                 \\\n                                                                                                     \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename U &amp;gt;&lt;/span&gt;                                                                            \\\n  struct impl&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;U,false&amp;gt;&lt;/span&gt; : std::false_type {};                                                         \\\n                                                                                                     \\\n  static constexpr bool value = impl&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;::value;                                                      \\\n  using type = std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool, value&amp;gt;&lt;/span&gt;;                                                  \\\n};                                                                                                    \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename Signature &amp;gt;&lt;/span&gt;                                                                       \\\nstruct has_ambiguous_mem_fun_call_##memfun;                                                           \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename T, typename... Args &amp;gt;&lt;/span&gt;                                                             \\\nstruct has_ambiguous_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; T(Args...) &amp;gt;&lt;/span&gt;                                              \\\n{                                                                                                     \\\n  struct ambiguate_seed { void memfun(...); };                                                       \\\n                                                                                                     \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; class U, bool = has_mem_##memfun&amp;lt;U&amp;gt;&lt;/span&gt;::value &amp;gt;                                            \\\n  struct ambiguate : U, ambiguate_seed                                                               \\\n  {                                                                                                  \\\n    using ambiguate_seed::memfun;                                                                    \\\n    using U::memfun;                                                                                 \\\n  };                                                                                                 \\\n                                                                                                     \\\n  template &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; class U &amp;gt;&lt;/span&gt;                                                                               \\\n  struct ambiguate&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;U,false&amp;gt;&lt;/span&gt; : ambiguate_seed {};                                                     \\\n                                                                                                     \\\n  static constexpr bool value = not has_valid_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; ambiguate&amp;lt;T&amp;gt;&lt;/span&gt;(Args...) &amp;gt;::value; \\\n  using type = std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool, value&amp;gt;&lt;/span&gt;;                                                  \\\n};                                                                                                    \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename Signature &amp;gt;&lt;/span&gt;                                                                       \\\nstruct has_viable_mem_fun_call_##memfun;                                                              \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename T, typename... Args &amp;gt;&lt;/span&gt;                                                             \\\nstruct has_viable_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; T(Args...) &amp;gt;&lt;/span&gt;                                                 \\\n{                                                                                                     \\\n  static constexpr bool value = has_valid_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T(Args...)&amp;gt;&lt;/span&gt;::value                   \\\n                             or has_ambiguous_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T(Args...)&amp;gt;&lt;/span&gt;::value;              \\\n  using type = std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool, value&amp;gt;&lt;/span&gt;;                                                  \\\n};                                                                                                    \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename Signature &amp;gt;&lt;/span&gt;                                                                       \\\nstruct has_no_viable_mem_fun_call_##memfun;                                                           \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename T, typename... Args &amp;gt;&lt;/span&gt;                                                             \\\nstruct has_no_viable_mem_fun_call_##memfun &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; T(Args...) &amp;gt;&lt;/span&gt;                                             \\\n{                                                                                                     \\\n  static constexpr bool value = not has_viable_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T(Args...)&amp;gt;&lt;/span&gt;::value;             \\\n  using type = std::integral_constant&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bool, value&amp;gt;&lt;/span&gt;;                                                  \\\n};                                                                                                    \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename Signature &amp;gt;&lt;/span&gt;                                                                       \\\nstruct result_of_mem_fun_call_##memfun;                                                               \\\n                                                                                                     \\\ntemplate &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; typename T, typename... Args &amp;gt;&lt;/span&gt;                                                             \\\nstruct result_of_mem_fun_call_##memfun&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt; T(Args...) &amp;gt;&lt;/span&gt;                                                  \\\n{                                                                                                     \\\n  using type = decltype(std::declval&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt;().memfun(std::declval&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;Args&amp;gt;&lt;/span&gt;()...));                          \\\n};&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n    ","\n&lt;p&gt;You can skip all the metaprogramming in C++14, and just write this using &lt;a href=&quot;http://fit.readthedocs.io/en/latest/include/fit/conditional.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fit::conditional&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;https://github.com/pfultz2/Fit&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fit&lt;/a&gt; library:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\nstd::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* x)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fit::&lt;span class=&quot;hljs-built_in&quot;&gt;conditional&lt;/span&gt;(\n        [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;* obj) -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;()) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;(); },\n        [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;*) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;; }\n    )(x);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also create the function directly from the lambdas as well:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;FIT_STATIC_LAMBDA_FUNCTION&lt;/span&gt;(optionalToString) = fit::&lt;span class=&quot;hljs-built_in&quot;&gt;conditional&lt;/span&gt;(\n    [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;* obj) -&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;(), std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;()) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;(); },\n    [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;*) -&amp;gt; std::string { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;; }\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, if you are using a compiler that doesn&apos;t support generic lambdas, you will have to write separate function objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;withToString&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T* obj)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(obj-&amp;gt;toString(), std::string())&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;withoutToString&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; T&amp;gt;\n    std::string &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T*)&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n    }\n};\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;FIT_STATIC_FUNCTION&lt;/span&gt;(optionalToString) = fit::&lt;span class=&quot;hljs-built_in&quot;&gt;conditional&lt;/span&gt;(\n    &lt;span class=&quot;hljs-built_in&quot;&gt;withToString&lt;/span&gt;(),\n    &lt;span class=&quot;hljs-built_in&quot;&gt;withoutToString&lt;/span&gt;()\n);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Probably not as good as other examples, but this is what I came up with for C++11. This works for picking overloaded methods.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;... Args&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Pack&lt;/span&gt; {};\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; Proxy(T) ((T &amp;amp;)(*(int *)(nullptr)))&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Class, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ArgPack, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; = &lt;span class=&quot;hljs-type&quot;&gt;nullptr_t&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; HasFoo\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { value = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; };\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Class, &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt;... Args&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HasFoo&lt;/span&gt;&amp;lt;\n    Class,\n    Pack&amp;lt;Args...&amp;gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)(&lt;span class=&quot;hljs-built_in&quot;&gt;Proxy&lt;/span&gt;(Class).&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;Proxy&lt;/span&gt;(Args)...)), &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;)&amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { value = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; };\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example usage&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;         &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n; }\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; SOME_CONDITION&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n + c; }\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; has_foo_int_char&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dispatcher&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dispatcher&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Object&amp;gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object &amp;amp;object, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object.&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(n) + c;\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dispatcher&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&amp;gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Object&amp;gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object &amp;amp;object, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt;\n    &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; object.&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(n, c);\n    }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;runExample&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; Args = Pack&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; { has_overload = HasFoo&amp;lt;Object, Args&amp;gt;::value };\n    Object object;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Dispatcher&amp;lt;has_overload&amp;gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;exec&lt;/span&gt;(object, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an example of the working code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; toStringFn = &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;declval&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T&amp;gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;, toStringFn&amp;lt;T&amp;gt;* = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;&amp;gt;\nstd::string &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T* obj, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;toString&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;T&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;optionalToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T* obj, &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;toString not defined&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    A* a;\n    B* b;\n\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;(a, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// This is A&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;optionalToString&lt;/span&gt;(b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// toString not defined&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;toStringFn&amp;lt;T&amp;gt;* = nullptr&lt;/code&gt; will enable the function which takes extra &lt;code&gt;int&lt;/code&gt; argument which has a priority over function which takes &lt;code&gt;long&lt;/code&gt; when called with &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can use the same principle for the functions which returns &lt;code&gt;true&lt;/code&gt; if function is implemented.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;toStringExists&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T, toStringFn&amp;lt;T&amp;gt;* = &lt;span class=&quot;hljs-literal&quot;&gt;nullptr&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;toStringExists&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    A* a;\n    B* b;\n\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;toStringExists&lt;/span&gt;&amp;lt;A&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;toStringExists&lt;/span&gt;&amp;lt;B&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had a similar problem:&lt;/p&gt;\n\n&lt;p&gt;A template class that may be derived from few base classes, some that have a certain member and others that do not.&lt;/p&gt;\n\n&lt;p&gt;I solved it similarly to the &quot;typeof&quot; (Nicola Bonelli&apos;s) answer, but with decltype so it compiles and runs correctly on MSVS:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Generic&lt;/span&gt; {};    \n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HasMember&lt;/span&gt; \n{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;HasMember&lt;/span&gt;() : _a(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {};\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; _a;\n};    \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// SFINAE test&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;S&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string b)&lt;/span&gt;\n  &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;foo2&lt;/span&gt;&amp;lt;T&amp;gt;(b,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string b, &lt;span class=&quot;hljs-keyword&quot;&gt;decltype&lt;/span&gt; (T::_a))&lt;/span&gt;\n  &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b + std::&lt;span class=&quot;hljs-built_in&quot;&gt;to_string&lt;/span&gt;(T::_a);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(std::string b, ...)&lt;/span&gt;\n  &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b + &lt;span class=&quot;hljs-string&quot;&gt;&quot;No&quot;&lt;/span&gt;;\n  }\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n&lt;/span&gt;{\n  S&amp;lt;HasMember&amp;gt; d1;\n  S&amp;lt;Generic&amp;gt; d2;\n\n  std::cout &amp;lt;&amp;lt; d1.&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HasMember: &quot;&lt;/span&gt;) &amp;lt;&amp;lt; std::endl;\n  std::cout &amp;lt;&amp;lt; d2.&lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generic: &quot;&lt;/span&gt;) &amp;lt;&amp;lt; std::endl;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"15","randomQuestions":[{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"Order Bars in ggplot2 bar graph","slug":"order-bars-in-ggplot2-bar-graph-1657388099080"},{"title":"What is an efficient way to implement a singleton pattern in Java? [closed]","slug":"what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java-closed-1657387970474"},{"title":"How to compare arrays in JavaScript?","slug":"how-to-compare-arrays-in-javascript-1657387352277"},{"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559"},{"title":"Why use getters and setters/accessors?","slug":"why-use-getters-and-settersaccessors-1657387343971"},{"title":"How can I tell if a DOM element is visible in the current viewport?","slug":"how-can-i-tell-if-a-dom-element-is-visible-in-the-current-viewport-1657388316510"},{"title":"Non-static variable cannot be referenced from a static context","slug":"non-static-variable-cannot-be-referenced-from-a-static-context-1657387386240"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"Prefer composition over inheritance?","slug":"prefer-composition-over-inheritance-1657387399409"},{"title":"How can I access an array/object?","slug":"how-can-i-access-an-arrayobject-1657387395541"},{"title":"Reference - What does this error mean in PHP?","slug":"reference-what-does-this-error-mean-in-php-1657384301782"},{"title":"Selecting and manipulating CSS pseudo-elements such as ::before and ::after using javascript (or jQuery)","slug":"selecting-and-manipulating-css-pseudo-elements-such-as-::before-and-::after-using-javascript-(or-jquery)-1657387406132"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"Actual meaning of 'shell=True' in subprocess","slug":"actual-meaning-of-'shelltrue'-in-subprocess-1657388470341"},{"title":"commandButton/commandLink/ajax action/listener method not invoked or input value not set/updated","slug":"commandbuttoncommandlinkajax-actionlistener-method-not-invoked-or-input-value-not-setupdated-1657384667519"},{"title":"How do I count the occurrences of a list item?","slug":"how-do-i-count-the-occurrences-of-a-list-item-1657387916234"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"},{"title":"jQuery Ajax File Upload","slug":"jquery-ajax-file-upload-1657387368970"}]},"__N_SSG":true}