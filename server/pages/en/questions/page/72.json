{"pageProps":{"data":{"count":610,"rows":[{"id":255,"title":"How do I check if an array includes a value in JavaScript?","slug":"how-do-i-check-if-an-array-includes-a-value-in-javascript-1657387421185","postType":"QUESTION","createdAt":"2022-07-09T17:23:41.000Z","updatedAt":"2022-07-09T17:23:41.000Z","tags":[{"id":1644,"name":"algorithm","slug":"algorithm","createdAt":"2022-07-09T17:23:41.000Z","updatedAt":"2022-07-09T17:23:41.000Z","Questions_Tags":{"questionId":255,"tagId":1644}},{"id":1645,"name":"time-complexity","slug":"time-complexity","createdAt":"2022-07-09T17:23:41.000Z","updatedAt":"2022-07-09T17:23:41.000Z","Questions_Tags":{"questionId":255,"tagId":1645}}]},{"id":254,"title":"Why not use Double or Float to represent currency?","slug":"why-not-use-double-or-float-to-represent-currency-1657387417964","postType":"QUESTION","createdAt":"2022-07-09T17:23:37.000Z","updatedAt":"2022-07-09T17:23:37.000Z","tags":[{"id":1641,"name":"currency","slug":"currency","createdAt":"2022-07-09T17:23:38.000Z","updatedAt":"2022-07-09T17:23:38.000Z","Questions_Tags":{"questionId":254,"tagId":1641}}]},{"id":253,"title":"What and where are the stack and heap?","slug":"what-and-where-are-the-stack-and-heap-1657387415361","postType":"QUESTION","createdAt":"2022-07-09T17:23:35.000Z","updatedAt":"2022-07-09T17:23:35.000Z","tags":[{"id":1636,"name":"stack","slug":"stack","createdAt":"2022-07-09T17:23:35.000Z","updatedAt":"2022-07-09T17:23:35.000Z","Questions_Tags":{"questionId":253,"tagId":1636}},{"id":1638,"name":"dynamic-memory-allocation","slug":"dynamic-memory-allocation","createdAt":"2022-07-09T17:23:35.000Z","updatedAt":"2022-07-09T17:23:35.000Z","Questions_Tags":{"questionId":253,"tagId":1638}},{"id":1639,"name":"heap-memory","slug":"heap-memory","createdAt":"2022-07-09T17:23:35.000Z","updatedAt":"2022-07-09T17:23:35.000Z","Questions_Tags":{"questionId":253,"tagId":1639}}]},{"id":252,"title":"How to calculate the difference between two dates using PHP?","slug":"how-to-calculate-the-difference-between-two-dates-using-php-1657387409560","postType":"QUESTION","createdAt":"2022-07-09T17:23:29.000Z","updatedAt":"2022-07-09T17:23:29.000Z","tags":[{"id":1634,"name":"datediff","slug":"datediff","createdAt":"2022-07-09T17:23:29.000Z","updatedAt":"2022-07-09T17:23:29.000Z","Questions_Tags":{"questionId":252,"tagId":1634}}]},{"id":251,"title":"Selecting and manipulating CSS pseudo-elements such as ::before and ::after using javascript (or jQuery)","slug":"selecting-and-manipulating-css-pseudo-elements-such-as-::before-and-::after-using-javascript-(or-jquery)-1657387406132","postType":"QUESTION","createdAt":"2022-07-09T17:23:26.000Z","updatedAt":"2022-07-09T17:23:26.000Z","tags":[{"id":1630,"name":"jquery-selectors","slug":"jquery-selectors","createdAt":"2022-07-09T17:23:26.000Z","updatedAt":"2022-07-09T17:23:26.000Z","Questions_Tags":{"questionId":251,"tagId":1630}},{"id":1631,"name":"pseudo-element","slug":"pseudo-element","createdAt":"2022-07-09T17:23:26.000Z","updatedAt":"2022-07-09T17:23:26.000Z","Questions_Tags":{"questionId":251,"tagId":1631}}]}]},"answers":{"251":["\n&lt;p&gt;You could also pass the content to the pseudo element with a data attribute and then use jQuery to manipulate that:&lt;/p&gt;\n\n&lt;p&gt;In HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;span&amp;gt;foo&amp;lt;/span&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In jQuery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;span&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;hover&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-content&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In CSS: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;attr&lt;/span&gt;(data-content) &lt;span class=&quot;hljs-string&quot;&gt;&apos; any other text you may want&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to prevent the &apos;other text&apos; from showing up, you could combine this with seucolega&apos;s solution like this:&lt;/p&gt;\n\n&lt;p&gt;In HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;span&amp;gt;foo&amp;lt;/span&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In jQuery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;span&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;hover&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;change&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-content&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In CSS: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.change&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;attr&lt;/span&gt;(data-content) &lt;span class=&quot;hljs-string&quot;&gt;&apos; any other text you may want&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You&apos;d think this would be a simple question to answer, with everything else that jQuery can do. Unfortunately, the problem comes down to a technical issue: &lt;strong&gt;&lt;em&gt;css :after and :before rules aren&apos;t part of the DOM,&lt;/em&gt;&lt;/strong&gt; and therefore can&apos;t be altered using jQuery&apos;s DOM methods.&lt;/p&gt;\n\n&lt;p&gt;There &lt;em&gt;are&lt;/em&gt; ways to manipulate these elements using JavaScript and/or CSS workarounds; which one you use depends on your exact requirements.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I&apos;m going to start with what&apos;s widely considered the &quot;best&quot; approach:&lt;/p&gt;\n\n&lt;h2&gt;1) Add/remove a predetermined class&lt;/h2&gt;\n\n&lt;p&gt;In this approach, you&apos;ve already created a class in your CSS with a different &lt;code&gt;:after&lt;/code&gt; or &lt;code&gt;:before&lt;/code&gt; style. Place this &quot;new&quot; class later in your stylesheet to make sure it overrides:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;p&lt;/span&gt;:before {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n}\np.&lt;span class=&quot;hljs-property&quot;&gt;special&lt;/span&gt;:before {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can easily add or remove this class using jQuery (or vanilla JavaScript):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;special&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;special&apos;&lt;/span&gt;);\n    });&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.special&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a paragraph.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is another paragraph.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Easy to implement with jQuery; quickly alters multiple styles at once; enforces separation of concerns (isolating your CSS and JS from your HTML)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; CSS must be pre-written, so the content of &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; isn&apos;t completely dynamic&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;2) Add new styles directly to the document&apos;s stylesheet&lt;/h2&gt;\n\n&lt;p&gt;It&apos;s possible to use JavaScript to add styles directly to the document stylesheet, including &lt;code&gt;:after&lt;/code&gt; and &lt;code&gt;:before&lt;/code&gt; styles. jQuery doesn&apos;t provide a convenient shortcut, but fortunately the JS isn&apos;t that complicated:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p.special:before&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;content: &quot;&apos;&lt;/span&gt;+str+&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p.special:before&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content: &quot;&apos;&lt;/span&gt; + str + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;;&apos;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;special&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a paragraph&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is another paragraph&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://davidwalsh.name/add-rules-stylesheets&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.addRule()&lt;/code&gt; and the related &lt;code&gt;.insertRule()&lt;/code&gt; methods&lt;/a&gt; are fairly well-supported today. &lt;/p&gt;\n\n&lt;p&gt;As a variation, you can also use jQuery to add an entirely new stylesheet to the document, but the necessary code isn&apos;t any cleaner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;style&amp;gt;p.special:before{content:&quot;&apos;&lt;/span&gt;+str+&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&amp;lt;/style&amp;gt;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;style&amp;gt;p.special:before{content:&quot;&apos;&lt;/span&gt; + str + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&amp;lt;/style&amp;gt;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;special&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a paragraph&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is another paragraph&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;If we&apos;re talking about &quot;manipulating&quot; the values, not just adding to them, we can also &lt;a href=&quot;http://davidwalsh.name/pseudo-element&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;read&lt;/em&gt; the existing &lt;code&gt;:after&lt;/code&gt; or &lt;code&gt;:before&lt;/code&gt; styles&lt;/a&gt; using a different approach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getComputedStyle&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;:before&apos;&lt;/span&gt;) \n           .&lt;span class=&quot;hljs-title function_&quot;&gt;getPropertyValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getComputedStyle&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;:before&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;getPropertyValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p.special:before&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content: &quot;&apos;&lt;/span&gt; + str+str + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;;&apos;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;special&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a paragraph&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is another paragraph&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;We can replace &lt;code&gt;document.querySelector(&apos;p&apos;)&lt;/code&gt; with &lt;a href=&quot;http://api.jquery.com/get/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;$(&apos;p&apos;)[0]&lt;/code&gt;&lt;/a&gt; when using jQuery, for slightly shorter code.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; any string can be dynamically inserted into the style&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; original styles aren&apos;t altered, just overridden; repeated (ab)use can make the DOM grow arbitrarily large&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;3) Alter a different DOM attribute&lt;/h2&gt;\n\n&lt;p&gt;You can also to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr&quot; rel=&quot;noreferrer&quot;&gt;use &lt;code&gt;attr()&lt;/code&gt; in your CSS&lt;/a&gt; to read a particular DOM attribute. (&lt;a href=&quot;http://caniuse.com/#feat=css-gencontent&quot; rel=&quot;noreferrer&quot;&gt;If a browser supports &lt;code&gt;:before&lt;/code&gt;, it supports &lt;code&gt;attr()&lt;/code&gt; as well.&lt;/a&gt;) By combining this with &lt;code&gt;content:&lt;/code&gt; in some carefully-prepared CSS, we can change the content (but &lt;strong&gt;&lt;em&gt;not other properties,&lt;/em&gt;&lt;/strong&gt; like margin or color) of &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; dynamically:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;p&lt;/span&gt;:before {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(data-before);\n    &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: red;\n    &lt;span class=&quot;hljs-attr&quot;&gt;cursor&lt;/span&gt;: pointer;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JS:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-before&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-before&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;);\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;attr&lt;/span&gt;(data-before);\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a paragraph.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is another paragraph.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This can be combined with the second technique if the CSS can&apos;t be prepared ahead of time:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p:before&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content: attr(data-before);&apos;&lt;/span&gt;);\n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-before&apos;&lt;/span&gt;, str);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p:before&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content: attr(data-before) !important;&apos;&lt;/span&gt;);\n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;p&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-before&apos;&lt;/span&gt;, str);\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a paragraph.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;This is another paragraph.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Doesn&apos;t create endless extra styles&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Cons:&lt;/strong&gt; &lt;code&gt;attr&lt;/code&gt; in CSS can only apply to content strings, not URLs or RGB colors&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Although they are rendered by browsers through CSS as if they were like other real DOM elements, pseudo-elements themselves are not part of the DOM, because pseudo-elements, as the name implies, are not real elements, and therefore you can&apos;t select and manipulate them directly with jQuery (or &lt;em&gt;any&lt;/em&gt; JavaScript APIs for that matter, not even the &lt;a href=&quot;http://www.w3.org/TR/selectors-api&quot; rel=&quot;noreferrer&quot;&gt;Selectors API&lt;/a&gt;). This applies to any pseudo-elements whose styles you&apos;re trying to modify with a script, and not just &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can only access pseudo-element styles directly at runtime via the CSSOM (think &lt;code&gt;window.getComputedStyle()&lt;/code&gt;), which is not exposed by jQuery beyond &lt;code&gt;.css()&lt;/code&gt;, a method that doesn&apos;t support pseudo-elements either.&lt;/p&gt;\n\n&lt;p&gt;You can always find other ways around it, though, for example:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Applying the styles to the pseudo-elements of one or more arbitrary classes, then toggling between classes (see &lt;a href=&quot;https://stackoverflow.com/questions/5041494/manipulating-css-pseudo-elements-using-jquery-e-g-before-and-after/5335771#5335771&quot;&gt;seucolega&apos;s answer&lt;/a&gt; for a quick example)  this is the idiomatic way as it makes use of simple selectors (which pseudo-elements are not) to distinguish between elements and element states, the way they&apos;re intended to be used&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Manipulating the styles being applied to said pseudo-elements, by altering the document stylesheet, which is much more of a hack&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;You can&apos;t select pseudo elements in jQuery because they are not part of DOM.\nBut you can add a specific class to the parent element and control its pseudo elements in CSS.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/1dw7h4s3/&quot; rel=&quot;noreferrer&quot;&gt;EXAMPLE&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;In jQuery:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;span&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;change&apos;&lt;/span&gt;);\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In CSS:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;span.&lt;span class=&quot;hljs-property&quot;&gt;change&lt;/span&gt;:after { &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;We can also rely on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables&quot; rel=&quot;noreferrer&quot;&gt;custom properties (aka CSS variables)&lt;/a&gt; in order to manipulate pseudo-element. We can read in the &lt;a href=&quot;https://www.w3.org/TR/css-variables-1/&quot; rel=&quot;noreferrer&quot;&gt;specification&lt;/a&gt; that:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Custom properties are ordinary properties, so they can be declared on\nany element, are resolved with the &lt;strong&gt;normal inheritance&lt;/strong&gt; and &lt;strong&gt;cascade&lt;/strong&gt;\n&lt;strong&gt;rules&lt;/strong&gt;, can be made conditional with @media and other conditional rules, can be used in &lt;strong&gt;HTMLs style attribute&lt;/strong&gt;, can be &lt;strong&gt;read or set using the CSSOM&lt;/strong&gt;, etc.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Considering this, the idea is to define the custom property within the element and the pseudo-element will simply inherit it; thus we can easily modify it.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;1) Using inline style&lt;/strong&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--content,&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a before element&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--color, red);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;25px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;--color:blue;--content:&apos;I am a blue element&apos;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;--color:black&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;--color:#f0f;--content:&apos;another element&apos;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;2) Using CSS and classes&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--content,&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a before element&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--color, red);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;25px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.blue&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attr&quot;&gt;--color&lt;/span&gt;:blue;\n  &lt;span class=&quot;hljs-attr&quot;&gt;--content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;I am a blue element&apos;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.black&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attr&quot;&gt;--color&lt;/span&gt;:black;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box black&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box blue&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;3) Using javascript&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.box&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;--color&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.box&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;--content&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;I am another element&apos;&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--content,&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a before element&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--color, red);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;25px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;4) Using jQuery&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.box&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;--color&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;/* the css() function with custom properties works only with a jQuery vesion &amp;gt;= 3.x\n   with older version we can use style attribute to set the value. Simply pay\n   attention if you already have inline style defined! \n*/&lt;/span&gt;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.box&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;eq&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;style&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;--color:#f0f&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;I am a before element&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--color, red);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;25px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;It can also be used with complex values:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attr&quot;&gt;--c&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;content&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attr&quot;&gt;--b&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;linear-gradient&lt;/span&gt;(red,blue);\n  &lt;span class=&quot;hljs-attr&quot;&gt;--s&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attr&quot;&gt;--p&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;15px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--c);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--b);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#fff&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;calc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--s) + &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;var&lt;/span&gt;(--p);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You may notice that I am considering the syntax &lt;code&gt;var(--c,value)&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the default value and also called the fallback value.&lt;/p&gt;\n&lt;p&gt;From the same specification we can read:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The value of a custom property can be substituted into the value of another property with the var() function. The syntax of var() is:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;var() = var( &amp;lt;custom-property-name&amp;gt; [, &amp;lt;declaration-value&amp;gt; ]? )&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The first argument to the function is the name of the custom property to be substituted. The second argument to the function, if provided, is a fallback value, which is used as the substitution value &lt;strong&gt;when the referenced custom property is invalid.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And later:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To substitute a var() in a propertys value:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;If the custom property named by the first argument to the &lt;code&gt;var()&lt;/code&gt; function is animation-tainted, and the &lt;code&gt;var()&lt;/code&gt; function is being used in the animation property or one of its longhands, treat the custom property as having its initial value for the rest of this algorithm.&lt;/li&gt;\n&lt;li&gt;If the value of the custom property named by the first argument to the &lt;code&gt;var()&lt;/code&gt; function is anything but the initial value, replace the &lt;code&gt;var()&lt;/code&gt; function by the value of the corresponding custom property.&lt;/li&gt;\n&lt;li&gt;Otherwise, if the &lt;code&gt;var()&lt;/code&gt; function has a fallback value as its second argument, replace the &lt;code&gt;var()&lt;/code&gt; function by the fallback value. If there are any &lt;code&gt;var()&lt;/code&gt; references in the fallback, substitute them as well.&lt;/li&gt;\n&lt;li&gt;Otherwise, the property containing the &lt;code&gt;var()&lt;/code&gt; function is invalid at computed-value time.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;If we don&apos;t set the custom property OR we set it to &lt;code&gt;initial&lt;/code&gt; OR it contains an invalid value then the fallback value will be used. The use of &lt;code&gt;initial&lt;/code&gt; can be helpful in case we want to reset a custom property to its default value.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Related&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/53239880/8620333&quot;&gt;How to store inherit value inside a CSS variable (aka custom property)?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/55615332/8620333&quot;&gt;CSS custom properties (variables) for box model&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In the line of what Christian suggests, you could also do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt;.span::after{ content:&apos;bar&apos; }&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is the way to access :after and :before style properties, defined in css:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get the color value of .element:before&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; color = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getComputedStyle&lt;/span&gt;(\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.element&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;:before&apos;&lt;/span&gt;\n).&lt;span class=&quot;hljs-title function_&quot;&gt;getPropertyValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Get the content value of .element:before&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; content = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getComputedStyle&lt;/span&gt;(\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.element&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;:before&apos;&lt;/span&gt;\n).&lt;span class=&quot;hljs-title function_&quot;&gt;getPropertyValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;IF you want to to manipulate the ::before or ::after sudo elements entirely through CSS, you could do it JS. See below;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;style id=&quot;mystyle&quot; type=&quot;text/css&quot;&amp;gt; /* your styles here */ &amp;lt;/style&amp;gt;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice how the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element has an ID, which you can use to remove it and append to it again if your style changes dynamically.&lt;/p&gt;\n\n&lt;p&gt;This way, your element is style exactly how you want it through CSS, with the help of JS.&lt;/p&gt;\n    ","\n&lt;p&gt;one working but not very efficient way is to add a rule to the document with the new content and reference it with a class. depending on what is needed the class might need an unique id for each value in content.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style type=&apos;text/css&apos;&amp;gt;span.id-after:after{content:bar;}&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appendTo&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;head&quot;&lt;/span&gt;));\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;span&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id-after&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Thank you all!\ni managed to do what i wanted :D\n&lt;a href=&quot;http://jsfiddle.net/Tfc9j/42/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/Tfc9j/42/&lt;/a&gt;\nhere take a look&lt;/p&gt;\n\n&lt;p&gt;i wanted to have the opacity of an outer div to be different from the opacity of the internal div and that change with a click somwewhere ;)\nThanks!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;   $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ena&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt;#ena:before { opacity:0.3; }&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;);\n    });\n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#duop&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt;#ena:before { opacity:0.8; }&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;);\n\n     e.&lt;span class=&quot;hljs-title function_&quot;&gt;stopPropagation&lt;/span&gt;(); \n    });\n\n#ena{\n    &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;:300px;\n    &lt;span class=&quot;hljs-attr&quot;&gt;height&lt;/span&gt;:300px;\n    &lt;span class=&quot;hljs-attr&quot;&gt;border&lt;/span&gt;:1px black solid;\n    &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;:relative;\n}\n#duo{\n    &lt;span class=&quot;hljs-attr&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;:absolute;\n    &lt;span class=&quot;hljs-attr&quot;&gt;top&lt;/span&gt;:50px;\n  &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;:300px;\n    &lt;span class=&quot;hljs-attr&quot;&gt;height&lt;/span&gt;:100px;\n      background-&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:white;\n}\n#&lt;span class=&quot;hljs-attr&quot;&gt;ena&lt;/span&gt;:before {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(data-before);\n    &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: white;\n    &lt;span class=&quot;hljs-attr&quot;&gt;cursor&lt;/span&gt;: pointer;\n    &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: absolute;\n    background-&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:red;\n    &lt;span class=&quot;hljs-attr&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;%;\n    &lt;span class=&quot;hljs-attr&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;%;\n}\n\n\n&amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ena&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;duo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;ena p&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;duop&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;duoyyyyyyyyyyyyyy p&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;   \n\n\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is the HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;icon&quot;&lt;/span&gt;&amp;gt;\n  &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;play&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    ::before\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Computed style on &apos;before&apos; was &lt;code&gt;content: &quot;VERIFY TO WATCH&quot;;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is my two lines of jQuery, which use the idea of adding an extra class to specifically reference this element and then appending a style tag (with an !important tag) to changes the CSS of the sudo-element&apos;s content value:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$(&quot;span.play:eq(0)&quot;).addClass(&apos;G&apos;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;$(&apos;body&apos;).append(&quot;&amp;lt;style&amp;gt;.G:before{content:&apos;NewText&apos; !important}&amp;lt;/style&amp;gt;&quot;);&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You may create a fake property or use an existing one and &lt;strong&gt;inherit&lt;/strong&gt; it in the pseudo-element&apos;s stylesheet.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; switched = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Enable color switching&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; color = switched ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;darkred&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;arrow&apos;&lt;/span&gt;);\n    element.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;backgroundColor&lt;/span&gt; = color;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Managing pseudo-element&apos;s css&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// using inheritance.&lt;/span&gt;\n    element.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;borderLeftColor&lt;/span&gt; = color;\n    \n    switched = !switched;\n}, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.arrow&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* SET FICTIONAL PROPERTY */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-left-color&lt;/span&gt;:red;\n    \n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;:red;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:relative;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.arrow&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-top&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt; solid transparent;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-right&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt; solid transparent;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-bottom&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt; solid transparent;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-left&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1em&lt;/span&gt; solid transparent;\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;/* INHERIT PROPERTY */&lt;/span&gt;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;border-left-color&lt;/span&gt;:inherit;\n    \n    &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:absolute;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;arrow&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;arrow&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;It seems it doesn&apos;t work for &quot;content&quot; property :(&lt;/p&gt;\n    ","\n&lt;p&gt;This is not practical as i did not write this for real world uses, just to give you a example of what can be achieved. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;css = {\n&lt;span class=&quot;hljs-attr&quot;&gt;before&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem,attr&lt;/span&gt;){ \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#cust_style&quot;&lt;/span&gt;) !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ \n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt; &quot;&lt;/span&gt; + elem + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:before {&quot;&lt;/span&gt;  + attr +  &lt;span class=&quot;hljs-string&quot;&gt;&quot;} &amp;lt;/style&amp;gt;&quot;&lt;/span&gt;); \n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#cust_style&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt; &quot;&lt;/span&gt; + elem + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:before {&quot;&lt;/span&gt;  + attr +  &lt;span class=&quot;hljs-string&quot;&gt;&quot;} &amp;lt;/style&amp;gt;&quot;&lt;/span&gt;); \n}\n\n}, &lt;span class=&quot;hljs-attr&quot;&gt;after&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem,attr&lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#cust_style&quot;&lt;/span&gt;) !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ \n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt; &quot;&lt;/span&gt; + elem + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:after {&quot;&lt;/span&gt;  + attr +  &lt;span class=&quot;hljs-string&quot;&gt;&quot;} &amp;lt;/style&amp;gt;&quot;&lt;/span&gt;); \n\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#cust_style&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;remove&lt;/span&gt;();\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style&amp;gt; &quot;&lt;/span&gt; + elem + &lt;span class=&quot;hljs-string&quot;&gt;&quot;:after {&quot;&lt;/span&gt;  + attr +  &lt;span class=&quot;hljs-string&quot;&gt;&quot;} &amp;lt;/style&amp;gt;&quot;&lt;/span&gt;); \n}\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this currently add&apos;s a / or appends a Style element which contains your necessary attribute&apos;s which will take affect on the target element&apos;s after Pseudo element.&lt;/p&gt;\n\n&lt;p&gt;this can be used as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;css.&lt;span class=&quot;hljs-title function_&quot;&gt;after&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;someElement&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot; content: &apos;Test&apos;; position: &apos;absolute&apos;; &quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// editing / adding styles to :after&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;css.&lt;span class=&quot;hljs-title function_&quot;&gt;before&lt;/span&gt;( ... ); &lt;span class=&quot;hljs-comment&quot;&gt;// to affect the before pseudo element.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;as after: and before: pseudo elements are not directly accessible through DOM it is currently not possible to edit the Specific values of the css freely.&lt;/p&gt;\n\n&lt;p&gt;my way was just a example and its not good for practice, you can modify it try some of your own tricks and make it correct for real world usage.&lt;/p&gt;\n\n&lt;p&gt;so do your own experimentation&apos;s with this and others!&lt;/p&gt;\n\n&lt;p&gt;regards - Adarsh Hegde. &lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m always adding my own utils function, which looks like this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElContent&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;selector, value&lt;/span&gt;) {    \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(selector, &lt;span class=&quot;hljs-string&quot;&gt;&apos;content: &quot;&apos;&lt;/span&gt; + value + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;;&apos;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElContent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.class::after&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello World!&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or make use of ES6 Features:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElContent&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;selector, value&lt;/span&gt;) =&amp;gt; {    \n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(selector, &lt;span class=&quot;hljs-string&quot;&gt;`content: &quot;&lt;span class=&quot;hljs-subst&quot;&gt;${value}&lt;/span&gt;&quot;;`&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElContent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.class::after&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello World!&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Why adding classes or attributes when you can just append a &lt;code&gt;style&lt;/code&gt; to head&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;style&amp;gt;.span:after{ content:&apos;&lt;/span&gt;changed content&lt;span class=&quot;hljs-string&quot;&gt;&apos; }&amp;lt;/style&amp;gt;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are many answers here but no answer helps to manipulate the css of &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; , not even the accepted one.&lt;/p&gt;\n\n&lt;p&gt;Here is how I propose to do it. Lets suppose your HTML is like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then you are setting its :before in CSS and designing it like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;#&lt;span class=&quot;hljs-attr&quot;&gt;something&lt;/span&gt;:before{\n   &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;1st&quot;&lt;/span&gt;;\n   font-&lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;:20px;\n   &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:red;\n}\n#something{\n  &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;1st&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please notice I also set &lt;code&gt;content&lt;/code&gt; attribute in element itself so that you can take it out easily later.\nNow there is a &lt;code&gt;button&lt;/code&gt; clicking on which, you want to change the color of :before to green and its font-size to 30px. You can achieve that as follows:&lt;/p&gt;\n\n&lt;p&gt;Define a css with your required style on some class &lt;code&gt;.activeS&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;.&lt;span class=&quot;hljs-property&quot;&gt;activeS&lt;/span&gt;:before{\n   &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:green !important;\n   font-&lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;:30px !important;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can change :before style by adding the class to your :before element as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;changeBefore&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Change&lt;/span&gt;&amp;lt;/button&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#changeBefore&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#something&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;activeS&apos;&lt;/span&gt;);\n    });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you just want to get content of &lt;code&gt;:before&lt;/code&gt;, it can be done as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;getContent&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Content&lt;/span&gt;&amp;lt;/button&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#getContent&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#something&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;));&lt;span class=&quot;hljs-comment&quot;&gt;//will print &apos;1st&apos;&lt;/span&gt;\n    });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ultimately if you want to dynamically change &lt;code&gt;:before&lt;/code&gt; content by jQuery, You can achieve that as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;button id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;changeBefore&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Change&lt;/span&gt;&amp;lt;/button&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newValue = &lt;span class=&quot;hljs-string&quot;&gt;&apos;22&apos;&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//coming from somewhere&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;style&amp;gt;#something:before{content:&quot;&apos;&lt;/span&gt;+newValue+&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;!important;}&amp;lt;/style&amp;gt;&apos;&lt;/span&gt;;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#changeBefore&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;body&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(add);\n    });\n&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clicking on above &quot;changeBefore&quot; button will change &lt;code&gt;:before&lt;/code&gt; content of &lt;code&gt;#something&lt;/code&gt; into &apos;22&apos; which is a dynamic value.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;I hope it helps&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use my plugin for this purpose.&lt;/p&gt;\n\n&lt;p&gt;JQuery:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $.pseudoElements = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; setPseudoElement = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;parameters&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || (parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;elements&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;()) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;) element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt; = {\n          &lt;span class=&quot;hljs-attr&quot;&gt;styleSheet&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;before&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;properties&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n          },\n          &lt;span class=&quot;hljs-attr&quot;&gt;after&lt;/span&gt;: {\n            &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;properties&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n          },\n          &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n        };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; selector = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(element.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-pe--id&apos;&lt;/span&gt;)) !== element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;) element.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-pe--id&apos;&lt;/span&gt;, element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;[data-pe--id=&quot;&apos;&lt;/span&gt; + element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;]::&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;;\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; id = $.pseudoElements.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n            $.pseudoElements.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;++\n\n              element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = id;\n            element.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-pe--id&apos;&lt;/span&gt;, id);\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;[data-pe--id=&quot;&apos;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;]::&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;;\n          };\n        })();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) {\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n          } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; styleSheet = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;style&apos;&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(styleSheet);\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt; = styleSheet.&lt;span class=&quot;hljs-property&quot;&gt;sheet&lt;/span&gt;;\n          };\n        };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; &amp;amp;&amp;amp; element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;) {\n          element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;deleteRule&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;);\n        };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; = $.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;({}, parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;);\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; &amp;amp;&amp;amp; !element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newIndex = element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;rules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cssRules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt; = newIndex;\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;;\n          };\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)\n              element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property]();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n              element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property];\n          };\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;) {\n            properties += property + &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt; + element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] + &lt;span class=&quot;hljs-string&quot;&gt;&apos; !important; &apos;&lt;/span&gt;;\n          };\n\n          element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(selector, properties, element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; &amp;amp;&amp;amp; !element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newIndex = element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;rules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cssRules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt; = newIndex;\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; = {};\n          };\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;] = parameters.&lt;span class=&quot;hljs-title function_&quot;&gt;property&lt;/span&gt;();\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;) {\n            properties += property + &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt; + element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] + &lt;span class=&quot;hljs-string&quot;&gt;&apos; !important; &apos;&lt;/span&gt;;\n          };\n\n          element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(selector, properties, element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;);\n        };\n      };\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $(parameters.&lt;span class=&quot;hljs-property&quot;&gt;elements&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = $(parameters.&lt;span class=&quot;hljs-property&quot;&gt;elements&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; windowStyle = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getComputedStyle&lt;/span&gt;(\n        element, &lt;span class=&quot;hljs-string&quot;&gt;&apos;::&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;\n      ).&lt;span class=&quot;hljs-title function_&quot;&gt;getPropertyValue&lt;/span&gt;(parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $(parameters.&lt;span class=&quot;hljs-property&quot;&gt;elements&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;] || windowStyle;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; windowStyle || &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n      };\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Invalid values!&apos;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    };\n  };\n\n  $.fn.&lt;span class=&quot;hljs-property&quot;&gt;cssBefore&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;argument, property&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElement&lt;/span&gt;({\n      &lt;span class=&quot;hljs-attr&quot;&gt;elements&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;pseudoElement&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;before&apos;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;argument&lt;/span&gt;: argument,\n      &lt;span class=&quot;hljs-attr&quot;&gt;property&lt;/span&gt;: property\n    });\n  };\n  $.fn.&lt;span class=&quot;hljs-property&quot;&gt;cssAfter&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;argument, property&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElement&lt;/span&gt;({\n      &lt;span class=&quot;hljs-attr&quot;&gt;elements&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;pseudoElement&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;after&apos;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;argument&lt;/span&gt;: argument,\n      &lt;span class=&quot;hljs-attr&quot;&gt;property&lt;/span&gt;: property\n    });\n  };\n})();\n\n$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.element&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;cssBefore&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;New before!&quot;&apos;&lt;/span&gt;);\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.element&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;480px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt; solid red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.element&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Old before!&apos;&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;element&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The values should be specified, as in the normal function of jQuery.css&lt;/p&gt;\n\n&lt;p&gt;In addition, you can also get the value of the pseudo-element parameter, as in the normal function of jQuery.css:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( $(element).&lt;span class=&quot;hljs-title function_&quot;&gt;cssBefore&lt;/span&gt;(parameter) );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;JS:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; setPseudoElement = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;parameters&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; || (parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;)) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;) parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt; = {\n        &lt;span class=&quot;hljs-attr&quot;&gt;styleSheet&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;before&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;properties&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;after&lt;/span&gt;: {\n          &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;properties&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n      };\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; selector = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-pe--id&apos;&lt;/span&gt;)) !== parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;) parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-pe--id&apos;&lt;/span&gt;, parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;[data-pe--id=&quot;&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;]::&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n          &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;++\n\n            parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = id;\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-pe--id&apos;&lt;/span&gt;, id);\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;[data-pe--id=&quot;&apos;&lt;/span&gt; + id + &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;]::&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;;\n        };\n      })();\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) {\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheets&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; styleSheet = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;style&apos;&lt;/span&gt;);\n\n          &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;head&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(styleSheet);\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt; = styleSheet.&lt;span class=&quot;hljs-property&quot;&gt;sheet&lt;/span&gt;;\n        };\n      };\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;) {\n        parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;deleteRule&lt;/span&gt;(parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;);\n      };\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;) {\n        parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cloneObject = &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pop&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt; ? [] : {};\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;) {\n            cloneObject[property] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property];\n          };\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cloneObject;\n        })();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; &amp;amp;&amp;amp; !parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newIndex = parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;rules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cssRules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt; = newIndex;\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;;\n        };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)\n            parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property]();\n          &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;[property];\n        };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;) {\n          properties += property + &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] + &lt;span class=&quot;hljs-string&quot;&gt;&apos; !important; &apos;&lt;/span&gt;;\n        };\n\n        parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(selector, properties, parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; &amp;amp;&amp;amp; !parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newIndex = parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;rules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;cssRules&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; || parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt; = newIndex;\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt; = {};\n        };\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;)\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;] = parameters.&lt;span class=&quot;hljs-title function_&quot;&gt;property&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n          parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;] = parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; properties = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; property &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;) {\n          properties += property + &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[property] + &lt;span class=&quot;hljs-string&quot;&gt;&apos; !important; &apos;&lt;/span&gt;;\n        };\n\n        parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;styleSheet&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addRule&lt;/span&gt;(selector, properties, parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;index&lt;/span&gt;);\n      };\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; parameters.&lt;span class=&quot;hljs-property&quot;&gt;property&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; windowStyle = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getComputedStyle&lt;/span&gt;(\n        parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;::&apos;&lt;/span&gt; + parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;\n      ).&lt;span class=&quot;hljs-title function_&quot;&gt;getPropertyValue&lt;/span&gt;(parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parameters.&lt;span class=&quot;hljs-property&quot;&gt;element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElements&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;pseudoElement&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;properties&lt;/span&gt;[parameters.&lt;span class=&quot;hljs-property&quot;&gt;argument&lt;/span&gt;] || windowStyle;\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; windowStyle || &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n      };\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Invalid values!&apos;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    };\n  };\n\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;styleBefore&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;argument, property&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElement&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;element&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;pseudoElement&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;before&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;argument&lt;/span&gt;: argument,\n        &lt;span class=&quot;hljs-attr&quot;&gt;property&lt;/span&gt;: property\n      });\n    }\n  });\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Element&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;styleAfter&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;argument, property&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setPseudoElement&lt;/span&gt;({\n        &lt;span class=&quot;hljs-attr&quot;&gt;element&lt;/span&gt;: &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;pseudoElement&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;after&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;argument&lt;/span&gt;: argument,\n        &lt;span class=&quot;hljs-attr&quot;&gt;property&lt;/span&gt;: property\n      });\n    }\n  });\n})();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.element&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;styleBefore&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;New before!&quot;&apos;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.element&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;480px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt; solid red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.element&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::before&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Old before!&apos;&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;element&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;GitHub: &lt;a href=&quot;https://github.com/yuri-spivak/managing-the-properties-of-pseudo-elements/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/yuri-spivak/managing-the-properties-of-pseudo-elements/&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I have created a jQuery plugin to add css-pseudo rules like using &lt;code&gt;.css()&lt;/code&gt; for specific elements.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;plugin code and test case is &lt;a href=&quot;https://jsfiddle.net/BananaAcid/96rdevhp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;use case as simple css image popup &lt;a href=&quot;https://jsfiddle.net/BananaAcid/yrts5j24/&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;body&apos;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;backgroundColor&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;white&apos;&lt;/span&gt;\n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;cssPseudo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;after&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;attr(title) &quot;, you should try to hover the picture, then click it.&quot;&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;absolute&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;  \n  })\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;cssPseudo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hover:after&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;Now hover the picture, then click it!&quot;&apos;&lt;/span&gt;\n  });\n\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.span&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;);\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.span&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n         $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-txt&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;any other text&quot;&lt;/span&gt;);\n        })&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.span&lt;/span&gt;{\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.span&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:after&lt;/span&gt;{ \n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;attr&lt;/span&gt;(data-txt);\n }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;span&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Someone else commented on appending to the head element with a full style element and that&apos;s not bad if you&apos;re only doing it once but if you need to reset it more than once you&apos;ll end up with a ton of style elements. So to prevent that I created a blank style element in the head with an id and replace the innerHTML of it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;style id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;pseudo&quot;&lt;/span&gt;&amp;gt;&amp;lt;/style&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the JavaScript would look like this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pseudo = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pseudo&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setHeight&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; height = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;container&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;clientHeight&lt;/span&gt;;\n    pseudo.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;`.class:before { height: &lt;span class=&quot;hljs-subst&quot;&gt;${height}&lt;/span&gt;px; }`&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;setHeight&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in my case I needed this to set the height of a before element based on the height of another and it will change on resize so using this I can run &lt;code&gt;setHeight()&lt;/code&gt; every time the window is resized and it will  replace the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; properly.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Hope that helps someone who was stuck trying to do the same thing.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I made use of variables defined in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;:root&lt;/code&gt;&lt;/a&gt; inside &lt;code&gt;CSS&lt;/code&gt; to modify the &lt;code&gt;:after&lt;/code&gt; (the same applies to &lt;code&gt;:before&lt;/code&gt;) &lt;em&gt;pseudo-element&lt;/em&gt;, in particular to change the &lt;code&gt;background-color&lt;/code&gt; value for a styled &lt;code&gt;anchor&lt;/code&gt; defined by &lt;code&gt;.sliding-middle-out:hover:after&lt;/code&gt; and the &lt;code&gt;content&lt;/code&gt; value for another &lt;code&gt;anchor&lt;/code&gt; (&lt;code&gt;#reference&lt;/code&gt;) in the following &lt;a href=&quot;https://codepen.io/ChemBioScripting/pen/zJJMKE&quot; rel=&quot;nofollow noreferrer&quot;&gt;demo&lt;/a&gt; that generates random colors by using JavaScript/jQuery:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;a href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;changeColor&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sliding-middle-out&quot;&lt;/span&gt; title=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Generate a random color&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Change&lt;/span&gt; link color&amp;lt;/a&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;log&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://stackoverflow.com/a/52360188/2149425&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;reference&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sliding-middle-out&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;_blank&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Stack Overflow topic&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Reference&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://cdn.rawgit.com/davidmerfield/randomColor/master/randomColor.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;:root {\n    --&lt;span class=&quot;hljs-attr&quot;&gt;anchorsFg&lt;/span&gt;: #0DAFA4;\n}\na, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:visited, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:focus, &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;:active {\n    text-&lt;span class=&quot;hljs-attr&quot;&gt;decoration&lt;/span&gt;: none;\n    &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;var&lt;/span&gt;(--anchorsFg);\n    &lt;span class=&quot;hljs-attr&quot;&gt;outline&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    font-&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;: italic;\n\n    -webkit-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    -moz-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    -ms-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    -o-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    &lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n}\n.&lt;span class=&quot;hljs-property&quot;&gt;sliding&lt;/span&gt;-middle-out {\n    &lt;span class=&quot;hljs-attr&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attr&quot;&gt;position&lt;/span&gt;: relative;\n    padding-&lt;span class=&quot;hljs-attr&quot;&gt;bottom&lt;/span&gt;: 1px;\n}\n.&lt;span class=&quot;hljs-property&quot;&gt;sliding&lt;/span&gt;-middle-&lt;span class=&quot;hljs-attr&quot;&gt;out&lt;/span&gt;:after {\n    &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attr&quot;&gt;display&lt;/span&gt;: block;\n    &lt;span class=&quot;hljs-attr&quot;&gt;margin&lt;/span&gt;: auto;\n    &lt;span class=&quot;hljs-attr&quot;&gt;height&lt;/span&gt;: 1px;\n    &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;: 0px;\n    background-&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: transparent;\n\n    -webkit-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: width 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out, background-color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    -moz-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: width 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out, background-color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    -ms-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: width 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out, background-color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    -o-&lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: width 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out, background-color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n    &lt;span class=&quot;hljs-attr&quot;&gt;transition&lt;/span&gt;: width 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out, background-color 250ms ease-&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;-out;\n}\n.&lt;span class=&quot;hljs-property&quot;&gt;sliding&lt;/span&gt;-middle-&lt;span class=&quot;hljs-attr&quot;&gt;out&lt;/span&gt;:&lt;span class=&quot;hljs-attr&quot;&gt;hover&lt;/span&gt;:after {\n    &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;%;\n    background-&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;var&lt;/span&gt;(--anchorsFg);\n    &lt;span class=&quot;hljs-attr&quot;&gt;outline&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n#reference {\n  margin-&lt;span class=&quot;hljs-attr&quot;&gt;top&lt;/span&gt;: 20px;\n}\n.&lt;span class=&quot;hljs-property&quot;&gt;sliding&lt;/span&gt;-middle-&lt;span class=&quot;hljs-attr&quot;&gt;out&lt;/span&gt;:before {\n  &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(data-content);\n  &lt;span class=&quot;hljs-attr&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(data-display);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;JS/jQuery&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anchorsFg = &lt;span class=&quot;hljs-title function_&quot;&gt;randomColor&lt;/span&gt;();\n$( &lt;span class=&quot;hljs-string&quot;&gt;&quot;.sliding-middle-out&quot;&lt;/span&gt; ).&lt;span class=&quot;hljs-title function_&quot;&gt;hover&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    $( &lt;span class=&quot;hljs-string&quot;&gt;&quot;:root&quot;&lt;/span&gt; ).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&quot;--anchorsFg&quot;&lt;/span&gt; : anchorsFg});\n});\n\n$( &lt;span class=&quot;hljs-string&quot;&gt;&quot;#reference&quot;&lt;/span&gt; ).&lt;span class=&quot;hljs-title function_&quot;&gt;hover&lt;/span&gt;(\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data-content&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data-display&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;block&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n },\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data-content&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Reference&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data-display&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;inline&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n }\n);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;The first time I&apos;m not reading all given answers before giving my own, so I hope this doesn&apos;t bite me in the ...&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;In my case this was needed for icons attached to &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;button&lt;/code&gt; elements, which worked a bit differently than the &lt;code&gt;&amp;lt;i class=&quot;icon-class&quot;&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; since, there was no &lt;code&gt;icon-class&lt;/code&gt; class on them. Adding &lt;code&gt;class=&quot;icon-class&quot;&lt;/code&gt; broke styling though.&lt;/p&gt;\n&lt;p&gt;Instead I added a &lt;code&gt;data-icon&lt;/code&gt; attribute to them with the value of what was supposed to be in &lt;code&gt;element::before { content: &quot;HERE&quot; }&lt;/code&gt; and then this fairly simple JavaScript took care of the rest.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fakeIcons = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[data-icon]&apos;&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; iconElement &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; fakeIcons) {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fakeClass = &lt;span class=&quot;hljs-string&quot;&gt;&apos;fake-&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; beforeContent = iconElement.&lt;span class=&quot;hljs-title function_&quot;&gt;getAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;data-icon&apos;&lt;/span&gt;)\n\n            iconElement.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(fakeClass)\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; style = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;style&apos;&lt;/span&gt;)\n            style.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;text/css&apos;&lt;/span&gt;\n            style.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;`\n\n                .&lt;span class=&quot;hljs-subst&quot;&gt;${fakeClass}&lt;/span&gt;::before {\n                    content: &quot;&lt;span class=&quot;hljs-subst&quot;&gt;${beforeContent}&lt;/span&gt;&quot; !important;\n                }\n\n            `&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;head&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(style)\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Code explained:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;select all elements with the designated attribute (&lt;code&gt;data-icon&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;loop through them&lt;/li&gt;\n&lt;li&gt;randomly generate a class name starting with &lt;code&gt;fake-&lt;/code&gt;, followed by a random alphanumeric string&lt;/li&gt;\n&lt;li&gt;get &lt;code&gt;data-icon&lt;/code&gt; attribute&apos;s value&lt;/li&gt;\n&lt;li&gt;add randomly generated class to the element&lt;/li&gt;\n&lt;li&gt;create style for &lt;code&gt;::before&lt;/code&gt; pseudo-element setting content to previously fetched value&lt;/li&gt;\n&lt;li&gt;add styling to the end of &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; HTML element&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The below solution tells how you can update pseudo-elements with javascript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr()&quot; rel=&quot;nofollow noreferrer&quot;&gt;attr&lt;/a&gt; attribute.&lt;/p&gt;\n&lt;p&gt;add an attribute in HTML which you can manipulate with javascript with setAttribute.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div \n id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inputBoxParent&quot;&lt;/span&gt; \n count=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;\n      ...\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;update with js&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;inputBoxParent.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;count&apos;&lt;/span&gt;, value.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;CSS - in pseudo-element add content as attr(attributeName)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;.&lt;span class=&quot;hljs-property&quot;&gt;input&lt;/span&gt;-box-&lt;span class=&quot;hljs-attr&quot;&gt;container&lt;/span&gt;::after{\n  &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(count);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you are done!!!&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; inputBoxParent = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;inputBoxParent&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleOnChange&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) =&amp;gt; {\n  inputBoxParent.&lt;span class=&quot;hljs-title function_&quot;&gt;setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;count&apos;&lt;/span&gt;, value.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.input-box-container&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.input-box-container&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt;{\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;attr&lt;/span&gt;(count);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt; Type some text inside the box and click outside to see resule i.e. pseudo element content change&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; \n  &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inputBoxParent&quot;&lt;/span&gt; \n  &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;input-box-container&quot;&lt;/span&gt; \n  &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; \n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; \n    &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inputBox&quot;&lt;/span&gt; \n    &lt;span class=&quot;hljs-attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;type some thing&quot;&lt;/span&gt; \n    &lt;span class=&quot;hljs-attr&quot;&gt;onchange&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;handleOnChange(this.value)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;onkeyup&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;handleOnChange(this.value)&quot;&lt;/span&gt;\n /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I have something different stuff for you which is easy and effective.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &amp;lt;style&amp;gt; \n    .&lt;span class=&quot;hljs-property&quot;&gt;case&lt;/span&gt;-&lt;span class=&quot;hljs-attr&quot;&gt;after&lt;/span&gt;:after { &lt;span class=&quot;hljs-comment&quot;&gt;// set your properties here like eg: &lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:#3fd309 !important; \n     } \n     .&lt;span class=&quot;hljs-property&quot;&gt;case&lt;/span&gt;-&lt;span class=&quot;hljs-attr&quot;&gt;before&lt;/span&gt;:before { &lt;span class=&quot;hljs-comment&quot;&gt;// set your properties here like eg: &lt;/span&gt;\n        &lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;:#&lt;span class=&quot;hljs-number&quot;&gt;151715&lt;/span&gt; !important; \n     }\n &amp;lt;/style&amp;gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// case for after&lt;/span&gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#button-id&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.target-div&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;case-after&apos;&lt;/span&gt;);\n    });\n\n     &lt;span class=&quot;hljs-comment&quot;&gt;// case for before&lt;/span&gt;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#button-id&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.target-div&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toggleClass&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;case-before&apos;&lt;/span&gt;);\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just set the pseudo &lt;strong&gt;before&lt;/strong&gt; or &lt;strong&gt;after&lt;/strong&gt; to have a style of inherit, then set the parent style with javascript.&lt;/p&gt;\n&lt;p&gt;So, for example I want to change the &lt;strong&gt;color style&lt;/strong&gt; of the :before, then i set the:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;.&lt;span class=&quot;hljs-property&quot;&gt;my&lt;/span&gt;-&lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;::before{\n&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: inherit;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then I just change the &lt;strong&gt;color style&lt;/strong&gt; on the &lt;strong&gt;.my-style&lt;/strong&gt; element with javascript:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.my-style&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt; = red;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;job done, super simple&lt;/p&gt;\n    "],"252":["\n&lt;p&gt;I suggest to use DateTime and DateInterval objects.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2007-03-24&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2009-06-26&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;difference &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;y . &lt;span class=&quot;hljs-string&quot;&gt;&quot; years, &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;m.&lt;span class=&quot;hljs-string&quot;&gt;&quot; months, &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;d.&lt;span class=&quot;hljs-string&quot;&gt;&quot; days &quot;&lt;/span&gt;; \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// shows the total amount of days (not divided into years, months and days like above)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;difference &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;days . &lt;span class=&quot;hljs-string&quot;&gt;&quot; days &quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;read more &lt;a href=&quot;http://www.php.net/manual/en/datetime.diff.php&quot; rel=&quot;noreferrer&quot;&gt;php DateTime::diff manual&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;From the manual:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;As of PHP 5.2.2, DateTime objects can be compared using comparison operators. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;now&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;tomorrow&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// bool(false)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// bool(true)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// bool(false)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Use this for legacy code (PHP &amp;lt; 5.3). For up to date solution see jurka&apos;s answer below&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You can use strtotime() to convert two dates to unix time and then calculate the number of seconds between them. From this it&apos;s rather easy to calculate different time periods.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2007-03-24&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2009-06-26&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; / (&lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;) / (&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)/ (&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d years, %d months, %d days\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Obviously the preferred way of doing this is like described by jurka below. My code is generally only recommended if you don&apos;t have PHP 5.3 or better. &lt;/p&gt;\n\n&lt;p&gt;Several people in the comments have pointed out that the code above is only an approximation. I still believe that for most purposes that&apos;s fine, since the usage of a range is more to provide a sense of how much time has passed or remains rather than to provide precision - if you want to do that, just output the date. &lt;/p&gt;\n\n&lt;p&gt;Despite all that, I&apos;ve decided to address the complaints. If you truly need an exact range but haven&apos;t got access to PHP 5.3, use the code below (it should work in PHP 4 as well). This is a direct port of the code that PHP uses internally to calculate ranges, with the exception that it doesn&apos;t take daylight savings time into account. That means that it&apos;s off by an hour at most, but except for that it should be correct.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Calculate differences between two dates with precise semantics. Based on PHPs DateTime::diff()\n * implementation by Derick Rethans. Ported to PHP by Emil H, 2011-05-02. No rights reserved.\n * \n * See here for original code:\n * http://svn.php.net/viewvc/php/php-src/trunk/ext/date/lib/tm2unixtime.c?revision=302890&amp;amp;view=markup\n * http://svn.php.net/viewvc/php/php-src/trunk/ext/date/lib/interval.c?revision=298973&amp;amp;view=markup\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;] -= &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;intval&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) / &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt;) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] += &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt; * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;intval&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) / &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;] += &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;intval&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] / &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] -= &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt; * &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;intval&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;] / &lt;span class=&quot;hljs-variable&quot;&gt;$adj&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_date_range_limit_days&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$base&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$days_in_month_leap&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$days_in_month&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$base&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$base&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$base&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;invert&quot;&lt;/span&gt;]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;--;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt; += &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;--;\n            }\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$leapyear&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || (&lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$leapyear&lt;/span&gt; ? &lt;span class=&quot;hljs-variable&quot;&gt;$days_in_month_leap&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;] : &lt;span class=&quot;hljs-variable&quot;&gt;$days_in_month&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;];\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;] += &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;]--;\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$leapyear&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || (&lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$leapyear&lt;/span&gt; ? &lt;span class=&quot;hljs-variable&quot;&gt;$days_in_month_leap&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;] : &lt;span class=&quot;hljs-variable&quot;&gt;$days_in_month&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;];\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;] += &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;]--;\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;++;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;++;\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_date_normalize&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$base&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit_days&lt;/span&gt;(&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$base&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_range_limit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Accepts two unix timestamps.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;_date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$one&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$two&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$invert&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$one&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$two&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$one&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$two&lt;/span&gt;) = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$two&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$one&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$invert&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_combine&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_map&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;intval&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;explode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y m d H i s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$one&lt;/span&gt;))));\n    &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_combine&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_map&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;intval&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;explode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y m d H i s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$two&lt;/span&gt;))));\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;h&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;invert&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$invert&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;days&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;intval&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$one&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$two&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;86400&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$invert&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_normalize&lt;/span&gt;(&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_normalize&lt;/span&gt;(&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;, &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1986-11-10 19:37:22&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time&lt;/span&gt;()));\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;_date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time&lt;/span&gt;(), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best course of action is using PHP&apos;s &lt;strong&gt;&lt;a href=&quot;http://il.php.net/manual/en/class.datetime.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; (and &lt;strong&gt;&lt;a href=&quot;http://il.php.net/manual/en/class.dateinterval.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DateInterval&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;) objects. Each date is encapsulated in a &lt;code&gt;DateTime&lt;/code&gt; object, and then a difference between the two can be made:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$first_date&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2012-11-30 17:03:30&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$second_date&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2012-12-21 00:00:00&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;DateTime&lt;/code&gt; object will accept any format &lt;code&gt;strtotime()&lt;/code&gt; would. If an even more specific date format is needed, &lt;strong&gt;&lt;a href=&quot;http://il.php.net/manual/en/datetime.createfromformat.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DateTime::createFromFormat()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; can be used to create the &lt;code&gt;DateTime&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;p&gt;After both objects were instantiated, you substract one from the other with &lt;strong&gt;&lt;a href=&quot;http://il.php.net/manual/en/datetime.diff.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DateTime::diff()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$difference&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$first_date&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$second_date&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;$difference&lt;/code&gt; now holds a &lt;a href=&quot;http://il.php.net/manual/en/class.dateinterval.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;DateInterval&lt;/code&gt;&lt;/a&gt; object with the difference information. A &lt;code&gt;var_dump()&lt;/code&gt; looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;(DateInterval)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;invert&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;days&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To format the &lt;code&gt;DateInterval&lt;/code&gt; object, we&apos;ll need check each value and exclude it if it&apos;s 0:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Format an interval to show all existing components.\n * If the interval doesn&apos;t have a time component (years, months, etc)\n * That component won&apos;t be displayed.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; DateInterval $interval The interval\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; string Formatted interval string.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;format_interval&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DateInterval &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;y) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%y years &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;m) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%m months &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;d) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d days &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;h) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%h hours &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;i) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i minutes &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;s) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s seconds &quot;&lt;/span&gt;); }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All that&apos;s left now is to call our function on the &lt;code&gt;$difference&lt;/code&gt; &lt;code&gt;DateInterval&lt;/code&gt; object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format_interval&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$difference&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And we get the correct result:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;20 days 6 hours 56 minutes 30 seconds&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The complete code used to achieve the goal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Format an interval to show all existing components.\n * If the interval doesn&apos;t have a time component (years, months, etc)\n * That component won&apos;t be displayed.\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; DateInterval $interval The interval\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; string Formatted interval string.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;format_interval&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DateInterval &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;y) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%y years &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;m) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%m months &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;d) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d days &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;h) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%h hours &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;i) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i minutes &quot;&lt;/span&gt;); }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;s) { &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s seconds &quot;&lt;/span&gt;); }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$first_date&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2012-11-30 17:03:30&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$second_date&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2012-12-21 00:00:00&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$difference&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$first_date&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$second_date&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format_interval&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$difference&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;View Hours and Minuts and Seconds..&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2008-11-01 22:45:00&quot;&lt;/span&gt;; \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;2009-12-04 13:44:01&quot;&lt;/span&gt;; \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;)); \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;   = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; / (&lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)); \n&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;  = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;) / (&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)); \n&lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;    = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)/ (&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt;   = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)/ (&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)); \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$minuts&lt;/span&gt;  = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)/ &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;); \n\n&lt;span class=&quot;hljs-variable&quot;&gt;$seconds&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$minuts&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;)); \n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d years, %d months, %d days, %d hours, %d minuts\\n, %d seconds\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$minuts&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$seconds&lt;/span&gt;); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Take a look at the following link. This is the best answer I&apos;ve found so far.. :)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dateDiff&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$d1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$d2&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Return the number of days between the two dates:    &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$d1&lt;/span&gt;) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$d2&lt;/span&gt;))/&lt;span class=&quot;hljs-number&quot;&gt;86400&lt;/span&gt;);\n\n} &lt;span class=&quot;hljs-comment&quot;&gt;// end function dateDiff&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It doesn&apos;t matter which date is earlier or later when you pass in the\n  date parameters. The function uses the PHP ABS() absolute value to\n  always return a postive number as the number of days between the two\n  dates.&lt;/p&gt;\n  \n  &lt;p&gt;Keep in mind that the number of days between the two dates is NOT\n  inclusive of both dates. So if you are looking for the number of days\n  represented by all the dates between and including the dates entered,\n  you will need to add one (1) to the result of this function.&lt;/p&gt;\n  \n  &lt;p&gt;For example, the difference (as returned by the above function)\n  between 2013-02-09 and 2013-02-14 is 5. But the number of days or\n  dates represented by the date range 2013-02-09 - 2013-02-14 is 6.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.bizinfosys.com/php/date-difference.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.bizinfosys.com/php/date-difference.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$today&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2011-02-03 00:00:00&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$myBirthDate&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1964-10-30 00:00:00&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Days since my birthday: &quot;&lt;/span&gt;, (&lt;span class=&quot;hljs-variable&quot;&gt;$today&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$myBirthDate&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;);\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I voted for &lt;a href=&quot;https://stackoverflow.com/users/474405/jurka&quot;&gt;jurka&lt;/a&gt;&apos;s &lt;a href=&quot;https://stackoverflow.com/questions/676824/how-to-calculate-the-date-difference-between-2-dates-using-php/3923228#3923228&quot;&gt;answer&lt;/a&gt; as that&apos;s my favorite, but I have a pre-php.5.3 version...&lt;/p&gt;\n\n&lt;p&gt;I found myself working on a similar problem - which is how I got to this question in the first place - but just needed a difference in hours.  But my function solved this one pretty nicely as well and I don&apos;t have anywhere in my own library to keep it where it won&apos;t get lost and forgotten, so... hope this is useful to someone.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n *\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; DateTime $oDate1\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; DateTime $oDate2\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; array \n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;date_diff_array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DateTime &lt;span class=&quot;hljs-variable&quot;&gt;$oDate1&lt;/span&gt;, DateTime &lt;span class=&quot;hljs-variable&quot;&gt;$oDate2&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$aIntervals&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt;  =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;week&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;day&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;hour&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;minute&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$aIntervals&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$sInterval&lt;/span&gt; =&amp;gt; &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$iInterval&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$oDate1&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable&quot;&gt;$oDate2&lt;/span&gt;){ \n            &lt;span class=&quot;hljs-variable&quot;&gt;$oDate1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;modify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+1 &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$sInterval&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$oDate1&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$oDate2&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$oDate1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;modify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-1 &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$sInterval&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$iInterval&lt;/span&gt;++;\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$aIntervals&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the test: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$oDate&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable&quot;&gt;$oDate&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;modify&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+111402189 seconds&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$oDate&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff_array&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(), &lt;span class=&quot;hljs-variable&quot;&gt;$oDate&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;(DateTime)[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;date&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;2014-04-29 18:52:51&apos;&lt;/span&gt; (length=&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;timezone_type&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;timezone&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;America/New_York&apos;&lt;/span&gt; (length=&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt;  =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;week&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;day&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;hour&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;minute&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I got the original idea from &lt;a href=&quot;http://www.php.net/manual/en/datetime.diff.php#97810&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;, which I modified for my uses (and I hope my modification will show on that page as well).&lt;/p&gt;\n\n&lt;p&gt;You can very easily remove intervals you don&apos;t want (say &quot;week&quot;) by removing them from the &lt;code&gt;$aIntervals&lt;/code&gt; array, or maybe adding an &lt;code&gt;$aExclude&lt;/code&gt; parameter, or just filter them out when you output the string.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know if you are using a PHP framework or not, but a lot of PHP frameworks have date/time libraries and helpers to help keep you from reinventing the wheel.&lt;/p&gt;\n\n&lt;p&gt;For example CodeIgniter has the &lt;code&gt;timespan()&lt;/code&gt; function. Simply input two Unix timestamps and it will automatically generate a result like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; Year, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; Months, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; Weeks, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; Days, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; Hours, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; Minutes\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://codeigniter.com/user_guide/helpers/date_helper.html&quot; rel=&quot;noreferrer&quot;&gt;http://codeigniter.com/user_guide/helpers/date_helper.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here is the runnable code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2007-03-24&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2009-06-26&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$diff1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$daysdiff&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$diff1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%R%a&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$daysdiff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$daysdiff&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Use example :&lt;/h3&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time_diff_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2013-05-01 00:22:35&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;now&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time_diff_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2013-05-01 00:22:35&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;now&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output :&lt;/h3&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; months ago\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; months, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; weeks, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; days, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; hour, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt; minutes, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; seconds ago\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Function :&lt;/h3&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;time_diff_string&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$from&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$full&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$from&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$from&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$from&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;w = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d / &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d -= &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;w * &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;w&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;week&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;day&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;h&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hour&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;minute&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;,\n    );\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt; . (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;unset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;]);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-variable&quot;&gt;$full&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_slice&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;implode&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;) . &lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;just now&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would prefer to use &lt;code&gt;date_create&lt;/code&gt; and &lt;code&gt;date_diff&lt;/code&gt; objects.&lt;/p&gt;\n\n&lt;p&gt;Code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2007-03-24&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2009-06-26&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$dateDifference&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;%y years, %m months and %d days&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$dateDifference&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; years, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; months &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; days\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For more info read &lt;a href=&quot;http://php.net/manual/en/function.date-diff.php&quot; rel=&quot;noreferrer&quot;&gt;PHP &lt;code&gt;date_diff&lt;/code&gt; manual&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;According to manual &lt;code&gt;date_diff&lt;/code&gt; is an alias of\n  &lt;a href=&quot;http://php.net/manual/en/datetime.diff.php&quot; rel=&quot;noreferrer&quot;&gt;DateTime::diff()&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I have some simple logic for that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;per_days_diff&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2011-12-12&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2011-12-29&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;per_days_diff&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$start_date&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$end_date&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable&quot;&gt;$per_days&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$noOfWeek&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$noOfWeekEnd&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$highSeason&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$start_date&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt; += (&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;3600&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable&quot;&gt;$end_date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$end_date&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$seassion&lt;/span&gt; = (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;in_array&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;$highSeason&lt;/span&gt;))?&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable&quot;&gt;$end_date&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable&quot;&gt;$end_date&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;N&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt;);\n                &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_push&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;);\n                &lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+1 day&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$current_date&lt;/span&gt;);\n            }\n        }\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$finalDays&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_shift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//print_r($noOfdays);&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$weekFirst&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;week&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(),&lt;span class=&quot;hljs-string&quot;&gt;&quot;weekEnd&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;());\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;); &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;This is week&quot;;&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;&amp;lt;br/&amp;gt;&quot;;&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$noOfWeek&lt;/span&gt;++;\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;=&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$per_days&lt;/span&gt;++;\n                }\n                &lt;span class=&quot;hljs-comment&quot;&gt;//array_push($weekFirst[&quot;week&quot;],$day);&lt;/span&gt;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]==&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;This is weekend&quot;;&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;&amp;lt;br/&amp;gt;&quot;;&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$noOfdays&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] ==&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)\n                {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$noOfWeekEnd&lt;/span&gt;++;\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n                {\n                    &lt;span class=&quot;hljs-variable&quot;&gt;$per_days&lt;/span&gt;++;\n                }\n                &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;After weekend value:- &quot;.$i;&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;//echo &quot;&amp;lt;br/&amp;gt;&quot;;&lt;/span&gt;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$per_days&lt;/span&gt;++;\n            }\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;/*echo $noOfWeek;\n          echo &quot;&amp;lt;br/&amp;gt;&quot;;\n          echo $noOfWeekEnd;\n          echo &quot;&amp;lt;br/&amp;gt;&quot;;\n          print_r($per_days);\n          echo &quot;&amp;lt;br/&amp;gt;&quot;;\n          print_r($weekFirst);\n        */&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$duration&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;weeks&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$noOfWeek&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;weekends&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$noOfWeekEnd&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;perDay&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$per_days&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;seassion&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$seassion&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$duration&lt;/span&gt;;\n      &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this very simple answer using &lt;a href=&quot;https://www.php.net/manual/en/function.date-diff.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;date_diff()&lt;/strong&gt;&lt;/a&gt;, this is tested.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2017-11-27&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2018-12-29&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%m months&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%y years&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d days&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; .&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the output is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; years &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; months &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; days\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getdate&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;function which returns an array containing all elements of the date/time supplied:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$my_t&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getdate&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$my_t&lt;/span&gt;[year] years, &lt;span class=&quot;hljs-subst&quot;&gt;$my_t&lt;/span&gt;[month] months and &lt;span class=&quot;hljs-subst&quot;&gt;$my_t&lt;/span&gt;[mday] days&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your start and end dates are in string format then use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$startDateStr&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$endDateStr&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before the above code&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// If you just want to see the year difference then use this function.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Using the logic I&apos;ve created you may also create month and day difference&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// which I did not provide here so you may have the efforts to use your brain.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// :)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2009-01-01&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;2010-01-01&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getYearDifference&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getYearDifference&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;=strtotime(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;&lt;/span&gt;),&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;=strtotime(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+1 year&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;)){\n        ++&lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is my function. Required PHP &amp;gt;= 5.3.4. It use DateTime class. Very fast, quick and can do the difference between two dates or even the so called &quot;time since&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;function_exists&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;grk_Datetime_Since&apos;&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;){\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;grk_Datetime_Since&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$Prefix&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$Suffix&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;=&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   Est-ce qu&apos;on calcul jusqu&apos;à un moment précis ? Probablement pas, on utilise maintenant&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time&lt;/span&gt;();\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On va s&apos;assurer que $From est numérique&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_int&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt;);\n        };\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On va s&apos;assurer que $To est numérique&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_int&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On a une erreur ?&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt; OR &lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt; === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; OR &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt; OR &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt; === -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On va créer deux objets de date&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d H:i:s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTimeZone&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GMT&apos;&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;   = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(@&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d H:i:s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTimeZone&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;GMT&apos;&lt;/span&gt;));\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On va calculer la différence entre $From et $To&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$From&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$To&lt;/span&gt;)) === &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On va merger le tableau des noms (par défaut, anglais)&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_merge&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;      =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;years&apos;&lt;/span&gt;     =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;years&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt;     =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;months&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;months&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;week&apos;&lt;/span&gt;      =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;week&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;weeks&apos;&lt;/span&gt;     =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;weeks&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;day&apos;&lt;/span&gt;       =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;day&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;days&apos;&lt;/span&gt;      =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;days&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;hour&apos;&lt;/span&gt;      =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hour&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;hours&apos;&lt;/span&gt;     =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;hours&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;minute&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;minute&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;minutes&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;minutes&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;seconds&apos;&lt;/span&gt;   =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;seconds&apos;&lt;/span&gt;\n        ), &lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;#   On va créer la chaîne maintenant&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;y &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;y.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;years&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;y == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;year&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;m &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;m.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;months&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;m == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;d/&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;weeks&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;d == &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;week&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;d.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;days&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;d == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;day&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;h &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;h.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hours&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;h == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hour&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;i &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;i.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;minutes&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;i == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;minute&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;s &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$Diff&lt;/span&gt;-&amp;gt;s.&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;seconds&apos;&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1 &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Words&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;];\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$Prefix&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Text&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$Suffix&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can always use the following function that can return the age in years and months (ie. 1 Year 4 Months)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getAge&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$dob&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$age_at_date&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{  \n    &lt;span class=&quot;hljs-variable&quot;&gt;$d1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dob&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$d2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$age_at_date&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$d2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$d1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt;-&amp;gt;y;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt;-&amp;gt;m;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;.months;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if you want the age to be calculated at the current date, you can use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getAge&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$dob&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{  \n    &lt;span class=&quot;hljs-variable&quot;&gt;$d1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$dob&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$d2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;());\n    &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$d2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$d1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt;-&amp;gt;y;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt;-&amp;gt;m;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;.months;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;use this function&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//function Diff between Dates&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//////////////////////////////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//PARA: Date Should In YYYY-MM-DD Format&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//RESULT FORMAT:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%y Year %m Month %d Day %h Hours %i Minute %s Seconds&apos; =&amp;gt;  1 Year 3 Month 14 Day 11 Hours 49 Minute 36 Seconds&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%y Year %m Month %d Day&apos;                       =&amp;gt;  1 Year 3 Month 14 Days&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%m Month %d Day&apos;                                     =&amp;gt;  3 Month 14 Day&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%d Day %h Hours&apos;                                   =&amp;gt;  14 Day 11 Hours&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%d Day&apos;                                                 =&amp;gt;  14 Days&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%h Hours %i Minute %s Seconds&apos;         =&amp;gt;  11 Hours 49 Minute 36 Seconds&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%i Minute %s Seconds&apos;                           =&amp;gt;  49 Minute 36 Seconds&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%h Hours                                          =&amp;gt;  11 Hours&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;%a Days                                                =&amp;gt;  468 Days&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//////////////////////////////////////////////////////////////////////&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dateDifference&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date_1&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$date_2&lt;/span&gt; , &lt;span class=&quot;hljs-variable&quot;&gt;$differenceFormat&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;%a&apos;&lt;/span&gt; &lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$datetime1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date_1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$datetime2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date_2&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$datetime1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$datetime2&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$differenceFormat&lt;/span&gt;);\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;only set parameter &lt;strong&gt;$differenceFormat&lt;/strong&gt;  As your need\nexample I want Diff between to years with months and days your age&lt;/p&gt;\n&lt;p&gt;dateDifference(&lt;strong&gt;date(&apos;Y-m-d&apos;)&lt;/strong&gt; , &lt;strong&gt;$date&lt;/strong&gt; , &apos;&lt;strong&gt;%y&lt;/strong&gt; &lt;strong&gt;%m&lt;/strong&gt; &lt;strong&gt;%d&lt;/strong&gt;&apos;)&lt;/p&gt;\n&lt;p&gt;or other format&lt;/p&gt;\n&lt;p&gt;dateDifference(&lt;strong&gt;date(&apos;Y-m-d&apos;)&lt;/strong&gt; , &lt;strong&gt;$date&lt;/strong&gt; , &apos;&lt;strong&gt;%y&lt;/strong&gt;-&lt;strong&gt;%m&lt;/strong&gt;-&lt;strong&gt;%d&lt;/strong&gt;&apos;)&lt;/p&gt;\n    ","\n&lt;p&gt;This will try to detect whether a timestamp was given or not, and will also return future dates/times as negative values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;time_diff&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$convert_to_timestamp&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// If $convert_to_timestamp is not explicitly set to TRUE,&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// check to see if it was accidental:&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$convert_to_timestamp&lt;/span&gt; || !&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_numeric&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If $convert_to_timestamp is TRUE, convert to timestamp:&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$timestamp_start&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Otherwise, leave it as a timestamp:&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$timestamp_start&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$start&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Same as above, but make sure $end has actually been overridden with a non-null,&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// non-empty, non-numeric value:&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_null&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt;) &amp;amp;&amp;amp; (!&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt;) &amp;amp;&amp;amp; !&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_numeric&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt;))) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$timestamp_end&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$end&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If $end is NULL or empty and non-numeric value, assume the end time desired&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// is the current time (useful for age, etc):&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$timestamp_end&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time&lt;/span&gt;();\n  }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Regardless, set the start and end times to an integer:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$start_time&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$timestamp_start&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$end_time&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$timestamp_end&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Assign these values as the params for $then and $now:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$start_time_var&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;start_time&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$end_time_var&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;end_time&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Use this to determine if the output is positive (time passed) or negative (future):&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// If the end time is at a later time than the start time, do the opposite:&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$end_time&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable&quot;&gt;$start_time&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$start_time_var&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;end_time&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$end_time_var&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;start_time&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt; = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Convert everything to the proper format, and do some math:&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d H:i:s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$$start_time_var&lt;/span&gt;));\n  &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y-m-d H:i:s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$$end_time_var&lt;/span&gt;));\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$years_then&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$years_now&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$years_now&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years_then&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$months_then&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$months_now&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$months_now&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months_then&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$days_then&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$days_now&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$days_now&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$days_then&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$hours_then&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$hours_now&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;H&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$hours_now&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$hours_then&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$minutes_then&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$minutes_now&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$minutes&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$minutes_now&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$minutes_then&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-variable&quot;&gt;$seconds_then&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$seconds_now&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable&quot;&gt;$seconds&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$seconds_now&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$seconds_then&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$seconds&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$minutes&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$seconds&lt;/span&gt; += &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$minutes&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$minutes&lt;/span&gt; += &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt; += &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$months_now&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$months_now&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$years_now&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Thirty days hath September, April, June, and November&quot; ;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$days_last_month&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$months_last&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Factor in leap years:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$years_now&lt;/span&gt; % &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable&quot;&gt;$days_last_month&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable&quot;&gt;$days_last_month&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;;\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$days_last_month&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; += &lt;span class=&quot;hljs-variable&quot;&gt;$days_last_month&lt;/span&gt;;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; += &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Finally, multiply each value by either 1 (in which case it will stay the same),&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// or by -1 (in which case it will become negative, for future dates).&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Note: 0 * 1 == 0 * -1 == 0&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;-&amp;gt;years = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;-&amp;gt;months = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;-&amp;gt;days = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;-&amp;gt;hours = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$hours&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;-&amp;gt;minutes = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$minutes&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;-&amp;gt;seconds = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;hljs-variable&quot;&gt;$seconds&lt;/span&gt; * &lt;span class=&quot;hljs-variable&quot;&gt;$pos_neg&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$out&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$birthday&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;June 2, 1971&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$check_age_for_this_date&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;June 3, 1999 8:53pm&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$birthday&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$check_age_for_this_date&lt;/span&gt;)-&amp;gt;years;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$age&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;// 28&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$christmas_2020&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;December 25, 2020&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable&quot;&gt;$countdown&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;time_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$christmas_2020&lt;/span&gt;);\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$countdown&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&quot;if&quot; the date is stored in MySQL, I find it easier to do the difference calculation at the database level... Then based on the Day, Hour, Min, Sec output, parse and display results as appropriate...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;mysql&amp;gt; select firstName, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;convert_tz&lt;/span&gt;(loginDate, &lt;span class=&quot;hljs-string&quot;&gt;&apos;+00:00&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-04:00&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; loginDate, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;TIMESTAMPDIFF&lt;/span&gt;(DAY, loginDate, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;now&lt;/span&gt;()) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Day&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;TIMESTAMPDIFF&lt;/span&gt;(HOUR, loginDate, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;now&lt;/span&gt;())+&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hour&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;TIMESTAMPDIFF&lt;/span&gt;(MINUTE, loginDate, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;now&lt;/span&gt;())+(&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Min&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;TIMESTAMPDIFF&lt;/span&gt;(SECOND, loginDate, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;now&lt;/span&gt;())+(&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sec&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; User_ where userId != &lt;span class=&quot;hljs-string&quot;&gt;&apos;10158&apos;&lt;/span&gt; AND userId != &lt;span class=&quot;hljs-string&quot;&gt;&apos;10198&apos;&lt;/span&gt; group by emailAddress order by loginDate desc;\n +-----------+---------------------+------+------+------+--------+\n | firstName | loginDate           | Day  | Hour | Min  | Sec    |\n +-----------+---------------------+------+------+------+--------+\n | Peter     | &lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; |    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; |    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; |  &lt;span class=&quot;hljs-number&quot;&gt;244&lt;/span&gt; |  &lt;span class=&quot;hljs-number&quot;&gt;14644&lt;/span&gt; |\n | Keith     | &lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; |    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; |    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; |  &lt;span class=&quot;hljs-number&quot;&gt;244&lt;/span&gt; |  &lt;span class=&quot;hljs-number&quot;&gt;14673&lt;/span&gt; |\n | Andres    | &lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; |    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; |   &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;3698&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;221914&lt;/span&gt; |\n | Nadeem    | &lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;03&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt; |    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; |  &lt;span class=&quot;hljs-number&quot;&gt;109&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;6565&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;393901&lt;/span&gt; |\n +-----------+---------------------+------+------+------+--------+\n &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; rows in &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;set&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.00&lt;/span&gt; sec)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I found your article on the following page, which contains a number of references for &lt;a href=&quot;http://en.wikipedia.org/wiki/PHP&quot; rel=&quot;noreferrer&quot;&gt;PHP&lt;/a&gt; date time calculations.&lt;/p&gt;\n\n&lt;p&gt;Calculate the difference between two Dates (and time) using PHP. The following page provides a range of different methods (7 in total) for performing date / time calculations using PHP, to determine the difference in time (hours, munites), days, months or years between two dates.&lt;/p&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://forums.webmasterhub.net/viewtopic.php?f=23&amp;amp;t=1831&quot; rel=&quot;noreferrer&quot;&gt;PHP Date Time  7 Methods to Calculate the Difference between 2 dates&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For php version &amp;gt;=5.3 : Create two date objects and then use &lt;code&gt;date_diff()&lt;/code&gt; function. It will return php &lt;a href=&quot;http://php.net/manual/en/class.dateinterval.php&quot; rel=&quot;noreferrer&quot;&gt;DateInterval&lt;/a&gt; object. &lt;a href=&quot;http://php.net/manual/en/function.date-diff.php&quot; rel=&quot;noreferrer&quot;&gt;see documentation&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2007-03-24&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2009-06-26&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;=&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%R%a days&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;An easy function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;time_difference&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$time_1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$time_2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$limit&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$val_1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$val_2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$time_2&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$val_1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val_2&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;year&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;y,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;month&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;m,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;day&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;d,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;hour&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;h,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;minute&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;i,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;s\n    );\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$output&lt;/span&gt; AS &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            &lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt; .= &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot;s &quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; == &lt;span class=&quot;hljs-variable&quot;&gt;$limit&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trim&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trim&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$return&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use like&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;echo time_difference ($time_1, $time_2, &quot;day&quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Will return like &lt;code&gt;2 years 8 months 2 days&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can also use following code to return date diff by round fractions up\n    $date1 = $duedate; // assign due date\n    echo $date2 = date(&quot;Y-m-d&quot;); // current date \n    $ts1 = strtotime($date1); \n    $ts2 = strtotime($date2);\n    $seconds_diff = $ts1 - $ts2;\n    echo $datediff = ceil(($seconds_diff/3600)/24); // return in days&lt;/p&gt;\n\n&lt;p&gt;If you use floor method of php instead of ceil it will return you the round fraction down. Please check the difference here, some times if your staging servers timezone is different then the live site time zone in that case you may get different results so change the conditions accordingly.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2007-03-24&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2009-06-26&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;difference : &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;y . &lt;span class=&quot;hljs-string&quot;&gt;&quot; years, &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;m.&lt;span class=&quot;hljs-string&quot;&gt;&quot; months, &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$interval&lt;/span&gt;-&amp;gt;d.&lt;span class=&quot;hljs-string&quot;&gt;&quot; days &quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had the same problem with PHP 5.2 and solved it with MySQL. Might not be exactly what you&apos;re looking for, but this will do the trick and return the number of days:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$datediff_q&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$dbh&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT DATEDIFF(:date2, :date1)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$datediff_q&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bindValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:date1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2007-03-24&apos;&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_STR&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$datediff_q&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bindValue&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:date2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2009-06-26&apos;&lt;/span&gt;, PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;PARAM_STR&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$datediff&lt;/span&gt; = (&lt;span class=&quot;hljs-variable&quot;&gt;$datediff_q&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;()) ? &lt;span class=&quot;hljs-variable&quot;&gt;$datediff_q&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fetchColumn&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More info here &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_datediff&quot; rel=&quot;nofollow&quot;&gt;http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_datediff&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Since everyone is posting code samples, here is another version.&lt;/p&gt;\n\n&lt;p&gt;I wanted a function to display differences from seconds to years (just one unit). For periods over 1 day, I wanted it to rollover at midnight (10am Monday seen from 9am Wednesday is 2 days ago, not 1). And for periods over a month, I wanted the rollover to be on the same day of the month (including for 30/31 day months &amp;amp; leap years).&lt;/p&gt;\n\n&lt;p&gt;This is what I came up with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Returns how long ago something happened in the past, showing it\n * as n seconds / minutes / hours / days / weeks / months / years ago.\n *\n * For periods over a day, it rolls over at midnight (so doesn&apos;t depend\n * on current time of day), and it correctly accounts for month-lengths\n * and leap-years (months and years rollover on current day of month).\n *\n * $param string $timestamp in DateTime format\n * $return string description of interval\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ago&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$timestamp&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$timestamp&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// for anything over 1 day, make it rollover on midnight&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$today&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tomorrow&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// ie end of today&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$today&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;y &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;y.&lt;span class=&quot;hljs-string&quot;&gt;&apos; year&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;y&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;m &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;m.&lt;span class=&quot;hljs-string&quot;&gt;&apos; month&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;m&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diffW&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d / &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diffW&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diffW&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos; week&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diffW&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d.&lt;span class=&quot;hljs-string&quot;&gt;&apos; day&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// for anything less than 1 day, base it off &apos;now&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$then&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$now&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;yesterday&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;h &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;h.&lt;span class=&quot;hljs-string&quot;&gt;&apos; hour&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;h&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;i &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;i.&lt;span class=&quot;hljs-string&quot;&gt;&apos; minute&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;i&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;s.&lt;span class=&quot;hljs-string&quot;&gt;&apos; second&apos;&lt;/span&gt;.(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;s==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; ago&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Some time ago I wrote a &lt;code&gt;format_date&lt;/code&gt; function as this gives &lt;strong&gt;many options on how you want your date&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;format_date&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;j&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;H&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;i&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;));\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;));\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$type&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D, F j, Y&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;M&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;M&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y h:i A&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;m&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$seperator&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;M&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;j&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;:  &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;n&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mktime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$hour&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sec&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$month&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$day&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$year&lt;/span&gt;)); &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;: \n                     &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;abs&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y-m-d h:i:s&quot;&lt;/span&gt;))); \n                     &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; / (&lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n                     &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;) / (&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n                     &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;365&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;)/ (&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;));\n                     &lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; years, &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; months, &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot;days&quot;&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date&lt;/span&gt;);\n}    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Very simple:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2007-03-24&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Start date: &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y-m-d&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_create&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2009-06-26&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;End date: &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Y-m-d&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date_diff&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$date1&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$date2&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Difference between start date and end date: &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$diff&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%y years, %m months and %d days&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please checkout the following link for details:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/function.date-diff.php&quot; rel=&quot;nofollow&quot;&gt;PHP: date_diff - Manual&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that it&apos;s for PHP  5.3.0 or greater.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m using the following function which I wrote, when PHP 5.3 (respectively date_diff()) is not available:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;        &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dateDifference&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt;&lt;/span&gt;)\n        &lt;/span&gt;{\n            &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt;) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-variable&quot;&gt;$endMonth&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$startMonth&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;m&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Calculate months&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$endMonth&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$startMonth&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)  {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; += &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;;\n                &lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;--;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;// Calculate the days&lt;/span&gt;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$measure&lt;/span&gt; = (&lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;month&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;months&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$endDate&lt;/span&gt; - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$measure&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$startDate&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;date&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;);   \n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$years&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$months&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$days&lt;/span&gt;);\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    "],"253":["\n&lt;p&gt;The stack is the memory set aside as scratch space for a thread of execution.  When a function is called, a block is reserved on the top of the stack for local variables and some bookkeeping data.  When that function returns, the block becomes unused and can be used the next time a function is called.  The stack is always reserved in a LIFO (last in first out) order; the most recently reserved block is always the next block to be freed.  This makes it really simple to keep track of the stack; freeing a block from the stack is nothing more than adjusting one pointer.&lt;/p&gt;\n&lt;p&gt;The heap is memory set aside for dynamic allocation.  Unlike the stack, there&apos;s no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time.  This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.&lt;/p&gt;\n&lt;p&gt;Each thread gets a stack, while there&apos;s typically only one heap for the application (although it isn&apos;t uncommon to have multiple heaps for different types of allocation).&lt;/p&gt;\n&lt;p&gt;To answer your questions directly:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;To what extent are they controlled by the OS or language runtime?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The OS allocates the stack for each system-level thread when the thread is created.  Typically the OS is called by the language runtime to allocate the heap for the application.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;What is their scope?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The stack is attached to a thread, so when the thread exits the stack is reclaimed.  The heap is typically allocated at application startup by the runtime, and is reclaimed when the application (technically process) exits.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;What determines the size of each of them?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The size of the stack is set when a thread is created.  The size of the heap is set on application startup, but can grow as space is needed (the allocator requests more memory from the operating system).&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;What makes one faster?&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The stack is faster because the access pattern makes it trivial to allocate and deallocate memory from it (a pointer/integer is simply incremented or decremented), while the heap has much more complex bookkeeping involved in an allocation or deallocation.  Also, each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor&apos;s cache, making it very fast. Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be - typically - synchronized with &quot;all&quot; other heap accesses in the program.&lt;/p&gt;\n&lt;p&gt;A clear demonstration:\n&lt;img src=&quot;https://i.stack.imgur.com/i6k0Z.png&quot; alt=&quot;&quot;&gt;\n&lt;br&gt;&lt;sub&gt;Image source: &lt;a href=&quot;http://vikashazrati.wordpress.com/2007/10/01/quicktip-java-basics-stack-and-heap/&quot; rel=&quot;noreferrer&quot;&gt;vikashazrati.wordpress.com&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Stack:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Stored in computer RAM just like the heap.&lt;/li&gt;\n&lt;li&gt;Variables created on the stack will go out of scope and are automatically deallocated.&lt;/li&gt;\n&lt;li&gt;Much faster to allocate in comparison to variables on the heap.&lt;/li&gt;\n&lt;li&gt;Implemented with an actual stack data structure.&lt;/li&gt;\n&lt;li&gt;Stores local data, return addresses, used for parameter passing.&lt;/li&gt;\n&lt;li&gt;Can have a stack overflow when too much of the stack is used (mostly from infinite or too deep recursion, very large allocations).&lt;/li&gt;\n&lt;li&gt;Data created on the stack can be used without pointers.&lt;/li&gt;\n&lt;li&gt;You would use the stack if you know exactly how much data you need to allocate before compile time and it is not too big.&lt;/li&gt;\n&lt;li&gt;Usually has a maximum size already determined when your program starts.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Stored in computer RAM just like the stack.&lt;/li&gt;\n&lt;li&gt;In C++, variables on the heap must be destroyed manually and never fall out of scope. The data is freed with &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;delete[]&lt;/code&gt;, or &lt;code&gt;free&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Slower to allocate in comparison to variables on the stack.&lt;/li&gt;\n&lt;li&gt;Used on demand to allocate a block of data for use by the program.&lt;/li&gt;\n&lt;li&gt;Can have fragmentation when there are a lot of allocations and deallocations.&lt;/li&gt;\n&lt;li&gt;In C++ or C, data created on the heap will be pointed to by pointers and allocated with &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;malloc&lt;/code&gt; respectively.&lt;/li&gt;\n&lt;li&gt;Can have allocation failures if too big of a buffer is requested to be allocated.&lt;/li&gt;\n&lt;li&gt;You would use the heap if you don&apos;t know exactly how much data you will need at run time or if you need to allocate a lot of data.&lt;/li&gt;\n&lt;li&gt;Responsible for memory leaks.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pBuffer; &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;--nothing allocated yet (excluding the pointer itself, which is allocated here on the stack).&lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; b = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Allocated on the stack.&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b)\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Create 500 bytes on the stack&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Create 500 bytes on the heap&lt;/span&gt;\n    pBuffer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;];\n\n   }&lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;-- buffer is deallocated here, pBuffer is not&lt;/span&gt;\n}&lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;--- oops there&apos;s a memory leak, I should have called delete[] pBuffer;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The most important point is that heap and stack are generic terms for ways in which memory can be allocated.  They can be implemented in many different ways, and the terms apply to the basic concepts.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In a stack of items, items sit one on top of the other in the order they were placed there, and you can only remove the top one (without toppling the whole thing over).&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZLzMV.jpg&quot; alt=&quot;Stack like a stack of papers&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;The simplicity of a stack is that you do not need to maintain a table containing a record of each section of allocated memory; the only state information you need is a single pointer to the end of the stack.  To allocate and de-allocate, you just increment and decrement that single pointer.  Note: a stack can sometimes be implemented to start at the top of a section of memory and extend downwards rather than growing upwards.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In a heap, there is no particular order to the way items are placed.  You can reach in and remove items in any order because there is no clear &apos;top&apos; item.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/kINqo.jpg&quot; alt=&quot;Heap like a heap of licorice allsorts&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;Heap allocation requires maintaining a full record of what memory is allocated and what isn&apos;t, as well as some overhead maintenance to reduce fragmentation, find contiguous memory segments big enough to fit the requested size, and so on.  Memory can be deallocated at any time leaving free space.  Sometimes a memory allocator will perform maintenance tasks such as defragmenting memory by moving allocated memory around, or garbage collecting - identifying at runtime when memory is no longer in scope and deallocating it. &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These images should do a fairly good job of describing the two ways of allocating and freeing memory in a stack and a heap.  Yum!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;To what extent are they controlled by the OS or language runtime?&lt;/p&gt;\n\n&lt;p&gt;As mentioned, heap and stack are general terms, and can be implemented in many ways.  Computer programs typically have a stack called a &lt;a href=&quot;http://en.wikipedia.org/wiki/Call_stack&quot; rel=&quot;noreferrer&quot;&gt;call stack&lt;/a&gt; which stores information relevant to the current function such as a pointer to whichever function it was called from, and any local variables.  Because functions call other functions and then return, the stack grows and shrinks to hold information from the functions further down the call stack.  A program doesn&apos;t really have runtime control over it; it&apos;s determined by the programming language, OS and even the system architecture.&lt;/p&gt;\n\n&lt;p&gt;A heap is a general term used for any memory that is allocated dynamically and randomly; i.e. out of order.  The memory is typically allocated by the OS, with the application calling API functions to do this allocation.  There is a fair bit of overhead required in managing dynamically allocated memory, which is usually handled by the runtime code of the programming language or environment used.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What is their scope?&lt;/p&gt;\n\n&lt;p&gt;The call stack is such a low level concept that it doesn&apos;t relate to &apos;scope&apos; in the sense of programming.  If you disassemble some code you&apos;ll see relative pointer style references to portions of the stack, but as far as a higher level language is concerned, the language imposes its own rules of scope.  One important aspect of a stack, however, is that once a function returns, anything local to that function is immediately freed from the stack.  That works the way you&apos;d expect it to work given how your programming languages work.  In a heap, it&apos;s also difficult to define.  The scope is whatever is exposed by the OS, but your programming language probably adds its rules about what a &quot;scope&quot; is in your application.  The processor architecture and the OS use virtual addressing, which the processor translates to physical addresses and there are page faults, etc.  They keep track of what pages belong to which applications.  You never really need to worry about this, though, because you just use whatever method your programming language uses to allocate and free memory, and check for errors (if the allocation/freeing fails for any reason).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What determines the size of each of them?&lt;/p&gt;\n\n&lt;p&gt;Again, it depends on the language, compiler, operating system and architecture.  A stack is usually pre-allocated, because by definition it must be contiguous memory.  The language compiler or the OS determine its size.  You don&apos;t store huge chunks of data on the stack, so it&apos;ll be big enough that it should never be fully used, except in cases of unwanted endless recursion (hence, &quot;stack overflow&quot;) or other unusual programming decisions.&lt;/p&gt;\n\n&lt;p&gt;A heap is a general term for anything that can be dynamically allocated.  Depending on which way you look at it, it is constantly changing size.  In modern processors and operating systems the exact way it works is very abstracted anyway, so you don&apos;t normally need to worry much about how it works deep down, except that (in languages where it lets you) you mustn&apos;t use memory that you haven&apos;t allocated yet or memory that you have freed.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What makes one faster?&lt;/p&gt;\n\n&lt;p&gt;The stack is faster because all free memory is always contiguous.  No list needs to be maintained of all the segments of free memory, just a single pointer to the current top of the stack.  Compilers usually store this pointer in a special, fast &lt;a href=&quot;http://en.wikipedia.org/wiki/Stack_register&quot; rel=&quot;noreferrer&quot;&gt;register&lt;/a&gt; for this purpose.  What&apos;s more, subsequent operations on a stack are usually concentrated within very nearby areas of memory, which at a very low level is good for optimization by the processor on-die caches.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;(I have moved this answer from another question that was more or less a dupe of this one.)&lt;/p&gt;\n&lt;p&gt;The answer to your question is implementation specific and may vary across compilers and processor architectures. However, here is a simplified explanation.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Both the stack and the heap are memory areas allocated from the underlying operating system (often virtual memory that is mapped to physical memory on demand).&lt;/li&gt;\n&lt;li&gt;In a multi-threaded environment each thread will have its own completely independent stack but they will share the heap. Concurrent access has to be controlled on the heap and is not possible on the stack.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;The heap&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;The heap contains a linked list of used and free blocks. New allocations on the heap (by &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;malloc&lt;/code&gt;) are satisfied by creating a suitable block from one of the free blocks. This requires updating the list of blocks on the heap. This &lt;em&gt;meta information&lt;/em&gt; about the blocks on the heap is also stored on the heap often in a small area just in front of every block.&lt;/li&gt;\n&lt;li&gt;As the heap grows new blocks are often allocated from lower addresses towards higher addresses. Thus you can think of the heap as a &lt;em&gt;heap&lt;/em&gt; of memory blocks that grows in size as memory is allocated. If the heap is too small for an allocation the size can often be increased by acquiring more memory from the underlying operating system.&lt;/li&gt;\n&lt;li&gt;Allocating and deallocating many small blocks may leave the heap in a state where there are a lot of small free blocks interspersed between the used blocks. A request to allocate a large block may fail because none of the free blocks are large enough to satisfy the allocation request even though the combined size of the free blocks may be large enough. This is called &lt;em&gt;heap fragmentation&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;When a used block that is adjacent to a free block is deallocated the new free block may be merged with the adjacent free block to create a larger free block effectively reducing the fragmentation of the heap.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/0Obi0.png&quot; alt=&quot;The heap&quot;&gt;&lt;/p&gt;\n&lt;h2&gt;The stack&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;The stack often works in close tandem with a special register on the CPU named the &lt;em&gt;stack pointer&lt;/em&gt;. Initially the stack pointer points to the top of the stack (the highest address on the stack).&lt;/li&gt;\n&lt;li&gt;The CPU has special instructions for &lt;em&gt;pushing&lt;/em&gt; values onto the stack and &lt;em&gt;popping&lt;/em&gt; them off the stack. Each &lt;em&gt;push&lt;/em&gt; stores the value at the current location of the stack pointer and decreases the stack pointer. A &lt;em&gt;pop&lt;/em&gt; retrieves the value pointed to by the stack pointer and then increases the stack pointer (don&apos;t be confused by the fact that &lt;em&gt;adding&lt;/em&gt; a value to the stack &lt;em&gt;decreases&lt;/em&gt; the stack pointer and &lt;em&gt;removing&lt;/em&gt; a value &lt;em&gt;increases&lt;/em&gt; it. Remember that the stack grows to the bottom). The values stored and retrieved are the values of the CPU registers.&lt;/li&gt;\n&lt;li&gt;If a function has parameters, these are pushed onto the stack before the call to the function. The code in the function is then able to navigate up the stack from the current stack pointer to locate these values.&lt;/li&gt;\n&lt;li&gt;When a function is called the CPU uses special instructions that push the current &lt;em&gt;instruction pointer&lt;/em&gt; onto the stack, i.e. the address of the code executing on the stack. The CPU then jumps to the function by setting the instruction pointer to the address of the function called. Later, when the function returns, the old instruction pointer is popped off the stack and execution resumes at the code just after the call to the function.&lt;/li&gt;\n&lt;li&gt;When a function is entered, the stack pointer is decreased to allocate more space on the stack for local (automatic) variables. If the function has one local 32 bit variable four bytes are set aside on the stack. When the function returns, the stack pointer is moved back to free the allocated area.&lt;/li&gt;\n&lt;li&gt;Nesting function calls work like a charm. Each new call will allocate function parameters, the return address and space for local variables and these &lt;em&gt;activation records&lt;/em&gt; can be stacked for nested calls and will unwind in the correct way when the functions return.&lt;/li&gt;\n&lt;li&gt;As the stack is a limited block of memory, you can cause a &lt;em&gt;stack overflow&lt;/em&gt; by calling too many nested functions and/or allocating too much space for local variables. Often the memory area used for the stack is set up in such a way that writing below the bottom (the lowest address) of the stack will trigger a trap or exception in the CPU. This exceptional condition can then be caught by the runtime and converted into some kind of stack overflow exception.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/9UshP.png&quot; alt=&quot;The stack&quot;&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Can a function be allocated on the heap instead of a stack?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;No, activation records for functions (i.e. local or automatic variables) are allocated on the stack that is used not only to store these variables, but also to keep track of nested function calls.&lt;/p&gt;\n&lt;p&gt;How the heap is managed is really up to the runtime environment. C uses &lt;code&gt;malloc&lt;/code&gt; and C++ uses &lt;code&gt;new&lt;/code&gt;, but many other languages have garbage collection.&lt;/p&gt;\n&lt;p&gt;However, the stack is a more low-level feature closely tied to the processor architecture. Growing the heap when there is not enough space isn&apos;t too hard since it can be implemented in the library call that handles the heap. However, growing the stack is often impossible as the stack overflow only is discovered when it is too late; and shutting down the thread of execution is the only viable option.&lt;/p&gt;\n    ","\n&lt;p&gt;In the following C# code&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Method1&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    class1 cls1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; class1();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s how the memory is managed&lt;/p&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/NS0k7.jpg&quot; alt=&quot;Picture of variables on the stack&quot;&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;Local Variables&lt;/code&gt; that only need to last as long as the function invocation go in the stack. The heap is used for variables whose lifetime we don&apos;t really know up front but we expect them to last a while. In most languages it&apos;s critical that we know at compile time how large a variable is if we want to store it on the stack.&lt;/p&gt;\n&lt;p&gt;Objects (which vary in size as we update them) go on the heap because we don&apos;t know at creation time how long they are going to last. In many languages the heap is garbage collected to find objects (such as the cls1 object) that no longer have any references.&lt;/p&gt;\n&lt;p&gt;In Java, most objects go directly into the heap. In languages like C / C++, structs and classes can often remain on the stack when you&apos;re not dealing with pointers.&lt;/p&gt;\n&lt;p&gt;More information can be found here:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20200216082556/http://timmurphy.org/2010/08/11/the-difference-between-stack-and-heap-memory-allocation/&quot; rel=&quot;nofollow noreferrer&quot;&gt;The difference between stack and heap memory allocation «  timmurphy.org&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;and here:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://root.cern.ch/root/htmldoc/guides/users-guide/ALittleC++.html#creating-objects-on-the-stack-and-heap&quot; rel=&quot;nofollow noreferrer&quot;&gt;Creating Objects on the Stack and Heap&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This article is the source of picture above: &lt;a href=&quot;https://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types#Stack%20and%20Heap&quot; rel=&quot;nofollow noreferrer&quot;&gt;Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing - CodeProject&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;but be aware it may contain some inaccuracies.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;The Stack&lt;/strong&gt;\nWhen you call a function the arguments to that function plus some other overhead is put on the stack. Some info (such as where to go on return) is also stored there.\nWhen you declare a variable inside your function, that variable is also allocated on the stack. &lt;/p&gt;\n\n&lt;p&gt;Deallocating the stack is pretty simple because you always deallocate in the reverse order in which you allocate. Stack stuff is added as you enter functions, the corresponding data is removed as you exit them. This means that you tend to stay within a small region of the stack unless you call lots of functions that call lots of other functions (or create a recursive solution).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The Heap&lt;/strong&gt;\nThe heap is a generic name for where you put the data that you create on the fly. If you don&apos;t know how many spaceships your program is going to create, you are likely to use the new (or malloc or equivalent) operator to create each spaceship. This allocation is going to stick around for a while, so it is likely we will free things in a different order than we created them. &lt;/p&gt;\n\n&lt;p&gt;Thus, the heap is far more complex, because there end up being regions of memory that are unused interleaved with chunks that are - memory gets fragmented. Finding free memory of the size you need is a difficult problem. This is why the heap should be avoided (though it is still often used).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;\nImplementation of both the stack and heap is usually down to the runtime / OS. Often games and other applications that are performance critical create their own memory solutions that grab a large chunk of memory from the heap and then dish it out internally to avoid relying on the OS for memory. &lt;/p&gt;\n\n&lt;p&gt;This is only practical if your memory usage is quite different from the norm - i.e for games where you load a level in one huge operation and can chuck the whole lot away in another huge operation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Physical location in memory&lt;/strong&gt;\nThis is less relevant than you think because of a technology called &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_memory&quot; rel=&quot;noreferrer&quot;&gt;Virtual Memory&lt;/a&gt; which makes your program think that you have access to a certain address where the physical data is somewhere else (even on the hard disc!). The addresses you get for the stack are in increasing order as your call tree gets deeper. The addresses for the heap are un-predictable (i.e implimentation specific) and frankly not important.&lt;/p&gt;\n    ","\n&lt;p&gt;Other answers just avoid explaining what static allocation means. So I will explain the three main forms of allocation and how they usually relate to the heap, stack, and data segment below. I also will show some examples in both C/C++ and Python to help people understand.&lt;/p&gt;\n&lt;p&gt;&quot;Static&quot; (AKA statically allocated) variables are not allocated on the stack. Do not assume so - many people do only because &quot;static&quot; sounds a lot like &quot;stack&quot;. They actually exist in neither the stack nor the heap. They are part of what&apos;s called the &lt;a href=&quot;http://en.wikipedia.org/wiki/Data_segment&quot; rel=&quot;noreferrer&quot;&gt;data segment&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;However, it is generally better to consider &quot;&lt;strong&gt;scope&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;lifetime&lt;/strong&gt;&quot; rather than &quot;stack&quot; and &quot;heap&quot;.&lt;/p&gt;\n&lt;p&gt;Scope refers to what parts of the code can access a variable. Generally we think of &lt;strong&gt;local scope&lt;/strong&gt; (can only be accessed by the current function) versus &lt;strong&gt;global scope&lt;/strong&gt; (can be accessed anywhere) although scope can get much more complex.&lt;/p&gt;\n&lt;p&gt;Lifetime refers to when a variable is allocated and deallocated during program execution. Usually we think of &lt;strong&gt;static allocation&lt;/strong&gt; (variable will persist through the entire duration of the program, making it useful for storing the same information across several function calls) versus &lt;strong&gt;automatic allocation&lt;/strong&gt; (variable only persists during a single call to a function, making it useful for storing information that is only used during your function and can be discarded once you are done) versus &lt;strong&gt;dynamic allocation&lt;/strong&gt; (variables whose duration is defined at runtime, instead of compile time like static or automatic).&lt;/p&gt;\n&lt;p&gt;Although most compilers and interpreters implement this behavior similarly in terms of using stacks, heaps, etc, a compiler may sometimes break these conventions if it wants as long as behavior is correct. For instance, due to optimization a local variable may only exist in a register or be removed entirely, even though most local variables exist in the stack. As has been pointed out in a few comments, you are free to implement a compiler that doesn&apos;t even use a stack or a heap, but instead some other storage mechanisms (rarely done, since stacks and heaps are great for this).&lt;/p&gt;\n&lt;p&gt;I will provide some simple annotated C code to illustrate all of this. The best way to learn is to run a program under a debugger and watch the behavior. If you prefer to read python, skip to the end of the answer :)&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Statically allocated in the data segment when the program/DLL is first loaded&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when the program/DLL exits&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed from anywhere in the code&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someGlobalVariable;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Statically allocated in the data segment when the program is first loaded&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when the program/DLL exits&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed from anywhere in this particular code file&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someStaticVariable;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;someArgument&quot; is allocated on the stack each time MyFunction is called&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &quot;someArgument&quot; is deallocated when MyFunction returns&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed only within MyFunction()&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someArgument)&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Statically allocated in the data segment when the program is first loaded&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when the program/DLL exits&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed only within MyFunction()&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someLocalStaticVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Allocated on the stack each time MyFunction is called&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Deallocated when MyFunction returns&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - can be accessed only within MyFunction()&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; someLocalVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A *pointer* is allocated on the stack each time MyFunction is called&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This pointer is deallocated when MyFunction returns&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - the pointer can be accessed only within MyFunction()&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;* someDynamicVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This line causes space for an integer to be allocated in the heap&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// when this line is executed. Note this is not at the beginning of&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the call to MyFunction(), like the automatic variables&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// scope - only code within MyFunction() can access this space&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// *through this particular variable*.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// However, if you pass the address somewhere else, that code&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// can access it too&lt;/span&gt;\n    someDynamicVariable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;;\n\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This line deallocates the space for the integer in the heap.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If we did not write it, the memory would be &quot;leaked&quot;.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note a fundamental difference between the stack and heap&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// the heap must be managed. The stack is managed for us.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; someDynamicVariable;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// In other cases, instead of deallocating this heap space you&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// might store the address somewhere more permanent to use later.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some languages even take care of deallocation for you... but&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// always it needs to be taken care of at runtime by some mechanism.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// When the function returns, someArgument, someLocalVariable&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// and the pointer someDynamicVariable are deallocated.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// The space pointed to by someDynamicVariable was already&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// deallocated prior to returning.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Note that someGlobalVariable, someStaticVariable and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// someLocalStaticVariable continue to exist, and are not&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// deallocated until the program exits.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A particularly poignant example of why it&apos;s important to distinguish between lifetime and scope is that a variable can have local scope but static lifetime - for instance, &quot;someLocalStaticVariable&quot; in the code sample above. Such variables can make our common but informal naming habits very confusing. For instance when we say &quot;&lt;em&gt;local&lt;/em&gt;&quot; we usually mean &quot;&lt;em&gt;locally scoped automatically allocated variable&lt;/em&gt;&quot; and when we say global we usually mean &quot;&lt;em&gt;globally scoped statically allocated variable&lt;/em&gt;&quot;. Unfortunately when it comes to things like &quot;&lt;em&gt;file scoped statically allocated variables&lt;/em&gt;&quot; many people just say... &quot;&lt;em&gt;huh???&lt;/em&gt;&quot;.&lt;/p&gt;\n&lt;p&gt;Some of the syntax choices in C/C++ exacerbate this problem - for instance many people think global variables are not &quot;static&quot; because of the syntax shown below.&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; var1; &lt;span class=&quot;hljs-comment&quot;&gt;// Has global scope and static allocation&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; var2; &lt;span class=&quot;hljs-comment&quot;&gt;// Has file scope and static allocation&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that putting the keyword &quot;static&quot; in the declaration above prevents var2 from having global scope. Nevertheless, the global var1 has static allocation. This is not intuitive! For this reason, I try to never use the word &quot;static&quot; when describing scope, and instead say something like &quot;file&quot; or &quot;file limited&quot; scope. However many people use the phrase &quot;static&quot; or &quot;static scope&quot; to describe a variable that can only be accessed from one code file. In the context of lifetime, &quot;static&quot; &lt;em&gt;always&lt;/em&gt; means the variable is allocated at program start and deallocated when program exits.&lt;/p&gt;\n&lt;p&gt;Some people think of these concepts as C/C++ specific. They are not. For instance, the Python sample below illustrates all three types of allocation (there are some subtle differences possible in interpreted languages that I won&apos;t get into here).&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; datetime\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Animal&lt;/span&gt;:\n    _FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Undefined&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# _FavoriteFood is statically allocated&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;PetAnimal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        curTime = datetime.time(datetime.now()) &lt;span class=&quot;hljs-comment&quot;&gt;# curTime is automatically allocatedion&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Thank you for petting me. But it&apos;s &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(curTime) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, you should feed me. My favorite food is &quot;&lt;/span&gt; + self._FavoriteFood)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Cat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Animal&lt;/span&gt;):\n    _FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;tuna&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Note since we override, Cat class has its own statically allocated _FavoriteFood variable, different from Animal&apos;s&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Dog&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Animal&lt;/span&gt;):\n    _FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;steak&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Likewise, the Dog class gets its own static variable. Important to note - this one static variable is shared among all instances of Dog, hence it is not dynamic!&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    whiskers = Cat() &lt;span class=&quot;hljs-comment&quot;&gt;# Dynamically allocated&lt;/span&gt;\n    fido = Dog() &lt;span class=&quot;hljs-comment&quot;&gt;# Dynamically allocated&lt;/span&gt;\n    rinTinTin = Dog() &lt;span class=&quot;hljs-comment&quot;&gt;# Dynamically allocated&lt;/span&gt;\n\n    whiskers.PetAnimal()\n    fido.PetAnimal()\n    rinTinTin.PetAnimal()\n\n    Dog._FavoriteFood = &lt;span class=&quot;hljs-string&quot;&gt;&apos;milkbones&apos;&lt;/span&gt;\n    whiskers.PetAnimal()\n    fido.PetAnimal()\n    rinTinTin.PetAnimal()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Output is:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is tuna&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is steak&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is steak&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is tuna&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.255000, you should feed me. My favorite food is milkbones&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Thank you for petting me. But it&apos;s 13:05:02.256000, you should feed me. My favorite food is milkbones&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Others have answered the broad strokes pretty well, so I&apos;ll throw in a few details.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Stack and heap need not be singular. A common situation in which you have more than one stack is if you have more than one thread in a process.  In this case each thread has its own stack. You can also have more than one heap, for example some DLL configurations can result in different DLLs allocating from different heaps, which is why it&apos;s generally a bad idea to release memory allocated by a different library.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In C you can get the benefit of variable length allocation through the use of &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?alloca&quot; rel=&quot;noreferrer&quot;&gt;alloca&lt;/a&gt;, which allocates on the stack, as opposed to alloc, which allocates on the heap. This memory won&apos;t survive your return statement, but it&apos;s useful for a scratch buffer.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Making a huge temporary buffer on Windows that you don&apos;t use much of is not free. This is because the compiler will generate a stack probe loop that is called every time your function is entered to make sure the stack exists (because Windows uses a single guard page at the end of your stack to detect when it needs to grow the stack. If you access memory more than one page off the end of the stack you will crash). Example:&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; big[&lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;];\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Do something that only uses for first 1K of big 99% of the time.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Others have directly answered your question, but when trying to understand the stack and the heap, I think it is helpful to consider the memory layout of a traditional UNIX process (without threads and &lt;code&gt;mmap()&lt;/code&gt;-based allocators). The &lt;a href=&quot;https://www.memorymanagement.org/glossary/b.html#term-brk&quot; rel=&quot;nofollow noreferrer&quot;&gt;Memory Management Glossary&lt;/a&gt; web page has a diagram of this memory layout.&lt;/p&gt;\n&lt;p&gt;The stack and heap are traditionally located at opposite ends of the process&apos;s virtual address space. The stack grows automatically when accessed, up to a size set by the kernel (which can be adjusted with &lt;code&gt;setrlimit(RLIMIT_STACK, ...)&lt;/code&gt;). The heap grows when the memory allocator invokes the &lt;code&gt;brk()&lt;/code&gt; or &lt;code&gt;sbrk()&lt;/code&gt; system call, mapping more pages of physical memory into the process&apos;s virtual address space.&lt;/p&gt;\n&lt;p&gt;In systems without virtual memory, such as some embedded systems, the same basic layout often applies, except the stack and heap are fixed in size. However, in other embedded systems (such as those based on Microchip PIC microcontrollers), the program stack is a separate block of memory that is not addressable by data movement instructions, and can only be modified or read indirectly through program flow instructions (call, return, etc.). Other architectures, such as Intel Itanium processors, have &lt;a href=&quot;https://devblogs.microsoft.com/oldnewthing/20050421-28/?p=35833&quot; rel=&quot;nofollow noreferrer&quot;&gt;multiple stacks&lt;/a&gt;. In this sense, the stack is an element of the CPU architecture.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;What is a stack?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A stack is a pile of objects, typically one that is neatly arranged.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/GTa97.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/GTa97.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Stacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out manner. &lt;br&gt;\nIn a multi-threaded application, each thread will have its own stack.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;What is a heap?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A heap is an untidy collection of things piled up haphazardly.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/rz43z.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/rz43z.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In computing architectures the heap is an area of dynamically-allocated memory that is managed automatically by the operating system or the memory manager library. &lt;br&gt;\nMemory on the heap is allocated, deallocated, and resized regularly during program execution, and this can lead to a problem called fragmentation. &lt;br&gt;\nFragmentation occurs when memory objects are allocated with small spaces in between that are too small to hold additional memory objects. &lt;br&gt;\nThe net result is a percentage of the heap space that is not usable for further memory allocations.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Both together&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;In a multi-threaded application, each thread will have its own stack. But, all the different threads will share the heap. &lt;br&gt;\nBecause the different threads share the heap in a multi-threaded application, this also means that there has to be some coordination between the threads so that they dont try to access and manipulate the same piece(s) of memory in the heap at the same time.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Which is faster  the stack or the heap? And why?&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The stack is much faster than the heap. &lt;br&gt;\nThis is because of the way that memory is allocated on the stack. &lt;br&gt;\nAllocating memory on the stack is as simple as moving the stack pointer up.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;For people new to programming, its probably a good idea to use the stack since its easier. &lt;br&gt;\nBecause the stack is small, you would want to use it when you know exactly how much memory you will need for your data, or if you know the size of your data is very small. &lt;br&gt;\nIts better to use the heap when you know that you will need a lot of memory for your data, or you just are not sure how much memory you will need (like with a dynamic array).&lt;/p&gt;\n&lt;h3&gt;Java Memory Model&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/yZK6t.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/yZK6t.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The stack is the area of memory where local variables (including method parameters) are stored. When it comes to object variables, these are merely references (pointers) to the actual objects on the heap.&lt;br&gt;\nEvery time an object is instantiated, a chunk of heap memory is set aside to hold the data (state) of that object. Since objects can contain other objects, some of this data can in fact hold references to those nested objects.&lt;/p&gt;\n    ","\n&lt;p&gt;The stack is a portion of memory that can be manipulated via several key assembly language instructions, such as &apos;pop&apos; (remove and return a value from the stack) and &apos;push&apos; (push a value to the stack), but also call (call a subroutine - this pushes the address to return to the stack) and return (return from a subroutine - this pops the address off of the stack and jumps to it).  It&apos;s the region of memory below the stack pointer register, which can be set as needed.  The stack is also used for passing arguments to subroutines, and also for preserving the values in registers before calling subroutines.&lt;/p&gt;\n\n&lt;p&gt;The heap is a portion of memory that is given to an application by the operating system, typically through a syscall like malloc.  On modern OSes this memory is a set of pages that only the calling process has access to.&lt;/p&gt;\n\n&lt;p&gt;The size of the stack is determined at runtime, and generally does not grow after the program launches.  In a C program, the stack needs to be large enough to hold every variable declared within each function.  The heap will grow dynamically as needed, but the OS is ultimately making the call (it will often grow the heap by more than the value requested by malloc, so that at least some future mallocs won&apos;t need to go back to the kernel to get more memory.  This behavior is often customizable)&lt;/p&gt;\n\n&lt;p&gt;Because you&apos;ve allocated the stack before launching the program, you never need to malloc before you can use the stack, so that&apos;s a slight advantage there.  In practice, it&apos;s very hard to predict what will be fast and what will be slow in modern operating systems that have virtual memory subsystems, because how the pages are implemented and where they are stored is an implementation detail.  &lt;/p&gt;\n    ","\n&lt;p&gt;I think many other people have given you mostly correct answers on this matter.&lt;/p&gt;\n\n&lt;p&gt;One detail that has been missed, however, is that the &quot;heap&quot; should in fact probably be called the &quot;free store&quot;.  The reason for this distinction is that the original free store was implemented with a data structure known as a &quot;binomial heap.&quot;  For that reason, allocating from early implementations of malloc()/free() was allocation from a heap.  However, in this modern day, most free stores are implemented with very elaborate data structures that are not binomial heaps.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do some interesting things with the stack.  For instance, you have functions like &lt;a href=&quot;http://everything2.com/title/alloca%2528%2529&quot; rel=&quot;noreferrer&quot;&gt;alloca&lt;/a&gt; (assuming you can get past the copious warnings concerning its use), which is a form of malloc that specifically uses the stack, not the heap, for memory.&lt;/p&gt;\n\n&lt;p&gt;That said, stack-based memory errors are some of the worst I&apos;ve experienced.  If you use heap memory, and you overstep the bounds of your allocated block, you have a decent chance of triggering a segment fault.  (Not 100%: your block may be incidentally contiguous with another that you have previously allocated.)  But since variables created on the stack are always contiguous with each other, writing out of bounds can change the value of another variable.  I have learned that whenever I feel that my program has stopped obeying the laws of logic, it is probably buffer overflow.&lt;/p&gt;\n    ","\n&lt;p&gt;Simply, the stack is where local variables get created. Also, every time you call a subroutine the program counter (pointer to the next machine instruction) and any important registers, and sometimes the parameters get pushed on the stack. Then any local variables inside the subroutine are pushed onto the stack (and used from there). When the subroutine finishes, that stuff all gets popped back off the stack. The PC and register data gets and put back where it was as it is popped, so your program can go on its merry way.&lt;/p&gt;\n\n&lt;p&gt;The heap is the area of memory dynamic memory allocations are made out of (explicit &quot;new&quot; or &quot;allocate&quot; calls). It is a special data structure that can keep track of blocks of memory of varying sizes and their allocation status.&lt;/p&gt;\n\n&lt;p&gt;In &quot;classic&quot; systems RAM was laid out such that the stack pointer started out at the bottom of memory, the heap pointer started out at the top, and they grew towards each other. If they overlap, you are out of RAM. That doesn&apos;t work with modern multi-threaded OSes though. Every thread has to have its own stack, and those can get created dynamicly.&lt;/p&gt;\n    ","\n&lt;p&gt;From WikiAnwser.&lt;/p&gt;\n\n&lt;h3&gt;Stack&lt;/h3&gt;\n\n&lt;p&gt;When a function or a method calls another function which in turns calls another function, etc., the execution of all those functions remains suspended until the very last function returns its value.&lt;/p&gt;\n\n&lt;p&gt;This chain of suspended function calls is the stack, because elements in the stack (function calls) depend on each other.&lt;/p&gt;\n\n&lt;p&gt;The stack is important to consider in exception handling and thread executions.&lt;/p&gt;\n\n&lt;h3&gt;Heap&lt;/h3&gt;\n\n&lt;p&gt;The heap is simply the memory used by programs to store variables.\nElement of the heap (variables) have no dependencies with each other and can always be accessed randomly at any time.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Very fast access&lt;/li&gt;\n&lt;li&gt;Don&apos;t have to explicitly de-allocate variables&lt;/li&gt;\n&lt;li&gt;Space is managed efficiently by CPU, memory will not become fragmented&lt;/li&gt;\n&lt;li&gt;Local variables only&lt;/li&gt;\n&lt;li&gt;Limit on stack size (OS-dependent)&lt;/li&gt;\n&lt;li&gt;Variables cannot be resized&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Variables can be accessed globally&lt;/li&gt;\n&lt;li&gt;No limit on memory size&lt;/li&gt;\n&lt;li&gt;(Relatively) slower access&lt;/li&gt;\n&lt;li&gt;No guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed&lt;/li&gt;\n&lt;li&gt;You must manage memory (you&apos;re in charge of allocating and freeing variables)&lt;/li&gt;\n&lt;li&gt;Variables can be resized using realloc()&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h2&gt;In Short&lt;/h2&gt;\n\n&lt;p&gt;A stack is used for static memory allocation and a heap for dynamic memory allocation, both stored in the computer&apos;s RAM.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;In Detail&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;The Stack&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The stack is a &quot;LIFO&quot; (last in, first out) data structure, that is managed and optimized by the CPU quite closely. Every time a function declares a new variable, it is &quot;pushed&quot; onto the stack. Then every time a function exits, all of the variables pushed onto the stack by that function, are freed (that is to say, they are deleted). Once a stack variable is freed, that region of memory becomes available for other stack variables.&lt;/p&gt;\n\n&lt;p&gt;The advantage of using the stack to store variables, is that memory is managed for you. You don&apos;t have to allocate memory by hand, or free it once you don&apos;t need it any more. What&apos;s more, because the CPU organizes stack memory so efficiently, reading from and writing to stack variables is very fast.&lt;/p&gt;\n\n&lt;p&gt;More can be found &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;The Heap&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The heap is a region of your computer&apos;s memory that is not managed automatically for you, and is not as tightly managed by the CPU. It is a more free-floating region of memory (and is larger). To allocate memory on the heap, you must use malloc() or calloc(), which are built-in C functions. Once you have allocated memory on the heap, you are responsible for using free() to deallocate that memory once you don&apos;t need it any more.&lt;/p&gt;\n\n&lt;p&gt;If you fail to do this, your program will have what is known as a memory leak. That is, memory on the heap will still be set aside (and won&apos;t be available to other processes). As we will see in the debugging section, there is a tool called &lt;a href=&quot;http://en.wikipedia.org/wiki/Valgrind&quot; rel=&quot;noreferrer&quot;&gt;Valgrind&lt;/a&gt; that can help you detect memory leaks.&lt;/p&gt;\n\n&lt;p&gt;Unlike the stack, the heap does not have size restrictions on variable size (apart from the obvious physical limitations of your computer). Heap memory is slightly slower to be read from and written to, because one has to use pointers to access memory on the heap. We will talk about pointers shortly.&lt;/p&gt;\n\n&lt;p&gt;Unlike the stack, variables created on the heap are accessible by any function, anywhere in your program. Heap variables are essentially global in scope.&lt;/p&gt;\n\n&lt;p&gt;More can be found &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Variables allocated on the stack are stored directly to the memory and access to this memory is very fast, and its allocation is dealt with when the program is compiled. When a function or a method calls another function which in turns calls another function, etc., the execution of all those functions remains suspended until the very last function returns its value. The stack is always reserved in a LIFO order, the most recently reserved block is always the next block to be freed. This makes it really simple to keep track of the stack, freeing a block from the stack is nothing more than adjusting one pointer.&lt;/p&gt;\n\n&lt;p&gt;Variables allocated on the heap have their memory allocated at run time and accessing this memory is a bit slower, but the heap size is only limited by the size of virtual memory. Elements of the heap have no dependencies with each other and can always be accessed randomly at any time. You can allocate a block at any time and free it at any time. This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/KdBPf.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/KdBPf.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use the stack if you know exactly how much data you need to allocate before compile time, and it is not too big. You can use the heap if you don&apos;t know exactly how much data you will need at runtime or if you need to allocate a lot of data.&lt;/p&gt;\n\n&lt;p&gt;In a multi-threaded situation each thread will have its own completely independent stack, but they will share the heap. The stack is thread specific and the heap is application specific. The stack is important to consider in exception handling and thread executions.&lt;/p&gt;\n\n&lt;p&gt;Each thread gets a stack, while there&apos;s typically only one heap for the application (although it isn&apos;t uncommon to have multiple heaps for different types of allocation).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/J0teH.gif&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/J0teH.gif&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;At run-time, if the application needs more heap, it can allocate memory from free memory and if the stack needs memory, it can allocate memory from free memory allocated memory for the application.&lt;/p&gt;\n\n&lt;p&gt;Even, more detail is given &lt;a href=&quot;http://net-informations.com/faq/net/stack-heap.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Now come to &lt;strong&gt;your question&apos;s answers&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;To what extent are they controlled by the OS or language runtime?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The OS allocates the stack for each system-level thread when the thread is created. Typically the OS is called by the language runtime to allocate the heap for the application.&lt;/p&gt;\n\n&lt;p&gt;More can be found &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap/80113#80113&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;What is their scope?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Already given in top.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;You can use the stack if you know exactly how much data you need to allocate before compile time, and it is not too big. You can use the heap if you don&apos;t know exactly how much data you will need at runtime or if you need to allocate a lot of data.&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;More can be found in &lt;a href=&quot;https://stackoverflow.com/questions/408670/stack-static-and-heap-in-c&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;What determines the size of each of them?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The size of the stack is set by &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_system&quot; rel=&quot;noreferrer&quot;&gt;OS&lt;/a&gt; when a thread is created. The size of the heap is set on application startup, but it can grow as space is needed (the allocator requests more memory from the operating system).&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;What makes one faster?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Stack allocation is much faster since all it really does is move the stack pointer. Using memory pools, you can get comparable performance out of heap allocation, but that comes with a slight added complexity and its own headaches.&lt;/p&gt;\n\n&lt;p&gt;Also, stack vs. heap is not only a performance consideration; it also tells you a lot about the expected lifetime of objects.&lt;/p&gt;\n\n&lt;p&gt;Details can be found from &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/161053/which-is-faster-stack-allocation-or-heap-allocation&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;OK,&lt;/strong&gt; simply and in short words, they mean &lt;strong&gt;ordered&lt;/strong&gt; and &lt;strong&gt;not ordered&lt;/strong&gt;...!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: In stack items, things get on the top of each-other, means gonna be faster and more efficient to be processed!... &lt;/p&gt;\n\n&lt;p&gt;So there is always an index to point the specific item, also processing gonna be faster, there is relationship between the items as well!...&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;: No order, processing gonna be slower and values are messed up together with no specific order or index... there are random and there is no relationship between them... so execution and usage time could be vary...&lt;/p&gt;\n\n&lt;p&gt;I also create the image below to show how they may look like:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/9c2VH.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/9c2VH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;stack&lt;/strong&gt;, &lt;strong&gt;heap&lt;/strong&gt; and &lt;strong&gt;data&lt;/strong&gt; of each process in virtual memory:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg&quot; alt=&quot;stack, heap and static data&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In the 1980s, UNIX propagated like bunnies with big companies rolling their own.\nExxon had one as did dozens of brand names lost to history.\nHow memory was laid out was at the discretion of the many implementors.&lt;/p&gt;\n\n&lt;p&gt;A typical C program was laid out flat in memory with\nan opportunity to increase by changing the brk() value.\nTypically, the HEAP was just below this brk value\nand increasing brk increased the amount of available heap.&lt;/p&gt;\n\n&lt;p&gt;The single STACK was typically an area below HEAP which was a tract of memory\ncontaining nothing of value until the top of the next fixed block of memory.\nThis next block was often CODE which could be overwritten by stack data\nin one of the famous hacks of its era.&lt;/p&gt;\n\n&lt;p&gt;One typical memory block was BSS (a block of zero values)\nwhich was accidentally not zeroed in one manufacturer&apos;s offering.\nAnother was DATA containing initialized values, including strings and numbers.\nA third was CODE containing CRT (C runtime), main, functions, and libraries.&lt;/p&gt;\n\n&lt;p&gt;The advent of virtual memory in UNIX changes many of the constraints.\nThere is no objective reason why these blocks need be contiguous,\nor fixed in size, or ordered a particular way now.\nOf course, before UNIX was Multics which didn&apos;t suffer from these constraints.\nHere is a schematic showing one of the memory layouts of that era.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/eeefv.png&quot; alt=&quot;A typical 1980s style UNIX C program memory layout&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A couple of cents: I think, it will be good to draw memory graphical and more simple:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/nlb7A.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/nlb7A.jpg&quot; alt=&quot;This is my vision of process memory construction with simplification for more easy understanding wht happening&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;\nArrows - show where grow stack and heap, process stack size have limit, defined in OS, thread stack size limits by parameters in thread create API usually. Heap usually limiting by process maximum virtual memory size, for 32 bit 2-4&amp;nbsp;GB for example.&lt;/p&gt;\n\n&lt;p&gt;So simple way: process heap is general for process and all threads inside, using for memory allocation in common case with something like &lt;strong&gt;malloc()&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Stack is quick memory for store in common case function return pointers and variables, processed as parameters in function call, local function variables.&lt;/p&gt;\n    ","\n&lt;p&gt;Since some answers went nitpicking, I&apos;m going to contribute my mite.&lt;/p&gt;\n\n&lt;p&gt;Surprisingly, no one has mentioned that multiple (i.e. not related to the number of running OS-level threads) call stacks are to be found not only in exotic languages (PostScript) or platforms (Intel Itanium), but also in &lt;a href=&quot;http://en.wikipedia.org/wiki/Fiber_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;fibers&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Green_threads&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;green threads&lt;/em&gt;&lt;/a&gt; and some implementations of &lt;a href=&quot;http://en.wikipedia.org/wiki/Coroutine&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;coroutines&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Fibers, green threads and coroutines are in many ways similar, which leads to much confusion.  The difference between fibers and green threads is that the former use cooperative multitasking, while the latter may feature either cooperative or preemptive one (or even both). For the distinction between fibers and coroutines, see &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4024.pdf&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;In any case, the purpose of both fibers, green threads and coroutines is having multiple functions executing concurrently, but &lt;strong&gt;not&lt;/strong&gt; in parallel (see &lt;a href=&quot;https://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference&quot;&gt;this SO question&lt;/a&gt; for the distinction) within a single OS-level thread, transferring control back and forth from one another in an organized fashion.&lt;/p&gt;\n\n&lt;p&gt;When using fibers, green threads or coroutines, you &lt;em&gt;usually&lt;/em&gt; have a separate stack per function. (Technically, not just a stack but a whole context of execution is per function. Most importantly, CPU registers.) For every thread there&apos;re as many stacks as there&apos;re concurrently running functions, and the thread is switching between executing each function according to the logic of your program. When a function runs to its end, its stack is destroyed. So, &lt;strong&gt;the number and lifetimes of stacks&lt;/strong&gt; are dynamic and &lt;strong&gt;are not determined by the number of OS-level threads!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that I said &quot;&lt;em&gt;usually&lt;/em&gt; have a separate stack per function&quot;. There&apos;re both &lt;em&gt;stackful&lt;/em&gt; and &lt;em&gt;stackless&lt;/em&gt; implementations of couroutines. Most notable stackful C++ implementations are &lt;a href=&quot;http://www.boost.org/doc/libs/1_53_0/libs/coroutine/doc/html/index.html&quot; rel=&quot;noreferrer&quot;&gt;Boost.Coroutine&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd492418.aspx&quot; rel=&quot;noreferrer&quot;&gt;Microsoft PPL&lt;/a&gt;&apos;s &lt;code&gt;async/await&lt;/code&gt;. (However, C++&apos;s &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4134.pdf&quot; rel=&quot;noreferrer&quot;&gt;resumable functions&lt;/a&gt; (a.k.a. &quot;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&quot;), which were proposed to C++17, are likely to use stackless coroutines.)&lt;/p&gt;\n\n&lt;p&gt;Fibers proposal to the C++ standard library is forthcoming. Also, there&apos;re some third-party &lt;a href=&quot;https://stackoverflow.com/questions/1285714/lightweight-portable-c-fibers-mit-license&quot;&gt;libraries&lt;/a&gt;. Green threads are extremely popular in languages like Python and Ruby.&lt;/p&gt;\n    ","\n&lt;p&gt;I have something to share, although the major points are already covered.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Very fast access.&lt;/li&gt;\n&lt;li&gt;Stored in RAM.&lt;/li&gt;\n&lt;li&gt;Function calls are loaded here along with the local variables and function parameters passed.&lt;/li&gt;\n&lt;li&gt;Space is freed automatically when program goes out of a scope.&lt;/li&gt;\n&lt;li&gt;Stored in sequential memory.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Slow access comparatively to Stack.&lt;/li&gt;\n&lt;li&gt;Stored in RAM.&lt;/li&gt;\n&lt;li&gt;Dynamically created variables are stored here, which later requires freeing the allocated memory after use.&lt;/li&gt;\n&lt;li&gt;Stored wherever memory allocation is done, accessed by pointer always.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Interesting note:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Should the function calls had been stored in heap, it would had resulted in 2 messy points:  \n\n&lt;ol&gt;\n&lt;li&gt;Due to sequential storage in stack, execution is faster. Storage in heap would have resulted in huge time consumption thus making the whole program execute slower.&lt;/li&gt;\n&lt;li&gt;If functions were stored in heap (messy storage pointed by pointer), there would have been no way to return to the caller address back (which stack gives due to sequential storage in memory).&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Wow! So many answers and I don&apos;t think one of them got it right...&lt;/p&gt;\n\n&lt;p&gt;1) Where and what are they (physically in a real computer&apos;s memory)?&lt;/p&gt;\n\n&lt;p&gt;The stack is memory that begins as the highest memory address allocated to your program image, and it then decrease in value from there. It is reserved for called function parameters and for all temporary variables used in functions.&lt;/p&gt;\n\n&lt;p&gt;There are two heaps: public and private.&lt;/p&gt;\n\n&lt;p&gt;The private heap begins on a 16-byte boundary (for 64-bit programs) or a 8-byte boundary (for 32-bit programs) after the last byte of code in your program, and then increases in value from there. It is also called the default heap.&lt;/p&gt;\n\n&lt;p&gt;If the private heap gets too large it will overlap the stack area, as will the stack overlap the heap if it gets too big. Because the stack starts at a higher address and works its way down to lower address, with proper hacking you can get make the stack so large that it will overrun the private heap area and overlap the code area. The trick then is to overlap enough of the code area that you can hook into the code. It&apos;s a little tricky to do and you risk a program crash, but it&apos;s easy and very effective.&lt;/p&gt;\n\n&lt;p&gt;The public heap resides in it&apos;s own memory space outside of your program image space. It is this memory that will be siphoned off onto the hard disk if memory resources get scarce.&lt;/p&gt;\n\n&lt;p&gt;2) To what extent are they controlled by the OS or language runtime?&lt;/p&gt;\n\n&lt;p&gt;The stack is controlled by the programmer, the private heap is managed by the OS, and the public heap is not controlled by anyone because it is an OS service -- you make requests and either they are granted or denied.&lt;/p&gt;\n\n&lt;p&gt;2b) What is their scope?&lt;/p&gt;\n\n&lt;p&gt;They are all global to the program, but their contents can be private, public, or global.&lt;/p&gt;\n\n&lt;p&gt;2c) What determines the size of each of them?&lt;/p&gt;\n\n&lt;p&gt;The size of the stack and the private heap are determined by your compiler runtime options. The public heap is initialized at runtime using a size parameter.&lt;/p&gt;\n\n&lt;p&gt;2d) What makes one faster?&lt;/p&gt;\n\n&lt;p&gt;They are not designed to be fast, they are designed to be useful. How the programmer utilizes them determines whether they are &quot;fast&quot; or &quot;slow&quot;&lt;/p&gt;\n\n&lt;p&gt;REF:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://norasandler.com/2019/02/18/Write-a-Compiler-10.html&quot; rel=&quot;noreferrer&quot;&gt;https://norasandler.com/2019/02/18/Write-a-Compiler-10.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap&quot; rel=&quot;noreferrer&quot;&gt;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate&quot; rel=&quot;noreferrer&quot;&gt;https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A lot of answers are correct as concepts, but we must note that a stack is needed by the hardware (i.e. microprocessor) to allow calling subroutines (CALL in assembly language..). (OOP guys will call it &lt;em&gt;methods&lt;/em&gt;)&lt;/p&gt;\n\n&lt;p&gt;On the stack you save return addresses and call  push / ret  pop is managed directly in hardware.&lt;/p&gt;\n\n&lt;p&gt;You can use the stack to pass parameters.. even if it is slower than using registers (would a microprocessor guru say or a good 1980s BIOS book...)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Without stack &lt;strong&gt;no&lt;/strong&gt; microprocessor can work. (we can&apos;t imagine a program, even in assembly language, without subroutines/functions)&lt;/li&gt;\n&lt;li&gt;Without the heap it can. (An assembly language program can work without, as the heap is a OS concept, as malloc, that is a OS/Lib call.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Stack usage is faster as:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is hardware, and even push/pop are very efficient.&lt;/li&gt;\n&lt;li&gt;malloc requires entering kernel mode, use lock/semaphore (or other synchronization primitives) executing some code and manage some structures needed to keep track of allocation.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Where and what are they (physically in a real computer&apos;s memory)?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt; &lt;strong&gt;Both are in RAM.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;RAM is like a desk and HDDs/SSDs (permanent storage) are like bookshelves. To read anything, you must have a book open on your desk, and you can only have as many books open as fit on your desk. To get a book, you pull it from your bookshelf and open it on your desk. To return a book, you close the book on your desk and return it to its bookshelf.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Stack and heap are names we give to two ways compilers store different kinds of data in the same place (i.e. in RAM).&lt;/em&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;What is their scope?&lt;br&gt;\nWhat determines the size of each of them?&lt;br&gt;\nWhat makes one faster?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The stack is for static (fixed size) data&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;a. &lt;em&gt;At compile time, the compiler reads the variable types used in your code.&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;i. It allocates a fixed amount of memory for these variables.&lt;br&gt;\nii. This size of this memory cannot grow.&lt;/p&gt;\n&lt;p&gt;b. &lt;em&gt;The memory is contiguous (a single block), so access is&lt;/em&gt; &lt;strong&gt;sometimes&lt;/strong&gt; &lt;em&gt;faster than the heap&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;c. &lt;em&gt;An object placed on the stack that grows in memory during runtime beyond the size of the stack causes a&lt;/em&gt; &lt;strong&gt;stack overflow error&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The heap is for dynamic (changing size) data&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;a. &lt;em&gt;The amount of memory is limited only by the amount of empty space available in RAM&lt;/em&gt;&lt;br&gt;\ni. The amount used can grow or shrink as needed at runtime&lt;/p&gt;\n&lt;p&gt;b. &lt;em&gt;Since items are allocated on the heap by finding empty space wherever it exists in RAM, data is not always in a contiguous section, which&lt;/em&gt; &lt;strong&gt;sometimes&lt;/strong&gt; &lt;em&gt;makes access slower than the stack&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;c. &lt;em&gt;Programmers manually put items on the heap with the &lt;code&gt;new&lt;/code&gt; keyword and MUST manually deallocate this memory when they are finished using it.&lt;/em&gt;&lt;br&gt;\ni. Code that repeatedly allocates new memory without deallocating it when it is no longer needed leads to a &lt;strong&gt;memory leak.&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The stack and heap were not primarily introduced to improve speed; they were introduced to handle memory overflow. The first concern regarding use of the stack vs. the heap should be whether memory overflow will occur. If an object is intended to grow in size to an unknown amount (like a linked list or an object whose members can hold an arbitrary amount of data), place it on the heap. As far as possible, use the C++ standard library (STL) containers &lt;strong&gt;vector&lt;/strong&gt;, &lt;strong&gt;map&lt;/strong&gt;, and &lt;strong&gt;list&lt;/strong&gt; as they are memory and speed efficient and added to make your life easier (you don&apos;t need to worry about memory allocation/deallocation).&lt;/p&gt;\n&lt;p&gt;After getting your code to run, if you find it is running unacceptably slow, then go back and refactor your code and see if it can be programmed more efficiently. It may turn out the problem has nothing to do with the stack or heap directly at all (e.g. use an iterative algorithm instead of a recursive one, look at I/O vs. CPU-bound tasks, perhaps add multithreading or multiprocessing).&lt;/p&gt;\n&lt;p&gt;I say &lt;em&gt;sometimes&lt;/em&gt; slower/faster above because the speed of the program might not have anything to do with items being allocated on the stack or heap.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To what extent are they controlled by the OS or language run-time?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The stack size is determined at compile time by the compiler.&lt;/strong&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The heap size varies during runtime.&lt;/strong&gt; (&lt;em&gt;The heap works with the OS during runtime to allocate memory.&lt;/em&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;ASIDE:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Below is a little more about control and compile-time vs. runtime operations.&lt;/p&gt;\n&lt;p&gt;Each computer has a unique &lt;strong&gt;instruction set architecture (ISA)&lt;/strong&gt;, which are its hardware commands (e.g. &quot;MOVE&quot;, &quot;JUMP&quot;, &quot;ADD&quot;, etc.).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;An OS is nothing more than a resource manager (controls how/when/ and where to use memory, processors, devices, and information).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The ISA of the OS is called the &lt;strong&gt;bare machine&lt;/strong&gt; and the remaining commands are called the &lt;strong&gt;extended machine&lt;/strong&gt;. The &lt;strong&gt;kernel&lt;/strong&gt; is the first layer of the extended machine. It controls things like&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;determining what tasks get to use a processor (the scheduler),&lt;/li&gt;\n&lt;li&gt;how much memory or how many hardware registers to allocate to a task (the dispatcher), and&lt;/li&gt;\n&lt;li&gt;the order in which tasks should be performed (the traffic controller).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When we say &quot;compiler&quot;, we generally mean the compiler, assembler, and linker together&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The compiler turns source code into assembly language and passes it to the assembler,&lt;/li&gt;\n&lt;li&gt;The assembler turns the assembly language into machine code (ISA commands), and passes it to the linker&lt;/li&gt;\n&lt;li&gt;The linker takes all machine code (possibly generated from multiple source files) and combines it into one program.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The machine code gets passed to the kernel when executed, which determines when it should run and take control, but the machine code itself contains ISA commands for requesting files, requesting memory, etc. So the code issues ISA commands, but everything has to pass by the kernel.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The stack is essentially an easy-to-access memory that simply manages its items \n  as a - well - stack. Only &lt;strong&gt;items for which the size is known in advance can go onto the stack&lt;/strong&gt;. This is the case for numbers, strings, booleans.&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;strong&gt;heap is a memory for items of which you cant predetermine the\n  exact size and structure&lt;/strong&gt;. Since objects and arrays can be mutated and\n  change at runtime, they have to go into the heap.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://academind.com/learn/javascript/reference-vs-primitive-values/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Academind&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;CPU stack and heap are physically related to how CPU and registers works with memory, how machine-assembly language works, not high-level languages themselves, even if these languages can decide little things.&lt;/p&gt;\n&lt;p&gt;All modern CPUs work with the &quot;same&quot; microprocessor theory: they are all based on what&apos;s called &quot;registers&quot; and some are for &quot;stack&quot; to gain performance. All CPUs have stack registers since the beginning and they had been always here, way of talking, as I know. Assembly languages are the same since the beginning, despite variations... up to Microsoft and its Intermediate Language (IL) that changed the paradigm to have a OO virtual machine assembly language. So we&apos;ll be able to have some CLI/CIL CPU in the future (one project of MS).&lt;/p&gt;\n&lt;p&gt;CPUs have stack registers to speed up memories access, but they are limited compared to the use of others registers to get full access to all the available memory for the processus. It why we talked about stack and heap allocations.&lt;/p&gt;\n&lt;p&gt;In summary, and in general, the heap is hudge and slow and is for &quot;global&quot; instances and objects content, as the stack is little and fast and for &quot;local&quot; variables and references (hidden pointers to forget to manage them).&lt;/p&gt;\n&lt;p&gt;So when we use the new keyword in a method, the reference (an int) is created in the stack, but the object and all its content (value-types as well as objects) is created in the heap, if I remember. But local elementary value-types and arrays are created in the stack.&lt;/p&gt;\n&lt;p&gt;The difference in memory access is at the cells referencing level: addressing the heap, the overall memory of the process, requires more complexity in terms of handling CPU registers, than the stack which is &quot;more&quot; locally in terms of addressing because the CPU stack register is used as base address, if I remember.&lt;/p&gt;\n&lt;p&gt;It is why when we have very long or infinite recurse calls or loops, we got stack overflow quickly, without freezing the system on modern computers...&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C# Heap(ing) Vs Stack(ing) In .NET&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.guru99.com/stack-vs-heap.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stack vs Heap: Know the Difference &lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33562199/static-class-memory-allocation-where-it-is-stored-c-sharp&quot;&gt;Static class memory allocation where it is stored C#&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap&quot;&gt;What and where are the stack and heap?&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_management&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Memory_management&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_register&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Stack_register&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Assembly language resources:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/assembly_programming/index.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Assembly Programming Tutorial&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Intel® 64 and IA-32 Architectures Software Developer Manuals&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Thank you for a really good discussion but as a real noob I wonder where instructions are kept? In the BEGINNING scientists were deciding between two architectures (von NEUMANN where everything is considered DATA and HARVARD where an area of memory was reserved for instructions and another for data). Ultimately, we went with the von Neumann design and now everything is considered &apos;the same&apos;. This made it hard for me when I was learning assembly \n&lt;a href=&quot;https://www.cs.virginia.edu/~evans/cs216/guides/x86.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.cs.virginia.edu/~evans/cs216/guides/x86.html&lt;/a&gt;\nbecause they talk about registers and stack pointers.  &lt;/p&gt;\n\n&lt;p&gt;Everything above talks about DATA. My guess is that since an instruction is a defined thing with a specific memory footprint, it would go on the stack and so all &apos;those&apos; registers discussed in assembly are on the stack. Of course then came object oriented programming with instructions and data comingled into a structure that was dynamic so now instructions would be kept on the heap as well?&lt;/p&gt;\n    ","\n&lt;p&gt;When a process is created then after loading code and data OS setup heap start just after data ends and stack to top of address space based on architecture&lt;/p&gt;\n&lt;p&gt;When more heap is required OS will allocate dynamically and heap chunk is always virtually contiguous&lt;/p&gt;\n&lt;p&gt;Please see &lt;code&gt;brk()&lt;/code&gt;, &lt;code&gt;sbrk()&lt;/code&gt; and &lt;code&gt;alloca()&lt;/code&gt; system call in linux&lt;/p&gt;\n    "],"254":["\n&lt;p&gt;Because floats and doubles cannot accurately represent the base 10 multiples that we use for money. This issue isn&apos;t just for Java, it&apos;s for any programming language that uses base 2 floating-point types.&lt;/p&gt;\n&lt;p&gt;In base 10, you can write 10.25 as 1025 * 10&lt;sup&gt;-2&lt;/sup&gt; (an integer times a power of 10). &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot; rel=&quot;noreferrer&quot;&gt;IEEE-754 floating-point numbers&lt;/a&gt; are different, but a very simple way to think about them is to multiply by a power of two instead. For instance, you could be looking at 164 * 2&lt;sup&gt;-4&lt;/sup&gt; (an integer times a power of two), which is also equal to 10.25. That&apos;s not how the numbers are represented in memory, but the math implications are the same.&lt;/p&gt;\n&lt;p&gt;Even in base 10, this notation cannot accurately represent most simple fractions. For instance, you can&apos;t represent 1/3: the decimal representation is repeating (0.3333...), so there is no finite integer that you can multiply by a power of 10 to get 1/3. You could settle on a long sequence of 3&apos;s and a small exponent, like 333333333 * 10&lt;sup&gt;-10&lt;/sup&gt;, but it is not accurate: if you multiply that by 3, you won&apos;t get&amp;nbsp;1.&lt;/p&gt;\n&lt;p&gt;However, for the purpose of counting money, at least for countries whose money is valued within an order of magnitude of the US dollar, usually all you need is to be able to store multiples of 10&lt;sup&gt;-2&lt;/sup&gt;, so it doesn&apos;t really matter that 1/3 can&apos;t be represented.&lt;/p&gt;\n&lt;p&gt;The problem with floats and doubles is that the &lt;em&gt;vast majority&lt;/em&gt; of money-like numbers don&apos;t have an exact representation as an integer times a power of 2. In fact, the only multiples of 0.01 between 0 and 1 (which are significant when dealing with money because they&apos;re integer cents) that can be represented exactly as an IEEE-754 binary floating-point number are 0, 0.25, 0.5, 0.75 and 1. All the others are off by a small amount. As an analogy to the 0.333333 example, if you take the floating-point value for 0.01 and you multiply it by&amp;nbsp;10, you won&apos;t get&amp;nbsp;0.1. Instead you will get something like 0.099999999786...&lt;/p&gt;\n&lt;p&gt;Representing money as a &lt;code&gt;double&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, errors will compound and you&apos;ll end up with values that are visibly not accurate. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.&lt;/p&gt;\n&lt;p&gt;A solution that works in just about any language is to use integers instead, and count cents. For instance, 1025 would be $10.25. Several languages also have built-in types to deal with money. Among others, Java  has the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; class, and C# has the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/364x0z75.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; type.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;From Bloch, J., Effective Java, (2nd ed, Item 48. 3rd ed, Item 60):&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; types are\nparticularly ill-suited for monetary\ncalculations because it is impossible\nto represent 0.1 (or any other\nnegative power of ten) as a &lt;code&gt;float&lt;/code&gt; or\n&lt;code&gt;double&lt;/code&gt; exactly.&lt;/p&gt;\n&lt;p&gt;For example, suppose you have $1.03\nand you spend 42c. How much money do\nyou have left?&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;System.out.println(1.03 - .42);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;prints out &lt;code&gt;0.6100000000000001&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The right way to solve this problem is\nto use &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt;\nfor monetary calculations.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Though &lt;code&gt;BigDecimal&lt;/code&gt; has some caveats (please see currently accepted answer).&lt;/p&gt;\n    ","\n&lt;p&gt;This is not a matter of accuracy, nor is it a matter of precision.  It is a matter of meeting the expectations of humans who use base 10 for calculations instead of base 2.  For example, using doubles for financial calculations does not produce answers that are &quot;wrong&quot; in a mathematical sense, but it can produce answers that are not what is expected in a financial sense.&lt;/p&gt;\n\n&lt;p&gt;Even if you round off your results at the last minute before output, you can still occasionally get a result using doubles that does not match expectations.&lt;/p&gt;\n\n&lt;p&gt;Using a calculator, or calculating results by hand, 1.40 * 165 = 231 exactly.  However, internally using doubles, on my compiler / operating system environment, it is stored as a binary number close to 230.99999... so if you truncate the number, you get 230 instead of 231.  You may reason that rounding instead of truncating would have given the desired result of 231.  That is true, but rounding always involves truncation.  Whatever rounding technique you use, there are still boundary conditions like this one that will round down when you expect it to round up.  They are rare enough that they often will not be found through casual testing or observation.  You may have to write some code to search for examples that illustrate outcomes that do not behave as expected.&lt;/p&gt;\n\n&lt;p&gt;Assume you want to round something to the nearest penny.  So you take your final result, multiply by 100, add 0.5, truncate, then divide the result by 100 to get back to pennies.  If the internal number you stored was 3.46499999.... instead of 3.465, you are going to get 3.46 instead 3.47 when you round the number to the nearest penny.  But your base 10 calculations may have indicated that the answer should be 3.465 exactly, which clearly should round up to 3.47, not down to 3.46.  These kinds of things happen occasionally in real life when you use doubles for financial calculations.  It is rare, so it often goes unnoticed as an issue, but it happens.&lt;/p&gt;\n\n&lt;p&gt;If you use base 10 for your internal calculations instead of doubles, the answers are always exactly what is expected by humans, assuming no other bugs in your code.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m troubled by some of these responses.  I think doubles and floats have a place in financial calculations.  Certainly, when adding and subtracting non-fractional monetary amounts there will be no loss of precision when using integer classes or BigDecimal classes.  But when performing more complex operations, you often end up with results that go out several or many decimal places, no matter how you store the numbers.  The issue is how you present the result.&lt;/p&gt;\n\n&lt;p&gt;If your result is on the borderline between being rounded up and rounded down, and that last penny really matters, you should be probably be telling the viewer that the answer is nearly in the middle - by displaying more decimal places.&lt;/p&gt;\n\n&lt;p&gt;The problem with doubles, and more so with floats, is when they are used to combine large numbers and small numbers.  In java,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;System.out.println(1000000.0f + 1.2f - 1000000.0f);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;results in&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1.1875\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ll risk being downvoted, but I think the unsuitability of floating point numbers for currency calculations is overrated. As long as you make sure you do the cent-rounding correctly and have enough significant digits to work with in order to counter the binary-decimal representation mismatch explained by zneak, there will be no problem.&lt;/p&gt;\n\n&lt;p&gt;People calculating with currency in Excel have always used double precision floats (there is no currency type in Excel) and I have yet to see anyone complaining about rounding errors.&lt;/p&gt;\n\n&lt;p&gt;Of course, you have to stay within reason; e.g. a simple webshop would probably never experience any problem with double precision floats, but if you do e.g. accounting or anything else that requires adding a large (unrestricted) amount of numbers, you wouldn&apos;t want to touch floating point numbers with a ten foot pole.&lt;/p&gt;\n    ","\n&lt;p&gt;Floats and doubles are approximate. If you create a BigDecimal and pass a float into the constructor you see what the float actually equals:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;groovy:000&amp;gt; new BigDecimal(1.0F)\n===&amp;gt; 1\ngroovy:000&amp;gt; new BigDecimal(1.01F)\n===&amp;gt; 1.0099999904632568359375\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this probably isn&apos;t how you want to represent $1.01.&lt;/p&gt;\n\n&lt;p&gt;The problem is that the IEEE spec doesn&apos;t have a way to exactly represent all fractions, some of them end up as repeating fractions so you end up with approximation errors. Since accountants like things to come out exactly to the penny, and customers will be annoyed if they pay their bill and after the payment is processed they owe .01 and they get charged a fee or can&apos;t close their account, it&apos;s better to use exact types like decimal (in C#) or java.math.BigDecimal in Java.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s not that the error isn&apos;t controllable if you round: &lt;a href=&quot;http://vanillajava.blogspot.com/2011/08/double-your-money-again.html&quot; rel=&quot;noreferrer&quot;&gt;see this article by Peter Lawrey&lt;/a&gt;. It&apos;s just easier not to have to round in the first place. Most applications that handle money don&apos;t call for a lot of math, the operations consist of adding things or allocating amounts to different buckets. Introducing floating point and rounding just complicates things.&lt;/p&gt;\n    ","\n&lt;p&gt;While it&apos;s true that floating point type can represent only approximatively decimal data, it&apos;s also true that if one rounds numbers to the necessary precision before presenting them, one obtains the correct result. Usually.&lt;/p&gt;\n\n&lt;p&gt;Usually because the double type has a precision less than 16 figures. If you require better precision it&apos;s not a suitable type. Also approximations can accumulate.&lt;/p&gt;\n\n&lt;p&gt;It must be said that even if you use fixed point arithmetic you still have to round numbers, were it not for the fact that BigInteger and BigDecimal give errors if you obtain periodic decimal numbers. So there is an approximation also here.&lt;/p&gt;\n\n&lt;p&gt;For example COBOL, historically used for financial calculations, has a maximum precision of 18 figures. So there is often an implicit rounding.&lt;/p&gt;\n\n&lt;p&gt;Concluding, in my opinion the double is unsuitable mostly for its 16 digit precision, which can be insufficient, not because it is approximate.&lt;/p&gt;\n\n&lt;p&gt;Consider the following output of the subsequent program. It shows that after rounding double give the same result as BigDecimal up to precision 16.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Precision 14\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.000051110111115611\nDouble                        : 56789.012345 / 1111111111 = 0.000051110111115611\n\nPrecision 15\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.0000511101111156110\nDouble                        : 56789.012345 / 1111111111 = 0.0000511101111156110\n\nPrecision 16\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.00005111011111561101\nDouble                        : 56789.012345 / 1111111111 = 0.00005111011111561101\n\nPrecision 17\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.000051110111115611011\nDouble                        : 56789.012345 / 1111111111 = 0.000051110111115611013\n\nPrecision 18\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.0000511101111156110111\nDouble                        : 56789.012345 / 1111111111 = 0.0000511101111156110125\n\nPrecision 19\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.00005111011111561101111\nDouble                        : 56789.012345 / 1111111111 = 0.00005111011111561101252\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class Exercise {\n    public static void main(String[] args) throws IllegalArgumentException,\n            SecurityException, IllegalAccessException,\n            InvocationTargetException, NoSuchMethodException {\n        String amount = &quot;56789.012345&quot;;\n        String quantity = &quot;1111111111&quot;;\n        int [] precisions = new int [] {14, 15, 16, 17, 18, 19};\n        for (int i = 0; i &amp;lt; precisions.length; i++) {\n            int precision = precisions[i];\n            System.out.println(String.format(&quot;Precision %d&quot;, precision));\n            System.out.println(&quot;------------------------------------------------------&quot;);\n            execute(&quot;BigDecimalNoRound&quot;, amount, quantity, precision);\n            execute(&quot;DoubleNoRound&quot;, amount, quantity, precision);\n            execute(&quot;BigDecimal&quot;, amount, quantity, precision);\n            execute(&quot;Double&quot;, amount, quantity, precision);\n            System.out.println();\n        }\n    }\n\n    private static void execute(String test, String amount, String quantity,\n            int precision) throws IllegalArgumentException, SecurityException,\n            IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        Method impl = Exercise.class.getMethod(&quot;divideUsing&quot; + test, String.class,\n                String.class, int.class);\n        String price;\n        try {\n            price = (String) impl.invoke(null, amount, quantity, precision);\n        } catch (InvocationTargetException e) {\n            price = e.getTargetException().getMessage();\n        }\n        System.out.println(String.format(&quot;%-30s: %s / %s = %s&quot;, test, amount,\n                quantity, price));\n    }\n\n    public static String divideUsingDoubleNoRound(String amount,\n            String quantity, int precision) {\n        // acceptance\n        double amount0 = Double.parseDouble(amount);\n        double quantity0 = Double.parseDouble(quantity);\n\n        //calculation\n        double price0 = amount0 / quantity0;\n\n        // presentation\n        String price = Double.toString(price0);\n        return price;\n    }\n\n    public static String divideUsingDouble(String amount, String quantity,\n            int precision) {\n        // acceptance\n        double amount0 = Double.parseDouble(amount);\n        double quantity0 = Double.parseDouble(quantity);\n\n        //calculation\n        double price0 = amount0 / quantity0;\n\n        // presentation\n        MathContext precision0 = new MathContext(precision);\n        String price = new BigDecimal(price0, precision0)\n                .toString();\n        return price;\n    }\n\n    public static String divideUsingBigDecimal(String amount, String quantity,\n            int precision) {\n        // acceptance\n        BigDecimal amount0 = new BigDecimal(amount);\n        BigDecimal quantity0 = new BigDecimal(quantity);\n        MathContext precision0 = new MathContext(precision);\n\n        //calculation\n        BigDecimal price0 = amount0.divide(quantity0, precision0);\n\n        // presentation\n        String price = price0.toString();\n        return price;\n    }\n\n    public static String divideUsingBigDecimalNoRound(String amount, String quantity,\n            int precision) {\n        // acceptance\n        BigDecimal amount0 = new BigDecimal(amount);\n        BigDecimal quantity0 = new BigDecimal(quantity);\n\n        //calculation\n        BigDecimal price0 = amount0.divide(quantity0);\n\n        // presentation\n        String price = price0.toString();\n        return price;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The result of floating point number is not exact, which makes them unsuitable for any financial calculation which requires exact result and not approximation. float and double are designed for engineering and scientific calculation and many times doesnt produce exact result also result of floating point calculation may vary from JVM to JVM. Look at below example of BigDecimal and double primitive which is used to represent money value, its quite clear that floating point calculation may not be exact and one should use BigDecimal for financial calculations.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    // floating point calculation\n    final double amount1 = 2.0;\n    final double amount2 = 1.1;\n    System.out.println(&quot;difference between 2.0 and 1.1 using double is: &quot; + (amount1 - amount2));\n\n    // Use BigDecimal for financial calculation\n    final BigDecimal amount3 = new BigDecimal(&quot;2.0&quot;);\n    final BigDecimal amount4 = new BigDecimal(&quot;1.1&quot;);\n    System.out.println(&quot;difference between 2.0 and 1.1 using BigDecimal is: &quot; + (amount3.subtract(amount4)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;difference between 2.0 and 1.1 using double is: 0.8999999999999999\ndifference between 2.0 and 1.1 using BigDecimal is: 0.9\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As said earlier &quot;Representing money as a double or float will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, youll lose more and more precision as the errors add up. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.&quot;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Finally Java has a standard way to work with Currency And Money!&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;JSR 354: Money and Currency API&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;JSR 354 provides an API for representing, transporting, and performing comprehensive calculations with Money and Currency. You can download it from this link:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=354&quot; rel=&quot;noreferrer&quot;&gt;JSR 354: Money and Currency API Download&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The specification consists of the following things:&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;An API for handling e. g. monetary amounts and currencies&lt;/li&gt;\n&lt;li&gt;APIs to support interchangeable implementations&lt;/li&gt;\n&lt;li&gt;Factories for creating instances of the implementation classes&lt;/li&gt;\n&lt;li&gt;Functionality for calculations, conversion and formatting of monetary            amounts&lt;/li&gt;\n&lt;li&gt;Java API for working with Money and Currencies, which is planned to be included in Java 9.&lt;/li&gt;\n&lt;li&gt;All specification classes and interfaces are located in the javax.money.* package.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Sample Examples of JSR 354: Money and Currency API:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;An example of creating a MonetaryAmount and printing it to the console looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MonetaryAmountFactory&amp;lt;?&amp;gt; amountFactory = Monetary.getDefaultAmountFactory();\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; amountFactory.setCurrency(Monetary.getCurrency(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;)).setNumber(&lt;span class=&quot;hljs-number&quot;&gt;12345.67&lt;/span&gt;).create();\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmountFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryFormats.getAmountFormat(Locale.getDefault());\nSystem.out.println(format.format(monetaryAmount));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When using the reference implementation API, the necessary code is much simpler:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12345.67&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmountFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryFormats.getAmountFormat(Locale.getDefault());\nSystem.out.println(format.format(monetaryAmount));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The API also supports calculations with MonetaryAmounts:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12345.67&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;otherMonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; monetaryAmount.divide(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;CurrencyUnit and MonetaryAmount&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// getting CurrencyUnits by locale&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;yen&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryCurrencies.getCurrency(Locale.JAPAN);\n&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;canadianDollar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryCurrencies.getCurrency(Locale.CANADA);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;MonetaryAmount has various methods that allow accessing the assigned currency, the numeric amount, its precision and more:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;monetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;123.45&lt;/span&gt;, euro);\n&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; monetaryAmount.getCurrency();\n&lt;span class=&quot;hljs-type&quot;&gt;NumberValue&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;numberValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; monetaryAmount.getNumber();\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.intValue(); &lt;span class=&quot;hljs-comment&quot;&gt;// 123&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;doubleValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.doubleValue(); &lt;span class=&quot;hljs-comment&quot;&gt;// 123.45&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fractionDenominator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.getAmountFractionDenominator(); &lt;span class=&quot;hljs-comment&quot;&gt;// 100&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fractionNumerator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.getAmountFractionNumerator(); &lt;span class=&quot;hljs-comment&quot;&gt;// 45&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;precision&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue.getPrecision(); &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// NumberValue extends java.lang.Number.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// So we assign numberValue to a variable of type Number&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; numberValue;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;MonetaryAmounts can be rounded using a rounding operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;CurrencyUnit&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;usd&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryCurrencies.getCurrency(&lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12.34567&lt;/span&gt;, usd);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryOperator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;roundingOperator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; MonetaryRoundings.getRounding(usd);\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;roundedDollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dollars.with(roundingOperator); &lt;span class=&quot;hljs-comment&quot;&gt;// USD 12.35&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When working with collections of MonetaryAmounts, some nice utility methods for filtering, sorting and grouping are available.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;MonetaryAmount&amp;gt; amounts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EUR&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;13.37&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;JPY&quot;&lt;/span&gt;));\namounts.add(Money.of(&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Custom MonetaryAmount operations&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// A monetary operator that returns 10% of the input MonetaryAmount&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Implemented using Java 8 Lambdas&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryOperator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tenPercentOperator&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (MonetaryAmount amount) -&amp;gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;baseAmount&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; amount.getNumber().numberValue(BigDecimal.class);\n    &lt;span class=&quot;hljs-type&quot;&gt;BigDecimal&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tenPercent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; baseAmount.multiply(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BigDecimal&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0.1&quot;&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Money.of(tenPercent, amount.getCurrency());\n};\n\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Money.of(&lt;span class=&quot;hljs-number&quot;&gt;12.34567&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;USD&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// apply tenPercentOperator to MonetaryAmount&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;MonetaryAmount&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tenPercentDollars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dollars.with(tenPercentOperator); &lt;span class=&quot;hljs-comment&quot;&gt;// USD 1.234567&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Resources:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://blog.oio.de/2015/12/17/handling-money-and-currencies-in-java-with-jsr-354/&quot; rel=&quot;noreferrer&quot;&gt;Handling money and currencies in Java with JSR 354&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/looking-java-9-money-and&quot; rel=&quot;noreferrer&quot;&gt;Looking into the Java 9 Money and Currency API (JSR 354)&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;See Also: &lt;a href=&quot;http://javamoney.github.io/&quot; rel=&quot;noreferrer&quot;&gt;JSR 354 - Currency and Money&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Most answers have highlighted the reasons why one should not use doubles for money and currency calculations. And I totally agree with them. &lt;/p&gt;\n\n&lt;p&gt;It doesn&apos;t mean though that doubles can never be used for that purpose. &lt;/p&gt;\n\n&lt;p&gt;I have worked on a number of projects with very low gc requirements, and having BigDecimal objects was a big contributor to that overhead. &lt;/p&gt;\n\n&lt;p&gt;It&apos;s the lack of understanding about double representation and lack of experience in handling the accuracy and precision that brings about this wise suggestion.&lt;/p&gt;\n\n&lt;p&gt;You can make it work if you are able to handle the precision and accuracy requirements of your project, which has to be done based on what range of double values is one dealing with.&lt;/p&gt;\n\n&lt;p&gt;You can refer to guava&apos;s FuzzyCompare method to get more idea. The parameter tolerance is the key. \nWe dealt with this problem for a securities trading application and we did an exhaustive research on what tolerances to use for different numerical values in different ranges.&lt;/p&gt;\n\n&lt;p&gt;Also, there might be situations when you&apos;re tempted to use Double wrappers as a map key with hash map being the implementation. It is very risky because Double.equals and hash code for example values &quot;0.5&quot; &amp;amp; &quot;0.6 - 0.1&quot; will cause a big mess.&lt;/p&gt;\n    ","\n&lt;p&gt;If your computation involves various steps, arbitrary precision arithmetic won&apos;t cover you 100%.&lt;/p&gt;\n\n&lt;p&gt;The only reliable way to use a perfect representation of results(Use a custom Fraction data type that will batch division operations to the last step) and only convert to decimal notation in the last step.&lt;/p&gt;\n\n&lt;p&gt;Arbitrary precision won&apos;t help because there always can be numbers that has so many decimal places, or some results such as &lt;code&gt;0.6666666&lt;/code&gt;... No arbitrary representation will cover the last example. So you will have small errors in each step.&lt;/p&gt;\n\n&lt;p&gt;These errors will add-up, may eventually become not easy to ignore anymore. This is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Propagation_of_uncertainty&quot; rel=&quot;nofollow noreferrer&quot;&gt;Error Propagation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Many of the answers posted to this question discuss IEEE and the standards surrounding floating-point arithmetic.&lt;/p&gt;\n\n&lt;p&gt;Coming from a non-computer science background (physics and engineering), I tend to look at problems from a different perspective. For me, the reason why I wouldn&apos;t use a double or float in a mathematical calculation is that I would lose too much information.&lt;/p&gt;\n\n&lt;p&gt;What are the alternatives? There are many (and many more of which I am not aware!).&lt;/p&gt;\n\n&lt;p&gt;BigDecimal in Java is native to the Java language.\nApfloat is another arbitrary-precision library for Java.&lt;/p&gt;\n\n&lt;p&gt;The decimal data type in C# is Microsoft&apos;s .NET alternative for 28 significant figures.&lt;/p&gt;\n\n&lt;p&gt;SciPy (Scientific Python) can probably also handle financial calculations (I haven&apos;t tried, but I suspect so).&lt;/p&gt;\n\n&lt;p&gt;The GNU Multiple Precision Library (GMP) and the GNU MFPR Library are two free and open-source resources for C and C++.&lt;/p&gt;\n\n&lt;p&gt;There are also numerical precision libraries for JavaScript(!) and I think PHP which can handle financial calculations.&lt;/p&gt;\n\n&lt;p&gt;There are also proprietary (particularly, I think, for Fortran) and open-source solutions as well for many computer languages.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m not a computer scientist by training. However, I tend to lean towards either BigDecimal in Java or decimal in C#. I haven&apos;t tried the other solutions I&apos;ve listed, but they are probably very good as well.&lt;/p&gt;\n\n&lt;p&gt;For me, I like BigDecimal because of the methods it supports. C#&apos;s decimal is very nice, but I haven&apos;t had the chance to work with it as much as I&apos;d like. I do scientific calculations of interest to me in my spare time, and BigDecimal seems to work very well because I can set the precision of my floating point numbers. The disadvantage to BigDecimal? It can be slow at times, especially if you&apos;re using the divide method.&lt;/p&gt;\n\n&lt;p&gt;You might, for speed, look into the free and proprietary libraries in C, C++, and Fortran.&lt;/p&gt;\n    ","\n&lt;p&gt;To add on previous answers, there is also the option of implementing &lt;strong&gt;Joda-Money&lt;/strong&gt; in Java, besides BigDecimal, when dealing with the problem addressed in the question. Java module name is org.joda.money.&lt;/p&gt;\n&lt;p&gt;It requires Java SE 8 or later and has no dependencies.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;To be more precise, there is a compile-time dependency but it is not\nrequired.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;\n  &amp;lt;groupId&amp;gt;org.joda&amp;lt;/groupId&amp;gt;\n  &amp;lt;artifactId&amp;gt;joda-money&amp;lt;/artifactId&amp;gt;\n  &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;\n&amp;lt;/dependency&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Examples of using Joda Money:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;  // create a monetary value\n  Money money = Money.parse(&quot;USD 23.87&quot;);\n  \n  // add another amount with safe double conversion\n  CurrencyUnit usd = CurrencyUnit.of(&quot;USD&quot;);\n  money = money.plus(Money.of(usd, 12.43d));\n  \n  // subtracts an amount in dollars\n  money = money.minusMajor(2);\n  \n  // multiplies by 3.5 with rounding\n  money = money.multipliedBy(3.5d, RoundingMode.DOWN);\n  \n  // compare two amounts\n  boolean bigAmount = money.isGreaterThan(dailyWage);\n  \n  // convert to GBP using a supplied rate\n  BigDecimal conversionRate = ...;  // obtained from code outside Joda-Money\n  Money moneyGBP = money.convertedTo(CurrencyUnit.GBP, conversionRate, RoundingMode.HALF_UP);\n  \n  // use a BigMoney for more complex calculations where scale matters\n  BigMoney moneyCalc = money.toBigMoney();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Documentation:\n&lt;a href=&quot;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://joda-money.sourceforge.net/apidocs/org/joda/money/Money.html&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Implementation examples:\n&lt;a href=&quot;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.programcreek.com/java-api-examples/?api=org.joda.money.Money&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Float is binary form of Decimal with different design; they are two different things. There are little errors between two types when converted to each other. Also, float is designed to represent infinite large number of values for scientific. That means it is designed to lost precision to extreme small and extreme large number with that fixed number of bytes. Decimal can&apos;t represent infinite number of values, it bounds to just that number of decimal digits. So Float and Decimal are for different purpose.&lt;/p&gt;\n\n&lt;p&gt;There are some ways to manage the error for currency value:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Use long integer and count in cents instead.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use double precision, keep your significant digits to 15 only so decimal can be exactly simulated. Round before presenting values; Round often when doing calculations.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use a decimal library like Java BigDecimal so you don&apos;t need to use double to simulate decimal.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;p.s. it is interesting to know that most brands of handheld scientific calculators works on decimal instead of float. So no one complaint float conversion errors.&lt;/p&gt;\n    ","\n&lt;p&gt;Take a look at this simple example: it looks like logically correct, but in real world this can return unexpected results if not threated correctly:&lt;/p&gt;\n&lt;p&gt;0.1 x 10 = 1   , so:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;double total = 0.0;\n\n// adds 10 cents, 10 times\nfor (int i = 0; i &amp;lt; 10; i++) {\n    total += 0.1;  // adds 10 cents\n}\n\nLog.d(&quot;result: &quot;, &quot;current total: &quot; + total);\n\n// looks like total equals to 1.0, don&apos;t?\n\n// now, do reverse\nfor (int i = 0; i &amp;lt; 10; i++) {\n    total -= 0.1;  // removes 10 cents\n}\n\n// total should be equals to 0.0, right?\nLog.d(&quot;result: &quot;, &quot;current total: &quot; + total);\nif (total == 0.0) {\n    Log.d(&quot;result: &quot;, &quot;is total equal to ZERO? YES, of course!!&quot;);\n} else {\n    Log.d(&quot;result: &quot;, &quot;is total equal to ZERO? No...&quot;);\n    // so be careful comparing equality in this cases!!!\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;OUTPUT:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; result: current total: 0.9999999999999999\n result: current total: 2.7755575615628914E-17   \n result: is total equal to ZERO? No... \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;American currency can easily be represented with dollar and cent amounts.  Integers are 100% precise, while floating point binary numbers do not exactly match floating point decimals.&lt;/p&gt;\n    "],"255":["\n&lt;p&gt;Modern browsers have &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#browser_compatibility&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array#includes&lt;/code&gt;&lt;/a&gt;, which does &lt;em&gt;exactly&lt;/em&gt; that and &lt;a href=&quot;https://kangax.github.io/compat-table/es2016plus/#test-Array.prototype.includes&quot; rel=&quot;noreferrer&quot;&gt;is widely supported&lt;/a&gt; by everyone except IE:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;joe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;jane&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mary&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jane&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array#indexOf&lt;/code&gt;&lt;/a&gt;, which is less direct, but doesn&apos;t require polyfills for outdated browsers.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;joe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;jane&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;mary&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;jane&apos;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Many frameworks also offer similar methods:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;jQuery: &lt;a href=&quot;https://api.jquery.com/jquery.inarray/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;$.inArray(value, array, [fromIndex])&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Underscore.js: &lt;a href=&quot;https://underscorejs.org/#contains&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;_.contains(array, value)&lt;/code&gt;&lt;/a&gt; (also aliased as &lt;code&gt;_.include&lt;/code&gt; and &lt;code&gt;_.includes&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;Dojo Toolkit: &lt;a href=&quot;https://dojotoolkit.org/reference-guide/1.10/dojo/indexOf.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;dojo.indexOf(array, value, [fromIndex, findLast])&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Prototype: &lt;a href=&quot;http://api.prototypejs.org/language/Array/prototype/indexOf/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;array.indexOf(value)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;MooTools: &lt;a href=&quot;https://mootools.net/core/docs/1.6.0/Types/Array#Array:indexOf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;array.indexOf(value)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;MochiKit: &lt;a href=&quot;http://mochi.github.io/mochikit/doc/html/MochiKit/Base.html#fn-findvalue&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;findValue(array, value)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;MS Ajax: &lt;a href=&quot;https://web.archive.org/web/20140819232945/http://www.asp.net/ajaxlibrary/Reference.Array-indexOf-Function.ashx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;array.indexOf(value)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Ext: &lt;a href=&quot;https://docs.sencha.com/extjs/7.5.1/modern/Ext.Array.html#method-contains&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Ext.Array.contains(array, value)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Lodash: &lt;a href=&quot;https://lodash.com/docs#includes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;_.includes(array, value, [from])&lt;/code&gt;&lt;/a&gt; (is &lt;code&gt;_.contains&lt;/code&gt; prior 4.0.0)&lt;/li&gt;\n&lt;li&gt;Ramda: &lt;a href=&quot;https://ramdajs.com/docs/#includes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;R.includes(value, array)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Notice that some frameworks implement this as a function, while others add the function to the array prototype.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Update from 2019: This answer is from 2008 (11 years old!) and is not relevant for modern JS usage. The promised performance improvement was based on a benchmark done in browsers of that time. It might not be relevant to modern JS execution contexts. If you need an easy solution, look for other answers. If you need the best performance, benchmark for yourself in the relevant execution environments.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;As others have said, the iteration through the array is probably the best way, but it &lt;a href=&quot;https://web.archive.org/web/20170403221045/https://blogs.oracle.com/greimer/entry/best_way_to_code_a&quot; rel=&quot;noreferrer&quot;&gt;has been proven&lt;/a&gt; that a decreasing &lt;code&gt;while&lt;/code&gt; loop is the fastest way to iterate in JavaScript. So you may want to rewrite your code as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a[i] === obj) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n       }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, you may as well extend Array prototype:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;contains&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i--) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i] === obj) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And now you can simply use the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;indexOf&lt;/code&gt;&lt;/a&gt; maybe, but it&apos;s a &quot;JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard.&quot;&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;baz&quot;&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar&quot;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) =&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;AFAICS &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/k4h76zbx%5C%28VS.85%5C%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;Microsoft does &lt;em&gt;not&lt;/em&gt; offer some kind of alternative&lt;/a&gt; to this, but you can add similar functionality to arrays in Internet Explorer (and other browsers that don&apos;t support &lt;code&gt;indexOf&lt;/code&gt;) if you want to, as a &lt;a href=&quot;http://google.com/search?q=indexof%20internet%20explorer&quot; rel=&quot;noreferrer&quot;&gt;quick Google search reveals&lt;/a&gt; (for example, &lt;a href=&quot;http://soledadpenades.com/2007/05/17/arrayindexof-in-internet-explorer/&quot; rel=&quot;noreferrer&quot;&gt;this one&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;The top answers assume primitive types but if you want to find out if an array contains an &lt;strong&gt;object&lt;/strong&gt; with some trait, &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot; rel=&quot;noreferrer&quot;&gt;Array.prototype.some()&lt;/a&gt; is an elegant solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; items = [ {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;} ]\n\nitems.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// returns true&lt;/span&gt;\nitems.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// returns false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The nice thing about it is that the iteration is aborted once the element is found so unnecessary iteration cycles are spared.&lt;/p&gt;\n&lt;p&gt;Also, it fits nicely in an &lt;code&gt;if&lt;/code&gt; statement since it returns a boolean:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (items.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;)) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;* As jamess pointed out in the comment, at the time of this answer, September 2018, &lt;code&gt;Array.prototype.some()&lt;/code&gt; is fully supported: &lt;a href=&quot;http://kangax.github.io/compat-table/es5/#test-Array_methods_Array.prototype.some_a_href=_https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some_title=_MDN_documentation_img_src=_../mdn.png_alt=_MDN_(Mozilla_Development_Network)_logo_width=_15_height=_13_/_/a_nbsp;&quot; rel=&quot;noreferrer&quot;&gt;caniuse.com support table&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;ECMAScript 7 introduces &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.prototype.includes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;It can be used like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It also accepts an optional second argument &lt;code&gt;fromIndex&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Unlike &lt;code&gt;indexOf&lt;/code&gt;, which uses &lt;a href=&quot;https://262.ecma-international.org/12.0/#sec-strict-equality-comparison&quot; rel=&quot;noreferrer&quot;&gt;Strict Equality Comparison&lt;/a&gt;, &lt;code&gt;includes&lt;/code&gt; compares using &lt;a href=&quot;https://262.ecma-international.org/12.0/#sec-samevaluezero&quot; rel=&quot;noreferrer&quot;&gt;SameValueZero&lt;/a&gt; equality algorithm. That means that you can detect if an array includes a &lt;code&gt;NaN&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;NaN&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;NaN&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Also unlike &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;includes&lt;/code&gt; does not skip missing indices:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It can be &lt;a href=&quot;https://github.com/zloirock/core-js#ecmascript-array&quot; rel=&quot;noreferrer&quot;&gt;polyfilled&lt;/a&gt; to make it work on all browsers.&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s say you&apos;ve defined an array like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; array = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Below are three ways of checking whether there is a &lt;code&gt;3&lt;/code&gt; in there. All of them return either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Native Array method (since ES2016) (&lt;a href=&quot;https://caniuse.com/#feat=array-includes&quot; rel=&quot;noreferrer&quot;&gt;compatibility table&lt;/a&gt;)&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;array.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;As custom Array method (pre ES2016)&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Prefixing the method with &apos;_&apos; to avoid name clashes&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;_includes&apos;&lt;/span&gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(v) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }})\narray.&lt;span class=&quot;hljs-title function_&quot;&gt;_includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Simple function&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a, v&lt;/span&gt;) =&amp;gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(v) !== -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(array, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s a &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf&quot; rel=&quot;noreferrer&quot;&gt;JavaScript 1.6 compatible&lt;/a&gt; implementation of &lt;code&gt;Array.indexOf&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;indexOf&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;indexOf&lt;/span&gt; = [].&lt;span class=&quot;hljs-property&quot;&gt;indexOf&lt;/span&gt; ?\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, obj, &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(obj, &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;);\n        } :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, obj, &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// (for IE6)&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; l = arr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,\n                i = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ? &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;) + (&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? l : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            i = i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : i;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; i &amp;lt; l; i++) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr &amp;amp;&amp;amp; arr[i] === obj) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        };\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isInArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, search&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(search) &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Usage&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;isInArray&lt;/span&gt;(my_array, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my_value&quot;&lt;/span&gt;))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Extending the JavaScript &lt;code&gt;Array&lt;/code&gt; object is a really bad idea because you introduce new properties (your custom methods) into &lt;code&gt;for-in&lt;/code&gt; loops which can break existing scripts. A few years ago the authors of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework&quot; rel=&quot;noreferrer&quot;&gt;Prototype&lt;/a&gt; library had to re-engineer their library implementation to remove just this kind of thing.&lt;/p&gt;\n\n&lt;p&gt;If you don&apos;t need to worry about compatibility with other JavaScript running on your page, go for it, otherwise, I&apos;d recommend the more awkward, but safer free-standing function solution.&lt;/p&gt;\n    ","\n&lt;h2&gt;Performance&lt;/h2&gt;\n\n&lt;p&gt;Today 2020.01.07 I perform tests on MacOs HighSierra 10.13.6 on Chrome v78.0.0, Safari v13.0.4 and Firefox v71.0.0 for 15 chosen solutions. Conclusions&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;solutions based on &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; and surprisingly &lt;code&gt;find&lt;/code&gt; (K,N,O) are slowest on all browsers&lt;/li&gt;\n&lt;li&gt;the es6 &lt;code&gt;includes&lt;/code&gt; (F) is fast only on chrome&lt;/li&gt;\n&lt;li&gt;the solutions based on &lt;code&gt;for&lt;/code&gt; (C,D) and &lt;code&gt;indexOf&lt;/code&gt; (G,H) are quite-fast on all browsers on small and big arrays so probably they are best choice for efficient solution&lt;/li&gt;\n&lt;li&gt;the solutions where index decrease during loop, (B) is slower probably because the way of &lt;a href=&quot;https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus&quot;&gt;CPU cache works&lt;/a&gt;. &lt;/li&gt;\n&lt;li&gt;I also run test for big array when searched element was on position 66% of array length, and solutions based on &lt;code&gt;for&lt;/code&gt; (C,D,E) gives similar results (~630 ops/sec - but the E on safari and firefox was 10-20% slower than C and D)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Results&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/YPIG1.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YPIG1.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Details&lt;/h2&gt;\n\n&lt;p&gt;I perform 2 tests cases: for array with 10 elements, and array with 1 milion elements. In both cases we put searched element in the array middle.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;name,f&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${name}&lt;/span&gt;: 3-&lt;span class=&quot;hljs-subst&quot;&gt;${f(arr,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s10&apos;&lt;/span&gt;)}&lt;/span&gt;  &apos;s7&apos;-&lt;span class=&quot;hljs-subst&quot;&gt;${f(arr,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s7&apos;&lt;/span&gt;)}&lt;/span&gt;  6-&lt;span class=&quot;hljs-subst&quot;&gt;${f(arr,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)}&lt;/span&gt; &apos;s3&apos;-&lt;span class=&quot;hljs-subst&quot;&gt;${f(arr,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s3&apos;&lt;/span&gt;)}&lt;/span&gt;`&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s6&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s7&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s9&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;s10&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-comment&quot;&gt;//arr = new Array(1000000).fill(123); arr[500000]=7;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, val&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (i++&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;n) {\n       if (a[i] === val) {\n           return true;\n       }\n    }\n    return false;\n}\n\nfunction B(a, val) {\n    var i = a.length;\n    while (i--) {\n       if (a[i] === val) {\n           return true;\n       }\n    }\n    return false;\n}\n\nfunction C(a, val) {\n    for (var i = 0; i &amp;lt; a.length; i++) {\n        if (a[i] === val) return true;\n    }\n    return false;\n}\n\nfunction D(a,val)\n{\n    var len = a.length;\n    for(var i = 0 ; i &amp;lt; len;i++)\n    {\n        if(a[i] === val) return true;\n    }\n    return false;\n} \n\nfunction E(a, val){  \n  var n = a.length-1;\n  var t = n/2;\n  for (var i = 0; i &amp;lt;= t; i++) {\n        if (a[i] === val || a[n-i] === val) return true;\n  }\n  return false;\n}\n\nfunction F(a,val) {\n\treturn a.includes(val);\n}\n\nfunction G(a,val) {\n\treturn a.indexOf(val)&amp;gt;=0;\n}\n\nfunction H(a,val) {\n\treturn !!~a.indexOf(val);\n}\n\nfunction I(a, val) {\n  return a.findIndex(x=&amp;gt; x==val)&amp;gt;=0;\n}\n\nfunction J(a,val) {\n\treturn a.some(x=&amp;gt; x===val);\n}\n\nfunction K(a, val) {\n  const s = JSON.stringify(val);\n  return a.some(x =&amp;gt; JSON.stringify(x) === s);\n}\n\nfunction L(a,val) {\n\treturn !a.every(x=&amp;gt; x!==val);\n}\n\nfunction M(a, val) {\n  return !!a.find(x=&amp;gt; x==val);\n}\n\nfunction N(a,val) {\n\treturn a.filter(x=&amp;gt;x===val).length &amp;gt; 0;\n}\n\nfunction O(a, val) {\n  return new Set(a).has(val);\n}\n\nlog(&apos;A&apos;,A);\nlog(&apos;B&apos;,B);\nlog(&apos;C&apos;,C);\nlog(&apos;D&apos;,D);\nlog(&apos;E&apos;,E);\nlog(&apos;F&apos;,F);\nlog(&apos;G&apos;,G);\nlog(&apos;H&apos;,H);\nlog(&apos;I&apos;,I);\nlog(&apos;J&apos;,J);\nlog(&apos;K&apos;,K);\nlog(&apos;L&apos;,L);\nlog(&apos;M&apos;,M);\nlog(&apos;N&apos;,N);\nlog(&apos;O&apos;,O);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;This shippet only presents functions used in performance tests - it not perform tests itself!&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Array small - 10 elements&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can perform tests in your machine &lt;a href=&quot;https://jsperf.com/array-exist-element/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/gDDCp.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/gDDCp.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Array big - 1.000.000 elements&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can perform tests in your machine &lt;a href=&quot;https://jsperf.com/array-big-exist-element/1&quot; rel=&quot;noreferrer&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/cTL3s.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/cTL3s.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;One-liner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; elem == x }).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Thinking out of the box for a second, if you are making this call many many times, it is vastly more efficient to use &lt;strike&gt;an associative array&lt;/strike&gt; a Map to do lookups using a hash function.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;contains&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(v) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [ &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt; ];\n\na.&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\na.&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;fox&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; element == obj;})\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&quot;&gt;Array.prototype.some()&lt;/a&gt; was added to the ECMA-262 standard in the 5th edition&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using JavaScript 1.6 or later (Firefox 1.5 or later) you can use &lt;a href=&quot;https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf&quot; rel=&quot;noreferrer&quot;&gt;Array.indexOf&lt;/a&gt;.  Otherwise, I think you are going to end up with something similar to your original code.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;A hopefully faster bidirectional &lt;code&gt;indexOf&lt;/code&gt; / &lt;code&gt;lastIndexOf&lt;/code&gt; alternative&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;2015&lt;/h2&gt;\n&lt;p&gt;While the new method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;includes&lt;/code&gt;&lt;/a&gt; is very nice, the support is basically zero for now.&lt;/p&gt;\n&lt;p&gt;It&apos;s a long time that I was thinking of a way to replace the slow &lt;code&gt;indexOf&lt;/code&gt;/&lt;code&gt;lastIndexOf&lt;/code&gt; functions.&lt;/p&gt;\n&lt;p&gt;A performant way has already been found, looking at the top answers. From those I chose the &lt;code&gt;contains&lt;/code&gt; function posted by @Damir Zekic which should be the fastest one. But it also states that the benchmarks are from 2008 and so are outdated.&lt;/p&gt;\n&lt;p&gt;I also prefer &lt;code&gt;while&lt;/code&gt; over &lt;code&gt;for&lt;/code&gt;, but for not a specific reason I ended writing the function with a for loop. It could be also done with a &lt;code&gt;while --&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I was curious if the iteration was much slower if I check both sides of the array while doing it. Apparently no, and so this function is around two times faster than the top voted ones. Obviously it&apos;s also faster than the native one. This is in a real world environment, where you never know if the value you are searching is at the beginning or at the end of the array.&lt;/p&gt;\n&lt;p&gt;When you know you just pushed an array with a value, using lastIndexOf remains probably the best solution, but if you have to travel through big arrays and the result could be everywhere, this could be a solid solution to make things faster.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Bidirectional &lt;code&gt;indexOf&lt;/code&gt;/&lt;code&gt;lastIndexOf&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bidirectionalIndexOf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, c, d, e&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(c=a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,d=c*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; c--; ){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a[c]==b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c; &lt;span class=&quot;hljs-comment&quot;&gt;//or this[c]===b&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(a[e=d-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-c]==b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e; &lt;span class=&quot;hljs-comment&quot;&gt;//or a[e=d-1-c]===b&lt;/span&gt;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Usage&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bidirectionalIndexOf&lt;/span&gt;(array,&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Performance test&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;https://jsbench.me/7el1b8dj80&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://jsbench.me/7el1b8dj80&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;As a test I created an array with 100k entries.&lt;/p&gt;\n&lt;p&gt;Three queries: at the beginning, in the middle &amp;amp; at the end of the array.&lt;/p&gt;\n&lt;p&gt;I hope you also find this interesting and test the performance.&lt;/p&gt;\n&lt;p&gt;Note: As you can see I slightly modified the &lt;code&gt;contains&lt;/code&gt; function to reflect the &lt;code&gt;indexOf&lt;/code&gt; &amp;amp; &lt;code&gt;lastIndexOf&lt;/code&gt; output (so basically &lt;code&gt;true&lt;/code&gt; with the &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt;). That shouldn&apos;t harm it.&lt;/p&gt;\n&lt;h3&gt;The array prototype variant&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bidirectionalIndexOf&apos;&lt;/span&gt;,{&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;b,c,d,e&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(c=&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;,d=c*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; c--; ){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[c]==b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c; &lt;span class=&quot;hljs-comment&quot;&gt;//or this[c]===b&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[e=d-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-c] == b) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e; &lt;span class=&quot;hljs-comment&quot;&gt;//or this[e=d-1-c]===b&lt;/span&gt;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n},&lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Usage&lt;/span&gt;\narray.&lt;span class=&quot;hljs-title function_&quot;&gt;bidirectionalIndexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The function can also be easily modified to return true or false or even the object, string or whatever it is.&lt;/p&gt;\n&lt;p&gt;And here is the &lt;code&gt;while&lt;/code&gt; variant:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bidirectionalIndexOf&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, c, d&lt;/span&gt;){\n  c=a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; d=c-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(c--){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b===a[c]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b===a[d-c]) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d-c;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Usage&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bidirectionalIndexOf&lt;/span&gt;(array,&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;How is this possible?&lt;/h3&gt;\n&lt;p&gt;I think that the simple calculation to get the reflected index in an array is so simple that it&apos;s two times faster than doing an actual loop iteration.&lt;/p&gt;\n&lt;p&gt;Here is a complex example doing three checks per iteration, but this is only possible with a longer calculation which causes the slowdown of the code.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20151019160219/http://jsperf.com/bidirectionalindexof/2&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://web.archive.org/web/20151019160219/http://jsperf.com/bidirectionalindexof/2&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem,array&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len = array.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; len;i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(array[i] == elem){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;}\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Returns array index if found, or -1 if not found&lt;/p&gt;\n    ","\n&lt;p&gt;If you are checking repeatedly for existence of an object in an array you should maybe look into&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Keeping the array sorted at all times by doing &lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot; rel=&quot;noreferrer&quot;&gt;insertion sort&lt;/a&gt; in your array (put new objects in on the right place) &lt;/li&gt;\n&lt;li&gt;Make updating objects as remove+sorted insert operation and&lt;/li&gt;\n&lt;li&gt;Use a &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_search_algorithm&quot; rel=&quot;noreferrer&quot;&gt;binary search&lt;/a&gt; lookup in your &lt;code&gt;contains(a, obj)&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;We use this snippet (works with objects, arrays, strings):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n * @function\n * @name Object.prototype.inArray\n * @description Extend Object prototype within inArray function\n *\n * @param {mix}    needle       - Search-able needle\n * @param {bool}   searchInKey  - Search needle in keys?\n *\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;inArray&apos;&lt;/span&gt;,{\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;needle, searchInKey&lt;/span&gt;){\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; object = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(needle) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Object]&apos;&lt;/span&gt; || \n            &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(needle) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Array]&apos;&lt;/span&gt;){\n            needle = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(needle);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(object).&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key&lt;/span&gt;){\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = object[key];\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(value) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Object]&apos;&lt;/span&gt; || \n                &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(value) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;[object Array]&apos;&lt;/span&gt;){\n                value = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(value);\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(searchInKey){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(value === needle || key === needle){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n            }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(value === needle){\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n                }\n            }\n        });\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = {&lt;span class=&quot;hljs-attr&quot;&gt;one&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;two&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: {&lt;span class=&quot;hljs-attr&quot;&gt;three&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt;}};\na.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;);          &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\na.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);            &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\na.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);      &lt;span class=&quot;hljs-comment&quot;&gt;//true - search by keys&lt;/span&gt;\na.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;three&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt;}); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;four&quot;&lt;/span&gt;, {&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;}];\nb.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;);         &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\nb.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;);         &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\nb.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;})   &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\nb.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{foo: &apos;val&apos;}&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;hljs-string&quot;&gt;&quot;String&quot;&lt;/span&gt;;\nc.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;S&quot;&lt;/span&gt;);        &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\nc.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s&quot;&lt;/span&gt;);        &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\nc.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\nc.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;20&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution that works in all modern browsers:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; stringifiedObj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj); &lt;span class=&quot;hljs-comment&quot;&gt;// Cache our object to not call `JSON.stringify` on every iteration&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(item) === stringifiedObj);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;([{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}], {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;IE6+ solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, obj&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; stringifiedObj = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; arr.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(item) === stringifiedObj;\n  });\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// .some polyfill, not needed for IE9+&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;hljs-string&quot;&gt;&apos;some&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;)) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;some&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;tester, that &lt;span class=&quot;hljs-comment&quot;&gt;/*opt*/&lt;/span&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i &amp;lt; n; i++) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; &amp;amp;&amp;amp; tester.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(that, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;[i], i, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;([{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}], {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Why to use &lt;code&gt;JSON.stringify&lt;/code&gt;?&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;Array.indexOf&lt;/code&gt; and &lt;code&gt;Array.includes&lt;/code&gt; (as well as most of the answers here) only compare by reference and not by value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;});\n&lt;span class=&quot;hljs-comment&quot;&gt;// false, because {a: 1} is a new object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Non-optimized ES6 one-liner:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[{&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}].&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(item) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note:\nComparing objects by value will work better if the keys are in the same order, so to be safe you might sort the keys first with a package like this one: &lt;a href=&quot;https://www.npmjs.com/package/sort-keys&quot; rel=&quot;noreferrer&quot;&gt;https://www.npmjs.com/package/sort-keys&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Updated the &lt;code&gt;contains&lt;/code&gt; function with a perf optimization. Thanks &lt;a href=&quot;https://stackoverflow.com/users/1397160/itinance&quot;&gt;itinance&lt;/a&gt; for pointing it out.&lt;/p&gt;\n    ","\n&lt;p&gt;Use lodash&apos;s &lt;a href=&quot;https://lodash.com/docs#some&quot; rel=&quot;noreferrer&quot;&gt;some&lt;/a&gt; function.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s concise, accurate and has great cross platform support.&lt;/p&gt;\n\n&lt;p&gt;The accepted answer does not even meet the requirements.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Requirements:&lt;/em&gt; Recommend most concise and efficient way to find out if a JavaScript array contains an object.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Accepted Answer:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}, [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}])\n&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;My recommendation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;([{&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}], {&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;})\n&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notes: &lt;/p&gt;\n\n&lt;p&gt;$.inArray works fine for determining whether a &lt;em&gt;scalar&lt;/em&gt; value exists in an array of scalars...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;inArray&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])\n&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... but the question clearly asks for an efficient way to determine if an &lt;em&gt;object&lt;/em&gt; is contained in an array.&lt;/p&gt;\n\n&lt;p&gt;In order to handle both scalars and objects, you could do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(_.&lt;span class=&quot;hljs-title function_&quot;&gt;isObject&lt;/span&gt;(item)) ? _.&lt;span class=&quot;hljs-title function_&quot;&gt;some&lt;/span&gt;(ary, item) : (_.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(ary, item) &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simple solution for this requirement is using &lt;code&gt;find()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;If you&apos;re having array of objects like below,&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; users = [{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;101&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Choose one...&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;102&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;shilpa&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;103&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;anita&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;104&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;105&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;}];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you can check whether the object with your value is already present or not:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = users.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;object&lt;/span&gt; =&amp;gt;&lt;/span&gt; object[&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;] === &lt;span class=&quot;hljs-string&quot;&gt;&apos;104&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if data is null then no admin, else it will return the existing object like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;104&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then you can find the index of that object in the array and replace the object using the code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; indexToUpdate = users.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(data);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; newObject = {&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;104&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;customer&quot;&lt;/span&gt;};\nusers[indexToUpdate] = newObject;&lt;span class=&quot;hljs-comment&quot;&gt;//your new object&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(users);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you will get value like:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;101&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Choose one...&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;102&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;shilpa&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;103&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;anita&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;104&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;customer&quot;&lt;/span&gt;},\n{&lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;105&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt;}];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;ECMAScript 6 has an elegant proposal on find.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The find method executes the callback function once for each element\n  present in the array until it finds one where callback returns a true\n  value. If such an element is found, find immediately returns the value\n  of that element. Otherwise, find returns undefined. callback is\n  invoked only for indexes of the array which have assigned values; it\n  is not invoked for indexes which have been deleted or which have never\n  been assigned values.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot; rel=&quot;noreferrer&quot;&gt;MDN documentation&lt;/a&gt; on that.&lt;/p&gt;\n\n&lt;p&gt;The find functionality works like this.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isPrime&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element, index, array&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; start = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (start &amp;lt;= &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;sqrt&lt;/span&gt;(element)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (element % start++ &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (element &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(isPrime) ); &lt;span class=&quot;hljs-comment&quot;&gt;// Undefined, not found&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(isPrime) ); &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use this in ECMAScript 5 and below by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill&quot; rel=&quot;noreferrer&quot;&gt;defining the function&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;find&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;find&apos;&lt;/span&gt;, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;configurable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;writable&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;predicate&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Array.prototype.find called on null or undefined&apos;&lt;/span&gt;);\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; predicate !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;predicate must be a function&apos;&lt;/span&gt;);\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; list = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; length = list.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thisArg = &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list) {\n          value = list[i];\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (predicate.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(thisArg, value, i, list)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n          }\n        }\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n    }\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;While &lt;code&gt;array.indexOf(x)!=-1&lt;/code&gt; is the most concise way to do this (and has been supported by non-Internet&amp;nbsp;Explorer browsers for over decade...), it is not O(1), but rather O(N), which is terrible. If your array will not be changing, you can convert your array to a hashtable, then do &lt;code&gt;table[x]!==undefined&lt;/code&gt; or &lt;code&gt;===undefined&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;toTable&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = {};\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;){t[x]=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;});\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; t;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Demo:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; toRemove = [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;toTable&lt;/span&gt;();\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; toRemove[x]===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Unfortunately, while you can create an Array.prototype.contains to &quot;freeze&quot; an array and store a hashtable in this._cache in two lines, this would give wrong results if you chose to edit your array later. JavaScript has insufficient hooks to let you keep this state, unlike Python for example.)&lt;/p&gt;\n    ","\n&lt;p&gt;One can use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set&quot; rel=&quot;noreferrer&quot;&gt;Set&lt;/a&gt; that has the method &quot;has()&quot;:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, obj&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; proxy = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Set&lt;/span&gt;(arr);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (proxy.&lt;span class=&quot;hljs-title function_&quot;&gt;has&lt;/span&gt;(obj))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Happy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;New&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Year&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(arr, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Happy&apos;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myArray = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;orange&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;] ;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(!!~myArray.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/An5jQ/&quot; rel=&quot;noreferrer&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To know exactly what the &lt;code&gt;tilde&lt;/code&gt; &lt;code&gt;~&lt;/code&gt; do at this point, refer to this question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12299665/what-does-a-tilde-do-when-it-precedes-an-expression&quot;&gt;What does a tilde do when it precedes an expression?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;OK, you can just &lt;strong&gt;optimise your&lt;/strong&gt; code to get the result! &lt;/p&gt;\n\n&lt;p&gt;There are many ways to do this which are cleaner and better, but I just wanted to get your pattern and apply to that using &lt;code&gt;JSON.stringify&lt;/code&gt;, just simply do something like this in your case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, obj&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; a.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a[i]) === &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(obj)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Surprised that this question still doesn&apos;t have latest syntax added, adding my 2 cents.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s say we have array of Objects arrObj and we want to search obj in it.&lt;/p&gt;\n\n&lt;p&gt;Array.prototype.&lt;strong&gt;indexOf&lt;/strong&gt; -&amp;gt; (returns &lt;strong&gt;index or -1&lt;/strong&gt;) is generally used for finding index of element in array.\nThis can also be used for searching object but only works if you are passing reference to same object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sumer&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; arrObj = [obj, { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kishor&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Rupen&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt; }];\n\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(obj));&lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sumer&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt; })); &lt;span class=&quot;hljs-comment&quot;&gt;//-1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Array.prototype.&lt;strong&gt;includes&lt;/strong&gt; -&amp;gt; (returns &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(obj));  &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;({ &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sumer&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt; })); &lt;span class=&quot;hljs-comment&quot;&gt;//false&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;includes&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Array.prototype.&lt;strong&gt;find&lt;/strong&gt; -&amp;gt; (takes callback, returns first &lt;strong&gt;value/object&lt;/strong&gt; that returns true in CB).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;));  &lt;span class=&quot;hljs-comment&quot;&gt;//{ name: &apos;Kishor&apos;, age: 46 }&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//{ name: &apos;Kishor&apos;, age: 46 }&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Array.prototype.&lt;strong&gt;findIndex&lt;/strong&gt; -&amp;gt; (takes callback, returns &lt;strong&gt;index&lt;/strong&gt; of first value/object that returns true in CB).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;));  &lt;span class=&quot;hljs-comment&quot;&gt;//1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arrObj.&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;age&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;findIndex&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; e &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;//1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since find and findIndex takes a callback, we can be fetch any object(even if we don&apos;t have the reference) from array by creatively setting the true condition.&lt;/p&gt;\n    ","\n&lt;p&gt;It has one parameter: an array numbers of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects in the array that satisfy &lt;code&gt;numbers.x == numbers.y&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numbers = [ { &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; },\n                { &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n                { &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n                { &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; },\n                { &lt;span class=&quot;hljs-attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; } ];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = numbers.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i =&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(numbers[i].&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;==numbers[i].&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;)\n    {count+=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;}\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(count);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;countArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;originalArray&lt;/span&gt;) {\n     \n    \t&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; compressed = [];\n    \t&lt;span class=&quot;hljs-comment&quot;&gt;// make a copy of the input array&lt;/span&gt;\n    \t&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; copyArray = originalArray.&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n     \n    \t&lt;span class=&quot;hljs-comment&quot;&gt;// first loop goes over every element&lt;/span&gt;\n    \t&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; originalArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n     \n    \t\t&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\t\n    \t\t&lt;span class=&quot;hljs-comment&quot;&gt;// loop over every element in the copy and see if it&apos;s the same&lt;/span&gt;\n    \t\t&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; w = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; w &amp;lt; copyArray.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; w++) {\n    \t\t\t&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (originalArray[i] == copyArray[w]) {\n    \t\t\t\t&lt;span class=&quot;hljs-comment&quot;&gt;// increase amount of times duplicate is found&lt;/span&gt;\n    \t\t\t\tcount++;\n    \t\t\t\t&lt;span class=&quot;hljs-comment&quot;&gt;// sets item to undefined&lt;/span&gt;\n    \t\t\t\t&lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt; copyArray[w];\n    \t\t\t}\n    \t\t}\n     \n    \t\t&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (count &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    \t\t\t&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;();\n    \t\t\ta.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = originalArray[i];\n    \t\t\ta.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt; = count;\n    \t\t\tcompressed.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(a);\n    \t\t}\n    \t}\n     \n    \t&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; compressed;\n    };\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// It should go something like this:&lt;/span&gt;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; testArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dog&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;buffalo&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;wolf&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tiger&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cat&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newArray = &lt;span class=&quot;hljs-title function_&quot;&gt;countArray&lt;/span&gt;(testArray);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(newArray);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "]},"page":"72","randomQuestions":[{"title":"How to make good reproducible pandas examples","slug":"how-to-make-good-reproducible-pandas-examples-1657384310402"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"How do I detect a click outside an element?","slug":"how-do-i-detect-a-click-outside-an-element-1657387505351"},{"title":"How do I determine the correct path for FXML files, CSS files, Images, and other resources needed by my JavaFX Application?","slug":"how-do-i-determine-the-correct-path-for-fxml-files-css-files-images-and-other-resources-needed-by-my-javafx-application-1657388143988"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"What is a smart pointer and when should I use one?","slug":"what-is-a-smart-pointer-and-when-should-i-use-one-1657387905461"},{"title":"Select first row in each GROUP BY group?","slug":"select-first-row-in-each-group-by-group-1657384809388"},{"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484"},{"title":"Using LIMIT within GROUP BY to get N results per group?","slug":"using-limit-within-group-by-to-get-n-results-per-group-1657388324167"},{"title":"How to add JTable in JPanel with null layout?","slug":"how-to-add-jtable-in-jpanel-with-null-layout-1657384590912"},{"title":"Is there a unique Android device ID?","slug":"is-there-a-unique-android-device-id-1657388089268"},{"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003"},{"title":"Switch between two frames in tkinter?","slug":"switch-between-two-frames-in-tkinter-1657388528781"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"How do I split a list into equally-sized chunks?","slug":"how-do-i-split-a-list-into-equally-sized-chunks-1657384580399"},{"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839"},{"title":"How can I change an element's class with JavaScript?","slug":"how-can-i-change-an-element's-class-with-javascript-1657387694695"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"Serialize and Deserialize Json and Json Array in Unity","slug":"serialize-and-deserialize-json-and-json-array-in-unity-1657388273270"}]},"__N_SSG":true}