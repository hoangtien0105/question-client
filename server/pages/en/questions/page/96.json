{"pageProps":{"data":{"count":610,"rows":[{"id":135,"title":"How can I sort arrays and data in PHP?","slug":"how-can-i-sort-arrays-and-data-in-php-1657384726665","postType":"QUESTION","createdAt":"2022-07-09T16:38:46.000Z","updatedAt":"2022-07-09T16:38:46.000Z","tags":[{"id":490,"name":"sorting","slug":"sorting","createdAt":"2022-07-09T16:38:46.000Z","updatedAt":"2022-07-09T16:38:46.000Z","Questions_Tags":{"questionId":135,"tagId":490}},{"id":492,"name":"spl","slug":"spl","createdAt":"2022-07-09T16:38:46.000Z","updatedAt":"2022-07-09T16:38:46.000Z","Questions_Tags":{"questionId":135,"tagId":492}}]},{"id":134,"title":"var functionName = function() {} vs function functionName() {}","slug":"var-functionname-function()-vs-function-functionname()-1657384724077","postType":"QUESTION","createdAt":"2022-07-09T16:38:44.000Z","updatedAt":"2022-07-09T16:38:44.000Z","tags":[{"id":487,"name":"idioms","slug":"idioms","createdAt":"2022-07-09T16:38:44.000Z","updatedAt":"2022-07-09T16:38:44.000Z","Questions_Tags":{"questionId":134,"tagId":487}}]},{"id":133,"title":"Learning Regular Expressions [closed]","slug":"learning-regular-expressions-closed-1657384719460","postType":"QUESTION","createdAt":"2022-07-09T16:38:39.000Z","updatedAt":"2022-07-09T16:38:39.000Z","tags":[]},{"id":132,"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494","postType":"QUESTION","createdAt":"2022-07-09T16:38:37.000Z","updatedAt":"2022-07-09T16:38:37.000Z","tags":[{"id":482,"name":"object-literal","slug":"object-literal","createdAt":"2022-07-09T16:38:37.000Z","updatedAt":"2022-07-09T16:38:37.000Z","Questions_Tags":{"questionId":132,"tagId":482}}]},{"id":131,"title":"How can I return pivot table output in MySQL?","slug":"how-can-i-return-pivot-table-output-in-mysql-1657384715043","postType":"QUESTION","createdAt":"2022-07-09T16:38:35.000Z","updatedAt":"2022-07-09T16:38:35.000Z","tags":[]}]},"answers":{"131":["\n&lt;p&gt;This basically &lt;em&gt;is&lt;/em&gt; a pivot table.&lt;/p&gt;\n\n&lt;p&gt;A nice tutorial on how to achieve this can be found here: &lt;a href=&quot;http://www.artfulsoftware.com/infotree/qrytip.php?id=78&quot; rel=&quot;noreferrer&quot;&gt;http://www.artfulsoftware.com/infotree/qrytip.php?id=78&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I advise reading this post and adapt this solution to your needs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;After the link above is currently not available any longer I feel obliged to provide some additional information for all of you searching for mysql pivot answers in here. It really had a vast amount of information, and I won&apos;t put everything from there in here (even more since I just don&apos;t want to copy their vast knowledge), but I&apos;ll give some advice on how to deal with pivot tables the sql way generally with the example from peku who asked the question in the first place.&lt;/p&gt;\n\n&lt;p&gt;Maybe the link comes back soon, I&apos;ll keep an eye out for it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The spreadsheet way...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Many people just use a tool like MSExcel, OpenOffice or other spreadsheet-tools for this purpose. This is a valid solution, just copy the data over there and use the tools the GUI offer to solve this. &lt;/p&gt;\n\n&lt;p&gt;But... this wasn&apos;t the question, and it might even lead to some disadvantages, like how to get the data into the spreadsheet, problematic scaling and so on.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The SQL way...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Given his table looks something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; `test_pivot` (\n  `pid` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,\n  `company_name` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `action` &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  `pagecount` &lt;span class=&quot;hljs-type&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,\n  &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (`pid`)\n) ENGINE&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;MyISAM;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now look into his/her desired table:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;company_name    EMAIL   PRINT &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; pages   PRINT &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; pages   PRINT &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; pages\n&lt;span class=&quot;hljs-comment&quot;&gt;-------------------------------------------------------------&lt;/span&gt;\nCompanyA        &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;               &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;               &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nCompanyB        &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;               &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;               &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The rows (&lt;code&gt;EMAIL&lt;/code&gt;, &lt;code&gt;PRINT x pages&lt;/code&gt;) resemble conditions. The main grouping is by &lt;code&gt;company_name&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In order to set up the conditions this rather shouts for using the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/case.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;CASE&lt;/code&gt;&lt;/a&gt;-statement. In order to group by something, well, use ... &lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The basic SQL providing this pivot can look something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;  P.`company_name`,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(\n        &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; P.`action`&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;EMAIL&apos;&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;EMAIL&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(\n        &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; P.`action`&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; P.`pagecount` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; P.`pagecount` \n            &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT 1 pages&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(\n        &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; P.`action`&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; P.`pagecount` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; P.`pagecount` \n            &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT 2 pages&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(\n        &lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; P.`action`&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; P.`pagecount` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; P.`pagecount` \n            &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;\n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT 3 pages&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;    test_pivot P\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; P.`company_name`;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should provide the desired result very fast. The major downside for this approach, the more rows you want in your pivot table, the more conditions you need to define in your SQL statement.&lt;/p&gt;\n\n&lt;p&gt;This can be dealt with, too, therefore people tend to use prepared statements, routines, counters and such.&lt;/p&gt;\n\n&lt;p&gt;Some additional links about this topic:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://anothermysqldba.blogspot.de/2013/06/pivot-tables-example-in-mysql.html&quot; rel=&quot;noreferrer&quot;&gt;http://anothermysqldba.blogspot.de/2013/06/pivot-tables-example-in-mysql.html&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/363339/Cross-Tabulation-Pivot-Tables-with-MySQL&quot; rel=&quot;noreferrer&quot;&gt;http://www.codeproject.com/Articles/363339/Cross-Tabulation-Pivot-Tables-with-MySQL&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://datacharmer.org/downloads/pivot_tables_mysql_5.pdf&quot; rel=&quot;noreferrer&quot;&gt;http://datacharmer.org/downloads/pivot_tables_mysql_5.pdf&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://codingsight.com/pivot-tables-in-mysql/&quot; rel=&quot;noreferrer&quot;&gt;https://codingsight.com/pivot-tables-in-mysql/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;My solution is in T-SQL without any pivots:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    CompanyName,  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; (action&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;EMAIL&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Email,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; (action&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Print1Pages,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; (action&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Print2Pages,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; (action&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Print3Pages\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n    Company\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; \n    CompanyName\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For MySQL you can directly put conditions in &lt;code&gt;SUM()&lt;/code&gt; function and it will be &lt;em&gt;evaluated as Boolean &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;&lt;/em&gt; and thus you can have your count based on your criteria without using &lt;code&gt;IF/CASE&lt;/code&gt; statements&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    company_name,  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;EMAIL&apos;&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Email,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Print1Pages,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Print2Pages,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; Print3Pages\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; company_name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://sqlfiddle.com/#!2/60c93/1&quot;&gt;&lt;strong&gt;&lt;code&gt;DEMO&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h2&gt;\n    ","\n&lt;p&gt;For dynamic pivot, use &lt;code&gt;GROUP_CONCAT&lt;/code&gt; with &lt;code&gt;CONCAT&lt;/code&gt;.\nThe &lt;a href=&quot;http://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php&quot;&gt;GROUP_CONCAT&lt;/a&gt; function concatenates strings from a group into one string with various options.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n    GROUP_CONCAT(&lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt;\n    CONCAT(\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos;SUM(CASE WHEN action = &quot;&apos;&lt;/span&gt;,\n      action,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;  AND &apos;&lt;/span&gt;, \n           (&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; pagecount &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; \n           &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; CONCAT(&quot;pagecount = &quot;,pagecount) \n           &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; pagecount &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;),\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos; THEN 1 ELSE 0 end) AS &apos;&lt;/span&gt;,\n      action, IFNULL(pagecount,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n\n    )\n  )\n&lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n  t;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT company_name, &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; \n                  FROM t \n                   GROUP BY company_name&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;PREPARE&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; stmt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DEALLOCATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PREPARE&lt;/span&gt; stmt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sqlfiddle.com/#!2/60c93/112&quot;&gt;DEMO HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A &lt;strong&gt;stardard-SQL&lt;/strong&gt; version using &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_or&quot; rel=&quot;nofollow noreferrer&quot;&gt;boolean logic&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; company_name\n     , &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;EMAIL&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;Email&quot;\n     , &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;Print 1 pages&quot;\n     , &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;Print 2 pages&quot;\n     , &lt;span class=&quot;hljs-built_in&quot;&gt;COUNT&lt;/span&gt;(action &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;PRINT&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;Print 3 pages&quot;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   tbl\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; company_name;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=mysql_8.0&amp;amp;fiddle=b6ce6cac5520a7feea8790d00ca8f2e4&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;br&gt;\n&lt;sub&gt;Old &lt;a href=&quot;http://sqlfiddle.com/#!9/1fdc5b/110&quot; rel=&quot;nofollow noreferrer&quot;&gt;sqlfiddle&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;How?&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;TRUE  OR NULL&lt;/code&gt; yields &lt;code&gt;TRUE&lt;/code&gt;.&lt;br&gt;\n&lt;code&gt;FALSE OR NULL&lt;/code&gt; yields &lt;code&gt;NULL&lt;/code&gt;.&lt;br&gt;\n&lt;code&gt;NULL  OR NULL&lt;/code&gt; yields &lt;code&gt;NULL&lt;/code&gt;.&lt;br&gt;\nAnd &lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html#function_count&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;COUNT&lt;/code&gt;&lt;/a&gt; only counts non-null values. Voilá.&lt;/p&gt;\n    ","\n&lt;p&gt;Correct answer is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; table_record_id,\ngroup_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;note&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; note\n,group_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;hire_date&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; hire_date\n,group_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;termination_date&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; termination_date\n,group_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;department&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; department\n,group_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;reporting_to&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; reporting_to\n,group_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;shift_start_time&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; shift_start_time\n,group_concat(if(value_name&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;shift_end_time&apos;&lt;/span&gt;, value_text, &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; shift_end_time\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; other_value\n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; table_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;employee&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; is_active &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; is_deleted &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;n&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; table_record_id\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a tool called MySQL Pivot table generator, it can help you create web based pivot table that you can later export to excel(if you like). it can work if your data is in a single table or in several tables .&lt;/p&gt;\n\n&lt;p&gt;All you need to do is to specify the data source of the columns (it supports dynamic columns), rows , the values in the body of the table and table relationship (if there are any) \n&lt;img src=&quot;https://i.stack.imgur.com/mPEZG.png&quot; alt=&quot;MySQL Pivot Table&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;The home page of this tool is &lt;a href=&quot;http://mysqlpivottable.net/&quot; rel=&quot;noreferrer&quot;&gt;http://mysqlpivottable.net&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t3.name, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(t3.prod_A) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Prod_A, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(t3.prod_B) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Prod_B, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(t3.prod_C) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt;    Prod_C, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(t3.prod_D) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Prod_D, &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;(t3.prod_E) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; Prod_E  \n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; t2.name &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; name, \n&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; t2.prodid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; t2.counts\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;  prod_A, \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; t2.prodid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; t2.counts\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; prod_B,\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; t2.prodid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; t2.counts\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; prod_C,\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; t2.prodid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; t2.counts\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; prod_D, \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; t2.prodid &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;5&quot; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; t2.counts\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt; prod_E\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; \n(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; partners.name &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; name, sales.products_id &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; prodid, &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(products.name) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; counts\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; test.sales &lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; test.partners &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; sales.partners_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; partners.id\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; test.products &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; sales.products_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; products.id \n&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; sales.partners_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; partners.id &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; sales.products_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; products.id &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; partners.name, prodid) t2) t3\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; t3.name ;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One option would be &lt;em&gt;combining&lt;/em&gt; use of &lt;strong&gt;&lt;code&gt;CASE..WHEN&lt;/code&gt; statement is redundant&lt;/strong&gt; within an aggregation for MySQL Database, and considering the needed &lt;strong&gt;query generation dynamically&lt;/strong&gt; along with &lt;em&gt;&lt;strong&gt;getting proper column title&lt;/strong&gt;&lt;/em&gt; for the result set as in the following code block :&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; GROUP_CONCAT(\n             CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SUM( `action` = &apos;&apos;&apos;&lt;/span&gt;, action, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;&apos;&lt;/span&gt;,pc0,&lt;span class=&quot;hljs-string&quot;&gt;&apos; ) AS &apos;&lt;/span&gt;,action,pc1)\n       )\n  &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; \n  ( \n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; `action`, \n          IF(`pagecount` &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;page&apos;&lt;/span&gt;,`pagecount`)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; pc1,\n          IF(`pagecount` &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos; AND `pagecount` = &apos;&lt;/span&gt;, pagecount, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; pc0\n     &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; `tab` \n    &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; CONCAT(action,pc0) \n  ) t;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT company_name,&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM `tab` GROUP BY company_name&apos;&lt;/span&gt;); \n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;PREPARE&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; stmt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DEALLOCATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PREPARE&lt;/span&gt; stmt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;kbd&gt;&lt;a href=&quot;https://dbfiddle.uk/?rdbms=mysql_5.7&amp;amp;fiddle=2e8e5cebf48de257c3709de4e46ce0a5&quot; rel=&quot;nofollow noreferrer&quot;&gt;Demo&lt;/a&gt;&lt;/kbd&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; company_name, &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; ACTION &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Email&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;Email&quot;,\n&lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; ACTION &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Print&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;print 1 PAGE&quot;,\n&lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; ACTION &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Print&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;print 2 PAGE&quot;,\n&lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;CASE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;WHEN&lt;/span&gt; ACTION &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Print&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; pagecount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; &quot;print 2 PAGE&quot;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; test1 &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; company_name;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"132":["\n&lt;p&gt;(Sourced from &lt;a href=&quot;http://www.dev-archive.net/articles/js-dot-notation/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Square bracket notation allows the use of characters that can&apos;t be used with dot notation:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = myForm.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;[]; &lt;span class=&quot;hljs-comment&quot;&gt;// incorrect syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = myForm[&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo[]&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// correct syntax&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;including non-ASCII (UTF-8) characters, as in &lt;code&gt;myForm[&quot;&quot;]&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/q/30929233/287948&quot;&gt;more examples&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Secondly, square bracket notation is useful when dealing with\n property names which vary in a predictable way:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(myForm[&lt;span class=&quot;hljs-string&quot;&gt;&quot;myControlNumber&quot;&lt;/span&gt; + i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Roundup:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;Dot notation is faster to write and clearer to read.&lt;/li&gt;\n  &lt;li&gt;Square bracket notation allows access to properties containing\n  special characters and selection of\n  properties using variables&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Another example of characters that can&apos;t be used with dot notation is &lt;em&gt;property names that themselves contain a dot&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example a json response could contain a property called &lt;code&gt;bar.Baz&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = myResponse.&lt;span class=&quot;hljs-property&quot;&gt;bar&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Baz&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// incorrect syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = myResponse[&lt;span class=&quot;hljs-string&quot;&gt;&quot;bar.Baz&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// correct syntax&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The bracket notation allows you to access properties by name stored in a variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = obj[x];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(y); &lt;span class=&quot;hljs-comment&quot;&gt;//output - hello&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;obj.x&lt;/code&gt; would not work in this case.&lt;/p&gt;\n    ","\n&lt;p&gt;The two most common ways to access properties in JavaScript are with a dot and with square brackets. Both &lt;code&gt;value.x&lt;/code&gt; and &lt;code&gt;value[x]&lt;/code&gt; access a property on valuebut not necessarily the same property. &lt;strong&gt;The difference is in how x is interpreted. When using a dot, the part after the dot must be a valid variable name, and it directly names the property. When using square brackets, the expression between the brackets is evaluated to get the property name. Whereas value.x fetches the property of value named x, value[x] tries to evaluate the expression x and uses the result as the property name.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;So if you know that the property you are interested in is called length, you say &lt;code&gt;value.length&lt;/code&gt;. If you want to extract the property named by the value held in the variable &lt;code&gt;i&lt;/code&gt;, you say &lt;code&gt;value[i]&lt;/code&gt;. And because property names can be any string, if you want to access a property named &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;John Doe&lt;/code&gt;, you must use square brackets: &lt;code&gt;value[2]&lt;/code&gt; or &lt;code&gt;value[&quot;John Doe&quot;]&lt;/code&gt;. This is the case even though you know the precise name of the property in advance, because neither &lt;code&gt;2&lt;/code&gt; nor &lt;code&gt;John Doe&lt;/code&gt; is a valid variable name and so cannot be accessed through dot notation.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;In case of Arrays&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The elements in an array are stored in properties. Because the names of these properties are numbers and we often need to get their name from a variable, we have to use the bracket syntax to access them. &lt;strong&gt;The length property of an array tells us how many elements it contains. This property name is a valid variable name, and we know its name in advance, so to find the length of an array, you typically write &lt;code&gt;array.length&lt;/code&gt; because that is easier to write than &lt;code&gt;array[&quot;length&quot;]&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Dot notation does not work with some keywords (like &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) in internet explorer 8.&lt;/p&gt;\n\n&lt;p&gt;I had this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//app.users is a hash&lt;/span&gt;\napp.&lt;span class=&quot;hljs-property&quot;&gt;users&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;new&lt;/span&gt; = {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And this triggers the dreaded &quot;expected indentifier&quot; (at least on IE8 on windows xp, I havn&apos;t tried other environments). The simple fix for that is to switch to bracket notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;app.&lt;span class=&quot;hljs-property&quot;&gt;users&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;new&apos;&lt;/span&gt;] = {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generally speaking, they do the same job.&lt;br&gt;\nNevertheless, the bracket notation gives you the opportunity to do stuff that you can&apos;t do with dot notation, like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = elem[&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo[]&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// can&apos;t do elem.foo[];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can be extended to any property containing special characters.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to use brackets if the property name has special characters:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n}\nfoo[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other than that, I suppose it&apos;s just a matter of taste. IMHO, the dot notation is shorter and it makes it more obvious that it&apos;s a property rather than an array element (although of course JavaScript does not have associative arrays anyway).&lt;/p&gt;\n    ","\n&lt;p&gt;Be careful while using these notations:\nFor eg. if we want to access a function present in the parent of a window.\nIn IE :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;parent&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;func&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is not equivalent to &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.[&lt;span class=&quot;hljs-string&quot;&gt;&apos;parent.func&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We may either use: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;parent&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;func&apos;&lt;/span&gt;] \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;parent&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;func&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to access it&lt;/p&gt;\n    ","\n&lt;p&gt;You have to use square bracket notation when -  &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The property name is number.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ob = {\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;One&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;Seven&apos;&lt;/span&gt;\n}\nob&lt;span class=&quot;hljs-number&quot;&gt;.7&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// SyntaxError&lt;/span&gt;\nob[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Seven&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The property name has special character.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ob = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;This is one&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;This is seven&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,\n}  \nob.&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is one&apos;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// SyntaxError&lt;/span&gt;\nob[&lt;span class=&quot;hljs-string&quot;&gt;&apos;This is one&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The property name is assigned to a variable and you want to access the \nproperty value by this variable.    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ob = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;One&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;Seven&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _Seven = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Seven&apos;&lt;/span&gt;;\nob.&lt;span class=&quot;hljs-property&quot;&gt;_Seven&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\nob[_Seven] &lt;span class=&quot;hljs-comment&quot;&gt;// 7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Both &lt;code&gt;foo.bar&lt;/code&gt; and &lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt; access a property on foo but not necessarily the same property. The difference is in how &lt;code&gt;bar&lt;/code&gt; is interpreted. When using a dot, the word after the dot is the literal name of the property. When using square brackets, the expression between the brackets is evaluated to get the property name. Whereas &lt;code&gt;foo.bar&lt;/code&gt; fetches the\nproperty of value named &lt;code&gt;bar&lt;/code&gt;  , &lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt; tries to evaluate the expression &lt;code&gt;&quot;bar&quot;&lt;/code&gt; and uses the result, converted to a string, as the property name&lt;/p&gt;\n&lt;h2&gt;Dot Notations Limitation&lt;/h2&gt;\n&lt;p&gt;if we take this oject :&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;digit&apos;&lt;/span&gt;,\n  123&lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;start with digit&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;name123&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;does not start with digit&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;$name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;$ sign&apos;&lt;/span&gt;,\n  name-&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;hyphen&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;NAME&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;upper case&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;lower case&apos;&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;accessing their propriete using dot notation&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj&lt;span class=&quot;hljs-number&quot;&gt;.123&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;//  SyntaxError&lt;/span&gt;\nobj.123name;  &lt;span class=&quot;hljs-comment&quot;&gt;//  SyntaxError&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;name123&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;does not start with digit&apos;&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;$name&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;//   &apos;$ sign&apos;&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//  SyntaxError&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-string&quot;&gt;&apos;name-123&apos;&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//  SyntaxError&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;NAME&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;upper case&apos;&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;lower case&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But none of this is a problem for the Bracket Notation:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;];     &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;digit&apos;&lt;/span&gt;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;123name&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;start with digit&apos;&lt;/span&gt;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name123&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;does not start with digit&apos;&lt;/span&gt;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;$name&apos;&lt;/span&gt;];   &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;$ sign&apos;&lt;/span&gt;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name-123&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;does not start with digit&apos;&lt;/span&gt;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NAME&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;upper case&apos;&lt;/span&gt;\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;lower case&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;accessing variable using variable :&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; variable = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;\n};\n&lt;span class=&quot;hljs-comment&quot;&gt;// Bracket Notation&lt;/span&gt;\nobj[variable]; &lt;span class=&quot;hljs-comment&quot;&gt;//  &apos;value&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Dot Notation&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-property&quot;&gt;variable&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Bracket notation can use variables, so it is useful in two instances where dot notation will not work:&lt;/p&gt;\n\n&lt;p&gt;1) When the property names are dynamically determined (when the exact names are not known until runtime).&lt;/p&gt;\n\n&lt;p&gt;2) When using a for..in loop to go through all the properties of an object. &lt;/p&gt;\n\n&lt;p&gt;source: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&quot; rel=&quot;nofollow&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Case where &lt;code&gt;[]&lt;/code&gt; notation is helpful :&lt;/p&gt;\n\n&lt;p&gt;If your object is dynamic and there could be some random values in keys like &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;or any other special character, for example -&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var a = { 1 : 3 };&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Now if you try to access in like &lt;code&gt;a.1&lt;/code&gt; it will through an error, because it is expecting an string over there.&lt;/p&gt;\n    ","\n&lt;p&gt;Let me add some more use case of the square-bracket notation. If you want to access a property say &lt;code&gt;x-proxy&lt;/code&gt; in a object, then &lt;code&gt;-&lt;/code&gt; will be interpreted wrongly. Their are some other cases too like space, dot, etc., where dot operation will not help you. Also if u have the key in a variable then only way to access the value of the key in a object is by bracket notation. Hope you get some more context.&lt;/p&gt;\n    ","\n&lt;p&gt;An example where the dot notation fails&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;json = { \n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;value:&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&apos;help&quot;&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&apos;&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;data+&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;a[]&quot;&lt;/span&gt;:[ \n      &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n      &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n   ]\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// correct&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&apos;value:&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&apos;help&quot;&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;help\\&quot;&quot;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello\\&apos;&apos;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&apos;&quot;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;data+&quot;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;]);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json[&lt;span class=&quot;hljs-string&quot;&gt;&quot;a[]&quot;&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// wrong&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;:);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(json.&lt;span class=&quot;hljs-property&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;);\nconsole.log(json.hello&apos;);\nconsole.log(json.data+);\nconsole.log(json.);\nconsole.log(json.a[]);\n\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The property names shouldn&apos;t interfere with the syntax rules of javascript for you to be able to access them as &lt;code&gt;json.property_name&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Dot notation is always preferable. If you are using some &quot;smarter&quot; IDE or text editor, it will show undefined names from that object. \nUse brackets notation only when you have the name with like dashes or something similar invalid. And also if the name is stored in a variable.&lt;/p&gt;\n    ","\n&lt;p&gt;Or when you want to dynamically change the classList action for an element:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Correct&lt;/span&gt;\n\nshowModal.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;node&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n  node.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-title function_&quot;&gt;changeClass&lt;/span&gt;(findHidden, &lt;span class=&quot;hljs-string&quot;&gt;&apos;remove&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Correct&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n  );\n});\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//correct&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;findHidden, className&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; findHidden) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;[className](&lt;span class=&quot;hljs-string&quot;&gt;&apos;hidden&apos;&lt;/span&gt;));&lt;span class=&quot;hljs-comment&quot;&gt;// Correct&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Incorrect &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;changeClass&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;findHidden, className&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; findHidden) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(item.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;className&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hidden&apos;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// Doesn&apos;t work&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m giving another example to understand the usage differences btw them clearly. When using nested array and nested objects&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myArray = [\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;flowers&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;list&lt;/span&gt;: [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt; ],\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;trees&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;list&lt;/span&gt;: [ &lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;y&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;z&quot;&lt;/span&gt; ],\n  }\n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if we want to access the second item from the trees list &lt;code&gt;means y&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;We can&apos;t use bracket notation all the time&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; secondTree = myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;list&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// incorrect syntex&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Instead, &lt;em&gt;we have to use&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; secondTree = myArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;list&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// correct syntex&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The dot notation and bracket notation both are used to access the object properties in JavaScript. The dot notation is mostly used as it is easier to read and comprehend. So why should we use bracket notation and what is the difference between then? well, the bracket notation &lt;code&gt;[]&lt;/code&gt; allows us to access object properties using variables because it converts the expression inside the square brackets to a string.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; person = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//dot notation&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; nameDot = person.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(nameDot);\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;John&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; nameBracket = person[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(nameBracket);\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;John&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Now, let&apos;s look at a variable example:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; person = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; myName = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(person[myName]);\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;John&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Another advantage is that dot notation only contain be alphanumeric (and _ and $) so for instance, if you want to access an object like the one below (contains &apos;-&apos;, you must use the bracket notation for that)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; person = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;my-name&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(person[&lt;span class=&quot;hljs-string&quot;&gt;&apos;my-name&apos;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;John&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// console.log(person.my-name); // Error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"133":["\n&lt;p&gt;The most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine&apos;s syntax is the syntax of the programming language you&apos;re using. Languages such as Perl remove most of this complication, but you&apos;ll have to keep in mind other considerations if you&apos;re using regular expressions in a C program.&lt;/p&gt;\n&lt;p&gt;If you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.&lt;/p&gt;\n&lt;h2&gt;Start simple&lt;/h2&gt;\n&lt;p&gt;Conceptually, the simplest regular expressions are literal characters. The pattern &lt;code&gt;N&lt;/code&gt; matches the character &apos;N&apos;.&lt;/p&gt;\n&lt;p&gt;Regular expressions next to each other match sequences. For example, the pattern &lt;code&gt;Nick&lt;/code&gt; matches the sequence &apos;N&apos; followed by &apos;i&apos; followed by &apos;c&apos; followed by &apos;k&apos;.&lt;/p&gt;\n&lt;p&gt;If you&apos;ve ever used &lt;code&gt;grep&lt;/code&gt; on Unixeven if only to search for ordinary looking stringsyou&apos;ve already been using regular expressions! (The &lt;code&gt;re&lt;/code&gt; in &lt;code&gt;grep&lt;/code&gt; refers to regular expressions.)&lt;/p&gt;\n&lt;h2&gt;Order from the menu&lt;/h2&gt;\n&lt;p&gt;Adding just a little complexity, you can match either &apos;Nick&apos; or &apos;nick&apos; with the pattern &lt;code&gt;[Nn]ick&lt;/code&gt;. The part in square brackets is a &lt;em&gt;character class&lt;/em&gt;, which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so &lt;code&gt;[a-c]&lt;/code&gt; matches either &apos;a&apos; or &apos;b&apos; or &apos;c&apos;.&lt;/p&gt;\n&lt;p&gt;The pattern &lt;code&gt;.&lt;/code&gt; is special: rather than matching a literal dot only, it matches &lt;em&gt;any&lt;/em&gt; character&lt;sup&gt;&lt;/sup&gt;. It&apos;s the same conceptually as the really big character class &lt;code&gt;[-.?+%$A-Za-z0-9...]&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Think of character classes as menus: pick just one.&lt;/p&gt;\n&lt;h2&gt;Helpful shortcuts&lt;/h2&gt;\n&lt;p&gt;Using &lt;code&gt;.&lt;/code&gt; can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match a digit: one way to write that is &lt;code&gt;[0-9]&lt;/code&gt;. Digits are a frequent match target, so you could instead use the shortcut &lt;code&gt;\\d&lt;/code&gt;. Others are &lt;code&gt;\\s&lt;/code&gt; (whitespace) and &lt;code&gt;\\w&lt;/code&gt; (word characters: alphanumerics or underscore).&lt;/p&gt;\n&lt;p&gt;The uppercased variants are their complements, so &lt;code&gt;\\S&lt;/code&gt; matches any &lt;em&gt;non&lt;/em&gt;-whitespace character, for example.&lt;/p&gt;\n&lt;h2&gt;Once is not enough&lt;/h2&gt;\n&lt;p&gt;From there, you can repeat parts of your pattern with &lt;em&gt;quantifiers&lt;/em&gt;. For example, the pattern &lt;code&gt;ab?c&lt;/code&gt; matches &apos;abc&apos; or &apos;ac&apos; because the &lt;code&gt;?&lt;/code&gt; quantifier makes the subpattern it modifies optional. Other quantifiers are&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;*&lt;/code&gt; (zero or more times)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;+&lt;/code&gt; (one or more times)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt; (exactly &lt;em&gt;n&lt;/em&gt; times)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt; (at least &lt;em&gt;n&lt;/em&gt; times)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;{n,m}&lt;/code&gt; (at least &lt;em&gt;n&lt;/em&gt; times but no more than &lt;em&gt;m&lt;/em&gt; times)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Putting some of these blocks together, the pattern &lt;code&gt;[Nn]*ick&lt;/code&gt; matches all of&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;ick&lt;/li&gt;\n&lt;li&gt;Nick&lt;/li&gt;\n&lt;li&gt;nick&lt;/li&gt;\n&lt;li&gt;Nnick&lt;/li&gt;\n&lt;li&gt;nNick&lt;/li&gt;\n&lt;li&gt;nnick&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;(and so on)&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The first match demonstrates an important lesson: &lt;em&gt;&lt;code&gt;*&lt;/code&gt; always succeeds!&lt;/em&gt; Any pattern can match zero times.&lt;/p&gt;\n&lt;p&gt;A few other useful examples:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[0-9]+&lt;/code&gt; (and its equivalent &lt;code&gt;\\d+&lt;/code&gt;) matches any non-negative integer&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\d{4}-\\d{2}-\\d{2}&lt;/code&gt; matches dates formatted like 2019-01-01&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Grouping&lt;/h2&gt;\n&lt;p&gt;A quantifier modifies the pattern to its immediate left. You might expect &lt;code&gt;0abc+0&lt;/code&gt; to match &apos;0abc0&apos;, &apos;0abcabc0&apos;, and so forth, but the pattern &lt;em&gt;immediately&lt;/em&gt; to the left of the plus quantifier is &lt;code&gt;c&lt;/code&gt;. This means &lt;code&gt;0abc+0&lt;/code&gt; matches &apos;0abc0&apos;, &apos;0abcc0&apos;, &apos;0abccc0&apos;, and so on.&lt;/p&gt;\n&lt;p&gt;To match one or more sequences of &apos;abc&apos; with zeros on the ends, use &lt;code&gt;0(abc)+0&lt;/code&gt;. The parentheses denote a subpattern that can be quantified as a unit. It&apos;s also common for regular expression engines to save or &quot;capture&quot; the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and &lt;code&gt;substr&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;Alternation&lt;/h2&gt;\n&lt;p&gt;Earlier, we saw one way to match either &apos;Nick&apos; or &apos;nick&apos;. Another is with alternation as in &lt;code&gt;Nick|nick&lt;/code&gt;. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of &lt;code&gt;|&lt;/code&gt;, &lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;(Nick|nick)&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;For another example, you could equivalently write &lt;code&gt;[a-c]&lt;/code&gt; as &lt;code&gt;a|b|c&lt;/code&gt;, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.&lt;/p&gt;\n&lt;h2&gt;Escaping&lt;/h2&gt;\n&lt;p&gt;Although some characters match themselves, others have special meanings. The pattern &lt;code&gt;\\d+&lt;/code&gt; doesn&apos;t match backslash followed by lowercase D followed by a plus sign: to get that, we&apos;d use &lt;code&gt;\\\\d\\+&lt;/code&gt;. A backslash removes the special meaning from the following character.&lt;/p&gt;\n&lt;h2&gt;Greediness&lt;/h2&gt;\n&lt;p&gt;Regular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.&lt;/p&gt;\n&lt;p&gt;For example, say the input is&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&quot;Hello,&quot; she said, &quot;How are you?&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;You might expect &lt;code&gt;&quot;.+&quot;&lt;/code&gt; to match only &apos;Hello,&apos; and will then be surprised when you see that it matched from &apos;Hello&apos; all the way through &apos;you?&apos;.&lt;/p&gt;\n&lt;p&gt;To switch from greedy to what you might think of as cautious, add an extra &lt;code&gt;?&lt;/code&gt; to the quantifier. Now you understand how &lt;code&gt;\\((.+?)\\)&lt;/code&gt;, the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.&lt;/p&gt;\n&lt;p&gt;If your input is &apos;(123) (456)&apos;, then the first capture will be &apos;123&apos;. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.&lt;/p&gt;\n&lt;p&gt;(As to your confusion, I don&apos;t know of any regular-expression dialect where &lt;code&gt;((.+?))&lt;/code&gt; would do the same thing. I suspect something got lost in transmission somewhere along the way.)&lt;/p&gt;\n&lt;h2&gt;Anchors&lt;/h2&gt;\n&lt;p&gt;Use the special pattern &lt;code&gt;^&lt;/code&gt; to match only at the beginning of your input and &lt;code&gt;$&lt;/code&gt; to match only at the end. Making &quot;bookends&quot; with your patterns where you say, &quot;I know what&apos;s at the front and back, but give me everything between&quot; is a useful technique.&lt;/p&gt;\n&lt;p&gt;Say you want to match comments of the form&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;-- This is a comment --&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;you&apos;d write &lt;code&gt;^--\\s+(.+)\\s+--$&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;Build your own&lt;/h2&gt;\n&lt;p&gt;Regular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.&lt;/p&gt;\n&lt;h2&gt;Tools for writing and debugging regexes:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://regexr.com/&quot; rel=&quot;noreferrer&quot;&gt;RegExr&lt;/a&gt; (for JavaScript)&lt;/li&gt;\n&lt;li&gt;Perl: &lt;a href=&quot;https://metacpan.org/release/YAPE-Regex-Explain&quot; rel=&quot;noreferrer&quot;&gt;YAPE: Regex Explain&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://weitz.de/regex-coach/&quot; rel=&quot;noreferrer&quot;&gt;Regex Coach&lt;/a&gt; (engine backed by &lt;a href=&quot;https://edicl.github.io/cl-ppcre/&quot; rel=&quot;noreferrer&quot;&gt;CL-PPCRE&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regexpal.com/&quot; rel=&quot;noreferrer&quot;&gt;RegexPal&lt;/a&gt; (for JavaScript)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regular-expressions.info/&quot; rel=&quot;noreferrer&quot;&gt;Regular Expressions Online Tester&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regexbuddy.com/&quot; rel=&quot;noreferrer&quot;&gt;Regex Buddy&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://regex101.com/&quot; rel=&quot;noreferrer&quot;&gt;Regex 101&lt;/a&gt; (for PCRE, JavaScript, Python, Golang, Java 8)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://ihateregex.io/&quot; rel=&quot;noreferrer&quot;&gt;I Hate Regex&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://laurent.riesterer.free.fr/regexp/&quot; rel=&quot;noreferrer&quot;&gt;Visual RegExp&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.ultrapico.com/Expresso.htm&quot; rel=&quot;noreferrer&quot;&gt;Expresso&lt;/a&gt; (for .NET)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://rubular.com/&quot; rel=&quot;noreferrer&quot;&gt;Rubular&lt;/a&gt; (for Ruby)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://regexlib.com/Default.aspx&quot; rel=&quot;noreferrer&quot;&gt;Regular Expression Library&lt;/a&gt; (Predefined Regexes for common scenarios)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.txt2re.com/&quot; rel=&quot;noreferrer&quot;&gt;Txt2RE&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.regextester.com/&quot; rel=&quot;noreferrer&quot;&gt;Regex Tester&lt;/a&gt; (for JavaScript)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://regexstorm.net/&quot; rel=&quot;noreferrer&quot;&gt;Regex Storm&lt;/a&gt; (for .NET)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.debuggex.com/&quot; rel=&quot;noreferrer&quot;&gt;Debuggex&lt;/a&gt; (visual regex tester and helper)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Books&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://oreilly.com/catalog/9780596528126/&quot; rel=&quot;noreferrer&quot;&gt;Mastering Regular Expressions&lt;/a&gt;, the &lt;a href=&quot;http://oreilly.com/catalog/9780596002893&quot; rel=&quot;noreferrer&quot;&gt;2nd Edition&lt;/a&gt;, and the &lt;a href=&quot;http://shop.oreilly.com/product/9780596528126.do&quot; rel=&quot;noreferrer&quot;&gt;3rd edition&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot; rel=&quot;noreferrer&quot;&gt;Regular Expressions Cheat Sheet&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/1449319432&quot; rel=&quot;noreferrer&quot;&gt;Regex Cookbook&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/0672325667&quot; rel=&quot;noreferrer&quot;&gt;Teach Yourself Regular Expressions&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Free resources&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://regexone.com/&quot; rel=&quot;noreferrer&quot;&gt;RegexOne - Learn with simple, interactive exercises.&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://neverfear.org/blog/view/Regex_tutorial_for_people_who_should_know_Regex__but_do_not___Part_1&quot; rel=&quot;noreferrer&quot;&gt;Regular Expressions - Everything you should know&lt;/a&gt; (PDF Series)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.greenend.org.uk/rjk/2002/06/regexp.html&quot; rel=&quot;noreferrer&quot;&gt;Regex Syntax Summary&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://perl.plover.com/Regex/&quot; rel=&quot;noreferrer&quot;&gt;How Regexes Work&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Footnote&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;:&lt;/strong&gt; The statement above that &lt;code&gt;.&lt;/code&gt; matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, &lt;code&gt;&quot;\\n&quot;&lt;/code&gt;, but in practice you rarely expect a pattern such as &lt;code&gt;.+&lt;/code&gt; to cross a newline boundary. Perl regexes have a &lt;a href=&quot;https://perldoc.perl.org/perlre.html#s&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;/s&lt;/code&gt; switch&lt;/a&gt; and Java &lt;a href=&quot;https://docs.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html#DOTALL&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Pattern.DOTALL&lt;/code&gt;&lt;/a&gt;, for example, to make &lt;code&gt;.&lt;/code&gt; match any character at all. For languages that don&apos;t have such a feature, you can use something like &lt;code&gt;[\\s\\S]&lt;/code&gt; to match &quot;any whitespace or any non-whitespace&quot;, in other words anything.&lt;/p&gt;\n    "],"134":["\n&lt;p&gt;The difference is that &lt;code&gt;functionOne&lt;/code&gt; is a function expression and so only defined when that line is reached, whereas &lt;code&gt;functionTwo&lt;/code&gt; is a function declaration and is defined as soon as its surrounding function or script is executed (due to &lt;a href=&quot;http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html&quot; rel=&quot;noreferrer&quot;&gt;hoisting&lt;/a&gt;).  &lt;/p&gt;\n\n&lt;p&gt;For example, a function expression:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// TypeError: functionOne is not a function&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);\n};&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;And, a function declaration:   &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Outputs: &quot;Hello!&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Historically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;    \n{ &lt;span class=&quot;hljs-comment&quot;&gt;// note this block!&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionThree&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;);\n  }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;functionThree&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// ReferenceError&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;First I want to correct Greg: &lt;code&gt;function abc(){}&lt;/code&gt; is scoped too  the name &lt;code&gt;abc&lt;/code&gt; is defined in the scope where this definition is encountered. Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;xyz&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n  &lt;span class=&quot;hljs-comment&quot;&gt;// abc is defined here...&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...but not here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Secondly, it is possible to combine both styles:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;xyz&lt;/code&gt; is going to be defined as usual, &lt;code&gt;abc&lt;/code&gt; is undefined in all browsers but Internet&amp;nbsp;Explorer  do not rely on it being defined. But it will be defined inside its body:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// xyz is visible here&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// abc is visible here&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// xyz is visible here&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// abc is undefined here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to alias functions on all browsers, use this kind of declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = abc;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case, both &lt;code&gt;xyz&lt;/code&gt; and &lt;code&gt;abc&lt;/code&gt; are aliases of the same object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(xyz === abc); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;true&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One compelling reason to use the combined style is the &quot;name&quot; attribute of function objects (&lt;strong&gt;not supported by Internet&amp;nbsp;Explorer&lt;/strong&gt;). Basically when you define a function like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(abc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;abc&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;its name is automatically assigned. But when you define it like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(abc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;its name is empty  we created an anonymous function and assigned it to some variable.&lt;/p&gt;\n\n&lt;p&gt;Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Assume really.long.external.scoped is {}&lt;/span&gt;\nreally.&lt;span class=&quot;hljs-property&quot;&gt;long&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;external&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scoped&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;shortcut&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Let it call itself recursively:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;shortcut&lt;/span&gt;(n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Let it pass itself as a callback:&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_&quot;&gt;someFunction&lt;/span&gt;(shortcut);\n  &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the example above we can do the same with an external name, but it&apos;ll be too unwieldy (and slower).&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(Another way to refer to itself is to use &lt;code&gt;arguments.callee&lt;/code&gt;, which is still relatively long, and not supported in the strict mode.)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Deep down, JavaScript treats both statements differently. This is a function declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;abc&lt;/code&gt; here is defined everywhere in the current scope:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Yet, it is defined down there.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it again&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, it hoisted through a &lt;code&gt;return&lt;/code&gt; statement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is a function expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;xyz&lt;/code&gt; here is defined from the point of assignment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We can&apos;t call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;xyz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// UNDEFINED!!!&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now it is defined&lt;/span&gt;\nxyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// We can call it here&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;xyz&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.&lt;/p&gt;\n\n&lt;p&gt;Fun fact:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xyz = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(xyz.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Prints &quot;abc&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Personally, I prefer the &quot;function expression&quot; declaration because this way I can control the visibility. When I define the function like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know that I defined the function locally. When I define the function like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know that I defined it globally providing that I didn&apos;t define &lt;code&gt;abc&lt;/code&gt; anywhere in the chain of scopes. This style of definition is resilient even when used inside &lt;code&gt;eval()&lt;/code&gt;. While the definition&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;depends on the context and may leave you guessing where it is actually defined, especially in the case of &lt;code&gt;eval()&lt;/code&gt;  the answer is: It depends on the browser.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s the rundown on the standard forms that create functions: &lt;em&gt;(Originally written for another question, but adapted after being moved into the canonical question.)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Terms:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;ES5&lt;/strong&gt;: &lt;a href=&quot;http://ecma-international.org/ecma-262/5.1/&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 5th edition&lt;/a&gt;, 2009&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;ES2015&lt;/strong&gt;: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015&lt;/a&gt; (also known as &quot;ES6&quot;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The quick list:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Function Declaration&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&quot;Anonymous&quot; &lt;code&gt;function&lt;/code&gt; Expression &lt;em&gt;(which despite the term, sometimes create functions with names)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Named &lt;code&gt;function&lt;/code&gt; Expression&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Accessor Function Initializer (ES5+)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Arrow Function Expression (ES2015+) &lt;em&gt;(which, like anonymous function expressions, don&apos;t involve an explicit name, and yet can create functions with names)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Method Declaration in Object Initializer (ES2015+)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Constructor and Method Declarations in &lt;code&gt;class&lt;/code&gt; (ES2015+)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Function Declaration&lt;/h3&gt;\n\n&lt;p&gt;The first form is a &lt;em&gt;function declaration&lt;/em&gt;, which looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A function declaration is a &lt;em&gt;declaration&lt;/em&gt;; it&apos;s not a statement or expression. As such, you don&apos;t follow it with a &lt;code&gt;;&lt;/code&gt; (although doing so is harmless).&lt;/p&gt;\n\n&lt;p&gt;A function declaration is processed when execution enters the context in which it appears, &lt;strong&gt;before&lt;/strong&gt; any step-by-step code is executed. The function it creates is given a proper name (&lt;code&gt;x&lt;/code&gt; in the example above), and that name is put in the scope in which the declaration appears.&lt;/p&gt;\n\n&lt;p&gt;Because it&apos;s processed before any step-by-step code in the same context, you can do things like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Works even though it&apos;s above the declaration&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Until ES2015, the spec didn&apos;t cover what a JavaScript engine should do if you put a function declaration inside a control structure like &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, etc., like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;===== HERE THERE&lt;/span&gt;\n    }                   &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;===== BE DRAGONS&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And since they&apos;re processed &lt;em&gt;before&lt;/em&gt; step-by-step code is run, it&apos;s tricky to know what to do when they&apos;re in a control structure.&lt;/p&gt;\n\n&lt;p&gt;Although doing this wasn&apos;t &lt;em&gt;specified&lt;/em&gt; until ES2015, it was an &lt;em&gt;allowable extension&lt;/em&gt; to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.&lt;/p&gt;\n\n&lt;p&gt;As of ES2015, the specification says what to do. In fact, it gives three separate things to do:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If in loose mode &lt;em&gt;not&lt;/em&gt; on a web browser, the JavaScript engine is supposed to do one thing&lt;/li&gt;\n&lt;li&gt;If in loose mode on a web browser, the JavaScript engine is supposed to do something else&lt;/li&gt;\n&lt;li&gt;If in &lt;em&gt;strict&lt;/em&gt; mode (browser or not), the JavaScript engine is supposed to do yet another thing&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The rules for the loose modes are tricky, but in &lt;em&gt;strict&lt;/em&gt; mode, function declarations in blocks are easy: They&apos;re local to the block (they have &lt;em&gt;block scope&lt;/em&gt;, which is also new in ES2015), and they&apos;re hoisted to the top of the block. So:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();               &lt;span class=&quot;hljs-comment&quot;&gt;// Works just fine&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    }\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; foo); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;undefined&quot; (`foo` is not in scope here&lt;/span&gt;\n                         &lt;span class=&quot;hljs-comment&quot;&gt;// because it&apos;s not in the same block)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;&quot;Anonymous&quot; &lt;code&gt;function&lt;/code&gt; Expression&lt;/h3&gt;\n\n&lt;p&gt;The second common form is called an &lt;em&gt;anonymous function expression&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;);\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Like all expressions, it&apos;s evaluated when it&apos;s reached in the step-by-step execution of the code.&lt;/p&gt;\n\n&lt;p&gt;In ES5, the function this creates has no name (it&apos;s anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be &lt;code&gt;y&lt;/code&gt;. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for &lt;code&gt;SetFunctionName&lt;/code&gt; in the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot; rel=&quot;noreferrer&quot;&gt;the specification&lt;/a&gt;&amp;nbsp; it appears &lt;em&gt;all over&lt;/em&gt; the place.)&lt;/p&gt;\n\n&lt;h3&gt;Named &lt;code&gt;function&lt;/code&gt; Expression&lt;/h3&gt;\n\n&lt;p&gt;The third form is a &lt;em&gt;named function expression&lt;/em&gt; (&quot;NFE&quot;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;w&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;zw&apos;&lt;/span&gt;)\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function this creates has a proper name (&lt;code&gt;w&lt;/code&gt; in this case). Like all expressions, this is evaluated when it&apos;s reached in the step-by-step execution of the code. The name of the function is &lt;em&gt;not&lt;/em&gt; added to the scope in which the expression appears; the name &lt;em&gt;is&lt;/em&gt; in scope within the function itself:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;w&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; w); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;function&quot;&lt;/span&gt;\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; w);     &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs &lt;a href=&quot;http://blog.niftysnippets.org/2010/09/double-take.html&quot; rel=&quot;noreferrer&quot;&gt;completely incorrectly&lt;/a&gt;, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don&apos;t have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)&lt;/p&gt;\n\n&lt;h3&gt;Accessor Function Initializer (ES5+)&lt;/h3&gt;\n\n&lt;p&gt;Sometimes functions can sneak in largely unnoticed; that&apos;s the case with &lt;em&gt;accessor functions&lt;/em&gt;. Here&apos;s an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n    &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;;\n    },\n    &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = v;\n    }\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;);         &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; obj.&lt;span class=&quot;hljs-property&quot;&gt;f&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;number&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that when I used the function, I didn&apos;t use &lt;code&gt;()&lt;/code&gt;! That&apos;s because it&apos;s an &lt;em&gt;accessor function&lt;/em&gt; for a property. We get and set the property in the normal way, but behind the scenes, the function is called.&lt;/p&gt;\n\n&lt;p&gt;You can also create accessor functions with &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and the lesser-known second argument to &lt;code&gt;Object.create&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h3&gt;Arrow Function Expression (ES2015+)&lt;/h3&gt;\n\n&lt;p&gt;ES2015 brings us the &lt;em&gt;arrow function&lt;/em&gt;. Here&apos;s one example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; n * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 2, 4, 6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See that &lt;code&gt;n =&amp;gt; n * 2&lt;/code&gt; thing hiding in the &lt;code&gt;map()&lt;/code&gt; call? That&apos;s a function.&lt;/p&gt;\n\n&lt;p&gt;A couple of things about arrow functions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;They don&apos;t have their own &lt;code&gt;this&lt;/code&gt;. Instead, they &lt;em&gt;close over&lt;/em&gt; the &lt;code&gt;this&lt;/code&gt; of the context where they&apos;re defined. (They also close over &lt;code&gt;arguments&lt;/code&gt; and, where relevant, &lt;code&gt;super&lt;/code&gt;.) This means that the &lt;code&gt;this&lt;/code&gt; within them is the same as the &lt;code&gt;this&lt;/code&gt; where they&apos;re created, and cannot be changed.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;As you&apos;ll have noticed with the above, you don&apos;t use the keyword &lt;code&gt;function&lt;/code&gt;; instead, you use &lt;code&gt;=&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The &lt;code&gt;n =&amp;gt; n * 2&lt;/code&gt; example above is one form of them. If you have multiple arguments to pass the function, you use parens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n, i&lt;/span&gt;) =&amp;gt;&lt;/span&gt; n * i);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;, &quot;&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 0, 2, 6&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Remember that &lt;code&gt;Array#map&lt;/code&gt; passes the entry as the first argument, and the index as the second.)&lt;/p&gt;\n\n&lt;p&gt;In both cases, the body of the function is just an expression; the function&apos;s return value will automatically be the result of that expression (you don&apos;t use an explicit &lt;code&gt;return&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re doing more than just a single expression, use &lt;code&gt;{}&lt;/code&gt; and an explicit &lt;code&gt;return&lt;/code&gt; (if you need to return a value), as normal:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [\n  {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bloggs&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Albert&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bloggs&quot;&lt;/span&gt;},\n  {&lt;span class=&quot;hljs-attr&quot;&gt;first&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;last&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Albright&quot;&lt;/span&gt;}\n];\na = a.&lt;span class=&quot;hljs-title function_&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rv = a.&lt;span class=&quot;hljs-property&quot;&gt;last&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;last&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rv === &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    rv = a.&lt;span class=&quot;hljs-property&quot;&gt;first&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;localeCompare&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;first&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; rv;\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(a));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The version without &lt;code&gt;{ ... }&lt;/code&gt; is called an arrow function with an &lt;em&gt;expression body&lt;/em&gt; or &lt;em&gt;concise body&lt;/em&gt;. (Also: A &lt;em&gt;concise&lt;/em&gt; arrow function.) The one with &lt;code&gt;{ ... }&lt;/code&gt; defining the body is an arrow function with a &lt;em&gt;function body&lt;/em&gt;. (Also: A &lt;em&gt;verbose&lt;/em&gt; arrow function.)&lt;/p&gt;\n\n&lt;h3&gt;Method Declaration in Object Initializer (ES2015+)&lt;/h3&gt;\n\n&lt;p&gt;ES2015 allows a shorter form of declaring a property that references a function called a &lt;em&gt;method definition&lt;/em&gt;; it looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the almost-equivalent in ES5 and earlier would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; o = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the difference (other than verbosity) is that a method can use &lt;code&gt;super&lt;/code&gt;, but a function cannot. So for instance, if you had an object that defined (say) &lt;code&gt;valueOf&lt;/code&gt; using method syntax, it could use &lt;code&gt;super.valueOf()&lt;/code&gt; to get the value &lt;code&gt;Object.prototype.valueOf&lt;/code&gt; would have returned (before presumably doing something else with it), whereas the ES5 version would have to do &lt;code&gt;Object.prototype.valueOf.call(this)&lt;/code&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;That also means that the method has a reference to the object it was defined on, so if that object is temporary (for instance, you&apos;re passing it into &lt;code&gt;Object.assign&lt;/code&gt; as one of the source objects), method syntax &lt;em&gt;could&lt;/em&gt; mean that the object is retained in memory when otherwise it could have been garbage collected (if the JavaScript engine doesn&apos;t detect that situation and handle it if none of the methods uses &lt;code&gt;super&lt;/code&gt;).&lt;/p&gt;\n\n&lt;h3&gt;Constructor and Method Declarations in &lt;code&gt;class&lt;/code&gt; (ES2015+)&lt;/h3&gt;\n\n&lt;p&gt;ES2015 brings us &lt;code&gt;class&lt;/code&gt; syntax, including declared constructors and methods:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;firstName, lastName&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; = firstName;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt; = lastName;\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;getFullName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;firstName&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;lastName&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are two function declarations above: One for the constructor, which gets the name &lt;code&gt;Person&lt;/code&gt;, and one for &lt;code&gt;getFullName&lt;/code&gt;, which is a function assigned to &lt;code&gt;Person.prototype&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Speaking about the global context, both, the &lt;code&gt;var&lt;/code&gt; statement and a &lt;code&gt;FunctionDeclaration&lt;/code&gt; at the end will create a &lt;em&gt;non-deleteable&lt;/em&gt; property on the global object, but the value of both &lt;em&gt;can be overwritten&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;The subtle difference between the two ways is that when the &lt;a href=&quot;http://bclary.com/2004/11/07/#a-10.1.3&quot; rel=&quot;noreferrer&quot;&gt;Variable Instantiation&lt;/a&gt; process runs (before the actual code execution) all identifiers declared with &lt;code&gt;var&lt;/code&gt; will be initialized with &lt;code&gt;undefined&lt;/code&gt;, and the ones used by the &lt;code&gt;FunctionDeclaration&lt;/code&gt;&apos;s will be available since that moment, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; foo); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;function&apos;, it&apos;s already available&lt;/span&gt;\n &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; bar); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;undefined&apos;&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; () {}\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; bar); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;function&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The assignment of the &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;FunctionExpression&lt;/code&gt; takes place until runtime.&lt;/p&gt;\n\n&lt;p&gt;A global property created by a &lt;code&gt;FunctionDeclaration&lt;/code&gt; can be overwritten without any problems just like a variable value, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt; () {}\n test = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another obvious difference between your two examples is that the first function doesn&apos;t have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).&lt;/p&gt;\n\n&lt;p&gt;About your edited first example (&lt;code&gt;foo = function() { alert(&apos;hello!&apos;); };&lt;/code&gt;), it is an undeclared assignment, I would highly encourage you to always use the &lt;code&gt;var&lt;/code&gt; keyword.&lt;/p&gt;\n\n&lt;p&gt;With an assignment, without the &lt;code&gt;var&lt;/code&gt; statement, if the referenced identifier is not found in the scope chain, it will become a &lt;em&gt;deleteable&lt;/em&gt; property of the global object.&lt;/p&gt;\n\n&lt;p&gt;Also, undeclared assignments throw a &lt;code&gt;ReferenceError&lt;/code&gt; on ECMAScript 5 under &lt;a href=&quot;http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/&quot; rel=&quot;noreferrer&quot;&gt;Strict Mode&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;A must read:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://kangax.github.com/nfe/&quot; rel=&quot;noreferrer&quot;&gt;Named function expressions demystified&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This answer has been merged from &lt;a href=&quot;https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function&quot;&gt;another question&lt;/a&gt;, in which the major doubt and misconception from the OP was that identifiers declared with a &lt;code&gt;FunctionDeclaration&lt;/code&gt;, couldn&apos;t be overwritten which is not the case.&lt;/p&gt;\n    ","\n&lt;p&gt;The two code snippets you&apos;ve posted there will, for almost all purposes, behave the same way.&lt;/p&gt;\n\n&lt;p&gt;However, the difference in behaviour is that with the first variant (&lt;code&gt;var functionOne = function() {}&lt;/code&gt;), that function can only be called after that point in the code.&lt;/p&gt;\n\n&lt;p&gt;With the second variant (&lt;code&gt;function functionTwo()&lt;/code&gt;), the function is available to code that runs above where the function is declared.&lt;/p&gt;\n\n&lt;p&gt;This is because with the first variant, the function is assigned to the variable &lt;code&gt;foo&lt;/code&gt; at run time. In the second, the function is assigned to that identifier, &lt;code&gt;foo&lt;/code&gt;, at parse time.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;More technical information&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;JavaScript has three ways of defining functions.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Your first snippet shows a &lt;strong&gt;function expression&lt;/strong&gt;. This involves using the &lt;em&gt;&quot;function&quot; operator&lt;/em&gt; to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an &quot;anonymous function&quot;, because it does not have to have a name,&lt;/li&gt;\n&lt;li&gt;Your second example is a &lt;strong&gt;function declaration&lt;/strong&gt;. This uses the &lt;em&gt;&quot;function&quot; statement&lt;/em&gt; to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.&lt;/li&gt;\n&lt;li&gt;The third way of defining a function is the &lt;strong&gt;&quot;Function()&quot; constructor&lt;/strong&gt;, which is not shown in your original post. It&apos;s not recommended to use this as it works the same way as &lt;code&gt;eval()&lt;/code&gt;, which has its problems.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;A better explanation to &lt;a href=&quot;https://stackoverflow.com/a/336868/2351696&quot;&gt;Greg&apos;s answer&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Why no error? We were always taught that expressions are executed from top to bottom(??)&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;Because:&lt;/h2&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Function declarations and variable declarations are always moved (&lt;code&gt;hoisted&lt;/code&gt;) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. &lt;a href=&quot;http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting&quot; rel=&quot;noreferrer&quot;&gt;ben cherry&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This means that code like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();                  ---------------      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne;\n                                | is actually |      &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){   | interpreted |--&amp;gt;\n};                              |    like     |      functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n                                ---------------      };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;But in the case with function declarations, the entire function body will be hoisted as well&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();              ---------------      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                            | is actually |      };\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {    | interpreted |--&amp;gt;\n}                           |    like     |      &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n                            ---------------\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the &quot;assignment&quot; variation can set a property of another object.&lt;/p&gt;\n\n&lt;p&gt;I often build JavaScript modules with a pattern like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt; = {};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;privateUtil&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            ...\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;publicUtil&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            ...\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;exports&lt;/span&gt;;\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this pattern, your public functions will all use assignment, while your private functions use declaration.&lt;/p&gt;\n\n&lt;p&gt;(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)&lt;/p&gt;\n    ","\n&lt;p&gt;An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function&apos;s previous definitions.&lt;/p&gt;\n\n&lt;p&gt;With&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;myfunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;, this definition of &lt;code&gt;myfunction&lt;/code&gt; will override any previous definition, since it will be done at parse-time.&lt;/p&gt;\n\n&lt;p&gt;While&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myfunction = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;does the correct job of defining &lt;code&gt;myfunction&lt;/code&gt; only when &lt;code&gt;condition&lt;/code&gt; is met.&lt;/p&gt;\n    ","\n&lt;p&gt;An important reason is to add one and only one variable as the &quot;Root&quot; of your namespace...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyNamespace&lt;/span&gt; = {}\n&lt;span class=&quot;hljs-title class_&quot;&gt;MyNamespace&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foo&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyNamespace&lt;/span&gt; = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  },\n  ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are many techniques for namespacing. It&apos;s become more important with the plethora of JavaScript modules available.&lt;/p&gt;\n\n&lt;p&gt;Also see &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/881515/&quot;&gt;How do I declare a namespace in JavaScript?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.sitepoint.com/back-to-basics-javascript-hoisting/&quot; rel=&quot;noreferrer&quot;&gt;Hoisting&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;is the JavaScript interpreters action of moving all variable and function declarations to the top of the current scope.&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;However, only the actual declarations are hoisted. by leaving assignments where they are.&lt;/em&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;variable&apos;s/Function&apos;s declared inside the page are global can access anywhere in that page.&lt;/li&gt;\n&lt;li&gt;variable&apos;s/Functions declared inside the function are having local scope. means they are available/accessed inside the function body (scope), they are not available outside the function body.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables&quot; rel=&quot;noreferrer&quot;&gt;Variable&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Javascript is called loosely typed language. Which means Javascript variables can hold value of any &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/7wkd9z69(v=vs.94).aspx&quot; rel=&quot;noreferrer&quot;&gt;Data-Type&lt;/a&gt;. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;global_Page = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;                                               &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; global_Page;      « &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n    « &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt; literal, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;.   -------------------       global_Page = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;     « &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;         \nglobal_Page = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Yash&apos;&lt;/span&gt;;                 |   &lt;span class=&quot;hljs-title class_&quot;&gt;Interpreted&lt;/span&gt;   |       global_Page = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Yash&apos;&lt;/span&gt;; « &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;\n    « &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; literal, &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;.    «       &lt;span class=&quot;hljs-variable constant_&quot;&gt;AS&lt;/span&gt;        «       global_Page = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;   « &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; global_Page = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;               |                 |       global_Page = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){          « &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;\n    « &lt;span class=&quot;hljs-title class_&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Type&lt;/span&gt;                    -------------------                 &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local_functionblock;  « &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nglobal_Page = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){                                                local_functionblock = &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt;;« &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; local_functionblock = &lt;span class=&quot;hljs-number&quot;&gt;777&lt;/span&gt;;                              };  \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Assigning function as a data.&lt;/span&gt;\n};  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Identifier_opt&lt;/span&gt; ( &lt;span class=&quot;hljs-title class_&quot;&gt;FormalParameterList&lt;/span&gt;_opt ) { \n      &lt;span class=&quot;hljs-title class_&quot;&gt;FunctionBody&lt;/span&gt; | sequence &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; statements\n\n      « &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;  &lt;span class=&quot;hljs-title class_&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n      « &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;some data&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;functions declared inside the page are hoisted to top of the page having global access.&lt;/li&gt;\n&lt;li&gt;functions declared inside the function-block are hoisted to top of the block.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Default return value of function is &apos;&lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/&quot; rel=&quot;noreferrer&quot;&gt;undefined&lt;/a&gt;&apos;, &lt;a href=&quot;http://javascript.info/tutorial/variables-and-statements&quot; rel=&quot;noreferrer&quot;&gt;Variable&lt;/a&gt; declaration default value also &apos;undefined&apos;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; respect to &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;-block &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt;. \n&lt;span class=&quot;hljs-title class_&quot;&gt;Scope&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; respect to page &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; | not available.\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Function Declaration&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {                                  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {      \n}                                  -------------------     }\n&lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;();                    |                 |     &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { « &lt;span class=&quot;hljs-title class_&quot;&gt;Re&lt;/span&gt;-&lt;span class=&quot;hljs-title class_&quot;&gt;Defined&lt;/span&gt; / overridden.\n&lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;();                     «   &lt;span class=&quot;hljs-title class_&quot;&gt;Hoisted&lt;/span&gt;  &lt;span class=&quot;hljs-title class_&quot;&gt;As&lt;/span&gt;   «         &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {          |                 |         }\n     &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;();                -------------------         &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(); « &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; accessed &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;() only.\n     &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {                              }\n     }                                                     &lt;span class=&quot;hljs-title function_&quot;&gt;globalAccess&lt;/span&gt;();\n}                                                          &lt;span class=&quot;hljs-title function_&quot;&gt;localAccess&lt;/span&gt;(); « &lt;span class=&quot;hljs-title class_&quot;&gt;ReferenceError&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; the &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; is not defined\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Function Expression&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;        &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;                 « literal\n       (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);                « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt;                (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a;                      \n    a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;                 « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt;              a.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;()  -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;invoke&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {        « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Self Invoking&apos;&lt;/span&gt;);                      (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n});                                                               }) () -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Self Invoking&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f; \n    f = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){        « &lt;span class=&quot;hljs-title class_&quot;&gt;Expression&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Function&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;var Function&apos;&lt;/span&gt;);                                   f ()  -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;var Function&apos;&lt;/span&gt;\n    };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Function assigned to variable Example:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;selfExecuting&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;IIFE - Immediately-Invoked Function Expression&apos;&lt;/span&gt;);\n}());\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anonymous = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anonymous function Expression&apos;&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; namedExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fact&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(fact === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; localExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Local to the parent Function Scope&apos;&lt;/span&gt;);\n    };\n    globalExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;creates a new global variable, then assigned this function.&apos;&lt;/span&gt;);\n    };\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//return; //undefined.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fact * &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;( fact - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);   \n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;namedExpression&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;globalExpression&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;javascript interpreted as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; anonymous;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; namedExpression;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; globalExpression;\n\nanonymous = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;anonymous function Expression&apos;&lt;/span&gt;);\n};\n\nnamedExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fact&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; localExpression;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(fact === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    localExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Local to the parent Function Scope&apos;&lt;/span&gt;);\n    };\n    globalExpression = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ \n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;creates a new global variable, then assigned this function.&apos;&lt;/span&gt;);\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fact * &lt;span class=&quot;hljs-title function_&quot;&gt;for_InternalUSE&lt;/span&gt;( fact - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);    &lt;span class=&quot;hljs-comment&quot;&gt;// DEFAULT UNDEFINED.&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;namedExpression&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;globalExpression&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can check function declaration, expression test over different browser&apos;s using &lt;a href=&quot;http://jsperf.com/yashfunctions&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;jsperf Test Runner&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/a/45759444/5081877&quot;&gt;ES5 Constructor Function Classes&lt;/a&gt;: Function objects created using Function.prototype.bind&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;JavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Shape&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;id&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Function Declaration&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = id;\n};\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Adding a prototyped method to a function.&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getID&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;;\n    };\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;setID&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt; id &lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt; = id;\n    };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; expFn = &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Function Expression&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; funObj = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Shape&lt;/span&gt;( ); &lt;span class=&quot;hljs-comment&quot;&gt;// Function Object&lt;/span&gt;\nfunObj.&lt;span class=&quot;hljs-title function_&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;prototype&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// false&lt;/span&gt;\nfunObj.&lt;span class=&quot;hljs-title function_&quot;&gt;setID&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; );\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( funObj.&lt;span class=&quot;hljs-title function_&quot;&gt;getID&lt;/span&gt;() ); &lt;span class=&quot;hljs-comment&quot;&gt;// 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;ES6 introduced &lt;strong&gt;Arrow function&lt;/strong&gt;: An arrow function expression has a shorter syntax, they are best suited for non-method functions, and they cannot be used as constructors.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-arrow-function-definitions-static-semantics-early-errors&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ArrowFunction : ArrowParameters =&amp;gt; ConciseBody&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;) =&amp;gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;Odd&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;Even&apos;&lt;/span&gt;; };\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) ); &lt;span class=&quot;hljs-comment&quot;&gt;// Even&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ); &lt;span class=&quot;hljs-comment&quot;&gt;// Odd&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I&apos;m adding my own answer just because everyone else has covered the hoisting part thoroughly.&lt;/p&gt;\n\n&lt;p&gt;I&apos;ve wondered about which way is better for a long while now, and thanks to &lt;a href=&quot;http://jsperf.com&quot; rel=&quot;noreferrer&quot;&gt;http://jsperf.com&lt;/a&gt; now I know :)&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/bCrSm.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Function declarations&lt;/strong&gt; are faster, and that&apos;s what really matters in web dev right? ;)&lt;/p&gt;\n    ","\n&lt;h1&gt;              .&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;Availability (scope) of the function&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The following works because &lt;code&gt;function add()&lt;/code&gt; is scoped to the nearest block:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The following does not work because the variable is called before a function value is assigned to the variable &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The above code is identical in functionality to the code below. Note that explicitly assigning &lt;code&gt;add = undefined&lt;/code&gt; is superfluous because simply doing &lt;code&gt;var add;&lt;/code&gt; is the exact same as &lt;code&gt;var add=undefined&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\nadd = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The following does not work because &lt;code&gt;var add=&lt;/code&gt; begins an expression and causes the following &lt;code&gt;function add()&lt;/code&gt; to be an expression instead of a block. Named functions are only visible to themselves and their surrounding block. As &lt;code&gt;function add()&lt;/code&gt; is an expression here, it has no surrounding block, so it is only visible to itself.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + e);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;em&gt;(function)&lt;/em&gt;.name&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The name of a function &lt;code&gt;function thefuncname(){}&lt;/code&gt; is &lt;em&gt;thefuncname&lt;/em&gt; when it is declared this way.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Otherwise, if a function is declared as &lt;code&gt;function(){}&lt;/code&gt;, the &lt;em&gt;function&lt;/em&gt;.name is the first variable used to store the function.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){} });\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If there are no variables set to the function, then the functions name is the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}).&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Lastly, while the variable the function is assigned to initially sets the name, successive variables set to the function do not change the name.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){};\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = b;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(c.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Performance&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;In Google&apos;s V8 and Firefox&apos;s Spidermonkey there might be a few microsecond JIT compilation difference, but ultimately the result is the exact same. To prove this, let&apos;s examine the efficiency of JSPerf at micro-benchmarks by comparing the speed of two blank code snippets. The &lt;a href=&quot;https://jsperf.com/microbenchmark-analysis/1&quot; rel=&quot;noreferrer&quot;&gt;JSPerf tests are found here&lt;/a&gt;. And, the &lt;a href=&quot;http://jsben.ch/Ov6eJ&quot; rel=&quot;noreferrer&quot;&gt;jsben.ch tests are  found here&lt;/a&gt;. As you can see, there is a noticeable difference when there should be none. If you are really a performance freak like me, then it might be more worth your while trying to reduce the number of variables and functions in the scope and especially eliminating polymorphism (such as using the same variable to store two different types).&lt;/p&gt;\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;Variable Mutability&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;When you use the &lt;code&gt;var&lt;/code&gt; keyword to declare a variable, you can then reassign a different value to the variable like so.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foobar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}; &lt;span class=&quot;hljs-comment&quot;&gt;// initial value&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        foobar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// new value&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[no error]&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + error.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foobar&lt;/span&gt;);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;However, when we use the const-statement, the variable reference becomes immutable. This means that we cannot assign a new value to the variable. Please note, however, that this does not make the contents of the variable immutable: if you do &lt;code&gt;const arr = []&lt;/code&gt;, then you can still do &lt;code&gt;arr[10] = &quot;example&quot;&lt;/code&gt;. Only doing something like &lt;code&gt;arr = &quot;new value&quot;&lt;/code&gt; or &lt;code&gt;arr = []&lt;/code&gt; would throw an error as seen below.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foobar = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}; &lt;span class=&quot;hljs-comment&quot;&gt;// initial value&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        foobar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// new value&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[no error]&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + error.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foobar&lt;/span&gt;);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Interestingly, if we declare the variable as &lt;code&gt;function funcName(){}&lt;/code&gt;, then the immutability of the variable is the same as declaring it with &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}; &lt;span class=&quot;hljs-comment&quot;&gt;// initial value&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        foobar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// new value&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[no error]&quot;&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(error) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt; + error.&lt;span class=&quot;hljs-property&quot;&gt;message&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(foobar, &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;foobar&lt;/span&gt;);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;   &quot; &quot;&lt;/h2&gt;\n&lt;p&gt;The &quot;nearest block&quot; is the nearest &quot;function,&quot; (including asynchronous functions, generator functions, and asynchronous generator functions). However, interestingly, a &lt;code&gt;function functionName() {}&lt;/code&gt; behaves like a &lt;code&gt;var functionName = function() {}&lt;/code&gt; when in a non-closure block to items outside said closure. Observe.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Normal &lt;code&gt;var add=function(){}&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;);\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Normal &lt;code&gt;function add(){}&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Function&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Statement (such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Arrow Function with &lt;code&gt;var add=function()&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; add=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Arrow Function With &lt;code&gt;function add()&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// typeof will simply return &quot;undefined&quot; if the variable does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; add !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to prove it&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Not a block&quot;&lt;/span&gt;);\n  }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(add===&lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// this throws an exception if add doesn&apos;t exist&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Behaves like var add=function(a,b){return a+b}&apos;&lt;/span&gt;)\n  }\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Is a block&quot;&lt;/span&gt;);\n}\n(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;){\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n    }\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A function declaration and a function expression assigned to a variable behave the same once the binding is established.&lt;/p&gt;\n\n&lt;p&gt;There is a difference however at &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;when&lt;/em&gt; the function object is actually associated with its variable. This difference is due to the mechanism called &lt;em&gt;variable hoisting&lt;/em&gt; in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;Basically, all function declarations and variable declarations are hoisted to the top of the &lt;em&gt;function&lt;/em&gt; in which the declaration occurs (this is why we say that JavaScript has &lt;em&gt;function scope&lt;/em&gt;).&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;When a function declaration is hoisted, the function body &quot;follows&quot;\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When a variable declaration is hoisted, the initialization does &lt;em&gt;not&lt;/em&gt;\nfollow, but is &quot;left behind&quot;. The variable is initialized to\n&lt;code&gt;undefined&lt;/code&gt; at the start of the function body, and will be &lt;em&gt;assigned&lt;/em&gt;\na value at its original location in the code. (Actually, it will be assigned a value at &lt;em&gt;every&lt;/em&gt; location where a declaration of a variable with the same name occurs.)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.&lt;/p&gt;\n\n&lt;p&gt;Some examples...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!foo) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo; }\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Variable &lt;code&gt;foo&lt;/code&gt; is hoisted to the top of the function, initialized to &lt;code&gt;undefined&lt;/code&gt;, so that &lt;code&gt;!foo&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, so &lt;code&gt;foo&lt;/code&gt; is assigned &lt;code&gt;10&lt;/code&gt;. The &lt;code&gt;foo&lt;/code&gt; outside of &lt;code&gt;bar&lt;/code&gt;&apos;s scope plays no role and is untouched. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()() &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;()() &lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Function declarations take precedence over variable declarations, and the last function declaration &quot;sticks&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;}; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}; \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a; }\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example &lt;code&gt;a&lt;/code&gt; is initialized with the function object resulting from evaluating the second function declaration, and then is assigned &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}}\n&lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;();\na &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the function declaration is hoisted first, declaring and initializing variable &lt;code&gt;a&lt;/code&gt;. Next, this variable is assigned &lt;code&gt;10&lt;/code&gt;. In other words: the assignment does not assign to outer variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The first example is a function declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second example is a function expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var &apos;abc&apos; is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.&lt;/p&gt;\n\n&lt;p&gt;To put it simply:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//this will work&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(param);\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//this would fail&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;abc&lt;/span&gt;(param);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; abc = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To study more about this topic I strongly recommend you this\n&lt;a href=&quot;http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792&quot;&gt;link&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In terms of code maintenance cost, named functions are more preferable:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Independent from the place where they are declared (but still limited by scope).&lt;/li&gt;\n&lt;li&gt;More resistant to mistakes like conditional initialization (you are still able to override if wanted to).&lt;/li&gt;\n&lt;li&gt;The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.&lt;/li&gt;\n&lt;li&gt;In a debugger you will clearly see the function name on the call stack instead of an &quot;anonymous/evaluated&quot; function.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.&lt;/p&gt;\n\n&lt;p&gt;Historically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{\n    &lt;span class=&quot;hljs-attr&quot;&gt;member&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* How do I make &quot;this.member&quot; a named function? */&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to a name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.&lt;/p&gt;\n&lt;p&gt;For more information on anonymous functions and lambda calculus, Wikipedia is a good start: &lt;a href=&quot;http://en.wikipedia.org/wiki/Anonymous_function&quot; rel=&quot;noreferrer&quot;&gt;Anonymous Functions&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.&lt;/p&gt;\n\n&lt;p&gt;I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.&lt;/p&gt;\n\n&lt;p&gt;Some brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don&apos;t want to have to change all 160 sets of branding files.&lt;/p&gt;\n\n&lt;p&gt;By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.&lt;/p&gt;\n\n&lt;p&gt;The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.&lt;/p&gt;\n\n&lt;p&gt;From people&apos;s comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/336868/2730064&quot;&gt;Greg&apos;s Answer&lt;/a&gt; is good enough, but I still would like to add something to it that I learned just now watching &lt;a href=&quot;https://en.wikipedia.org/wiki/Douglas_Crockford&quot; rel=&quot;noreferrer&quot;&gt;Douglas Crockford&apos;s&lt;/a&gt; videos.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Function expression:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Function statement:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function statement is just a shorthand for &lt;code&gt;var&lt;/code&gt; statement with a &lt;code&gt;function&lt;/code&gt; value.&lt;/p&gt;\n\n&lt;p&gt;So&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;expands to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which expands further to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\nfoo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And they are both hoisted to the top of the code.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/6TVZL.jpg&quot; alt=&quot;Screenshot from video&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/users/26394/eugene-lazutkin&quot;&gt;@EugeneLazutkin&lt;/a&gt; gives an example where he &lt;a href=&quot;https://stackoverflow.com/a/338053/&quot;&gt;names an assigned function to be able to use &lt;code&gt;shortcut()&lt;/code&gt;&lt;/a&gt; as an internal reference to itself. &lt;a href=&quot;http://ejohn.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;John Resig&lt;/a&gt; gives another example - &lt;em&gt;copying a recursive function assigned to another object&lt;/em&gt; in his &lt;a href=&quot;http://ejohn.org/apps/learn/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Learning Advanced Javascript&lt;/a&gt; tutorial. While assigning functions to properties isn&apos;t strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.&lt;/p&gt;\n&lt;p&gt;Examples from the tutorial: recursive calls in &lt;code&gt;yell()&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://ejohn.org/apps/learn/#13&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tests fail when the original ninja object is removed.&lt;/a&gt; (page 13)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;predicate, message&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!predicate) { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(message); } }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? ninja.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiy&quot;&lt;/span&gt;;\n  }\n};\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( ninja.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiyaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A single object isn&apos;t too bad, either.&quot;&lt;/span&gt; ); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; samurai = { &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: ninja.&lt;span class=&quot;hljs-property&quot;&gt;yell&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n  samurai.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(e){\n  &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Uh, this isn&apos;t good! Where&apos;d ninja.yell go?&quot;&lt;/span&gt; );\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif22&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://ejohn.org/apps/learn/#14&quot; rel=&quot;nofollow noreferrer&quot;&gt;If you name the function that will be called recursively, the tests will pass.&lt;/a&gt; (page 14)&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;predicate, message&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!predicate) { &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(message); } }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiy&quot;&lt;/span&gt;;\n  }\n};\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( ninja.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiyaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Works as we would expect it to!&quot;&lt;/span&gt; );\n \n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; samurai = { &lt;span class=&quot;hljs-attr&quot;&gt;yell&lt;/span&gt;: ninja.&lt;span class=&quot;hljs-property&quot;&gt;yell&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ninja = {};\n&lt;span class=&quot;hljs-title function_&quot;&gt;assert&lt;/span&gt;( samurai.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;hiyaaaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;The method correctly calls itself.&quot;&lt;/span&gt; );\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(samurai.&lt;span class=&quot;hljs-title function_&quot;&gt;yell&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif23&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Another difference that is not mentioned in the other answers is that if you use the anonymous function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and use that as a constructor as in&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; one = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then &lt;code&gt;one.constructor.name&lt;/code&gt; will not be defined. &lt;code&gt;Function.name&lt;/code&gt; is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.&lt;/p&gt;\n\n&lt;p&gt;With &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\ntwo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it is possible to retrieve the name of the constructor as a string with &lt;code&gt;two.constructor.name&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The first one (function doSomething(x)) should be part of an object notation.&lt;/p&gt;\n\n&lt;p&gt;The second one (&lt;code&gt;var doSomething = function(x){ alert(x);}&lt;/code&gt;) is simply creating an anonymous function and assigning it to a variable, &lt;code&gt;doSomething&lt;/code&gt;. So doSomething() will call the function.&lt;/p&gt;\n\n&lt;p&gt;You may want to know what a &lt;em&gt;function declaration&lt;/em&gt; and &lt;em&gt;function expression&lt;/em&gt; is.&lt;/p&gt;\n\n&lt;p&gt;A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;ECMA 5 (13.0) defines the syntax as &lt;br&gt;\n  function Identifier ( FormalParameterList&lt;sub&gt;opt&lt;/sub&gt; ) { FunctionBody }&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).&lt;/p&gt;\n\n&lt;p&gt;And in a function expression&lt;/p&gt;\n\n&lt;p&gt;A function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with function.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Anonymous function expression&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Named function expression&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Self-invoking function expression&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello!&quot;&lt;/span&gt;);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;ECMA 5 (13.0) defines the syntax as &lt;br&gt;\n  function Identifier&lt;sub&gt;opt&lt;/sub&gt; ( FormalParameterList&lt;sub&gt;opt&lt;/sub&gt; ) { FunctionBody }&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I&apos;m listing out the differences below:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.&lt;/p&gt;\n\n&lt;p&gt;Take a look at the function below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Displays 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because, during execution, it looks like:-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// The first function declaration is moved to top&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// The second function declaration is moved to top&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//So executing from top to bottom,&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//the last foo() returns 2 which gets displayed&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and &lt;strong&gt;undefined&lt;/strong&gt; gets assigned to it.&lt;/p&gt;\n\n&lt;p&gt;Same function using function expressions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Displays 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is because during execution, it looks like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n\n   foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   };\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; foo ();\n   foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {   &lt;span class=&quot;hljs-comment&quot;&gt;// This function expression is not reachable&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n   };\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// Displays 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It is not safe to write function declarations in non-function blocks like &lt;strong&gt;if&lt;/strong&gt; because they won&apos;t be accessible.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;doSomething&lt;/span&gt;(); }\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Named function expression like the one below, may not work in Internet&amp;nbsp;Explorer browsers prior to version 9.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; today = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;today&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;()}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;If you would use those functions to create objects, you would get:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objectOne = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(objectOne.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;Object {}&quot; because constructor is an anonymous function&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; objectTwo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(objectTwo.&lt;span class=&quot;hljs-property&quot;&gt;__proto__&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// prints &quot;functionTwo {}&quot; because constructor is a named function&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;About performance:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;New versions of &lt;code&gt;V8&lt;/code&gt; introduced several under-the-hood optimizations and so did &lt;code&gt;SpiderMonkey&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;There is almost no difference now between expression and declaration. &lt;br&gt;Function expression &lt;a href=&quot;https://jsperf.com/fdeclaration-vs-fexpression&quot; rel=&quot;noreferrer&quot;&gt;appears to be faster&lt;/a&gt; now.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Chrome 62.0.3202&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/lW91X.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lW91X.png&quot; alt=&quot;Chrome test&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;FireFox 55&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/po3gG.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/po3gG.png&quot; alt=&quot;Firefox test&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Chrome Canary 63.0.3225&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/lcPvN.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/lcPvN.png&quot; alt=&quot;Chrome Canary test&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;Anonymous&lt;/code&gt; function expressions &lt;a href=&quot;https://jsperf.com/named-vs-anonymous-expressions&quot; rel=&quot;noreferrer&quot;&gt;appear to have better performance&lt;/a&gt;\n  against &lt;code&gt;Named&lt;/code&gt; function expression.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Firefox&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/npaAl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/npaAl.png&quot; alt=&quot;Firefox named_anonymous&quot;&gt;&lt;/a&gt;\n&lt;strong&gt;&lt;em&gt;Chrome Canary&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/6YkeY.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/6YkeY.png&quot; alt=&quot;Chrome canary named_anonymous&quot;&gt;&lt;/a&gt;\n&lt;strong&gt;&lt;em&gt;Chrome&lt;/em&gt;&lt;/strong&gt;\n&lt;a href=&quot;https://i.stack.imgur.com/x9H8J.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/x9H8J.png&quot; alt=&quot;Chrome named_anonymous&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In JavaScript there are two ways to create functions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Function declaration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.&lt;/p&gt;\n\n&lt;p&gt;What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Function expression:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fn=&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It&apos;s not executing the function and assigning the result.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Reference: &lt;em&gt;&lt;a href=&quot;http://jkoder.com/javascript-function-declaration-syntax-var-fn-function-vs-function-fn/&quot; rel=&quot;noreferrer&quot;&gt;JavaScript function declaration syntax: var fn = function() {} vs function fn() {}&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In light of the &quot;named functions show up in stack traces&quot; argument, modern JavaScript engines are actually quite capable of representing anonymous functions.&lt;/p&gt;\n\n&lt;p&gt;As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.&lt;/p&gt;\n\n&lt;p&gt;SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can&apos;t.&lt;/p&gt;\n\n&lt;p&gt;If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[].&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iterator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But for the most part it&apos;s not worth stressing over.&lt;/p&gt;\n\n&lt;h2&gt;Harness (&lt;a href=&quot;http://jsfiddle.net/us9dg6y8/&quot;&gt;Fiddle&lt;/a&gt;)&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&apos;use strict&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n},\n    b = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n    },\n    c = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n    },\n    e = {\n        &lt;span class=&quot;hljs-attr&quot;&gt;f&lt;/span&gt;: a,\n        &lt;span class=&quot;hljs-attr&quot;&gt;g&lt;/span&gt;: b,\n        &lt;span class=&quot;hljs-attr&quot;&gt;h&lt;/span&gt;: c,\n        &lt;span class=&quot;hljs-attr&quot;&gt;i&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;j&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;j&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;k&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;l&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        }\n    },\n    m = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        };\n    }()),\n    n = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;n&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        };\n    }()),\n    o = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;();\n        };\n    }());\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;([a, b, c].&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(e).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;values, key&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(e[key]);\n}, [])).&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;([m, n, o]).&lt;span class=&quot;hljs-title function_&quot;&gt;reduce&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;logs, func&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;();\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (error) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; logs.&lt;span class=&quot;hljs-title function_&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;func.name: &apos;&lt;/span&gt; + func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt; +\n                           &lt;span class=&quot;hljs-string&quot;&gt;&apos;Trace:\\n&apos;&lt;/span&gt; +\n                           error.&lt;span class=&quot;hljs-property&quot;&gt;stack&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Need to manually log the error object in Nitro.&lt;/span&gt;\n    }\n\n}, []).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n\\n&apos;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;V8&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at a (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:11)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at b (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at d (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at a (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:11)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at b (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at d (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:15)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at e.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt; (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: j\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at j (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: l\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at l (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:28:19&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at n (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: p\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n    at p (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:19)&lt;/span&gt;\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n    at &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (native)\n    at &lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:27 test.js:42&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;SpiderMonkey&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\ne.&lt;span class=&quot;hljs-property&quot;&gt;i&lt;/span&gt;@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: j\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nj@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: l\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nl@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nm&amp;lt;&lt;span class=&quot;hljs-regexp&quot;&gt;/&amp;lt;@http:/&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/localhost:8000/&lt;/span&gt;test.&lt;span class=&quot;hljs-property&quot;&gt;js&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nn@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: p\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\np@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:13&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9&lt;/span&gt;\n@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:54:1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Chakra&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;\n   at a (&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5)&lt;/span&gt;\n   at &lt;span class=&quot;hljs-title class_&quot;&gt;Anonymous&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at b (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at d (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at a (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:5)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at b (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at d (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:9)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at e.i (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at j (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at l (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:28:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at n (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n\n\nfunc.name: &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;\nTrace:\n&lt;span class=&quot;hljs-built_in&quot;&gt;Error&lt;/span&gt;\n   at p (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:13)&lt;/span&gt;\n   at Anonymous &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:9)&lt;/span&gt;\n   at Global code (http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:42:1)&lt;/span&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Nitro&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;func.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:22&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\na@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:4:22&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: b\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nb@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:7:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: d\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nd@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:10:26&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\ni@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:17:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: j\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nj@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:20:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: l\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nl@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:23:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: \n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:28:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\nn@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:33:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;: p\n&lt;span class=&quot;hljs-title class_&quot;&gt;Trace&lt;/span&gt;:\np@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:38:30&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:47:13&lt;/span&gt;\nreduce@[native code]\n&lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; code@&lt;span class=&quot;hljs-attr&quot;&gt;http&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost:8000/test.js:44:33&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. &lt;/p&gt;\n\n&lt;p&gt;The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the &lt;strong&gt;functionOne is not a function&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.&lt;/p&gt;\n\n&lt;p&gt;On the second line we are assigning the reference of an anonymous function to functionOne.&lt;/p&gt;\n\n&lt;p&gt;The second case is of function declarations that loads before any code is executed. So if you do like the following you won&apos;t get any error as the declaration loads before code execution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionOne&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Named Functions Vs. Anonymous Functions&lt;/h1&gt;\n&lt;p&gt;The first function syntax is &lt;strong&gt;Anonymous Function Expression&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something...&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;While, the second one is &lt;strong&gt;Function Declaration&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt; () {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// do something...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The main difference between both is the function name since &lt;strong&gt;Anonymous Functions&lt;/strong&gt; have no name to call.\nAnonymous functions are quick and easy to declare, and many libraries and tools tend to encourage this idiomatic style of code. However, anonymous functions have some &lt;strong&gt;drawbacks&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Readability:&lt;/strong&gt; anonymous functions omit a name which could cause less readable code.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debugging:&lt;/strong&gt; anonymous functions have no name in stack traces, which can make debugging more difficult.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Self-Reference:&lt;/strong&gt; what if the function needs to refer to itself, for recursion for example.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Naming Function Expression&lt;/h2&gt;\n&lt;p&gt;Providing a name for your function expression quite effectively addresses all these drawbacks, and has no tangible downsides. The best practice is to always name your function expressions:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;timeHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- look, a name here!&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I&apos;ve waited 1 second&quot;&lt;/span&gt;);\n}, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Naming IIFEs (Immediate Invoked Function Expression)&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;IIFE&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;str&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- look, always name IIFEs!&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(str); &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Hello!&quot;&lt;/span&gt;\n})(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello!&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For functions assigned to a variable, naming the function, in this case, is not very common and may cause confusion, in this case, the arrow function may be a better choice.&lt;/p&gt;\n    ","\n&lt;p&gt;They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. Function Expression&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; functionOne = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A Function Expression defines a function as a part of a larger\n  expression syntax (typically a variable assignment ). Functions\n  defined via Functions Expressions can be named or anonymous. Function\n  Expressions must not start with function (hence the parentheses\n  around the self invoking example below).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it&apos;s declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp;amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Function Declaration&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;functionTwo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Some code&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A Function Declaration defines a named function variable without\n  requiring variable assignment. Function Declarations occur as\n  standalone constructs and cannot be nested within non-function blocks.\n  Its helpful to think of them as siblings of Variable Declarations.\n  Just as Variable Declarations must start with var, Function\n  Declarations must begin with function.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have &apos;use strict&apos; this won&apos;t Hoist as expected, it&apos;s a good way to call all normal functions which are not big in lines and neither are a  constructor function.&lt;/p&gt;\n\n&lt;p&gt;Also, if you need more info about how hoisting works in JavaScript, visit the link below:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration.&lt;/p&gt;\n    "],"135":["\n&lt;h1&gt;Basic one dimensional arrays&lt;/h1&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Applicable sort functions:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;rsort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;asort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;arsort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;natsort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;natcasesort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;ksort&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;krsort&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The difference between those is merely whether key-value associations are kept (the &quot;&lt;code&gt;a&lt;/code&gt;&quot; functions), whether it sorts low-to-high or reverse (&quot;&lt;code&gt;r&lt;/code&gt;&quot;), whether it sorts values or keys (&quot;&lt;code&gt;k&lt;/code&gt;&quot;) and how it compares values (&quot;&lt;code&gt;nat&lt;/code&gt;&quot; vs. normal). See &lt;a href=&quot;http://php.net/manual/en/array.sorting.php&quot; rel=&quot;noreferrer&quot;&gt;http://php.net/manual/en/array.sorting.php&lt;/a&gt; for an overview and links to further details.&lt;/p&gt;\n&lt;h1&gt;Multi dimensional arrays, including arrays of objects&lt;/h1&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt; =&amp;gt; ...,   &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt; =&amp;gt; ...),\n    ...\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to sort &lt;code&gt;$array&lt;/code&gt; by the key &apos;foo&apos; of each entry, you need a &lt;em&gt;custom comparison function&lt;/em&gt;. The above &lt;code&gt;sort&lt;/code&gt; and related functions work on simple values that they know how to compare and sort. PHP does not simply &quot;know&quot; what to do with a &lt;em&gt;complex value&lt;/em&gt; like &lt;code&gt;array(&apos;foo&apos; =&amp;gt; &apos;bar&apos;, &apos;baz&apos; =&amp;gt; 42)&lt;/code&gt; though; so you need to tell it.&lt;/p&gt;\n&lt;p&gt;To do that, you need to create a &lt;em&gt;comparison function&lt;/em&gt;. That function takes two elements and must return &lt;code&gt;0&lt;/code&gt; if these elements are considered equal, a value lower than &lt;code&gt;0&lt;/code&gt; if the first value is lower and a value higher than &lt;code&gt;0&lt;/code&gt; if the first value is higher. That&apos;s all that&apos;s needed:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Often, you will want to use an &lt;a href=&quot;http://php.net/manual/en/functions.anonymous.php&quot; rel=&quot;noreferrer&quot;&gt;anonymous function&lt;/a&gt; as the callback. If you want to use a method or static method, see the &lt;a href=&quot;http://php.net/manual/en/language.types.callable.php&quot; rel=&quot;noreferrer&quot;&gt;other ways of specifying a callback in PHP&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;You then use one of these functions:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/usort&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;usort&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/uasort&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;uasort&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://php.net/uksort&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;uksort&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Again, they only differ in whether they keep key-value associations and sort by values or keys. Read their documentation for details.&lt;/p&gt;\n&lt;p&gt;Example usage:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;cmp&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;usort&lt;/code&gt; will take two items from the array and call your &lt;code&gt;cmp&lt;/code&gt; function with them. So &lt;code&gt;cmp()&lt;/code&gt; will be called with &lt;code&gt;$a&lt;/code&gt; as &lt;code&gt;array(&apos;foo&apos; =&amp;gt; &apos;bar&apos;, &apos;baz&apos; =&amp;gt; 42)&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; as another &lt;code&gt;array(&apos;foo&apos; =&amp;gt; ..., &apos;baz&apos; =&amp;gt; ...)&lt;/code&gt;. The function then returns to &lt;code&gt;usort&lt;/code&gt; which of the values was larger or whether they were equal. &lt;code&gt;usort&lt;/code&gt; repeats this process passing different values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; until the array is sorted. The &lt;code&gt;cmp&lt;/code&gt; function will be called many times, &lt;em&gt;at least&lt;/em&gt; as many times as there are values in &lt;code&gt;$array&lt;/code&gt;, with different combinations of values for &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; every time.&lt;/p&gt;\n&lt;p&gt;To get used to this idea, try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;cmp called with $a:&apos;&lt;/span&gt;, PHP_EOL;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;and $b:&apos;&lt;/span&gt;, PHP_EOL;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All you did was define a custom way to compare two items, that&apos;s all you need. That works with all sorts of values.&lt;/p&gt;\n&lt;p&gt;By the way, this works on any value, the values don&apos;t have to be complex arrays. If you have a custom comparison you want to do, you can do it on a simple array of numbers too.&lt;/p&gt;\n&lt;h3&gt;&lt;code&gt;sort&lt;/code&gt; sorts by reference and does not return anything useful!&lt;/h3&gt;\n&lt;p&gt;Note that the array sorts &lt;em&gt;in place&lt;/em&gt;, you do not need to assign the return value to anything. &lt;code&gt;$array = sort($array)&lt;/code&gt; will replace the array with &lt;code&gt;true&lt;/code&gt;, not with a sorted array. Just &lt;code&gt;sort($array);&lt;/code&gt; works.&lt;/p&gt;\n&lt;h2&gt;Custom numeric comparisons&lt;/h2&gt;\n&lt;p&gt;If you want to sort by the &lt;code&gt;baz&lt;/code&gt; key, which is numeric, all you need to do is:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Thanks to &lt;strong&gt;The PoWEr oF MATH&lt;/strong&gt; this returns a value &amp;lt; 0, 0 or &amp;gt; 0 depending on whether &lt;code&gt;$a&lt;/code&gt; is lower than, equal to or larger than &lt;code&gt;$b&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Note that this won&apos;t work well for &lt;code&gt;float&lt;/code&gt; values, since they&apos;ll be reduced to an &lt;code&gt;int&lt;/code&gt; and lose precision. Use explicit &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; return values instead.&lt;/p&gt;\n&lt;h2&gt;Objects&lt;/h2&gt;\n&lt;p&gt;If you have an array of objects, it works the same way:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;-&amp;gt;baz - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;-&amp;gt;baz;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Functions&lt;/h2&gt;\n&lt;p&gt;You can do anything you need inside a comparison function, including calling functions:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;someFunction&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;someFunction&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Strings&lt;/h2&gt;\n&lt;p&gt;A shortcut for the first string comparison version:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;strcmp&lt;/code&gt; does exactly what&apos;s expected of &lt;code&gt;cmp&lt;/code&gt; here, it returns &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;Spaceship operator&lt;/h2&gt;\n&lt;p&gt;PHP 7 introduced the &lt;a href=&quot;https://stackoverflow.com/a/31298778/476&quot;&gt;spaceship operator&lt;/a&gt;, which unifies and simplifies equal/smaller/larger than comparisons across types:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;];\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Sorting by multiple fields&lt;/h2&gt;\n&lt;p&gt;If you want to sort primarily by &lt;code&gt;foo&lt;/code&gt;, but if &lt;code&gt;foo&lt;/code&gt; is equal for two elements sort by &lt;code&gt;baz&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$cmp&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;])) !== &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$cmp&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;];\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For those familiar, this is equivalent to an SQL query with &lt;code&gt;ORDER BY foo, baz&lt;/code&gt;.&lt;br&gt;\nAlso see &lt;a href=&quot;https://stackoverflow.com/a/22812695/476&quot;&gt;this very neat shorthand version&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/22829326/476&quot;&gt;how to create such a comparison function dynamically for an arbitrary number of keys&lt;/a&gt;.&lt;/p&gt;\n&lt;h2&gt;Sorting into a manual, static order&lt;/h2&gt;\n&lt;p&gt;If you want to sort elements into a &quot;manual order&quot; like &lt;em&gt;&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$order&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$order&lt;/span&gt;) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_search&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$order&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;For all the above, if you&apos;re using PHP 5.3 or higher (and you really should), use anonymous functions for shorter code and to avoid having another global function floating around:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]; });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That&apos;s how simple sorting a complex multi-dimensional array can be. Again, just think in terms of &lt;em&gt;teaching PHP how to tell which of two items is &quot;greater&quot;&lt;/em&gt;; let PHP do the actual sorting.&lt;/p&gt;\n&lt;p&gt;Also for all of the above, to switch between ascending and descending order simply swap the &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; arguments around. E.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// ascending&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// descending&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Sorting one array based on another&lt;/h1&gt;\n&lt;p&gt;And then there&apos;s the peculiar &lt;a href=&quot;http://php.net/array_multisort&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;array_multisort&lt;/code&gt;&lt;/a&gt;, which lets you sort one array based on another:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$array2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The expected result here would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// the sorted order of $array1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use &lt;code&gt;array_multisort&lt;/code&gt; to get there:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$array2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As of PHP 5.5.0 you can use &lt;code&gt;array_column&lt;/code&gt; to extract a column from a multi dimensional array and sort the array on that column:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;), SORT_DESC, &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also sort on more than one column each in either direction:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;), SORT_DESC,\n                &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;), SORT_ASC,\n                &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As of PHP 7.0.0 you can also extract properties from an array of objects.&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;sub&gt;If you have more common cases, feel free to edit this answer.&lt;/sub&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Well most basic methods are already covered by &lt;a href=&quot;https://stackoverflow.com/a/17364128&quot;&gt;deceze&lt;/a&gt; I would try to look at other types of sort&lt;/p&gt;\n\n&lt;h1&gt;Sorting with SPL&lt;/h1&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/class.splheap.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SplHeap&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SimpleHeapSort&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SplHeap&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compare&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Let&apos;s populate our heap here (data of 2009)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleHeapSort&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;implode&lt;/span&gt;(PHP_EOL, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;iterator_to_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;c\nb\na\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://www.php.net/manual/en/class.splmaxheap.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SplMaxHeap&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SplMaxHeap&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;&lt;a href=&quot;http://www.php.net/manual/en/class.splmaxheap.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SplMinHeap&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;SplMinHeap&lt;/span&gt; ();\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$heap&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;insert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Other Types of Sort&lt;/h2&gt;\n\n&lt;h2&gt;Bubble Sort&lt;/h2&gt;\n\n&lt;p&gt;From the &lt;a href=&quot;http://en.wikipedia.org/wiki/Bubble_sort&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia article on Bubble Sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Bubble sort, sometimes incorrectly referred to as sinking sort, is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. The algorithm gets its name from the way smaller elements &quot;bubble&quot; to the top of the list. Because it only uses comparisons to operate on elements, it is a comparison sort. Although the algorithm is simple, most of the other sorting algorithms are more efficient for large lists.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bubbleSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$array_size&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$array_size&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$array_size&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; ++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;]) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$tem&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n                &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;];\n                &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$tem&lt;/span&gt;;\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Selection sort&lt;/h2&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Selection_sort&quot; rel=&quot;noreferrer&quot;&gt;the Wikipedia article on Selection sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In computer science, selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;selectionSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$length&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$length&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$length&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; ++) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;]) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;;\n            }\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;];\n        &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$min&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n        &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Insertion sort&lt;/h2&gt;\n\n&lt;p&gt;From the &lt;a href=&quot;http://en.wikipedia.org/wiki/Insertion_sort&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia article on Insertion sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;insertionSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++) {\n\n        &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// second element of the array&lt;/span&gt;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt; ) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;];\n            &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Shellsort&lt;/h2&gt;\n\n&lt;p&gt;From the &lt;a href=&quot;http://en.wikipedia.org/wiki/Shellsort&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia article on Shellsort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Shellsort, also known as Shell sort or Shell&apos;s method, is an in-place comparison sort. It generalizes an exchanging sort, such as insertion or bubble sort, by starting the comparison and exchange of elements with elements that are far apart before finishing with neighboring elements. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;shellSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$gaps&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n            &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n            &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n            &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n            &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n            &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n    );\n    &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_pop&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$gaps&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$length&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$length&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n            &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt; ) {\n                &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; - &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;];\n                &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; -= &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_pop&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$gaps&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Comb sort&lt;/h2&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Comb_sort&quot; rel=&quot;noreferrer&quot;&gt;the Wikipedia article on Comb sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Comb sort is a relatively simple sorting algorithm originally designed by Wlodzimierz Dobosiewicz in 1980. Later it was rediscovered by Stephen Lacey and Richard Box in 1991. Comb sort improves on bubble sort.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;combSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$swap&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; || &lt;span class=&quot;hljs-variable&quot;&gt;$swap&lt;/span&gt; ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; /= &lt;span class=&quot;hljs-number&quot;&gt;1.25&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$swap&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;) ) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;]) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// swapping the elements.&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;]) = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n                        &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$gap&lt;/span&gt;],\n                        &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]\n                );\n                &lt;span class=&quot;hljs-variable&quot;&gt;$swap&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n            }\n            &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Merge sort&lt;/h2&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Merge_sort&quot; rel=&quot;noreferrer&quot;&gt;the Wikipedia article on Merge sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In computer science, a merge sort (also commonly spelled mergesort) is an O(n log n) comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mergeSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mergeSort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_splice&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;) / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)));\n    &lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mergeSort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;lt;= &lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_push&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_shift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;));\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_push&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_shift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;));\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; )\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_push&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_shift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; )\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_push&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_shift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Quicksort&lt;/h2&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot; rel=&quot;noreferrer&quot;&gt;the Wikipedia article on Quicksort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Quicksort, or partition-exchange sort, is a sorting algorithm developed by Tony Hoare that, on average, makes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;quickSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$pivot&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;); &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$pivot&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;[] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;[] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_merge&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;quickSort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$left&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n            &lt;span class=&quot;hljs-variable&quot;&gt;$pivot&lt;/span&gt;\n    ), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;quickSort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$right&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Permutation sort&lt;/h2&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://rosettacode.org/wiki/Sorting_algorithms/Permutation_sort&quot; rel=&quot;noreferrer&quot;&gt;the Wikipedia article on Permutation sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Permutation sort, which proceeds by generating the possible permutations of the input array/list until discovering the sorted one.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;permutationSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$perms&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;inOrder&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$perms&lt;/span&gt;)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$perms&lt;/span&gt;;\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; -- &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$newitems&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$items&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable&quot;&gt;$newperms&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$perms&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;) = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_splice&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$newitems&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_unshift&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$newperms&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;);\n            &lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;permutationSort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$newitems&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$newperms&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$res&lt;/span&gt;;\n            }\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;inOrder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;); &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; False;\n            }\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; True;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Radix sort&lt;/h2&gt;\n\n&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Radix_sort&quot; rel=&quot;noreferrer&quot;&gt;the Wikipedia article on Radix sort:&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In computer science, radix sort is a non-comparative integer sorting algorithm that sorts data with integer keys by grouping keys by the individual digits which share the same significant position and value. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Radix Sort for 0 to 256&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;radixSort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable&quot;&gt;$partition&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; ++ &lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$partition&lt;/span&gt;[] = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt;; ++ &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$partition&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;]-&amp;gt;age &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;][] = &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;];\n    }\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; ++ &lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$partition&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt;]); &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$n&lt;/span&gt;; ++ &lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; ++] = &amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$partition&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$slot&lt;/span&gt;][&lt;span class=&quot;hljs-variable&quot;&gt;$j&lt;/span&gt;];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Stable sort&lt;/h1&gt;\n\n&lt;p&gt;Let&apos;s say you have an array like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Kale&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kaleidoscope&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aardvark&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Leicester&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Lovely&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now you want to sort on the first letter only:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The outcome is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Aardvark&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kale&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kaleidoscope&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Lovely&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Leicester&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;The sort wasn&apos;t stable!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The keen observer may have noticed that the array sorting algorithm (QuickSort) didn&apos;t produce a stable outcome and that the original order between words of the same first letter wasn&apos;t preserved. This case is trivial and we should have compared the whole string, but let&apos;s assume your use-case is more complicated, such as two consecutive sorts on different fields that shouldn&apos;t cancel out each other&apos;s work.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The Schwartzian transform&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Schwartzian_transform&quot; rel=&quot;noreferrer&quot;&gt;The Schwartzian transform&lt;/a&gt;, also referred to as the decorate-sort-undecorate idiom, effects a stable sort with an inherently unstable sorting algorithm.&lt;/p&gt;\n\n&lt;p&gt;First, you decorate each array element with another array comprising a primary key (the value) and a secondary key (its index or position):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_walk&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function(&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$index&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$index&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// decorate&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This transforms the array into this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[\n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Kale&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Kaleidoscope&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aardvark&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Leicester&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Lovely&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, we adjust the comparison step; we compare the first letter again, but if they&apos;re the same, the secondary key is used to retain the original ordering:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// $a[0] and $b[0] contain the primary sort key&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// $a[1] and $b[1] contain the secondary sort key&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// use primary key comparison results&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// use secondary key&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Afterwards, we undecorate:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_walk&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function(&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The final result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aardvark&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kale&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Kaleidoscope&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Leicester&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Lovely&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;What about reuse?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You had to rewrite your comparison function to work with the transformed array elements; you may not want to edit your delicate comparison functions, so here&apos;s a wrapper for the comparison function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;stablecmp&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$fn&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$fn&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;call_user_func&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$fn&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$tmp&lt;/span&gt;;\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        }\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s write the sort step using this function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;stablecmp&lt;/span&gt;(function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n}));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Voila! Your pristine comparison code is back.&lt;/p&gt;\n    ","\n&lt;p&gt;As of PHP 5.3 with closures it is also possible to use a closure to determine the order of your sort.&lt;/p&gt;\n\n&lt;p&gt;For example assuming $array is an array of objects that contain a month property.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$orderArray&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Jan&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Feb&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mar&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Apr&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;May&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;June&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;July&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Aug&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sept&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Oct&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nov&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Dec&quot;&lt;/span&gt;);\n\n &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; ($&lt;span class=&quot;hljs-title&quot;&gt;orderArray&lt;/span&gt;){\n       &lt;span class=&quot;hljs-title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;array_search&lt;/span&gt;($&lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title&quot;&gt;month&lt;/span&gt;, $&lt;span class=&quot;hljs-title&quot;&gt;orderArray&lt;/span&gt;) - &lt;span class=&quot;hljs-title&quot;&gt;array_search&lt;/span&gt;($&lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title&quot;&gt;month&lt;/span&gt;, $&lt;span class=&quot;hljs-title&quot;&gt;orderArray&lt;/span&gt;);\n }); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;LINQ&lt;/h1&gt;\n\n&lt;p&gt;In .NET, LINQ is frequently used for sorting, which provides a much nicer syntax over comparison functions, especially when objects need to be sorted by multiple fields. There&apos;re several ports of LINQ to PHP, including &lt;a href=&quot;https://github.com/Athari/YaLinqo&quot; rel=&quot;nofollow noreferrer&quot;&gt;YaLinqo&lt;/a&gt; library*. With it, arrays can be sorted with a single line without writing complex comparison functions.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByName&lt;/span&gt;         = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$objects&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;orderBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;$v-&amp;gt;name&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByCount&lt;/span&gt;        = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$objects&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;orderBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;$v-&amp;gt;count&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByCountAndName&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$objects&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;orderBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;$v-&amp;gt;count&apos;&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;thenBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;$v-&amp;gt;name&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Comparisons can be further customized by passing a callback as a second argument, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByFilenameNat&lt;/span&gt;  = &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$objects&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;orderBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;$v-&amp;gt;filename&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;strnatcmp&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, &lt;code&gt;&apos;$v-&amp;gt;count&apos;&lt;/code&gt; is a shorthand for &lt;code&gt;function ($v) { return $v-&amp;gt;count; }&lt;/code&gt; (either can be used). These method chains return iterators, iterators can be transformed to arrays by adding &lt;code&gt;-&amp;gt;toArray()&lt;/code&gt; in the end if needed.&lt;/p&gt;\n\n&lt;p&gt;Internally, &lt;code&gt;orderBy&lt;/code&gt; and related methods call appropriate array sorting functions (&lt;code&gt;uasort&lt;/code&gt;, &lt;code&gt;krsort&lt;/code&gt;, &lt;code&gt;multisort&lt;/code&gt;, &lt;code&gt;usort&lt;/code&gt; etc.).&lt;/p&gt;\n\n&lt;p&gt;LINQ contains many more methods inspired by SQL: filtering, grouping, joining, aggregating etc. It&apos;s best suited for cases when complex transformations on arrays and objects need to be performed without relying on databases.&lt;/p&gt;\n\n&lt;p&gt;&lt;sub&gt;* developed by me, see readme for more details and comparison with other LINQ ports&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Multidimensional sort by key value&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Natural sort of a multidimensional array by a key value and also keep the original order(do not shuffle the main keys):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;multisortByKeyValue&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; &lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$ids&lt;/span&gt;   = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable&quot;&gt;$index&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; ( &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; ) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$ids&lt;/span&gt;[ &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; ] = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;intval&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[ &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; ] ) . &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$index&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;;\n        &lt;span class=&quot;hljs-variable&quot;&gt;$index&lt;/span&gt; ++;\n    }\n\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;natsort&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$ids&lt;/span&gt; );\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_merge&lt;/span&gt;( &lt;span class=&quot;hljs-variable&quot;&gt;$ids&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; );\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Test case:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;id1&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;label&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ID 1&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;priority&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,\n    ),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;id2&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;label&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ID 2&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;priority&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;,\n    ),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;id3&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;label&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ID 3&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;priority&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,\n    ),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;id4&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;label&apos;&lt;/span&gt;    =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;ID 4&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;priority&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,\n    ),\n);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$sorted&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;multisortByKeyValue&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&apos;priority&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; );\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// $sorted equals to:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\narray (\n  &apos;id3&apos; =&amp;gt; array (\n    &apos;label&apos; =&amp;gt; &apos;ID 3&apos;,\n    &apos;priority&apos; =&amp;gt; 20,\n  ),\n  &apos;id1&apos; =&amp;gt; array (\n    &apos;label&apos; =&amp;gt; &apos;ID 1&apos;,\n    &apos;priority&apos; =&amp;gt; 30,\n  ),\n  &apos;id4&apos; =&amp;gt; array (\n    &apos;label&apos; =&amp;gt; &apos;ID 4&apos;,\n    &apos;priority&apos; =&amp;gt; 30,\n  ),\n  &apos;id2&apos; =&amp;gt; array (\n    &apos;label&apos; =&amp;gt; &apos;ID 2&apos;,\n    &apos;priority&apos; =&amp;gt; 70,\n  ),\n)\n*/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is very convenient to sort arrays with &lt;a href=&quot;https://github.com/ihor/Nspl#sortedarray-array-reversed--false-key--null-cmp--null&quot; rel=&quot;nofollow&quot;&gt;sorted&lt;/a&gt; function from &lt;a href=&quot;https://github.com/ihor/Nspl&quot; rel=&quot;nofollow&quot;&gt;Nspl&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Basic sorting&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Sort array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sorted&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort array in descending order&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedDesc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorting by function result&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Sort array by the result of a given function (order words by length)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByLength&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;strlen&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByLengthDesc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;strlen&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort array by the result of user-defined function (order words by the 1st character)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByTheFirstCharacter&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], function(&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]; }); \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Which is the same as&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByTheFirstCharacter&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;itemGetter&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByTheFirstCharacterDesc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;itemGetter&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// itemGetter(0) returns a function which takes an argument with access by index/key&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and returns the value at index 0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorting multidimensional array&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Sort multidimensional array (sort list of users by their names)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt; = [\n    &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Alex&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;),\n];\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByName&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;itemGetter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByNameDesc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;itemGetter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// itemGetter(&apos;name&apos;) returns a function which takes an argument with access by index/key&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and returns the value of the &apos;name&apos; key&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorting array of objects&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Lets assume we have class User(name, age) with properties name and age&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and public methods getName() and getAge()&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt; = [\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Robert&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Alex&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;),\n];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort list of objects by property value (sort list of users by their name)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByName&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;propertyGetter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByNameDesc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;propertyGetter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// propertyGetter(&apos;name&apos;) returns a function which takes an object&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and returns the value of its &apos;name&apos; property&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort list of objects by method result (sort list of users by their age)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByAge&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;methodCaller&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;getAge&apos;&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByAgeDesc&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$users&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;methodCaller&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;getAge&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// methodCaller(&apos;getAge&apos;) returns a function which takes an object&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and returns the result of its getAge() method&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Sorting with a comparison function&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Sort with a comparison function (order words lexicographically with strcmp)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedLexicographically&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;strcmp&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Sort with user-defined comparison function (order words by the 1st character)&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sortedByTheFirstCharacter&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;bc&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$v1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$v2&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$v1&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) - &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;chr&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$v2&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can see all these examples &lt;a href=&quot;https://github.com/ihor/Nspl/blob/master/examples/a_sorted.php&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to order by the key value, then you can do it one line, elegant and clear.  This will order by the price ascending.  Uses array_multisort and array_column.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;   &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [name] =&amp;gt; eggs [price] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ) [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [name] =&amp;gt; coffee [price] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9.99&lt;/span&gt; ) [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [name] =&amp;gt; rice [price] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4.04&lt;/span&gt; ) )\n\n   &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;price&apos;&lt;/span&gt;), SORT_ASC, &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to produce &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;     &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [name] =&amp;gt; eggs [price] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ) [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [name] =&amp;gt; rice [price] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4.04&lt;/span&gt; ) [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt; ( [name] =&amp;gt; coffee [price] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9.99&lt;/span&gt; ) )\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This page is very comprehensive, but I want to add a bit more about the awesome utility of the spaceship operator (three way comparison operator) -- a beautiful child of PHP7+.&lt;/p&gt;\n\n&lt;h2&gt;Using the spaceship operator to implement multiple sort conditions&lt;/h2&gt;\n\n&lt;p&gt;This makes great strides in reducing code bloat and improving readability.&lt;/p&gt;\n\n&lt;p&gt;When writing your custom sort (&lt;code&gt;usort()&lt;/code&gt;/&lt;code&gt;uasort()&lt;/code&gt;/&lt;code&gt;uksort()&lt;/code&gt;) function to process a multiple conditions, you only need to write balanced arrays on either side of the operator and return the outcome. &lt;strong&gt;No more nested condition blocks or multiple returns.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The elements from both sides of the operator will be traversed left to right, one at a time, and returning the evaluation as soon as a non-tie is encountered or when the elements have all been compared.&lt;/p&gt;\n\n&lt;p&gt;Sample data for my demonstrations:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$multidimArray&lt;/span&gt; = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;text10&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; =&amp;gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;prop&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt; =&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt; =&amp;gt; []\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;text12&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; =&amp;gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;prop&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;text100&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; =&amp;gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;prop&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt; =&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;text1&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; =&amp;gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;prop&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt; =&amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\0&quot;&lt;/span&gt;\n    ],\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;text2&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt; =&amp;gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;)[&lt;span class=&quot;hljs-string&quot;&gt;&apos;prop&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;\n    ]\n];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Demonstrations (to avoid Stackoverflow page bloat, please see &lt;a href=&quot;https://3v4l.org/2OnVs&quot; rel=&quot;nofollow noreferrer&quot;&gt;the demo link&lt;/a&gt; for the outputs):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Sorting logic:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;boolean DESC (false = 0, true = 1, so trues before falses)&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;float ASC&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;uasort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$multidimArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt;]] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;float&apos;&lt;/span&gt;]];\n});\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Sorting logic:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;mixed ASC&lt;/li&gt;\n&lt;li&gt;object ASC&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;boolean ASC&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;uasort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$multidimArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;]-&amp;gt;prop, &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;]] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;]-&amp;gt;prop, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;]];\n});\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Sorting logic:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;property count of object ASC&lt;/li&gt;\n&lt;li&gt;iterability of mixed DESC&lt;/li&gt;\n&lt;li&gt;natString length ASC&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;natString ASC&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;uasort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$multidimArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_object_vars&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;])), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_iterable&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt;]]\n           &amp;lt;=&amp;gt;\n           [&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get_object_vars&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;])), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_iterable&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mixed&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;natString&apos;&lt;/span&gt;]];\n});\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This syntax allows you to sort values, functional outcomes, deep-nested data, and sorting direction in a elegant fashion.  This is definitely worth putting in your php toolbelt ...for cases when you are processing non-database data -- because of course SQL would be a much more sensible technique.&lt;/p&gt;\n\n&lt;p&gt;At your own discretion, from PHP7.4 you can use arrow syntax with these anonymous functions.  &lt;a href=&quot;https://3v4l.org/N5hs1&quot; rel=&quot;nofollow noreferrer&quot;&gt;Same script with arrow syntax&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to sort an array based on the absolute highest value based on multiple criteria, here&apos;s an easy way to do it:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$item&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$nextItem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$nextItem&lt;/span&gt;-&amp;gt;firstNumber, &lt;span class=&quot;hljs-variable&quot;&gt;$nextItem&lt;/span&gt;-&amp;gt;secondNumber)) - (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$item&lt;/span&gt;-&amp;gt;firstNumber, &lt;span class=&quot;hljs-variable&quot;&gt;$item&lt;/span&gt;-&amp;gt;secondNumber));\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;-&amp;gt;createdDate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;-&amp;gt;uploadedDate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;-&amp;gt;createdDate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;-&amp;gt;uploadedDate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;12&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;stdClass&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;-&amp;gt;createdDate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;25&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;-&amp;gt;uploadedDate = &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;;\n\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = [&lt;span class=&quot;hljs-variable&quot;&gt;$foo&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$bar&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$baz&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Order array by the highest number between &quot;createdDate&quot; and &quot;uploadedDate&quot;.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$item&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$nextItem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$nextItem&lt;/span&gt;-&amp;gt;createdDate, &lt;span class=&quot;hljs-variable&quot;&gt;$nextItem&lt;/span&gt;-&amp;gt;uploadedDate)) - (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$item&lt;/span&gt;-&amp;gt;createdDate, &lt;span class=&quot;hljs-variable&quot;&gt;$item&lt;/span&gt;-&amp;gt;uploadedDate));\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Results in:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; (\n  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; =&amp;gt; \n  (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;createdDate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;25&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;uploadedDate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,\n  ),\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; \n  (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;createdDate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;uploadedDate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;12&apos;&lt;/span&gt;,\n  ),\n  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; \n  (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;createdDate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;10&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;uploadedDate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;,\n  ),\n)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are several ways to sort an array.I will mention some methods for doing that task.fist of all , I will give an integer array which is called as &apos;$numbers&apos;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the normal way to creating an array. Suppose that , I want to sort that array in ascending order.For that, &apos;sort()&apos; method can be used.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n   }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now consider the output of that,&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/LvIh0.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/LvIh0.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can see printed number array is sorted. If you want to that number array to be sort is descending order, &apos;rsort()&apos; method can be use for that task.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n     &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n     &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;rsort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt;);\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n     }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;consider the output..&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/N1Pwx.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/N1Pwx.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now array is sorted in descending order.Ok, Let&apos;s consider an associative array.I will give an associative array(Associative array means that, An array whose each index has unique key value.) like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;eight&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;nine&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;fore&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;zero&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So ,Now I want to sort this array in ascending order according their value.&apos;asort()&apos; method can be used for that.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;eight&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;nine&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;fore&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;zero&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n   &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;asort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n    }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If sorting descending order according their value,&apos;arsort()&apos; method can be used.\nSuppose that you want to sort that array according their key value. In this , &apos;ksort()&apos; method can be use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n     &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;eight&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;nine&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;fore&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;zero&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n     &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ksort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt;);\n\n     &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n     }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now consider the output.\n&lt;a href=&quot;https://i.stack.imgur.com/P0zKr.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/P0zKr.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Now array is sorted according their key value.If You want to sort the array in descending order according their key value,&apos;krsort()&apos; method can be used.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;eight&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;nine&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;fore&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;zero&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;one&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;two&apos;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;krsort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$number&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n    }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now associative array is sorted in descending order according their key value.Look at the output.\n&lt;a href=&quot;https://i.stack.imgur.com/8sqgB.jpg&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/8sqgB.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;These are the some methods for sorting an array in ascending or descending order in php.I hope to you could get an idea.Thank you!&lt;/p&gt;\n    ","\n&lt;p&gt;If someone wants a simpler solution to manipulate arrays, just use Laravel Collection package which has an implemented sortBy function that lets your sort by keys simply.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$collection&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;forename&apos;&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;i.e., in order to sort first by a, then b, then c, the correct clause would be&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortBy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://packagist.org/packages/tightenco/collect&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://packagist.org/packages/tightenco/collect&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The simplest is to use usort function to sort array without any looping :\nBelow is an example :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;   &lt;span class=&quot;hljs-variable&quot;&gt;$array_compare&lt;/span&gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; =&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will sort in desending order :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array_compare&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x1&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x1&apos;&lt;/span&gt;]) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will sort in asending order :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array_compare&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x1&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x1&apos;&lt;/span&gt;]) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; :-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"96","randomQuestions":[{"title":"Why does my recursive function return None?","slug":"why-does-my-recursive-function-return-none-1657387792894"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"How can I save an activity state using the save instance state?","slug":"how-can-i-save-an-activity-state-using-the-save-instance-state-1657387429981"},{"title":"Why does Date.parse give incorrect results?","slug":"why-does-date.parse-give-incorrect-results-1657384642821"},{"title":"How do I correctly clone a JavaScript object?","slug":"how-do-i-correctly-clone-a-javascript-object-1657387325850"},{"title":"What is PECS (Producer Extends Consumer Super)?","slug":"what-is-pecs-(producer-extends-consumer-super)-1657384828870"},{"title":"How can I tell if a DOM element is visible in the current viewport?","slug":"how-can-i-tell-if-a-dom-element-is-visible-in-the-current-viewport-1657388316510"},{"title":"\"is\" operator behaves unexpectedly with integers","slug":"\"is\"-operator-behaves-unexpectedly-with-integers-1657387563823"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"How do I use shell variables in an awk script?","slug":"how-do-i-use-shell-variables-in-an-awk-script-1657387754261"},{"title":"How to compare arrays in JavaScript?","slug":"how-to-compare-arrays-in-javascript-1657387352277"},{"title":"Serialize and Deserialize Json and Json Array in Unity","slug":"serialize-and-deserialize-json-and-json-array-in-unity-1657388273270"},{"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710"},{"title":"Web-scraping JavaScript page with Python","slug":"web-scraping-javascript-page-with-python-1657388240875"},{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"},{"title":"Persist variables between page loads","slug":"persist-variables-between-page-loads-1657388558452"},{"title":"How can I change an element's class with JavaScript?","slug":"how-can-i-change-an-element's-class-with-javascript-1657387694695"},{"title":"MySQL pivot row into dynamic number of columns","slug":"mysql-pivot-row-into-dynamic-number-of-columns-1657387981930"},{"title":"Use of 'prototype' vs. 'this' in JavaScript?","slug":"use-of-'prototype'-vs.-'this'-in-javascript-1657388117307"},{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"}]},"__N_SSG":true}