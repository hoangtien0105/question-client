{"pageProps":{"data":{"count":610,"rows":[{"id":600,"title":"How to generate all permutations of a list","slug":"how-to-generate-all-permutations-of-a-list-1657388537371","postType":"QUESTION","createdAt":"2022-07-09T17:42:17.000Z","updatedAt":"2022-07-09T17:42:17.000Z","tags":[{"id":2849,"name":"permutation","slug":"permutation","createdAt":"2022-07-09T17:42:17.000Z","updatedAt":"2022-07-09T17:42:17.000Z","Questions_Tags":{"questionId":600,"tagId":2849}},{"id":2850,"name":"combinatorics","slug":"combinatorics","createdAt":"2022-07-09T17:42:17.000Z","updatedAt":"2022-07-09T17:42:17.000Z","Questions_Tags":{"questionId":600,"tagId":2850}}]},{"id":599,"title":"mysqli or die, does it have to die?","slug":"mysqli-or-die-does-it-have-to-die-1657388533922","postType":"QUESTION","createdAt":"2022-07-09T17:42:13.000Z","updatedAt":"2022-07-09T17:42:13.000Z","tags":[]},{"id":598,"title":"Why does this UnboundLocalError occur (closure)? [duplicate]","slug":"why-does-this-unboundlocalerror-occur-(closure)-duplicate-1657388531538","postType":"QUESTION","createdAt":"2022-07-09T17:42:11.000Z","updatedAt":"2022-07-09T17:42:11.000Z","tags":[]},{"id":597,"title":"Switch between two frames in tkinter?","slug":"switch-between-two-frames-in-tkinter-1657388528781","postType":"QUESTION","createdAt":"2022-07-09T17:42:08.000Z","updatedAt":"2022-07-09T17:42:08.000Z","tags":[{"id":2839,"name":"frame","slug":"frame","createdAt":"2022-07-09T17:42:08.000Z","updatedAt":"2022-07-09T17:42:08.000Z","Questions_Tags":{"questionId":597,"tagId":2839}}]},{"id":596,"title":"R cannot be resolved - Android error","slug":"r-cannot-be-resolved-android-error-1657388526258","postType":"QUESTION","createdAt":"2022-07-09T17:42:06.000Z","updatedAt":"2022-07-09T17:42:06.000Z","tags":[{"id":2832,"name":"eclipse","slug":"eclipse","createdAt":"2022-07-09T17:42:06.000Z","updatedAt":"2022-07-09T17:42:06.000Z","Questions_Tags":{"questionId":596,"tagId":2832}},{"id":2834,"name":"android-resources","slug":"android-resources","createdAt":"2022-07-09T17:42:06.000Z","updatedAt":"2022-07-09T17:42:06.000Z","Questions_Tags":{"questionId":596,"tagId":2834}},{"id":2835,"name":"android-sdk-tools","slug":"android-sdk-tools","createdAt":"2022-07-09T17:42:06.000Z","updatedAt":"2022-07-09T17:42:06.000Z","Questions_Tags":{"questionId":596,"tagId":2835}}]}]},"answers":{"596":["\n&lt;p&gt;After tracking down this problem as well, I found this note in the Android documentation:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://source.android.com/source/using-eclipse.html&quot; rel=&quot;noreferrer&quot;&gt;http://source.android.com/source/using-eclipse.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;*Note: Eclipse sometimes likes to add an &quot;import android.R&quot; statement at the\n  top of your files that use resources,\n  especially when you ask Eclipse to\n  sort or otherwise manage imports. This\n  will cause your &lt;em&gt;make&lt;/em&gt; to break. Look\n  out for these erroneous import\n  statements and delete them.*&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;While going through the Android sample tutorials, I would often use the &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;O&lt;/kbd&gt; command to &quot;Organize Imports&quot; and generate any missing import statements. Sometimes this would generate the incorrect import statement which would hide the &lt;code&gt;R.java&lt;/code&gt; class that is automatically generated when you build.&lt;/p&gt;\n    ","\n&lt;p&gt;Each time I had a problem with R not been generated, or even disappeared, this was due to some problem in the XML layout file that prevented the application from being built.&lt;/p&gt;\n    ","\n&lt;p&gt;Whenever you get &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;R cannot be resolved&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;then check for the &lt;code&gt;/res&lt;/code&gt; directory and there must be some file that have some error in it and that is preventing the application from being built. For example, it may be a layout file or it may be due to some missing resource is, but you already defined it in the XML file.&lt;/p&gt;\n\n&lt;p&gt;If you have any additional, even unused (!) or unreferenced (!) images in a folder like res/drawables-mdpi which do not comply to the file naming conventions (may contain only [a-z0-9_.]), the R.java class might not generate, causing the chain of events all the other posts referred to. Hope it helps!&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;my project have include a r.java.at the beginning ,R.layout.main work good.But,after adding some code it doesn&apos;t work,and the error is R.layout.main can&apos;t resolved.what&apos;s the problem?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Look at your imports. Chances are that the line:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.R;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will be there. If that&apos;s the case, remove it, so that your project will resolve R not with the default Android Resources class, but with the one auto-generated from your /res/ folder.&lt;/p&gt;\n    ","\n&lt;p&gt;And another thing which may cause this problem:&lt;/p&gt;\n\n&lt;p&gt;I installed the new ADT (v. 22). It stopped creating &lt;code&gt;gen&lt;/code&gt; folder which includes &lt;code&gt;R.java&lt;/code&gt;. The solution was to also install new Android SDK Build Tools from Android SDK Manager.&lt;/p&gt;\n\n&lt;p&gt;Solution found &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/android-developers/rCaeT3qckoE&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;What Will said was right&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;R is an automatically generated class that holds the constants used to identify your &amp;gt;resources. If you don&apos;t have an R.java file (it would be gen/eu.mauriziopz.gps/R.java in &amp;gt;Eclipse with the 1.5 SDK) I would recommend closing and reopening your project or going to &amp;gt;Project &amp;gt; Build all (and selecting &quot;Build Automatically&quot; while there as recommended by &amp;gt;Josef). If that doesn&apos;t work than try making a new project, if the problem is recreated than &amp;gt;post here again and we&apos;ll go into more detail.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;but I&apos;ve found out that there was another problem that was causing the first one. The tools in the SDK directory didn&apos;t have the permissions to be executed, so it was like the didn&apos;t exist for Eclipse, thus it didn&apos;t build the &lt;code&gt;R.java&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;p&gt;So modifying the permission and selecting &quot;Build Automatically&quot; solved the problem.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;R.java&lt;/code&gt; is a file that the Android Eclipse plugins creates while\nbuilding your application. &lt;code&gt;R.java&lt;/code&gt; is created under the &quot;gen&quot;\ndirectory. This file is generated from the information in the &quot;res&quot;\ndirectory. If you run select &quot;Project&quot; -&amp;gt; &quot;Clean...&quot; on the Eclipse\nmenu, it will remove and then regenerate the &lt;code&gt;R.java&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;p&gt;The problem &quot;R cannot be resolved&quot; happens when you change your\npackage name in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file. It uses your Android\npackage name to create a subdirectory under the &quot;gen&quot; directory where\nit stores the &lt;code&gt;R.java&lt;/code&gt; file.&lt;/p&gt;\n\n&lt;p&gt;Eclipse may have problems executing clean, because it is confused about\nwhere the &lt;code&gt;R.java&lt;/code&gt; file is when you have changed the Android package\nname. You can either rename the subdirectory under &lt;code&gt;gen&lt;/code&gt; to match your\nnew package name, or you can change your package name back to the old\nname. Do the clean and then change the package name to the new name\nyou want. This works best if you stop Eclipse from trying to build\nwhile you are changing the package name. Under the &quot;Project&quot; menu\nuncheck the option to &quot;Build Automatically&quot; and also when the\n&quot;Clean...&quot; dialog asks if it should &quot;Start a build immediately&quot;\nuncheck the box so it doesn&apos;t try to build while you are changing the\npackage name. After you have changed the name you can turn &quot;Build\nAutomatically&quot; back on again.&lt;/p&gt;\n\n&lt;p&gt;Note that if your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file package name does not match\nyour Java package name, Eclipse will end up automatically adding an\n&quot;import &amp;lt;your Android package name&amp;gt;.R;&quot; line in all your &lt;code&gt;.java&lt;/code&gt; files\nthat have any references to R. If you change your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;\npackage name, sometimes Eclipse does not update all of these added\nimports. If that happens, use the Eclipse refactoring (&lt;kbd&gt;ALT&lt;/kbd&gt; +\n&lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt;) to change the import statement in one of your Java files to\nyour new &lt;code&gt;AndroidManifest.xml&lt;/code&gt; package name. It is best to do this\nwhile you have disabled &quot;Build Automatically&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;R is an automatically generated class that holds the constants used to identify your resources.  If you don&apos;t have an R.java file (it would be gen/eu.mauriziopz.gps/R.java in Eclipse with the 1.5 SDK) I would recommend closing and reopening your project or going to Project &amp;gt; Build all (and selecting &quot;Build Automatically&quot; while there as recommended by Josef).  If that doesn&apos;t work than try making a new project, if the problem is recreated than post here again and we&apos;ll go into more detail.&lt;/p&gt;\n    ","\n&lt;p&gt;Close all files, clean project, restart Eclipse.&lt;/p&gt;\n    ","\n&lt;p&gt;It is worth checking in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. The attribute &lt;code&gt;package&lt;/code&gt; has the correct value.&lt;/p&gt;\n\n&lt;p&gt;That is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-go&quot;&gt;&amp;lt;manifest xmlns:android=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;your.correct.package.name&quot;&lt;/span&gt;\n   ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After you change that, the &lt;code&gt;R.java&lt;/code&gt; will be re-generated.&lt;/p&gt;\n    ","\n&lt;p&gt;This error can also be caused by adding an activity to a namespace that is different to the root namespace for your package.&lt;/p&gt;\n\n&lt;p&gt;For example, if &lt;code&gt;com.example.myapp&lt;/code&gt; is the root namespace for your package, you can then add an activity to the &lt;code&gt;com.example.myapp.activities&lt;/code&gt; namespace.&lt;/p&gt;\n\n&lt;p&gt;This will produce the &quot;R cannot be resolved&quot; error.&lt;/p&gt;\n\n&lt;p&gt;To fix the import the R in the default namespace in your activity should be:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.example.myapp.R;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Along with the great suggestions in the previous answers, make sure your Android target is set:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Right-click on your project&lt;/li&gt;\n&lt;li&gt;Choose Properties &lt;/li&gt;\n&lt;li&gt;Choose Android in the left menu &lt;/li&gt;\n&lt;li&gt;Tick a box next to the appropriate Project Build Target.&lt;/li&gt;\n&lt;li&gt;Click Apply and OK&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Edit: A year later I found another cause.  I had a .jpg image in my drawable folder with the same name as a .png image.  Referencing this image in my code must have confused the program and it gave the &quot;R cannot be resolved&quot; error.  &lt;/p&gt;\n    ","\n&lt;p&gt;Make sure you installed the Android build tool form sdk manager&lt;/p&gt;\n\n&lt;p&gt;project right click properties-&amp;gt; Java BuildPath select Library and add android-support.jar the follow these step.&lt;/p&gt;\n\n&lt;p&gt;Go to Project-&amp;gt;Properties-&amp;gt;Java Build Path than select Order and export tab. Set android-support .jar library checked and up it into top of the list. And clean and rebuild..It works for most of the cases&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/StAV6.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I just had this problem for the millionth time and realized what was causing it: I created an XML file with uppercase letters in the name. All your XML filenames in &lt;code&gt;/res&lt;/code&gt; must match &lt;code&gt;[a-z0-9\\\\._]&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Simplest solution - Sometimes you just need to save the XML file you were working on to get the autogenerator to kick in.  &lt;/p&gt;\n\n&lt;p&gt;Save the file (e.g. main.xml) then delete the R.java file and see if the regenerated R.java resolves the R resolve problem.&lt;/p&gt;\n    ","\n&lt;p&gt;Check the XML file names.  Be sure that they&apos;re all in lowercase.&lt;/p&gt;\n\n&lt;p&gt;Also make sure that any image resource names are also all in LOWER CASE. I had a capital letter in the name of my jpg file, and it caused the R unresolved error right across my project.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;R&lt;/code&gt; is a generated class. If you are using the &lt;a href=&quot;http://developer.android.com/guide/developing/eclipse-adt.html&quot; rel=&quot;noreferrer&quot;&gt;Android Development Tools (ADT)&lt;/a&gt; it is generated whenever the project is built. You may have &apos;Build Automatically&apos; turned off.&lt;/p&gt;\n    ","\n&lt;p&gt;This error cropped up on my x64 Linux Mint installation. It turned out that the result was a failure in the &lt;code&gt;ADB&lt;/code&gt; binary, because the &lt;code&gt;ia32-libs&lt;/code&gt; package was not installed. Simply running &lt;code&gt;apt-get install ia32-libs&lt;/code&gt; and relaunching Eclipse fixed the error.&lt;/p&gt;\n\n&lt;p&gt;If your x64 distro does not have ia32-libs, you&apos;ll have to go Multiarch.&lt;/p&gt;\n\n&lt;p&gt;Check #4 and #5 on this post:\n&lt;a href=&quot;http://crunchbang.org/forums/viewtopic.php?pid=277883#p277883&quot; rel=&quot;noreferrer&quot;&gt;http://crunchbang.org/forums/viewtopic.php?pid=277883#p277883&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hope this helps someone.&lt;/p&gt;\n    ","\n&lt;p&gt;You may need to update/install SDK tools. Relaunch Android SDK Manager again and install a new item: Android SDK Build-tools.one by one delete,fix which one work for you.&lt;a href=&quot;https://i.stack.imgur.com/HAnom.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/HAnom.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I had this problem as well. It turned out that I had inadvertently deleted the &quot;app_name&quot; string resource from the &lt;code&gt;strings.xml&lt;/code&gt; file, which was causing a silent error. Once I added it back, the R class was generated successfully and everything was back up and running.&lt;/p&gt;\n    ","\n&lt;p&gt;You may need to update SDK tools. Relaunch Android SDK Manager again and install a new item: Android SDK Build-tools. &lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/iMoT8.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Try to make your new XML layout file name lower case. For example, use &lt;code&gt;my_file.xml&lt;/code&gt; instead of &lt;code&gt;myFile.xml&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another reason &lt;code&gt;R.java&lt;/code&gt; might not get autogenerated is if you have directories like &lt;strong&gt;res/drawable-hdpi&lt;/strong&gt;, &lt;strong&gt;res/drawable-mdpi&lt;/strong&gt;, or &lt;strong&gt;res/drawable-ldpi&lt;/strong&gt;.  &lt;/p&gt;\n\n&lt;p&gt;1.6+ seems to be OK with these directories, but 1.5 doesn&apos;t want them. When I removed those directories, &lt;code&gt;R.java&lt;/code&gt; started autogenerating for me again.&lt;/p&gt;\n    ","\n&lt;p&gt;Often times this is because of the MinSDK version number you supplied when creating the project.  Example:&lt;/p&gt;\n\n&lt;p&gt;If you want 2.1 to be the minimum, Android 2.1 is actually API Level 7.&lt;/p&gt;\n\n&lt;p&gt;You can see what I am talking about when you browse the SDK you downloaded and installed.  Navigate to the place you installed the SDK to (&lt;code&gt;C:\\android-sdk-windows&lt;/code&gt; for example) and open the folder named &quot;platforms&quot;. You will see something like &quot;android-7&quot; listed as a folder, and if you open that there is a &lt;code&gt;source.properties&lt;/code&gt; file that, when opened with a text editor, will show you the corresponding platform version.&lt;/p&gt;\n\n&lt;p&gt;When you create a project, and you must select a &quot;Build Target&quot; API, the last column in that list named &quot;API Level&quot; shows the number you are looking for when populating the MinSDK setting.&lt;/p&gt;\n\n&lt;p&gt;This is probably one of the most common mistakes that results in the &lt;code&gt;R.java&lt;/code&gt; file not being created under Project &amp;gt; gen &amp;gt; packagename &amp;gt; R.java.&lt;/p&gt;\n    ","\n&lt;p&gt;Remove &lt;code&gt;main.out.xml&lt;/code&gt;. I&apos;m new to this and don&apos;t yet know what this file is used for, but removing it cleared the problem.&lt;/p&gt;\n    ","\n&lt;p&gt;Just go to Android Top menu list. click on &lt;strong&gt;Build&lt;/strong&gt; Menu, in under Build click on &lt;strong&gt;Rebuild Project&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/u255F.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/u255F.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;First check is there any error in any xml layout or not, if then resolve it first.&lt;/p&gt;\n\n&lt;p&gt;Otherwise remove junit dependency from project and rebuild the project.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ElDnv.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ElDnv.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In case anyone is interested (I might be saving your life here), I had the error, &lt;code&gt;R.xml&lt;/code&gt; cannot be resolved, slightly different on a GLS project. Hmmmm. After looking in &lt;code&gt;R.java&lt;/code&gt;, I found an auto-generated class, &lt;code&gt;XML.java&lt;/code&gt;, (I think) was not there.&lt;/p&gt;\n\n&lt;p&gt;Solution? It needed a new folder in &lt;code&gt;res&lt;/code&gt;: &lt;code&gt;res\\xml&lt;/code&gt; and a file called &lt;code&gt;default_values.xml&lt;/code&gt;\nin there. Then all was OK.&lt;/p&gt;\n\n&lt;p&gt;Just in case you have not got that file, it&apos;s:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;PreferenceScreen&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;PreferenceScreen&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So I have run into this problem multiple times when switching build targets.  Usually doing a Project &amp;gt;&amp;gt; Clean worked for me.  This last time, however, it did not.  Finally I tried to open my default.properties file, located under the root project folder.  I received an error message stating that it was out of sync with the file system.  I actually deleted it and copied a coworkers version which allowed eclipse to rebuild my R file.  I will paste what it looks like below.  It is named &apos;default.properties&apos;.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ini&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# This file is automatically generated by Android Tools.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Do not modify this file -- YOUR CHANGES WILL BE ERASED!&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This file must be checked in Version Control Systems.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# To customize properties used by the Ant build system use,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &quot;build.properties&quot;, and override values to adapt the script to your&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# project structure.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Indicates whether an apk should be generated for each density.&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;split.density&lt;/span&gt;=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Project target.&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;target&lt;/span&gt;=android-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had the examples of Android 8 and was trying to use Android 7 SDK.  When I closed the project and reopened the application folder and chose to use Android 8 SDK, it was able to find the R file.  Hope this helps.&lt;/p&gt;\n    "],"597":["\n&lt;p&gt;One way is to stack the frames on top of each other, then you can simply raise one above the other in the stacking order. The one on top will be the one that is visible. This works best if all the frames are the same size, but with a little work you can get it to work with any sized frames.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for this to work, all of the widgets for a page must have that page (ie: &lt;code&gt;self&lt;/code&gt;) or a descendant as a parent (or master, depending on the terminology you prefer).&lt;/p&gt;\n&lt;p&gt;Here&apos;s a bit of a contrived example to show you the general concept:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tk                &lt;span class=&quot;hljs-comment&quot;&gt;# python 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; font &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tkfont  &lt;span class=&quot;hljs-comment&quot;&gt;# python 3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; ImportError:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tk     &lt;span class=&quot;hljs-comment&quot;&gt;# python 2&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkFont &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tkfont  &lt;span class=&quot;hljs-comment&quot;&gt;# python 2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SampleApp&lt;/span&gt;(tk.Tk):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, *args, **kwargs&lt;/span&gt;):\n        tk.Tk.__init__(self, *args, **kwargs)\n\n        self.title_font = tkfont.Font(family=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Helvetica&apos;&lt;/span&gt;, size=&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, weight=&lt;span class=&quot;hljs-string&quot;&gt;&quot;bold&quot;&lt;/span&gt;, slant=&lt;span class=&quot;hljs-string&quot;&gt;&quot;italic&quot;&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# the container is where we&apos;ll stack a bunch of frames&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# on top of each other, then the one we want visible&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# will be raised above the others&lt;/span&gt;\n        container = tk.Frame(self)\n        container.pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;both&quot;&lt;/span&gt;, expand=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n        container.grid_rowconfigure(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, weight=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        container.grid_columnconfigure(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, weight=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\n        self.frames = {}\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; F &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (StartPage, PageOne, PageTwo):\n            page_name = F.__name__\n            frame = F(parent=container, controller=self)\n            self.frames[page_name] = frame\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;# put all of the pages in the same location;&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# the one on the top of the stacking order&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# will be the one that is visible.&lt;/span&gt;\n            frame.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sticky=&lt;span class=&quot;hljs-string&quot;&gt;&quot;nsew&quot;&lt;/span&gt;)\n\n        self.show_frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;StartPage&quot;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;show_frame&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, page_name&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;Show a frame for the given page name&apos;&apos;&apos;&lt;/span&gt;\n        frame = self.frames[page_name]\n        frame.tkraise()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StartPage&lt;/span&gt;(tk.Frame):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, parent, controller&lt;/span&gt;):\n        tk.Frame.__init__(self, parent)\n        self.controller = controller\n        label = tk.Label(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is the start page&quot;&lt;/span&gt;, font=controller.title_font)\n        label.pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n\n        button1 = tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Go to Page One&quot;&lt;/span&gt;,\n                            command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: controller.show_frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PageOne&quot;&lt;/span&gt;))\n        button2 = tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Go to Page Two&quot;&lt;/span&gt;,\n                            command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: controller.show_frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;PageTwo&quot;&lt;/span&gt;))\n        button1.pack()\n        button2.pack()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PageOne&lt;/span&gt;(tk.Frame):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, parent, controller&lt;/span&gt;):\n        tk.Frame.__init__(self, parent)\n        self.controller = controller\n        label = tk.Label(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is page 1&quot;&lt;/span&gt;, font=controller.title_font)\n        label.pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n        button = tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Go to the start page&quot;&lt;/span&gt;,\n                           command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: controller.show_frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;StartPage&quot;&lt;/span&gt;))\n        button.pack()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PageTwo&lt;/span&gt;(tk.Frame):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, parent, controller&lt;/span&gt;):\n        tk.Frame.__init__(self, parent)\n        self.controller = controller\n        label = tk.Label(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is page 2&quot;&lt;/span&gt;, font=controller.title_font)\n        label.pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n        button = tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Go to the start page&quot;&lt;/span&gt;,\n                           command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: controller.show_frame(&lt;span class=&quot;hljs-string&quot;&gt;&quot;StartPage&quot;&lt;/span&gt;))\n        button.pack()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    app = SampleApp()\n    app.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/w1sVH.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/w1sVH.png&quot; alt=&quot;start page&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://i.stack.imgur.com/xH5w5.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/xH5w5.png&quot; alt=&quot;page 1&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://i.stack.imgur.com/339hd.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/339hd.png&quot; alt=&quot;page 2&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If you find the concept of creating instance in a class confusing, or if different pages need different arguments during construction, you can explicitly call each class separately. The loop serves mainly to illustrate the point that each class is identical.&lt;/p&gt;\n&lt;p&gt;For example, to create the classes individually you can remove the loop (&lt;code&gt;for F in (StartPage, ...)&lt;/code&gt; with this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;self.frames[&lt;span class=&quot;hljs-string&quot;&gt;&quot;StartPage&quot;&lt;/span&gt;] = StartPage(parent=container, controller=self)\nself.frames[&lt;span class=&quot;hljs-string&quot;&gt;&quot;PageOne&quot;&lt;/span&gt;] = PageOne(parent=container, controller=self)\nself.frames[&lt;span class=&quot;hljs-string&quot;&gt;&quot;PageTwo&quot;&lt;/span&gt;] = PageTwo(parent=container, controller=self)\n\nself.frames[&lt;span class=&quot;hljs-string&quot;&gt;&quot;StartPage&quot;&lt;/span&gt;].grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sticky=&lt;span class=&quot;hljs-string&quot;&gt;&quot;nsew&quot;&lt;/span&gt;)\nself.frames[&lt;span class=&quot;hljs-string&quot;&gt;&quot;PageOne&quot;&lt;/span&gt;].grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sticky=&lt;span class=&quot;hljs-string&quot;&gt;&quot;nsew&quot;&lt;/span&gt;)\nself.frames[&lt;span class=&quot;hljs-string&quot;&gt;&quot;PageTwo&quot;&lt;/span&gt;].grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sticky=&lt;span class=&quot;hljs-string&quot;&gt;&quot;nsew&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Over time people have asked other questions using this code (or an online tutorial that copied this code) as a starting point. You might want to read the answers to these questions:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/32864610/7432&quot;&gt;Understanding parent and controller in Tkinter __init__&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/34301300/7432&quot;&gt;Tkinter! Understanding how to switch frames&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/32212408/7432&quot;&gt;How to get variable data from a class&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/48731097/7432&quot;&gt;Calling functions from a Tkinter Frame to another&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/33646605/7432&quot;&gt;How to access variables from different classes in tkinter?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/35029188/7432&quot;&gt;How would I make a method which is run every time a frame is shown in tkinter&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/35991126/7432&quot;&gt;Tkinter Frame Resize&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/39530107/7432&quot;&gt;Tkinter have code for pages in separate files&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/45064732/7432&quot;&gt;Refresh a tkinter frame on button press&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Here is another simple answer, but without using classes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;raise_frame&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;frame&lt;/span&gt;):\n    frame.tkraise()\n\nroot = Tk()\n\nf1 = Frame(root)\nf2 = Frame(root)\nf3 = Frame(root)\nf4 = Frame(root)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; frame &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (f1, f2, f3, f4):\n    frame.grid(row=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, column=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sticky=&lt;span class=&quot;hljs-string&quot;&gt;&apos;news&apos;&lt;/span&gt;)\n\nButton(f1, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Go to frame 2&apos;&lt;/span&gt;, command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:raise_frame(f2)).pack()\nLabel(f1, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;FRAME 1&apos;&lt;/span&gt;).pack()\n\nLabel(f2, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;FRAME 2&apos;&lt;/span&gt;).pack()\nButton(f2, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Go to frame 3&apos;&lt;/span&gt;, command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:raise_frame(f3)).pack()\n\nLabel(f3, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;FRAME 3&apos;&lt;/span&gt;).pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\nButton(f3, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Go to frame 4&apos;&lt;/span&gt;, command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:raise_frame(f4)).pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&apos;left&apos;&lt;/span&gt;)\n\nLabel(f4, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;FRAME 4&apos;&lt;/span&gt;).pack()\nButton(f4, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Goto to frame 1&apos;&lt;/span&gt;, command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;:raise_frame(f1)).pack()\n\nraise_frame(f1)\nroot.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;https://stackoverflow.com/questions/7546050/switch-between-two-frames-in-tkinter/49325719#comment103814940_49325719&quot;&gt;According to JDN96&lt;/a&gt;, the answer below may cause a &lt;a href=&quot;https://stackoverflow.com/questions/14408521/perl-tk-memory-leak-when-using-destroy-command&quot;&gt;memory leak&lt;/a&gt; by repeatedly destroying and recreating frames. However, I have not tested to verify this myself.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;One way to switch frames in &lt;code&gt;tkinter&lt;/code&gt; is to destroy the old frame then replace it with your new frame.&lt;/p&gt;\n&lt;p&gt;I have modified &lt;a href=&quot;https://stackoverflow.com/a/7557028/3357935&quot;&gt;Bryan Oakley&apos;s&lt;/a&gt; answer to destroy the old frame before replacing it. As an added bonus, this eliminates the need for a &lt;code&gt;container&lt;/code&gt; object and allows you to use any generic &lt;code&gt;Frame&lt;/code&gt; class.&lt;/p&gt;\n&lt;pre class=&quot;lang-python s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Multi-frame tkinter application v2.3&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tk\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SampleApp&lt;/span&gt;(tk.Tk):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        tk.Tk.__init__(self)\n        self._frame = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n        self.switch_frame(StartPage)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;switch_frame&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, frame_class&lt;/span&gt;):\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Destroys current frame and replaces it with a new one.&quot;&quot;&quot;&lt;/span&gt;\n        new_frame = frame_class(self)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; self._frame &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            self._frame.destroy()\n        self._frame = new_frame\n        self._frame.pack()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StartPage&lt;/span&gt;(tk.Frame):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, master&lt;/span&gt;):\n        tk.Frame.__init__(self, master)\n        tk.Label(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is the start page&quot;&lt;/span&gt;).pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n        tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Open page one&quot;&lt;/span&gt;,\n                  command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: master.switch_frame(PageOne)).pack()\n        tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Open page two&quot;&lt;/span&gt;,\n                  command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: master.switch_frame(PageTwo)).pack()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PageOne&lt;/span&gt;(tk.Frame):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, master&lt;/span&gt;):\n        tk.Frame.__init__(self, master)\n        tk.Label(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is page one&quot;&lt;/span&gt;).pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n        tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Return to start page&quot;&lt;/span&gt;,\n                  command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: master.switch_frame(StartPage)).pack()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;PageTwo&lt;/span&gt;(tk.Frame):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, master&lt;/span&gt;):\n        tk.Frame.__init__(self, master)\n        tk.Label(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is page two&quot;&lt;/span&gt;).pack(side=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top&quot;&lt;/span&gt;, fill=&lt;span class=&quot;hljs-string&quot;&gt;&quot;x&quot;&lt;/span&gt;, pady=&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n        tk.Button(self, text=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Return to start page&quot;&lt;/span&gt;,\n                  command=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: master.switch_frame(StartPage)).pack()\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    app = SampleApp()\n    app.mainloop()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/TTUxb.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/TTUxb.png&quot; alt=&quot;Start page&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://i.stack.imgur.com/jqkOn.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/jqkOn.png&quot; alt=&quot;Page one&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://i.stack.imgur.com/DKDqA.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/DKDqA.png&quot; alt=&quot;Page two&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;h3&gt;Explanation&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;switch_frame()&lt;/code&gt; works by accepting any Class object that implements &lt;a href=&quot;http://effbot.org/tkinterbook/frame.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt;. The function then creates a new frame to replace the old one.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Deletes old &lt;code&gt;_frame&lt;/code&gt; if it exists, then replaces it with the new frame.&lt;/li&gt;\n&lt;li&gt;Other frames added with &lt;code&gt;.pack()&lt;/code&gt;, such as menubars, will be unaffected.&lt;/li&gt;\n&lt;li&gt;Can be used with any class that implements &lt;code&gt;tkinter.Frame&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Window automatically resizes to fit new content&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Version History&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;v2.3\n\n- Pack buttons and labels as they are initialized\n\nv2.2\n\n- Initialize `_frame` as `None`.\n- Check if `_frame` is `None` before calling `.destroy()`.\n\nv2.1.1\n\n- Remove type-hinting for backwards compatibility with Python 3.4.\n\nv2.1\n\n- Add type-hinting for `frame_class`.\n\nv2.0\n\n- Remove extraneous `container` frame.\n    - Application now works with any generic `tkinter.frame` instance.\n- Remove `controller` argument from frame classes.\n    - Frame switching is now done with `master.switch_frame()`.\n\nv1.6\n\n- Check if frame attribute exists before destroying it.\n- Use `switch_frame()` to set first frame.\n\nv1.5\n\n  - Revert &apos;Initialize new `_frame` after old `_frame` is destroyed&apos;.\n      - Initializing the frame before calling `.destroy()` results\n        in a smoother visual transition.\n\nv1.4\n\n- Pack frames in `switch_frame()`.\n- Initialize new `_frame` after old `_frame` is destroyed.\n    - Remove `new_frame` variable.\n\nv1.3\n\n- Rename `parent` to `master` for consistency with base `Frame` class.\n\nv1.2\n\n- Remove `main()` function.\n\nv1.1\n\n- Rename `frame` to `_frame`.\n    - Naming implies variable should be private.\n- Create new frame before destroying old frame.\n\nv1.0\n\n- Initial version.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Perhaps a more intuitive solution would be to hide/unhide frames using the &lt;code&gt;pack_forget&lt;/code&gt; method if you are using the &lt;code&gt;pack&lt;/code&gt; geometry manager.&lt;/p&gt;\n&lt;p&gt;Here&apos;s a simple example.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; tkinter &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tk\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;App&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, root=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n        self.root = root\n        self.frame = tk.Frame(self.root)\n        self.frame.pack()\n        tk.Label(self.frame, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Main page&apos;&lt;/span&gt;).pack()\n        tk.Button(self.frame, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Go to Page 1&apos;&lt;/span&gt;,\n                  command=self.make_page_1).pack()\n        self.page_1 = Page_1(master=self.root, app=self)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main_page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.frame.pack()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;make_page_1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.frame.pack_forget()\n        self.page_1.start_page()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Page_1&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, master=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, app=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n        self.master = master\n        self.app = app\n        self.frame = tk.Frame(self.master)\n        tk.Label(self.frame, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Page 1&apos;&lt;/span&gt;).pack()\n        tk.Button(self.frame, text=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Go back&apos;&lt;/span&gt;, command=self.go_back).pack()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;start_page&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.frame.pack()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;go_back&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.frame.pack_forget()\n        self.app.main_page()\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    root = tk.Tk()\n    app = App(root)\n    root.mainloop()\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/0nfnn.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/0nfnn.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/laRow.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/laRow.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    "],"598":["\n&lt;p&gt;Python doesn&apos;t have variable declarations, so it has to figure out the &lt;a href=&quot;http://docs.python.org/3.3/tutorial/classes.html#python-scopes-and-namespaces&quot;&gt;scope&lt;/a&gt; of variables itself.  It does so by a simple rule:  If there is an assignment to a variable inside a function, that variable is considered local.&lt;sup&gt;&lt;a href=&quot;http://docs.python.org/3.3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;  Thus, the line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;implicitly makes &lt;code&gt;counter&lt;/code&gt; local to &lt;code&gt;increment()&lt;/code&gt;.  Trying to execute this line, though, will try to read the value of the local variable &lt;code&gt;counter&lt;/code&gt; before it is assigned, resulting in an &lt;a href=&quot;http://docs.python.org/3.3/library/exceptions.html#UnboundLocalError&quot;&gt;&lt;code&gt;UnboundLocalError&lt;/code&gt;&lt;/a&gt;.&lt;sup&gt;&lt;a href=&quot;http://docs.python.org/3.3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;If &lt;code&gt;counter&lt;/code&gt; is a global variable, the &lt;a href=&quot;http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; keyword will help.  If &lt;code&gt;increment()&lt;/code&gt; is a local function and &lt;code&gt;counter&lt;/code&gt; a local variable, you can use &lt;a href=&quot;http://docs.python.org/3.3/reference/simple_stmts.html#the-nonlocal-statement&quot;&gt;&lt;code&gt;nonlocal&lt;/code&gt;&lt;/a&gt; in Python 3.x.&lt;/p&gt;\n    ","\n&lt;p&gt;You need to use the &lt;a href=&quot;http://docs.python.org/py3k/reference/simple_stmts.html#the-global-statement&quot;&gt;global statement&lt;/a&gt; so that you are modifying the global variable counter, instead of a local variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n  counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the enclosing scope that &lt;code&gt;counter&lt;/code&gt; is defined in is not the global scope, on Python 3.x you could use the &lt;a href=&quot;http://docs.python.org/py3k/reference/simple_stmts.html#the-nonlocal-statement&quot;&gt;nonlocal statement&lt;/a&gt;.  In the same situation on Python 2.x you would have no way to reassign to the nonlocal name &lt;code&gt;counter&lt;/code&gt;, so you would need to make &lt;code&gt;counter&lt;/code&gt; mutable and modify it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  counter[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; counter[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# prints &apos;1&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To answer the question in your subject line,* yes, there are closures in Python, except they only apply inside a function, and also (in Python 2.x) they are read-only; you can&apos;t re-bind the name to a different object (though if the object is mutable, you can modify its contents). In Python 3.x, you can use the &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html?highlight=nonlocal#nonlocal&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;nonlocal&lt;/code&gt;&lt;/a&gt; keyword to modify a closure variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;incrementer&lt;/span&gt;():\n    counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n        &lt;span class=&quot;hljs-keyword&quot;&gt;nonlocal&lt;/span&gt; counter\n        counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; counter\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; increment\n\nincrement = incrementer()\n\nincrement()   &lt;span class=&quot;hljs-comment&quot;&gt;# 1&lt;/span&gt;\nincrement()   &lt;span class=&quot;hljs-comment&quot;&gt;# 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;* The question origially asked about closures in Python.&lt;/p&gt;\n    ","\n&lt;p&gt;The reason why your code throws an &lt;code&gt;UnboundLocalError&lt;/code&gt; is already well explained in other answers.&lt;/p&gt;\n&lt;p&gt;But it seems to me that you&apos;re trying to build something that works like &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.count&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;itertools.count()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;So try it out, and see if it suits your case:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; count\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter = count(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter\ncount(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(counter)\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter\ncount(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(counter)\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;counter\ncount(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python has lexical scoping by default, which means that although an enclosed scope can access values in its enclosing scope, it cannot modify them (unless they&apos;re declared global with the &lt;a href=&quot;http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; keyword).&lt;/p&gt;\n\n&lt;p&gt;A closure binds values in the &lt;em&gt;enclosing&lt;/em&gt; environment to names in the &lt;em&gt;local&lt;/em&gt; environment. The local environment can then use the bound value, and even reassign that name to something else, but it can&apos;t modify the binding in the enclosing environment.&lt;/p&gt;\n\n&lt;p&gt;In your case you are trying to treat &lt;code&gt;counter&lt;/code&gt; as a local variable rather than a bound value. Note that this code, which binds the value of &lt;code&gt;x&lt;/code&gt; assigned in the enclosing environment, works fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;():\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f()\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To modify a global variable inside a function, you must use the global keyword.&lt;/p&gt;\n\n&lt;p&gt;When you try to do this without the line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;inside of the definition of increment, a local variable named counter is created so as to keep you from mucking up the counter variable that the whole program may depend on.&lt;/p&gt;\n\n&lt;p&gt;Note that you only need to use global when you are modifying the variable; you could read counter from within increment without the need for the global statement.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;():\n  &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; counter\n  counter += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\nincrement()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python is not purely lexically scoped.&lt;/p&gt;\n&lt;p&gt;See &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them/&quot;&gt;Using global variables in a function&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;And &lt;em&gt;&lt;a href=&quot;https://www.saltycrane.com/blog/2008/01/python-variable-scope-notes/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Notes on Python variable scope&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    "],"599":["\n&lt;blockquote&gt;\n&lt;p&gt;Does it have to die&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Quite contrary, &lt;strong&gt;it shouldn&apos;t &lt;code&gt;or die()&lt;/code&gt; ever.&lt;/strong&gt;&lt;br&gt;\nPHP is a language of bad heredity. Very bad heredity. And &lt;code&gt;or die()&lt;/code&gt; with error message is one of the worst rudiments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;die throws the error message out, revealing some system internals to the potential attacker&lt;/li&gt;\n&lt;li&gt;such error message confuses casual users, because they don&apos;t understand what does it mean&lt;/li&gt;\n&lt;li&gt;Besides, &lt;code&gt;die&lt;/code&gt; kills the script in the middle, leaving users without  familiar interface to work with, so they&apos;d likely just drop out&lt;/li&gt;\n&lt;li&gt;it kills the script irrecoverably. While exceptions can be caught and gracefully handled&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;die()&lt;/code&gt; gives you no hint of &lt;em&gt;where the error has been occurred&lt;/em&gt;. And in a relatively big application it will be quite a pain to find.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So, never use &lt;code&gt;die()&lt;/code&gt; with MySQL errors, &lt;strong&gt;even for the temporary debugging&lt;/strong&gt;: there are better ways.&lt;/p&gt;\n&lt;p&gt;Instead of manually checking for the error, just configure mysqli to throw exceptions on error, by adding the following line to your connection code&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and after that just write every mysqli command as is, without any &lt;code&gt;or die&lt;/code&gt; or anything else:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt; = mysqli_query(&lt;span class=&quot;hljs-variable&quot;&gt;$link&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This code will throw an exception in case of error and thus you will always be informed of every problem without a single line of extra code.&lt;/p&gt;\n&lt;p&gt;A more detailed explanation on how to make your error reporting production ready, uniform and overall sensible while making your code much cleaner, you can find in my article on &lt;a href=&quot;https://phpdelusions.net/articles/error_reporting&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP error reporting&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;or&lt;/code&gt; is just an operator (very similar to &lt;code&gt;||&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;or die()&lt;/code&gt; syntax works because &lt;code&gt;or&lt;/code&gt; short-circuits, which means that if the first statement is true, &lt;code&gt;True or X&lt;/code&gt; will always be true, so &lt;code&gt;X&lt;/code&gt; isn&apos;t evaluated and your script doesn&apos;t &lt;code&gt;die&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, you can provide a different function after the (or).\nI have tested the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_query&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sel_db&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;what!&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_error&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sel_db&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It doesn&apos;t have to be &lt;code&gt;die()&lt;/code&gt; specifically, but it needs to be something that&apos;ll make the script halt by calling &lt;code&gt;exit()&lt;/code&gt; or &lt;code&gt;die()&lt;/code&gt;, or something that throws an exception. Otherwise, the script will continue with the return value of that function (which is probably either null or some sort of junk) in &lt;code&gt;$update_result&lt;/code&gt;, which will almost certainly cause problems.&lt;/p&gt;\n    "],"600":["\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.permutations&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;itertools.permutations&lt;/code&gt;&lt;/a&gt; from the &lt;strong&gt;standard library&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Adapted from &lt;a href=&quot;http://code.activestate.com/recipes/252178/&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; is a demonstration of how &lt;code&gt;itertools.permutations&lt;/code&gt; might be implemented:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elements&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(elements) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; elements\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; perm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutations(elements[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(elements)):\n            &lt;span class=&quot;hljs-comment&quot;&gt;# nb elements[0:1] works in both string and list contexts&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; perm[:i] + elements[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + perm[i:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A couple of alternative approaches are listed in the documentation of &lt;code&gt;itertools.permutations&lt;/code&gt;. Here&apos;s one:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, r=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# permutations(&apos;ABCD&apos;, 2) --&amp;gt; AB AC AD BA BC BD CA CB CD DA DB DC&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# permutations(range(3)) --&amp;gt; 012 021 102 120 201 210&lt;/span&gt;\n    pool = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(iterable)\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(pool)\n    r = n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r &amp;gt; n:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    indices = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n)\n    cycles = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n, n-r, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(pool[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices[:r])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; n:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(r)):\n            cycles[i] -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; cycles[i] == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n                indices[i:] = indices[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] + indices[i:i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n                cycles[i] = n - i\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                j = cycles[i]\n                indices[i], indices[-j] = indices[-j], indices[i]\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(pool[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices[:r])\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And another, based on &lt;code&gt;itertools.product&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, r=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    pool = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(iterable)\n    n = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(pool)\n    r = n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; indices &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n), repeat=r):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(indices)) == r:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(pool[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; indices)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For &lt;a href=&quot;http://docs.python.org/dev/whatsnew/2.6.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Python 2.6&lt;/a&gt; onwards:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\nitertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This returns as a generator.  Use &lt;code&gt;list(permutations(xs))&lt;/code&gt; to return as a list.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;The following code with Python 2.6 and above ONLY&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;First, import &lt;code&gt;itertools&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Permutation (order matters):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Combination (order does NOT matter):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.combinations(&lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Cartesian product (with several iterables):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Cartesian product (with one iterable and itself):&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], repeat=&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;),\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;head, tail=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(head) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(tail)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(head)):\n            permutations(head[:i] + head[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], tail + head[i])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;called as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;permutations(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k == &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a):\n      &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(k, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)):\n         a[k], a[i] = a[i] ,a[k]\n         perm(a, k+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n         a[k], a[i] = a[i], a[k]\n\nperm([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As I&apos;m swapping the content of the list it&apos;s required a mutable sequence type as input. E.g. &lt;code&gt;perm(list(&quot;ball&quot;))&lt;/code&gt; will work and &lt;code&gt;perm(&quot;ball&quot;)&lt;/code&gt; won&apos;t because you can&apos;t change a string. &lt;/p&gt;\n\n&lt;p&gt;This Python implementation is inspired by the algorithm presented in the book &lt;em&gt;Computer Algorithms by Horowitz, Sahni and Rajasekeran&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This solution implements a generator, to avoid holding all the permutations on memory:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt; (orig_list):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(orig_list, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        orig_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(orig_list)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; orig_list\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(orig_list) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(orig_list):\n        new_list = orig_list[:]\n        pos = new_list.index(n)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt;(new_list[pos])\n        new_list.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, n)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; resto &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutations(new_list[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; new_list[:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + resto &amp;lt;&amp;gt; orig_list:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; new_list[:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + resto\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In a functional style&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addperm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:i] + [x] + l[i:]  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) ]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; perm(l[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; addperm(l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],y) ]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; perm([ i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following code is an in-place permutation of a given list, implemented as a generator. Since it only returns references to the list, the list should not be modified outside the generator.\nThe solution is non-recursive, so uses low memory. Work well also with multiple copies of elements in the input list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute_in_place&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    a.sort()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n    first = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    last = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        i = last - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            i = i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a[i] &amp;lt; a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:\n                j = last - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (a[i] &amp;lt; a[j]):\n                    j = j - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                a[i], a[j] = a[j], a[i] &lt;span class=&quot;hljs-comment&quot;&gt;# swap the values&lt;/span&gt;\n                r = a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:last]\n                r.reverse()\n                a[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:last] = r\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i == first:\n                a.reverse()\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute_in_place(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute_in_place([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A quite obvious way in my opinion might be also:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; l:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[]]\n    res = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n            temp = l[:]\n            temp.remove(e)\n            res.extend([[e] + r &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutList(temp)])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Regular implementation (no yield - will do everything in memory):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPermutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [array]\n    permutations = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)): \n        &lt;span class=&quot;hljs-comment&quot;&gt;# get all perm&apos;s of subarray w/o current item&lt;/span&gt;\n        perms = getPermutations(array[:i] + array[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])  \n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; perms:\n            permutations.append([array[i], *p])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; permutations\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yield implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPermutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; array\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)):\n            perms = getPermutations(array[:i] + array[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; perms:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; [array[i], *p]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The basic idea is to go over all the elements in the array for the 1st position, and then in 2nd position go over all the rest of the elements without the chosen element for the 1st, etc. You can do this with &lt;strong&gt;recursion&lt;/strong&gt;, where the stop criteria is getting to an array of 1 element - in which case you return that array.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/eX3df.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/eX3df.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list2Perm = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;]\nlistPerm = [[a, b, c]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2Perm\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2Perm\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list2Perm\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( a != b &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; b != c &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; a != c )\n            ]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; listPerm\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[\n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;], \n    [&lt;span class=&quot;hljs-string&quot;&gt;&apos;three&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I used an algorithm based on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Factorial_number_system&quot; rel=&quot;noreferrer&quot;&gt;factorial number system&lt;/a&gt;- For a list of length n, you can assemble each permutation item by item, selecting from the items left at each stage. You have n choices for the first item, n-1 for the second, and only one for the last, so you can use the digits of a number in the factorial number system as the indices. This way the numbers 0 through n!-1 correspond to all possible permutations in lexicographic order.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; factorial\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    permutations=[]\n    length=&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(factorial(length)):\n        available=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)\n        newPermutation=[]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; radix &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(length, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            placeValue=factorial(radix-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n            index=x/placeValue\n            newPermutation.append(available.pop(index))\n            x-=index*placeValue\n        permutations.append(newPermutation)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; permutations\n\npermutations(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This method is non-recursive, but it is slightly slower on my computer and xrange raises an error when n! is too large to be converted to a C long integer (n=13 for me). It was enough when I needed it, but it&apos;s no itertools.permutations by a long shot.&lt;/p&gt;\n    ","\n&lt;p&gt;Note that this algorithm has an &lt;code&gt;n factorial&lt;/code&gt; time complexity, where &lt;code&gt;n&lt;/code&gt; is the length of the input list&lt;/p&gt;\n\n&lt;p&gt;Print the results on the run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; result\nresult = [] \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;li&lt;/span&gt;):\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; li == [] &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; li == &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(li) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n    result.append(li[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; result\n    result.pop()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(li)):\n    result.append(li[i])\n    permutation(li[:i] + li[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n    result.pop()    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;permutation([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One can indeed iterate over the first element of each permutation, as in tzwenn&apos;s answer. It is however more efficient to write this solution this way:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;all_perms&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elements&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(elements) &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; elements  &lt;span class=&quot;hljs-comment&quot;&gt;# Only permutation possible = no permutation&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Iteration over the first element in the result permutation:&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (index, first_elmt) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(elements):\n            other_elmts = elements[:index]+elements[index+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; permutation &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; all_perms(other_elmts): \n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; [first_elmt] + permutation\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution is about 30&amp;nbsp;% faster, apparently thanks to the recursion ending at &lt;code&gt;len(elements) &amp;lt;= 1&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.\nIt is also much more memory-efficient, as it uses a generator function (through &lt;code&gt;yield&lt;/code&gt;), like in Riccardo Reyes&apos;s solution.&lt;/p&gt;\n    ","\n&lt;p&gt;This is inspired by the Haskell implementation using list comprehension: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [[x] + ys &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ys &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permutation(delete(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, x))]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;delete&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, item&lt;/span&gt;):\n    lc = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[:]\n    lc.remove(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lc\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For performance, a numpy solution inspired by &lt;a href=&quot;http://www.kcats.org/csci/464/doc/knuth/fascicles/fasc2b.pdf&quot; rel=&quot;noreferrer&quot;&gt;Knuth&lt;/a&gt;, (p22) :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; empty, uint8\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; factorial\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perms&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    f = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    p = empty((&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*n-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, factorial(n)), uint8)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(n):\n        p[i, :f] = i\n        p[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, :f] = p[:i, :f]  &lt;span class=&quot;hljs-comment&quot;&gt;# constitution de blocs&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(i):\n            p[:i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, f*(j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):f*(j+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)] = p[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:j+i+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, :f]  &lt;span class=&quot;hljs-comment&quot;&gt;# copie de blocs&lt;/span&gt;\n        f = f*(i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; p[:n, :]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Copying large blocs of memory saves time - \nit&apos;s  20x faster than &lt;code&gt;list(itertools.permutations(range(n))&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: %timeit -n10 &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(permutations(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;815&lt;/span&gt; ms per loop\n\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: %timeit -n100 perms(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) \n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you don&apos;t want to use the builtin methods such as:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;you can implement permute function yourself&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections.abc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable: Iterable[&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;]&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;]:\n    perms = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(iterable) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {*iterable}\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; index, char &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(iterable):\n        perms.update([char + perm &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; perm &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute(iterable[:index] + iterable[index + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])])\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; perms\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permute(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# {&apos;bca&apos;, &apos;abc&apos;, &apos;cab&apos;, &apos;acb&apos;, &apos;cba&apos;, &apos;bac&apos;}&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permute([&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;]))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# {&apos;123&apos;, &apos;312&apos;, &apos;132&apos;, &apos;321&apos;, &apos;213&apos;, &apos;231&apos;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Disclaimer: shameless plug by package author. :)&lt;/p&gt;\n&lt;p&gt;The &lt;a href=&quot;https://pypi.org/project/trotter/&quot; rel=&quot;nofollow noreferrer&quot;&gt;trotter&lt;/a&gt; package is different from most implementations in that it generates pseudo lists that don&apos;t actually contain permutations but rather describe mappings between permutations and respective positions in an ordering, making it possible to work with very large &apos;lists&apos; of permutations, as shown in &lt;a href=&quot;https://permutation-products.netlify.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;this demo&lt;/a&gt; which performs pretty instantaneous operations and look-ups in a pseudo-list &apos;containing&apos; all the permutations of the letters in the alphabet, without using more memory or processing than a typical web page.&lt;/p&gt;\n&lt;p&gt;In any case, to generate a list of permutations, we can do the following.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; trotter\n\nmy_permutations = trotter.Permutations(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_permutations)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_permutations:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre&gt;A pseudo-list containing 6 3-permutations of [1, 2, 3].\n[1, 2, 3]\n[1, 3, 2]\n[3, 1, 2]\n[3, 2, 1]\n[2, 3, 1]\n[2, 1, 3]\n&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ANOTHER APPROACH (without libs)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;]\n\n    result = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;)):\n        first = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;[i]\n        rest = &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;[:i] + &lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n        rest_permutation = permutation(rest)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rest_permutation:\n            result.append(first + p)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Input can be a string or a list&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permutation(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abcd&apos;&lt;/span&gt;))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(permutation([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;):\n    p = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        p.append(i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,n+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p[i], end=&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        i = n - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        found = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; found &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; i&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p[i]&amp;lt;p[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]:\n                found = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                i = i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        k = n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; p[i]&amp;gt;p[k]:\n            k = k - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        aux = p[i]\n        p[i] = p[k]\n        p[k] = aux\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,(n-i)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            aux = p[i+j]\n            p[i+j] = p[n-j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n            p[n-j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = aux\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; found:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n\nperm(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an algorithm that works on a list without creating new intermediate lists similar to Ber&apos;s solution at &lt;a href=&quot;https://stackoverflow.com/a/108651/184528&quot;&gt;https://stackoverflow.com/a/108651/184528&lt;/a&gt;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs, low=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(xs):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; xs\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute(xs, low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(xs)):        \n            xs[low], xs[i] = xs[i], xs[low]\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute(xs, low + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p        \n            xs[low], xs[i] = xs[i], xs[low]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; p\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can try the code out for yourself here: &lt;a href=&quot;http://repl.it/J9v&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://repl.it/J9v&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The beauty of recursion:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;prefix,rest&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rest:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_rest=copy.copy(rest)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_prefix=copy.copy(prefix)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_prefix.append(e)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             new_rest.remove(e)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(new_rest) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; new_prefix + new_rest\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                     &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;             perm(new_prefix,new_rest)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;perm([],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;])\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This algorithm is the most effective one, it avoids of array passing and manipulation in recursive calls, works in Python 2, 3:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;items&lt;/span&gt;):\n    length = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(items)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ix=[]&lt;/span&gt;):\n        do_yield = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(ix) == length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ix: &lt;span class=&quot;hljs-comment&quot;&gt;#avoid duplicates&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; do_yield:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;([items[y] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ix + [i]])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; inner(ix + [i]):\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; p\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; permute((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pzip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c, seq&lt;/span&gt;):\n    result = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(item)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n            result.append(item[i:]+c+item[:i])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;perm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;line&lt;/span&gt;):\n    seq = [c &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; line]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(seq) &amp;lt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; :\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; seq\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pzip(seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], perm(seq[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generate all possible permutations&lt;/p&gt;\n\n&lt;p&gt;I&apos;m using python3.4:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;calcperm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arr, size&lt;/span&gt;):\n    result = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;([()])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dummy_idx &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(size):\n        temp = &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dummy_lst &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dummy_outcome &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dummy_outcome &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dummy_lst:\n                    new_seq = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(dummy_lst)\n                    new_seq.append(dummy_outcome)\n                    temp.add(&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(new_seq))\n        result = temp\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test Cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-comment&quot;&gt;#lst = [&quot;yellow&quot;, &quot;magenta&quot;, &quot;white&quot;, &quot;blue&quot;]&lt;/span&gt;\nseq = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nfinal = calcperm(lst, seq)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(final))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(final)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I see a &lt;em&gt;lot&lt;/em&gt; of iteration going on inside these recursive functions, not exactly &lt;em&gt;pure&lt;/em&gt; recursion...&lt;/p&gt;\n\n&lt;p&gt;so for those of you who cannot abide by even a single loop, here&apos;s a gross, totally unnecessary fully recursive solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;all_insert&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, e, i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:i]+[e]+x[i:]] + all_insert(x,e,i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;for_each&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;X, e&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; all_insert(X[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], e) + for_each(X[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:],e) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; X &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permute&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(x) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; for_each( permute(x[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) , x[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n\n\nperms = permute([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To save you folks possible hours of searching and experimenting, here&apos;s the non-recursive permutaions solution in Python which also works with Numba (as of v. 0.41):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@numba.njit()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutations&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;A, k&lt;/span&gt;):\n    r = [[i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(k):\n        r = [[a] + b &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; A &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; r &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; b)==&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r\npermutations([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To give an impression about performance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;%timeit permutations(np.arange(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;243&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;11.1&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\ntime: &lt;span class=&quot;hljs-number&quot;&gt;406&lt;/span&gt; ms\n\n%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.permutations(np.arange(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;15.9&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;8.61&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\ntime: &lt;span class=&quot;hljs-number&quot;&gt;12.9&lt;/span&gt; s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So use this version only if you have to call it from njitted function, otherwise prefer itertools implementation.&lt;/p&gt;\n    ","\n&lt;p&gt;Another solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;permutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;flag, k =&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;):\n    N = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(flag)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, N):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; flag[i] != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        flag[i] = k \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k == N:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; flag\n        permutation(flag, k+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        flag[i] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\npermutation([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Anyway we could use &lt;a href=&quot;https://docs.sympy.org/latest/&quot; rel=&quot;nofollow noreferrer&quot;&gt;sympy&lt;/a&gt; library , also support for multiset permutations&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sympy\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sympy.utilities.iterables &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; multiset_permutations\nt = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\np = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(multiset_permutations(t))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Answer is highly inspired by &lt;a href=&quot;https://stackoverflow.com/questions/41210142/get-all-permutations-of-a-numpy-array/41210450&quot;&gt;Get all permutations of a numpy array&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is the asymptotically optimal way O(n*n!) of generating permutations after initial sorting.&lt;/p&gt;\n&lt;p&gt;There are n! permutations at most and hasNextPermutation(..) runs in O(n) time complexity&lt;/p&gt;\n&lt;p&gt;In 3 steps, &lt;br&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Find largest j such that a[j] can be increased&lt;/li&gt;\n&lt;li&gt;Increase a[j] by smallest feasible amount&lt;/li&gt;\n&lt;li&gt;Find lexicogrpahically least way to extend the new a[0..j]&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\nLexicographic permutation generation\n\nconsider example array state of [1,5,6,4,3,2] for sorted [1,2,3,4,5,6]\nafter 56432(treat as number) -&amp;gt;nothing larger than 6432(using 6,4,3,2) beginning with 5\nso 6 is next larger and 2345(least using numbers other than 6)\nso [1, 6,2,3,4,5]\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hasNextPermutation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos; Base Condition &apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; ==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Set j = last-2 and find first j such that a[j] &amp;lt; a[j+1]\n    If no such j(j==-1) then we have visited all permutations\n    after this step a[j+1]&amp;gt;=..&amp;gt;=a[len-1] and a[j]&amp;lt;a[j+1]\n\n    a[j]=5 or j=1, 6&amp;gt;5&amp;gt;4&amp;gt;3&amp;gt;2\n    &apos;&apos;&apos;&lt;/span&gt;\n    j = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (j &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; array[j] &amp;gt;= array[j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]):\n        j= j-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(j==-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 2 for j {j}  {array}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    decrease l (from n-1 to j) repeatedly until a[j]&amp;lt;a[l]\n    Then swap a[j], a[l]\n    a[l] is the smallest element &amp;gt; a[j] that can follow a[l]...a[j-1] in permutation\n    before swap we have a[j+1]&amp;gt;=..&amp;gt;=a[l-1]&amp;gt;=a[l]&amp;gt;a[j]&amp;gt;=a[l+1]&amp;gt;=..&amp;gt;=a[len-1]\n    after swap -&amp;gt; a[j+1]&amp;gt;=..&amp;gt;=a[l-1]&amp;gt;=a[j]&amp;gt;a[l]&amp;gt;=a[l+1]&amp;gt;=..&amp;gt;=a[len-1]\n\n    a[l]=6 or l=2, j=1 just before swap [1, 5, 6, 4, 3, 2] \n    after swap [1, 6, 5, 4, 3, 2] a[l]=5, a[j]=6\n    &apos;&apos;&apos;&lt;/span&gt;\n    l = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(array[j] &amp;gt;= array[l]):\n        l = l-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 3 for l={l}, j={j} before swap {array}&quot;)&lt;/span&gt;\n    array[j], array[l] = array[l], array[j]\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 3 for l={l} j={j} after swap {array}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    Reverse a[j+1...len-1](both inclusive)\n\n    after reversing [1, 6, 2, 3, 4, 5]\n    &apos;&apos;&apos;&lt;/span&gt;\n    array[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;] = &lt;span class=&quot;hljs-built_in&quot;&gt;reversed&lt;/span&gt;(array[j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;])\n    &lt;span class=&quot;hljs-comment&quot;&gt;# print(f&quot;After step 4 reversing {array}&quot;)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\narray = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\narray.sort()\n&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)\ncount =&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(array)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\nThe algorithm visits every permutation in lexicographic order\ngenerating one by one\n&apos;&apos;&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(hasNextPermutation(array, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(array)\n    count = count +&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# The number of permutations will be n! if no duplicates are present, else less than that&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1,4,3,3,2] -&amp;gt; 5!/2!=60&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&quot;Number of permutations: &lt;span class=&quot;hljs-subst&quot;&gt;{count}&lt;/span&gt;&quot;&lt;/span&gt;)\n\n\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"3","randomQuestions":[{"title":"SQL injection that gets around mysql_real_escape_string()","slug":"sql-injection-that-gets-around-mysql_real_escape_string()-1657384364747"},{"title":"What is ViewModel in MVC?","slug":"what-is-viewmodel-in-mvc-1657387451244"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"How do I detect collision in pygame?","slug":"how-do-i-detect-collision-in-pygame-1657387496338"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"How do I detect a click outside an element?","slug":"how-do-i-detect-a-click-outside-an-element-1657387505351"},{"title":"List of lists changes reflected across sublists unexpectedly","slug":"list-of-lists-changes-reflected-across-sublists-unexpectedly-1657384393720"},{"title":"Can a local variable's memory be accessed outside its scope?","slug":"can-a-local-variable's-memory-be-accessed-outside-its-scope-1657384460386"},{"title":"How do I print my Java object without getting \"SomeType@2f92e0f4\"?","slug":"how-do-i-print-my-java-object-without-getting-\"sometype@2f92e0f4\"-1657384731950"},{"title":"PHP parse/syntax errors; and how to solve them","slug":"php-parsesyntax-errors-and-how-to-solve-them-1657384264713"},{"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825"},{"title":"Reference - What does this regex mean?","slug":"reference-what-does-this-regex-mean-1657384291445"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"How to unnest (explode) a column in a pandas DataFrame, into multiple rows","slug":"how-to-unnest-(explode)-a-column-in-a-pandas-dataframe-into-multiple-rows-1657387806735"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"Tkinter: AttributeError: NoneType object has no attribute <attribute name>","slug":"tkinter:-attributeerror:-nonetype-object-has-no-attribute-lessattribute-namegreater-1657385472410"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"Why does this UnboundLocalError occur (closure)? [duplicate]","slug":"why-does-this-unboundlocalerror-occur-(closure)-duplicate-1657388531538"},{"title":"Calculate distance between two latitude-longitude points? (Haversine formula)","slug":"calculate-distance-between-two-latitude-longitude-points-(haversine-formula)-1657388500103"}]},"__N_SSG":true}