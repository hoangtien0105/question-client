{"pageProps":{"data":{"count":610,"rows":[{"id":140,"title":"What is the strict aliasing rule?","slug":"what-is-the-strict-aliasing-rule-1657384742852","postType":"QUESTION","createdAt":"2022-07-09T16:39:02.000Z","updatedAt":"2022-07-09T16:39:02.000Z","tags":[{"id":511,"name":"strict-aliasing","slug":"strict-aliasing","createdAt":"2022-07-09T16:39:02.000Z","updatedAt":"2022-07-09T16:39:02.000Z","Questions_Tags":{"questionId":140,"tagId":511}},{"id":512,"name":"type-punning","slug":"type-punning","createdAt":"2022-07-09T16:39:02.000Z","updatedAt":"2022-07-09T16:39:02.000Z","Questions_Tags":{"questionId":140,"tagId":512}}]},{"id":139,"title":"How do I pass data between Activities in Android application?","slug":"how-do-i-pass-data-between-activities-in-android-application-1657384739839","postType":"QUESTION","createdAt":"2022-07-09T16:38:59.000Z","updatedAt":"2022-07-09T16:38:59.000Z","tags":[{"id":506,"name":"android-intent","slug":"android-intent","createdAt":"2022-07-09T16:38:59.000Z","updatedAt":"2022-07-09T16:38:59.000Z","Questions_Tags":{"questionId":139,"tagId":506}},{"id":507,"name":"android-activity","slug":"android-activity","createdAt":"2022-07-09T16:38:59.000Z","updatedAt":"2022-07-09T16:38:59.000Z","Questions_Tags":{"questionId":139,"tagId":507}}]},{"id":138,"title":"Providing white space in a Swing GUI","slug":"providing-white-space-in-a-swing-gui-1657384734588","postType":"QUESTION","createdAt":"2022-07-09T16:38:54.000Z","updatedAt":"2022-07-09T16:38:54.000Z","tags":[{"id":503,"name":"whitespace","slug":"whitespace","createdAt":"2022-07-09T16:38:54.000Z","updatedAt":"2022-07-09T16:38:54.000Z","Questions_Tags":{"questionId":138,"tagId":503}}]},{"id":137,"title":"How do I print my Java object without getting \"SomeType@2f92e0f4\"?","slug":"how-do-i-print-my-java-object-without-getting-\"sometype@2f92e0f4\"-1657384731950","postType":"QUESTION","createdAt":"2022-07-09T16:38:51.000Z","updatedAt":"2022-07-09T16:38:51.000Z","tags":[{"id":500,"name":"tostring","slug":"tostring","createdAt":"2022-07-09T16:38:52.000Z","updatedAt":"2022-07-09T16:38:52.000Z","Questions_Tags":{"questionId":137,"tagId":500}}]},{"id":136,"title":"Why are these numbers not equal?","slug":"why-are-these-numbers-not-equal-1657384729559","postType":"QUESTION","createdAt":"2022-07-09T16:38:49.000Z","updatedAt":"2022-07-09T16:38:49.000Z","tags":[]}]},"answers":{"136":["\n&lt;h1&gt;General (language agnostic) reason&lt;/h1&gt;\n&lt;p&gt;Since not all numbers can be represented exactly in &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot; rel=&quot;noreferrer&quot;&gt;IEEE floating point arithmetic&lt;/a&gt; (the standard that almost all computers use to represent decimal numbers and do math with them), you will not always get what you expected. This is especially true because some values which are simple, finite decimals (such as 0.1 and 0.05) are not represented exactly in the computer and so the results of arithmetic on them may not give a result that is identical to a direct representation of the &quot;known&quot; answer.&lt;/p&gt;\n&lt;p&gt;This is a well known limitation of computer arithmetic and is discussed in several places:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The R FAQ has question devoted to it: &lt;a href=&quot;http://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f&quot; rel=&quot;noreferrer&quot;&gt;R FAQ 7.31&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.burns-stat.com/pages/Tutor/R_inferno.pdf&quot; rel=&quot;noreferrer&quot;&gt;The R Inferno by Patrick Burns&lt;/a&gt; devotes the first &quot;Circle&quot; to this problem (starting on page 9)&lt;/li&gt;\n&lt;li&gt;David Goldberg, &quot;What Every Computer Scientist Should Know About Floating-point Arithmetic,&quot; &lt;em&gt;ACM Computing Surveys&lt;/em&gt; &lt;strong&gt;23&lt;/strong&gt;, 1 (1991-03), 5-48 &lt;a href=&quot;http://dx.doi.org/10.1145/103162.103163&quot; rel=&quot;noreferrer&quot;&gt;doi&amp;gt;10.1145/103162.103163&lt;/a&gt; (&lt;a href=&quot;http://www.validlab.com/goldberg/paper.pdf&quot; rel=&quot;noreferrer&quot;&gt;revision also available&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://floating-point-gui.de/&quot; rel=&quot;noreferrer&quot;&gt;The Floating-Point Guide - What Every Programmer Should Know About Floating-Point Arithmetic&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://0.30000000000000004.com&quot; rel=&quot;noreferrer&quot;&gt;0.30000000000000004.com&lt;/a&gt; compares floating point arithmetic across programming languages&lt;/li&gt;\n&lt;li&gt;Several Stack Overflow questions including\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/21895756/892313&quot;&gt;Why are floating point numbers inaccurate?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/1089018/892313&quot;&gt;Why can&apos;t decimal numbers be represented exactly in binary?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/588004/892313&quot;&gt;Is floating point math broken?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://meta.stackoverflow.com/q/260130/892313&quot;&gt;Canonical duplicate for &quot;floating point is inaccurate&quot;&lt;/a&gt; (a meta discussion about a canonical answer for this issue)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;Comparing scalars&lt;/h1&gt;\n&lt;p&gt;The standard solution to this in &lt;code&gt;R&lt;/code&gt; is not to use &lt;a href=&quot;https://www.rdocumentation.org/packages/base/topics/Comparison&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt;, but rather the &lt;a href=&quot;https://www.rdocumentation.org/packages/base/topics/all.equal&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;all.equal&lt;/code&gt;&lt;/a&gt; function. Or rather, since &lt;code&gt;all.equal&lt;/code&gt; gives lots of detail about the differences if there are any, &lt;code&gt;isTRUE(all.equal(...))&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;isTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;i equals 0.15&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;i does not equal 0.15&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;yields&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;i equals &lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Some more examples of using &lt;code&gt;all.equal&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (the last example is supposed to show that this will correctly show differences).&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE&lt;/span&gt;\nisTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE&lt;/span&gt;\nisTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE&lt;/span&gt;\nisTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] TRUE&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE&lt;/span&gt;\nisTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Some more detail, directly copied from an &lt;a href=&quot;https://stackoverflow.com/a/2228139/892313&quot;&gt;answer to a similar question&lt;/a&gt;:&lt;/p&gt;\n&lt;p&gt;The problem you have encountered is that floating point cannot represent decimal fractions  exactly in most cases, which means you will frequently find that exact matches fail.&lt;/p&gt;\n&lt;p&gt;while R lies slightly when you say:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] 0.9&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] 0.9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can find out what it really thinks in decimal:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;sprintf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.54f&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;0.900000000000000133226762955018784850835800170898437500&quot;&lt;/span&gt;\nsprintf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.54f&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;0.900000000000000022204460492503130808472633361816406250&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can see these numbers are different, but the representation is a bit unwieldy.  If we look at them in binary (well, hex, which is equivalent) we get a clearer picture:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;sprintf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%a&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;0x1.ccccccccccccdp-1&quot;&lt;/span&gt;\nsprintf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%a&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;0x1.ccccccccccccep-1&quot;&lt;/span&gt;\nsprintf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%a&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;0x1p-53&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can see that they differ by &lt;code&gt;2^-53&lt;/code&gt;, which is important because this number is the smallest representable difference between two numbers whose value is close to 1, as this is.&lt;/p&gt;\n&lt;p&gt;We can find out for any given computer what this smallest representable number is by looking in R&apos;s &lt;a href=&quot;https://www.rdocumentation.org/packages/base/topics/.Machine&quot; rel=&quot;noreferrer&quot;&gt;machine&lt;/a&gt; field:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt; &lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;.Machine\n &lt;span class=&quot;hljs-comment&quot;&gt;#....&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;#double.eps     the smallest positive floating-point number x &lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;#such that 1 + x != 1. It equals base^ulp.digits if either &lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;#base is 2 or rounding is 0; otherwise, it is &lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;#(base^ulp.digits) / 2. Normally 2.220446e-16.&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;#....&lt;/span&gt;\n .Machine&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;double.eps\n &lt;span class=&quot;hljs-comment&quot;&gt;#[1] 2.220446e-16&lt;/span&gt;\n sprintf&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%a&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;.Machine&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;double.eps&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n &lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;0x1p-52&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can use this fact to create a &apos;nearly equals&apos; function which checks that the difference is close to the smallest representable number in floating point.  In fact this already exists: &lt;code&gt;all.equal&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;all.equal\n&lt;span class=&quot;hljs-comment&quot;&gt;#....&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#all.equal(x,y) is a utility to compare R objects x and y testing near equality.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#....&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#all.equal(target, current,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#      tolerance = .Machine$double.eps ^ 0.5,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#      scale = NULL, check.attributes = TRUE, ...)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#....&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So the all.equal function is actually checking that the difference between the numbers is the square root of the smallest difference between two mantissas.&lt;/p&gt;\n&lt;p&gt;This algorithm goes a bit funny near extremely small numbers called denormals, but you don&apos;t need to worry about that.&lt;/p&gt;\n&lt;h1&gt;Comparing vectors&lt;/h1&gt;\n&lt;p&gt;The above discussion assumed a comparison of two single values. In R, there are no scalars, just vectors and implicit vectorization is a strength of the language. For comparing the value of vectors element-wise, the previous principles hold, but the implementation is slightly different. &lt;code&gt;==&lt;/code&gt; is vectorized (does an element-wise comparison) while &lt;code&gt;all.equal&lt;/code&gt; compares the whole vectors as a single entity.&lt;/p&gt;\n&lt;p&gt;Using the previous examples&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;a &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nb &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt; does not give the &quot;expected&quot; result and &lt;code&gt;all.equal&lt;/code&gt; does not perform element-wise&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt;b\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE FALSE FALSE FALSE&lt;/span&gt;\nall.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] &quot;Mean relative difference: 0.01234568&quot;&lt;/span&gt;\nisTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1] FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Rather, a version which loops over the two vectors must be used&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;mapply&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;isTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1]  TRUE  TRUE  TRUE FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If a functional version of this is desired, it can be written&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;elementwise.all.equal &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; Vectorize&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;isTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which can be called as just&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;elementwise.all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1]  TRUE  TRUE  TRUE FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, instead of wrapping &lt;code&gt;all.equal&lt;/code&gt; in even more function calls, you can just replicate the relevant internals of &lt;code&gt;all.equal.numeric&lt;/code&gt; and use implicit vectorization:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;tolerance &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .Machine&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;double.eps&lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# this is the default tolerance used in all.equal,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# but you can pick a different tolerance to match your needs&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; tolerance\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1]  TRUE  TRUE  TRUE FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is the approach taken by &lt;code&gt;dplyr::near&lt;/code&gt;, which documents itself as&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This is a safe way of comparing if two vectors of floating point numbers are (pairwise) equal. This is safer than using &lt;code&gt;==&lt;/code&gt;, because it has a built in tolerance&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;dplyr&lt;span class=&quot;hljs-operator&quot;&gt;::&lt;/span&gt;near&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#[1]  TRUE  TRUE  TRUE FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Testing for occurrence of a value within a vector&lt;/h1&gt;\n&lt;p&gt;The standard R function &lt;code&gt;%in%&lt;/code&gt; can also suffer from the same issue if applied to floating point values.  For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;x &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.85&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.95&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1] 0.85 0.86 0.87 0.88 0.89 0.90 0.91 0.92 0.93 0.94 0.95&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.92&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%in%&lt;/span&gt; x\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1] FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can define a new infix operator to allow for a tolerance in the comparison as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;`%.in%` &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; eps &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;.Machine&lt;span class=&quot;hljs-operator&quot;&gt;$&lt;/span&gt;double.eps&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;=&lt;/span&gt; eps&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;hljs-number&quot;&gt;0.92&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;%.in%&lt;/span&gt; x\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1] TRUE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Adding to Brian&apos;s comment (which is the reason) you can over come this by using &lt;code&gt;all.equal&lt;/code&gt; instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# i &amp;lt;- 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# i &amp;lt;- i + 0.05&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# i&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#if(all.equal(i, .15)) cat(&quot;i equals 0.15\\n&quot;) else cat(&quot;i does not equal 0.15\\n&quot;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#i equals 0.15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Per Joshua&apos;s warning here is the updated code (Thanks Joshua):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt; i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; 0.1\n i &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; i &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;\n i\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;isTRUE&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;#code was getting sloppy &amp;amp;went to multiple lines&lt;/span&gt;\n    cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;i equals 0.15\\n&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n    cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;i does not equal 0.15\\n&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#i equals 0.15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is hackish, but quick:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;i equals 0.15&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; cat&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;i does not equal 0.15&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;dplyr::near()&lt;/code&gt; is an option for testing if two vectors of floating point numbers are equal. This is the example from the &lt;a href=&quot;https://dplyr.tidyverse.org/reference/near.html&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;gt; [1] FALSE&lt;/span&gt;\nlibrary&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;dplyr&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\nnear&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function has a built in tolerance parameter: &lt;code&gt;tol = .Machine$double.eps^0.5&lt;/code&gt; that can be adjusted. The default parameter is the same as the default for &lt;code&gt;all.equal()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Generalized comparisons (&quot;&amp;lt;=&quot;, &quot;&amp;gt;=&quot;, &quot;=&quot;) in double precision arithmetic:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Comparing a &amp;lt;= b:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;IsSmallerOrEqual &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;   \n&lt;span class=&quot;hljs-comment&quot;&gt;# Control the existence of &quot;Mean relative difference...&quot; in all.equal; &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# if exists, it results in character, not logical:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;logical&quot;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;b &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n     &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n\nIsSmallerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# TRUE&lt;/span&gt;\nIsSmallerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# TRUE&lt;/span&gt;\nIsSmallerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2.2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# FALSE&lt;/span&gt;\nIsSmallerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;; IsSmallerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;; IsSmallerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \n&lt;span class=&quot;hljs-comment&quot;&gt;# TRUE; TRUE; FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Comparing a &amp;gt;= b:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;IsBiggerOrEqual &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Control the existence of &quot;Mean relative difference...&quot; in all.equal; &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# if exists, it results in character, not logical:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;logical&quot;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;b &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n     &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\nIsBiggerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;; IsBiggerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;; IsBiggerOrEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; \n&lt;span class=&quot;hljs-comment&quot;&gt;# TRUE; TRUE; FALSE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Comparing a = b:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;IsEqual &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Control the existence of &quot;Mean relative difference...&quot; in all.equal; &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# if exists, it results in character, not logical:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;   &lt;span class=&quot;hljs-built_in&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;all.equal&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;logical&quot;&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-literal&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n\nIsEqual&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# TRUE&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had a similar problem. I used the following solution.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;@ I found this work around solution about unequal cut intervals.  @ I\n  used the round function in R. By setting the option to 2 digits, did\n  not solved the problem.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;options&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;digits &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ncbind&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n  seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;      from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  cut&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;      from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  cut&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;      from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  cut&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.06&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output of unequal cut intervals based on options(digits = 2): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;  &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.04&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.06&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.07&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n\n\noptions&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;digits &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\ncbind&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;\n  seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;      from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  cut&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;      from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  cut&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;      from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; \n  cut&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt;seq&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; from &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; to &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; by &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.06&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output of equal cut intervals based on round function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-r s-code-block&quot;&gt;&lt;code class=&quot;hljs language-r&quot;&gt;      &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.04&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.05&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.06&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.7&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.07&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.09&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"137":["\n&lt;h1&gt;Background&lt;/h1&gt;\n&lt;p&gt;All Java objects have a &lt;code&gt;toString()&lt;/code&gt; method, which is invoked when you try to print the object.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(myObject);  &lt;span class=&quot;hljs-comment&quot;&gt;// invokes myObject.toString()&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method is defined in the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; class (the superclass of all Java objects). The &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.toString()&lt;/code&gt;&lt;/a&gt; method returns a fairly ugly looking string, composed of the name of the class, an &lt;code&gt;@&lt;/code&gt; symbol and the &lt;a href=&quot;https://stackoverflow.com/questions/3563847/what-is-the-use-of-hashcode-in-java&quot;&gt;hashcode&lt;/a&gt; of the object in hexadecimal. The code for this looks like:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Code of Object.toString()&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getClass().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt; + Integer.toHexString(hashCode());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A result such as &lt;code&gt;com.foo.MyType@2f92e0f4&lt;/code&gt; can therefore be explained as:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;com.foo.MyType&lt;/code&gt;  - the name of the class, i.e. the class is &lt;code&gt;MyType&lt;/code&gt; in the package &lt;code&gt;com.foo&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;@&lt;/code&gt; - joins the string together&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;2f92e0f4&lt;/code&gt; the hashcode of the object.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The name of array classes look a little different, which is explained well in the Javadocs for &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Class.getName()&lt;/code&gt;&lt;/a&gt;. For instance, &lt;code&gt;[Ljava.lang.String&lt;/code&gt; means:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[&lt;/code&gt; - an single-dimensional array (as opposed to &lt;code&gt;[[&lt;/code&gt; or &lt;code&gt;[[[&lt;/code&gt; etc.)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;L&lt;/code&gt; - the array contains a class or interface&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;java.lang.String&lt;/code&gt; - the type of objects in the array&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;Customizing the Output&lt;/h1&gt;\n&lt;p&gt;To print something different when you call &lt;code&gt;System.out.println(myObject)&lt;/code&gt;, you must &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/IandI/override.html&quot; rel=&quot;noreferrer&quot;&gt;override&lt;/a&gt; the &lt;code&gt;toString()&lt;/code&gt; method in your own class. Here&apos;s a simple example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n  \n  &lt;span class=&quot;hljs-comment&quot;&gt;// constructors and other methods omitted&lt;/span&gt;\n  \n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if we print a &lt;code&gt;Person&lt;/code&gt;, we see their name rather than &lt;code&gt;com.foo.Person@12345678&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Bear in mind that &lt;code&gt;toString()&lt;/code&gt; is just &lt;em&gt;one&lt;/em&gt; way for an object to be converted to a string. Typically this output should fully describe your object in a clear and concise manner. A better &lt;code&gt;toString()&lt;/code&gt; for our &lt;code&gt;Person&lt;/code&gt; class might be:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getClass().getSimpleName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;[name=&quot;&lt;/span&gt; + name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which would print, e.g., &lt;code&gt;Person[name=Henry]&lt;/code&gt;. That&apos;s a really useful piece of data for debugging/testing.&lt;/p&gt;\n&lt;p&gt;If you want to focus on just one aspect of your object or include a lot of jazzy formatting, you might be better to define a separate method instead, e.g. &lt;code&gt;String toElegantReport() {...}&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;Auto-generating the Output&lt;/h1&gt;\n&lt;p&gt;Many &lt;a href=&quot;http://en.wikipedia.org/wiki/Integrated_development_environment&quot; rel=&quot;noreferrer&quot;&gt;IDEs&lt;/a&gt; offer support for auto-generating a &lt;code&gt;toString()&lt;/code&gt; method, based on the fields in the class. See docs for &lt;a href=&quot;http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-dialog-tostring.htm&quot; rel=&quot;noreferrer&quot;&gt;Eclipse&lt;/a&gt; and &lt;a href=&quot;https://plugins.jetbrains.com/plugin/182?pr=idea&quot; rel=&quot;noreferrer&quot;&gt;IntelliJ&lt;/a&gt;, for example.&lt;/p&gt;\n&lt;p&gt;Several popular Java libraries offer this feature as well. Some examples include:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/ToStringBuilder.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ToStringBuilder&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot; rel=&quot;noreferrer&quot;&gt;Apache Commons Lang&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://google.github.io/guava/releases/19.0/api/docs/com/google/common/base/MoreObjects.ToStringHelper.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;MoreObjects.ToStringHelper&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;https://github.com/google/guava&quot; rel=&quot;noreferrer&quot;&gt;Google Guava&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://projectlombok.org/features/ToString.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;@ToString&lt;/code&gt;&lt;/a&gt; annotation from &lt;a href=&quot;http://projectlombok.org/&quot; rel=&quot;noreferrer&quot;&gt;Project Lombok&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h1&gt;Printing groups of objects&lt;/h1&gt;\n&lt;p&gt;So you&apos;ve created a nice &lt;code&gt;toString()&lt;/code&gt; for your class. What happens if that class is placed into an array or a collection?&lt;/p&gt;\n&lt;h2&gt;Arrays&lt;/h2&gt;\n&lt;p&gt;If you have an array of objects, you can call &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#toString-java.lang.Object:A-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Arrays.toString()&lt;/code&gt;&lt;/a&gt; to produce a simple representation of the contents of the array. For instance, consider this array of &lt;code&gt;Person&lt;/code&gt; objects:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Person[] people = { &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Fred&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mike&quot;&lt;/span&gt;) };\nSystem.out.println(Arrays.toString(people));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Prints: [Fred, Mike]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note:  this is a call to a &lt;em&gt;static&lt;/em&gt; method called &lt;code&gt;toString()&lt;/code&gt; in the Arrays class, which is different to what we&apos;ve been discussing above.&lt;/p&gt;\n&lt;p&gt;If you have a &lt;strong&gt;multi-dimensional array&lt;/strong&gt;, you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#deepToString-java.lang.Object:A-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Arrays.deepToString()&lt;/code&gt;&lt;/a&gt; to achieve the same sort of output.&lt;/p&gt;\n&lt;h2&gt;Collections&lt;/h2&gt;\n&lt;p&gt;Most collections will produce a pretty output based on calling &lt;code&gt;.toString()&lt;/code&gt; on every element.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Person&amp;gt; people = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\npeople.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;));\npeople.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;));    \nSystem.out.println(people);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Prints [Alice, Bob]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So you just need to ensure your list elements define a nice &lt;code&gt;toString()&lt;/code&gt; as discussed above.&lt;/p&gt;\n    ","\n&lt;p&gt;I think apache provides a better util class which provides a function to get the string&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ReflectionToStringBuilder.toString(object)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Every class in Java has the &lt;code&gt;toString()&lt;/code&gt; method in it by default, which is called if you pass some object of that class to &lt;code&gt;System.out.println()&lt;/code&gt;. By default, this call returns the className@hashcode of that object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeClass&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Class @ followed by hashcode of object in Hexadecimal&lt;/span&gt;\n    System.out.println(sc);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can override the toString method of a class to get different output. See this example&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;I am just a object&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;B&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String args[])&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;A&lt;/span&gt;();\n        System.out.println(obj);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Eclipse,\nGo to your class,\nRight click-&amp;gt;source-&amp;gt;Generate &lt;code&gt;toString()&lt;/code&gt;;&lt;/p&gt;\n\n&lt;p&gt;It will override the &lt;code&gt;toString()&lt;/code&gt; method and will print the object of that class.&lt;/p&gt;\n    ","\n&lt;p&gt;I prefer to use a utility function which uses &lt;a href=&quot;https://github.com/google/gson&quot; rel=&quot;noreferrer&quot;&gt;GSON&lt;/a&gt; to de-serialize the Java object into JSON string.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * This class provides basic/common functionalities to be applied on Java Objects.\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ObjectUtils&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;GSON&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GsonBuilder&lt;/span&gt;().setPrettyPrinting().create();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnsupportedOperationException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Instantiation of this class is not permitted in case you are using reflection.&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * This method is responsible for de-serializing the Java Object into Json String.\n     *\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; object Object to be de-serialized.\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@return&lt;/span&gt; String\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;deserializeObjectToString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Object object)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; GSON.toJson(object);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In intellij you can auto generate toString method by  pressing alt+inset and then selecting toString() here is an out put for a test class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;test&lt;/span&gt;  {\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; b;\nString c;\nTest2 test2;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;test{&quot;&lt;/span&gt; +\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;a=&quot;&lt;/span&gt; + a +\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;, b=&quot;&lt;/span&gt; + b +\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;, c=&apos;&quot;&lt;/span&gt; + c + &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt; +\n            &lt;span class=&quot;hljs-string&quot;&gt;&quot;, test2=&quot;&lt;/span&gt; + test2 +\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt;;\n }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, it generates a String by concatenating, several attributes of the class, for primitives it will print their values and for reference types it will use their class type (in this case to string method of Test2).   &lt;/p&gt;\n    ","\n&lt;p&gt;By default, every Object in Java has the &lt;code&gt;toString()&lt;/code&gt; method which outputs the ObjectType@HashCode. &lt;/p&gt;\n\n&lt;p&gt;If you want more meaningfull information then you need to override the &lt;code&gt;toString()&lt;/code&gt; method in your class. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// constructor and getter/setter omitted&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// overridding toString() to print name&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;  \n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now when you print the person object using &lt;code&gt;System.out.prtinln(personObj);&lt;/code&gt; it will print the name of the person instead of the classname and hashcode. &lt;/p&gt;\n\n&lt;p&gt;In your second case when you are trying to print the array, it prints &lt;code&gt;[Lcom.foo.Person;@28a418fc&lt;/code&gt; the Array type and it&apos;s hashcode. &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you want to print the person names, there are many ways.&lt;/p&gt;\n\n&lt;p&gt;You could write your own function that iterates each person and prints &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printPersonArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Person[] persons)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Person person: persons){\n        System.out.println(person);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could print it using Arrays.toString(). This seems the simplest to me. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; System.out.println(Arrays.toString(persons));\n System.out.println(Arrays.deepToString(persons));  &lt;span class=&quot;hljs-comment&quot;&gt;// for nested arrays  &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could print it the java 8 way (using streams and method reference). &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; Arrays.stream(persons).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There might be other ways as well. Hope this helps. :) &lt;/p&gt;\n    ","\n&lt;p&gt;If you Directly print any object of Person It will the &lt;code&gt;ClassName@HashCode&lt;/code&gt; to the Code.&lt;/p&gt;\n\n&lt;p&gt;in your case &lt;code&gt;com.foo.Person@2f92e0f4&lt;/code&gt; is getting printed . Where &lt;code&gt;Person&lt;/code&gt; is a class to which object belongs and &lt;code&gt;2f92e0f4&lt;/code&gt; is hashCode of the Object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String name;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String name)&lt;/span&gt;{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.name = name;\n  }\n  &lt;span class=&quot;hljs-comment&quot;&gt;// getter/setter omitted&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-meta&quot;&gt;@override&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; name;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if you try to Use the object of &lt;code&gt;Person&lt;/code&gt; then it will print the name&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Class Test\n {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String... args)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;YourName&quot;&lt;/span&gt;);\n    System.out.println(obj.toString());\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you look at the Object class (Parent class of all classes in Java) the toString() method implementation is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getClass().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt; + Integer.toHexString(hashCode());\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;whenever you print any object in Java then toString() will be call. Now it&apos;s up to you if you override  toString() then your method will call other Object class method call.&lt;/p&gt;\n    ","\n\n&lt;p&gt;For a &quot;deep&quot; &lt;code&gt;toString()&lt;/code&gt; there is an alternative to the JSON based answers (Jackson, GSON, etc.): &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/ReflectionToStringBuilder.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ReflectionToStringBuilder&lt;/a&gt; from the &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Commons Lang 3&lt;/a&gt; library, with &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/RecursiveToStringStyle.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;RecursiveToStringStyle&lt;/a&gt; or &lt;a href=&quot;https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;MultilineRecursiveToStringStyle&lt;/a&gt;. Code example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My object: &quot;&lt;/span&gt; +\n    ReflectionToStringBuilder.toString(theObject, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RecursiveToStringStyle&lt;/span&gt;()));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// RecursiveToStringStyle&lt;/span&gt;\nPerson@7f54[name=Stephen,age=&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;,smoker=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,job=Job@43cd2[title=Manager]]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// MultilineRecursiveToStringStyle&lt;/span&gt;\nPerson@7f54[\n  name=Stephen,\n  age=&lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;,\n  smoker=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  job=Job@43cd2[\n    title=Manager\n  ]\n]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I managed to get this done using &lt;strong&gt;Jackson&lt;/strong&gt; in Spring 5. Depending on the object it might not work in all cases.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.fasterxml.jackson.databind.ObjectMapper;\n    \n&lt;span class=&quot;hljs-type&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ObjectMapper&lt;/span&gt;();\nSystem.out.println(mapper.writeValueAsString(yourObject));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the output would look like&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;{\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;fieldOne&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;string&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://mkyong.com/java/how-to-enable-pretty-print-json-output-jackson/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&lt;/a&gt; are more examples using &lt;strong&gt;Jackson&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you use &lt;strong&gt;GSON&lt;/strong&gt; instead It might look like&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;();\nSystem.out.println(gson.toJson(yourObject));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using Lombok @Data annotation on class will provide getter, setter, toString and hashcode. Using Lombok is better as it handles boilerplate code.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are using project &lt;strong&gt;Lombok&lt;/strong&gt; you could use the &lt;code&gt;@ToString&lt;/code&gt; annotation and generate a standard &lt;code&gt;toString()&lt;/code&gt; method without adding boilerplate.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; lombok.ToString;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;@ToString&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LoginDto&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String user;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String pass;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;...\nSystem.out.println(loginDto.toString());\n&lt;span class=&quot;hljs-comment&quot;&gt;// LoginDto(user=x@xxx.x, pass=xxxxx)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"138":["\n&lt;p&gt;Using various &lt;code&gt;LayoutManagers&lt;/code&gt; one can provide spacing between various components. &lt;/p&gt;\n\n&lt;h2&gt; 1.) BorderLayout :&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Overloaded Constructor :&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#BorderLayout%28int,%20int%29&quot;&gt;BorderLayout(int horizontalGap, int verticalGap)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Getter and setter methods&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For Horizontal Spacing &lt;strong&gt;:&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#getHgap%28%29&quot;&gt;BorderLayout.getHgap()&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#setHgap%28int%29&quot;&gt;BorderLayout.setHgap(int hgap)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For Vertical Spacing &lt;strong&gt;:&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#getVgap%28%29&quot;&gt;BorderLayout.getVgap()&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#setVgap%28int%29&quot;&gt;BorderLayout.setVgap()&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt; 2.) FlowLayout :&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Overloaded Constructor :&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#FlowLayout%28int,%20int,%20int%29&quot;&gt;FlowLayout(int align, int hgap, int vgap)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Getter and setter methods&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For Horizontal Spacing &lt;strong&gt;:&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#getHgap%28%29&quot;&gt;FlowLayout.getHgap()&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#setHgap%28int%29&quot;&gt;FlowLayout.setHgap(int hgap)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For Vertical Spacing &lt;strong&gt;:&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#getVgap()&quot;&gt;FlowLayout.getVgap()&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#setVgap(int)&quot;&gt;FlowLayout.setVgap()&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt; 3.) GridLayout :&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Overloaded Constructor :&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#GridLayout%28int,%20int,%20int,%20int%29&quot;&gt;GridLayout(int rows, int columns, int hgap, int vgap)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Getter and setter methods&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For Horizontal Spacing &lt;strong&gt;:&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#getHgap()&quot;&gt;GridLayout.getHgap()&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#setHgap(int)&quot;&gt;GridLayout.setHgap(int hgap)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For Vertical Spacing &lt;strong&gt;:&lt;/strong&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#getVgap()&quot;&gt;GridLayout.getVgap()&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#setVgap(int)&quot;&gt;GridLayout.setVgap()&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt; 4.) GridBagLayout :&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridBagConstraints.html#insets&quot;&gt;GridBagConstraints.insets&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt; 5.) CardLayout (&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#setHgap(int)&quot;&gt;example&lt;/a&gt;) :&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#getVgap()&quot;&gt;CardLayout(int hGap, int vGap)&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Example to display all constructors in action :&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.event.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LayoutExample&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hGap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vGap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String[] borderConstraints = {\n        BorderLayout.PAGE_START,\n        BorderLayout.LINE_START,\n        BorderLayout.CENTER,\n        BorderLayout.LINE_END,\n        BorderLayout.PAGE_END\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JButton[] buttons;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; GridBagConstraints gbc;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JPanel borderPanel;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JPanel flowPanel;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JPanel gridPanel;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JPanel gridBagPanel;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JPanel cardPanel;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;LayoutExample&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        buttons = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;];\n        gbc = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridBagConstraints&lt;/span&gt;();\n        gbc.anchor = GridBagConstraints.FIRST_LINE_START;   \n        gbc.insets = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Insets&lt;/span&gt;(hGap, vGap, hGap, vGap);        \n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;displayGUI&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Layout Example&quot;&lt;/span&gt;);\n        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;contentPane&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, hGap, vGap));\n        contentPane.setBorder(\n            BorderFactory.createEmptyBorder(hGap, vGap, hGap, vGap));\n        borderPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BorderLayout&lt;/span&gt;(hGap, vGap));\n        borderPanel.setBorder(\n            BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;BorderLayout&quot;&lt;/span&gt;));\n        borderPanel.setOpaque(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        borderPanel.setBackground(Color.WHITE);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i++) {\n            buttons[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(borderConstraints[i]);\n            borderPanel.add(buttons[i], borderConstraints[i]);\n        }\n        contentPane.add(borderPanel);\n\n        flowPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlowLayout&lt;/span&gt;(\n                    FlowLayout.CENTER, hGap, vGap));\n        flowPanel.setBorder(\n            BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;FlowLayout&quot;&lt;/span&gt;));\n        flowPanel.setOpaque(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        flowPanel.setBackground(Color.WHITE);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;; i++) {\n            buttons[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(Integer.toString(i));\n            flowPanel.add(buttons[i]);\n        }\n        contentPane.add(flowPanel);\n\n        gridPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, hGap, vGap));\n        gridPanel.setBorder(\n            BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GridLayout&quot;&lt;/span&gt;));\n        gridPanel.setOpaque(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        gridPanel.setBackground(Color.WHITE);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; i++) {\n            buttons[i] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(Integer.toString(i));\n            gridPanel.add(buttons[i]);\n        }\n        contentPane.add(gridPanel);\n\n        gridBagPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridBagLayout&lt;/span&gt;());\n        gridBagPanel.setBorder(\n            BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GridBagLayout&quot;&lt;/span&gt;));\n        gridBagPanel.setOpaque(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        gridBagPanel.setBackground(Color.WHITE);\n        buttons[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(Integer.toString(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;));\n        addComp(gridBagPanel, buttons[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                            , GridBagConstraints.BOTH, &lt;span class=&quot;hljs-number&quot;&gt;0.33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n        buttons[&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(Integer.toString(&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;));\n        addComp(gridBagPanel, buttons[&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                            , GridBagConstraints.BOTH, &lt;span class=&quot;hljs-number&quot;&gt;0.33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n        buttons[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(Integer.toString(&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;));\n        addComp(gridBagPanel, buttons[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                            , GridBagConstraints.BOTH, &lt;span class=&quot;hljs-number&quot;&gt;0.66&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n        buttons[&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(Integer.toString(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;));\n        addComp(gridBagPanel, buttons[&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n                            , GridBagConstraints.BOTH, &lt;span class=&quot;hljs-number&quot;&gt;0.33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;);\n        contentPane.add(gridBagPanel);\n\n        cardPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CardLayout&lt;/span&gt;(hGap, vGap));\n        cardPanel.setBorder(\n            BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CardLayout&quot;&lt;/span&gt;));\n        cardPanel.setOpaque(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        cardPanel.setBackground(Color.WHITE);\n        cardPanel.add(getPanel(Color.BLUE));\n        cardPanel.add(getPanel(Color.GREEN));\n        contentPane.add(cardPanel);\n\n        frame.setContentPane(contentPane);\n        frame.pack();\n        frame.setLocationByPlatform(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        frame.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JPanel &lt;span class=&quot;hljs-title function_&quot;&gt;getPanel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Color bColor)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlowLayout&lt;/span&gt;(\n                    FlowLayout.CENTER, hGap, vGap));\n        panel.setOpaque(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        panel.setBackground(bColor.darker().darker());\n        &lt;span class=&quot;hljs-type&quot;&gt;JButton&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;swapperButton&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Next&quot;&lt;/span&gt;);\n        swapperButton.addActionListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent ae)&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;CardLayout&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;cardLayout&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (CardLayout) cardPanel.getLayout();\n                cardLayout.next(cardPanel);\n            }\n        });\n\n        panel.add(swapperButton);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; panel;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addComp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(JPanel panel, JComponent comp\n                                , &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; gWidth\n                                    , &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; gHeight, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; fill\n                                        , &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; weightx, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; weighty)&lt;/span&gt; {\n        gbc.gridx = x;\n        gbc.gridy = y;\n        gbc.gridwidth = gWidth;\n        gbc.gridheight = gHeight;\n        gbc.fill = fill;\n        gbc.weightx = weightx;\n        gbc.weighty = weighty;      \n\n        panel.add(comp, gbc);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;(){\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LayoutExample&lt;/span&gt;().displayGUI();\n            }\n        };\n        EventQueue.invokeLater(runnable);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;OUTPUT :&lt;/h2&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/9mKG9.png&quot; alt=&quot;LAYOUTIMAGE&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There are a number of ways in a Swing GUI to provide a separation between components, and white space around components:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;JToolBar&lt;/code&gt; has the methods &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator--&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;addSeparator()&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator-java.awt.Dimension-&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;addSeparator(Dimension)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;JMenu&lt;/code&gt; uses a spacing component better suited to menus, available through &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#addSeparator--&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;addSeparator()&lt;/code&gt;&lt;/a&gt;.  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;But more generally, look to:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The spacing as can be defined in the layout constructors.&lt;/li&gt;\n&lt;li&gt;Borders.  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Here is an example of using the layout separator &lt;code&gt;hGap&lt;/code&gt; &amp;amp; &lt;code&gt;vGap&lt;/code&gt; values &amp;amp; borders (specifically an &lt;code&gt;EmptyBorder&lt;/code&gt;) to provide &apos;white&apos; (actually shown as &lt;strong&gt;red&lt;/strong&gt; to make it very obvious) space.  Adjust the spinners to see the result.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/lYyOZ.png&quot; alt=&quot;With no GUI white space&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/NVtKI.png&quot; alt=&quot;With GUI white space&quot;&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.border.EmptyBorder;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.event.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WhiteSpace&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gui&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;BorderLayout&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;mainLayout&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BorderLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;FlowLayout&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;buttonLayout&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlowLayout&lt;/span&gt;(FlowLayout.CENTER, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;buttonPanel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(buttonLayout);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SpinnerNumberModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hModel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpinnerNumberModel&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SpinnerNumberModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vModel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpinnerNumberModel&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SpinnerNumberModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hBorderModel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpinnerNumberModel&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SpinnerNumberModel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vBorderModel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; \n            &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpinnerNumberModel&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ChangeListener changeListener;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Container &lt;span class=&quot;hljs-title function_&quot;&gt;getGui&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (gui == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            gui = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(mainLayout);\n            gui.setBackground(Color.RED);\n\n            &lt;span class=&quot;hljs-type&quot;&gt;JTree&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTree&lt;/span&gt;();\n            tree.setVisibleRowCount(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; tree.getRowCount(); ii &amp;gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; ii--) {\n                tree.expandRow(ii);\n            }\n            gui.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(\n                    tree,\n                    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER),\n                    BorderLayout.LINE_START);\n            gui.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JScrollPane&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTextArea&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;)));\n\n            gui.add(buttonPanel, BorderLayout.PAGE_START);\n\n            changeListener = (ChangeEvent e) -&amp;gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hGap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; hModel.getNumber().intValue();\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vGap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; vModel.getNumber().intValue();\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;hBorder&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; hBorderModel.getNumber().intValue();\n                &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;vBorder&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; vBorderModel.getNumber().intValue();\n                adjustWhiteSpace(hGap, vGap, hBorder, vBorder);\n            };\n\n            addModel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;H Gap&quot;&lt;/span&gt;, hModel);\n            addModel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;V Gap&quot;&lt;/span&gt;, vModel);\n            addModel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;H Border&quot;&lt;/span&gt;, hBorderModel);\n            addModel(&lt;span class=&quot;hljs-string&quot;&gt;&quot;V Border&quot;&lt;/span&gt;, vBorderModel);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; gui;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addModel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String label, SpinnerNumberModel model)&lt;/span&gt; {\n        buttonPanel.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(label));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSpinner&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;spinner&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSpinner&lt;/span&gt;(model);\n        spinner.addChangeListener(changeListener);\n        buttonPanel.add(spinner);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;adjustWhiteSpace&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; hGap, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; vGap, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; hBorder, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; vBorder)&lt;/span&gt; {\n        mainLayout.setHgap(hGap);\n        mainLayout.setVgap(vGap);\n        buttonLayout.setHgap(hGap);\n        gui.setBorder(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EmptyBorder&lt;/span&gt;\n                (vBorder, hBorder, vBorder, hBorder));\n        &lt;span class=&quot;hljs-type&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; gui.getTopLevelAncestor();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; Window) {\n            &lt;span class=&quot;hljs-type&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Window) c;\n            w.pack();\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; () -&amp;gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;WhiteSpace&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WhiteSpace&lt;/span&gt;();\n            &lt;span class=&quot;hljs-type&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gui1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ws.getGui();\n            &lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;White (OK Red) Space&quot;&lt;/span&gt;);\n            f.add(gui1);\n            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n            f.setLocationByPlatform(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            f.setResizable(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n            f.pack();\n            f.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you use &lt;code&gt;BoxLayout&lt;/code&gt;, &lt;code&gt;Box.createVerticalGlue()&lt;/code&gt; method can help you to make some white space.&lt;/p&gt;\n\n&lt;p&gt;Another method is &lt;code&gt;BorderFactory.createEmptyBorder(int top, int left, int bottom, int right)&lt;/code&gt;. It can help you to make some white space around component.&lt;/p&gt;\n\n&lt;p&gt;Thanks for Andrew Thompson&apos;s remind.I&apos;ve revised BoxLayout in recent days and I     find that &lt;code&gt;Box.createVerticalGlue()&lt;/code&gt; can add some white space depend on the panel&apos;s size and you can not set the explicit pixel value of the length of white space.But &lt;code&gt;Box.createVerticalStrut()&lt;/code&gt; can do that.  Here is a MCTaRE and show the    effect of those two methods.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/qOIZ5.gif&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.event.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.border.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.event.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WhiteSpace&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; WhiteSpace whiteSpace;\n    DemoPanel demoPanel;\n    &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; withGlue;\n    JSpinner spinner;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;WhiteSpace&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        initialWindow();\n        demoPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DemoPanel&lt;/span&gt;();\n        &lt;span class=&quot;hljs-type&quot;&gt;ActionPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;actionPanel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionPanel&lt;/span&gt;();\n\n        setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BorderLayout&lt;/span&gt;());\n\n        getContentPane().add(actionPanel,BorderLayout.NORTH);\n        getContentPane().add(demoPanel,BorderLayout.CENTER);\n            setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initialWindow&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        setSize(&lt;span class=&quot;hljs-number&quot;&gt;220&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;);\n        setTitle(&lt;span class=&quot;hljs-string&quot;&gt;&quot;White Space&quot;&lt;/span&gt;);\n        setResizable(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setLocationRelativeTo(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Show the window in the middle of the screen&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/**\n     * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; args\n     */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                whiteSpace = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WhiteSpace&lt;/span&gt;();\n            }\n        };\n        SwingUtilities.invokeLater(runnable);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DemoPanel&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;{\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Show the vertical white space between label1 and label2&lt;/span&gt;\n        JLabel label1;\n        JLabel label2;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initialDemoPanel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n            setBorder(BorderFactory.createTitledBorder(getBorder(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;DemoPanel&quot;&lt;/span&gt;, TitledBorder.LEADING, TitledBorder.TOP, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Font&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Default&quot;&lt;/span&gt;,Font.PLAIN,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), Color.gray));\n            setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BoxLayout&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, BoxLayout.Y_AXIS));\n\n            label1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is first line&quot;&lt;/span&gt;);\n            label2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;This is second line&quot;&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DemoPanel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n            initialDemoPanel();\n            add(label1);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(withGlue){\n                add(Box.createVerticalGlue());\n            }\n            add(label2);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;DemoPanel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; strutValue)&lt;/span&gt;{\n            initialDemoPanel();\n            add(label1);\n            add(Box.createVerticalStrut(strutValue));\n            add(label2);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionPanel&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ActionPanel&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n            setBorder(BorderFactory.createTitledBorder(getBorder(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;ActionPanel&quot;&lt;/span&gt;, TitledBorder.LEADING, TitledBorder.TOP, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Font&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Default&quot;&lt;/span&gt;,Font.PLAIN,&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), Color.gray));\n\n            setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BoxLayout&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,BoxLayout.X_AXIS));\n            &lt;span class=&quot;hljs-type&quot;&gt;JRadioButton&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;glueButton&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JRadioButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;With Glue&quot;&lt;/span&gt;);\n            glueButton.addActionListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;glueButtonListener&lt;/span&gt;());\n            add(glueButton);\n\n            add(Box.createHorizontalStrut(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n            &lt;span class=&quot;hljs-comment&quot;&gt;//To create horizontal white space&lt;/span&gt;\n            &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strutLabel&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Strut Value&quot;&lt;/span&gt;);\n            add(strutLabel);\n            spinner = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JSpinner&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SpinnerNumberModel&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n            spinner.addChangeListener(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;spinnerListener&lt;/span&gt;());\n            add(spinner);\n            &lt;span class=&quot;hljs-comment&quot;&gt;//public SpinnerNumberModel(Number value,Comparable minimum,Comparable maximum,Number stepSize)&lt;/span&gt;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;glueButtonListener&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ActionListener&lt;/span&gt;{\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actionPerformed&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ActionEvent e)&lt;/span&gt; {\n            spinner.setValue(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n            withGlue = (withGlue == &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;:&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            whiteSpace.getContentPane().remove(demoPanel);\n            demoPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DemoPanel&lt;/span&gt;();\n            whiteSpace.getContentPane().add(demoPanel,BorderLayout.CENTER);\n            whiteSpace.getContentPane().validate();\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;spinnerListener&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ChangeListener&lt;/span&gt;{\n\n        &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;stateChanged&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ChangeEvent e)&lt;/span&gt; {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strutValue&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Integer) spinner.getValue();\n            whiteSpace.getContentPane().remove(demoPanel);\n            demoPanel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DemoPanel&lt;/span&gt;(strutValue);\n            whiteSpace.getContentPane().add(demoPanel,BorderLayout.CENTER);\n            whiteSpace.getContentPane().validate();\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;Box.createHorizontalGlue()&lt;/code&gt; and &lt;code&gt;Box.createHorizontalStrut(int height)&lt;/code&gt; can be used too. Besides, &lt;code&gt;Box.createRigidArea(Dimension d)&lt;/code&gt; has the ability too create white space too.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;MigLayout&lt;/code&gt; has multiple ways of creating space. (A space is called a gap in this layout.)\nGaps can be created at the highest level with layout constraints, it is possible to\ncreate gaps between rows and column and gaps can be also set between individual \ncomponents with component constraints. There are also specific gaps around the borders\nof a container called insets which have their own specific keyword to be set.&lt;/p&gt;\n\n&lt;p&gt;The following example creates all these kinds of gaps:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.zetcode;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.awt.EventQueue;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.BorderFactory;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JButton;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JFrame;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JLabel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JPanel;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; javax.swing.JTextField;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; net.miginfocom.swing.MigLayout;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayoutGaps2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;MigLayoutGaps2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n        initUI();\n\n        setTitle(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Gaps&quot;&lt;/span&gt;);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setLocationRelativeTo(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;initUI&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;flowy, ins 30, gap 15&quot;&lt;/span&gt;));\n        setContentPane(base);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnl1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        pnl1.setBorder(\n                BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Grid gaps&quot;&lt;/span&gt;)\n        );\n\n        pnl1.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gap 5 5, ins 10, wrap 3&quot;&lt;/span&gt;));\n\n        pnl1.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;));\n        pnl1.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;));\n        pnl1.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;));\n        pnl1.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;));\n        pnl1.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;));\n        pnl1.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JButton&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;6&quot;&lt;/span&gt;));\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnl2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        pnl2.setBorder(\n                BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Column gaps&quot;&lt;/span&gt;)\n        );\n\n        pnl2.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap 3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[]10[]&quot;&lt;/span&gt;));\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lbl1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;();\n        lbl1.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lbl2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;();\n        lbl2.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lbl3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;();\n        lbl3.setBorder(\n            BorderFactory.createEtchedBorder()\n        );        \n\n        pnl2.add(lbl1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w 40, h 110&quot;&lt;/span&gt;);\n        pnl2.add(lbl2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w 40, h 110&quot;&lt;/span&gt;);\n        pnl2.add(lbl3, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w 40, h 110&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnl3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        pnl3.setBorder(\n                BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Row gaps&quot;&lt;/span&gt;)\n        );\n\n        pnl3.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[]15[]&quot;&lt;/span&gt;));\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lbl4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;();\n        lbl4.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lbl5&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;();\n        lbl5.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        &lt;span class=&quot;hljs-type&quot;&gt;JLabel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lbl6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;();\n        lbl6.setBorder(\n            BorderFactory.createEtchedBorder()\n        );        \n\n        pnl3.add(lbl4, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w 150, h 20&quot;&lt;/span&gt;);\n        pnl3.add(lbl5, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w 150, h 20&quot;&lt;/span&gt;);\n        pnl3.add(lbl6, &lt;span class=&quot;hljs-string&quot;&gt;&quot;w 150, h 20&quot;&lt;/span&gt;);        \n\n        &lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pnl4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;();\n        pnl4.setBorder(\n                BorderFactory.createTitledBorder(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Component gaps&quot;&lt;/span&gt;)\n        );\n\n        pnl4.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;());\n\n        pnl4.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name:&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;gapright 5&quot;&lt;/span&gt;);\n        pnl4.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTextField&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;gapbottom 20, gaptop 20&quot;&lt;/span&gt;);\n\n        base.add(pnl1);\n        base.add(pnl2);\n        base.add(pnl3);\n        base.add(pnl4);\n\n        pack();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n        EventQueue.invokeLater(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Runnable&lt;/span&gt;() {\n            &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n                &lt;span class=&quot;hljs-type&quot;&gt;MigLayoutGaps2&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayoutGaps2&lt;/span&gt;();\n                ex.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n            }\n        });\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We have four panels in the layout. Each of this panels has a &lt;code&gt;MigLayout&lt;/code&gt; manager.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;JPanel&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;flowy, ins 30, gap 15&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This line creates container insets and vertical gaps between panels.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;pnl1.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gap 5 5, ins 10, wrap 3&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here we apply gaps for the whole grid structure and also set container gaps.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;pnl2.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap 3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[]10[]&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This line creates gaps between columns.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;pnl3.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MigLayout&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrap&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;[]15[]&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Row gaps are defined with this code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;pnl4.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name:&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;gapright 5&quot;&lt;/span&gt;);\npnl4.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JTextField&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;gapbottom 20, gaptop 20&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, it is possible to create gaps between individual components.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/tfA8d.png&quot; alt=&quot;Gaps&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.jgoodies.com/freeware/libraries/forms/&quot; rel=&quot;noreferrer&quot;&gt;JGoodies &lt;strong&gt;FormLayout&lt;/strong&gt;.&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Author Karsten Lentzsch has a collection of &lt;a href=&quot;http://www.jgoodies.com/downloads/articles-and-presentations/&quot; rel=&quot;noreferrer&quot;&gt;presentations&lt;/a&gt; on UI design.   In particular &lt;a href=&quot;http://www.jgoodies.com/download/presentations/Swing%20with%20Style.pdf&quot; rel=&quot;noreferrer&quot;&gt;this PDF&lt;/a&gt; speaks to the need for aesthetic whitespace.  Adding meaningful space while also paying attention to clutter separates the wheat from the chaff.&lt;/p&gt;\n    ","\n&lt;p&gt;Whenever I have this issue, I just use JPanels. For example in a GridLayout:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JFrame&lt;/span&gt;;\nframe.setLayout(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GridLayout&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//We want the bottom left to be blank&lt;/span&gt;\nframe.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Top Left&quot;&lt;/span&gt;));\nframe.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JLabel&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Top Right&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//This is the position we want empty&lt;/span&gt;\nframe.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JPanel&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//Now we can continue with the rest of the script&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"139":["\n&lt;p&gt;In your current Activity, create a new &lt;code&gt;Intent&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;;\nIntent i = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(CurrentActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, NewActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);    \ni.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;,value);\nstartActivity(i);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then in the new Activity, retrieve those values:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;extras&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getExtras();\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (extras != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; extras.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//The key argument here must match that used in the other activity&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use this technique to pass variables from one Activity to the other.&lt;/p&gt;\n    ","\n&lt;p&gt;The easiest way to do this would be to pass the session id to the signout activity in the &lt;code&gt;Intent&lt;/code&gt; you&apos;re using to start the activity:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getBaseContext(), SignoutActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXTRA_SESSION_ID&quot;&lt;/span&gt;, sessionId);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Access that intent on next activity:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; sessionId = getIntent().getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXTRA_SESSION_ID&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://developer.android.com/guide/topics/intents/intents-filters.html&quot; rel=&quot;noreferrer&quot;&gt;docs&lt;/a&gt; for Intents has more information (look at the section titled &quot;Extras&quot;).&lt;/p&gt;\n    ","\n&lt;p&gt;Passing &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html&quot; rel=&quot;noreferrer&quot;&gt;Intent&lt;/a&gt; extras is a good approach as Erich noted. &lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=&quot;http://developer.android.com/reference/android/app/Application.html&quot; rel=&quot;noreferrer&quot;&gt;Application&lt;/a&gt; object is another way though, and it is sometimes easier when dealing with the same state across multiple activities (as opposed to having to get/put it everywhere), or objects more complex than primitives and Strings. &lt;/p&gt;\n\n&lt;p&gt;You can extend Application, and then set/get whatever you want there and access it from any Activity (in the same application) with &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#getApplication%28%29&quot; rel=&quot;noreferrer&quot;&gt;getApplication()&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also keep in mind that other approaches you might see, like statics, can be problematic because they &lt;a href=&quot;http://android-developers.blogspot.com/2009/01/avoiding-memory-leaks.html&quot; rel=&quot;noreferrer&quot;&gt;can lead to memory leaks&lt;/a&gt;. Application helps solve this too.&lt;/p&gt;\n    ","\n&lt;p&gt;Source class:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent myIntent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, NewActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nmyIntent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstName&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Your First Name Here&quot;&lt;/span&gt;);\nmyIntent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;lastName&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Your Last Name Here&quot;&lt;/span&gt;);\nstartActivity(myIntent)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Destination Class (NewActivity class):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n    setContentView(R.layout.view);\n\n    &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstName&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lName&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;lastName&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You just have to send extras while calling your intent.&lt;/p&gt;\n\n&lt;p&gt;Like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getApplicationContext(), SecondActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value you want to pass&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now on the &lt;code&gt;OnCreate&lt;/code&gt; method of your &lt;code&gt;SecondActivity&lt;/code&gt; you can fetch the extras like this.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;If the value you sent was in &lt;code&gt;long&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = getIntent().getLongExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name which you sent as an extra&quot;&lt;/span&gt;, defaultValue(you can give it anything));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;If the value you sent was a &lt;code&gt;String&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; value = getIntent().getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name which you sent as an extra&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;If the value you sent was a &lt;code&gt;Boolean&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Boolean&lt;/span&gt; value = getIntent().getBooleanExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name which you sent as an extra&quot;&lt;/span&gt;, defaultValue);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It helps me to see things in context. Here are two examples.&lt;/p&gt;\n\n&lt;h1&gt;Passing Data Forward&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/1bUb2.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/1bUb2.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;Main Activity&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Put the data you want to send in an Intent with a key-value pair. See &lt;a href=&quot;https://stackoverflow.com/a/40569184/3681880&quot;&gt;this answer&lt;/a&gt; for naming conventions for the key.&lt;/li&gt;\n&lt;li&gt;Start the Second Activity with &lt;code&gt;startActivity&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;MainActivity.java&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n        setContentView(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.layout.activity_main);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Go to Second Activity&quot; button click&lt;/span&gt;\n    public void onButtonClick(&lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; view) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// get the text to pass&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt; editText = (&lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt;) findViewById(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.editText);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; textToPass = editText.getText().toString();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// start the SecondActivity&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;SecondActivity&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\n        intent.putExtra(&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;EXTRA_TEXT&lt;/span&gt;, textToPass);\n        startActivity(intent);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Second Activity&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You use &lt;code&gt;getIntent()&lt;/code&gt; to get the &lt;code&gt;Intent&lt;/code&gt; that started the second activity. Then you can extract the data with &lt;code&gt;getExtras()&lt;/code&gt; and the key you defined in the first activity. Since our data is a String we will just use &lt;code&gt;getStringExtra&lt;/code&gt; here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;SecondActivity.java&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SecondActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n        setContentView(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.layout.activity_second);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// get the text from MainActivity&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; intent = getIntent();\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; text = intent.getStringExtra(&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;EXTRA_TEXT&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// use the text in a TextView&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; textView = (&lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt;) findViewById(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.textView);\n        textView.setText(text);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Passing Data Back&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/sMric.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/sMric.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;Main Activity&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Start the Second Activity with &lt;code&gt;startActivityForResult&lt;/code&gt;, providing it an arbitrary result code.&lt;/li&gt;\n&lt;li&gt;Override &lt;code&gt;onActivityResult&lt;/code&gt;. This is called when the Second Activity finishes. You can make sure that it is actually the Second Activity by checking the result code. (This is useful when you are starting multiple different activities from the same main activity.)&lt;/li&gt;\n&lt;li&gt;Extract the data you got from the return &lt;code&gt;Intent&lt;/code&gt;. The data is extracted using a key-value pair. I could use any string for the key but I&apos;ll use the predefined &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt; since I&apos;m sending text.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;MainActivity.java&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AppCompatActivity&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;SECOND_ACTIVITY_REQUEST_CODE&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Go to Second Activity&quot; button click&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onButtonClick&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(View view)&lt;/span&gt; {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Start the SecondActivity&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, SecondActivity.class);\n        startActivityForResult(intent, SECOND_ACTIVITY_REQUEST_CODE);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This method is called when the second activity finishes&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; requestCode, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; resultCode, Intent data)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onActivityResult(requestCode, resultCode, data);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// check that it is the SecondActivity with an OK result&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (requestCode == SECOND_ACTIVITY_REQUEST_CODE) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (resultCode == RESULT_OK) {\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// get String data from Intent&lt;/span&gt;\n                &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;returnString&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data.getStringExtra(Intent.EXTRA_TEXT);\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// set text view with string&lt;/span&gt;\n                &lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (TextView) findViewById(R.id.textView);\n                textView.setText(returnString);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Second Activity&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Put the data that you want to send back to the previous activity into an &lt;code&gt;Intent&lt;/code&gt;. The data is stored in the &lt;code&gt;Intent&lt;/code&gt; using a key-value pair. I chose to use &lt;code&gt;Intent.EXTRA_TEXT&lt;/code&gt; for my key.&lt;/li&gt;\n&lt;li&gt;Set the result to &lt;code&gt;RESULT_OK&lt;/code&gt; and add the intent holding your data.&lt;/li&gt;\n&lt;li&gt;Call &lt;code&gt;finish()&lt;/code&gt; to close the Second Activity.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;SecondActivity.java&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SecondActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n        setContentView(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.layout.activity_second);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// &quot;Send text back&quot; button click&lt;/span&gt;\n    public void onButtonClick(&lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; view) {\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// get the text from the EditText&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt; editText = (&lt;span class=&quot;hljs-type&quot;&gt;EditText&lt;/span&gt;) findViewById(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.editText);\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; stringToPassBack = editText.getText().toString();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// put the String to pass back into an Intent and close this activity&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt;();\n        intent.putExtra(&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;EXTRA_TEXT&lt;/span&gt;, stringToPassBack);\n        setResult(&lt;span class=&quot;hljs-type&quot;&gt;RESULT_OK&lt;/span&gt;, intent);\n        finish();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Updated&lt;/strong&gt; Note that I had mentioned the use of &lt;a href=&quot;http://developer.android.com/reference/android/content/SharedPreferences.html&quot; rel=&quot;noreferrer&quot;&gt;SharedPreference&lt;/a&gt;. It has a simple API and is accessible across an application&apos;s activities. But this is a clumsy solution, and is a security risk if you pass around sensitive data. It&apos;s best to use intents. It has an extensive list of overloaded methods that can be used to better transfer many different data types between activities. Have a look at &lt;a href=&quot;http://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String,%20double[])&quot; rel=&quot;noreferrer&quot;&gt;intent.putExtra&lt;/a&gt;. This &lt;a href=&quot;https://www.raywenderlich.com/160019/android-intents-tutorial-2&quot; rel=&quot;noreferrer&quot;&gt;link&lt;/a&gt; presents the use of putExtra quite well.&lt;/p&gt;\n\n&lt;p&gt;In passing data between activities, my preferred approach is to create a static method for the relevant activity that includes the required parameters launch the intent. Which then provides easily setup and retrieve parameters. So it can look like this&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n    public static &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ARG_PARAM1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;arg_param1&quot;&lt;/span&gt;;\n...\npublic static getIntent(&lt;span class=&quot;hljs-type&quot;&gt;Activity&lt;/span&gt; from, &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; param1, &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt; param2...) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt;(from, &lt;span class=&quot;hljs-type&quot;&gt;MyActivity&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\n        intent.putExtra(&lt;span class=&quot;hljs-type&quot;&gt;ARG_PARAM1&lt;/span&gt;, param1);\n        intent.putExtra(&lt;span class=&quot;hljs-type&quot;&gt;ARG_PARAM2&lt;/span&gt;, param2);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; intent;\n}\n\n....\n&lt;span class=&quot;hljs-comment&quot;&gt;// Use it like this.&lt;/span&gt;\nstartActivity(&lt;span class=&quot;hljs-type&quot;&gt;MyActvitiy&lt;/span&gt;.getIntent(&lt;span class=&quot;hljs-type&quot;&gt;FromActivity&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, varA, varB, ...));\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can create an intent for the intended activity and ensure you have all the parameters. You can adapt for fragments to. A simple example above, but you get the idea.&lt;/p&gt;\n    ","\n&lt;p&gt;Try to do the following:&lt;/p&gt;\n\n&lt;p&gt;Create a simple &quot;helper&quot; class (factory for your Intents), like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.Intent;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IntentHelper&lt;/span&gt; {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Intent &lt;span class=&quot;hljs-title&quot;&gt;createYourSpecialIntent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Intent src)&lt;/span&gt; &lt;/span&gt;{\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Intent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;YourSpecialIntent&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;addCategory&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;YourSpecialCategory&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-built_in&quot;&gt;putExtras&lt;/span&gt;(src);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will be the factory for all your Intents. Everytime you need a new Intent, create a static factory method in IntentHelper. To create a new Intent you should just say it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;IntentHelper&lt;span class=&quot;hljs-selector-class&quot;&gt;.createYourSpecialIntent&lt;/span&gt;(getIntent());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your activity. When you want to &quot;save&quot; some data in a &quot;session&quot; just use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;IntentHelper&lt;span class=&quot;hljs-selector-class&quot;&gt;.createYourSpecialIntent&lt;/span&gt;(getIntent())&lt;span class=&quot;hljs-selector-class&quot;&gt;.putExtra&lt;/span&gt;(&quot;YOUR_FIELD_NAME&quot;, fieldValueToSave);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And send this Intent. In the target Activity your field will be available as:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;getIntent&lt;/span&gt;()&lt;span class=&quot;hljs-selector-class&quot;&gt;.getStringExtra&lt;/span&gt;(&quot;YOUR_FIELD_NAME&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So now we can use Intent like same old session (like in servlets or &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaServer_Pages&quot; rel=&quot;noreferrer&quot;&gt;JSP&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;You can also pass custom class objects by making a &lt;strong&gt;parcelable&lt;/strong&gt; class. Best way to make it parcelable is to write your class and then simply paste it to a site like &lt;a href=&quot;http://www.parcelabler.com/&quot; rel=&quot;noreferrer&quot;&gt;http://www.parcelabler.com/&lt;/a&gt;. Click on build and you will get new code. Copy all of this and replace the original class contents. \nThen-&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(getBaseContext(), NextActivity.class);\n&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, foo);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and get the result in NextActivity like-&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getExtras().getParcelable(&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can simply use the &lt;strong&gt;foo&lt;/strong&gt; object like you would have used.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way is to use a public static field in which you store data, i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;{\n\n  public static &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SharedString&lt;/span&gt;;\n  public static &lt;span class=&quot;hljs-type&quot;&gt;SomeObject&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;SharedObject&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The most convenient way to pass data between activities is by passing intents. In the first activity from where you want to send data, you should add code,&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My Data&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//Data you want to send&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(FirstActivity.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, SecondActivity.class);\nintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;,str); &lt;span class=&quot;hljs-comment&quot;&gt;//Here you will add the data into intent to pass bw activites&lt;/span&gt;\nv.getContext().startActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should also import&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; android.content.Intent;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then in the next Acitvity(SecondActivity), you should retrieve the data from the intent using the following code.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.getIntent().getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;SharedPreferences&lt;/code&gt;...&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Logging. Time store session id in &lt;code&gt;SharedPreferences&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;preferences&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getSharedPreferences(&lt;span class=&quot;hljs-string&quot;&gt;&quot;session&quot;&lt;/span&gt;,getApplicationContext().MODE_PRIVATE);\n&lt;span class=&quot;hljs-type&quot;&gt;Editor&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; preferences.edit();\neditor.putString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sessionId&quot;&lt;/span&gt;, sessionId);\neditor.commit();\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Signout. Time fetch session id in sharedpreferences&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;preferences&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getSharedPreferences(&lt;span class=&quot;hljs-string&quot;&gt;&quot;session&quot;&lt;/span&gt;, getApplicationContext().MODE_PRIVATE);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sessionId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; preferences.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sessionId&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If you don&apos;t have the required session id, then remove sharedpreferences:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vhdl&quot;&gt;SharedPreferences settings = &lt;span class=&quot;hljs-keyword&quot;&gt;context&lt;/span&gt;.getSharedPreferences(&lt;span class=&quot;hljs-string&quot;&gt;&quot;session&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;Context&lt;/span&gt;.MODE_PRIVATE);\nsettings.edit().clear().commit();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is very useful, because one time you save the value and then retrieve anywhere of activity.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;From Activity&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(From_Activity.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;,To_Activity.class);\n &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bundle&lt;/span&gt;();\n b1.putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;integerNumber&quot;&lt;/span&gt;,n);\n in.putExtras(b1);\n startActivity(in);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;To Activity&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getExtras();\n &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(b2 != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n  {\n     m = b2.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;integerNumber&quot;&lt;/span&gt;);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The standard approach. &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, ActivityTwo.class);\n&lt;span class=&quot;hljs-type&quot;&gt;AutoCompleteTextView&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (AutoCompleteTextView) findViewById(R.id.autocomplete);\nString getrec=textView.getText().toString();\n&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bundle&lt;/span&gt;();\nbundle.putString(stuff, getrec);\ni.putExtras(bundle);\nstartActivity(i);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now in your second activity retrieve your data from the bundle:&lt;/p&gt;\n\n&lt;p&gt;Get the bundle&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getExtras();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Extract the data&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; stuff = bundle.getString(stuff); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Kotlin&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Pass from First Activity&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; intent = Intent(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, SecondActivity::&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.java)\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;)\nstartActivity(intent)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Get in Second Activity&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Suggestion&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Always put keys in constant file for more managed way.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; KEY = &lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can send data between activities using intent object.\nConsider you have two activities namely &lt;code&gt;FirstActivity&lt;/code&gt; and &lt;code&gt;SecondActivity&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Inside FirstActivity:&lt;/p&gt;\n\n&lt;p&gt;Using Intent:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;i = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(FirstActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;,SecondActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\ni.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\nstartActivity(i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Inside SecondActivity&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;Bundle bundle= getIntent().getExtras();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now you can use different bundle class methods to get values passed from FirstActivity  by Key.&lt;/p&gt;\n\n&lt;p&gt;E.g.\n&lt;code&gt;bundle.getString(&quot;key&quot;)&lt;/code&gt;,&lt;code&gt;bundle.getDouble(&quot;key&quot;)&lt;/code&gt; ,&lt;code&gt;bundle.getInt(&quot;key&quot;)&lt;/code&gt; etc.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you want to tranfer bitmap between Activites/Fragments&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Activity&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;To pass a bitmap between Activites&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, Activity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bitmap&quot;&lt;/span&gt;, bitmap);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;And in the Activity class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bitmap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getParcelableExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bitmap&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Fragment&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;To pass a bitmap between Fragments&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;SecondFragment&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SecondFragment&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bundle&lt;/span&gt;();\nbundle.putParcelable(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bitmap&quot;&lt;/span&gt;, bitmap);\nfragment.setArguments(bundle);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;To receive inside the SecondFragment&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bitmap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getArguments().getParcelable(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bitmap&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Transfering Large Bitmaps&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;If you are getting failed binder transaction, this means you are exceeding the binder transaction buffer by transferring large element from one activity to another activity.&lt;/em&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;So in that case you have to compress the bitmap as an byte&apos;s array and then uncompress it in another activity&lt;/strong&gt;, like this&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;In the FirstActivity&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, SecondActivity.class);\n\n&lt;span class=&quot;hljs-type&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ByteArrayOutputStream&lt;/span&gt;();\nbitmap.compress(Bitmap.CompressFormat.JPG, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, stream);\n&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;[] bytes = stream.toByteArray(); \nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bitmapbytes&quot;&lt;/span&gt;,bytes);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;And in the SecondActivity&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;byte[] &lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt; = getIntent().getByteArrayExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bitmapbytes&quot;&lt;/span&gt;);\nBitmap bmp = BitmapFactory.decodeByteArray(&lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt;.length);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(YourCurrentActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, YourActivityName.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;NAme&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Id&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can retrieve it in another activity. Two ways:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; id = getIntent.getIntExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;/* defaltvalue */&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second way is:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Supplemental Answer: Naming Conventions for the Key String&lt;/h1&gt;\n&lt;p&gt;The actual process of passing data has already been answered, however most of the answers use hard coded strings for the key name in the Intent. This is usually fine when used only within your app. However, the &lt;a href=&quot;https://developer.android.com/guide/components/intents-filters.html#Building&quot; rel=&quot;noreferrer&quot;&gt;documentation recommends&lt;/a&gt; using the &lt;code&gt;EXTRA_*&lt;/code&gt; constants for standardized data types.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example 1: Using &lt;code&gt;Intent.EXTRA_*&lt;/code&gt; keys&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;First activity&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getActivity(), SecondActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(Intent.EXTRA_TEXT, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my text&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Second activity:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myText&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getExtras().getString(Intent.EXTRA_TEXT);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Example 2: Defining your own &lt;code&gt;static final&lt;/code&gt; key&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If one of the &lt;code&gt;Intent.EXTRA_*&lt;/code&gt; Strings does not suit your needs, you can define your own at the beginning of the first activity.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;EXTRA_STUFF&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;com.myPackageName.EXTRA_STUFF&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Including the package name is just a convention if you are only using the key in your own app. But it is a necessity to avoid naming conflicts if you are creating some sort of service that other apps can call with an Intent.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;First activity:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getActivity(), SecondActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(EXTRA_STUFF, &lt;span class=&quot;hljs-string&quot;&gt;&quot;my text&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Second activity:&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myText&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getExtras().getString(FirstActivity.EXTRA_STUFF);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Example 3: Using a String resource key&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Although not mentioned in the documentation, &lt;a href=&quot;https://stackoverflow.com/a/4433843/3681880&quot;&gt;this answer&lt;/a&gt; recommends using a String resource to avoid dependencies between activities.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;strings.xml&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXTRA_STUFF&quot;&lt;/span&gt;&amp;gt;com.myPackageName.MY_NAME&amp;lt;/&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;First activity&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getActivity(), SecondActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(getString(R.&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.EXTRA_STUFF), &lt;span class=&quot;hljs-string&quot;&gt;&quot;my text&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Second activity&lt;/em&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myText&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getExtras().getString(getString(R.string.EXTRA_STUFF));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is my best practice and it helps a lot when the project is huge and complex. &lt;/p&gt;\n\n&lt;p&gt;Suppose that I have 2 activities, &lt;code&gt;LoginActivity&lt;/code&gt; and &lt;code&gt;HomeActivity&lt;/code&gt;.\nI want to pass 2 parameters (username &amp;amp; password) from &lt;code&gt;LoginActivity&lt;/code&gt; to &lt;code&gt;HomeActivity&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;First, I create my &lt;code&gt;HomeIntent&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HomeIntent&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ACTION_LOGIN&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;action_login&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ACTION_LOGOUT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;action_logout&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ARG_USERNAME&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;arg_username&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;ARG_PASSWORD&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;arg_password&quot;&lt;/span&gt;;\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;HomeIntent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx, &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; isLogIn)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;(ctx);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//set action type&lt;/span&gt;\n        setAction(isLogIn ? ACTION_LOGIN : ACTION_LOGOUT);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;HomeIntent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Context ctx)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(ctx, HomeActivity.class);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//This will be needed for receiving data&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;HomeIntent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Intent intent)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;(intent);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String userName, String password)&lt;/span&gt; {\n        putExtra(ARG_USERNAME, userName);\n        putExtra(ARG_PASSWORD, password);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getStringExtra(ARG_USERNAME);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title function_&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getStringExtra(ARG_PASSWORD);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//To separate the params is for which action, we should create action&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isActionLogIn&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getAction().equals(ACTION_LOGIN);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isActionLogOut&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; getAction().equals(ACTION_LOGOUT);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is how I pass the data in my LoginActivity&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LoginActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; void onCreate(&lt;span class=&quot;hljs-meta&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n        setContentView(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.layout.activity_login);\n\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; username = &lt;span class=&quot;hljs-string&quot;&gt;&quot;phearum&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; password = &lt;span class=&quot;hljs-string&quot;&gt;&quot;pwd1133&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; boolean isActionLogin = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Passing data to HomeActivity&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeIntent&lt;/span&gt; homeIntent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeIntent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, isActionLogin);\n        homeIntent.setData(username, password);\n        startActivity(homeIntent);\n\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Final step, here is how I receive the data in &lt;code&gt;HomeActivity&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HomeActivity&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; void onCreate(&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; savedInstanceState) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n        setContentView(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.layout.activity_home);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//This is how we receive the data from LoginActivity&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Make sure you pass getIntent() to the HomeIntent constructor&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeIntent&lt;/span&gt; homeIntent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HomeIntent&lt;/span&gt;(getIntent());\n        &lt;span class=&quot;hljs-type&quot;&gt;Log&lt;/span&gt;.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HomeActivity&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Is action login?  &quot;&lt;/span&gt; + homeIntent.isActionLogIn());\n        &lt;span class=&quot;hljs-type&quot;&gt;Log&lt;/span&gt;.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HomeActivity&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;username: &quot;&lt;/span&gt; + homeIntent.getUsername());\n        &lt;span class=&quot;hljs-type&quot;&gt;Log&lt;/span&gt;.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HomeActivity&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;password: &quot;&lt;/span&gt; + homeIntent.getPassword());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Done! Cool :) I just want to share my experience. If you working on small project this shouldn&apos;t be the big problem. But when your working on big project, it really pain when you want to do refactoring or fixing bugs.&lt;/p&gt;\n    ","\n&lt;p&gt;The passing of data between activities is mainly by means of an intent object.&lt;/p&gt;\n\n&lt;p&gt;First you have to attach the data to the intent object with the use of the &lt;code&gt;Bundle&lt;/code&gt; class. Then call the activity using either &lt;code&gt;startActivity()&lt;/code&gt; or &lt;code&gt;startActivityForResult()&lt;/code&gt; methods.&lt;/p&gt;\n\n&lt;p&gt;You can find more information about it, with an example from the blog post &lt;em&gt;&lt;a href=&quot;http://codeglympse.blogspot.in/2012/10/passing-data-to-activity.html&quot; rel=&quot;noreferrer&quot;&gt;Passing data to an Activity&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can try Shared Preference, it may be a good alternative for sharing data between the activities    &lt;/p&gt;\n\n&lt;p&gt;To save session id -&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;SharedPreferences pref = myContexy.getSharedPreferences(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Session \nData&quot;&lt;/span&gt;,MODE_PRIVATE);\nSharedPreferences.Editor edit = pref.edit();\nedit.putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Session ID&quot;&lt;/span&gt;, session_id);\nedit.commit();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To get them -&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;SharedPreferences&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;pref&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myContexy.getSharedPreferences(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Session Data&quot;&lt;/span&gt;, MODE_PRIVATE);\nsession_id = pref.getInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Session ID&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;Intent&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;Intent mIntent = new Intent(FirstActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, SecondActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nmIntent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;);\nstartActivity(mIntent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another way could be using &lt;em&gt;singleton pattern&lt;/em&gt; also:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataHolder&lt;/span&gt; {\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataHolder&lt;/span&gt; dataHolder;\n &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Model&lt;/span&gt;&amp;gt; dataList;\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setDataList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;Model&amp;gt;dataList&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;dataList&lt;/span&gt; = dataList;\n }\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Model&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getDataList&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dataList;\n }\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; synchronized &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataHolder&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getInstance&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dataHolder == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n       dataHolder = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataHolder&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; dataHolder;\n }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From your FirstActivity &lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Model&lt;/span&gt;&amp;gt; dataList &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; new &lt;span class=&quot;hljs-type&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;DataHolder&lt;/span&gt;.getInstance().setDataList(dataList);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On SecondActivity&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Model&lt;/span&gt;&amp;gt; dataList &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;DataHolder&lt;/span&gt;.getInstance().getDataList();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;1st way: In your current Activity, when you create object of intent to open new screen:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-dart&quot;&gt;  &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz&quot;&lt;/span&gt;;\n  Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(CurrentActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, NextActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);    \n  intent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;, value);\n  startActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then in the nextActivity in onCreate method, retrieve those values which you pass from previous activity:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getIntent().getExtras() != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-comment&quot;&gt;//The key argument must always match that used send and retrive value from one activity to another.&lt;/span&gt;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;2nd way: You can create bundle object and put values in bundle and then put bundle object in intent from your current activity -&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  String value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(CurrentActivity.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, NextActivity.class);  \n  &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bundle&lt;/span&gt;();\n  bundle.putInt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;, value);  \n  intent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bundle_key&quot;&lt;/span&gt;, bundle);\n  startActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then in the nextActivity in onCreate method, retrieve those values which you pass from previous activity:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (getIntent().getExtras() != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;bundle_key&quot;&lt;/span&gt;);    \n      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; bundle.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-comment&quot;&gt;//The key argument must always match that used send and retrive value from one activity to another.&lt;/span&gt;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also use bean class to pass data between classes using serialization.&lt;/p&gt;\n    ","\n&lt;p&gt;Start another activity from this activity pass parameters via Bundle Object&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getBaseContext(), YourActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;USER_NAME&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz@gmail.com&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Retrieve on another activity (YourActivity)&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; s = getIntent().getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;USER_NAME&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is ok for simple kind data type.\nBut if u want to pass complex data in between activity u need to serialize it first.&lt;/p&gt;\n\n&lt;p&gt;Here we have Employee Model&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Employee&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String empId;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; age;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; Double salary;\n\n    getters...\n    setters...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use Gson lib provided by google to serialize the complex data \nlike this&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;strEmp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;().toJson(emp);\n&lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;(getBaseContext(), YourActivity.class);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EMP&quot;&lt;/span&gt;, strEmp);\nstartActivity(intent);\n\n&lt;span class=&quot;hljs-type&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent().getExtras();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;empStr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; bundle.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EMP&quot;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-type&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Gson&lt;/span&gt;();\n            &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TypeToken&lt;/span&gt;&amp;lt;Employee&amp;gt;() {\n            }.getType();\n            &lt;span class=&quot;hljs-type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;selectedEmp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; gson.fromJson(empStr, type);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n * If you are from transferring data from one class that doesn&apos;t\n * extend Activity, then you need to do something like this.\n */&lt;/span&gt; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;abc&lt;/span&gt; {\n    Context context;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;abc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Context context&lt;/span&gt;)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.context = context;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;something&lt;/span&gt;()&lt;/span&gt; {\n        context.startactivity(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(context, anyone.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;).putextra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I recently released &lt;a href=&quot;https://github.com/HodeCode/Vapor-API&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vapor API&lt;/a&gt;, a jQuery flavored Android framework that makes all sorts of tasks like this simpler. As mentioned, &lt;code&gt;SharedPreferences&lt;/code&gt; is one way you could do this.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/content/VaporSharedPreferences.java&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;VaporSharedPreferences&lt;/code&gt;&lt;/a&gt; is implemented as Singleton so that is one option, and in Vapor API it has a heavily overloaded &lt;code&gt;.put(...)&lt;/code&gt; method so you don&apos;t have to explicitly worry about the datatype you are committing - providing it is supported. It is also fluent, so you can chain calls:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;prefs&lt;/span&gt;(...).&lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;val1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;val2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;something&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3.34&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It also optionally autosaves changes, and unifies the reading and writing process under-the-hood so you don&apos;t need to explicitly retrieve an Editor like you do in standard Android.&lt;/p&gt;\n\n&lt;p&gt;Alternatively you could use an &lt;code&gt;Intent&lt;/code&gt;. In Vapor API you can also use the chainable overloaded &lt;code&gt;.put(...)&lt;/code&gt; method on a &lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/content/VaporIntent.java&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;VaporIntent&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title class_&quot;&gt;Intent&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myData&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;more&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;568&lt;/span&gt;)...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And pass it as an extra, as mentioned in the other answers. You can retrieve extras from your &lt;code&gt;Activity&lt;/code&gt;, and furthermore if you are using &lt;a href=&quot;https://github.com/HodeCode/Vapor-API/blob/80e64900f429e515dd2fe045a33cd0b5d21396c5/app/VaporActivity.java&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;VaporActivity&lt;/code&gt;&lt;/a&gt; this is done for you automatically so you can use:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.extras()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To retrieve them at the other end in the &lt;code&gt;Activity&lt;/code&gt; you switch to.&lt;/p&gt;\n\n&lt;p&gt;Hope that is of interest to some :)&lt;/p&gt;\n    ","\n&lt;p&gt;First Activity:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent intent = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(getApplicationContext(), ClassName.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\nintent.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value you want to pass&quot;&lt;/span&gt;);\nstartActivity(intent);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Second Activity:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;str&lt;/span&gt;= &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getIntent&lt;/span&gt;().&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getStringExtra&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Variable name which you sent as an extra&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Write following code in &lt;strong&gt;CurrentActivity.java&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intent i = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Intent(CurrentActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, SignOutActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\ni.putExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SESSION_ID&quot;&lt;/span&gt;,sessionId);\nstartActivity(i);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Access SessionId in &lt;strong&gt;SignOutActivity.java&lt;/strong&gt; is following way&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_sign_out);\n    &lt;span class=&quot;hljs-type&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; getIntent();\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// check intent is null or not&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(intent != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sessionId&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intent.getStringExtra(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SESSION_ID&quot;&lt;/span&gt;);\n        Log.d(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Session_id : &quot;&lt;/span&gt; + sessionId);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        Toast.makeText(SignOutActivity.&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Intent is null&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use a global class:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scala&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GlobalClass&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Application&lt;/span&gt;&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; float vitamin_a;\n\n\n    public float getVitaminA() {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; vitamin_a;\n    }\n\n    public void setVitaminA(float vitamin_a) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vitamin_a = vitamin_a;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can call the setters and the getters of this class from all other classes.\nDo do that, you need to make a GlobalClass-Object in every Actitity:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;GlobalClass gc = (&lt;span class=&quot;hljs-name&quot;&gt;GlobalClass&lt;/span&gt;) getApplication()&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you can call for example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;gc&lt;span class=&quot;hljs-selector-class&quot;&gt;.getVitaminA&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n    "],"140":["\n&lt;p&gt;A typical situation where you encounter strict aliasing problems is when overlaying a struct (like a device/network msg) onto a buffer of the word size of your system (like a pointer to &lt;code&gt;uint32_t&lt;/code&gt;s or &lt;code&gt;uint16_t&lt;/code&gt;s). When you overlay a struct onto such a buffer, or a buffer onto such a struct through pointer casting you can easily violate strict aliasing rules.&lt;/p&gt;\n&lt;p&gt;So in this kind of setup, if I want to send a message to something I&apos;d have to have two incompatible pointers pointing to the same chunk of memory. I might then naively code something like this:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Msg&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b;\n} Msg;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SendWord&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;uint32_t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get a 32-bit buffer from the system&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;uint32_t&lt;/span&gt;* buff = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(Msg));\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Alias that buffer through message&lt;/span&gt;\n    Msg* msg = (Msg*)(buff);\n    \n    &lt;span class=&quot;hljs-comment&quot;&gt;// Send a bunch of messages    &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i)\n    {\n        msg-&amp;gt;a = i;\n        msg-&amp;gt;b = i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;SendWord&lt;/span&gt;(buff[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;SendWord&lt;/span&gt;(buff[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);   \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The strict aliasing rule makes this setup illegal: dereferencing a pointer that aliases an object that is not of a &lt;a href=&quot;http://en.cppreference.com/w/c/language/type&quot; rel=&quot;noreferrer&quot;&gt;compatible type&lt;/a&gt; or one of the other types allowed by C 2011 6.5 paragraph 7&lt;sup&gt;1&lt;/sup&gt; is undefined behavior. Unfortunately, you can still code this way, &lt;em&gt;maybe&lt;/em&gt; get some warnings, have it compile fine, only to have weird unexpected behavior when you run the code.&lt;/p&gt;\n&lt;p&gt;(GCC appears somewhat inconsistent in its ability to give aliasing warnings, sometimes giving us a friendly warning and sometimes not.)&lt;/p&gt;\n&lt;p&gt;To see why this behavior is undefined, we have to think about what the strict aliasing rule buys the compiler. Basically, with this rule, it doesn&apos;t have to think about inserting instructions to refresh the contents of &lt;code&gt;buff&lt;/code&gt; every run of the loop. Instead, when optimizing, with some annoyingly unenforced assumptions about aliasing, it can omit those instructions, load &lt;code&gt;buff[0]&lt;/code&gt; and &lt;code&gt;buff[1]&lt;/code&gt; into CPU registers once before the loop is run, and speed up the body of the loop. Before strict aliasing was introduced, the compiler had to live in a state of paranoia that the contents of &lt;code&gt;buff&lt;/code&gt; could change by any preceding memory stores. So to get an extra performance edge, and assuming most people don&apos;t type-pun pointers, the strict aliasing rule was introduced.&lt;/p&gt;\n&lt;p&gt;Keep in mind, if you think the example is contrived, this might even happen if you&apos;re passing a buffer to another function doing the sending for you, if instead you have.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;uint32_t&lt;/span&gt;* buff, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size32)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size32; ++i) \n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;SendWord&lt;/span&gt;(buff[i]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And rewrote our earlier loop to take advantage of this convenient function&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-erlang&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(int i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-title&quot;&gt;msg&lt;/span&gt;-&amp;gt;&lt;/span&gt;a = i;\n    msg-&amp;gt;b = i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    SendMessage(buff, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The compiler may or may not be able to or smart enough to try to inline SendMessage and it may or may not decide to load or not load buff again. If &lt;code&gt;SendMessage&lt;/code&gt; is part of another API that&apos;s compiled separately, it probably has instructions to load buff&apos;s contents. Then again, maybe you&apos;re in C++ and this is some templated header only implementation that the compiler thinks it can inline. Or maybe it&apos;s just something you wrote in your .c file for your own convenience. Anyway undefined behavior might still ensue. Even when we know some of what&apos;s happening under the hood, it&apos;s still a violation of the rule so no well defined behavior is guaranteed. So just by wrapping in a function that takes our word delimited buffer doesn&apos;t necessarily help.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;So how do I get around this?&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Use a union. Most compilers support this without complaining about strict aliasing. This is allowed in C99 and explicitly allowed in C11.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-objectivec&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; {\n      Msg msg;\n      &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; asBuffer[&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(Msg)/&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)];\n  };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You can disable strict aliasing in your compiler (&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc-4.6.1/gcc/Optimize-Options.html#index-fstrict_002daliasing-825&quot; rel=&quot;noreferrer&quot;&gt;f[no-]strict-aliasing&lt;/a&gt; in gcc))&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You can use &lt;code&gt;char*&lt;/code&gt; for aliasing instead of your system&apos;s word. The rules allow an exception for &lt;code&gt;char*&lt;/code&gt; (including &lt;code&gt;signed char&lt;/code&gt; and &lt;code&gt;unsigned char&lt;/code&gt;). It&apos;s always assumed that &lt;code&gt;char*&lt;/code&gt; aliases other types. However this won&apos;t work the other way: there&apos;s no assumption that your struct aliases a buffer of chars.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Beginner beware&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This is only one potential minefield when overlaying two types onto each other. You should also learn about &lt;a href=&quot;http://en.wikipedia.org/wiki/Endianness&quot; rel=&quot;noreferrer&quot;&gt;endianness&lt;/a&gt;, &lt;a href=&quot;http://web.archive.org/web/20170708093042/http://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/aligned.html&quot; rel=&quot;noreferrer&quot;&gt;word alignment&lt;/a&gt;, and how to deal with alignment issues through &lt;a href=&quot;http://grok2.com/structure_packing.html&quot; rel=&quot;noreferrer&quot;&gt;packing structs&lt;/a&gt; correctly.&lt;/p&gt;\n&lt;h2&gt;Footnote&lt;/h2&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The types that C 2011 6.5 7 allows an lvalue to access are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;a type compatible with the effective type of the object,&lt;/li&gt;\n&lt;li&gt;a qualified version of a type compatible with the effective type of the object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to the effective type of the object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to a qualified version of the effective type of the object,&lt;/li&gt;\n&lt;li&gt;an aggregate or union type that includes one of the aforementioned types among its members (including, recursively, a member of a subaggregate or contained union), or&lt;/li&gt;\n&lt;li&gt;a character type.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The best explanation I have found is by Mike Acton, &lt;a href=&quot;http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html&quot; rel=&quot;noreferrer&quot;&gt;Understanding Strict Aliasing&lt;/a&gt;. It&apos;s focused a little on PS3 development, but that&apos;s basically just GCC.&lt;/p&gt;\n\n&lt;p&gt;From the article:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;Strict aliasing is an assumption, made by the C (or C++) compiler, that dereferencing pointers to objects of different types will never refer to the same memory location (i.e. alias each other.)&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So basically if you have an &lt;code&gt;int*&lt;/code&gt; pointing to some memory containing an &lt;code&gt;int&lt;/code&gt; and then you point a &lt;code&gt;float*&lt;/code&gt; to that memory and use it as a &lt;code&gt;float&lt;/code&gt; you break the rule. If your code does not respect this, then the compiler&apos;s optimizer will most likely break your code.&lt;/p&gt;\n\n&lt;p&gt;The exception to the rule is a &lt;code&gt;char*&lt;/code&gt;, which is allowed to point to any type.&lt;/p&gt;\n    ","\n&lt;h2&gt;Note&lt;/h2&gt;\n&lt;p&gt;This is excerpted from my &lt;a href=&quot;https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8&quot; rel=&quot;nofollow noreferrer&quot;&gt;&quot;What is the Strict Aliasing Rule and Why do we care?&quot;&lt;/a&gt; write-up.&lt;/p&gt;\n&lt;h2&gt;What is strict aliasing?&lt;/h2&gt;\n&lt;p&gt;In C and C++ aliasing has to do with what expression types we are allowed to access stored values through. In both C and C++ the standard specifies which expression types are allowed to alias which types. The compiler and optimizer are allowed to assume we follow the aliasing rules strictly, hence the term &lt;em&gt;strict aliasing rule&lt;/em&gt;. If we attempt to access a value using a type not allowed it is classified as &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/ub&quot; rel=&quot;nofollow noreferrer&quot;&gt;undefined behavior&lt;/a&gt; (&lt;strong&gt;UB&lt;/strong&gt;). Once we have undefined behavior all bets are off, the results of our program are no longer reliable.&lt;/p&gt;\n&lt;p&gt;Unfortunately with strict aliasing violations, we will often obtain the results we expect, leaving the possibility the a future version of a compiler with a new optimization will break code we thought was valid. This is undesirable and it is a worthwhile goal to understand the strict aliasing rules and how to avoid violating them.&lt;/p&gt;\n&lt;p&gt;To understand more about why we care, we will discuss issues that come up when violating strict aliasing rules, type punning since common techniques used in type punning often violate strict aliasing rules and how to type pun correctly.&lt;/p&gt;\n&lt;h3&gt;Preliminary examples&lt;/h3&gt;\n&lt;p&gt;Let&apos;s look at some examples, then we can talk about exactly what the standard(s) say, examine some further examples and then see how to avoid strict aliasing and catch violations we missed. Here is an example that should not be surprising (&lt;a href=&quot;https://wandbox.org/permlink/7sCJTAyrifZ0zfFA&quot; rel=&quot;nofollow noreferrer&quot;&gt;live example&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ip = &amp;amp;x;\n\nstd::cout &amp;lt;&amp;lt; *ip &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n*ip = &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;;\nstd::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We have a &lt;em&gt;int*&lt;/em&gt; pointing to memory occupied by an &lt;em&gt;int&lt;/em&gt; and this is a valid aliasing. The optimizer must assume that assignments through &lt;strong&gt;ip&lt;/strong&gt; could update the value occupied by &lt;strong&gt;x&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;The next example shows aliasing that leads to undefined behavior (&lt;a href=&quot;https://wandbox.org/permlink/8qA8JyJRVHtS9LPf&quot; rel=&quot;nofollow noreferrer&quot;&gt;live example&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; *f, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *i )&lt;/span&gt; &lt;/span&gt;{ \n    *i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    *f = &lt;span class=&quot;hljs-number&quot;&gt;0.f&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *i;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    \n    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// Expect 0&lt;/span&gt;\n    x = &lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;*&amp;gt;(&amp;amp;x), &amp;amp;x);\n    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// Expect 0?&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the function &lt;strong&gt;foo&lt;/strong&gt; we take an &lt;em&gt;int*&lt;/em&gt; and a &lt;em&gt;float*&lt;/em&gt;, in this example we call &lt;strong&gt;foo&lt;/strong&gt; and set both parameters to point to the same memory location which in this example contains an &lt;em&gt;int&lt;/em&gt;. Note, the &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/reinterpret_cast&quot; rel=&quot;nofollow noreferrer&quot;&gt;reinterpret_cast&lt;/a&gt; is telling the compiler to treat the expression as if it had the type specified by its template parameter. In this case we are telling it to treat the expression &lt;strong&gt;&amp;amp;x&lt;/strong&gt; as if it had type &lt;em&gt;float*&lt;/em&gt;. We may naively expect the result of the second &lt;strong&gt;cout&lt;/strong&gt; to be &lt;strong&gt;0&lt;/strong&gt; but with optimization enabled using &lt;strong&gt;-O2&lt;/strong&gt; both gcc and clang produce the following result:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;0\n1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which may not be expected but is perfectly valid since we have invoked undefined behavior. A &lt;em&gt;float&lt;/em&gt; can not validly alias an &lt;em&gt;int&lt;/em&gt; object. Therefore the optimizer can assume the &lt;em&gt;constant 1&lt;/em&gt; stored when dereferencing &lt;strong&gt;i&lt;/strong&gt; will be the return value since a store through &lt;strong&gt;f&lt;/strong&gt; could not validly affect an &lt;em&gt;int&lt;/em&gt; object. Plugging the code in Compiler Explorer shows this is exactly what is happening(&lt;a href=&quot;https://godbolt.org/g/yNV5aj&quot; rel=&quot;nofollow noreferrer&quot;&gt;live example&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;foo(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;): # &lt;span class=&quot;hljs-variable&quot;&gt;@foo&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;)\nmov dword ptr [rsi], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nmov dword ptr [rdi], &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\nmov eax, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nret\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The optimizer using &lt;a href=&quot;http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/2000/0010/0010d/0010d.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Type-Based Alias Analysis (TBAA)&lt;/a&gt; assumes &lt;strong&gt;1&lt;/strong&gt; will be returned and directly moves the constant value into register &lt;strong&gt;eax&lt;/strong&gt; which carries the return value. TBAA uses the languages rules about what types are allowed to alias to optimize loads and stores. In this case TBAA knows that a &lt;em&gt;float&lt;/em&gt; can not alias an &lt;em&gt;int&lt;/em&gt; and optimizes away the load of &lt;strong&gt;i&lt;/strong&gt;.&lt;/p&gt;\n&lt;h2&gt;Now, to the Rule-Book&lt;/h2&gt;\n&lt;p&gt;What exactly does the standard say we are allowed and not allowed to do? The standard language is not straightforward, so for each item I will try to provide code examples that demonstrates the meaning.&lt;/p&gt;\n&lt;h3&gt;What does the C11 standard say?&lt;/h3&gt;\n&lt;p&gt;The &lt;strong&gt;C11&lt;/strong&gt; standard says the following in section &lt;em&gt;6.5 Expressions paragraph 7&lt;/em&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An object shall have its stored value accessed only by an lvalue expression that has one of the following types:&lt;sup&gt;88)&lt;/sup&gt;\n a type compatible with the effective type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; *p = &amp;amp;&lt;span class=&quot;hljs-keyword&quot;&gt;x&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, *p); &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; *p gives us an lvalue expression of type &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; which is compatible with &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt; a qualified version of a type compatible with the effective type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p = &amp;amp;x;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, *p); &lt;span class=&quot;hljs-comment&quot;&gt;// *p gives us an lvalue expression of type const int which is compatible with int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt; a type that is the signed or unsigned type corresponding to the effective type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p = (&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&amp;amp;x;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, *p ); &lt;span class=&quot;hljs-comment&quot;&gt;// *p gives us an lvalue expression of type unsigned int which corresponds to &lt;/span&gt;\n                     &lt;span class=&quot;hljs-comment&quot;&gt;// the effective type of the object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://twitter.com/shafikyaghmour/status/957702383810658304&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc/clang has an extension&lt;/a&gt; and &lt;a href=&quot;https://gcc.gnu.org/ml/gcc/2003-10/msg00184.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;also&lt;/a&gt; that allows assigning &lt;em&gt;unsigned int*&lt;/em&gt; to &lt;em&gt;int*&lt;/em&gt; even though they are not compatible types.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt; a type that is the signed or unsigned type corresponding to a qualified version of the effective type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p = (&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&amp;amp;x;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%u\\n&quot;&lt;/span&gt;, *p ); &lt;span class=&quot;hljs-comment&quot;&gt;// *p gives us an lvalue expression of type const unsigned int which is a unsigned type &lt;/span&gt;\n                     &lt;span class=&quot;hljs-comment&quot;&gt;// that corresponds with to a qualified version of the effective type of the object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt; an aggregate or union type that includes one of the aforementioned types among its members (including, recursively, a member of a subaggregate or contained union), or&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; foo {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n};\n    \n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; foo *fp, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *ip &lt;/span&gt;)&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// struct foo is an aggregate that includes int among its members so it&lt;/span&gt;\n                                         &lt;span class=&quot;hljs-comment&quot;&gt;// can alias with *ip&lt;/span&gt;\n\nfoo f;\nfoobar( &amp;amp;f, &amp;amp;f.x );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt; a character type.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *p = (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *)&amp;amp;x;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c\\n&quot;&lt;/span&gt;, *p );  &lt;span class=&quot;hljs-comment&quot;&gt;// *p gives us an lvalue expression of type char which is a character type.&lt;/span&gt;\n                      &lt;span class=&quot;hljs-comment&quot;&gt;// The results are not portable due to endianness issues.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;What the C++17 Draft Standard says&lt;/h3&gt;\n&lt;p&gt;The C++17 draft standard in section &lt;em&gt;[basic.lval] paragraph 11&lt;/em&gt; says:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If a program attempts to access the stored value of an object through a glvalue of other than one of the following types the behavior is undefined:&lt;sup&gt;63&lt;/sup&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.1)  the dynamic type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *p = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) ); &lt;span class=&quot;hljs-comment&quot;&gt;// We have allocated storage but not started the lifetime of an object&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ip = &lt;span class=&quot;hljs-built_in&quot;&gt;new&lt;/span&gt; (p) &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};        &lt;span class=&quot;hljs-comment&quot;&gt;// Placement new changes the dynamic type of the object to int&lt;/span&gt;\nstd::cout &amp;lt;&amp;lt; *ip &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;        &lt;span class=&quot;hljs-comment&quot;&gt;// *ip gives us a glvalue expression of type int which matches the dynamic type &lt;/span&gt;\n                                 &lt;span class=&quot;hljs-comment&quot;&gt;// of the allocated object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.2)  a cv-qualified version of the dynamic type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *cip = &amp;amp;x;\nstd::cout &amp;lt;&amp;lt; *cip &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// *cip gives us a glvalue expression of type const int which is a cv-qualified &lt;/span&gt;\n                            &lt;span class=&quot;hljs-comment&quot;&gt;// version of the dynamic type of x&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.3)  a type similar (as defined in 7.5) to the dynamic type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.4)  a type that is the signed or unsigned type corresponding to the dynamic type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Both si and ui are signed or unsigned types corresponding to each others dynamic types&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// We can see from this godbolt(https://godbolt.org/g/KowGXB) the optimizer assumes aliasing.&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;si, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;ui )&lt;/span&gt; &lt;/span&gt;{\n    si = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    ui = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; si;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.5)  a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;si1, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &amp;amp;si2)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Hard to show this one assumes aliasing&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.6)  an aggregate or union type that includes one of the aforementioned types among its elements or nonstatic data members (including, recursively, an element or non-static data member of a subaggregate or contained union),&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; foo {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Compiler Explorer example(https://godbolt.org/g/z2wJTC) shows aliasing assumption&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo &amp;amp;fp, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &amp;amp;ip &lt;/span&gt;)&lt;/span&gt; {\n    fp.x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    ip = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fp.x;\n}\n\nfoo f;\nfoobar( f, f.x );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.7)  a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; foo { &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; bar : &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; foo {};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foobar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; foo &amp;amp;f, bar &amp;amp;b &lt;/span&gt;)&lt;/span&gt; {\n    f.x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    b.x = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f.x;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(11.8)  a char, unsigned char, or std::byte type.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( std::&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt; &amp;amp;b, uint32_t &amp;amp;ui )&lt;/span&gt; {\n    b = static_cast&amp;lt;std::&lt;span class=&quot;hljs-type&quot;&gt;byte&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;);\n    ui = &lt;span class=&quot;hljs-number&quot;&gt;0xFFFFFFFF&lt;/span&gt;;\n  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::to_integer&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;( b );  &lt;span class=&quot;hljs-comment&quot;&gt;// b gives us a glvalue expression of type std::byte which can alias&lt;/span&gt;\n                                       &lt;span class=&quot;hljs-comment&quot;&gt;// an object of type uint32_t&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Worth noting &lt;em&gt;signed char&lt;/em&gt; is not included in the list above, this is a notable difference from &lt;em&gt;C&lt;/em&gt; which says &lt;em&gt;a character type&lt;/em&gt;.&lt;/p&gt;\n&lt;h2&gt;What is Type Punning&lt;/h2&gt;\n&lt;p&gt;We have gotten to this point and we may be wondering, why would we want to alias for? The answer typically is to &lt;em&gt;type pun&lt;/em&gt;, often the methods used violate strict aliasing rules.&lt;/p&gt;\n&lt;p&gt;Sometimes we want to circumvent the type system and interpret an object as a different type. This is called &lt;em&gt;type punning&lt;/em&gt;, to reinterpret a segment of memory as another type. &lt;em&gt;Type punning&lt;/em&gt; is useful for tasks that want access to the underlying representation of an object to view, transport or manipulate. Typical areas we find type punning being used are compilers, serialization, networking code, etc&lt;/p&gt;\n&lt;p&gt;Traditionally this has been accomplished by taking the address of the object, casting it to a pointer of the type we want to reinterpret it as and then accessing the value, or in other words by aliasing. For example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In C&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; *fp = (&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;*)&amp;amp;x;  &lt;span class=&quot;hljs-comment&quot;&gt;// Not a valid aliasing&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In C++&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; *fp = &lt;span class=&quot;hljs-built_in&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;*&amp;gt;(&amp;amp;x);  &lt;span class=&quot;hljs-comment&quot;&gt;// Not a valid aliasing&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%f\\n&quot;&lt;/span&gt;, *fp );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As we have seen earlier this is not a valid aliasing, so we are invoking undefined behavior. But traditionally compilers did not take advantage of strict aliasing rules and this type of code usually just worked, developers have unfortunately gotten used to doing things this way. A common alternate method for type punning is through unions, which is valid in C but &lt;em&gt;undefined behavior&lt;/em&gt; in C++ (&lt;a href=&quot;https://wandbox.org/permlink/oOf9bPlcWDYrYqPF&quot; rel=&quot;nofollow noreferrer&quot;&gt;see live example&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;u1&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n;\n    &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; f;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;u1&lt;/span&gt; u;\nu.f = &lt;span class=&quot;hljs-number&quot;&gt;1.0f&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, u.n );  &lt;span class=&quot;hljs-comment&quot;&gt;// UB in C++ n is not the active member&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is not valid in C++ and some consider the purpose of unions to be solely for implementing variant types and feel using unions for type punning is an abuse.&lt;/p&gt;\n&lt;h3&gt;How do we Type Pun correctly?&lt;/h3&gt;\n&lt;p&gt;The standard method for &lt;em&gt;type punning&lt;/em&gt; in both C and C++ is &lt;strong&gt;memcpy&lt;/strong&gt;. This may seem a little heavy handed but the optimizer should recognize the use of &lt;strong&gt;memcpy&lt;/strong&gt; for &lt;em&gt;type punning&lt;/em&gt; and optimize it away and generate a register to register move. For example if we know &lt;em&gt;int64_t&lt;/em&gt; is the same size as &lt;em&gt;double&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;static_assert( &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; ) == &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;( int64_t ) );  &lt;span class=&quot;hljs-comment&quot;&gt;// C++17 does not require a message&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;we can use &lt;strong&gt;memcpy&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; d )&lt;/span&gt; &lt;/span&gt;{\n    std::&lt;span class=&quot;hljs-type&quot;&gt;int64_t&lt;/span&gt; n;\n    std::&lt;span class=&quot;hljs-built_in&quot;&gt;memcpy&lt;/span&gt;(&amp;amp;n, &amp;amp;d, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; d);\n    &lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;At a sufficient optimization level any decent modern compiler generates identical code to the previously mentioned &lt;strong&gt;reinterpret_cast&lt;/strong&gt; method or &lt;em&gt;union&lt;/em&gt; method for &lt;em&gt;type punning&lt;/em&gt;. Examining the generated code we see it uses just register mov (&lt;a href=&quot;https://godbolt.org/g/BfZGwX&quot; rel=&quot;nofollow noreferrer&quot;&gt;live Compiler Explorer Example&lt;/a&gt;).&lt;/p&gt;\n&lt;h2&gt;C++20 and bit_cast&lt;/h2&gt;\n&lt;p&gt;In C++20 we may gain &lt;strong&gt;bit_cast&lt;/strong&gt; (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0476r2.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;implementation available in link from proposal&lt;/a&gt;) which gives a simple and safe way to type-pun as well as being usable in a constexpr context.&lt;/p&gt;\n&lt;p&gt;The following is an example of how to use &lt;strong&gt;bit_cast&lt;/strong&gt; to type pun a &lt;em&gt;unsigned int&lt;/em&gt; to &lt;em&gt;float&lt;/em&gt;, (&lt;a href=&quot;https://wandbox.org/permlink/i5l0g4IYuCFgLzzl&quot; rel=&quot;nofollow noreferrer&quot;&gt;see it live&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;bit_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0x447a0000&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//assuming sizeof(float) == sizeof(unsigned int)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the case where &lt;em&gt;To&lt;/em&gt; and &lt;em&gt;From&lt;/em&gt; types don&apos;t have the same size, it requires us to use an intermediate struct15. We will use a struct containing a &lt;strong&gt;sizeof( unsigned int )&lt;/strong&gt; character array (&lt;em&gt;assumes 4 byte unsigned int&lt;/em&gt;) to be the &lt;em&gt;From&lt;/em&gt; type and &lt;em&gt;unsigned int&lt;/em&gt; as the &lt;em&gt;To&lt;/em&gt; type.:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;uint_chars&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; arr[&lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; )] = {};  &lt;span class=&quot;hljs-comment&quot;&gt;// Assume sizeof( unsigned int ) == 4&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Assume len is a multiple of 4 &lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *p, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len )&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;( &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; len; index += &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) ) {\n        uint_chars f;\n        std::&lt;span class=&quot;hljs-built_in&quot;&gt;memcpy&lt;/span&gt;( f.arr, &amp;amp;p[index], &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;));\n        &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; result = &lt;span class=&quot;hljs-built_in&quot;&gt;bit_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;&amp;gt;(f);\n\n        result += &lt;span class=&quot;hljs-built_in&quot;&gt;foo&lt;/span&gt;( result );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is unfortunate that we need this intermediate type but that is the current constraint of &lt;strong&gt;bit_cast&lt;/strong&gt;.&lt;/p&gt;\n&lt;h2&gt;Catching Strict Aliasing Violations&lt;/h2&gt;\n&lt;p&gt;We don&apos;t have a lot of good tools for catching strict aliasing in C++, the tools we have will catch some cases of strict aliasing violations and some cases of misaligned loads and stores.&lt;/p&gt;\n&lt;p&gt;gcc using the flag &lt;strong&gt;-fstrict-aliasing&lt;/strong&gt; and &lt;strong&gt;-Wstrict-aliasing&lt;/strong&gt; can catch some cases although not without false positives/negatives. For example the following cases will generate a warning in gcc (&lt;a href=&quot;https://wandbox.org/permlink/cfckjTgwNTYHDIry&quot; rel=&quot;nofollow noreferrer&quot;&gt;see it live&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; j;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; f = &lt;span class=&quot;hljs-number&quot;&gt;1.f&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Originally not initialized but tis-kernel caught &lt;/span&gt;\n               &lt;span class=&quot;hljs-comment&quot;&gt;// it was being accessed w/ an indeterminate value below&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, j = *(&lt;span class=&quot;hljs-built_in&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;*&amp;gt;(&amp;amp;a)));\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, j = *(&lt;span class=&quot;hljs-built_in&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*&amp;gt;(&amp;amp;f)));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;although it will not catch this additional case (&lt;a href=&quot;https://wandbox.org/permlink/dwd9jhy53AF7a2D0&quot; rel=&quot;nofollow noreferrer&quot;&gt;see it live&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p;\n\np = &amp;amp;a;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, j = *(&lt;span class=&quot;hljs-built_in&quot;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;*&amp;gt;(p)));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although clang allows these flags it apparently does not actually implement the warnings.&lt;/p&gt;\n&lt;p&gt;Another tool we have available to us is ASan which can catch misaligned loads and stores. Although these are not directly strict aliasing violations they are a common result of strict aliasing violations. For example the following cases will generate runtime errors when built with clang using &lt;strong&gt;-fsanitize=address&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *x = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];               &lt;span class=&quot;hljs-comment&quot;&gt;// 8 bytes: [0,7].&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *u = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)((&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)x + &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// regardless of alignment of x this will not be an aligned address&lt;/span&gt;\n*u = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;                            &lt;span class=&quot;hljs-comment&quot;&gt;// Access to range [6-9]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;%d\\n&quot;&lt;/span&gt;, *u );              &lt;span class=&quot;hljs-comment&quot;&gt;// Access to range [6-9]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The last tool I will recommend is C++ specific and not strictly a tool but a coding practice, don&apos;t allow C-style casts. Both gcc and clang will produce a diagnostic for C-style casts using &lt;strong&gt;-Wold-style-cast&lt;/strong&gt;. This will force any undefined type puns to use reinterpret_cast, in general reinterpret_cast should be a flag for closer code review. It is also easier to search your code base for reinterpret_cast to perform an audit.&lt;/p&gt;\n&lt;p&gt;For C we have all the tools already covered and we also have tis-interpreter, a static analyzer that exhaustively analyzes a program for a large subset of the C language. Given a C version of the earlier example where using &lt;strong&gt;-fstrict-aliasing&lt;/strong&gt; misses one case (&lt;a href=&quot;https://wandbox.org/permlink/ebLBJ17Pg7TsnIgY&quot; rel=&quot;nofollow noreferrer&quot;&gt;see it live&lt;/a&gt;)&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; j;\n&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; f = &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, j = *((&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;*)&amp;amp;a));\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, j = *((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*)&amp;amp;f));\n    \n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *p;\n\np = &amp;amp;a;\n&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%i\\n&quot;&lt;/span&gt;, j = *((&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt;*)p));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;tis-interpeter is able to catch all three, the following example invokes tis-kernel as tis-interpreter (output is edited for brevity):&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;./bin/tis-kernel -sa example1.c \n...\nexample1.c:&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;:[sa] warning: &lt;span class=&quot;hljs-function&quot;&gt;The &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;short&lt;/span&gt; *&lt;/span&gt;)(&lt;span class=&quot;hljs-params&quot;&gt;&amp;amp; a&lt;/span&gt;) has type &lt;span class=&quot;hljs-built_in&quot;&gt;short&lt;/span&gt; *. It violates strict aliasing\n              rules &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; accessing a cell &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; effective type &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;.\n...\n\nexample1.c:10:[sa] warning: The &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *&lt;/span&gt;)(&lt;span class=&quot;hljs-params&quot;&gt;&amp;amp; f&lt;/span&gt;) has type &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *. It violates strict aliasing rules &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;\n              accessing a cell &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; effective type &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;.\n              Callstack: main\n...\n\nexample1.c:15:[sa] warning: The &lt;span class=&quot;hljs-title&quot;&gt;pointer&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;short&lt;/span&gt; *&lt;/span&gt;)p has type &lt;span class=&quot;hljs-built_in&quot;&gt;short&lt;/span&gt; *. It violates strict aliasing rules &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;\n              accessing a cell &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; effective type &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;.\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Finally there is &lt;a href=&quot;https://www.youtube.com/watch?v=vAXJeN7k32Y&quot; rel=&quot;nofollow noreferrer&quot;&gt;TySan&lt;/a&gt; which is currently in development. This sanitizer adds type checking information in a shadow memory segment and checks accesses to see if they violate aliasing rules. The tool potentially should be able to catch all aliasing violations but may have a large run-time overhead.&lt;/p&gt;\n    ","\n&lt;p&gt;This is the strict aliasing rule, found in section 3.10 of the &lt;strong&gt;C++03&lt;/strong&gt; standard (other answers provide good explanation, but none provided the rule itself):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If a program attempts to access the stored value of an object through an lvalue of other than one of the following types the behavior is undefined:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a cv-qualified version of the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;an aggregate or union type that includes one of the aforementioned types among its members (including, recursively, a member of a subaggregate or contained union),&lt;/li&gt;\n&lt;li&gt;a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;unsigned char&lt;/code&gt; type.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;C++11&lt;/strong&gt; and &lt;strong&gt;C++14&lt;/strong&gt; wording (changes emphasized):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If a program attempts to access the stored value of an object through a &lt;em&gt;glvalue&lt;/em&gt; of other than one of the following types the behavior is undefined:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a cv-qualified version of the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;a type similar (as defined in 4.4) to the dynamic type of the object,&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to a cv-qualified version of the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;an aggregate or union type that includes one of the aforementioned types among its &lt;em&gt;elements or non-static data members&lt;/em&gt; (including, recursively, an &lt;em&gt;element or non-static data member&lt;/em&gt; of a subaggregate or contained union),&lt;/li&gt;\n&lt;li&gt;a type that is a (possibly cv-qualified) base class type of the dynamic type of the object,&lt;/li&gt;\n&lt;li&gt;a &lt;code&gt;char&lt;/code&gt; or &lt;code&gt;unsigned char&lt;/code&gt; type.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Two changes were small: &lt;em&gt;glvalue&lt;/em&gt; instead of &lt;em&gt;lvalue&lt;/em&gt;, and clarification of the aggregate/union case.&lt;/p&gt;\n&lt;p&gt;The third change makes a stronger guarantee (relaxes the strong aliasing rule): The new concept of &lt;em&gt;similar types&lt;/em&gt; that are now safe to alias.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Also the &lt;strong&gt;C&lt;/strong&gt; wording (C99; ISO/IEC 9899:1999 6.5/7; the exact same wording is used in ISO/IEC 9899:2011 §6.5 ¶7):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An object shall have its stored value accessed only by an lvalue\nexpression that has one of the following types &lt;sup&gt; 73) or 88)&lt;/sup&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;a type compatible with the effective type of the object,&lt;/li&gt;\n&lt;li&gt;a qualied version of a type compatible with the effective type of\nthe object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to the\neffective type of the object,&lt;/li&gt;\n&lt;li&gt;a type that is the signed or unsigned type corresponding to a\nqualied version of the effective type of the object,&lt;/li&gt;\n&lt;li&gt;an aggregate or union type that includes one of the aforementioned\ntypes among its members (including, recursively, a member of a\nsubaggregate or contained union), or&lt;/li&gt;\n&lt;li&gt;a character type.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;sup&gt; 73) or 88)&lt;/sup&gt; The intent of this list is to specify those circumstances in which an object may or may not be aliased.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Strict aliasing doesn&apos;t refer only to pointers, it affects references as well, I wrote a paper about it for the boost developer wiki and it was so well received that I turned it into a page on my consulting web site.  It explains completely what it is, why it confuses people so much and what to do about it. &lt;a href=&quot;http://dbp-consulting.com/tutorials/StrictAliasing.html&quot;&gt;Strict Aliasing White Paper&lt;/a&gt;.  In particular it explains why unions are risky behavior for C++, and why using memcpy is the only fix portable across both C and C++.  Hope this is helpful.&lt;/p&gt;\n    ","\n&lt;p&gt;As addendum to what Doug T. already wrote, here\nis a simple test case which probably triggers it with gcc :&lt;/p&gt;\n\n&lt;p&gt;check.c&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; *h,&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; *k)&lt;/span&gt;\n&lt;/span&gt;{\n    *h=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n    *k=&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*h == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;strict aliasing problem\\n&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt;      k[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;check&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;short&lt;/span&gt; *)k,k);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compile with &lt;code&gt;gcc -O2 -o check check.c&lt;/code&gt; .\nUsually (with most gcc versions I tried) this outputs &quot;strict aliasing problem&quot;, because the compiler assumes that &quot;h&quot; cannot be the same address as &quot;k&quot; in the &quot;check&quot; function. Because of that the compiler optimizes the &lt;code&gt;if (*h == 5)&lt;/code&gt; away and always calls the printf.&lt;/p&gt;\n\n&lt;p&gt;For those who are interested here is the x64 assembler code, produced by gcc 4.6.3, running on ubuntu 12.04.2 for x64:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;movw    $5, (%rdi)\nmovq    $6, (%rsi)\nmovl    $.LC&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, %edi\njmp puts\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the if condition is completely gone from the assembler code.&lt;/p&gt;\n    ","\n&lt;p&gt;According to the C89 rationale, the authors of the Standard did not want to require that compilers given code like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;double&lt;/span&gt; *p&lt;/span&gt;)&lt;/span&gt;\n{\n  x=&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n  *p = &lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;should be required to reload the value of &lt;code&gt;x&lt;/code&gt; between the assignment and return statement so as to allow for the possibility that &lt;code&gt;p&lt;/code&gt; might point to &lt;code&gt;x&lt;/code&gt;, and the assignment to &lt;code&gt;*p&lt;/code&gt; might consequently alter the value of &lt;code&gt;x&lt;/code&gt;.  The notion that a compiler should be entitled to presume that there won&apos;t be aliasing &lt;em&gt;in situations like the above&lt;/em&gt; was non-controversial.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately, the authors of the C89 wrote their rule in a way that, if read literally, would make even the following function invoke Undefined Behavior:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; S {&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x;} s;\n  s.x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;because it uses an lvalue of type &lt;code&gt;int&lt;/code&gt; to access an object of type &lt;code&gt;struct S&lt;/code&gt;, and &lt;code&gt;int&lt;/code&gt; is not among the types that may be used accessing a &lt;code&gt;struct S&lt;/code&gt;.  Because it would be absurd to treat all use of non-character-type members of structs and unions as Undefined Behavior, almost everyone recognizes that there are at least some circumstances where an lvalue of one type may be used to access an object of another type.  Unfortunately, the C Standards Committee has failed to define what those circumstances are.&lt;/p&gt;\n\n&lt;p&gt;Much of the problem is a result of Defect Report #028, which asked about the behavior of a program like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ip, &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; *dp)&lt;/span&gt;\n&lt;/span&gt;{\n  *ip = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  *dp = &lt;span class=&quot;hljs-number&quot;&gt;1.23&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; *ip;\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;U&lt;/span&gt; { &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i; &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; d; } u;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;(&amp;amp;u.i, &amp;amp;u.d);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Defect Report #28 states that the program invokes Undefined Behavior because the action of writing a union member of type &quot;double&quot; and reading one of type &quot;int&quot; invokes Implementation-Defined behavior.  Such reasoning is nonsensical, but forms the basis for the Effective Type rules which needlessly complicate the language while doing nothing to address the original problem.&lt;/p&gt;\n\n&lt;p&gt;The best way to resolve the original problem would probably be to treat the\nfootnote about the purpose of the rule as though it were normative, and made\nthe rule unenforceable except in cases which actually involve conflicting accesses using aliases.  Given something like:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;inc_int&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p&lt;/span&gt;)&lt;/span&gt; { *p = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n {\n   &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; S { &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x; } s;\n   s.x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   p = &amp;amp;s.x;\n   inc_int(p);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.x;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There&apos;s no conflict within &lt;code&gt;inc_int&lt;/code&gt; because all accesses to the storage accessed through &lt;code&gt;*p&lt;/code&gt; are done with an lvalue of type &lt;code&gt;int&lt;/code&gt;, and there&apos;s no conflict in &lt;code&gt;test&lt;/code&gt; because &lt;code&gt;p&lt;/code&gt; is visibly derived from a &lt;code&gt;struct S&lt;/code&gt;, and by the next time &lt;code&gt;s&lt;/code&gt; is used, all accesses to that storage that will ever be made through &lt;code&gt;p&lt;/code&gt; will have already happened.&lt;/p&gt;\n\n&lt;p&gt;If the code were changed slightly...&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;inc_int&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p&lt;/span&gt;)&lt;/span&gt; { *p = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; }\n &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n {\n   &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *p;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; S { &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; x; } s;\n   p = &amp;amp;s.x;\n   s.x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;//  !!*!!&lt;/span&gt;\n   *p += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.x;\n }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, there is an aliasing conflict between &lt;code&gt;p&lt;/code&gt; and the access to &lt;code&gt;s.x&lt;/code&gt; on the marked line because at that point in execution another reference exists &lt;em&gt;that will be used to access the same storage&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Had Defect Report 028 said the original example invoked UB because of the overlap between the creation and use of the two pointers, that would have made things a lot more clear without having to add &quot;Effective Types&quot; or other such complexity.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Type_punning&quot; rel=&quot;noreferrer&quot;&gt;Type punning&lt;/a&gt; via pointer casts (as opposed to using a union) is a major example of breaking strict aliasing.&lt;/p&gt;\n    ","\n&lt;p&gt;After reading many of the answers, I feel the need to add something:&lt;/p&gt;\n\n&lt;p&gt;Strict aliasing (which I&apos;ll describe in a bit) &lt;strong&gt;is important because&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Memory access can be expensive (performance wise), which is why &lt;strong&gt;data is manipulated in CPU registers&lt;/strong&gt; before being written back to the physical memory.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If data in two different CPU registers will be written to the same memory space, &lt;strong&gt;we can&apos;t predict which data will &quot;survive&quot;&lt;/strong&gt; when we code in C.&lt;/p&gt;\n\n&lt;p&gt;In assembly, where we code the loading and unloading of CPU registers manually, we will know which data remains intact. But C (thankfully) abstracts this detail away.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Since two pointers can point to the same location in the memory, this could result in &lt;strong&gt;complex code that handles possible collisions&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;This extra code is slow and &lt;strong&gt;hurts performance&lt;/strong&gt; since it performs extra memory read / write operations which are both slower and (possibly) unnecessary.&lt;/p&gt;\n\n&lt;p&gt;The &lt;strong&gt;Strict aliasing rule allows us to avoid redundant machine code&lt;/strong&gt; in cases in which it &lt;em&gt;should be&lt;/em&gt; safe to assume that two pointers don&apos;t point to the same memory block (see also the &lt;code&gt;restrict&lt;/code&gt; keyword).&lt;/p&gt;\n\n&lt;p&gt;The Strict aliasing states it&apos;s safe to assume that pointers to different types point to different locations in the memory.&lt;/p&gt;\n\n&lt;p&gt;If a compiler notices that two pointers point to different types (for example, an &lt;code&gt;int *&lt;/code&gt; and a &lt;code&gt;float *&lt;/code&gt;), it will assume the memory address is different and it &lt;strong&gt;will not&lt;/strong&gt; protect against memory address collisions, resulting in faster machine code.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Lets assume the following function:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;merge_two_ints&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *a, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *b&lt;/span&gt;)&lt;/span&gt; {\n  *b += *a;\n  *a += *b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In order to handle the case in which &lt;code&gt;a == b&lt;/code&gt; (both pointers point to the same memory), we need to order and test the way we load data from the memory to the CPU registers, so the code might end up like this:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;load &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; from memory.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;add &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;save&lt;/strong&gt; &lt;code&gt;b&lt;/code&gt; and &lt;strong&gt;reload&lt;/strong&gt; &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;(save from CPU register to the memory and load from the memory to the CPU register). &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;add &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;save &lt;code&gt;a&lt;/code&gt; (from the CPU register) to the memory.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Step 3 is very slow because it needs to access the physical memory. However, it&apos;s required to protect against instances where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; point to the same memory address.&lt;/p&gt;\n\n&lt;p&gt;Strict aliasing would allow us to prevent this by telling the compiler that these memory addresses are distinctly different (which, in this case, will allow even further optimization which can&apos;t be performed if the pointers share a memory address).&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;This can be told to the compiler in two ways, by using different types to point to. i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;merge_two_numbers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *a, &lt;span class=&quot;hljs-built_in&quot;&gt;long&lt;/span&gt; *b&lt;/span&gt;)&lt;/span&gt; {...}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using the &lt;code&gt;restrict&lt;/code&gt; keyword. i.e.:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;merge_two_ints&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * restrict a, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; * restrict b&lt;/span&gt;)&lt;/span&gt; {...}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now, by satisfying the Strict Aliasing rule, step 3 can be avoided and the code will run significantly faster.&lt;/p&gt;\n\n&lt;p&gt;In fact, by adding the &lt;code&gt;restrict&lt;/code&gt; keyword, the whole function could be optimized to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;load &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; from memory.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;add &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;save result both to &lt;code&gt;a&lt;/code&gt; and to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This optimization couldn&apos;t have been done before, because of the possible collision (where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; would be tripled instead of doubled).&lt;/p&gt;\n    ","\n&lt;p&gt;Strict aliasing is not allowing different pointer types to the same data.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html&quot; rel=&quot;noreferrer&quot;&gt;This article&lt;/a&gt; should help you understand the issue in full detail.&lt;/p&gt;\n    ","\n&lt;p&gt;Technically in C++, the strict aliasing rule is probably never applicable.&lt;/p&gt;\n\n&lt;p&gt;Note the definition of indirection (&lt;a href=&quot;http://eel.is/c++draft/expr.unary.op#def:indirection&quot; rel=&quot;nofollow noreferrer&quot;&gt;* operator&lt;/a&gt;):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The unary * operator performs indirection: the expression to which it\n  is applied shall be a pointer to an object type, or a pointer to a\n  function type and &lt;strong&gt;the result is an lvalue referring to the object&lt;/strong&gt; or\n  function &lt;strong&gt;to which the expression points&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Also from &lt;a href=&quot;http://eel.is/c++draft/basic.lval#1.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;the definition of glvalue&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A glvalue is an expression whose evaluation determines the identity of\n  an object, (...snip)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So in any well defined program trace, a glvalue refers to an object. &lt;strong&gt;So the so called strict aliasing rule doesn&apos;t apply, ever.&lt;/strong&gt; This may not be what the designers wanted.&lt;/p&gt;\n    "]},"page":"95","randomQuestions":[{"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"Why does this PDO statement silently fail?","slug":"why-does-this-pdo-statement-silently-fail-1657384892133"},{"title":"How do I write a correct micro-benchmark in Java?","slug":"how-do-i-write-a-correct-micro-benchmark-in-java-1657384488725"},{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"Convert one date format into another in PHP","slug":"convert-one-date-format-into-another-in-php-1657384566234"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":"How to create a generic array in Java?","slug":"how-to-create-a-generic-array-in-java-1657387532298"},{"title":"How do I pass a variable by reference?","slug":"how-do-i-pass-a-variable-by-reference-1657384657232"},{"title":"How do I add a delay in a JavaScript loop?","slug":"how-do-i-add-a-delay-in-a-javascript-loop-1657388544679"},{"title":"Fetch the rows which have the Max value for a column for each distinct value of another column","slug":"fetch-the-rows-which-have-the-max-value-for-a-column-for-each-distinct-value-of-another-column-1657387423925"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"Why shouldn't I use mysql_* functions in PHP?","slug":"why-shouldn't-i-use-mysql_*-functions-in-php-1657384260352"},{"title":"How do I use reflection to call a generic method?","slug":"how-do-i-use-reflection-to-call-a-generic-method-1657387256751"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"\"Cross origin requests are only supported for HTTP.\" error when loading a local file","slug":"\"cross-origin-requests-are-only-supported-for-http.\"-error-when-loading-a-local-file-1657387942403"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"Can PHP PDO Statements accept the table or column name as parameter?","slug":"can-php-pdo-statements-accept-the-table-or-column-name-as-parameter-1657387478588"}]},"__N_SSG":true}