{"pageProps":{"data":{"count":610,"rows":[{"id":350,"title":"How do I revert a Git repository to a previous commit?","slug":"how-do-i-revert-a-git-repository-to-a-previous-commit-1657387714717","postType":"QUESTION","createdAt":"2022-07-09T17:28:34.000Z","updatedAt":"2022-07-09T17:28:34.000Z","tags":[{"id":1968,"name":"git-checkout","slug":"git-checkout","createdAt":"2022-07-09T17:28:34.000Z","updatedAt":"2022-07-09T17:28:34.000Z","Questions_Tags":{"questionId":350,"tagId":1968}},{"id":1969,"name":"git-reset","slug":"git-reset","createdAt":"2022-07-09T17:28:34.000Z","updatedAt":"2022-07-09T17:28:34.000Z","Questions_Tags":{"questionId":350,"tagId":1969}},{"id":1970,"name":"git-revert","slug":"git-revert","createdAt":"2022-07-09T17:28:34.000Z","updatedAt":"2022-07-09T17:28:34.000Z","Questions_Tags":{"questionId":350,"tagId":1970}}]},{"id":349,"title":"Why does my ArrayList contain N copies of the last item added to the list?","slug":"why-does-my-arraylist-contain-n-copies-of-the-last-item-added-to-the-list-1657387712003","postType":"QUESTION","createdAt":"2022-07-09T17:28:32.000Z","updatedAt":"2022-07-09T17:28:32.000Z","tags":[]},{"id":348,"title":"Get the cartesian product of a series of lists?","slug":"get-the-cartesian-product-of-a-series-of-lists-1657387709890","postType":"QUESTION","createdAt":"2022-07-09T17:28:29.000Z","updatedAt":"2022-07-09T17:28:29.000Z","tags":[{"id":1965,"name":"cartesian-product","slug":"cartesian-product","createdAt":"2022-07-09T17:28:30.000Z","updatedAt":"2022-07-09T17:28:30.000Z","Questions_Tags":{"questionId":348,"tagId":1965}}]},{"id":347,"title":"Why can't an element with a z-index value cover its child?","slug":"why-can't-an-element-with-a-z-index-value-cover-its-child-1657387707187","postType":"QUESTION","createdAt":"2022-07-09T17:28:27.000Z","updatedAt":"2022-07-09T17:28:27.000Z","tags":[{"id":1960,"name":"css-position","slug":"css-position","createdAt":"2022-07-09T17:28:27.000Z","updatedAt":"2022-07-09T17:28:27.000Z","Questions_Tags":{"questionId":347,"tagId":1960}},{"id":1962,"name":"z-index","slug":"z-index","createdAt":"2022-07-09T17:28:27.000Z","updatedAt":"2022-07-09T17:28:27.000Z","Questions_Tags":{"questionId":347,"tagId":1962}}]},{"id":346,"title":"How do I access previous promise results in a .then() chain?","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386","postType":"QUESTION","createdAt":"2022-07-09T17:28:25.000Z","updatedAt":"2022-07-09T17:28:25.000Z","tags":[]}]},"answers":{"346":["\n&lt;h1&gt;Break the chain&lt;/h1&gt;\n\n&lt;p&gt;When you need to access the intermediate values in your chain, you should split your chain apart in those single pieces that you need. Instead of attaching one callback and somehow trying to use its parameter multiple times, attach multiple callbacks to the same promise - wherever you need the result value. Don&apos;t forget, a &lt;a href=&quot;https://stackoverflow.com/a/22540276/1048572&quot;&gt;promise just represents (proxies) a future value&lt;/a&gt;! Next to deriving one promise from the other in a linear chain, use the promise combinators that are given to you by your library to build the result value.&lt;/p&gt;\n\n&lt;p&gt;This will result in a very straightforward control flow, clear composition of functionalities and therefore easy modularisation.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([a, b]).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[resultA, resultB]&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of the parameter destructuring in the callback after &lt;code&gt;Promise.all&lt;/code&gt; that only became availÂ­able with ES6, in ES5 the &lt;code&gt;then&lt;/code&gt; call would be replaced by a nifty helper method that was provided by many promise libraries (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot; rel=&quot;noreferrer&quot;&gt;when&lt;/a&gt;, ): &lt;code&gt;.spread(function(resultA, resultB) { &lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Bluebird also features a dedicated &lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.join.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;join&lt;/code&gt; function&lt;/a&gt; to replace that &lt;code&gt;Promise.all&lt;/code&gt;+&lt;code&gt;spread&lt;/code&gt; combination with a simpler (and more efficient) construct:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(a, b, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA, resultB&lt;/span&gt;) {  });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;ECMAScript Harmony&lt;/h1&gt;\n&lt;p&gt;Of course, this problem was recognized by the language designers as well. They did a lot of work and the &lt;a href=&quot;http://tc39.github.io/ecmascript-asyncawait/&quot; rel=&quot;noreferrer&quot;&gt;async functions proposal&lt;/a&gt; finally made it into&lt;/p&gt;\n&lt;h2&gt;ECMAScript 8&lt;/h2&gt;\n&lt;p&gt;You don&apos;t need a single &lt;code&gt;then&lt;/code&gt; invocation or callback function anymore, as in an asynchronous function (that returns a promise when being called) you can simply wait for promises to resolve directly. It also features arbitrary control structures like conditions, loops and try-catch-clauses, but for the sake of convenience we don&apos;t need them here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultA = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultB = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;ECMAScript 6&lt;/h2&gt;\n&lt;p&gt;While we were waiting for ES8, we already did use a very similar kind of syntax. ES6 came with &lt;a href=&quot;http://davidwalsh.name/es6-generators&quot; rel=&quot;noreferrer&quot;&gt;generator functions&lt;/a&gt;, which allow breaking the execution apart in pieces at arbitrarily placed &lt;code&gt;yield&lt;/code&gt; keywords. Those slices can be run after each other, independently, even asynchronously - and that&apos;s just what we do when we want to wait for a promise resolution before running the next step.&lt;/p&gt;\n&lt;p&gt;There are dedicated libraries (like &lt;a href=&quot;https://github.com/tj/co&quot; rel=&quot;noreferrer&quot;&gt;co&lt;/a&gt; or &lt;a href=&quot;http://taskjs.org/&quot; rel=&quot;noreferrer&quot;&gt;task.js&lt;/a&gt;), but also many promise libraries have helper functions (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#generators&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/generators.html&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#es6-generators&quot; rel=&quot;noreferrer&quot;&gt;when&lt;/a&gt;, ) that do &lt;a href=&quot;https://stackoverflow.com/a/23554399/1048572&quot;&gt;this async step-by-step execution&lt;/a&gt; for you when you give them a generator function that yields promises.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getExample = &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;coroutine&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;* () {\n&lt;span class=&quot;hljs-comment&quot;&gt;//               ^^^^^^^^^^^^^^^^^ Bluebird syntax&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultA = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultB = &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This did work in Node.js since version 4.0, also a few browsers (or their dev editions) did support generator syntax relatively early.&lt;/p&gt;\n&lt;h2&gt;ECMAScript 5&lt;/h2&gt;\n&lt;p&gt;However, if you want/need to be backward-compatible you cannot use those without a transpiler. Both generator functions and async functions are supported by the current tooling, see for example the documentation of Babel on &lt;a href=&quot;http://babeljs.io/learn-es2015/#ecmascript-2015-features-generators&quot; rel=&quot;noreferrer&quot;&gt;generators&lt;/a&gt; and &lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-async-functions&quot; rel=&quot;noreferrer&quot;&gt;async functions&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;And then, there are also many other &lt;a href=&quot;https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS#synchronous-to-asynchronous-javascript-compilers-cps&quot; rel=&quot;noreferrer&quot;&gt;compile-to-JS languages&lt;/a&gt;\nthat are dedicated to easing asynchronous programming. They usually use a syntax similar to &lt;code&gt;await&lt;/code&gt;, (e.g. &lt;a href=&quot;http://maxtaco.github.io/coffee-script/&quot; rel=&quot;noreferrer&quot;&gt;Iced CoffeeScript&lt;/a&gt;), but there are also others that feature a Haskell-like &lt;code&gt;do&lt;/code&gt;-notation (e.g. &lt;a href=&quot;http://lattejs.com/&quot; rel=&quot;noreferrer&quot;&gt;LatteJs&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/monadic&quot; rel=&quot;noreferrer&quot;&gt;monadic&lt;/a&gt;, &lt;a href=&quot;http://www.purescript.org/&quot; rel=&quot;noreferrer&quot;&gt;PureScript&lt;/a&gt; or &lt;a href=&quot;http://lispyscript.com/&quot; rel=&quot;noreferrer&quot;&gt;LispyScript&lt;/a&gt;).&lt;/p&gt;\n    ","\n&lt;h1&gt;Synchronous inspection&lt;/h1&gt;\n\n&lt;p&gt;Assigning promises-for-later-needed-values to variables and then getting their value via synchronous inspection. The example uses bluebird&apos;s &lt;code&gt;.value()&lt;/code&gt; method but many libraries provide similar method.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// a is guaranteed to be fulfilled here so we can just retrieve its&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// value synchronously&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; aValue = a.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;();\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This can be used for as many values as you like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = a.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;()\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = b.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseC&lt;/span&gt;();\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = c.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseD&lt;/span&gt;();\n    });\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; d.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;() + b.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;() + c.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;() + d.&lt;span class=&quot;hljs-title function_&quot;&gt;value&lt;/span&gt;();\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Nesting (and) closures&lt;/h1&gt;\n\n&lt;p&gt;Using closures for maintaining the scope of variables (in our case, the success callback function parameters) is the natural JavaScript solution. With promises, we can arbitrarily &lt;a href=&quot;https://stackoverflow.com/a/22000931/1048572&quot;&gt;nest and flatten&lt;/a&gt; &lt;code&gt;.then()&lt;/code&gt; callbacks - they are semantically equivalent, except for the scope of the inner one.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB;&lt;/span&gt;\n        });\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, this is building an indentation pyramid. If indentation is getting too large, you still can apply the old tools to counter the &lt;a href=&quot;http://callbackhell.com/&quot; rel=&quot;noreferrer&quot;&gt;pyramid of doom&lt;/a&gt;: modularize, use extra named functions, and flatten the promise chain as soon as you don&apos;t need a variable any more.&lt;br&gt;\nIn theory, you can always avoid more than two levels of nesting (by making all closures explicit), in practise use as many as are reasonable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preprocessing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;makeAhandler&lt;/span&gt;());\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeAhandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;makeBhandler&lt;/span&gt;(resultA, ));\n    };\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeBhandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA, &lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// anything that uses the variables in scope&lt;/span&gt;\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also use helper functions for this kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot; rel=&quot;noreferrer&quot;&gt;partial application&lt;/a&gt;, like &lt;code&gt;_.partial&lt;/code&gt; from &lt;a href=&quot;http://underscorejs.org/#partial&quot; rel=&quot;noreferrer&quot;&gt;Underscore&lt;/a&gt;/&lt;a href=&quot;https://lodash.com/docs#partial&quot; rel=&quot;noreferrer&quot;&gt;lodash&lt;/a&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot; rel=&quot;noreferrer&quot;&gt;native &lt;code&gt;.bind()&lt;/code&gt; method&lt;/a&gt;, to further decrease indentation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// preprocessing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(handlerA);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handlerA&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(handlerB.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, resultA));\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handlerB&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA, resultB&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// anything that uses resultA and resultB&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Explicit pass-through&lt;/h1&gt;\n\n&lt;p&gt;Similar to nesting the callbacks, this technique relies on closures. Yet, the chain stays flat - instead of passing only the latest result, some state object is passed for every step. These state objects accumulate the results of the previous actions, handing down all values that will be needed later again plus the result of the current task.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;b&lt;/span&gt; =&amp;gt;&lt;/span&gt; [resultA, b]); &lt;span class=&quot;hljs-comment&quot;&gt;// function(b) { return [resultA, b] }&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[resultA, resultB]&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here, that little arrow &lt;code&gt;b =&amp;gt; [resultA, b]&lt;/code&gt; is the function that closes over &lt;code&gt;resultA&lt;/code&gt;, and passes an array of both results to the next step. Which uses parameter destructuring syntax to break it up in single variables again.&lt;/p&gt;\n\n&lt;p&gt;Before destructuring became available with ES6, a nifty helper method called &lt;code&gt;.spread()&lt;/code&gt; was proÂ­viÂ­ded by many promise libraries (&lt;a href=&quot;https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected&quot; rel=&quot;noreferrer&quot;&gt;Q&lt;/a&gt;, &lt;a href=&quot;http://bluebirdjs.com/docs/api/spread.html&quot; rel=&quot;noreferrer&quot;&gt;Bluebird&lt;/a&gt;, &lt;a href=&quot;https://github.com/cujojs/when/blob/master/docs/api.md#promisespread&quot; rel=&quot;noreferrer&quot;&gt;when&lt;/a&gt;, ). It takes a function with multiple parameters - one for each array element - to be used as &lt;code&gt;.spread(function(resultA, resultB) { &lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Of course, that closure needed here can be further simplified by some helper functions, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addTo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// imagine complex `arguments` fiddling or anything that helps usability&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// but you get the idea with this simple one:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; [x, res];\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;addTo&lt;/span&gt;(resultA));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, you can employ &lt;code&gt;Promise.all&lt;/code&gt; to produce the promise for the array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;all&lt;/span&gt;([resultA, &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;()]); &lt;span class=&quot;hljs-comment&quot;&gt;// resultA will implicitly be wrapped&lt;/span&gt;\n                                                    &lt;span class=&quot;hljs-comment&quot;&gt;// as if passed to Promise.resolve()&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;[resultA, resultB]&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And you might not only use arrays, but arbitrarily complex objects. For example, with &lt;a href=&quot;http://underscorejs.org/#extend&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;_.extend&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; in a different helper function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;augment&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, name&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;assign&lt;/span&gt;({}, obj); r[name] = res; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r; };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;augment&lt;/span&gt;({resultA}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;resultB&quot;&lt;/span&gt;));\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both obj.resultA and obj.resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this pattern guarantees a flat chain and explicit state objects can improve clarity, it will become tedious for a long chain. Especially when you need the state only sporadically, you still have to pass it through every step. With this fixed interface, the single callbacks in the chain are rather tightly coupled and inflexible to change. It makes factoring out single steps harder, and callbacks cannot be supplied directly from other modules - they always need to be wrapped in boilerplate code that cares about the state. Abstract helper functions like the above can ease the pain a bit, but it will always be present.&lt;/p&gt;\n    ","\n&lt;h1&gt;Mutable contextual state&lt;/h1&gt;\n\n&lt;p&gt;The trivial (but inelegant and rather errorprone) solution is to just use higher-scope variables (to which all callbacks in the chain have access) and write result values to them when you get them:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resultA;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;_resultA&lt;/span&gt;) {\n        resultA = _resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both resultA and resultB&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of many variables one might also use an (initially empty) object, on which the results are stored as dynamically created properties.&lt;/p&gt;\n\n&lt;p&gt;This solution has several drawbacks:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/844536/1048572&quot;&gt;Mutable state is ugly&lt;/a&gt;, and &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil&quot;&gt;global variables are evil&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;This pattern doesn&apos;t work across function boundaries, modularising the functions is harder as their declarations must not leave the shared scope&lt;/li&gt;\n&lt;li&gt;The scope of the variables does not prevent to access them before they are initialized. This is especially likely for complex promise constructions (loops, branching, excptions) where race conditions might happen. Passing state explicitly, a &lt;a href=&quot;http://en.wikipedia.org/wiki/Declarative_programming&quot; rel=&quot;noreferrer&quot;&gt;declarative design&lt;/a&gt; that promises encourage, forces a cleaner coding style which can prevent this.&lt;/li&gt;\n&lt;li&gt;One must choose the scope for those shared variables correctly. It needs to be local to the executed function to prevent race conditions between multiple parallel invocations, as would be the case if, for example, state was stored on an instance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The Bluebird library encourages the use of an object that is passed along, using &lt;a href=&quot;http://bluebirdjs.com/docs/api/bind.html&quot; rel=&quot;noreferrer&quot;&gt;their &lt;code&gt;bind()&lt;/code&gt; method&lt;/a&gt; to assign a context object to a promise chain. It will be accessible from each callback function via the otherwise unusable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt; keyword&lt;/a&gt;. While object properties are more prone to undetected typos than variables, the pattern is quite clever:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;({}) &lt;span class=&quot;hljs-comment&quot;&gt;// Bluebird only!&lt;/span&gt;\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resultA&lt;/span&gt; = resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both this.resultA and resultB&lt;/span&gt;\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// don&apos;t forget to unbind the object if you don&apos;t want the&lt;/span&gt;\n               &lt;span class=&quot;hljs-comment&quot;&gt;// caller to access it&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach can be easily simulated in promise libraries that do not support .bind (although in a somewhat more verbose way and cannot be used in an expression):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ctx = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resultA&lt;/span&gt; = resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(ctx)).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// more processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// something using both this.resultA and resultB&lt;/span&gt;\n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(ctx));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;A less harsh spin on &quot;Mutable contextual state&quot;&lt;/h1&gt;\n&lt;p&gt;Using a locally scoped object to collect the intermediate results in a promise chain is a reasonable approach to the question you posed. Consider the following snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//locally scoped&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; results = {};\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;(paramsA).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;){\n        results.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = resultA;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;(paramsB);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;){\n        results.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; = resultB;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseC&lt;/span&gt;(paramsC);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultC&lt;/span&gt;){\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Resolve with composite of all promises&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;(results.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; + results.&lt;span class=&quot;hljs-property&quot;&gt;b&lt;/span&gt; + resultC);\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;reject&lt;/span&gt;(error);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Global variables are bad, so this solution uses a locally scoped variable which causes no harm.  It is only accessible within the function.&lt;/li&gt;\n&lt;li&gt;Mutable state is ugly, but this does not mutate state in an ugly manner.  The ugly mutable state traditionally refers to modifying the state of function arguments or global variables, but this approach simply modifies the state of a locally scoped variable that exists for the sole purpose of aggregating promise results...a variable that will die a simple death once the promise resolves.&lt;/li&gt;\n&lt;li&gt;Intermediate promises are not prevented from accessing the state of the results object, but this does not introduce some scary scenario where one of the promises in the chain will go rogue and sabotage your results.  The responsibility of setting the values in each step of the promise is confined to this function and the overall result will either be correct or incorrect...it will not be some bug that will crop up years later in production (unless you intend it to!)&lt;/li&gt;\n&lt;li&gt;This does not introduce a race condition scenario that would arise from parallel invocation because a new instance of the results variable is created for every invocation of the getExample function.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Example is available on &lt;a href=&quot;https://jsfiddle.net/w50zqgyr/2/&quot; rel=&quot;nofollow noreferrer&quot;&gt;jsfiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Node 7.4 now supports async/await calls with the harmony flag.&lt;/p&gt;\n\n&lt;p&gt;Try this: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response2 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise2&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response, response2)\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and run the file with:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;node --harmony-async-await getExample.js&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Simple as can be!&lt;/p&gt;\n    ","\n&lt;p&gt;Another answer, using &lt;code&gt;babel-node&lt;/code&gt; version &amp;lt;6 &lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;async - await&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;npm install -g babel@5.6.14&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;example.js:&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; response2 = &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise2&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response, response2)\n\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, run &lt;code&gt;babel-node example.js&lt;/code&gt; and voila!&lt;/p&gt;\n    ","\n&lt;p&gt;This days, I also hava meet some questions like you. At last, I find a good solution with the quesition, it&apos;s simple and good to read. I hope this can help you.&lt;/p&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;https://html5hive.org/how-to-chain-javascript-promises/&quot; rel=&quot;nofollow noreferrer&quot;&gt;how-to-chain-javascript-promises&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ok, let&apos;s look at the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;firstPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first promise is completed&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;});\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n    });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;secondPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;someStuff&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;second promise is completed&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;newData&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${someStuff.data}&lt;/span&gt; some more data`&lt;/span&gt;});\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n    });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;thirdPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;someStuff&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;third promise is completed&apos;&lt;/span&gt;);\n            &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;result&lt;/span&gt;: someStuff});\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n    });\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;firstPromise&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(secondPromise)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(thirdPromise)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data);\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am not going to use this pattern in my own code since I&apos;m not a big fan of using global variables. However, in a pinch it will work.&lt;/p&gt;\n\n&lt;p&gt;User is a promisified Mongoose model.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; globalVar = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;User&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;findAsync&lt;/span&gt;({}).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;users&lt;/span&gt;){\n  globalVar = users;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(globalVar);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another answer, using sequential executor &lt;a href=&quot;https://github.com/amaksr/nsynjs&quot; rel=&quot;nofollow noreferrer&quot;&gt;nsynjs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response1 = &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise1&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// promise1 is resolved at this point, &apos;.data&apos; has the result from resolve(result)&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; response2 = &lt;span class=&quot;hljs-title function_&quot;&gt;returnPromise2&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// promise2 is resolved at this point, &apos;.data&apos; has the result from resolve(result)&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(response, response2);\n\n}\n\nnynjs.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(getExample,{},&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;all done&apos;&lt;/span&gt;);\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Update: added working example&lt;/h2&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;synchronousCode&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; urls=[\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js&quot;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js&quot;&lt;/span&gt;,\n         &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;&lt;/span&gt;\n     ];\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;urls.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n         &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; len=&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(urls[i]).&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             ^                   ^&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             |                   +- 2-nd promise result&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             |                      assigned to &apos;data&apos;&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             |&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//             +-- 1-st promise result assigned to &apos;data&apos;&lt;/span&gt;\n         &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n         &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;URL #&apos;&lt;/span&gt;+i+&lt;span class=&quot;hljs-string&quot;&gt;&apos; : &apos;&lt;/span&gt;+urls[i]+&lt;span class=&quot;hljs-string&quot;&gt;&quot;, length: &quot;&lt;/span&gt;+len);\n     }\n}\n\nnsynjs.&lt;span class=&quot;hljs-title function_&quot;&gt;run&lt;/span&gt;(synchronousCode,{},&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;all done&apos;&lt;/span&gt;);\n})&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://rawgit.com/amaksr/nsynjs/master/nsynjs.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When using bluebird, you can use &lt;code&gt;.bind&lt;/code&gt; method to share variables in promise chain:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;somethingAsync&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;({})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;spread&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;aValue, bValue&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;aValue&lt;/span&gt; = aValue;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bValue&lt;/span&gt; = bValue;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;somethingElseAsync&lt;/span&gt;(aValue, bValue);\n})\n.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;cValue&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;aValue&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;bValue&lt;/span&gt; + cValue;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;please check this link for further information:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://bluebirdjs.com/docs/api/promise.bind.html&quot; rel=&quot;nofollow&quot;&gt;http://bluebirdjs.com/docs/api/promise.bind.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getExample&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; retA, retB;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseA&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultA&lt;/span&gt;) {\n        retA = resultA;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Some processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;promiseB&lt;/span&gt;();\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resultB&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// More processing&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//retA is value of promiseA&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// How do I gain access to resultA here?&lt;/span&gt;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;easy way :D&lt;/p&gt;\n    ","\n&lt;p&gt;I think you can use hash of RSVP.&lt;/p&gt;\n\n&lt;p&gt;Something like as below :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mainPromise&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promise1 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first promise is completed&apos;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;123&apos;&lt;/span&gt;});\n            }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        });\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; promise2 = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n                &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;second promise is completed&apos;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-title function_&quot;&gt;resolve&lt;/span&gt;({&lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;456&apos;&lt;/span&gt;});\n            }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n        });\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;RSVP&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;hash&lt;/span&gt;({\n              &lt;span class=&quot;hljs-attr&quot;&gt;prom1&lt;/span&gt;: promise1,\n              &lt;span class=&quot;hljs-attr&quot;&gt;prom2&lt;/span&gt;: promise2\n          });\n\n    };\n\n\n   &lt;span class=&quot;hljs-title function_&quot;&gt;mainPromise&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;prom1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;prom2&lt;/span&gt;);\n    });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Solution:&lt;/p&gt;\n\n&lt;p&gt;You can put intermediate values in scope in any later &apos;then&apos; function explicitly, by using &apos;bind&apos;. It is a nice solution that doesn&apos;t require changing how Promises work, and only requires a line or two of code to propagate the values just like errors are already propagated.&lt;/p&gt;\n\n&lt;p&gt;Here is a complete example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get info asynchronously from a server&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pGetServerInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// then value: &quot;server info&quot;&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// pGetServerInfo&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Write into a file asynchronously&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pWriteFile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path,string&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// no then value&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// pWriteFile&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// The heart of the solution: Write formatted info into a log file asynchronously,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// using the pGetServerInfo and pWriteFile operations&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pLogInfo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;localInfo&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scope={&lt;span class=&quot;hljs-attr&quot;&gt;localInfo&lt;/span&gt;:localInfo}; &lt;span class=&quot;hljs-comment&quot;&gt;// Create an explicit scope object&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; thenFunc=p2.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(scope); &lt;span class=&quot;hljs-comment&quot;&gt;// Create a temporary function with this scope&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;pGetServerInfo&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(thenFunc)); &lt;span class=&quot;hljs-comment&quot;&gt;// Do the next &apos;then&apos; in the chain&lt;/span&gt;\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// pLogInfo&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Scope of this &apos;then&apos; function is {localInfo:localInfo}&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;p2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;serverInfo&lt;/span&gt;)\n    {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do the final &apos;then&apos; in the chain: Writes &quot;local info, server info&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pWriteFile&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;log&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;localInfo&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;+serverInfo);\n    } &lt;span class=&quot;hljs-comment&quot;&gt;// p2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution can be invoked as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;pLogInfo&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;local info&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(err);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Note: a more complex and complete version of this solution has been tested, but not this example version, so it could have a bug.)&lt;/p&gt;\n    ","\n&lt;p&gt;What I learn about promises is to use it only as return values &lt;strong&gt;avoid referencing them&lt;/strong&gt; if possible. async/await syntax is particularly practical for that. Today all latest browsers and node support it: &lt;a href=&quot;https://caniuse.com/#feat=async-functions&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://caniuse.com/#feat=async-functions&lt;/a&gt; , is a simple behavior and the code is like reading synchronous code, forget about callbacks...&lt;/p&gt;\n\n&lt;p&gt;In cases I do need to reference a promises is when creation and resolution happen at independent/not-related places. So instead an artificial association and probably an event listener just to resolve the &quot;distant&quot; promise, I prefer to expose the promise as a Deferred, which the following code implements it in valid es5&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Promise like object that allows to resolve it promise from outside code. Example:\n *\n```\nclass Api {\n  fooReady = new Deferred&amp;lt;Data&amp;gt;()\n  private knower() {\n    inOtherMoment(data=&amp;gt;{\n      this.fooReady.resolve(data)\n    })\n  }\n}\n```\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt; = &lt;span class=&quot;hljs-comment&quot;&gt;/** &lt;span class=&quot;hljs-doctag&quot;&gt;@class&lt;/span&gt; */&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Deferred&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;callback&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;pending&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve, reject&lt;/span&gt;) {\n      instance.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;resolved&apos;&lt;/span&gt;; resolve.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); };\n      instance.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;rejected&apos;&lt;/span&gt;; reject.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); };\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; callback === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt;) {\n      callback.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;resolve&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reject&lt;/span&gt;);\n    }\n  }\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;then&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;resolve&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(resolve);\n  };\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;catch&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;r&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;promise&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(r);\n  };\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Deferred&lt;/span&gt;;\n}());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;transpiled form a typescript project of mine:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/cancerberoSgx/misc-utils-of-mine/blob/2927c2477839f7b36247d054e7e50abe8a41358b/misc-utils-of-mine-generic/src/promise.ts#L31&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/cancerberoSgx/misc-utils-of-mine/blob/2927c2477839f7b36247d054e7e50abe8a41358b/misc-utils-of-mine-generic/src/promise.ts#L31&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For more complex cases I often use these guy small promise utilities without dependencies tested and typed. p-map has been useful several times. I think he covered most use cases:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus?utf8=%E2%9C%93&amp;amp;tab=repositories&amp;amp;q=promise&amp;amp;type=source&amp;amp;language=&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/sindresorhus?utf8=%E2%9C%93&amp;amp;tab=repositories&amp;amp;q=promise&amp;amp;type=source&amp;amp;language=&lt;/a&gt;&lt;/p&gt;\n    "],"347":["\n&lt;p&gt;There are two important things you need to know: the painting order and the stacking context. If you refer to &lt;a href=&quot;https://www.w3.org/TR/CSS2/zindex.html&quot; rel=&quot;noreferrer&quot;&gt;the specification&lt;/a&gt;, you can find how and when elements are painted.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Stacking contexts&lt;/strong&gt; formed by positioned descendants &lt;strong&gt;with negative z-indices&lt;/strong&gt; (excluding 0) in z-index order (most negative first) then tree order.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;ol start=&quot;8&quot;&gt;\n&lt;li&gt;All positioned, opacity or transform descendants, in tree order that fall into the following categories:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;All positioned descendants with &apos;z-index: auto&apos; or &apos;z-index: 0&apos;, in tree order.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;ol start=&quot;9&quot;&gt;\n&lt;li&gt;&lt;strong&gt;Stacking contexts&lt;/strong&gt; formed by positioned descendants with &lt;strong&gt;z-indices greater than or equal to 1&lt;/strong&gt; in z-index order (smallest first) then tree order.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;It&apos;s clear from this that we first paint elements with negative &lt;code&gt;z-index&lt;/code&gt; at step (3), then the one with &lt;code&gt;z-index&lt;/code&gt; equal to 0 at step (8), and finally the ones with positive &lt;code&gt;z-index&lt;/code&gt; at step (9), which is logical. We can also read in another part of &lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html#z-index&quot; rel=&quot;noreferrer&quot;&gt;the specification&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Each box belongs to &lt;strong&gt;one stacking context&lt;/strong&gt;. Each box in a given stacking context has an integer stack level, which is its position on the z-axis relative to &lt;strong&gt;other boxes in the same stacking context&lt;/strong&gt;. Boxes with greater stack levels are always formatted in front of boxes with lower stack levels. Boxes may have negative stack levels. Boxes with the same stack level in a stacking context are stacked bottom-to-top according to document tree order.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;To understand when each element will be painted you need to know &lt;strong&gt;its stacking context&lt;/strong&gt; and &lt;strong&gt;its stack level&lt;/strong&gt; inside this stacking context (defined by &lt;code&gt;z-index&lt;/code&gt;). You also need to know whether that element establishes a stacking context. This is the tricky part, because setting &lt;code&gt;z-index&lt;/code&gt; will do this:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;For a positioned box, the z-index property specifies:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;The stack level of the box in the current stacking context.&lt;/li&gt;\n&lt;li&gt;Whether the box establishes a stacking context&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Values have the following meanings:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This integer is the stack level of the generated box in the current stacking context. The box also &lt;strong&gt;establishes a new stacking context&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The stack level of the generated box in the current stacking context is 0. The box &lt;strong&gt;does not establish a new stacking context&lt;/strong&gt; unless it is the root element.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;Now we have all the information to better understand each case. If the parent element has a &lt;code&gt;z-index&lt;/code&gt; value of something other than &lt;code&gt;auto&lt;/code&gt;, then it will create a stacking context, thus the child element will be painted inside whatever their &lt;code&gt;z-index&lt;/code&gt; is (negative or positive). The &lt;code&gt;z-index&lt;/code&gt; of the child element will simply tell us the order of painting inside the parent element &lt;em&gt;(this covers your second point)&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Now, if only the child element has a positive &lt;code&gt;z-index&lt;/code&gt; and we set nothing on the parent element, then considering the painting order, the child will be painted later (in step (9)) and the parent in step (8). The only logical way to paint the parent above is to increase the &lt;code&gt;z-index&lt;/code&gt;, but doing this will make us fall into the previous case where the parent will establish a stacking context and the child element will belong to it.&lt;/p&gt;\n&lt;p&gt;There is &lt;strong&gt;no way&lt;/strong&gt; to have the parent above a child element when setting a &lt;strong&gt;positive&lt;/strong&gt; &lt;code&gt;z-index&lt;/code&gt; to the child. Also there is &lt;strong&gt;no way&lt;/strong&gt; to have the parent above the child if we set a &lt;code&gt;z-index&lt;/code&gt; to the parent element different from &lt;code&gt;auto&lt;/code&gt; (either positive or negative).&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;The only case where we can have a child below its parent is to set a negative &lt;code&gt;z-index&lt;/code&gt; on the child element and keep the parent at &lt;code&gt;z-index: auto&lt;/code&gt;, thus this one will not create a stacking context and following the painting order the child will be painted first.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;In addition to &lt;code&gt;z-index&lt;/code&gt;, there are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#The_stacking_context&quot; rel=&quot;noreferrer&quot;&gt;other properties that create a stacking context&lt;/a&gt;. In case you face an expected stacking order, you need to consider those properties, too, in order to see if there is a stacking context created.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Some important facts that we can conclude from the above:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Stacking contexts can be contained in other stacking contexts, and together create a hierarchy of stacking contexts.&lt;/li&gt;\n&lt;li&gt;Each stacking context is completely &lt;strong&gt;independent of its siblings&lt;/strong&gt;: only descendant elements are considered when stacking is processed.&lt;/li&gt;\n&lt;li&gt;Each stacking context is &lt;strong&gt;self-contained&lt;/strong&gt;: after the element&apos;s contents are stacked, the whole element is considered in the stacking order of the parent stacking context. &lt;sup&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#The_stacking_context&quot; rel=&quot;noreferrer&quot;&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;: there is some hacky ways if we consider the use of 3D transformation.&lt;/p&gt;\n&lt;p&gt;Example with an element going under its parent element even if this one has a &lt;code&gt;z-index&lt;/code&gt; specified.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:blue;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform-style&lt;/span&gt;: preserve-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;d; &lt;span class=&quot;hljs-comment&quot;&gt;/* This is important */&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:red; \n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* this will do nothing */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;translateZ&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* this will do the magic */&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Another example where we can place an element between two elements in another stacking context:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: relative;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform-style&lt;/span&gt;: preserve-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;d;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translateZ&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2px&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.outside&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: green;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: -&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;40px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;translateZ&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform-style&lt;/span&gt;: preserve-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;d;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outside&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;We can also have some &lt;em&gt;crazy&lt;/em&gt; stacking order like below:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform-style&lt;/span&gt;: preserve-&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;d;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top:100px;left:50px;background:red;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top: 50px;left: 115px;background:blue;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top: 101px;left: 170px;background:green;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;box&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;top: 175px;left: 115px;background:purple;transform: rotateY(-1deg);&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/egDBz.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/egDBz.png&quot; alt=&quot;CSS circular stacking context&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;We should note that using such &lt;em&gt;hack&lt;/em&gt; may have some side effect due to the fact that &lt;code&gt;transform-style&lt;/code&gt;, &lt;code&gt;perspective&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; will affect &lt;code&gt;position:absolute/fixed&lt;/code&gt; element. Related: &lt;a href=&quot;https://stackoverflow.com/q/52937708/8620333&quot;&gt;Why does applying a CSS-Filter on the parent break the child positioning?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A good way to think about this is that each parent contains its own stacking context. Sibling elements share a parent&apos;s stacking order and may, therefore, overlap each other. &lt;/p&gt;\n\n&lt;p&gt;A child element is ALWAYS getting a stacking context based on its parent. Hence the need for a negative z-index value to push the child &quot;behind&quot; its parent (0) stacking context.&lt;/p&gt;\n\n&lt;p&gt;The only way to remove an element from its parent&apos;s context is using &lt;code&gt;position: fixed&lt;/code&gt; since this essentially forces it to use the window for context.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Mozilla documentation&lt;/a&gt; does say&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The z-index CSS property sets the z-order of a positioned element &lt;strong&gt;and its descendants&lt;/strong&gt; or flex items.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here&apos;s some additional logic from &lt;a href=&quot;https://stackoverflow.com/questions/1182189/css-child-vs-descendant-selectors&quot;&gt;another StackOverflow article&lt;/a&gt; relating to children vs descendants.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;How can I understand this behavior by logic?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;For me it&apos;s hard to understand your problem by logic. A parent contains its children. A bowl can be covered by another bowl. But you can&apos;t cover the soup with the bowl unless you put the soup out of the bowl.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/z-index&quot; rel=&quot;nofollow noreferrer&quot;&gt;z-Index&lt;/a&gt; sets the order for overlapping elements. A parent can&apos;t overlap its child.&lt;/p&gt;\n\n&lt;p&gt;ImhO that&apos;s perfectly logical. &lt;/p&gt;\n    ","\n&lt;p&gt;This question already have a good answer, but I&apos;d like to add one more thing: &lt;strong&gt;If you found this question, there&apos;s a good chance that your problem should be solved by &lt;strong&gt;overflow&lt;/strong&gt;, not z-index.&lt;/strong&gt;&lt;/p&gt;\n    "],"348":["\n&lt;h3&gt;&lt;a href=&quot;https://docs.python.org/3/library/itertools.html#itertools.product&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;itertools.product&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;\n\n&lt;p&gt;Available from Python 2.6.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n\nsomelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product(*somelists):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(element)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is the same as,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(element)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i\n...\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\n(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For Python 2.5 and older:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[(a, b, c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&apos;s a recursive version of &lt;code&gt;product()&lt;/code&gt; (just an illustration):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; args:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(((),)) &lt;span class=&quot;hljs-comment&quot;&gt;# yield tuple()&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (items + (item,) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; items &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product(*args[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; args[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;])) \n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), \n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]))\n[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,), (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([]))\n[]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product())\n[()]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would use list comprehension : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n\ncart_prod = [(a,b,c) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelists[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelists[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; somelists[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;with &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.permutations&quot; rel=&quot;noreferrer&quot;&gt;itertools.product&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\nresult = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(itertools.product(*somelists))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a recursive generator, which doesn&apos;t store any temporary lists&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ar_list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; ar_list:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; ()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ar_list[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prod &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product(ar_list[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (a,)+prod\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product([[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In Python 2.6 and above you can use &apos;itertools.product`. In older versions of Python you can use the following (almost -- see documentation) equivalent &lt;a href=&quot;http://docs.python.org/library/itertools.html#itertools.product&quot; rel=&quot;nofollow noreferrer&quot;&gt;code from the documentation&lt;/a&gt;, at least as a starting point:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args, **kwds&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# product(&apos;ABCD&apos;, &apos;xy&apos;) --&amp;gt; Ax Ay Bx By Cx Cy Dx Dy&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# product(range(2), repeat=3) --&amp;gt; 000 001 010 011 100 101 110 111&lt;/span&gt;\n    pools = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;, args) * kwds.get(&lt;span class=&quot;hljs-string&quot;&gt;&apos;repeat&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    result = [[]]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; pool &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pools:\n        result = [x+[y] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pool]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prod &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(prod)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The result of both is an iterator, so if you really need a list for furthert processing, use &lt;code&gt;list(result)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Although there are many answers already, I would like to share some of my thoughts:&lt;/p&gt;\n\n&lt;h2&gt;Iterative approach&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_iterative&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pools&lt;/span&gt;):\n  result = [[]]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; pool &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pools:\n    result = [x+[y] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; result &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pool]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Recursive Approach&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_recursive&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pools&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(pools) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n    pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = product(pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; cartesian_recursive(pools)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = product(pools[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; pools[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pools\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [xx + [yy] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(xx, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [xx] + [yy] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; xx &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; yy &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; y]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Lambda Approach&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_reduct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;pools&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; reduce(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y: product(x,y) , pools)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Recursive Approach:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rec_cart&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start, array, partial, results&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(partial) == &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array):\n    results.append(partial)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; \n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array[start]:\n    rec_cart(start+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, array, partial+[element], results)\n\nrec_res = []\nsome_lists = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]  \nrec_cart(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, some_lists, [], rec_res)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(rec_res)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Iterative Approach:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;itr_cart&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;array&lt;/span&gt;):\n  results = [[]]\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(array)):\n    temp = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; res &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; results:\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; array[i]:\n        temp.append(res+[element])\n    results = temp\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; results\n\nsome_lists = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]  \nitr_res = itr_cart(some_lists)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(itr_res)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A minor modification to the above recursive generator solution in variadic flavor:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product_args&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*args&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; args:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; args[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; prod &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; product_args(*args[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; args[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; ((),):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; (a,) + prod\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And of course a wrapper which makes it work exactly the same as that solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;product2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ar_list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    &amp;gt;&amp;gt;&amp;gt; list(product(()))\n    [()]\n    &amp;gt;&amp;gt;&amp;gt; list(product2(()))\n    []\n    &quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; product_args(*ar_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with &lt;strong&gt;one trade-off&lt;/strong&gt;: it checks if recursion should break upon each outer loop, and &lt;strong&gt;one gain&lt;/strong&gt;: no yield upon empty call, e.g.&lt;code&gt;product(())&lt;/code&gt;, which I suppose would be semantically more correct (see the doctest).&lt;/p&gt;\n\n&lt;p&gt;Regarding list comprehension: the mathematical definition applies to an arbitrary number of arguments, while list comprehension could only deal with a known number of them.&lt;/p&gt;\n    ","\n&lt;p&gt;Just to add a bit to what has already been said: if you use sympy, you can use symbols rather than strings which makes them mathematically useful.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sympy\n\nx, y = sympy.symbols(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x y&apos;&lt;/span&gt;)\n\nsomelist = [[x,y], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\nsomelist2 = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product(*somelist):\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; element\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;About &lt;a href=&quot;http://sympy.com&quot; rel=&quot;nofollow&quot;&gt;sympy&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I believe this works:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian_product&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;L&lt;/span&gt;):  \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L:\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {(a,) + b &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] \n                        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cartesian_product(L[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])}\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {()}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following code is a 95 % copy from &lt;a href=&quot;https://stackoverflow.com/a/1235363/11154841&quot;&gt;Using numpy to build an array of all combinations of two arrays&lt;/a&gt;, all credits go there! This is said to be much faster since it is only in numpy.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cartesian&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arrays, dtype=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, out=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    arrays = [np.asarray(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arrays]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dtype &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        dtype = arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].dtype\n    n = np.prod([x.size &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arrays])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; out &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        out = np.zeros([n, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(arrays)], dtype=dtype)\n\n    m = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(n / arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].size) \n    out[:,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = np.repeat(arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], m)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; arrays[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]:\n        cartesian(arrays[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], out=out[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:m, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, arrays[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].size):\n            out[j*m:(j+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*m, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:] = out[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:m, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You need to define the dtype as a parameter if you do not want to take the dtype from the first entry for all entries. Take dtype = &apos;object&apos; if you have letters and numbers as items. Test:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;somelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n\n[&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cartesian(somelists, &lt;span class=&quot;hljs-string&quot;&gt;&apos;object&apos;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Out:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;),\n (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;List comprehension is simple and clean:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n\nsomelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\nlst = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.product(*somelists)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This can be done as&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(x, y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;another variable? No problem:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[(x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;itertools.product&lt;/code&gt; in the standard library to get the cartesian product. Other cool, related utilities in &lt;code&gt;itertools&lt;/code&gt; include &lt;code&gt;permutations&lt;/code&gt;, &lt;code&gt;combinations&lt;/code&gt;, and &lt;code&gt;combinations_with_replacement&lt;/code&gt;. Here is &lt;a href=&quot;https://polylang.io/#/python?id=bc8aa0249fdb4cd2b9ce2d647b1f9217&quot; rel=&quot;nofollow noreferrer&quot;&gt;a link&lt;/a&gt; to a python codepen for the snippet below:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; product\n\nsomelists = [\n   [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;],\n   [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n]\n\nresult = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(product(*somelists))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(result)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"349":["\n&lt;p&gt;This problem has two typical causes:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Static fields used by the objects you stored in the list&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Accidentally adding the &lt;em&gt;same&lt;/em&gt; object to the list&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Static Fields&lt;/h2&gt;\n&lt;p&gt;If the objects in your list store data in static fields, each object in your list will appear to be the same because they hold the same values. Consider the class below:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value; \n  &lt;span class=&quot;hljs-comment&quot;&gt;//      ^^^^^^------------ - Here&apos;s the problem!&lt;/span&gt;\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.value = value;\n  }\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In that example, there is only one &lt;code&gt;int value&lt;/code&gt; which is shared between all instances of &lt;code&gt;Foo&lt;/code&gt; because it is declared &lt;code&gt;static&lt;/code&gt;. (See &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;&quot;Understanding Class Members&quot;&lt;/em&gt;&lt;/a&gt; tutorial.)&lt;/p&gt;\n&lt;p&gt;If you add multiple &lt;code&gt;Foo&lt;/code&gt; objects to a list using the code below, each instance will return &lt;code&gt;3&lt;/code&gt; from a call to &lt;code&gt;getValue()&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;; i++) {      \n  list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(i));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The solution is simple - don&apos;t use the &lt;code&gt;static&lt;/code&gt; keywords for fields in your class unless you actually want the values shared between every instance of that class.&lt;/p&gt;\n&lt;h2&gt;Adding the Same Object&lt;/h2&gt;\n&lt;p&gt;If you add a temporary variable to a list, you must create a new instance of the object you are adding, each time you loop. Consider the following erroneous code snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Foo&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Foo&amp;gt;();    \n&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  tmp.setValue(i);\n  list.add(tmp);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, the &lt;code&gt;tmp&lt;/code&gt; object was constructed outside the loop. As a result, the &lt;em&gt;same object instance&lt;/em&gt; is being added to the list three times. The instance will hold the value &lt;code&gt;2&lt;/code&gt;, because that was the value passed during the last call to &lt;code&gt;setValue()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;To fix this, just move the object construction inside the loop:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Foo&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Foo&amp;gt;();        \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- fresh instance!&lt;/span&gt;\n  tmp.setValue(i);\n  list.add(tmp);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Your problem is with the type &lt;code&gt;static&lt;/code&gt; which requires a new initialization every time a loop is iterated. If you are in a loop it is better to keep the concrete initialization inside the loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Object&amp;gt; objects = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(); \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length_you_want; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;SomeStaticClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myStaticObject&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeStaticClass&lt;/span&gt;();\n    myStaticObject.tag = i;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do stuff with myStaticObject&lt;/span&gt;\n    objects.add(myStaticClass);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Object&amp;gt; objects = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(); \n\n&lt;span class=&quot;hljs-type&quot;&gt;SomeStaticClass&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myStaticObject&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeStaticClass&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++) {\n    myStaticObject.tag = i;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do stuff with myStaticObject&lt;/span&gt;\n    objects.add(myStaticClass);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// This will duplicate the last item &quot;length&quot; times&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here &lt;code&gt;tag&lt;/code&gt; is a variable in &lt;code&gt;SomeStaticClass&lt;/code&gt; to check the validity of the above snippet; you can have some other implementation based on your use case.&lt;/p&gt;\n    ","\n&lt;p&gt;Had the same trouble with the calendar instance.&lt;/p&gt;\n\n&lt;p&gt;Wrong code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myCalendar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Calendar.getInstance();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; days &amp;lt; daysPerWeek; days++) {\n    myCalendar.add(Calendar.DAY_OF_YEAR, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// In the next line lies the error&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;newCal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myCalendar;\n    calendarList.add(newCal);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You have to create a NEW object of the calendar, which can be done with &lt;code&gt;calendar.clone()&lt;/code&gt;;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myCalendar&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Calendar.getInstance();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; days &amp;lt; daysPerWeek; days++) {\n    myCalendar.add(Calendar.DAY_OF_YEAR, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// RIGHT WAY&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;newCal&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Calendar) myCalendar.clone();\n    calendarList.add(newCal);\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Every time you add an object to an ArrayList, make sure you add a new object and not already used object. What is happening is that when you add the same 1 copy of object, that same object is added to different positions in an ArrayList. And when you make change to one, because the same copy is added over and over again, all the copies get affected. \nFor example,\nSay you have an ArrayList like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ArrayList&amp;lt;Card&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Card&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now if you add this Card c to list, it will be added no problem. It will be saved at location 0. But, when you save the same Card c in the list, it will be saved at location 1. So remember that you added same 1 object to two different locations in a list. Now if you make a change that Card object c, the objects in a list at location 0 and 1 will also reflect that change, because they are the same object. &lt;/p&gt;\n\n&lt;p&gt;One solution would be to make a constructor in Card class, that accepts another Card object. Then in that constructor, you can set the properties like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Card c)&lt;/span&gt;{\n&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.property1 = c.getProperty1();\n&lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.property2 = c.getProperty2(); \n... &lt;span class=&quot;hljs-comment&quot;&gt;//add all the properties that you have in this class Card this way&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And lets say you have the same 1 copy of Card, so at the time of adding a new object, you can do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt;(nameOfTheCardObjectThatYouWantADifferentCopyOf));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It can also consequence of using the same reference instead of using a new one.      &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; List&amp;lt;Foo&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Foo&amp;gt;();        \n\n setdata();\n......\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setdata&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; {\n  &lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();\n  tmp.setValue(i);\n  list.add(tmp);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Foo&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Foo&amp;gt;(); \n&lt;span class=&quot;hljs-type&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();       \nsetdata();\n......\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setdata&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; {\n  tmp.setValue(i);\n  list.add(tmp);\n} \n&lt;/code&gt;&lt;/pre&gt;\n    "],"350":["\n&lt;p&gt;This depends a lot on what you mean by &quot;revert&quot;.&lt;/p&gt;\n&lt;h2&gt;Temporarily switch to a different commit&lt;/h2&gt;\n&lt;p&gt;If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# This will detach your HEAD, that is, leave you with no branch checked out:&lt;/span&gt;\ngit checkout 0d1d7fc32\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or if you want to make commits while you&apos;re there, go ahead and make a new branch while you&apos;re at it:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git checkout -b old-state 0d1d7fc32\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To go back to where you were, just check out the branch you were on again. (If you&apos;ve made changes, as always when switching branches, you&apos;ll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)&lt;/p&gt;\n&lt;h2&gt;Hard delete unpublished commits&lt;/h2&gt;\n&lt;p&gt;If, on the other hand, you want to really get rid of everything you&apos;ve done since then, there are two possibilities. One, if you haven&apos;t published any of these commits, simply reset:&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# This will destroy any local modifications.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Don&apos;t do it if you have uncommitted work you want to keep.&lt;/span&gt;\ngit reset --hard 0d1d7fc32\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Alternatively, if there&apos;s work to keep:&lt;/span&gt;\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n&lt;span class=&quot;hljs-comment&quot;&gt;# This saves the modifications, then reapplies that patch after resetting.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# You could get merge conflicts, if you&apos;ve modified things which were&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# changed since the commit you reset to.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you mess up, you&apos;ve already thrown away your local changes, but you can at least get back to where you were before by resetting again.&lt;/p&gt;\n&lt;h2&gt;Undo published commits with new commits&lt;/h2&gt;\n&lt;p&gt;On the other hand, if you&apos;ve published the work, you probably don&apos;t want to reset the branch, since that&apos;s effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don&apos;t rewrite any history.&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# This will create three separate revert commits:&lt;/span&gt;\ngit revert a867b4af 25eee4ca 0766c053\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# It also takes ranges. This will revert the last two commits:&lt;/span&gt;\ngit revert HEAD~2..HEAD\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#Similarly, you can revert a range of commits using commit hashes (non inclusive of first hash):&lt;/span&gt;\ngit revert 0d1d7fc..a867b4a\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Reverting a merge commit&lt;/span&gt;\ngit revert -m 1 &amp;lt;merge_commit_sha&amp;gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# To get just one, you could use `rebase -i` to squash them afterwards&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Or, you could do it manually (be sure to do this at top level of the repo)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# get your index and work tree into the desired state, without changing HEAD:&lt;/span&gt;\ngit checkout 0d1d7fc32 .\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Then commit. Be sure and write a good message describing what you just did&lt;/span&gt;\ngit commit\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;a href=&quot;https://git-scm.com/docs/git-revert&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git-revert&lt;/code&gt; manpage&lt;/a&gt; actually covers a lot of this in its description. Another useful link is &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_undoing_merges&quot; rel=&quot;noreferrer&quot;&gt;this git-scm.com section discussing git-revert&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;If you decide you didn&apos;t want to revert after all, you can revert the revert (as described here) or reset back to before the revert (see the previous section).&lt;/p&gt;\n&lt;p&gt;You may also find this answer helpful in this case:&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/34519665/how-to-move-head-forward-checkout-revet-reflog-reset/34519716#34519716&quot;&gt;How can I move HEAD back to a previous location? (Detached head) &amp;amp; Undo commits&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Lots of complicated and dangerous answers here, but it&apos;s actually easy:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git revert --no-commit 0766c053..HEAD\ngit commit\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will revert everything from the HEAD back to the commit hash, meaning it will recreate that commit state in the working tree &lt;em&gt;as if&lt;/em&gt; every commit after &lt;code&gt;0766c053&lt;/code&gt; had been walked back. You can then commit the current tree, and it will create a brand new commit essentially equivalent to the commit you &quot;reverted&quot; to.  &lt;/p&gt;\n\n&lt;p&gt;(The &lt;code&gt;--no-commit&lt;/code&gt; flag lets git revert all the commits at once- otherwise you&apos;ll be prompted for a message for each commit in the range, littering your history with unnecessary new commits.)&lt;/p&gt;\n\n&lt;p&gt;This is a &lt;strong&gt;safe and easy way to rollback to a previous state&lt;/strong&gt;. No history is destroyed, so it can be used for commits that have already been made public.&lt;/p&gt;\n    ","\n&lt;h2&gt;Rogue Coder?&lt;/h2&gt;\n&lt;p&gt;Working on your own and just want it to work? Follow these instructions below, theyve worked reliably for me and many others for years.&lt;/p&gt;\n&lt;p&gt;Working with others? Git is complicated. Read the comments below this answer before you do something rash.&lt;/p&gt;\n&lt;h3&gt;Reverting Working Copy to Most Recent Commit&lt;/h3&gt;\n&lt;p&gt;To revert to the previous commit, ignoring any changes:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;where HEAD is the last commit in your current branch&lt;/p&gt;\n&lt;h3&gt;Reverting The Working Copy to an Older Commit&lt;/h3&gt;\n&lt;p&gt;To revert to a commit that&apos;s older than the most recent commit:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Resets index to former commit; replace &apos;56e05fced&apos; with your commit code&lt;/span&gt;\ngit reset 56e05fced \n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Moves pointer back to previous HEAD&lt;/span&gt;\ngit reset --soft HEAD@{1}\n\ngit commit -m &lt;span class=&quot;hljs-string&quot;&gt;&quot;Revert to 56e05fced&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Updates working copy to reflect the new commit&lt;/span&gt;\ngit reset --hard\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Credits go to a similar Stack Overflow question, &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1895059/git-revert-to-a-commit-by-sha-hash&quot;&gt;Revert to a commit by a SHA hash in Git?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The best option for me and probably others is the Git reset option:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard &amp;lt;commidId&amp;gt; &amp;amp;&amp;amp; git clean -f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This has been the best option for me! It is simple, fast and effective!&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;** Note:** As mentioned in comments don&apos;t do this if you&apos;re sharing your branch with other people who have copies of the old commits&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Also from the comments, if you wanted a less &apos;ballzy&apos; method you could use &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git clean -i\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Before answering let&apos;s add some background, explaining what this &lt;code&gt;HEAD&lt;/code&gt; is.&lt;/p&gt;\n&lt;h1&gt;&lt;em&gt;&lt;strong&gt;First of all what is HEAD?&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; is simply a reference to the current commit (latest) on the current branch. There can only be a single &lt;code&gt;HEAD&lt;/code&gt; at any given time (excluding &lt;code&gt;git worktree&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;The content of &lt;code&gt;HEAD&lt;/code&gt; is stored inside &lt;code&gt;.git/HEAD&lt;/code&gt;, and it contains the 40-bytes SHA-1 hash of the current commit.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h1&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;detached HEAD&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;\n&lt;p&gt;If you are not on the latest commit - meaning that &lt;code&gt;HEAD&lt;/code&gt; is pointing to a prior commit in history it&apos;s called &lt;em&gt;&lt;strong&gt;&lt;code&gt;detached HEAD&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/OlavO.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/OlavO.png&quot; alt=&quot;Diagram illustrating the concept of detached HEAD&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;On the command-line it will look like this - SHA-1 hash instead of the branch name since the &lt;code&gt;HEAD&lt;/code&gt; is not pointing to the the tip of the current branch:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/U0l3s.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/U0l3s.png&quot; alt=&quot;Running git checkout HEAD^0 in a terminal&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;A few options on how to recover from a detached HEAD:&lt;/h3&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;\n&lt;pre&gt;&lt;code&gt;git checkout &amp;lt;commit_id&amp;gt;\ngit checkout -b &amp;lt;new branch&amp;gt; &amp;lt;commit_id&amp;gt;\ngit checkout HEAD~X // x is the number of commits t go back\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will checkout new branch pointing to the desired commit. This command will checkout to a given commit.&lt;/p&gt;\n&lt;p&gt;At this point you can create a branch and start to work from this point on:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# Checkout a given commit.\n# Doing so will result in a `detached HEAD` which mean that the `HEAD`\n# is not pointing to the latest so you will need to checkout branch\n# in order to be able to update the code.\ngit checkout &amp;lt;commit-id&amp;gt;\n\n# Create a new branch forked to the given commit\ngit checkout -b &amp;lt;branch name&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;a href=&quot;https://git-scm.com/docs/git-reflog&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git reflog&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;\n&lt;p&gt;You can always use the &lt;code&gt;reflog&lt;/code&gt; as well. &lt;code&gt;git reflog &lt;/code&gt; will display any change which updated the &lt;code&gt;HEAD&lt;/code&gt; and checking out the desired reflog entry will set the &lt;code&gt;HEAD&lt;/code&gt; back to this commit.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Every time the HEAD is modified there will be a new entry in the &lt;code&gt;reflog&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reflog\ngit checkout HEAD@{...}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will get you back to your desired commit.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/atW9w.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/atW9w.png&quot; alt=&quot;Running git reflog in a terminal&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;git reset HEAD --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;\n&lt;p&gt;&quot;Move&quot; your &lt;code&gt;HEAD&lt;/code&gt; back to the desired commit.&lt;/p&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# This will destroy any local modifications.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Don&apos;t do it if you have uncommitted work you want to keep.&lt;/span&gt;\ngit reset --hard 0d1d7fc32\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Alternatively, if there&apos;s work to keep:&lt;/span&gt;\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n&lt;span class=&quot;hljs-comment&quot;&gt;# This saves the modifications, then reapplies that patch after resetting.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# You could get merge conflicts, if you&apos;ve modified things which were&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# changed since the commit you reset to.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Note: (&lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/RelNotes/2.7.0.txt&quot; rel=&quot;noreferrer&quot;&gt;Since Git 2.7&lt;/a&gt;) you can also use the &lt;code&gt;git rebase --no-autostash&lt;/code&gt; as well.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;This schema illustrates which command does what. As you can see there &lt;code&gt;reset &amp;amp;&amp;amp; checkout&lt;/code&gt; modify the &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/NuThL.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/NuThL.png&quot; alt=&quot;Diagram illustrating staging area and checking out HEAD&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can do this by the following two commands:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard [previous Commit SHA id here]\ngit push origin [branch Name] -f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will remove your previous Git commit.&lt;/p&gt;\n\n&lt;p&gt;If you want to keep your changes, you can also use:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft [previous Commit SHA id here]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then it will save your changes.&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to &quot;uncommit&quot;, erase the last commit message, and put the modified files back in staging, you would use the command:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt; indicates that the uncommitted files should be retained as working files opposed to &lt;code&gt;--hard&lt;/code&gt; which would discard them.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;HEAD~1&lt;/code&gt; is the last commit.  If you want to rollback 3 commits you could use &lt;code&gt;HEAD~3&lt;/code&gt;.  If you want to rollback to a specific revision number, you could also do that using its SHA hash.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This is an extremely useful command in situations where you committed the wrong thing and you want to undo that last commit.&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;http://nakkaya.com/2009/09/24/git-delete-last-commit/&quot;&gt;http://nakkaya.com/2009/09/24/git-delete-last-commit/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The best way is:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard &amp;lt;commidId&amp;gt; &amp;amp;&amp;amp; git push --force\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will reset the branch to the specific commit and then will upload the remote server with the same commits as you have in local.&lt;/p&gt;\n&lt;p&gt;Be careful with the &lt;code&gt;--force&lt;/code&gt; flag as it removes all the subsequent commits after the selected commit without the option to recover them.&lt;/p&gt;\n    ","\n&lt;p&gt;I have tried a lot of ways to revert local changes in Git, and it seems that this works the best if you just want to revert to the latest commit state. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git add . &amp;amp;&amp;amp; git checkout master -f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Short description: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It will NOT create any commits as &lt;code&gt;git revert&lt;/code&gt; does.&lt;/li&gt;\n&lt;li&gt;It will NOT detach your HEAD like &lt;code&gt;git checkout &amp;lt;commithashcode&amp;gt;&lt;/code&gt; does.&lt;/li&gt;\n&lt;li&gt;It WILL override all your local changes and DELETE all added files since the last commit in the branch.&lt;/li&gt;\n&lt;li&gt;It works only with branches names, so you can revert only to latest commit in the branch this way.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I found a much more convenient and simple way to achieve the results above: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git add . &amp;amp;&amp;amp; git reset --hard HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where HEAD points to the latest commit at you current branch.&lt;/p&gt;\n\n&lt;p&gt;It is the same code code as boulder_ruby suggested, but I have added &lt;code&gt;git add .&lt;/code&gt; before  &lt;code&gt;git reset --hard HEAD&lt;/code&gt; to erase all new files created since the last commit since this is what most people expect I believe when reverting to the latest commit.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;OK,&lt;/strong&gt; going back to a previous commit in Git is quite easy...&lt;/p&gt;\n\n&lt;p&gt;Revert back &lt;strong&gt;without keeping&lt;/strong&gt; the changes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard &amp;lt;commit&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Revert back &lt;strong&gt;with keeping&lt;/strong&gt; the changes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --soft &amp;lt;commit&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; using &lt;code&gt;git reset&lt;/code&gt;, you can reset to a specific state. It&apos;s common using it with a commit hash as you see above.&lt;/p&gt;\n\n&lt;p&gt;But as you see the difference is using the two flags &lt;code&gt;--soft&lt;/code&gt; and &lt;code&gt;--hard&lt;/code&gt;, by default &lt;code&gt;git reset&lt;/code&gt; using &lt;code&gt;--soft&lt;/code&gt; flag, but it&apos;s a good practice always using the flag, I explain each flag:&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;--soft&lt;/h2&gt;\n\n&lt;p&gt;The default flag as explained, not need to provide it, does not change the working tree, but it adds all changed files ready to commit, so you go back to the commit status which changes to files get unstaged.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;--hard&lt;/h2&gt;\n\n&lt;p&gt;Be careful with this flag. It resets the working tree and all changes to tracked files and all will be gone!&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I also created the image below that may happen in a real life working with Git:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/y6Xgj.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/y6Xgj.png&quot; alt=&quot;Git reset to a commit&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Assuming you&apos;re talking about master and on that respective branch (that said, this could be any working branch you&apos;re concerned with):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Reset local master branch to November 3rd commit ID\ngit reset --hard 0d1d7fc32e5a947fbd92ee598033d85bfc445a50\n\n# Reset remote master branch to November 3rd commit ID\ngit push -f origin 0d1d7fc32e5a947fbd92ee598033d85bfc445a50:master\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I found the answer from in a blog post (now no longer exists)&lt;/p&gt;\n\n&lt;p&gt;Note that this is Resetting and Forcing the change to the remote, so that if others on your team have already git pulled, you will cause problems for them. You are destroying the change history, which is an important reason why people use git in the first place.&lt;/p&gt;\n\n&lt;p&gt;Better to use revert (see other answers) than reset. \nIf you&apos;re a one man team then it probably doesn&apos;t matter.&lt;/p&gt;\n    ","\n&lt;h2&gt;Extra Alternatives to Jefromi&apos;s Solutions&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/4114122/456814&quot;&gt;Jefromi&apos;s solutions&lt;/a&gt; are definitely the best ones, and you should definitely use them. However, for the sake of completeness, I also wanted to show these other alternative solutions that can also be used to revert a commit (in the sense that you &lt;strong&gt;create a new commit that undoes changes in previous commit&lt;/strong&gt;, just like what &lt;code&gt;git revert&lt;/code&gt; does).&lt;/p&gt;\n\n&lt;p&gt;To be clear, these alternatives &lt;strong&gt;&lt;em&gt;are not the best way to revert commits&lt;/em&gt;&lt;/strong&gt;, &lt;a href=&quot;https://stackoverflow.com/a/4114122/456814&quot;&gt;Jefromi&apos;s solutions are&lt;/a&gt;, but I just want to point out that you can also use these other methods to achieve the same thing as &lt;code&gt;git revert&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Alternative 1: Hard and Soft Resets&lt;/h2&gt;\n\n&lt;p&gt;This is a very slightly modified version of Charles Bailey&apos;s solution to &lt;a href=&quot;https://stackoverflow.com/questions/1895059/revert-to-a-commit-by-sha-hash-in-git/1895095#1895095&quot;&gt;Revert to a commit by a SHA hash in Git?&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Reset the index to the desired commit&lt;/span&gt;\ngit reset --hard &amp;lt;commit&amp;gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Move the branch pointer back to the previous HEAD&lt;/span&gt;\ngit reset --soft HEAD@{1}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Commit the changes&lt;/span&gt;\ngit commit -m &lt;span class=&quot;hljs-string&quot;&gt;&quot;Revert to &amp;lt;commit&amp;gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This basically works by using the fact that soft resets will leave the state of the previous commit staged in the index/staging-area, which you can then commit.&lt;/p&gt;\n\n&lt;h2&gt;Alternative 2: Delete the Current Tree and Replace with the New One&lt;/h2&gt;\n\n&lt;p&gt;This solution comes from svick&apos;s solution to &lt;a href=&quot;https://stackoverflow.com/questions/3380805/checkout-old-commit-and-make-it-a-new-commit/3382249#3382249&quot;&gt;Checkout old commit and make it a new commit&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git rm -r .\ngit checkout &amp;lt;commit&amp;gt; .\ngit commit\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Similarly to alternative #1, this reproduces the state of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; in the current working copy. It is necessary to do &lt;code&gt;git rm&lt;/code&gt; first because &lt;code&gt;git checkout&lt;/code&gt; won&apos;t remove files that have been added since &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Say you have the following commits in a text file named &lt;code&gt;~/commits-to-revert.txt&lt;/code&gt; (I used &lt;code&gt;git log --pretty=oneline&lt;/code&gt; to get them)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fe60adeba6436ed8f4cc5f5c0b20df7ac9d93219\n0c27ecfdab3cbb08a448659aa61764ad80533a1b\nf85007f35a23a7f29fa14b3b47c8b2ef3803d542\ne9ec660ba9c06317888f901e3a5ad833d4963283\n6a80768d44ccc2107ce410c4e28c7147b382cd8f\n9cf6c21f5adfac3732c76c1194bbe6a330fb83e3\nfff2336bf8690fbfb2b4890a96549dc58bf548a5\n1f7082f3f52880cb49bc37c40531fc478823b4f5\ne9b317d36a9d1db88bd34831a32de327244df36a\nf6ea0e7208cf22fba17952fb162a01afb26de806\n137a681351037a2204f088a8d8f0db6e1f9179ca\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create a &lt;a href=&quot;http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29&quot; rel=&quot;noreferrer&quot;&gt;Bash&lt;/a&gt; shell script to revert each of them:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/bin/bash&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /path/to/working/copy\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; ~/commits-to-revert.txt`\n&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    git revert &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; --no-commit\n&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This reverts everything back to the previous state, including file and directory creations, and deletions, commit it to your branch and you retain the history, but you have it reverted back to the same file structure. Why Git doesn&apos;t have a &lt;code&gt;git revert --to &amp;lt;hash&amp;gt;&lt;/code&gt; is beyond me.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a &lt;strong&gt;much simpler&lt;/strong&gt; way to go back to a previous commit (and have it in an uncommited state, to do with it whatever you like):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, no need for commit ids and so on :)&lt;/p&gt;\n    ","\n&lt;p&gt;You can complete all these initial steps yourself and push back to the Git repository.&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Pull the latest version of your repository from Bitbucket using the &lt;code&gt;git pull --all&lt;/code&gt; command.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Run the Git log command with &lt;code&gt;-n 4&lt;/code&gt; from your terminal. The number after the &lt;code&gt;-n&lt;/code&gt; determines the number of commits in the log starting from the most recent commit in your local history.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ git log -n 4\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Reset the head of your repository&apos;s history using the &lt;code&gt;git reset --hard HEAD~N&lt;/code&gt; where N is the number of commits you want to take the head back. In the following example the head would be set back one commit, to the last commit in the repository history:&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Push the change to Git repository using &lt;code&gt;git push --force&lt;/code&gt; to force push the change.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If you want the Git repository to a previous commit:-&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git pull --all\ngit reset --hard HEAD~1\ngit push --force\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Caution!&lt;/strong&gt; This command can cause losing commit history, if user put the wrong commit mistakenly. Always have en extra backup of your git some\nwhere else just in case if you do mistakes, than you are a bit safer.\n:)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;I have had a similar issue and wanted to revert back to an earlier commit. In my case I was not interested to keep the newer commit, hence I used &lt;code&gt;Hard&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This is how I did it:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard CommitId &amp;amp;&amp;amp; git clean -f\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will revert on the local repository, and here after using &lt;code&gt;git push -f&lt;/code&gt; will update the remote repository.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git push -f\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;For instance, if you want to completely ignore the commit with the name &lt;code&gt;enforce non-group manage policies&lt;/code&gt; from the next image&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/JyrDu.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/JyrDu.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;you&apos;d run&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset --hard dd52eb9 &amp;amp;&amp;amp; git clean -f\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;followed by&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git push -f\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After, you won&apos;t see that commit (&lt;code&gt;enforce non-group manage policies&lt;/code&gt;) there&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/Dkljl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/Dkljl.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;After all the changes, when you push all these commands, you might have to use:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git push -f ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And not only &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;There is a command (not a part of core Git, but it is in the &lt;a href=&quot;https://github.com/visionmedia/git-extras&quot; rel=&quot;nofollow noreferrer&quot;&gt;git-extras&lt;/a&gt; package) specifically for reverting and staging old commits:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git undo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Per the &lt;a href=&quot;https://en.wikipedia.org/wiki/Man_page&quot; rel=&quot;nofollow noreferrer&quot;&gt;man page&lt;/a&gt;, it can also be used as such:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# Remove the latest three commits\ngit undo 3\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Revert is the command to rollback the commits.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git revert &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;Sample:&lt;/em&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git revert 2h3h23233\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is capable of taking range from the HEAD like below. Here 1 says &quot;revert last commit.&quot;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git revert HEAD~1..HEAD\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And then do:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git push\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If the situation is an &lt;strong&gt;urgent one&lt;/strong&gt;, and you just want to do what the questioner asked in a &lt;strong&gt;quick and dirty&lt;/strong&gt; way, assuming your project is under a directory called, for example, &quot;my project&quot;:&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;QUICK AND DIRTY&lt;/strong&gt;: depending on the circumstances, quick and dirty may in fact be very GOOD. What my solution here does is &lt;strong&gt;NOT&lt;/strong&gt; replace irreversibly the files you have in your working directory with files hauled up/extracted from the depths of the git repository lurking beneath your .git/ directory using fiendishly clever and diabolically powerful git commands, of which there are many. &lt;strong&gt;YOU DO NOT HAVE TO DO SUCH DEEP-SEA DIVING TO RECOVER what may appear to be a disastrous situation, and attempting to do so without sufficient expertise may prove fatal&lt;/strong&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Copy the whole directory and call it something else, like &quot;my project - copy&quot;. Assuming your git repository (&quot;repo&quot;) files are under the &quot;my project&quot; directory (the default place for them, under a directory called &quot;.git&quot;), you will now have copied both your work files and your repo files.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Do this in the directory &quot;my project&quot;:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; .../my project $ git reset --hard [first-4-letters&amp;amp;numbers-of-commit&apos;s-SHA]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;This will return the state of the repo under &quot;my project&quot; to what it was when you made that commit (a &quot;commit&quot; means a snapshot of your working files). All commits since the &quot;&lt;code&gt;reset&lt;/code&gt;ted&quot; commit will be lost forever under &quot;my project&quot;, BUT... &lt;strong&gt;they will still be present&lt;/strong&gt; in the repo under &quot;my project - copy&quot; since you copied &lt;em&gt;all&lt;/em&gt; those files - including the ones in the repo, under .../.git/.&lt;/p&gt;\n&lt;p&gt;You then have two versions on your system... you can examine or copy or modify files of interest, or whatever, from the previous commit. You can completely discard the files under &quot;my project - copy&quot;, if you have decided the new work since the restored commit was going nowhere...&lt;/p&gt;\n&lt;p&gt;The obvious thing if you want to carry on with the state of the project without actually discarding the work since this retrieved commit is to rename your directory again: Delete the project containing the retrieved commit (or give it a temporary name) and rename your &quot;my project - copy&quot; directory back to &quot;my project&quot;. Then maybe try to understand some of the other answers here, and probably do another commit fairly soon.&lt;/p&gt;\n&lt;p&gt;Git is a brilliant creation but absolutely no-one is able to just &quot;pick it up on the fly&quot;: also people who try to explain it &lt;strong&gt;far too often&lt;/strong&gt; assume prior knowledge of other VCS [Version Control Systems] and delve far too deep far too soon, and commit other terrible crimes, like using interchangeable terms for &quot;checking out&quot; - in ways which sometimes appear almost calculated to confuse a beginner.&lt;/p&gt;\n&lt;p&gt;To save yourself much stress, learn from my scars. You have to pretty much have to read a book on Git - I&apos;d recommend reading THE BOOK, &lt;em&gt;Pro Git 2nd edition&lt;/em&gt;: available for free download etc. &lt;a href=&quot;https://git-scm.com/book/en/v2&quot; rel=&quot;noreferrer&quot;&gt;from git central&lt;/a&gt;. Published 2014 but, as at early 2022, still the best. Do it sooner rather than later: Git is destined to be part of your life from now on. If you do, bear in mind that much of the complexity of Git comes from branching and then remerging: the &lt;em&gt;Pro Git&lt;/em&gt; book actually introduces this central aspect very gently, but you can skip those parts in any book on your first read. From your question there&apos;s &lt;strong&gt;no reason why people should be blinding you with science&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Especially if, for example, this is a desperate situation and you&apos;re a newbie with Git!&lt;/p&gt;\n&lt;p&gt;PS: (slight &lt;strong&gt;caution&lt;/strong&gt;) One other thought: It is (now) actually quite simple to keep the Git repo in a directory other than the one with the working files. This would mean you would not copy the entire Git repository using the above quick &amp;amp; dirty solution. See the answer by Fryer using &lt;code&gt;--separate-git-dir&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/questions/505467/can-i-store-the-git-folder-outside-the-files-i-want-tracked&quot;&gt;here&lt;/a&gt;. Bearing that in mind, &lt;strong&gt;be warned&lt;/strong&gt;: If you have a &quot;separate-directory&quot; repository which you don&apos;t copy, and you do a hard reset, all versions subsequent to the reset commit really will be lost &lt;em&gt;forever&lt;/em&gt; forever, unless you have, as you absolutely should, regularly backed up your repository, preferably to the Cloud (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Drive&quot; rel=&quot;noreferrer&quot;&gt;Google Drive&lt;/a&gt;) among other places.&lt;/p&gt;\n&lt;p&gt;On this subject of &quot;backing up to the Cloud&quot;, the next step is to open an account (free of course) with GitHub or (better in my view) &lt;a href=&quot;https://gitlab.com&quot; rel=&quot;noreferrer&quot;&gt;GitLab&lt;/a&gt;. You can then regularly do a &lt;code&gt;git push&lt;/code&gt; command to make your Cloud repo up-to-date &quot;properly&quot;. But again, talking about this may be too much too soon: &lt;code&gt;git push&lt;/code&gt; has to be configured, can fail to work for a totally baffling technical reason, involves learning about remote repos (&quot;origin&quot;, etc). So a quick-and-dirty Cloud-based backup approach may be preferable until you become knowledgeable. Again, the &lt;em&gt;Pro Git&lt;/em&gt; book introduces how remote repositories work, and relate to your local repo, very gently and rationally.&lt;/p&gt;\n    ","\n&lt;p&gt;Try resetting to the desired commit:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git reset &amp;lt;COMMIT_ID&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To check &lt;code&gt;COMMIT_ID&lt;/code&gt; use:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git log\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will reset all changed files to un-added state.&lt;/p&gt;\n&lt;p&gt;Now you can &lt;code&gt;checkout&lt;/code&gt; all un-added files by&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git checkout .\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To verify your changes use:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git log\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If you have &lt;strong&gt;one and only&lt;/strong&gt; commit in your repo, try&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git update-ref -d HEAD\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Select your required commit, and check it by&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git show HEAD\ngit show HEAD~1\ngit show HEAD~2 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;till you get the required commit. To make the HEAD point to that, do&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;code&gt;git reset --hard HEAD~2&lt;/code&gt; or whatever.&lt;/p&gt;\n    ","\n&lt;p&gt;Revert to &lt;em&gt;most recent&lt;/em&gt; commit and ignoring all local changes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard HEAD\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;This is one more way to directly reset to a recent commit&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;git stash\ngit stash clear\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It directly clears all the changes that you have been making since the last commit.&lt;/p&gt;\n\n&lt;p&gt;PS: It has a little problem; it also deletes all you recently stored stash changes. Which I guess in most cases should not matter.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Idea:&lt;/strong&gt; You basically want to replace the current working tree state with the one from a previous commit and then create a commit out of it. Ignored files should best be not changed. Here is how:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Emtpy the working tree *.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; git rm -r --cached . &amp;amp;&amp;amp; git clean -f -d\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Bring the working tree in the state we want **.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; git checkout 0d1d7fc3 .\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Create the revert commit.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt; git add --all &amp;amp;&amp;amp; git commit -m &quot;revert to 0d1d7fc3&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;hr&gt;\n&lt;p&gt;At first I thought that &lt;a href=&quot;https://stackoverflow.com/a/21718540/1788806&quot;&gt;Yarins answer&lt;/a&gt; would be the best, but it doesn&apos;t work for merge commits. This solution does.&lt;/p&gt;\n&lt;p&gt;Additionally it does not delete anything (pushed or upushed) from the history. It produces one clean commit which represents the state we want to revert back to.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;sub&gt;* by removing untracked but not ignored files (the ones specified in &lt;em&gt;.gitignore&lt;/em&gt;) from working tree. The working tree is empty except for the ignored files which we wanted to keep (if not specifiy &lt;code&gt;-x&lt;/code&gt; option for &lt;code&gt;clean&lt;/code&gt;)&lt;/sub&gt;&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;** When a path is specified (here: &lt;code&gt;.&lt;/code&gt;), checkout leaves HEAD alone.&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To completely clean a coder&apos;s directory up from some accidental changes, we used:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git add -A .\ngit reset --hard HEAD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just &lt;code&gt;git reset --hard HEAD&lt;/code&gt; will get rid of modifications, but it won&apos;t get rid of &quot;new&quot; files. In their case they&apos;d accidentally dragged an important folder somewhere random, and all those files were being treated as new by Git, so a &lt;code&gt;reset --hard&lt;/code&gt; didn&apos;t fix it. By running the &lt;code&gt;git add -A .&lt;/code&gt; beforehand, it explicitly tracked them all with git, to be wiped out by the reset.&lt;/p&gt;\n    ","\n&lt;p&gt;I believe some people may come to this question wanting to know how to rollback committed changes they&apos;ve made in their master - ie throw everything away and go back to origin/master, in which case, do this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard origin/master\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://superuser.com/questions/273172/how-to-reset-master-to-origin-master&quot;&gt;https://superuser.com/questions/273172/how-to-reset-master-to-origin-master&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To keep the changes from the previous commit to HEAD and move to the previous commit, do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset &amp;lt;SHA&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If changes are not required from the previous commit to HEAD and just discard all changes, do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As your commits are pushed remotely, you need to remove them. Let me assume your branch is &lt;em&gt;develop&lt;/em&gt; and it is pushed over &lt;em&gt;origin&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;You first need to remove &lt;em&gt;develop&lt;/em&gt; from &lt;em&gt;origin&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git push origin :develop (note the colon)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then you need to get develop to the status you want, let me assume the commit hash is EFGHIJK:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git reset --hard EFGHIJK\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lastly, push &lt;em&gt;develop&lt;/em&gt; again:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git push origin develop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For rollback (or to revert):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1. git revert --no-commit &quot;commit-code-to-remove&quot; HEAD\n(e.g. git revert --no-commit d57a39d HEAD)\n2. git commit\n3. git push\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Try the above two steps, and if you find this is what you want then &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If you find something wrong, do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;git revert --abort\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"53","randomQuestions":[{"title":"jQuery Ajax POST example with PHP","slug":"jquery-ajax-post-example-with-php-1657387402634"},{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"Is it possible to escape regex metacharacters reliably with sed","slug":"is-it-possible-to-escape-regex-metacharacters-reliably-with-sed-1657388428795"},{"title":"What are the basic rules and idioms for operator overloading?","slug":"what-are-the-basic-rules-and-idioms-for-operator-overloading-1657384449752"},{"title":"What are the rules for JavaScript's automatic semicolon insertion (ASI)?","slug":"what-are-the-rules-for-javascript's-automatic-semicolon-insertion-(asi)-1657387472789"},{"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944"},{"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653"},{"title":"Post an HTML Table to ADO.NET DataTable","slug":"post-an-html-table-to-ado.net-datatable-1657387462723"},{"title":"How to remove the space between inline/inline-block elements?","slug":"how-to-remove-the-space-between-inlineinline-block-elements-1657384532273"},{"title":"Google Maps JS API v3 - Simple Multiple Marker Example","slug":"google-maps-js-api-v3-simple-multiple-marker-example-1657388073335"},{"title":"How can I prevent SQL injection in PHP?","slug":"how-can-i-prevent-sql-injection-in-php-1657384220094"},{"title":"How can I get query string values in JavaScript?","slug":"how-can-i-get-query-string-values-in-javascript-1657384443631"},{"title":"scanf() leaves the newline character in the buffer","slug":"scanf()-leaves-the-newline-character-in-the-buffer-1657384699202"},{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"},{"title":"Use dynamic variable names in JavaScript","slug":"use-dynamic-variable-names-in-javascript-1657388468075"},{"title":"Convert Rows to columns using 'Pivot' in SQL Server","slug":"convert-rows-to-columns-using-'pivot'-in-sql-server-1657388372528"},{"title":"How do I return the response from an Observable/http/async call in angular?","slug":"how-do-i-return-the-response-from-an-observablehttpasync-call-in-angular-1657387335024"},{"title":"Is floating point math broken?","slug":"is-floating-point-math-broken-1657384238910"},{"title":"What does if __name__ == \"__main__\": do?","slug":"what-does-if-__name__-\"__main__\":-do-1657384825815"},{"title":"How to print a number with commas as thousands separators in JavaScript","slug":"how-to-print-a-number-with-commas-as-thousands-separators-in-javascript-1657387777379"}]},"__N_SSG":true}