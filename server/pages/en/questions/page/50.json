{"pageProps":{"data":{"count":610,"rows":[{"id":365,"title":"Relative imports for the billionth time","slug":"relative-imports-for-the-billionth-time-1657387756383","postType":"QUESTION","createdAt":"2022-07-09T17:29:16.000Z","updatedAt":"2022-07-09T17:29:16.000Z","tags":[{"id":2021,"name":"import","slug":"import","createdAt":"2022-07-09T17:29:16.000Z","updatedAt":"2022-07-09T17:29:16.000Z","Questions_Tags":{"questionId":365,"tagId":2021}},{"id":2022,"name":"relative-path","slug":"relative-path","createdAt":"2022-07-09T17:29:16.000Z","updatedAt":"2022-07-09T17:29:16.000Z","Questions_Tags":{"questionId":365,"tagId":2022}},{"id":2023,"name":"python-packaging","slug":"python-packaging","createdAt":"2022-07-09T17:29:16.000Z","updatedAt":"2022-07-09T17:29:16.000Z","Questions_Tags":{"questionId":365,"tagId":2023}},{"id":2024,"name":"relative-import","slug":"relative-import","createdAt":"2022-07-09T17:29:16.000Z","updatedAt":"2022-07-09T17:29:16.000Z","Questions_Tags":{"questionId":365,"tagId":2024}}]},{"id":364,"title":"How do I use shell variables in an awk script?","slug":"how-do-i-use-shell-variables-in-an-awk-script-1657387754261","postType":"QUESTION","createdAt":"2022-07-09T17:29:14.000Z","updatedAt":"2022-07-09T17:29:14.000Z","tags":[{"id":2018,"name":"awk","slug":"awk","createdAt":"2022-07-09T17:29:14.000Z","updatedAt":"2022-07-09T17:29:14.000Z","Questions_Tags":{"questionId":364,"tagId":2018}}]},{"id":363,"title":"Why not use tables for layout in HTML? [closed]","slug":"why-not-use-tables-for-layout-in-html-closed-1657387752327","postType":"QUESTION","createdAt":"2022-07-09T17:29:12.000Z","updatedAt":"2022-07-09T17:29:12.000Z","tags":[]},{"id":362,"title":"How to create a GUID / UUID","slug":"how-to-create-a-guid-uuid-1657387749530","postType":"QUESTION","createdAt":"2022-07-09T17:29:09.000Z","updatedAt":"2022-07-09T17:29:09.000Z","tags":[{"id":2013,"name":"guid","slug":"guid","createdAt":"2022-07-09T17:29:09.000Z","updatedAt":"2022-07-09T17:29:09.000Z","Questions_Tags":{"questionId":362,"tagId":2013}},{"id":2014,"name":"uuid","slug":"uuid","createdAt":"2022-07-09T17:29:09.000Z","updatedAt":"2022-07-09T17:29:09.000Z","Questions_Tags":{"questionId":362,"tagId":2014}}]},{"id":361,"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110","postType":"QUESTION","createdAt":"2022-07-09T17:29:06.000Z","updatedAt":"2022-07-09T17:29:06.000Z","tags":[]}]},"answers":{"361":["\n&lt;p&gt;Try a &lt;a href=&quot;http://php.net/manual/en/function.usort.php&quot; rel=&quot;noreferrer&quot;&gt;usort&lt;/a&gt;. If you are still on PHP 5.2 or earlier, you&apos;ll have to define a sorting function first:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sortByOrder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;sortByOrder&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Starting in PHP 5.3, you can use an anonymous function:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And finally with PHP 7 you can use the &lt;a href=&quot;https://stackoverflow.com/a/31298778&quot;&gt;spaceship operator&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To extend this to multi-dimensional sorting, reference the second/third sorting elements if the first is zero - best explained below. You can also use this for sorting on sub-elements.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$retval&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$retval&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$retval&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;suborder&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;suborder&apos;&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$retval&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$retval&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;details&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;subsuborder&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;details&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;subsuborder&apos;&lt;/span&gt;];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$retval&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need to retain key associations, use &lt;code&gt;uasort()&lt;/code&gt; - see &lt;a href=&quot;http://php.net/manual/en/array.sorting.php&quot; rel=&quot;noreferrer&quot;&gt;comparison of array sorting functions&lt;/a&gt; in the manual.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;aasort&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sorter&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;reset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ii&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$va&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sorter&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$ii&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$va&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;];\n    }\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;asort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sorter&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$sorter&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ii&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$va&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$ii&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$ii&lt;/span&gt;];\n    }\n    &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;aasort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$your_array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;order&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I use this function:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;array_sort_by_column&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&amp;amp;&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$col&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$dir&lt;/span&gt; = SORT_ASC&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sort_col&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sort_col&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$col&lt;/span&gt;];\n    }\n\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$sort_col&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$dir&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_sort_by_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;\nThis answer is at least ten years old, and there are likely better solutions now, but I am adding some extra info as requested in a couple of comments.&lt;/p&gt;\n&lt;p&gt;It works because &lt;code&gt;array_multisort()&lt;/code&gt; can sort multiple arrays. Example input:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n(\n    [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n        (\n            [hashtag] =&amp;gt; a7e87329b5eab8578f4f1098a152d6f4\n            [title] =&amp;gt; Flower\n            [order] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n        )\n\n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n        (\n            [hashtag] =&amp;gt; b24ce0cd392a5b0b8dedc66c25213594\n            [title] =&amp;gt; Free\n            [order] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n        )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First &lt;code&gt;$sort_col&lt;/code&gt; is made which is an two dimensional array with the values being what we want to sort by and the keys matching the input array. For example for this input, choosing key &lt;code&gt;$sort_col&lt;/code&gt; &lt;code&gt;&quot;order&quot;&lt;/code&gt; we get:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n(\n    [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;array_multisort()&lt;/code&gt; then sorts that array (resulting in key order &lt;code&gt;1, 0&lt;/code&gt;) but this is only the two dimensional array. So the original input array is also passed as the &lt;code&gt;$rest&lt;/code&gt; argument. As the keys match it will be sorted so its keys are also in the same order, giving the desired result.&lt;/p&gt;\n&lt;p&gt;Note:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;it is passed by reference so that the supplied array is modified in place.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_multisort()&lt;/code&gt; can sort multiple additional array like this, not just one&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;To achieve this we can use &quot;&lt;a href=&quot;https://www.php.net/manual/en/function.array-multisort.php&quot; rel=&quot;noreferrer&quot;&gt;array_multisort&lt;/a&gt;&quot; method which &apos;Sorts multiple or multi-dimensional arrays&apos;. It&apos;s method parameters are&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;$keys - an array being sorted&lt;/li&gt;\n&lt;li&gt;SORT_ASC - sort order (ascending)&lt;/li&gt;\n&lt;li&gt;sort flags (compare items normally(don&apos;t change types)\nor numerically or as strings)&lt;/li&gt;\n&lt;li&gt;$new - then rest of the arrays. Only elements\ncorresponding to equivalent elements in previous&lt;br&gt;\narrays are compared.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&apos;sort flags&apos; is SORT_REGULAR by default and it is omitted.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$new&lt;/span&gt; = [\n    [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;hashtag&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a7e87329b5eab8578f4f1098a152d6f4&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;title&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Flower&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,\n    ],\n    [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;hashtag&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;b24ce0cd392a5b0b8dedc66c25213594&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;title&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Free&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    ],\n    [\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;hashtag&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;e7d31fc0602fb2ede144d18cdffd816b&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;title&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Ready&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,\n    ],\n];\n&lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$new&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt;, SORT_ASC, &lt;span class=&quot;hljs-variable&quot;&gt;$new&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$new&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n(\n    [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n        (\n            [hashtag] =&amp;gt; e7d31fc0602fb2ede144d18cdffd816b\n            [title] =&amp;gt; Ready\n            [order] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n        )\n    [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n        (\n            [hashtag] =&amp;gt; b24ce0cd392a5b0b8dedc66c25213594\n            [title] =&amp;gt; Free\n            [order] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n        )\n    [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] =&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Array&lt;/span&gt;\n        (\n            [hashtag] =&amp;gt; a7e87329b5eab8578f4f1098a152d6f4\n            [title] =&amp;gt; Flower\n            [order] =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n        )\n)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I usually use &lt;a href=&quot;http://php.net/usort&quot; rel=&quot;noreferrer&quot;&gt;usort&lt;/a&gt;, and pass my own comparison function. In this case, it is very simple:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;compareOrder&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;)\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n}\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;compareOrder&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In PHP 7 using the spaceship operator:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To sort the array by the value of the &quot;title&quot; key, use:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;uasort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;title&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;title&apos;&lt;/span&gt;]);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;strcmp&lt;/strong&gt; compare the strings.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;uasort()&lt;/strong&gt; maintains the array keys as they were defined.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;array_multisort()&lt;/code&gt;, &lt;code&gt;array_map()&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_map&lt;/span&gt;(function(&lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$element&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n  }, &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;), SORT_ASC, &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://3v4l.org/AJNKi&quot; rel=&quot;noreferrer&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sort&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable&quot;&gt;$array_lowercase&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_map&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;strtolower&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$array_to_be_sorted&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array_lowercase&lt;/span&gt;, SORT_ASC, SORT_STRING, &lt;span class=&quot;hljs-variable&quot;&gt;$alphabetically_ordered_array&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This takes care of both upper and lower case alphabets.&lt;/p&gt;\n    ","\n&lt;p&gt;The most flexible approach would be using this method:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Arr&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortByKeys&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$assoc&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here&apos;s why:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You can sort by any key (also nested like &lt;code&gt;&apos;key1.key2.key3&apos;&lt;/code&gt; or &lt;code&gt;[&apos;k1&apos;, &apos;k2&apos;, &apos;k3&apos;]&lt;/code&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It works both on associative and not associative arrays (&lt;code&gt;$assoc&lt;/code&gt; flag)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It doesn&apos;t use references - it returns a new sorted array&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In your case it would be as simple as:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sortedArray&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Arr&lt;/span&gt;::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sortByKeys&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method is a part of &lt;a href=&quot;https://github.com/minwork/array&quot; rel=&quot;nofollow noreferrer&quot;&gt;this library&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The working &quot;arrow function&quot; syntax with PHP &lt;strong&gt;7.4&lt;/strong&gt; and above:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;uasort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$yourArray&lt;/span&gt;, fn(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;]);\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;pretty print&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;pre&amp;gt;&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$yourArray&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As the accepted answer states you can use:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;];\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need sort by more than one column, then you would do the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column1&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column2&apos;&lt;/span&gt;]] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column1&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column2&apos;&lt;/span&gt;]];\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This can be extended to any number of columns in your data. This relies on the fact you can directly compare arrays in PHP. In the above example the array would be sorted first by &lt;code&gt;column1&lt;/code&gt; and then by &lt;code&gt;column2&lt;/code&gt;. But you can sort by the columns in any order e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column2&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column1&apos;&lt;/span&gt;]] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column2&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column1&apos;&lt;/span&gt;]];\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you need to sort one column ascending and another descending, then swap the descending column to the other side of the operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$myArray&lt;/span&gt;, function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column1&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column2&apos;&lt;/span&gt;]] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column1&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;column2&apos;&lt;/span&gt;]];\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If anyone needs sort according to a key, the best is to use the below:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt;, &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;build_sorter&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;build_sorter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strnatcmp&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;], &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;]);\n   };\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This solution is for usort() with an easy-to-remember notation for multidimensional sorting. The spaceship operator &amp;lt;=&amp;gt; is used, which is available from PHP 7.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$in&lt;/span&gt;,function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;]   &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;first&apos;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;//first asc&lt;/span&gt;\n      ?: &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;]  &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;second&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;//second asc&lt;/span&gt;\n      ?: &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;]   &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;third&apos;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;//third desc (a b swapped!)&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;//etc&lt;/span&gt;\n  ;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$in&lt;/span&gt; = [\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Anton&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Gruber&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;03.08.1967&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Anna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Egger&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;04.01.1960&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Paul&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mueller&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;15.10.1971&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Marie&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Schmidt &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;24.12.1963&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Emma&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mueller&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;23.11.1969&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;],\n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;First task: Order By rank asc, surname asc&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$in&lt;/span&gt;,function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;]      &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;]     &lt;span class=&quot;hljs-comment&quot;&gt;//first asc&lt;/span&gt;\n      ?: &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;]   &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;//second asc&lt;/span&gt;\n  ;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Second task: Order By rank desc, surname asc, firstmame asc&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$in&lt;/span&gt;,function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;]      &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;]       &lt;span class=&quot;hljs-comment&quot;&gt;//first desc&lt;/span&gt;\n      ?: &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;]   &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;surname&apos;&lt;/span&gt;]    &lt;span class=&quot;hljs-comment&quot;&gt;//second asc&lt;/span&gt;\n      ?: &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt;] &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;firstname&apos;&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;//third asc&lt;/span&gt;\n  ;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Third task: Order By rank desc, birthdate asc&lt;/p&gt;\n&lt;p&gt;The date cannot be sorted in this notation. It is converted with strtotime.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$in&lt;/span&gt;,function(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;,&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;]      &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;rank&apos;&lt;/span&gt;]       &lt;span class=&quot;hljs-comment&quot;&gt;//first desc&lt;/span&gt;\n      ?: &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt;]) &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;strtotime&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;birthdate&apos;&lt;/span&gt;])    &lt;span class=&quot;hljs-comment&quot;&gt;//second asc&lt;/span&gt;\n  ;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could use &lt;code&gt;usort&lt;/code&gt; and a user-defined sort function with a callback function:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$new&lt;/span&gt;, fn(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;] - &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;order&apos;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;TRICK:&lt;/strong&gt; you could use &lt;code&gt;a &amp;gt; b&lt;/code&gt; or &lt;code&gt;a - b&lt;/code&gt; or &lt;code&gt;a &amp;lt;=&amp;gt; b&lt;/code&gt; for sorting in an &lt;em&gt;ascending&lt;/em&gt; order. For a &lt;em&gt;descending&lt;/em&gt; order just the swap position of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I found this helpful:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    &lt;span class=&quot;hljs-variable&quot;&gt;$columns&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_column&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;order&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_multisort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$columns&lt;/span&gt;, SORT_ASC, &lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://lucidar.me/en/web-dev/how-to-sort-multidimensional-array-in-php/#sort-by-name-ascending&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sort by name ascending&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Let&apos;s face it: PHP does &lt;em&gt;not&lt;/em&gt; have a simple out-of-the box function to properly handle every array sort scenario.&lt;/p&gt;\n&lt;p&gt;This routine is intuitive, which means faster debugging and maintenance:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Automatic population of the array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$tempArray&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n&lt;span class=&quot;hljs-variable&quot;&gt;$annotations&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... some code&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// SQL $sql retrieves result array $result&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// $row[0] is the ID, but is populated out of order (comes from&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// multiple selects populating various dimensions for the same DATE&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// for example&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_fetch_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$result&lt;/span&gt;)) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$needle&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;arrayIndexes&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$needle&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// Create a parallel array with IDs only&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$annotations&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$needle&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;someDimension&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Whatever&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;asort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$tempArray&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$tempArray&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arrayKey&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$dataInOrder&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$annotations&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$arrayKey&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;someDimension&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// .... more code&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;arrayIndexes&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$needle&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$tempArray&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;in_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$needle&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$tempArray&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_push&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$tempArray&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$needle&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"362":["\n&lt;p&gt;&lt;em&gt;[Edited 2021-10-16 to reflect latest best-practices for producing RFC4122-compliant UUIDs]&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Most readers here will want to use &lt;a href=&quot;https://www.npmjs.com/package/uuid&quot; rel=&quot;noreferrer&quot;&gt;the &lt;code&gt;uuid&lt;/code&gt; module&lt;/a&gt;.  It is well-tested and supported.&lt;/p&gt;\n&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;crypto.randomUUID()&lt;/code&gt;&lt;/a&gt; function is an emerging standard that is supported in &lt;a href=&quot;https://nodejs.org/dist/latest-v16.x/docs/api/crypto.html#cryptorandomuuidoptions&quot; rel=&quot;noreferrer&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/mdn-api_crypto_randomuuid&quot; rel=&quot;noreferrer&quot;&gt;an increasing number of browsers&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;If neither of those work for you, there is this method (based on the original answer to this question):\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uuidv4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ([&lt;span class=&quot;hljs-number&quot;&gt;1e7&lt;/span&gt;]+-&lt;span class=&quot;hljs-number&quot;&gt;1e3&lt;/span&gt;+-&lt;span class=&quot;hljs-number&quot;&gt;4e3&lt;/span&gt;+-&lt;span class=&quot;hljs-number&quot;&gt;8e3&lt;/span&gt;+-&lt;span class=&quot;hljs-number&quot;&gt;1e11&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[018]/g&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt; =&amp;gt;&lt;/span&gt;\n    (c ^ crypto.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint8Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &amp;gt;&amp;gt; c / &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n  );\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;uuidv4&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Note: &lt;strong&gt;The use of &lt;em&gt;any&lt;/em&gt; UUID generator that relies on Math.random() is strongly discouraged&lt;/strong&gt; (including snippets featured in previous versions of this answer) for &lt;a href=&quot;https://bocoup.com/blog/random-numbers&quot; rel=&quot;noreferrer&quot;&gt;reasons best-explained here&lt;/a&gt;. TL;DR: Math.random()-based solutions do not provide good uniqueness guarantees.&lt;/p&gt;\n    ","\n&lt;p&gt;UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier), according to &lt;a href=&quot;https://www.ietf.org/rfc/rfc4122.txt&quot; rel=&quot;noreferrer&quot;&gt;RFC 4122&lt;/a&gt;, are identifiers designed to provide certain uniqueness guarantees.&lt;/p&gt;\n&lt;p&gt;While it is possible to implement RFC-compliant UUIDs in a few lines of JavaScript code (e.g., see &lt;a href=&quot;https://stackoverflow.com/a/2117523/109538&quot;&gt;@broofa&apos;s answer&lt;/a&gt;, below) there are several common pitfalls:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Invalid id format (UUIDs must be of the form &quot;&lt;code&gt;xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx&lt;/code&gt;&quot;, where x is one of [0-9, a-f] &lt;em&gt;M&lt;/em&gt; is one of [1-5], and &lt;em&gt;N&lt;/em&gt; is [8, 9, a, or b]&lt;/li&gt;\n&lt;li&gt;Use of a low-quality source of randomness (such as &lt;code&gt;Math.random&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Thus, developers writing code for production environments are encouraged to use a rigorous, well-maintained implementation such as the &lt;a href=&quot;https://github.com/uuidjs/uuid&quot; rel=&quot;noreferrer&quot;&gt;uuid&lt;/a&gt; module.&lt;/p&gt;\n    ","\n&lt;p&gt;I really like how clean &lt;a href=&quot;https://stackoverflow.com/a/2117523/508537&quot;&gt;Broofa&apos;s answer&lt;/a&gt; is, but it&apos;s unfortunate that &lt;a href=&quot;https://stackoverflow.com/q/6906916/508537&quot;&gt;poor implementations of &lt;code&gt;Math.random&lt;/code&gt;&lt;/a&gt; leave the chance for collision.&lt;/p&gt;\n&lt;p&gt;Here&apos;s a similar &lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot; rel=&quot;noreferrer&quot;&gt;RFC4122&lt;/a&gt; version 4 compliant solution that solves that issue by offsetting the first 13 hex numbers by a hex portion of the timestamp, and once depleted offsets by a hex portion of the microseconds since pageload.  That way, even if &lt;code&gt;Math.random&lt;/code&gt; is on the same seed, both clients would have to generate the UUID the exact same number of microseconds since pageload (if high-perfomance time is supported) AND at the exact same millisecond (or 10,000+ years later) to get the same UUID:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateUUID&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Public Domain/MIT&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;();&lt;span class=&quot;hljs-comment&quot;&gt;//Timestamp&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d2 = ((&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; performance !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;) &amp;amp;&amp;amp; performance.&lt;span class=&quot;hljs-property&quot;&gt;now&lt;/span&gt; &amp;amp;&amp;amp; (performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)) || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//Time in microseconds since page-load or 0 if unsupported&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//random number between 0 and 16&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){&lt;span class=&quot;hljs-comment&quot;&gt;//Use timestamp until depleted&lt;/span&gt;\n            r = (d + r)%&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            d = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(d/&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;span class=&quot;hljs-comment&quot;&gt;//Use microseconds since page-load if supported&lt;/span&gt;\n            r = (d2 + r)%&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            d2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(d2/&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (c === &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? r : (r &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    });\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; onClick = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;uuid&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;generateUUID&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#uuid&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: monospace; &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.5em&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;generateUUID&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;onClick();&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Generate UUID&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/briguy37/8eacgpnq/&quot; rel=&quot;noreferrer&quot;&gt;Here&apos;s a fiddle to test.&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Modernized snippet for ES6&lt;/h3&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateUUID&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt;\n    d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;(),\n    d2 = (performance &amp;amp;&amp;amp; performance.&lt;span class=&quot;hljs-property&quot;&gt;now&lt;/span&gt; &amp;amp;&amp;amp; (performance.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)) || &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n      r = (d + r) % &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n      d = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(d / &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      r = (d2 + r) % &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n      d2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(d2 / &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? r : (r &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x7&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n  });\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;uuid&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;textContent&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;generateUUID&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;generateUUID&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, onClick);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#uuid&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: monospace; &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.5em&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;generateUUID&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Generate UUID&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid/2117523#2117523&quot;&gt;broofa&apos;s answer&lt;/a&gt; is pretty slick, indeed - impressively clever, really...  RFC4122 compliant, somewhat readable, and compact. Awesome!&lt;/p&gt;\n&lt;p&gt;But if you&apos;re looking at that regular expression, those many &lt;code&gt;replace()&lt;/code&gt; callbacks, &lt;code&gt;toString()&lt;/code&gt;&apos;s and &lt;code&gt;Math.random()&lt;/code&gt; function calls (where he&apos;s only using four bits of the result and wasting the rest), you may start to wonder about performance. Indeed, joelpt even decided to toss out an RFC for generic GUID speed with &lt;code&gt;generateQuickGUID&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;But, can we get speed &lt;em&gt;and&lt;/em&gt; RFC compliance? I say, YES!&lt;/strong&gt; Can we maintain readability? Well... Not really, but it&apos;s easy if you follow along.&lt;/p&gt;\n&lt;p&gt;But first, my results, compared to broofa, &lt;code&gt;guid&lt;/code&gt; (the accepted answer), and the non-rfc-compliant &lt;code&gt;generateQuickGuid&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;                  &lt;span class=&quot;hljs-title class_&quot;&gt;Desktop&lt;/span&gt;   &lt;span class=&quot;hljs-title class_&quot;&gt;Android&lt;/span&gt;\n           &lt;span class=&quot;hljs-attr&quot;&gt;broofa&lt;/span&gt;: 1617ms   12869ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e1&lt;/span&gt;:  636ms    5778ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e2&lt;/span&gt;:  606ms    4754ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e3&lt;/span&gt;:  364ms    3003ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e4&lt;/span&gt;:  329ms    2015ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e5&lt;/span&gt;:  147ms    1156ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e6&lt;/span&gt;:  146ms    1035ms\n               &lt;span class=&quot;hljs-attr&quot;&gt;e7&lt;/span&gt;:  105ms     726ms\n             &lt;span class=&quot;hljs-attr&quot;&gt;guid&lt;/span&gt;:  962ms   10762ms\n&lt;span class=&quot;hljs-attr&quot;&gt;generateQuickGuid&lt;/span&gt;:  292ms    2961ms\n  - &lt;span class=&quot;hljs-title class_&quot;&gt;Note&lt;/span&gt;: 500k iterations, results will vary by browser/&lt;span class=&quot;hljs-variable constant_&quot;&gt;CPU&lt;/span&gt;.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So by my 6th iteration of optimizations, I beat the most popular answer by over &lt;strong&gt;12 times&lt;/strong&gt;, the accepted answer by over &lt;strong&gt;9 times&lt;/strong&gt;, and the fast-non-compliant answer by &lt;strong&gt;2-3 times&lt;/strong&gt;. And I&apos;m still RFC&amp;nbsp;4122 compliant.&lt;/p&gt;\n&lt;p&gt;Interested in how? I&apos;ve put the full source on &lt;a href=&quot;http://jsfiddle.net/jcward/7hyaC/3/&quot; rel=&quot;noreferrer&quot;&gt;http://jsfiddle.net/jcward/7hyaC/3/&lt;/a&gt; and on &lt;a href=&quot;https://jsben.ch/xczxS&quot; rel=&quot;noreferrer&quot;&gt;https://jsben.ch/xczxS&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For an explanation, let&apos;s start with broofa&apos;s code:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;broofa&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, v = c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? r : (r&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    });\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;broofa&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;So it replaces &lt;code&gt;x&lt;/code&gt; with any random hexadecimal digit, &lt;code&gt;y&lt;/code&gt; with random data (except forcing the top two bits to &lt;code&gt;10&lt;/code&gt; per the RFC spec), and the regex doesn&apos;t match the &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;4&lt;/code&gt; characters, so he doesn&apos;t have to deal with them.  Very, very slick.&lt;/p&gt;\n&lt;p&gt;The first thing to know is that function calls are expensive, as are regular expressions (though he only uses 1, it has 32 callbacks, one for each match, and in each of the 32 callbacks it calls Math.random() and v.toString(16)).&lt;/p&gt;\n&lt;p&gt;The first step toward performance is to eliminate the RegEx and its callback functions and use a simple loop instead.  This means we have to deal with the &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; characters whereas broofa did not.  Also, note that we can use String Array indexing to keep his slick String template architecture:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; u=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i++&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;36) {\n        var c=&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;[i-1],r=Math.random()*16|0,v=c==&apos;x&apos;?r:(r&amp;amp;0x3|0x8);\n        u+=(c==&apos;-&apos;||c==&apos;4&apos;)?c:v.toString(16)\n    }\n    return u;\n}\n\nconsole.log(e1())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Basically, the same inner logic, except we check for &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;4&lt;/code&gt;, and using a while loop (instead of &lt;code&gt;replace()&lt;/code&gt; callbacks) gets us an almost 3X improvement!&lt;/p&gt;\n&lt;p&gt;The next step is a small one on the desktop but makes a decent difference on mobile.  Let&apos;s make fewer Math.random() calls and utilize all those random bits instead of throwing 87% of them away with a random buffer that gets shifted out each iteration.  Let&apos;s also move that template definition out of the loop, just in case it helps:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; u=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,m=&lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;,i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,rb=&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i++&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;36) {\n        var c=m[i-1],r=rb&amp;amp;0xf,v=c==&apos;x&apos;?r:(r&amp;amp;0x3|0x8);\n        u+=(c==&apos;-&apos;||c==&apos;4&apos;)?c:v.toString(16);rb=i%8==0?Math.random()*0xffffffff|0:rb&amp;gt;&amp;gt;4\n    }\n    return u\n}\n\nconsole.log(e2())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;This saves us 10-30% depending on platform.  Not bad.  But the next big step gets rid of the toString function calls altogether with an optimization classic - the look-up table.  A simple 16-element lookup table will perform the job of toString(16) in much less time:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; h=&lt;span class=&quot;hljs-string&quot;&gt;&apos;0123456789abcdef&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k=&lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* same as e4() below */&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; h=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;6&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;7&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; u=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,rb=&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i++&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;36) {\n        var c=k[i-1],r=rb&amp;amp;0xf,v=c==&apos;x&apos;?r:(r&amp;amp;0x3|0x8);\n        u+=(c==&apos;-&apos;||c==&apos;4&apos;)?c:h[v];rb=i%8==0?Math.random()*0xffffffff|0:rb&amp;gt;&amp;gt;4\n    }\n    return u\n}\n\nconsole.log(e4())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The next optimization is another classic.  Since we&apos;re only handling four bits of output in each loop iteration, let&apos;s cut the number of loops in half and process eight bits in each iteration.  This is tricky since we still have to handle the RFC compliant bit positions, but it&apos;s not too hard.  We then have to make a larger lookup table (16x16, or 256) to store 0x00 - 0xFF, and we build it only once, outside the e5() function.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lut = []; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; i++) { lut[i] = (i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)+(i).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e5&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; k=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; u=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;,i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,rb=&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i++&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;20) {\n        var c=k[i-1],r=rb&amp;amp;0xff,v=c==&apos;x&apos;?r:(c==&apos;y&apos;?(r&amp;amp;0x3f|0x80):(r&amp;amp;0xf|0x40));\n        u+=(c==&apos;-&apos;)?c:lut[v];rb=i%4==0?Math.random()*0xffffffff|0:rb&amp;gt;&amp;gt;8\n    }\n    return u\n}\n\nconsole.log(e5())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;I tried an e6() that processes 16-bits at a time, still using the 256-element &lt;a href=&quot;https://en.wikipedia.org/wiki/Lookup_table&quot; rel=&quot;noreferrer&quot;&gt;LUT&lt;/a&gt;, and it showed the diminishing returns of optimization.  Though it had fewer iterations, the inner logic was complicated by the increased processing, and it performed the same on desktop, and only ~10% faster on mobile.&lt;/p&gt;\n&lt;p&gt;The final optimization technique to apply - unroll the loop.  Since we&apos;re looping a fixed number of times, we can technically write this all out by hand.  I tried this once with a single random variable, &lt;code&gt;r&lt;/code&gt;, that I kept reassigning, and performance tanked.  But with four variables assigned random data up front, then using the lookup table, and applying the proper RFC bits, this version smokes them all:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lut = []; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; i++) { lut[i] = (i&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;?&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)+(i).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;e7&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d0 = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d1 = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d2 = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d3 = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lut[d0&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d0&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d0&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d0&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;+\n    lut[d1&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d1&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;+lut[d1&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0x0f&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt;]+lut[d1&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;+\n    lut[d2&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0x3f&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0x80&lt;/span&gt;]+lut[d2&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;+lut[d2&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d2&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+\n    lut[d3&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d3&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d3&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;]+lut[d3&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0xff&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;e7&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Modualized:  &lt;a href=&quot;http://jcward.com/UUID.js&quot; rel=&quot;noreferrer&quot;&gt;http://jcward.com/UUID.js&lt;/a&gt; - &lt;code&gt;UUID.generate()&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The funny thing is, generating 16 bytes of random data is the easy part.  The whole trick is expressing it in &lt;em&gt;string&lt;/em&gt; format with RFC compliance, and it&apos;s most tightly accomplished with 16 bytes of random data, an unrolled loop and lookup table.&lt;/p&gt;\n&lt;p&gt;I hope my logic is correct -- it&apos;s very easy to make a mistake in this kind of tedious bit work. But the outputs look good to me. I hope you enjoyed this mad ride through code optimization!&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Be advised:&lt;/strong&gt; my primary goal was to show and teach potential optimization strategies.  Other answers cover important topics such as collisions and truly random numbers, which are important for generating good UUIDs.&lt;/p&gt;\n    ","\n&lt;p&gt;Use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; uniqueId = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;) + &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; =\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) + (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If IDs are generated more than 1 millisecond apart, they are 100% unique.&lt;/p&gt;\n&lt;p&gt;If two IDs are generated at shorter intervals, and assuming that the random method is truly random, this would generate IDs that are 99.99999999999999% likely to be globally unique (collision in 1 of 10^15).&lt;/p&gt;\n&lt;p&gt;You can increase this number by adding more digits, but to generate 100% unique IDs you will need to use a global counter.&lt;/p&gt;\n&lt;p&gt;If you need RFC compatibility, this formatting will pass as a valid version 4 GUID:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; u = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) + &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; guid = [u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;4000-8&apos;&lt;/span&gt; + u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;true&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;&lt;div class=&quot;snippet-display&quot; style=&quot;vertical-align: center&quot;&gt;&lt;p&gt;&lt;a class=&quot;snippet-show-link-chevron&quot;&gt;&lt;span class=&quot;expander-arrow-hide&quot; style=&quot;vertical-align: middle;&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;snippet-show-link&quot;&gt;&lt;span class=&quot;show-hide&quot; data-ishidden=&quot;true&quot; style=&quot;vertical-align: middle&quot;&gt;Show code snippet&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\n&lt;div class=&quot;snippet-code snippet-currently-hidden&quot; style=&quot;display: none;&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; u = &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;now&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; guid = [u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;4000-8&apos;&lt;/span&gt; + u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), u.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = guid;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;unique&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The above code follow the intention, but not the letter of the RFC. Among other discrepancies it&apos;s a few random digits short. (Add more random digits if you need it) The upside is that this is really fast :)\nYou can &lt;a href=&quot;https://www.freecodeformat.com/validate-uuid-guid.php&quot; rel=&quot;noreferrer&quot;&gt;test validity of your GUID here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s some code based on &lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot; rel=&quot;noreferrer&quot;&gt;RFC 4122&lt;/a&gt;, section 4.4 (Algorithms for Creating a UUID from Truly Random or Pseudo-Random Number).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createUUID&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// http://www.ietf.org/rfc/rfc4122.txt&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = [];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hexDigits = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0123456789abcdef&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;; i++) {\n        s[i] = hexDigits.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;0x10&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    s[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// bits 12-15 of the time_hi_and_version field to 0010&lt;/span&gt;\n    s[&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;] = hexDigits.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;((s[&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt;) | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// bits 6-7 of the clock_seq_hi_and_reserved to 01&lt;/span&gt;\n    s[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = s[&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;] = s[&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;] = s[&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uuid = s.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uuid;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is the fastest GUID-like string generator method in the format &lt;code&gt;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&lt;/code&gt;. It does not generate a standard-compliant GUID.&lt;/p&gt;\n&lt;p&gt;Ten million executions of this implementation take just 32.5 seconds, which is the fastest I&apos;ve ever seen in a browser (the only solution without loops/iterations).&lt;/p&gt;\n&lt;p&gt;The function is as simple as:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Generates a GUID string.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;string&lt;/span&gt;} The generated GUID.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@example&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;af8a8416&lt;/span&gt;-6e18-a307-bd9c-f2c947bbb3aa\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@author&lt;/span&gt; Slavik Meltser.\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@link&lt;/span&gt; http://slavik.meltser.info/?p=142\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;guid&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_p8&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = (&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;000000000&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s ? &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; + p.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; + p.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) : p ;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_p8&lt;/span&gt;() + &lt;span class=&quot;hljs-title function_&quot;&gt;_p8&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) + &lt;span class=&quot;hljs-title function_&quot;&gt;_p8&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) + &lt;span class=&quot;hljs-title function_&quot;&gt;_p8&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To test the performance, you can run this code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;guid&lt;/span&gt;();\n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;timeEnd&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;m sure most of you will understand what I did there, but maybe there is at least one person that will need an explanation:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The algorithm:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The &lt;code&gt;Math.random()&lt;/code&gt; function returns a decimal number between 0 and 1 with 16 digits after the decimal fraction point (for\nexample &lt;code&gt;0.4363923368509859&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Then we take this number and convert\nit to a string with base 16 (from the example above we&apos;ll get\n&lt;code&gt;0.6fb7687f&lt;/code&gt;).\n&lt;code&gt;Math.random().toString(16)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Then we cut off the &lt;code&gt;0.&lt;/code&gt; prefix (&lt;code&gt;0.6fb7687f&lt;/code&gt; =&amp;gt;\n&lt;code&gt;6fb7687f&lt;/code&gt;) and get a string with eight hexadecimal\ncharacters long.\n&lt;code&gt;(Math.random().toString(16).substr(2,8)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Sometimes the &lt;code&gt;Math.random()&lt;/code&gt; function will return\nshorter number (for example &lt;code&gt;0.4363&lt;/code&gt;), due to zeros at the end (from the example above, actually the number is &lt;code&gt;0.4363000000000000&lt;/code&gt;). That&apos;s why I&apos;m appending to this string &lt;code&gt;&quot;000000000&quot;&lt;/code&gt; (a string with nine zeros) and then cutting it off with &lt;code&gt;substr()&lt;/code&gt; function to make it nine characters exactly (filling zeros to the right).&lt;/li&gt;\n&lt;li&gt;The reason for adding exactly nine zeros is because of the worse case scenario, which is when the &lt;code&gt;Math.random()&lt;/code&gt; function will return exactly 0 or 1 (probability of 1/10^16 for each one of them). That&apos;s why we needed to add nine zeros to it (&lt;code&gt;&quot;0&quot;+&quot;000000000&quot;&lt;/code&gt; or &lt;code&gt;&quot;1&quot;+&quot;000000000&quot;&lt;/code&gt;), and then cutting it off from the second index (third character) with a length of eight characters. For the rest of the cases, the addition of zeros will not harm the result because it is cutting it off anyway.\n&lt;code&gt;Math.random().toString(16)+&quot;000000000&quot;).substr(2,8)&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;The assembly:&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;The GUID is in the following format &lt;code&gt;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;I divided the GUID into four pieces, each piece divided into two types (or formats): &lt;code&gt;XXXXXXXX&lt;/code&gt; and &lt;code&gt;-XXXX-XXXX&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Now I&apos;m building the GUID using these two types to assemble the GUID with call four pieces, as follows: &lt;code&gt;XXXXXXXX&lt;/code&gt; &lt;code&gt;-XXXX-XXXX&lt;/code&gt; &lt;code&gt;-XXXX-XXXX&lt;/code&gt; &lt;code&gt;XXXXXXXX&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;To differ between these two types, I added a flag parameter to a pair creator function &lt;code&gt;_p8(s)&lt;/code&gt;, the &lt;code&gt;s&lt;/code&gt; parameter tells the function whether to add dashes or not.&lt;/li&gt;\n&lt;li&gt;Eventually we build the GUID with the following chaining: &lt;code&gt;_p8() + _p8(true) + _p8(true) + _p8()&lt;/code&gt;, and return it.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;http://slavik.meltser.info/the-efficient-way-to-create-guid-uuid-in-javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Link to this post on my blog&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Enjoy! :-)&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a totally non-compliant but very performant implementation to generate an ASCII-safe GUID-like unique identifier.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateQuickGuid&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;) +\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Generates 26 [a-z0-9] characters, yielding a UID that is both shorter and more unique than RFC compliant GUIDs. Dashes can be trivially added if human-readability matters.&lt;/p&gt;\n\n&lt;p&gt;Here are usage examples and timings for this function and several of this question&apos;s other answers. The timing was performed under Chrome m25, 10 million iterations each.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateQuickGuid&lt;/span&gt;()\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;nvcjf1hs7tf8yyk4lmlijqkuo9&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;yq6gipxqta4kui8z05tgh9qeel&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;36dh5sec7zdj90sk2rx7pjswi2&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;32.&lt;/span&gt;5s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;GUID&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// John Millikin&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;7a342ca2-e79f-528e-6302-8f901b0b6888&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;57.&lt;/span&gt;8s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;regexGuid&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// broofa&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;396e0c46-09e4-4b19-97db-bd423774a4b3&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;91.&lt;/span&gt;2s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createUUID&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Kevin Hakanson&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;403aa1ab-9f70-44ec-bc08-5d5ac56bd8a5&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;65.&lt;/span&gt;9s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UUIDv4&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Jed Schmidt&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;f4d7d31f-fa83-431a-b30c-3e6cc37cc6ee&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;282.&lt;/span&gt;4s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;uuid&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// broofa&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;5BD52F55-E68F-40FC-93C2-90EE069CE545&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;225.&lt;/span&gt;8s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;uuidFast&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// broofa&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;6CB97A68-23A2-473E-B75B-11263781BBE6&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;92.&lt;/span&gt;0s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;uuidCompact&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// broofa&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;3d7b7a06-0a67-4b67-825c-e5c43ff8c1e8&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;229.&lt;/span&gt;0s\n\n&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bitwiseGUID&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// jablko&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;baeaa2f-7587-4ff1-af23-eeab3e92&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;79.&lt;/span&gt;6s\n\n&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;betterWayGUID&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// Andrea Turri&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;383585b0-9753-498d-99c3-416582e9662c&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;60.&lt;/span&gt;0s\n\n&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UUID&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// John Fowler&lt;/span&gt;\n&lt;span class=&quot;hljs-string&quot;&gt;&quot;855f997b-4369-4cdb-b7c9-7142ceaf39e8&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-attr&quot;&gt;runtime&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;62.&lt;/span&gt;2s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is the timing code.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;); \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10000000&lt;/span&gt;; i++) { \n    r = &lt;span class=&quot;hljs-title class_&quot;&gt;FuncToTest&lt;/span&gt;(); \n};\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;timeEnd&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;t&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;http://blog.shkedy.com/2007/01/createing-guids-with-client-side.html&quot; rel=&quot;noreferrer&quot;&gt;sagi shkedy&apos;s technical blog&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;generateGuid&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result, i, j;\n  result = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;; j++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( j == &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; || j == &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; || j == &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; || j == &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n      result = result + &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;;\n    i = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toUpperCase&lt;/span&gt;();\n    result = result + i;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are other methods that involve using an &lt;a href=&quot;https://en.wikipedia.org/wiki/ActiveX&quot; rel=&quot;noreferrer&quot;&gt;ActiveX&lt;/a&gt; control, but stay away from these!&lt;/p&gt;\n&lt;p&gt;I thought it was worth pointing out that no GUID generator can guarantee unique keys (check the &lt;a href=&quot;http://en.wikipedia.org/wiki/Globally_Unique_Identifier&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia article&lt;/a&gt;). There is always a chance of collisions. A GUID simply offers a large enough universe of keys to reduce the change of collisions to almost nil.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a combination of the &lt;a href=&quot;https://stackoverflow.com/a/2117523/11236&quot;&gt;top voted answer&lt;/a&gt;, with a workaround for &lt;a href=&quot;https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript&quot;&gt;Chrome&apos;s collisions&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;generateGUID = (&lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt;) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt; &amp;amp;&amp;amp;\n                &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getRandomValues&lt;/span&gt;) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;) ?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// If we have a cryptographically secure PRNG, use that&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; buf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint16Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(buf);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;S4&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret = num.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;){\n                ret = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;+ret;\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n        };\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])+&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;])+&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])+&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])+&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;])+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;])+&lt;span class=&quot;hljs-title function_&quot;&gt;S4&lt;/span&gt;(buf[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]));\n    }\n\n    :\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Otherwise, just use Math.random&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, v = c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? r : (r&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        });\n    };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is &lt;a href=&quot;http://jsbin.com/uqives/3&quot; rel=&quot;nofollow noreferrer&quot;&gt;on jsbin&lt;/a&gt; if you want to test it.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a solution dated Oct. 9, 2011 from a comment by user &lt;em&gt;jed&lt;/em&gt; at &lt;a href=&quot;https://gist.github.com/982883&quot; rel=&quot;noreferrer&quot;&gt;https://gist.github.com/982883&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;UUIDv4&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a?(a^&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;&amp;gt;&amp;gt;a/&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;):([&lt;span class=&quot;hljs-number&quot;&gt;1e7&lt;/span&gt;]+-&lt;span class=&quot;hljs-number&quot;&gt;1e3&lt;/span&gt;+-&lt;span class=&quot;hljs-number&quot;&gt;4e3&lt;/span&gt;+-&lt;span class=&quot;hljs-number&quot;&gt;8e3&lt;/span&gt;+-&lt;span class=&quot;hljs-number&quot;&gt;1e11&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[018]/g&lt;/span&gt;,b)}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This accomplishes the same goal as the &lt;a href=&quot;https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523&quot;&gt;current highest-rated answer&lt;/a&gt;, but in 50+ fewer bytes by exploiting coercion, recursion, and exponential notation. For those curious how it works, here&apos;s the annotated form of an older version of the function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;UUIDv4&lt;/span&gt; =\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;\n  a &lt;span class=&quot;hljs-comment&quot;&gt;// placeholder&lt;/span&gt;\n&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;hljs-comment&quot;&gt;// if the placeholder was passed, return&lt;/span&gt;\n    ? ( &lt;span class=&quot;hljs-comment&quot;&gt;// a random number from 0 to 15&lt;/span&gt;\n      a ^ &lt;span class=&quot;hljs-comment&quot;&gt;// unless b is 8,&lt;/span&gt;\n      &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// in which case&lt;/span&gt;\n      * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// a random number from&lt;/span&gt;\n      &amp;gt;&amp;gt; a/&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 8 to 11&lt;/span&gt;\n      ).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// in hexadecimal&lt;/span&gt;\n    : ( &lt;span class=&quot;hljs-comment&quot;&gt;// or otherwise a concatenated string:&lt;/span&gt;\n      [&lt;span class=&quot;hljs-number&quot;&gt;1e7&lt;/span&gt;] + &lt;span class=&quot;hljs-comment&quot;&gt;// 10000000 +&lt;/span&gt;\n      -&lt;span class=&quot;hljs-number&quot;&gt;1e3&lt;/span&gt; + &lt;span class=&quot;hljs-comment&quot;&gt;// -1000 +&lt;/span&gt;\n      -&lt;span class=&quot;hljs-number&quot;&gt;4e3&lt;/span&gt; + &lt;span class=&quot;hljs-comment&quot;&gt;// -4000 +&lt;/span&gt;\n      -&lt;span class=&quot;hljs-number&quot;&gt;8e3&lt;/span&gt; + &lt;span class=&quot;hljs-comment&quot;&gt;// -80000000 +&lt;/span&gt;\n      -&lt;span class=&quot;hljs-number&quot;&gt;1e11&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// -100000000000,&lt;/span&gt;\n      ).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;( &lt;span class=&quot;hljs-comment&quot;&gt;// replacing&lt;/span&gt;\n        &lt;span class=&quot;hljs-regexp&quot;&gt;/[018]/g&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// zeroes, ones, and eights with&lt;/span&gt;\n        b &lt;span class=&quot;hljs-comment&quot;&gt;// random hex digits&lt;/span&gt;\n      )\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;a href=&quot;https://github.com/kelektiv/node-uuid&quot; rel=&quot;noreferrer&quot;&gt;node-uuid&lt;/a&gt;. It provides simple, fast generation of &lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot; rel=&quot;noreferrer&quot;&gt;RFC4122&lt;/a&gt; UUIDS.&lt;/p&gt;\n&lt;p&gt;Features:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Generate RFC4122 version 1 or version 4 UUIDs&lt;/li&gt;\n&lt;li&gt;Runs in &lt;a href=&quot;https://en.wikipedia.org/wiki/Node.js&quot; rel=&quot;noreferrer&quot;&gt;Node.js&lt;/a&gt; and browsers.&lt;/li&gt;\n&lt;li&gt;Cryptographically strong random # generation on supporting platforms.&lt;/li&gt;\n&lt;li&gt;Small footprint (Want something smaller? &lt;a href=&quot;https://gist.github.com/982883&quot; rel=&quot;noreferrer&quot;&gt;Check this out!&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Install Using NPM:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;npm install uuid\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Or using uuid via a browser:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Download Raw File (uuid v1): &lt;a href=&quot;https://raw.githubusercontent.com/kelektiv/node-uuid/master/v1.js&quot; rel=&quot;noreferrer&quot;&gt;https://raw.githubusercontent.com/kelektiv/node-uuid/master/v1.js&lt;/a&gt;\nDownload Raw File (uuid v4): &lt;a href=&quot;https://raw.githubusercontent.com/kelektiv/node-uuid/master/v4.js&quot; rel=&quot;noreferrer&quot;&gt;https://raw.githubusercontent.com/kelektiv/node-uuid/master/v4.js&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Want even smaller? Check this out: &lt;a href=&quot;https://gist.github.com/jed/982883&quot; rel=&quot;noreferrer&quot;&gt;https://gist.github.com/jed/982883&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Generate a v1 UUID (time-based)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uuidV1 = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;uuid/v1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;uuidV1&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &apos;6c84fb90-12c4-11e1-840d-7b25c5ee775a&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Generate a v4 UUID (random)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uuidV4 = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;uuid/v4&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;uuidV4&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &apos;110ec58a-a0f2-4ac4-8393-c866d813b8d1&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Generate a v5 UUID (namespace)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uuidV5 = &lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;uuid/v5&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... using predefined DNS namespace (for domain names)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;uuidV5&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello.example.com&apos;&lt;/span&gt;, v5.&lt;span class=&quot;hljs-property&quot;&gt;DNS&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &apos;fdda765f-fc57-5604-a269-52a7df8164ec&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... using predefined URL namespace (for, well, URLs)&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;uuidV5&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;http://example.com/hello&apos;&lt;/span&gt;, v5.&lt;span class=&quot;hljs-property&quot;&gt;URL&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &apos;3bbcee75-cecc-5b56-8031-b6641c1ed1f1&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... using a custom namespace&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;MY_NAMESPACE&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;(previously generated unique uuid string)&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;uuidV5&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;MY_NAMESPACE&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; &apos;90123e1c-7512-523e-bb28-76fab9f2f73d&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;ECMAScript&amp;nbsp;2015 (ES6):&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; uuid &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;uuid/v4&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; id = &lt;span class=&quot;hljs-title function_&quot;&gt;uuid&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uuid = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; buf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint32Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(buf);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; idx = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt;) {\n        idx++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = (buf[idx&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;gt;&amp;gt; ((idx%&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; v = c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? r : (r&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    });\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This version is based on Briguy37&apos;s answer and some bitwise operators to extract nibble sized windows from the buffer.&lt;/p&gt;\n&lt;p&gt;It should adhere to the RFC Type 4 (random) schema, since I had &lt;em&gt;problems&lt;/em&gt; last time parsing non-compliant UUIDs with Java&apos;s UUID.&lt;/p&gt;\n    ","\n&lt;p&gt;This creates a version 4 UUID (created from pseudo random numbers):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uuid&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chars = &lt;span class=&quot;hljs-string&quot;&gt;&apos;0123456789abcdef&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uuid = [], rnd = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;random&lt;/span&gt;, r;\n   uuid[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = uuid[&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;] = uuid[&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;] = uuid[&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;;\n   uuid[&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// version 4&lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;; i++)\n   {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!uuid[i])\n      {\n         r = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; | &lt;span class=&quot;hljs-title function_&quot;&gt;rnd&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;\n\n         uuid[i] = chars[(i == &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;) ? (r &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt;) | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt; : r &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xf&lt;/span&gt;];\n      }\n   }\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uuid.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is a sample of the UUIDs generated:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;682db637-0f31-4847-9cdf-25ba9613a75c\n97d19478-3ab2-4aa1-b8cc-a1c3540f54aa\n2eed04c9-2692-456d-a0fd-51012f947136\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Simple JavaScript module as a combination of best answers in this question.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; crypto = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;msCrypto&lt;/span&gt; || &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// IE11 fix&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Guid&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Guid&lt;/span&gt; || (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;EMPTY&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;00000000-0000-0000-0000-000000000000&apos;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _padLeft = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;paddingString, width, replacementChar&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; paddingString.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt;= width ? paddingString : &lt;span class=&quot;hljs-title function_&quot;&gt;_padLeft&lt;/span&gt;(replacementChar + paddingString, width, replacementChar || &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _s4 = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hexadecimalResult = number.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_padLeft&lt;/span&gt;(hexadecimalResult, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;);\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _cryptoGuid = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; buffer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Uint16Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);\n    crypto.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(buffer);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]), &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]) + &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]) + &lt;span class=&quot;hljs-title function_&quot;&gt;_s4&lt;/span&gt;(buffer[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;])].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _guid = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; currentDateMilliseconds = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;getTime&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;currentChar&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; randomChar = (currentDateMilliseconds + &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) % &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n      currentDateMilliseconds = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(currentDateMilliseconds / &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (currentChar === &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? randomChar : (randomChar &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x7&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    });\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; create = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hasCrypto = crypto != &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt; &amp;amp;&amp;amp; crypto !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,\n      hasRandomValues = &lt;span class=&quot;hljs-title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;getRandomValues&lt;/span&gt;) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;undefined&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (hasCrypto &amp;amp;&amp;amp; hasRandomValues) ? &lt;span class=&quot;hljs-title function_&quot;&gt;_cryptoGuid&lt;/span&gt;() : &lt;span class=&quot;hljs-title function_&quot;&gt;_guid&lt;/span&gt;();\n  };\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;newGuid&lt;/span&gt;: create,\n    &lt;span class=&quot;hljs-attr&quot;&gt;empty&lt;/span&gt;: &lt;span class=&quot;hljs-variable constant_&quot;&gt;EMPTY&lt;/span&gt;\n  };\n})();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// DEMO: Create and show GUID&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1. New Guid:   &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Guid&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;newGuid&lt;/span&gt;());\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// DEMO: Show empty GUID&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2. Empty Guid: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Guid&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;empty&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Usage:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Guid.newGuid()&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&quot;c6c2d12f-d76b-5739-e551-07e6de5b0807&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Guid.empty&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&quot;00000000-0000-0000-0000-000000000000&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The version below is an adaptation of &lt;a href=&quot;https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid/2117523#2117523&quot;&gt;broofa&apos;s answer&lt;/a&gt;, but updated to include a &quot;true&quot; random function that uses crypto libraries where available, and the Alea() function as a fallback.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log2&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;log2&lt;/span&gt; || &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(n) / &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;); }\n  &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;trueRandom&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; crypt = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;crypto&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;msCrypto&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (crypt &amp;amp;&amp;amp; crypt.&lt;span class=&quot;hljs-property&quot;&gt;getRandomValues&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// If we have a crypto library, use it&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; random = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;min, max&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rval = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; range = max - min;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (range &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min;\n          }\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bits_needed = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log2&lt;/span&gt;(range));\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bits_needed &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;We cannot generate numbers larger than 53 bits.&quot;&lt;/span&gt;);\n          }\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bytes_needed = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;ceil&lt;/span&gt;(bits_needed / &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mask = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, bits_needed) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n          &lt;span class=&quot;hljs-comment&quot;&gt;// 7776 -&amp;gt; (2^13 = 8192) -1 == 8191 or 0x00001111 11111111&lt;/span&gt;\n\n          &lt;span class=&quot;hljs-comment&quot;&gt;// Create byte array and fill with N random numbers&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; byteArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint8Array&lt;/span&gt;(bytes_needed);\n          crypt.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(byteArray);\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = (bytes_needed - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes_needed; i++ ) {\n              rval += byteArray[i] * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, p);\n              p -= &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;\n          }\n\n          &lt;span class=&quot;hljs-comment&quot;&gt;// Use &amp;amp; to apply the mask and reduce the number of recursive lookups&lt;/span&gt;\n          rval = rval &amp;amp; mask;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rval &amp;gt;= range) {\n              &lt;span class=&quot;hljs-comment&quot;&gt;// Integer out of acceptable range&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;(min, max);\n          }\n          &lt;span class=&quot;hljs-comment&quot;&gt;// Return an integer that falls within the range&lt;/span&gt;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min + rval;\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1000000000&lt;/span&gt;) / &lt;span class=&quot;hljs-number&quot;&gt;1000000000&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r;\n      };\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// From https://web.archive.org/web/20120502223108/http://baagoe.com/en/RandomMusings/javascript/&lt;/span&gt;\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Johannes Baagøe &amp;lt;baagoe@baagoe.com&amp;gt;, 2010&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Mash&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0xefc8249d&lt;/span&gt;;\n\n          &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mash = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;) {\n              data = data.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;();\n              &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; data.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n                  n += data.&lt;span class=&quot;hljs-title function_&quot;&gt;charCodeAt&lt;/span&gt;(i);\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; h = &lt;span class=&quot;hljs-number&quot;&gt;0.02519603282416938&lt;/span&gt; * n;\n                  n = h &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n                  h -= n;\n                  h *= n;\n                  n = h &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n                  h -= n;\n                  n += h * &lt;span class=&quot;hljs-number&quot;&gt;0x100000000&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 2^32&lt;/span&gt;\n              }\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (n &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;2.3283064365386963e-10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 2^-32&lt;/span&gt;\n          };\n\n          mash.&lt;span class=&quot;hljs-property&quot;&gt;version&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Mash 0.9&apos;&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; mash;\n      }\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;// From http://baagoe.com/en/RandomMusings/javascript/&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Alea&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;args&lt;/span&gt;) {\n              &lt;span class=&quot;hljs-comment&quot;&gt;// Johannes BaagÃ¸e &amp;lt;baagoe@baagoe.com&amp;gt;, 2010&lt;/span&gt;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s0 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s1 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s2 = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                  args = [+&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;()];\n              }\n              &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; mash = &lt;span class=&quot;hljs-title class_&quot;&gt;Mash&lt;/span&gt;();\n              s0 = &lt;span class=&quot;hljs-title function_&quot;&gt;mash&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n              s1 = &lt;span class=&quot;hljs-title function_&quot;&gt;mash&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n              s2 = &lt;span class=&quot;hljs-title function_&quot;&gt;mash&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;);\n\n              &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n                  s0 -= &lt;span class=&quot;hljs-title function_&quot;&gt;mash&lt;/span&gt;(args[i]);\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s0 &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                      s0 += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n                  }\n                  s1 -= &lt;span class=&quot;hljs-title function_&quot;&gt;mash&lt;/span&gt;(args[i]);\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s1 &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                      s1 += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n                  }\n                  s2 -= &lt;span class=&quot;hljs-title function_&quot;&gt;mash&lt;/span&gt;(args[i]);\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s2 &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n                      s2 += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n                  }\n              }\n              mash = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n              &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; random = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = &lt;span class=&quot;hljs-number&quot;&gt;2091639&lt;/span&gt; * s0 + c * &lt;span class=&quot;hljs-number&quot;&gt;2.3283064365386963e-10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 2^-32&lt;/span&gt;\n                  s0 = s1;\n                  s1 = s2;\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s2 = t - (c = t | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n              };\n              random.&lt;span class=&quot;hljs-property&quot;&gt;uint32&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;0x100000000&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 2^32&lt;/span&gt;\n              };\n              random.&lt;span class=&quot;hljs-property&quot;&gt;fract53&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() +\n                      (&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;0x200000&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;1.1102230246251565e-16&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 2^-53&lt;/span&gt;\n              };\n              random.&lt;span class=&quot;hljs-property&quot;&gt;version&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Alea 0.9&apos;&lt;/span&gt;;\n              random.&lt;span class=&quot;hljs-property&quot;&gt;args&lt;/span&gt; = args;\n              &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; random;\n\n          }(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;)));\n      };\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Alea&lt;/span&gt;();\n  }\n}());\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;guid&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;c&lt;/span&gt;)    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;trueRandom&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n          v = c == &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt; ? r : (r &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;JavaScript project on GitHub - &lt;a href=&quot;https://github.com/LiosK/UUID.js&quot;&gt;https://github.com/LiosK/UUID.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;UUID.js The RFC-compliant UUID generator for JavaScript.&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;See RFC 4122 &lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot;&gt;http://www.ietf.org/rfc/rfc4122.txt&lt;/a&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;strong&gt;Features Generates RFC 4122 compliant UUIDs.&lt;/strong&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Version 4 UUIDs (UUIDs from random numbers) and version 1 UUIDs\n  (time-based UUIDs) are available.&lt;/p&gt;\n  \n  &lt;p&gt;UUID object allows a variety of access to the UUID including access to\n  the UUID fields.&lt;/p&gt;\n  \n  &lt;p&gt;Low timestamp resolution of JavaScript is compensated by random\n  numbers.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// RFC 4122&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// A UUID is 128 bits long&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// String representation is five fields of 4, 2, 2, 2, and 6 bytes.&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Fields represented as lowercase, zero-filled, hexadecimal strings, and&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// are separated by dash characters&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// A version 4 UUID is generated by setting all but six bits to randomly&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// chosen values&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uuid = [\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;),\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the four most significant bits (bits 12 through 15) of the&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// time_hi_and_version field to the 4-bit version number from Section&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 4.1.3&lt;/span&gt;\n    (&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;.0625&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* 0x.1 */&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;.25&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* 0x.4 */&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Set the two most significant bits (bits 6 and 7) of the&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// clock_seq_hi_and_reserved to zero and one, respectively&lt;/span&gt;\n    (&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;.25&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* 0x.4 */&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/* 0x.8 */&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;),\n\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One line solution using Blobs.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createObjectURL&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Blob&lt;/span&gt;([])).&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The value at the end (31) depends on the length of the URL.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;A more compact and universal solution, as suggested by &lt;a href=&quot;https://stackoverflow.com/users/114558/rinogo&quot;&gt;rinogo&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createObjectURL&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Blob&lt;/span&gt;([])).&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those wanting an &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#History&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 4122&lt;/a&gt; version 4 compliant solution with speed considerations (few calls to Math.random()):&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rand = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;random&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;UUID&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nbr, randStr = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n        randStr += (nbr = &lt;span class=&quot;hljs-title function_&quot;&gt;rand&lt;/span&gt;()).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;);\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (randStr.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (\n        randStr.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; +\n        randStr.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-4&quot;&lt;/span&gt; +\n        randStr.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; +\n        ((nbr*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;|&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) + &lt;span class=&quot;hljs-comment&quot;&gt;// [89ab]&lt;/span&gt;\n        randStr.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt; +\n        randStr.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)\n    );\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;hljs-title function_&quot;&gt;UUID&lt;/span&gt;() );&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;The above function should have a decent balance between speed and randomness.&lt;/p&gt;\n    ","\n&lt;p&gt;I wanted to understand &lt;a href=&quot;https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid/2117523#2117523&quot;&gt;broofa&apos;s answer&lt;/a&gt;, so I expanded it and added comments:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uuid = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(\n        &lt;span class=&quot;hljs-regexp&quot;&gt;/[xy]/g&lt;/span&gt;,\n        &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;match&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-comment&quot;&gt;/*\n            * Create a random nibble. The two clever bits of this code:\n            *\n            * - Bitwise operations will truncate floating point numbers\n            * - For a bitwise OR of any x, x | 0 = x\n            *\n            * So:\n            *\n            * Math.random * 16\n            *\n            * creates a random floating point number\n            * between 0 (inclusive) and 16 (exclusive) and\n            *\n            * | 0\n            *\n            * truncates the floating point number into an integer.\n            */&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; randomNibble = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;/*\n            * Resolves the variant field. If the variant field (delineated\n            * as y in the initial string) is matched, the nibble must\n            * match the mask (where x is a do-not-care bit):\n            *\n            * 10xx\n            *\n            * This is achieved by performing the following operations in\n            * sequence (where x is an intermediate result):\n            *\n            * - x &amp;amp; 0x3, which is equivalent to x % 3\n            * - x | 0x8, which is equivalent to x + 8\n            *\n            * This results in a nibble between 8 inclusive and 11 exclusive,\n            * (or 1000 and 1011 in binary), all of which satisfy the variant\n            * field mask above.\n            */&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; nibble = (match == &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;) ?\n                (randomNibble &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x3&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;) :\n                randomNibble;\n\n            &lt;span class=&quot;hljs-comment&quot;&gt;/*\n            * Ensure the nibble integer is encoded as base 16 (hexadecimal).\n            */&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; nibble.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        }\n    );\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I adjusted my own UUID/GUID generator with some extras &lt;a href=&quot;http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I&apos;m using &lt;a href=&quot;http://baagoe.com/en/RandomMusings/javascript/&quot; rel=&quot;nofollow noreferrer&quot;&gt;the following Kybos&lt;/a&gt; random number generator to be a bit more cryptographically sound.&lt;/p&gt;\n&lt;p&gt;Below is my script with the Mash and Kybos methods from baagoe.com excluded.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//UUID/Guid Generator&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// use: UUID.create() or UUID.createSequential()&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// convenience:  UUID.empty, UUID.tryParse(string)&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;w&lt;/span&gt;){\n  &lt;span class=&quot;hljs-comment&quot;&gt;// From http://baagoe.com/en/RandomMusings/javascript/&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Johannes BaagÃ¸e &amp;lt;baagoe@baagoe.com&amp;gt;, 2010&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//function Mash() {...};&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// From http://baagoe.com/en/RandomMusings/javascript/&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//function Kybos() {...};&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rnd = &lt;span class=&quot;hljs-title class_&quot;&gt;Kybos&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//UUID/GUID Implementation from http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;UUID&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;empty&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;00000000-0000-0000-0000-000000000000&quot;&lt;/span&gt;\n    ,&lt;span class=&quot;hljs-string&quot;&gt;&quot;parse&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;input&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret = input.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;trim&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toLowerCase&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/^[\\s\\r\\n]+|[\\{\\}]|[\\s\\r\\n]+$/g&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;hljs-regexp&quot;&gt;/[a-f0-9]{8}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{12}/&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(ret))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to parse UUID&quot;&lt;/span&gt;);\n    }\n    ,&lt;span class=&quot;hljs-string&quot;&gt;&quot;createSequential&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Date&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;valueOf&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; ret = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; + ret);\n      ret = ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//only least significant part&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;ret += &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;rnd&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt; + ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;89AB&quot;&lt;/span&gt;[&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)] + ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),  ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;);\n    }\n    ,&lt;span class=&quot;hljs-string&quot;&gt;&quot;create&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ret = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;ret.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;;ret += &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;rnd&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;0xffffffff&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt; + ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;89AB&quot;&lt;/span&gt;[&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()*&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)] + ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),  ret.&lt;span class=&quot;hljs-title function_&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)].&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;);\n    }\n    ,&lt;span class=&quot;hljs-string&quot;&gt;&quot;random&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;rnd&lt;/span&gt;();\n    }\n    ,&lt;span class=&quot;hljs-string&quot;&gt;&quot;tryParse&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;input&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;UUID&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(input);\n      } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(ex) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;UUID&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;empty&lt;/span&gt;;\n      }\n    }\n  };\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;UUID&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;new&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-variable constant_&quot;&gt;UUID&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;create&lt;/span&gt;;\n\n  w.&lt;span class=&quot;hljs-property&quot;&gt;UUID&lt;/span&gt; = w.&lt;span class=&quot;hljs-property&quot;&gt;Guid&lt;/span&gt; = &lt;span class=&quot;hljs-variable constant_&quot;&gt;UUID&lt;/span&gt;;\n}(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Added in: v15.6.0, v14.17.0 there is a built-in &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_randomuuid_options&quot; rel=&quot;noreferrer&quot;&gt;crypto.randomUUID()&lt;/a&gt; function.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; crypto &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;crypto&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uuid = crypto.&lt;span class=&quot;hljs-title function_&quot;&gt;randomUUID&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In the browser, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;crypto.randomUUID()&lt;/code&gt;&lt;/a&gt; is currently supported in Chromium 92+ and Firefox 95+.&lt;/p&gt;\n    ","\n&lt;p&gt;ES6 sample&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;guid&lt;/span&gt;=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)=&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;s4&lt;/span&gt;=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)=&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;()) * &lt;span class=&quot;hljs-number&quot;&gt;0x10000&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;substring&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);     \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${s4() + s4()}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${s4()}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${s4()}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${s4()}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${s4() + s4() + s4()}&lt;/span&gt;`&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The native &lt;code&gt;URL.createObjectURL&lt;/code&gt; is generating an UUID. You can take advantage of this.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uuid&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; url = &lt;span class=&quot;hljs-variable constant_&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;createObjectURL&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Blob&lt;/span&gt;())\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; [id] = url.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;reverse&lt;/span&gt;()\n  &lt;span class=&quot;hljs-variable constant_&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;revokeObjectURL&lt;/span&gt;(url)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; id\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The better way:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;\n  a, b               &lt;span class=&quot;hljs-comment&quot;&gt;// Placeholders&lt;/span&gt;\n&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(               &lt;span class=&quot;hljs-comment&quot;&gt;// Loop :)&lt;/span&gt;\n      b = a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// b - result , a - numeric variable&lt;/span&gt;\n      a++ &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n      b += a*&lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// If &quot;a&quot; is not 9 or 14 or 19 or 24&lt;/span&gt;\n                  ?  &lt;span class=&quot;hljs-comment&quot;&gt;//  return a random number or 4&lt;/span&gt;\n           (\n               a^&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;              &lt;span class=&quot;hljs-comment&quot;&gt;// If &quot;a&quot; is not 15,&lt;/span&gt;\n                  ?              &lt;span class=&quot;hljs-comment&quot;&gt;// generate a random number from 0 to 15&lt;/span&gt;\n               &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;^&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() *\n               (a^&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;// unless &quot;a&quot; is 20, in which case a random number from 8 to 11,&lt;/span&gt;\n                  :\n               &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;                 &lt;span class=&quot;hljs-comment&quot;&gt;//  otherwise 4&lt;/span&gt;\n           ).&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n                  :\n         &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;                     &lt;span class=&quot;hljs-comment&quot;&gt;//  In other cases, (if &quot;a&quot; is 9,14,19,24) insert &quot;-&quot;&lt;/span&gt;\n      );\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b\n }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Minimized:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(b=a=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;a++&lt;span class=&quot;language-xml&quot;&gt;&amp;lt;36;b+=a*51&amp;amp;52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):&apos;-&apos;);return b}\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you just need a random 128 bit string in no particular format, you can use:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uuid&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; crypto.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint32Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)).&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Which will return something like &lt;code&gt;2350143528-4164020887-938913176-2513998651&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I couldn&apos;t find any answer that uses a single 16-octet &lt;code&gt;TypedArray&lt;/code&gt; and a &lt;code&gt;DataView&lt;/code&gt;, so I think the following solution for generating a version 4 UUID per &lt;a href=&quot;https://www.ietf.org/rfc/rfc4122.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;the RFC&lt;/a&gt; will stand on its own here:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uuid4&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ho&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;n, p&lt;/span&gt;) =&amp;gt; n.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;padStart&lt;/span&gt;(p, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/// Return the hexadecimal text representation of number `n`, padded with zeroes to be of length `p`&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = crypto.&lt;span class=&quot;hljs-title function_&quot;&gt;getRandomValues&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint8Array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;/// Fill the buffer with random data&lt;/span&gt;\n    data[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] = (data[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xf&lt;/span&gt;) | &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/// Patch the 6th byte to reflect a version 4 UUID&lt;/span&gt;\n    data[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = (data[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x3f&lt;/span&gt;) | &lt;span class=&quot;hljs-number&quot;&gt;0x80&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/// Patch the 8th byte to reflect a variant 1 UUID (version 4 UUIDs are)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; view = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataView&lt;/span&gt;(data.&lt;span class=&quot;hljs-property&quot;&gt;buffer&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/// Create a view backed by a 16-byte buffer&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${ho(view.getUint32(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${ho(view.getUint16(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${ho(view.getUint16(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${ho(view.getUint16(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)}&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;${ho(view.getUint32(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;)}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${ho(view.getUint16(&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)}&lt;/span&gt;`&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/// Compile the canonical textual form from the array data&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I prefer it because it only relies on functions available to the standard ECMAScript platform, where possible -- which is all but one procedure.&lt;/p&gt;\n&lt;p&gt;At the time of writing this, &lt;code&gt;getRandomValues&lt;/code&gt; is not something implemented for the &lt;code&gt;crypto&lt;/code&gt; object in Node.js. However, it has the equivalent &lt;code&gt;randomBytes&lt;/code&gt; function which may be used instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Just another more readable variant with just two mutations.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uuid4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hex&lt;/span&gt; (s, b)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s +\n      (b &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   ).&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;) +  &lt;span class=&quot;hljs-comment&quot;&gt;// high nibble&lt;/span&gt;\n      (b &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0b1111&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// low nibble&lt;/span&gt;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; r = crypto.&lt;span class=&quot;hljs-property&quot;&gt;getRandomValues&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Uint8Array&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;));\n\n  r[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] = r[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0b01000000&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Set type 4: 0100&lt;/span&gt;\n  r[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = r[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;0b10000000&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Set variant: 100&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (hex, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; ) +\n         r.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (hex, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;) +\n         r.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,  &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (hex, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;) +\n         r.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (hex, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;) +\n         r.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt; (hex, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If your environment is SharePoint, there is a utility function called &lt;code&gt;SP.Guid.newGuid&lt;/code&gt; (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee659495(v=office.14).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;MSDN link&lt;/a&gt; which creates a new GUID. This function is inside the sp.init.js file. If you rewrite this function (to remove some other dependencies from other private functions), and it looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; newGuid = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; hexcodes = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0123456789abcdef&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;; index++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (index) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;:\n            result += &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:\n            value = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n            result += &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:\n            value = value &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;\n            result += &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;:\n            result += &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        result += hexcodes[value];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n};\n&lt;/code&gt;&lt;/pre&gt;\n    "],"363":["\n&lt;p&gt;I&apos;m going to go through your arguments one after another and try to show the errors in them. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s good to separate content from layout\n  But this is a fallacious argument; Cliché Thinking.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s not fallacious at all because HTML was designed intentionally. Misuse of an element might not be completely out of question (after all, new idioms have developed in other languages, as well) but possible negative implications have to be counterbalanced. Additionally, even if there were no arguments against misusing the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element today, there might be tomorrow because of the way browser vendors apply special treatment to the element. After all, they know that &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements are for tabular data only and might use this fact to improve the rendering engine, in the process subtly changing how &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;s behave, and thus breaking cases where it was previously misused.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;So what? Does my boss care? Do my users care?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Depends. Is your boss pointy-haired? Then he might not care. If she&apos;s competent, then she will care, because the users &lt;a href=&quot;http://www.hotdesign.com/seybold/&quot; rel=&quot;nofollow noreferrer&quot;&gt;will&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Perhaps me or my fellow developers who have to maintain a web page care... Is a table less maintainable? I think using a table is easier than using divs and css.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;del&gt;The majority of professional web developers seem to oppose you&lt;/del&gt;&lt;sup&gt;[&lt;em&gt;citation needed&lt;/em&gt;]&lt;/sup&gt;. That tables &lt;em&gt;are&lt;/em&gt; in fact less maintainable should be obvious. Using tables for layout means that changing the corporate layout will in fact mean changing every single page. This can be &lt;em&gt;very&lt;/em&gt; expensive. On the other hand, judicious use of semantically meaningful HTML combined with CSS &lt;em&gt;might&lt;/em&gt; confine such changes to the CSS and the pictures used.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;By the way... why is using a div or a span good separation of content from layout and a table not? Getting a good layout with only divs often requires a lot of nested divs.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Deeply nested &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s are an anti-pattern just as table layouts. Good web designers don&apos;t need many of them. On the other hand, even such deep-nested divs don&apos;t have many of the problems of table layouts. In fact, they can even contribute to a semantic structure by logically dividing the content in parts.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Readability of the code\n  I think it&apos;s the other way around. Most people understand html, little understand css. It&apos;s simpler.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Most people don&apos;t matter. Professionals matter. For professionals, table layouts create many more problems than HTML + CSS. This is like saying I shouldn&apos;t use GVim or Emacs because Notepad is simpler for most people. Or that I shouldn&apos;t use LaTeX because MS Word is simpler for most people.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s better for SEO not to use tables&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&apos;t know if this is true and wouldn&apos;t use this as an argument but it would be logical. Search engines search for &lt;em&gt;relevant&lt;/em&gt; data. While tabular data could of course be relevant, it&apos;s rarely what users search for. Users search for terms used in the page title or similarly prominent positions. It would therefore be logical to exclude tabular content from filtering and thus cutting the processing time (and costs!) by a large factor.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Tables are slower.\n  An extra tbody element has to be inserted. This is peanuts for modern web browsers.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The extra element has got nothing to do with tables being slower. On the other hand, the layout algorithm for tables is much harder, the browser often has to wait for the whole table to load before it can begin to layout the content. Additionally, caching of the layout won&apos;t work (CSS can easily be cached). All this has been mentioned before. &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Show me some benchmarks where the use of a table significantly slows down a page.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Unfortunately, I don&apos;t have any benchmark data. I would be interested in it myself because it&apos;s right that this argument lacks a certain scientific rigour.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Most web sites that need an upgrade need new content (html) as well. Scenarios where a new version of a web site only needs a new css file are not very likely.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not at all. I&apos;ve worked on several cases where changing the design was simplified by a separation of content and design. It&apos;s often still necessary to change some HTML code but the changes will always be much more confined. Additionally, design changes must on occasion be made dynamically. Consider template engines such as the one used by the WordPress blogging system. Table layouts would literally kill this system. I&apos;ve worked on a similar case for a commercial software. Being able to change the design without changing the HTML code was one of the business requirements.&lt;/p&gt;\n\n&lt;p&gt;Another thing. Table layout makes automated parsing of websites (screen scraping) much harder. This might sound trivial because, after all, who does it? I was surprised myself. Screen scraping can help a lot if the service in question doesn&apos;t offer a WebService alternative to access its data. I&apos;m working in bioinformatics where this is a sad reality. Modern web techniques and WebServices have not reached most developers and often, screen scraping is the only way to automate the process of getting data. No wonder that many biologists still perform such tasks manually. For thousands of data sets.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s my &lt;em&gt;programmer&apos;s answer&lt;/em&gt; from a &lt;a href=&quot;https://stackoverflow.com/questions/5323/is-there-a-business-reason-for-striving-for-pure-css-layout#75488&quot;&gt;simliar thread&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Semantics 101&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;First take a look at this code and think about what&apos;s wrong here...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;car&lt;/span&gt; {&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; wheels = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; engine;\n}\n\ncar mybike = new car();\nmybike.wheels = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\nmybike.engine = null;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem, of course, is that a bike is not a car. The car class is an inappropriate class for the bike instance. The code is error-free, but is &lt;em&gt;semantically&lt;/em&gt; incorrect. It reflects poorly on the programmer.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Semantics 102&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Now apply this to document markup. If your document needs to present tabular data, then the appropriate tag would be &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. If you place navigation into a table however, then you&apos;re misusing the intended purpose of the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element. In the second case, you&apos;re not presenting tabular data -- you&apos;re (mis)using the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element to achieve a presentational goal.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Will visitors notice? No. Does your boss care? Maybe. Do we sometimes cut corners as programmers?  Sure. But should we?  No. Who benefits if you use semantic markup? You -- and your professional reputation. Now go and do the right thing.&lt;/p&gt;\n    ","\n&lt;p&gt;Obvious answer: See &lt;a href=&quot;http://csszengarden.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Zen Garden&lt;/a&gt;. If you tell me that you can easily do the same with a table-based layout (remember - the HTML isn&apos;t changing) then by all means use tables for layout.&lt;/p&gt;\n\n&lt;p&gt;Two other important things are accessibility and SEO.&lt;/p&gt;\n\n&lt;p&gt;Both care about in what order information is presented. You cannot easily present your navigation at the top of the page if your table-based layout puts it in the 3rd cell of the 2nd row of the 2nd nested table on the page.&lt;/p&gt;\n\n&lt;p&gt;So your answers are maintainability, accessibility and SEO.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t be lazy. Do things the right and proper way even if they are a bit harder to learn.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30251/tables-instead-of-divs#30271&quot;&gt;See this duplicate question.&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;One item you&apos;re forgetting there is accessibility.  Table-based layouts don&apos;t translate as well if you need to use a screen reader, for example.  And if you do work for the government, supporting accessible browsers like screen readers may be &lt;em&gt;required&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;I also think you underestimate the impact of some of the things you mentioned in the question.  For example, if you are both the designer and the programmer, you may not have a full appreciation of how well it separates presentation from content.  But once you get into a shop where they are two distinct roles the advantages start to become clearer.&lt;/p&gt;\n\n&lt;p&gt;If you know what you&apos;re doing and have good tools, CSS really does have significant advantages over tables for layout.  And while each item by itself may not justify abandoning tables, taken together it&apos;s generally worth it.&lt;/p&gt;\n    ","\n&lt;p&gt;Unfortunately, CSS Zen Garden can no longer be used as an example of good HTML/CSS design.  Virtually all of their recent designs use graphics for section heading.  These graphic files are specified in the CSS.&lt;/p&gt;\n\n&lt;p&gt;Hence, a website whose purpose is to show the advantage of keeping design out of content, now regularly commits the UNSPEAKABLE SIN of putting content into design.  (If the section heading in the HTML file were to change, the section heading displayed would not).&lt;/p&gt;\n\n&lt;p&gt;Which only goes to show that even those advocate the strict DIV &amp;amp; CSS religion, can&apos;t follow their own rules.   You may use that as a guideline in how closely you follow them.&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t the definitive argument, by any means, but with CSS you can take the same markup and change the layout depending on medium, which is a nice advantage. For a print page you can quietly suppress navigation without having to create a printer-friendly page, for example.&lt;/p&gt;\n    ","\n&lt;p&gt;One table for layout wouldn&apos;t be that bad.  But you can&apos;t get the layout you need with just one table most of the time.  Pretty soon you have 2 or three nested tables.  This becomes very cumbersome.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;It IS a LOT harder to read.  That&apos;s not up to opinion.  There&apos;s just more nested tags with no identifying marks on them.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Separating content from presentation is a good thing because it allows you to focus on what you&apos;re doing.  Mixing the two leads to bloated pages that are hard to read.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;CSS for styles allows your browser to cache the files and subsequent requests are much faster.  This is HUGE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Tables lock you into a design.  Sure, not everyone needs the flexibility of CSS Zen Garden, but I&apos;ve never worked on a site where I didn&apos;t need to change the design a little bit here and there.  It&apos;s much easier with CSS.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Tables are hard to style.  You don&apos;t have very much flexibility with them (i.e. you still need to add HTML attributes to fully control a table&apos;s styles)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I haven&apos;t used tables for non-tabular data in probably 4 years.  I haven&apos;t looked back.&lt;/p&gt;\n\n&lt;p&gt;I&apos;d really like to suggest reading &lt;a href=&quot;http://cssmastery.com/&quot;&gt;CSS Mastery&lt;/a&gt; by Andy Budd.  It&apos;s fantastic.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://ecx.images-amazon.com/images/I/41TH5NFKPEL._SL500_BO2,204,203,200_PIsitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&quot;&gt;Image at ecx.images-amazon.com http://ecx.images-amazon.com/images/I/41TH5NFKPEL._SL500_BO2,204,203,200_PIsitb-dp-500-arrow,TopRight,45,-64_OU01_AA240_SH20_.jpg&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s good to separate content from layout&lt;br&gt;\n  But this is a fallacious argument; Cliche Thinking&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s a fallacious argument because HTML tables are layout!  The content is the &lt;em&gt;data&lt;/em&gt; in the table, the presentation is the table itself.  This is why separating CSS from HTML can be very difficult at times.  You&apos;re not separating content from presentation, you&apos;re separating presentation from presentation!  A pile of nested divs is no different than a table - it&apos;s just a different set of tags.  &lt;/p&gt;\n\n&lt;p&gt;The other problem with separating the HTML from the CSS is that they need intimate knowledge of one another - you really can&apos;t separate them fully.  The tag layout in the HTML is tightly coupled with the CSS file no matter what you do.&lt;/p&gt;\n\n&lt;p&gt;I think tables vs divs comes down to the needs of your application.  &lt;/p&gt;\n\n&lt;p&gt;In the application we develop at work, we needed a page layout where the pieces would dynamically size themselves to their content.  I spent days trying to get this to work cross-browser with CSS and DIVs and it was a complete nightmare.  We switched to tables and it all just &lt;em&gt;worked&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;However, we have a very closed audience for our product (we sell a piece of hardware with a web interface) and accessibility issues are not a concern for us.  I don&apos;t know why screen readers can&apos;t deal with tables well, but I guess if that&apos;s the way it is then developers have to handle it.&lt;/p&gt;\n    ","\n&lt;p&gt;CSS/DIV - it&apos;s just jobs for the design boys, isn&apos;t it.  The hundreds of hours I&apos;ve spent debugging DIV/CSS issues, searching the Internet to get some part of markup working with an obscure browser - it drives me mad.  You make one little change and the whole layout goes horrendously wrong - where on eath is the logic in that.  Spending hours moving something 3 pixels this way then something else 2 pixels the other to get them all to line up.  This just seems plain wrong to me somehow.  Just because you&apos;re a purist and something is &quot;not the right thing to do&quot; doesn&apos;t mean you should make use of it to the nth degree and under all circumstances, especially if it makes your life 1000 times easier.  &lt;/p&gt;\n\n&lt;p&gt;So I&apos;ve finally decided, purely on commercial grounds, although I keep use to minimum, if I anticipate 20 hours work to get a DIV placed correctly, I&apos;ll stick in a table.  It&apos;s wrong, it upsets the purists, but in most cases it costs less time and is cheaper to manage. I can then concentrate on getting the application working as the customer wants, rather than pleasing the purists.  They do pay the bills after all and my argument to a manager enforcing the use of CSS/DIV - I would merely point out the customers pay his salary as well!  &lt;/p&gt;\n\n&lt;p&gt;The only reason all these CSS/DIV arguments occur is because of the shortcoming of CSS in the first place and because the browsers aren&apos;t compatible with each other and if they were, half the web designers in the world would be out of a job.&lt;/p&gt;\n\n&lt;p&gt;When you design a windows form you don&apos;t try moving controls around after you have laid them out so I kind of think it&apos;s strange to me why you would you want to do this with a web form.  I simply can&apos;t understand this logic.  Get the layout right to start with and what&apos;s the problem.  I think it&apos;s because designers like to flirt with creativity, whilst application developers are more concerned with actually getting the application working, creating business objects, implementing business rules, working out how bits of customer data relates to each other, ensuring the thing meets the customers requirements - you know - like the real world stuff.  &lt;/p&gt;\n\n&lt;p&gt;Don&apos;t get me wrong, both arguments are valid, but please don&apos;t critise developers for choosing an easier, more logical approach to designing forms.  We often have more important things to worry about than the correct semantics of using a table over a div.&lt;/p&gt;\n\n&lt;p&gt;Case in point - based on this discussion I converted a few existing tds and trs to divs. 45 minutes messing about with it trying to get everything to line up next to each other and I gave up.  TDs back in 10 seconds later - works - straight away - on all browsers, nothing more to do.  Please try to make me understand - what possible justification do you have for wanting me to do it any other way!&lt;/p&gt;\n    ","\n&lt;p&gt;Layout should be easy. The fact that there are articles written on how to achieve a dynamic three column layout with header and footer in CSS shows that it is a poor layout system. Of course you can get it to work, but there are literally hundreds of articles online about how to do it. There are pretty much no such articles for a similar layout with tables because it&apos;s patently obvious. No matter what you say against tables and in favor of CSS, this one fact undoes it all: a basic three column layout in CSS is often called &quot;The Holy Grail&quot;.&lt;/p&gt;\n\n&lt;p&gt;If that doesn&apos;t make you say &quot;WTF&quot; then you really need to put down the kool-aid now.&lt;/p&gt;\n\n&lt;p&gt;I love CSS. It offers amazing styling options and some cool positioning tools, but as a layout engine it is deficient. There needs to be some type of dynamic grid positioning system. A straightforward way to align boxes on multiple axis without knowing their sizes first. I don&apos;t give a damn if you call it &amp;lt;table&amp;gt; or &amp;lt;gridlayout&amp;gt; or whatever, but this is a basic layout feature that is missing from CSS.&lt;/p&gt;\n\n&lt;p&gt;The larger problem is that by not admitting there are missing features, the CSS zealots have been holding CSS back from all it could be. I&apos;d be perfectly happy to stop using tables if CSS provided decent multi-axis grid positioning like basically every other layout engine in the world. (You do realize this problem has already been solved many times in many languages by everyone except the W3C, right? And nobody else denied that such a feature was useful.) &lt;/p&gt;\n\n&lt;p&gt;Sigh. Enough venting. Go ahead and stick your head back in the sand.&lt;/p&gt;\n    ","\n&lt;p&gt;According to 508 compliance (for screen readers for visually impared), tables should only be used to hold data and not for layout as it causes the screen readers to freak out.  Or so I&apos;ve been told.&lt;/p&gt;\n\n&lt;p&gt;If you assign names to each of the divs, you can skin them all together using CSS as well.  They&apos;re just a bit more of a pain to get to sit the way you need them to.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a section of html from a recent project:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{DYNAMIC(TITLE)}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Style-Type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;./styles/base.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page title --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Navigation items --&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;clearfix&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sidebar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page content --&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Footer content --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here&apos;s that same code as a table based layout.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xml:lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{DYNAMIC(TITLE)}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html;charset=utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Style-Type&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;./styles/base.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;cellspacing&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page Title --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;Navitem&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;Navitem&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Page content --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;colspan&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only cleanliness I see in that table based layout is the fact that I&apos;m overzealous with my indentation. I&apos;m sure that the content section would have a further two embedded tables.&lt;/p&gt;\n\n&lt;p&gt;Another thing to think about: &lt;strong&gt;filesizes&lt;/strong&gt;. I&apos;ve found that table-based layouts are twice the size of their CSS counterparts usually. On our hig-speed broadband that isn&apos;t a huge issue but it is on those with dial up modems.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d like to add that div-based layouts are easer to mantain, evolve, and refactor.  Just some changes in the CSS to reorder elements and it is done.  From my experience, redesign a layout that uses tables is a nightmare (more if there are nested tables).&lt;/p&gt;\n\n&lt;p&gt;Your code also has a meaning from a &lt;a href=&quot;http://en.wikipedia.org/wiki/Semantic_Web&quot; rel=&quot;nofollow noreferrer&quot;&gt;semantic&lt;/a&gt; point of view.&lt;/p&gt;\n    ","\n&lt;p&gt;No arguments in DIVs favour from me. &lt;/p&gt;\n\n&lt;p&gt;I&apos;d say : If the shoe fits, wear it.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s worth noting that it&apos;s difficult if not impossible to find a good DIV+CSS method of rendering contents in two or three columns, that is consistent on all browsers, and still looks just the way I intended.&lt;/p&gt;\n\n&lt;p&gt;This tips the balance a bit towards tables in most of my layouts, and altough I feel guilty of using them (dunny why, people just say it&apos;s bad so I try to listen to them), in the end , the pragmatic view is it&apos;s just easier and faster  for me to use TABLEs. I&apos;m not being payed by the hour, so tables are cheaper for me.&lt;/p&gt;\n    ","\n&lt;p&gt;CSS layouts are generally much better for accessibility, provided the content comes in a natural order and makes sense without a stylesheet.  And it&apos;s not just screen readers that struggle with table-based layouts: they also make it much harder for mobile browsers to render a page properly.&lt;/p&gt;\n\n&lt;p&gt;Also, with a div-based layout you can very easily do cool things with a print stylesheet such as excluding headers, footers and navigation from printed pages - I think it would be impossible, or at least much more difficult, to do that with a table-based layout.&lt;/p&gt;\n\n&lt;p&gt;If you&apos;re doubting that separation of content from layout is easier with divs than with tables, take a look at the div-based HTML at &lt;a href=&quot;http://www.csszengarden.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Zen Garden&lt;/a&gt;, see how changing the stylesheets can drastically change the layout, and think about whether you could achieve the same variety of layouts if the HTML was table based...  If you&apos;re doing a table-based layout, you&apos;re unlikely to be using CSS to control all the spacing and padding in the cells (if you were, you&apos;d almost certainly find it easier to use floating divs etc. in the first place).  Without using CSS to control all that, and because of the fact that tables specify the left-to-right and top-to bottom order of things in the HTML, tables tend to mean that your layout becomes very much fixed in the HTML.&lt;/p&gt;\n\n&lt;p&gt;Realistically I think it&apos;s very hard to completely change the layout of a div-and-CSS-based design without changing the divs a bit.  However, with a div-and-CSS-based layout it&apos;s much easier to tweak things like the spacing between various blocks, and their relative sizes.&lt;/p&gt;\n    ","\n&lt;p&gt;The fact that this is a hotly debated question is a testament to the failure of the W3C to anticipate the diversity of layout designs which would be attempted. Using divs+css for semantically-friendly layout is a great concept, but the details of implementation are so flawed that they actually limit creative freedom.&lt;/p&gt;\n\n&lt;p&gt;I attempted to switch one of our company&apos;s sites from tables to divs, and it was such a headache that I totally scrapped the hours of work I had poured into it and went back to tables. Trying to wrestle with my divs in order to gain control of vertical alignment has cursed me with major psychological issues that I will never shake as long as this debate rages on.&lt;/p&gt;\n\n&lt;p&gt;The fact that people must frequently come up with complex and ugly workarounds to accomplish simple design goals (such as vertical alignment) strongly suggests that the rules are not nearly flexible enough. If the specs ARE sufficient, then why do high-profile sites (like SO) find it necessary to bend the rules using tables and other workarounds?&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;I guess it&apos;s true that using the table element for layout has little to do with tabular data. So what? Does my boss care? Do my users care?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Google and other automated systems &lt;strong&gt;do&lt;/strong&gt; care, and they&apos;re just as important in many situations. Semantic code is easier for a non-intelligent system to parse and process.&lt;/p&gt;\n    ","\n&lt;p&gt;Having had to work with a website that involved 6 layers of nested tables generated by some application, and having had it generate invalid HTML, it was in fact a 3 hour job to rectify it breaking for a minor change. &lt;/p&gt;\n\n&lt;p&gt;This is of course the edge case, but table based design is unmaintainable. If you use css, you separate the style out so when fixing the HTML you have less to worry about breaking. &lt;/p&gt;\n\n&lt;p&gt;Also, try this with JavaScript.  Move a single table cell from one place to another place in another table. Rather complicated to perform where div/span would just work copy-paste-wise. &lt;/p&gt;\n\n&lt;p&gt;&quot;Does my boss care&quot; &lt;/p&gt;\n\n&lt;p&gt;If I were your boss. You would care. ;) If you value your life. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Layout flexibility&lt;/strong&gt;&lt;br&gt;\nImagine you&apos;re making a page with a large number of thumbnails.&lt;br&gt;\n&lt;strong&gt;DIVs&lt;/strong&gt;:&lt;br&gt;\nIf you put each thumbnail in a DIV, floated left, maybe 10 of them fit on a row. Make the window narrower, and BAM - it&apos;s 6 on a row, or 2, or however many fit.&lt;br&gt;\n&lt;strong&gt;TABLE:&lt;/strong&gt;&lt;br&gt;\nYou have to explicitly say how many cells are in a row. If the window is too narrow, the user has to scroll horizontally.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;&lt;br&gt;\nSame situation as above. Now you want to add three thumbnails to the third row.&lt;br&gt;\n&lt;strong&gt;DIVs:&lt;/strong&gt;&lt;br&gt;\nAdd them in. The layout will automatically adjust.&lt;br&gt;\n&lt;strong&gt;TABLE:&lt;/strong&gt;\nPaste the new cells into the third row. &lt;strong&gt;Oops!&lt;/strong&gt; Now there are too many items there. Cut some from that row and put them on the fourth row. Now there are too many items there. Cut some from that row... (etc)&lt;br&gt;\n(&lt;i&gt;Of course, if you&apos;re generating the rows and cells with server-side scripting, this probably won&apos;t be an issue.&lt;/i&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;I think that boat has sailed. If you look at the direction the industry has taken you will notice that CSS and Open Standards are the winners of that discussion. Which in turn means for most html work, with the exception of forms, the designers will use divs instead of tables. I have a hard time with that because I am not a CSS guru but thats the way it is. &lt;/p&gt;\n    ","\n&lt;p&gt;Also, don&apos;t forget, tables don&apos;t quite render well on mobile browsers. Sure, the iPhone has a kick-ass browser but everyone doesn&apos;t have an iPhone. Table rendering can be peanuts for modern browsers, but it&apos;s a bunch of watermelons for mobile browsers. &lt;/p&gt;\n\n&lt;p&gt;I have personally found that many people use too many &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, but in moderation, it can be extremely clean and easy to read. You mention that folks have a harder time reading CSS than tables; in terms of &apos;code&apos; that maybe true; but in terms of reading content (view &amp;gt; source) it is a heck of a lot easier to understand the structure with stylesheets than with tables.&lt;/p&gt;\n    ","\n&lt;p&gt;Looks like you are just used to tables and that&apos;s it.\nPutting layout in a table limits you for just that layout. With CSS you can move bits around, take a look at &lt;a href=&quot;http://csszengarden.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://csszengarden.com/&lt;/a&gt;\nAnd no, layout does not usally require a lot of nested divs.&lt;/p&gt;\n\n&lt;p&gt;With no tables for layout and proper semantics HTML is much cleaner, hence easier to read. \nWhy should someone who cannot understand CSS try to read it? And if someone considers himself to be webdeveloper then the good grasp of CSS is a must.&lt;/p&gt;\n\n&lt;p&gt;SEO benefits come from the ability to have most important content higher up the page and \nhaving better content-to-markup ratio.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.hotdesign.com/seybold/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.hotdesign.com/seybold/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;508 Compliance - the ability for a screenreader to make sense of your markup.&lt;/li&gt;\n&lt;li&gt;Waiting for render - tables don&apos;t render in the browser until it gets to the end of the &lt;code&gt;&amp;lt;/table&amp;gt;&lt;/code&gt; element.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The whole idea around semantic markup is the separation of markup and presentation, which includes layout.&lt;/p&gt;\n\n&lt;p&gt;Div&apos;s aren&apos;t replacing tables, they have their own use in separating content into blocks of related content (, ). When you don&apos;t have the skills and are relying on tables, you&apos;ll often have to separate your content in to cells in order to get the desired layout, but you wont need to touch the markup to achieve presentation when using semantic markup. This is really important when the markup is being generated rather than static pages.&lt;/p&gt;\n\n&lt;p&gt;Developers need to stop providing markup that implies layout so that those of us who do have the skills to present content can get on with our jobs, and developers don&apos;t have to come back to their code to make changes when presentation needs change.&lt;/p&gt;\n    ","\n&lt;p&gt;This isn&apos;t really about whether &apos;divs are better than tables for layout&apos;. Someone who understands CSS can duplicate any design using &apos;layout tables&apos; pretty straightforwardly. The real win is using HTML elements for what they are there for. The reason you would not use tables for non-tablular data is the same reason you don&apos;t store integers as character strings - technology works much more easily when you use it for the purpose for which it is desgined. If it was ever necessary to use tables for layout (because of browser shortcomings in the early 1990s) it certainly isn&apos;t now.&lt;/p&gt;\n    ","\n&lt;p&gt;Tools that use table layouts can become extraordinarily heavy due to the amount of code required to create the layout. SAP&apos;s Netweaver Portal by default uses TABLE to layout their pages.&lt;/p&gt;\n\n&lt;p&gt;The production SAP portal at my current gig has a home page whose HTML weighs over 60K and goes seven tables deep, three times within the page.  Add in the Javascript, the misuse of 16 iframes with similar table issues inside of them, overly heavy CSS etc, and the page weighs over 5MB.  &lt;/p&gt;\n\n&lt;p&gt;Taking the time to lower the page weight so you can use your bandwidth to do engaging activities with users is worth the effort. &lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s worth figuring out CSS and divs so the central content column loads and renders before the sidebar in a page layout.  But if you are struggling to use floating divs to vertically align a logo with some sponsorship text, just use the table and move on with life.  The Zen garden religion just doesn&apos;t give much bang for the buck.&lt;/p&gt;\n\n&lt;p&gt;The idea of separating content from presentation is to partition the application so different kinds of work affect different blocks of code.  This is actually about change management.  But coding standards can only examine the present state of code in a superficial manner.&lt;/p&gt;\n\n&lt;p&gt;The change log for an application that depends on coding standards to &quot;separate content from presentation&quot; will show a pattern of parallel changes across vertical silos.  If a change to &quot;content&quot; is always accompanied by a change to &quot;presentation&quot;, how successful is the partitioning?&lt;/p&gt;\n\n&lt;p&gt;If you really want to partition your code productively, use Subversion and review your change logs.  Then use the simplest coding techniques -- divs, tables, JavaScript, includes, functions, objects, continuations, whatever -- to structure the application so that the changes fit in a simple and comfortable manner.&lt;/p&gt;\n    ","\n&lt;p&gt;Because it&apos;s HELL to maintain a site that uses tables, and takes a LOT longer to code. If you&apos;re scared of floating divs, go take a course in them. They&apos;re not difficult to understand and they&apos;re approximately 100 times more efficient and a million times less a pain in the ass (unless you don&apos;t understand them -- but hey, welcome to the world of computers).&lt;/p&gt;\n\n&lt;p&gt;Anyone considering doing their layout with a table better not expect me to maintain it. It&apos;s the most ass-backwards way to render a website. Thank god we have a much better alternative now. I would NEVER go back.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s scary that some folks might not be aware of the time and energy benefits from creating a site using modern tools.&lt;/p&gt;\n    ","\n&lt;p&gt;Tables are not &lt;em&gt;in general&lt;/em&gt; easier or more maintainable than CSS. However, there are a few &lt;em&gt;specific&lt;/em&gt; layout-problems where tables are indeed the simplest and most flexible solution.&lt;/p&gt;\n\n&lt;p&gt;CSS is clearly preferable in cases where presentational markup and CSS support the same kind of design, no one in their right mind would argue that &lt;code&gt;font&lt;/code&gt;-tags are better than specifying typography in CSS, since CSS gives you the same power than &lt;code&gt;font&lt;/code&gt;-tags, but in a much cleaner way.&lt;/p&gt;\n\n&lt;p&gt;The issue with tables, however, is basically that the table-layout model in CSS is not supported in Microsoft Internet Explorer. Tables and CSS are therefore &lt;em&gt;not&lt;/em&gt; equivalent in power. The missing part is the &lt;strong&gt;grid-like behavior&lt;/strong&gt; of tables, where the edges of cells align both vertically and horizontally, while cells still expand to contain their content. This behavior is not easy to achieve in pure CSS without hardcoding some dimensions, which makes the design rigid and brittle (as long as we have to support Internet Explorer - in other browsers this is easliy achieved by using &lt;code&gt;display:table-cell&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;So it&apos;s not really a question of whether tables or CSS is preferable, but it is a question of recognizing the specific cases where use of tables may make the layout more flexible.&lt;/p&gt;\n\n&lt;p&gt;The most important reason for &lt;em&gt;not&lt;/em&gt; using tables is accessibility. The Web Content Accessibility Guidelines &lt;a href=&quot;http://www.w3.org/TR/WCAG10/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.w3.org/TR/WCAG10/&lt;/a&gt; advice againt using tables for layout. If you are concerned about accessibility (and in some cases you may be legally obliged to), you should use CSS even if tables are simpler. Note that you can &lt;em&gt;always&lt;/em&gt; create the same layout with CSS as with tables, it might just require more work.&lt;/p&gt;\n    ","\n&lt;p&gt;I was surprised to see some issues were not already covered, so here are my 2 cents, in addition to all the very valid points made earlier:&lt;/p&gt;\n\n&lt;p&gt;.1. &lt;strong&gt;CSS &amp;amp; SEO:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;a) CSS used to have a very significant impact on SEO by allowing to position the content in the page wherever you want. A few years ago, Search Engines were giving a significant emphasis to &quot;on-page&quot; factors. Something at the top of the page was deemed more relevant to the page than something located at the bottom. &quot;Top of the page&quot; for a spider meant &quot;at the beginning of the code&quot;. Using CSS, you could organize your keyword-rich content at the beginning of the code, and still position it wherever you liked in the page. This is still somewhat relevant, but on page factors are less and less important for page ranking.&lt;/p&gt;\n\n&lt;p&gt;b) When the layout is moved over to CSS, the HTML page is lighter and therefore loads faster for a search engine spider. (spiders don&apos;t bother downloading external css files). Fast loading pages is an important ranking consideration for several search engines, including Google&lt;/p&gt;\n\n&lt;p&gt;c) SEO work often requires testing and changing things, which is much more convenient with a CSS based layout&lt;/p&gt;\n\n&lt;p&gt;.2. &lt;strong&gt;Generated content:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A table is considerably easier to generate programmically than the equivalent CSS layout.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;foreach ($comment as $key=&amp;gt;$value)\n{\n   echo &quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$key&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;$value&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Generating a table is simple and safe. It is self-contained and integrates well within any template. To do the same with CSS is considerably harder and may be of no benefit at all: hard to edit the CSS stylesheet on the flight, and adding the style inline is no different from using a table (content is not separated from layout).&lt;/p&gt;\n\n&lt;p&gt;Further, when a table is generated, the content (in variables) is already separated from the layout (in code), making it as easy to modify.&lt;/p&gt;\n\n&lt;p&gt;This is one reason why some very well designed websites (SO for instance) still use table layouts.&lt;/p&gt;\n\n&lt;p&gt;Of course, if the results need to be acted upon through JavaScript, divs are worth the trouble. &lt;/p&gt;\n\n&lt;p&gt;.3. &lt;strong&gt;Quick conversion testing&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When figuring out what works for a specific audience, it is useful to be able to change the layout in various ways to figure out what gets the best results. A CSS based layout makes things considerably easier&lt;/p&gt;\n\n&lt;p&gt;.4. &lt;strong&gt;Different solutions for different problems&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Layout tables are usually dissed because &quot;everybody knows divs &amp;amp; CSS&quot; are the way to go. &lt;/p&gt;\n\n&lt;p&gt;However the fact remains that tables are faster to create, easier to understand and are more robust than most CSS layouts. (Yes, CSS can be as robust, but a quick look through the net on different browsers and screen resolutions shows it&apos;s not often the case)&lt;/p&gt;\n\n&lt;p&gt;There are a lot of downsides to tables, including maintenance, lack of flexibility... but let&apos;s not throw the baby with the bath water. There are plenty of professional uses for a solution which is both quick and reliable. &lt;/p&gt;\n\n&lt;p&gt;Some time ago, I had to rewrite a clean and simple CSS layout using tables because a significant portion of the users would be using an older version of IE with really bad support for CSS&lt;/p&gt;\n\n&lt;p&gt;I, for one, am sick and tired of the knee-jerk reaction &quot;Oh noes! Tables for layout!&quot;&lt;/p&gt;\n\n&lt;p&gt;As for the &quot;it wasn&apos;t intended for that purpose and therefore you shouldn&apos;t use it this way&quot; crowd, isn&apos;t that hypocrisy? What do you think of all the CSS tricks you have to use to get the darn thing working in most browsers? Were they meant for that purpose?&lt;/p&gt;\n    "],"364":["\n&lt;blockquote&gt;\n&lt;p&gt;#Getting shell variables into &lt;code&gt;awk&lt;/code&gt;\nmay be done in several ways. Some are better than others. This should cover most of them.  If you have a comment, please leave below.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;v1.5&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;hr&gt;\n&lt;h2&gt;Using &lt;code&gt;-v&lt;/code&gt;  (The best way, most portable)&lt;/h2&gt;\n&lt;p&gt;Use the &lt;code&gt;-v&lt;/code&gt; option: (P.S. use a space after &lt;code&gt;-v&lt;/code&gt; or it will be less portable. E.g., &lt;code&gt;awk -v var=&lt;/code&gt; not &lt;code&gt;awk -vvar=&lt;/code&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\nawk -v var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print var}&apos;&lt;/span&gt;\nline one\nline two\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This should be compatible with most &lt;code&gt;awk&lt;/code&gt;, and the variable is available in the &lt;code&gt;BEGIN&lt;/code&gt; block as well:&lt;/p&gt;\n&lt;p&gt;If you have multiple variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var1&lt;/span&gt;&quot;&lt;/span&gt; -v b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var2&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print a,b}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;.  As Ed Morton writes, escape sequences will be interpreted so &lt;code&gt;\\t&lt;/code&gt; becomes a real &lt;code&gt;tab&lt;/code&gt; and not &lt;code&gt;\\t&lt;/code&gt; if that is what you search for. Can be solved by using &lt;code&gt;ENVIRON[]&lt;/code&gt; or access it via &lt;code&gt;ARGV[]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; If you like three vertical bar as separator &lt;code&gt;|||&lt;/code&gt;, it can&apos;t be escaped, so use &lt;code&gt;-F&quot;[|][|][|]&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example on getting data from a program/function inn to &lt;code&gt;awk&lt;/code&gt; (here date is used)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v time=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$(date +&lt;span class=&quot;hljs-string&quot;&gt;&quot;%F %H:%M&quot;&lt;/span&gt; -d &apos;-1 minute&apos;)&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print time}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example of testing the contents of a shell variable as a regexp:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$0 ~ var{print &quot;found it&quot;}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Variable after code block&lt;/h2&gt;\n&lt;p&gt;Here we get the variable after the &lt;code&gt;awk&lt;/code&gt; code. This will work fine as long as you do not need the variable in the &lt;code&gt;BEGIN&lt;/code&gt; block:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;input data&quot;&lt;/span&gt; | awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print var}&apos;&lt;/span&gt; var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${variable}&lt;/span&gt;&quot;&lt;/span&gt;\nor\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print var}&apos;&lt;/span&gt; var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${variable}&lt;/span&gt;&quot;&lt;/span&gt; file\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Adding multiple variables:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;awk &apos;{print a,b,$0}&apos; a=&quot;$var1&quot; b=&quot;$var2&quot; file&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;In this way we can also set different Field Separator &lt;code&gt;FS&lt;/code&gt; for each file.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;awk &apos;some code&apos; FS=&apos;,&apos; file1.txt FS=&apos;;&apos; file2.ext&lt;/code&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Variable after the code block will not work for the &lt;code&gt;BEGIN&lt;/code&gt; block:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;code&gt;echo &quot;input data&quot; | awk &apos;BEGIN {print var}&apos; var=&quot;${variable}&quot;&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Here-string&lt;/h2&gt;\n&lt;p&gt;Variable can also be added to &lt;code&gt;awk&lt;/code&gt; using a &lt;a href=&quot;http://en.wikipedia.org/wiki/Here_document&quot; rel=&quot;noreferrer&quot;&gt;here-string&lt;/a&gt; from shells that support them (including Bash):&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $0}&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is the same as:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;%s&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt; | awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $0}&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;P.S. this treats the variable as a file input.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;ENVIRON&lt;/code&gt; input&lt;/h2&gt;\n&lt;p&gt;As TrueY writes, you can use the &lt;code&gt;ENVIRON&lt;/code&gt; to print &lt;strong&gt;Environment Variables&lt;/strong&gt;.\nSetting a variable before running AWK, you can print it out like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;X=MyVar\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print ENVIRON[&quot;X&quot;],ENVIRON[&quot;SHELL&quot;]}&apos;&lt;/span&gt;\nMyVar /bin/bash\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;ARGV&lt;/code&gt; input&lt;/h2&gt;\n&lt;p&gt;As Steven Penny writes, you can use &lt;code&gt;ARGV&lt;/code&gt; to get the data into awk:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;v=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my data&quot;&lt;/span&gt;\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print ARGV[1]}&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\nmy data\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To get the data into the code itself, not just the BEGIN:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;v=&lt;span class=&quot;hljs-string&quot;&gt;&quot;my data&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt; | awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{var=ARGV[1];ARGV[1]=&quot;&quot;} {print var, $0}&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\nmy data &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;Variable within the code: USE WITH CAUTION&lt;/h2&gt;\n&lt;p&gt;You can use a variable within the &lt;code&gt;awk&lt;/code&gt; code, but it&apos;s messy and hard to read, and as &lt;code&gt;Charles Duffy&lt;/code&gt; points out, this version may also be a victim of code injection.  If someone adds bad stuff to the variable, it will be executed as part of the &lt;code&gt;awk&lt;/code&gt; code.&lt;/p&gt;\n&lt;p&gt;This works by extracting the variable within the code, so it becomes a part of it.&lt;/p&gt;\n&lt;p&gt;If you want to make an &lt;code&gt;awk&lt;/code&gt; that changes dynamically with use of variables, you can do it this way, but DO NOT use it for normal variables.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&apos;&lt;/span&gt;\nline one\nline two\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is an example of code injection:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&apos;line one\\nline two&quot; ; for (i=1;i&amp;lt;=1000;++i) print i&quot;&apos;&lt;/span&gt;\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;}&apos;&lt;/span&gt;\nline one\nline two\n1\n2\n3\n.\n.\n1000\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can add lots of commands to &lt;code&gt;awk&lt;/code&gt; this way.  Even make it crash with non valid commands.&lt;/p&gt;\n&lt;p&gt;One valid use of this approach, though, is when you want to pass a symbol to awk to be applied to some input, e.g. a simple calculator:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;calc&lt;/span&gt;&lt;/span&gt;() { awk -v x=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; -v z=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$3&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{ print x &apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos; z }&apos;&lt;/span&gt;; }\n\n$ calc 2.7 &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt; 3.4\n6.1\n\n$ calc 2.7 &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt; 3.4\n9.18\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There is no way to do that using an awk variable populated with the value of a shell variable, you NEED the shell variable to expand to become part of the text of the awk script before awk interprets it.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Extra info:&lt;/h2&gt;\n&lt;h3&gt;Use of double quote&lt;/h3&gt;\n&lt;p&gt;It&apos;s always good to double quote variable &lt;code&gt;&quot;$variable&quot;&lt;/code&gt;&lt;br&gt;\nIf not, multiple lines will be added as a long single line.&lt;/p&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Line one\nThis is line two&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;\nLine one This is line two\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt;\nLine one\nThis is line two\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other errors you can get without double quote:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;line one\\nline two&quot;&lt;/span&gt;\nawk -v var=&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print var}&apos;&lt;/span&gt;\nawk: cmd. line:1: one\\nline\nawk: cmd. line:1:    ^ backslash not last character on line\nawk: cmd. line:1: one\\nline\nawk: cmd. line:1:    ^ syntax error\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And with single quote, it does not expand the value of the variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v var=&lt;span class=&quot;hljs-string&quot;&gt;&apos;$variable&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print var}&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$variable&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;More info about AWK and variables&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;http://cfajohnson.com/shell/cus-faq-2.html#Q24&quot; rel=&quot;noreferrer&quot;&gt;Read this faq&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It seems that the good-old &lt;code&gt;ENVIRON&lt;/code&gt; &lt;a href=&quot;/questions/tagged/awk&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;awk&apos;&quot; rel=&quot;tag&quot;&gt;awk&lt;/a&gt; built-in hash is not mentioned at all. An example of its usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ X=Solaris awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{print ENVIRON[&quot;X&quot;], ENVIRON[&quot;TERM&quot;]}&apos;&lt;/span&gt;\nSolaris rxvt\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Use either of these depending how you want backslashes in the shell variables handled (&lt;code&gt;avar&lt;/code&gt; is an awk variable, &lt;code&gt;svar&lt;/code&gt; is a shell variable):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk -v avar=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$svar&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;... avar ...&apos;&lt;/span&gt; file\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN{avar=ARGV[1];ARGV[1]=&quot;&quot;}... avar ...&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$svar&lt;/span&gt;&quot;&lt;/span&gt; file\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;http://cfajohnson.com/shell/cus-faq-2.html#Q24&quot;&gt;http://cfajohnson.com/shell/cus-faq-2.html#Q24&lt;/a&gt; for details and other options. The first method above is almost always your best option and has the most obvious semantics.&lt;/p&gt;\n    ","\n&lt;p&gt;You could pass in the &lt;a href=&quot;http://www.gnu.org/software/gawk/manual/gawk.html#Options&quot; rel=&quot;noreferrer&quot;&gt;command-line option&lt;/a&gt; &lt;code&gt;-v&lt;/code&gt; with a variable name (&lt;code&gt;v&lt;/code&gt;) and a value (&lt;code&gt;=&lt;/code&gt;) of the environment variable (&lt;code&gt;&quot;${v}&quot;&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% awk -vv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${v}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN { print v }&apos;&lt;/span&gt;\n123test\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or to make it clearer (with far fewer &lt;code&gt;v&lt;/code&gt;s):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;% environment_variable=123test\n% awk -vawk_variable=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${environment_variable}&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN { print awk_variable }&apos;&lt;/span&gt;\n123test\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can utilize ARGV:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;v=123test\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {print ARGV[1]}&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you are going to continue into the body, you will need to adjust\nARGC:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;BEGIN {ARGC--} {print ARGV[2], $0}&apos;&lt;/span&gt; file &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I just changed @Jotne&apos;s answer for &quot;for loop&quot;. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;hljs-built_in&quot;&gt;seq&lt;/span&gt; 11 20`; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; host myserver-&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; | awk -v i=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print &quot;myserver-&quot;i&quot; &quot; $4}&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had to insert date at the beginning of the lines of a log file and it&apos;s done like below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;DATE=$(&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt; +&lt;span class=&quot;hljs-string&quot;&gt;&quot;%Y-%m-%d&quot;&lt;/span&gt;)\nawk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{ print &quot;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$DATE&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;, $0; }&apos;&lt;/span&gt; /path_to_log_file/log_file.log\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can be redirect to another file to save&lt;/p&gt;\n    ","\n&lt;h2&gt;Pro Tip&lt;/h2&gt;\n&lt;p&gt;It could come handy to create a function that handles this so you dont have to type everything every time. Using the selected solution we get...&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;awk_switch_columns&lt;/span&gt;&lt;/span&gt;() {\n     &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; &amp;lt; /dev/stdin | awk -v a=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; -v b=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot; { t = \\$a; \\$a = \\$b; \\$b = t; print; } &quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And use it as...&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a b c d&apos;&lt;/span&gt; | awk_switch_columns 2 4\n\nOutput:\na d c b\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;example:&lt;/p&gt;\n&lt;p&gt;in.txt:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo\nbar\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(awk &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $1}&apos;&lt;/span&gt; in.txt) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;command:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt; out.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;out.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo\nbar\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;another:&lt;/p&gt;\n&lt;p&gt;in.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo,aaa\nbar,bbb\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;variable:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(awk -F &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $1}&apos;&lt;/span&gt; in.txt) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;out.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;foo\nbar\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;var=$(awk -F &lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;{print $2}&apos;&lt;/span&gt; in.txt) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;out.txt&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;aaa\nbbb\n&lt;/code&gt;&lt;/pre&gt;\n    "],"365":["\n&lt;p&gt;&lt;strong&gt;Script vs. Module&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Here&apos;s an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  &lt;strong&gt;Just knowing what directory a file is in does not determine what package Python thinks it is in.&lt;/strong&gt;  That depends, additionally, on how you load the file into Python (by running or by importing).&lt;/p&gt;\n&lt;p&gt;There are two ways to load a Python file: as the top-level script, or as a\nmodule.  A file is loaded as the top-level script if you execute it directly, for instance by typing &lt;code&gt;python myfile.py&lt;/code&gt; on the command line.  It is loaded as a module when an &lt;code&gt;import&lt;/code&gt; statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Naming&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;When a file is loaded, it is given a name (which is stored in its &lt;code&gt;__name__&lt;/code&gt; attribute).  If it was loaded as the top-level script, its name is &lt;code&gt;__main__&lt;/code&gt;.  If it was loaded as a module, its name is the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots.&lt;/p&gt;\n&lt;p&gt;So for instance in your example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you imported &lt;code&gt;moduleX&lt;/code&gt; (note: &lt;em&gt;imported&lt;/em&gt;, not directly executed), its name would be &lt;code&gt;package.subpackage1.moduleX&lt;/code&gt;.  If you imported &lt;code&gt;moduleA&lt;/code&gt;, its name would be &lt;code&gt;package.moduleA&lt;/code&gt;.  However, if you &lt;em&gt;directly run&lt;/em&gt; &lt;code&gt;moduleX&lt;/code&gt; from the command line, its name will instead be &lt;code&gt;__main__&lt;/code&gt;, and if you directly run &lt;code&gt;moduleA&lt;/code&gt; from the command line, its name will be &lt;code&gt;__main__&lt;/code&gt;.  When a module is run as the top-level script, it loses its normal name and its name is instead &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Accessing a module NOT through its containing package&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;There is an additional wrinkle: the module&apos;s name depends on whether it was imported &quot;directly&quot; from the directory it is in or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory &lt;code&gt;package/subpackage1&lt;/code&gt; and then do &lt;code&gt;import moduleX&lt;/code&gt;, the name of &lt;code&gt;moduleX&lt;/code&gt; will just be &lt;code&gt;moduleX&lt;/code&gt;, and not &lt;code&gt;package.subpackage1.moduleX&lt;/code&gt;.  This is because Python adds the current directory to its search path when the interpreter is entered interactively; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module&apos;s name.&lt;/p&gt;\n&lt;p&gt;A special case is if you run the interpreter interactively (e.g., just type &lt;code&gt;python&lt;/code&gt; and start entering Python code on the fly).  In this case, the name of that interactive session is &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Now here is the crucial thing for your error message: &lt;strong&gt;if a module&apos;s name has no dots, it is not considered to be part of a package&lt;/strong&gt;.  It doesn&apos;t matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it.&lt;/p&gt;\n&lt;p&gt;Now look at the quote you included in your question:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Relative imports use a module&apos;s name attribute to determine that module&apos;s position in the package hierarchy. If the module&apos;s name does not contain any package information (e.g. it is set to &apos;main&apos;) then relative imports are resolved as if the module were a top-level module, regardless of where the module is actually located on the file system.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Relative imports...&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Relative imports use the module&apos;s &lt;em&gt;name&lt;/em&gt; to determine where it is in a package.  When you use a relative import like &lt;code&gt;from .. import foo&lt;/code&gt;, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module&apos;s name is &lt;code&gt;package.subpackage1.moduleX&lt;/code&gt;, then &lt;code&gt;..moduleA&lt;/code&gt; would mean &lt;code&gt;package.moduleA&lt;/code&gt;.  For a &lt;code&gt;from .. import&lt;/code&gt; to work, the module&apos;s name must have at least as many dots as there are in the &lt;code&gt;import&lt;/code&gt; statement.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;... are only relative in a package&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;However, if your module&apos;s name is &lt;code&gt;__main__&lt;/code&gt;, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use &lt;code&gt;from .. import&lt;/code&gt; statements inside it.  If you try to do so, you will get the &quot;relative-import in non-package&quot; error.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Scripts can&apos;t import relative&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;What you probably did is you tried to run &lt;code&gt;moduleX&lt;/code&gt; or the like from the command line.  When you did this, its name was set to &lt;code&gt;__main__&lt;/code&gt;, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory &quot;too early&quot; without realizing it is part of a package.&lt;/p&gt;\n&lt;p&gt;Also remember that when you run the interactive interpreter, the &quot;name&quot; of that interactive session is always &lt;code&gt;__main__&lt;/code&gt;.  Thus &lt;strong&gt;you cannot do relative imports directly from an interactive session&lt;/strong&gt;.  Relative imports are only for use within module files.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Two solutions:&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If you really do want to run &lt;code&gt;moduleX&lt;/code&gt; directly, but you still want it to be considered part of a package, you can do &lt;code&gt;python -m package.subpackage1.moduleX&lt;/code&gt;.  The &lt;code&gt;-m&lt;/code&gt; tells Python to load it as a module, not as the top-level script.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Or perhaps you don&apos;t actually want to &lt;em&gt;run&lt;/em&gt; &lt;code&gt;moduleX&lt;/code&gt;, you just want to run some other script, say &lt;code&gt;myfile.py&lt;/code&gt;, that &lt;em&gt;uses&lt;/em&gt; functions inside &lt;code&gt;moduleX&lt;/code&gt;.  If that is the case, put &lt;code&gt;myfile.py&lt;/code&gt; &lt;em&gt;somewhere else&lt;/em&gt;  &lt;em&gt;not&lt;/em&gt; inside the &lt;code&gt;package&lt;/code&gt; directory  and run it.  If inside &lt;code&gt;myfile.py&lt;/code&gt; you do things like &lt;code&gt;from package.moduleA import spam&lt;/code&gt;, it will work fine.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;For either of these solutions, the package directory (&lt;code&gt;package&lt;/code&gt; in your example) must be accessible from the Python module search path (&lt;code&gt;sys.path&lt;/code&gt;).  If it is not, you will not be able to use anything in the package reliably at all.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Since Python 2.6, the module&apos;s &quot;name&quot; for package-resolution purposes is determined not just by its &lt;code&gt;__name__&lt;/code&gt; attributes but also by the &lt;code&gt;__package__&lt;/code&gt; attribute.  That&apos;s why I&apos;m avoiding using the explicit symbol &lt;code&gt;__name__&lt;/code&gt; to refer to the module&apos;s &quot;name&quot;.  Since Python 2.6 a module&apos;s &quot;name&quot; is effectively &lt;code&gt;__package__ + &apos;.&apos; + __name__&lt;/code&gt;, or just &lt;code&gt;__name__&lt;/code&gt; if &lt;code&gt;__package__&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This is really a problem within python. &lt;strong&gt;The origin of confusion is that people mistakenly takes the relative import as path relative which is not.&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;For example when you write in &lt;em&gt;faa.py&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; .. &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This has a meaning only if &lt;em&gt;faa.py&lt;/em&gt; was &lt;em&gt;identified and loaded&lt;/em&gt; by python, during execution, as a part of a package. In that case,the &lt;strong&gt;module&apos;s name&lt;/strong&gt; \n for &lt;em&gt;faa.py&lt;/em&gt; would be for example &lt;em&gt;some_packagename.faa&lt;/em&gt;. If the file was loaded just because it is in the current directory, when python is run, then its name would not refer to any package and eventually relative import would fail. &lt;/p&gt;\n\n&lt;p&gt;A simple solution to refer modules in the current directory, is to use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __package__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; __package__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# uses current directory visibility&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-comment&quot;&gt;# uses current package visibility&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; . &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So after carping about this along with many others, I came across a note posted by &lt;a href=&quot;https://stackoverflow.com/users/5420054/dorian-b&quot;&gt;Dorian B&lt;/a&gt; in this &lt;a href=&quot;https://stackoverflow.com/questions/5286210/is-there-a-way-to-access-parent-modules-in-python&quot;&gt;article&lt;/a&gt; that solved the specific problem I was having where I would develop modules and classes for use with a web service, but I also want to be able to test them as I&apos;m coding, using the debugger facilities in PyCharm. To run tests in a self-contained class, I would include the following at the end of my class file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n   &lt;span class=&quot;hljs-comment&quot;&gt;# run test code here...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but if I wanted to import other classes or modules in the same folder, I would then have to change all my import statements from relative notation to local references (i.e. remove the dot (.))  But after reading Dorian&apos;s suggestion, I tried his &apos;one-liner&apos; and it worked!  I can now test in PyCharm and leave my test code in place when I use the class in another class under test, or when I use it in my web service!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# import any site-lib modules first, then...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nparent_module = sys.modules[&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;.join(__name__.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)[:-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; parent_module.__name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; codex &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Codex &lt;span class=&quot;hljs-comment&quot;&gt;# these are in same folder as module under test!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; dblogger &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; DbLogger\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; .codex &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Codex\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; .dblogger &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; DbLogger\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The if statement checks to see if we&apos;re running this module as &lt;strong&gt;main&lt;/strong&gt; or if it&apos;s being used in another module that&apos;s being tested as &lt;strong&gt;main&lt;/strong&gt;.  Perhaps this is obvious, but I offer this note here in case anyone else frustrated by the relative import issues above can make use of it.&lt;/p&gt;\n    ","\n&lt;p&gt;There are too much too long anwers in a foreign language. So I&apos;ll try to make it short.&lt;/p&gt;\n&lt;p&gt;If you write &lt;code&gt;from . import module&lt;/code&gt;, opposite to  what you think, &lt;code&gt;module&lt;/code&gt; will not be imported from current directory, but from the top level of your package! If you run .py file as a script, it simply doesn&apos;t know where the top level is and thus refuses to work.&lt;/p&gt;\n&lt;p&gt;If you start it like this &lt;code&gt;py -m package.module&lt;/code&gt; from the directory above &lt;code&gt;package&lt;/code&gt;, then python knows where the top level is. That&apos;s very similar to java: &lt;code&gt;java -cp bin_directory package.class&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a general recipe, modified to fit as an example, that I am using right now for dealing with Python libraries written as packages, that contain interdependent files, where I want to be able to test parts of them piecemeal.  Let&apos;s call this &lt;code&gt;lib.foo&lt;/code&gt; and say that it needs access to &lt;code&gt;lib.fileA&lt;/code&gt; for functions &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt;, and &lt;code&gt;lib.fileB&lt;/code&gt; for class &lt;code&gt;Class3&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I have included a few &lt;code&gt;print&lt;/code&gt; calls to help illustrate how this works.  In practice you would want to remove them (and maybe also the &lt;code&gt;from __future__ import print_function&lt;/code&gt; line).&lt;/p&gt;\n&lt;p&gt;This particular example is too simple to show when we really need to insert an entry into &lt;code&gt;sys.path&lt;/code&gt;.  (See &lt;a href=&quot;https://stackoverflow.com/a/38455936/1256452&quot;&gt;Lars&apos; answer&lt;/a&gt; for a case where we &lt;em&gt;do&lt;/em&gt; need it, when we have two or more levels of package directories, and then we use &lt;code&gt;os.path.dirname(os.path.dirname(__file__))&lt;/code&gt;but it doesn&apos;t really &lt;em&gt;hurt&lt;/em&gt; here either.)  It&apos;s also safe enough to do this without the &lt;code&gt;if _i in sys.path&lt;/code&gt; test.  However, if each imported file inserts the same pathfor instance, if both &lt;code&gt;fileA&lt;/code&gt; and &lt;code&gt;fileB&lt;/code&gt; want to import utilities from the packagethis clutters up &lt;code&gt;sys.path&lt;/code&gt; with the same path many times, so it&apos;s nice to have the &lt;code&gt;if _i not in sys.path&lt;/code&gt; in the boilerplate.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; print_function &lt;span class=&quot;hljs-comment&quot;&gt;# only when showing how this works&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __package__:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Package named {!r}; __name__ is {!r}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__package__, __name__))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; .fileA &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; f1, f2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; .fileB &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Class3\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Not a package; __name__ is {!r}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(__name__))\n    &lt;span class=&quot;hljs-comment&quot;&gt;# these next steps should be used only with care and if needed&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# (remove the sys.path manipulation for simple cases!)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, sys\n    _i = os.path.dirname(os.path.abspath(__file__))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; _i &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.path:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;inserting {!r} into sys.path&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(_i))\n        sys.path.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, _i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{!r} is already in sys.path&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(_i))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; _i &lt;span class=&quot;hljs-comment&quot;&gt;# clean up global name space&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fileA &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; f1, f2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; fileB &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Class3\n\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt; the code &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; usual ...\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; doctest, sys\n    ret = doctest.testmod()\n    sys.exit(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ret.failed == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The idea here is this (and note that these all function the same across python2.7 and python 3.x):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If run as &lt;code&gt;import lib&lt;/code&gt; or &lt;code&gt;from lib import foo&lt;/code&gt; as a regular package import from ordinary code, &lt;code&gt;__package&lt;/code&gt; is &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;__name__&lt;/code&gt; is &lt;code&gt;lib.foo&lt;/code&gt;.  We take the first code path, importing from &lt;code&gt;.fileA&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If run as &lt;code&gt;python lib/foo.py&lt;/code&gt;, &lt;code&gt;__package__&lt;/code&gt; will be None and &lt;code&gt;__name__&lt;/code&gt; will be &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;We take the second code path.  The &lt;code&gt;lib&lt;/code&gt; directory will already be in &lt;code&gt;sys.path&lt;/code&gt; so there is no need to add it.  We import from &lt;code&gt;fileA&lt;/code&gt;, etc.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If run within the &lt;code&gt;lib&lt;/code&gt; directory as &lt;code&gt;python foo.py&lt;/code&gt;, the behavior is the same as for case 2.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If run within the &lt;code&gt;lib&lt;/code&gt; directory as &lt;code&gt;python -m foo&lt;/code&gt;, the behavior is similar to cases 2 and 3.  However, the path to the &lt;code&gt;lib&lt;/code&gt; directory is not in &lt;code&gt;sys.path&lt;/code&gt;, so we add it before importing.  The same applies if we run Python and then &lt;code&gt;import foo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;(Since &lt;code&gt;.&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; in &lt;code&gt;sys.path&lt;/code&gt;, we don&apos;t really need to add the absolute version of the path here.  This is where a deeper package nesting structure, where we want to do &lt;code&gt;from ..otherlib.fileC import ...&lt;/code&gt;, makes a difference.  If you&apos;re not doing this, you can omit all the &lt;code&gt;sys.path&lt;/code&gt; manipulation entirely.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;Notes&lt;/h3&gt;\n&lt;p&gt;There is still a quirk.  If you run this whole thing from outside:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python2 lib.foo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python3 lib.foo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;the behavior depends on the contents of &lt;code&gt;lib/__init__.py&lt;/code&gt;.  If that exists and &lt;em&gt;is empty&lt;/em&gt;, all is well:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Package named &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib&apos;&lt;/span&gt;; __name__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if &lt;code&gt;lib/__init__.py&lt;/code&gt; &lt;em&gt;itself&lt;/em&gt; imports &lt;code&gt;routine&lt;/code&gt; so that it can export &lt;code&gt;routine.name&lt;/code&gt; directly as &lt;code&gt;lib.name&lt;/code&gt;, you get:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python2 lib.foo\nPackage named &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib&apos;&lt;/span&gt;; __name__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib.foo&apos;&lt;/span&gt;\nPackage named &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib&apos;&lt;/span&gt;; __name__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is, the module gets imported twice, once via the package and then again as &lt;code&gt;__main__&lt;/code&gt; so that it runs your &lt;code&gt;main&lt;/code&gt; code.  Python 3.6 and later warn about this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;$ python3 lib.routine\nPackage named &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib&apos;&lt;/span&gt;; __name__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib.foo&apos;&lt;/span&gt;\n[...]/runpy.py:&lt;span class=&quot;hljs-number&quot;&gt;125&lt;/span&gt;: RuntimeWarning: &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib.foo&apos;&lt;/span&gt; found &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.modules\nafter &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; of package &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib&apos;&lt;/span&gt;, but prior to execution of &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib.foo&apos;&lt;/span&gt;;\nthis may result &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; unpredictable behaviour\n  warn(RuntimeWarning(msg))\nPackage named &lt;span class=&quot;hljs-string&quot;&gt;&apos;lib&apos;&lt;/span&gt;; __name__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;em&gt;warning&lt;/em&gt; is new, but the warned-about behavior is not.  It is part of what some call &lt;a href=&quot;http://python-notes.curiousefficiency.org/en/latest/python_concepts/import_traps.html#the-double-import-trap&quot; rel=&quot;noreferrer&quot;&gt;the double import trap&lt;/a&gt;.  (For additional details see &lt;a href=&quot;https://bugs.python.org/issue27487&quot; rel=&quot;noreferrer&quot;&gt;issue 27487&lt;/a&gt;.)  Nick Coghlan says:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;This next trap exists in all current versions of Python, including 3.3, and can be summed up in the following general guideline: &quot;Never add a package directory, or any directory inside a package, directly to the Python path&quot;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note that while we violate that rule here, we do it &lt;em&gt;only&lt;/em&gt; when the file being loaded is &lt;em&gt;not&lt;/em&gt; being loaded as part of a package, and our modification is specifically designed to allow us to access other files in that package.  (And, as I noted, we probably shouldn&apos;t do this at all for single level packages.)  If we wanted to be extra-clean, we might rewrite this as, e.g.:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, sys\n    _i = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; _i &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; sys.path:\n        sys.path.insert(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, _i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        _i = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sub.fileA &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; f1, f2\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; sub.fileB &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Class3\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; _i:\n        sys.path.remove(_i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; _i\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That is, we modify &lt;code&gt;sys.path&lt;/code&gt; long enough to achieve our imports, then put it back the way it was (deleting one copy of &lt;code&gt;_i&lt;/code&gt; if and only if we added one copy of &lt;code&gt;_i&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;Here is one solution that I would not recommend, but might be useful in some situations where modules were simply not generated:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\nparent_dir_name = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))\nsys.path.append(parent_dir_name + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/your_dir&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; your_script\nyour_script.a_function()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;@BrenBarn&apos;s answer says it all, but if you&apos;re like me it might take a while to understand.  Here&apos;s my case and how @BrenBarn&apos;s answer applies to it, perhaps it will help you.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The case&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;package/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using our familiar example, and add to it that moduleX.py has a relative import to ..moduleA.  Given that I tried writing a test script in the subpackage1 directory that imported moduleX, but then got the dreaded error described by the OP.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Move test script to the same level as package and import package.subpackage1.moduleX&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As explained, relative imports are made relative to the current name.  When my test script imports moduleX from the same directory, then module name inside moduleX is moduleX.  When it encounters a relative import the interpreter can&apos;t back up the package hierarchy because it&apos;s already at the top&lt;/p&gt;\n\n&lt;p&gt;When I import moduleX from above, then name inside moduleX is package.subpackage1.moduleX and the relative import can be found&lt;/p&gt;\n    ","\n&lt;p&gt;I had a similar problem where I didn&apos;t want to change the Python module search \npath and needed to load a module relatively &lt;em&gt;from a script&lt;/em&gt; (in spite of &lt;em&gt;&quot;scripts can&apos;t import relative with all&quot;&lt;/em&gt; as BrenBarn explained nicely above).&lt;/p&gt;\n\n&lt;p&gt;So I used the following hack. Unfortunately, it relies on the &lt;code&gt;imp&lt;/code&gt; module that \nbecame deprecated since version 3.4 to be dropped in favour of &lt;code&gt;importlib&lt;/code&gt;.\n(Is this possible with &lt;code&gt;importlib&lt;/code&gt;, too? I don&apos;t know.) Still, the hack works for now.&lt;/p&gt;\n\n&lt;p&gt;Example for accessing members of &lt;code&gt;moduleX&lt;/code&gt; in &lt;code&gt;subpackage1&lt;/code&gt; from a script residing in the &lt;code&gt;subpackage2&lt;/code&gt; folder:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; inspect\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; imp\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_script_dir&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;follow_symlinks=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    Return directory of code defining this very function.\n    Should work from a module as well as from a script.\n    &quot;&quot;&quot;&lt;/span&gt;\n    script_path = inspect.getabsfile(get_script_dir)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; follow_symlinks:\n        script_path = os.path.realpath(script_path)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; os.path.dirname(script_path)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# loading the module (hack, relying on deprecated imp-module)&lt;/span&gt;\nPARENT_PATH = os.path.dirname(get_script_dir())\n(x_file, x_path, x_desc) = imp.find_module(&lt;span class=&quot;hljs-string&quot;&gt;&apos;moduleX&apos;&lt;/span&gt;, [PARENT_PATH+&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&apos;subpackage1&apos;&lt;/span&gt;])\nmodule_x = imp.load_module(&lt;span class=&quot;hljs-string&quot;&gt;&apos;subpackage1.moduleX&apos;&lt;/span&gt;, x_file, x_path, x_desc)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# importing a function and a value&lt;/span&gt;\nfunction = module_x.my_function\nVALUE = module_x.MY_CONST\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A cleaner approach seems to be to modify the sys.path used for loading modules as mentioned by Federico.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; __package__ &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys, path\n    &lt;span class=&quot;hljs-comment&quot;&gt;# __file__ should be defined in this case&lt;/span&gt;\n    PARENT_DIR = path.dirname(path.dirname(path.abspath(__file__)))\n   sys.path.append(PARENT_DIR)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; subpackage1.moduleX &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; changes depending on whether the code in question is run in the global namespace or as part of an imported module.&lt;/p&gt;\n\n&lt;p&gt;If the code is not running in the global space, &lt;code&gt;__name__&lt;/code&gt; will be the name of the module. If it is running in global namespace -- for example, if you type it into a console, or run the module as a script using &lt;code&gt;python.exe yourscriptnamehere.py&lt;/code&gt; then &lt;code&gt;__name__&lt;/code&gt; becomes &lt;code&gt;&quot;__main__&quot;&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;You&apos;ll see a lot of python code with  &lt;code&gt;if __name__ == &apos;__main__&apos;&lt;/code&gt; is used to test whether the code is being run from the global namespace  that allows you to have a module that doubles as a script. &lt;/p&gt;\n\n&lt;p&gt;Did you try to do these imports from the console? &lt;/p&gt;\n    ","\n&lt;p&gt;Following up on what Lars has suggested I&apos;ve wrapped this approach in an experimental, new import library: &lt;a href=&quot;https://github.com/ronny-rentner/ultraimport&quot; rel=&quot;nofollow noreferrer&quot;&gt;ultraimport&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It gives the programmer more control over imports and it allows file system based imports. Therefore, you can do relative imports from scripts. Parent package not necessary. ultraimports will always work, no matter how you run your code or what is your current working directory because ultraimport makes imports unambiguous. You don&apos;t need to change sys.path and also you don&apos;t need a try/except block to sometimes do relative imports and sometimes absolute.&lt;/p&gt;\n&lt;p&gt;You would then write in somefile.py something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ultraimport\nfoo = ultraimport(&lt;span class=&quot;hljs-string&quot;&gt;&apos;__dir__/foo.py&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;__dir__ is the directory of somefile.py, the caller of ultraimport(). foo.py would live in the same directory as somefile.py.&lt;/p&gt;\n&lt;p&gt;One caveat when importing scripts like this is if they contain further relative imports. ultraimport has a builtin preprocessor to rewrite subsequent relative imports to ultraimports so they continue to work. Though, this is currently somewhat limited as original Python imports are ambiguous and there&apos;s only so much you can do about it.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;Relative imports use a module&apos;s name attribute to determine that module&apos;s position in the package hierarchy. If the module&apos;s name does not contain any package information (e.g. it is set to &apos;main&apos;) then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Wrote a little python package to PyPi that might help viewers of this question. The package acts as workaround if one wishes to be able to run python files containing imports containing upper level packages from within a package / project without being directly in the importing file&apos;s directory. &lt;a href=&quot;https://pypi.org/project/import-anywhere/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://pypi.org/project/import-anywhere/&lt;/a&gt; &lt;/p&gt;\n    ","\n&lt;p&gt;In most cases when I see the &lt;code&gt;ValueError: attempted relative import beyond top-level package&lt;/code&gt; and pull my hair out, the solution is as follows:&lt;/p&gt;\n&lt;p&gt;You need to &lt;strong&gt;step one level higher&lt;/strong&gt; in the file hierarchy!&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#dir/package/module1/foo.py&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#dir/package/module2/bar.py&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ..module1 &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; foo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Importing &lt;code&gt;bar.py&lt;/code&gt; when interpreter is started in &lt;code&gt;dir/package/&lt;/code&gt; will result in error despite the import process never going beyond your current directory.&lt;/p&gt;\n&lt;p&gt;Importing &lt;code&gt;bar.py&lt;/code&gt; when interpreter is started in &lt;code&gt;dir/&lt;/code&gt; will succeed.&lt;/p&gt;\n&lt;p&gt;Similarly for unit tests:\n&lt;code&gt;python3 -m unittest discover --start-directory=.&lt;/code&gt; successfully works from &lt;code&gt;dir/&lt;/code&gt;, but not from &lt;code&gt;dir/package/&lt;/code&gt;.&lt;/p&gt;\n    "]},"page":"50","randomQuestions":[{"title":"HTTP GET with request body","slug":"http-get-with-request-body-1657387379038"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"Why do we always prefer using parameters in SQL statements?","slug":"why-do-we-always-prefer-using-parameters-in-sql-statements-1657388031476"},{"title":"Disable same origin policy in Chrome","slug":"disable-same-origin-policy-in-chrome-1657387743804"},{"title":"What is event bubbling and capturing?","slug":"what-is-event-bubbling-and-capturing-1657388059203"},{"title":"Collapse / concatenate / aggregate a column to a single comma separated string within each group","slug":"collapse-concatenate-aggregate-a-column-to-a-single-comma-separated-string-within-each-group-1657387870901"},{"title":".prop() vs .attr()","slug":".prop()-vs-.attr()-1657384898328"},{"title":"How do function pointers in C work?","slug":"how-do-function-pointers-in-c-work-1657388332074"},{"title":"How can I save an activity state using the save instance state?","slug":"how-can-i-save-an-activity-state-using-the-save-instance-state-1657387429981"},{"title":"What Is Selenium And What Is WebDriver?","slug":"what-is-selenium-and-what-is-webdriver-1657385470372"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699"},{"title":"What is the JavaScript version of sleep()?","slug":"what-is-the-javascript-version-of-sleep()-1657387391406"},{"title":"How to serve static files in Flask","slug":"how-to-serve-static-files-in-flask-1657387862496"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"What does this symbol mean in JavaScript?","slug":"what-does-this-symbol-mean-in-javascript-1657387632971"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"},{"title":"JQuery - $ is not defined","slug":"jquery-dollar-is-not-defined-1657388385731"},{"title":"Aggregate / summarize multiple variables per group (e.g. sum, mean)","slug":"aggregate-summarize-multiple-variables-per-group-(e.g.-sum-mean)-1657387764061"}]},"__N_SSG":true}