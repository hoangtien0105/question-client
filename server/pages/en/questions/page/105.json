{"pageProps":{"data":{"count":610,"rows":[{"id":90,"title":"Reference â€” What does this symbol mean in PHP?","slug":"reference-what-does-this-symbol-mean-in-php-1657384561666","postType":"QUESTION","createdAt":"2022-07-09T16:36:01.000Z","updatedAt":"2022-07-09T16:36:01.000Z","tags":[{"id":328,"name":"arguments","slug":"arguments","createdAt":"2022-07-09T16:36:01.000Z","updatedAt":"2022-07-09T16:36:01.000Z","Questions_Tags":{"questionId":90,"tagId":328}},{"id":330,"name":"symbols","slug":"symbols","createdAt":"2022-07-09T16:36:01.000Z","updatedAt":"2022-07-09T16:36:01.000Z","Questions_Tags":{"questionId":90,"tagId":330}},{"id":331,"name":"semantics","slug":"semantics","createdAt":"2022-07-09T16:36:01.000Z","updatedAt":"2022-07-09T16:36:01.000Z","Questions_Tags":{"questionId":90,"tagId":331}}]},{"id":89,"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197","postType":"QUESTION","createdAt":"2022-07-09T16:35:57.000Z","updatedAt":"2022-07-09T16:35:57.000Z","tags":[{"id":324,"name":"naming-conventions","slug":"naming-conventions","createdAt":"2022-07-09T16:35:57.000Z","updatedAt":"2022-07-09T16:35:57.000Z","Questions_Tags":{"questionId":89,"tagId":324}},{"id":325,"name":"standards","slug":"standards","createdAt":"2022-07-09T16:35:57.000Z","updatedAt":"2022-07-09T16:35:57.000Z","Questions_Tags":{"questionId":89,"tagId":325}}]},{"id":88,"title":"PHP code is not being executed, but the code shows in the browser source code","slug":"php-code-is-not-being-executed-but-the-code-shows-in-the-browser-source-code-1657384553581","postType":"QUESTION","createdAt":"2022-07-09T16:35:53.000Z","updatedAt":"2022-07-09T16:35:53.000Z","tags":[]},{"id":87,"title":"How can I validate an email address using a regular expression?","slug":"how-can-i-validate-an-email-address-using-a-regular-expression-1657384549233","postType":"QUESTION","createdAt":"2022-07-09T16:35:49.000Z","updatedAt":"2022-07-09T16:35:49.000Z","tags":[]},{"id":86,"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362","postType":"QUESTION","createdAt":"2022-07-09T16:35:44.000Z","updatedAt":"2022-07-09T16:35:44.000Z","tags":[{"id":317,"name":"fgets","slug":"fgets","createdAt":"2022-07-09T16:35:44.000Z","updatedAt":"2022-07-09T16:35:44.000Z","Questions_Tags":{"questionId":86,"tagId":317}},{"id":318,"name":"buffer-overflow","slug":"buffer-overflow","createdAt":"2022-07-09T16:35:44.000Z","updatedAt":"2022-07-09T16:35:44.000Z","Questions_Tags":{"questionId":86,"tagId":318}},{"id":319,"name":"gets","slug":"gets","createdAt":"2022-07-09T16:35:44.000Z","updatedAt":"2022-07-09T16:35:44.000Z","Questions_Tags":{"questionId":86,"tagId":319}}]}]},"answers":{"86":["\n&lt;p&gt;In order to use &lt;code&gt;gets&lt;/code&gt; safely, you have to know exactly how many characters you will be reading, so that you can make your buffer large enough. You will only know that if you know exactly what data you will be reading.&lt;/p&gt;\n&lt;p&gt;Instead of using &lt;code&gt;gets&lt;/code&gt;, you want to use &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fgets&lt;/code&gt;&lt;/a&gt;, which has the signature&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; length, FILE * stream)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;(&lt;code&gt;fgets&lt;/code&gt;, if it reads an entire line, will leave the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; in the string; you&apos;ll have to deal with that.)&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;gets&lt;/code&gt; remained an official part of the language up to the 1999 ISO C standard, but it was officially removed in the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot; rel=&quot;noreferrer&quot;&gt;2011 standard&lt;/a&gt;. Most C implementations still support it, but at least gcc issues a warning for any code that uses it.&lt;/p&gt;\n    ","\n&lt;h1&gt;Why is &lt;code&gt;gets()&lt;/code&gt; dangerous&lt;/h1&gt;\n\n&lt;p&gt;The first internet worm (the &lt;a href=&quot;https://en.wikipedia.org/wiki/Morris_worm&quot; rel=&quot;noreferrer&quot;&gt;Morris Internet Worm&lt;/a&gt;) escaped about 30 years ago (1988-11-02), and it used &lt;code&gt;gets()&lt;/code&gt; and a buffer overflow as one of its methods of propagating from system to system. The basic problem is that the function doesn&apos;t know how big the buffer is, so it continues reading until it finds a newline or encounters EOF, and may overflow the bounds of the buffer it was given.&lt;/p&gt;\n\n&lt;p&gt;You should forget you ever heard that &lt;code&gt;gets()&lt;/code&gt; existed.&lt;/p&gt;\n\n&lt;p&gt;The C11 standard ISO/IEC 9899:2011 eliminated &lt;code&gt;gets()&lt;/code&gt; as a standard function, which is A Good Thing (it was formally marked as &apos;obsolescent&apos; and &apos;deprecated&apos; in ISO/IEC 9899:1999/Cor.3:2007  Technical Corrigendum 3 for C99, and then removed in C11).  Sadly, it will remain in libraries for many years (meaning &apos;decades&apos;) for reasons of backwards compatibility. If it were up to me, the implementation of &lt;code&gt;gets()&lt;/code&gt; would become:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *buffer)&lt;/span&gt;\n{\n    assert(buffer != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;abort&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Given that your code will crash anyway, sooner or later, it is better to head the trouble off sooner rather than later.  I&apos;d be prepared to add an error message: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;fputs&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;obsolete and dangerous function gets() called\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Modern versions of the Linux compilation system generates warnings if you link &lt;code&gt;gets()&lt;/code&gt;  and also for some other functions that also have security problems (&lt;code&gt;mktemp()&lt;/code&gt;, ).&lt;/p&gt;\n\n&lt;h1&gt;Alternatives to &lt;code&gt;gets()&lt;/code&gt;&lt;/h1&gt;\n\n&lt;h2&gt;fgets()&lt;/h2&gt;\n\n&lt;p&gt;As everyone else said, the canonical alternative to &lt;code&gt;gets()&lt;/code&gt; is &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/fgets.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fgets()&lt;/code&gt;&lt;/a&gt; specifying &lt;code&gt;stdin&lt;/code&gt; as the file stream.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buffer[BUFSIZ];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (fgets(buffer, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(buffer), &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n    ...process line of data...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What no-one else yet mentioned is that &lt;code&gt;gets()&lt;/code&gt; does not include the newline but &lt;code&gt;fgets()&lt;/code&gt; does.  So, you might need to use a wrapper around &lt;code&gt;fgets()&lt;/code&gt; that deletes the newline:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;fgets_wrapper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *buffer, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; buflen, FILE *fp)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets(buffer, buflen, fp) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buffer);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; buffer[len&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n            buffer[len&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; buffer;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, better:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;fgets_wrapper&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *buffer, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; buflen, FILE *fp)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets(buffer, buflen, fp) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        buffer[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(buffer, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; buffer;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, as &lt;a href=&quot;https://stackoverflow.com/users/134633/caf&quot;&gt;caf&lt;/a&gt; points out in a comment and &lt;a href=&quot;https://stackoverflow.com/users/14860/paxdiablo&quot;&gt;paxdiablo&lt;/a&gt; shows in his answer, with &lt;code&gt;fgets()&lt;/code&gt; you might have data left over on a line.  My wrapper code leaves that data to be read next time; you can readily modify it to gobble the rest of the line of data if you prefer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; buffer[len&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n            buffer[len&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n             &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ch;\n             &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((ch = getc(fp)) != EOF &amp;amp;&amp;amp; ch != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n                 ;\n        }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The residual problem is how to report the three different result states  EOF or error, line read and not truncated, and partial line read but data was truncated.&lt;/p&gt;\n\n&lt;p&gt;This problem doesn&apos;t arise with &lt;code&gt;gets()&lt;/code&gt; because it doesn&apos;t know where your buffer ends and merrily tramples beyond the end, wreaking havoc on your beautifully tended memory layout, often messing up the return stack (a &lt;a href=&quot;https://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;) if the buffer is allocated on the stack, or trampling over the control information if the buffer is dynamically allocated, or copying data over other precious global (or module) variables if the buffer is statically allocated.  None of these is a good idea  they epitomize the phrase &apos;undefined behaviour`.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;There is also the &lt;a href=&quot;https://stackoverflow.com/questions/372980/do-you-use-the-tr-24731-safe-functions-in-your-c-code&quot;&gt;TR 24731-1&lt;/a&gt; (Technical Report from the C Standard Committee) which provides safer alternatives to a variety of functions, including &lt;code&gt;gets()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h2&gt;Â§6.5.4.1 The &lt;code&gt;gets_s&lt;/code&gt; function&lt;/h2&gt;\n  \n  &lt;h3&gt;Synopsis&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; __STDC_WANT_LIB_EXT1__ 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;gets_s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;rsize_t&lt;/span&gt; n)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;h3&gt;Runtime-constraints&lt;/h3&gt;\n  \n  &lt;p&gt;&lt;code&gt;s&lt;/code&gt; shall not be a null pointer. &lt;code&gt;n&lt;/code&gt; shall neither be equal to zero nor be greater than\n  RSIZE_MAX. A new-line character, end-of-file, or read error shall occur within reading\n  &lt;code&gt;n-1&lt;/code&gt; characters from &lt;code&gt;stdin&lt;/code&gt;.&lt;sup&gt;25)&lt;/sup&gt;&lt;/p&gt;\n  \n  &lt;p&gt;3 If there is a runtime-constraint violation, &lt;code&gt;s[0]&lt;/code&gt; is set to the null character, and characters\n  are read and discarded from &lt;code&gt;stdin&lt;/code&gt; until a new-line character is read, or end-of-file or a\n  read error occurs.&lt;/p&gt;\n  \n  &lt;h3&gt;Description&lt;/h3&gt;\n  \n  &lt;p&gt;4 The &lt;code&gt;gets_s&lt;/code&gt; function reads at most one less than the number of characters specified by &lt;code&gt;n&lt;/code&gt;\n  from the stream pointed to by &lt;code&gt;stdin&lt;/code&gt;, into the array pointed to by &lt;code&gt;s&lt;/code&gt;. No additional\n  characters are read after a new-line character (which is discarded) or after end-of-file.\n  The discarded new-line character does not count towards number of characters read. A\n  null character is written immediately after the last character read into the array.&lt;/p&gt;\n  \n  &lt;p&gt;5 If end-of-file is encountered and no characters have been read into the array, or if a read\n  error occurs during the operation, then &lt;code&gt;s[0]&lt;/code&gt; is set to the null character, and the other\n  elements of &lt;code&gt;s&lt;/code&gt; take unspecified values.&lt;/p&gt;\n  \n  &lt;h3&gt;Recommended practice&lt;/h3&gt;\n  \n  &lt;p&gt;6 The &lt;code&gt;fgets&lt;/code&gt; function allows properly-written programs to safely process input lines too\n  long to store in the result array. In general this requires that callers of &lt;code&gt;fgets&lt;/code&gt; pay\n  attention to the presence or absence of a new-line character in the result array. Consider\n  using &lt;code&gt;fgets&lt;/code&gt; (along with any needed processing based on new-line characters) instead of\n  &lt;code&gt;gets_s&lt;/code&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;25)&lt;/sup&gt; The &lt;code&gt;gets_s&lt;/code&gt; function, unlike &lt;code&gt;gets&lt;/code&gt;, makes it a runtime-constraint violation for a line of input to\n  overflow the buffer to store it. Unlike &lt;code&gt;fgets&lt;/code&gt;, &lt;code&gt;gets_s&lt;/code&gt; maintains a one-to-one relationship between\n  input lines and successful calls to &lt;code&gt;gets_s&lt;/code&gt;. Programs that use &lt;code&gt;gets&lt;/code&gt; expect such a relationship.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The Microsoft Visual Studio compilers implement an approximation to the TR 24731-1 standard, but there are differences between the signatures implemented by Microsoft and those in the TR.&lt;/p&gt;\n\n&lt;p&gt;The C11 standard, ISO/IEC 9899-2011, includes TR24731 in Annex K as an optional part of the library. Unfortunately, it is seldom implemented on Unix-like systems.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;&lt;code&gt;getline()&lt;/code&gt;  POSIX&lt;/h2&gt;\n\n&lt;p&gt;POSIX 2008 also provides a safe alternative to &lt;code&gt;gets()&lt;/code&gt; called &lt;a href=&quot;http://www.opengroup.org/onlinepubs/9699919799/functions/getline.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getline()&lt;/code&gt;&lt;/a&gt;.  It allocates space for the line dynamically, so you end up needing to free it.  It removes the limitation on line length, therefore. It also returns the length of the data that was read, or &lt;code&gt;-1&lt;/code&gt; (and not &lt;code&gt;EOF&lt;/code&gt;!), which means that null bytes in the input can be handled reliably.  There is also a &apos;choose your own single-character delimiter&apos; variation called &lt;code&gt;getdelim()&lt;/code&gt;; this can be useful if you are dealing with the output from &lt;code&gt;find -print0&lt;/code&gt; where the ends of the file names are marked with an ASCII NUL &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; character, for example.&lt;/p&gt;\n    ","\n&lt;p&gt;Because &lt;code&gt;gets&lt;/code&gt; doesn&apos;t do any kind of check while getting bytes from &lt;em&gt;stdin&lt;/em&gt; and putting them somewhere. A simple example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; array1[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;12345&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; array2[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;67890&quot;&lt;/span&gt;;\n\ngets(array1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, first of all you are allowed to input how many characters you want, &lt;code&gt;gets&lt;/code&gt; won&apos;t care about it. Secondly the bytes over the size of the array in which you put them (in this case &lt;code&gt;array1&lt;/code&gt;) will overwrite whatever they find in memory because &lt;code&gt;gets&lt;/code&gt; will write them. In the previous example this means that if you input &lt;code&gt;&quot;abcdefghijklmnopqrts&quot;&lt;/code&gt; maybe, unpredictably, it will overwrite also &lt;code&gt;array2&lt;/code&gt; or whatever.&lt;/p&gt;\n\n&lt;p&gt;The function is unsafe because it assumes consistent input. &lt;strong&gt;NEVER USE IT!&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You should not use &lt;code&gt;gets&lt;/code&gt; since it has no way to stop a buffer overflow. If the user types in more data than can fit in your buffer, you will most likely end up with corruption or worse.&lt;/p&gt;\n\n&lt;p&gt;In fact, ISO have actually taken the step of &lt;em&gt;removing&lt;/em&gt; &lt;code&gt;gets&lt;/code&gt; from the C standard (as of C11, though it was deprecated in C99) which, given how highly they rate backward compatibility, should be an indication of how bad that function was.&lt;/p&gt;\n\n&lt;p&gt;The correct thing to do is to use the &lt;code&gt;fgets&lt;/code&gt; function with the &lt;code&gt;stdin&lt;/code&gt; file handle since you can limit the characters read from the user.&lt;/p&gt;\n\n&lt;p&gt;But this also has its problems such as:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;extra characters entered by the user will be picked up the next time around.&lt;/li&gt;\n&lt;li&gt;there&apos;s no quick notification that the user entered too much data.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To that end, almost every C coder at some point in their career will write a more useful wrapper around &lt;code&gt;fgets&lt;/code&gt; as well. Here&apos;s mine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; OK       0&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; NO_INPUT 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; TOO_LONG 2&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getLine&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *prmpt, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *buff, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sz)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; ch, extra;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get line with buffer overrun protection.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (prmpt != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, prmpt);\n        fflush (&lt;span class=&quot;hljs-built_in&quot;&gt;stdout&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets (buff, sz, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; NO_INPUT;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// If it was too long, there&apos;ll be no newline. In that case, we flush&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// to end of line so that excess doesn&apos;t affect the next call.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (buff[&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buff)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {\n        extra = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (((ch = getchar()) != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) &amp;amp;&amp;amp; (ch != EOF))\n            extra = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (extra == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) ? TOO_LONG : OK;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Otherwise remove newline and give string back to caller.&lt;/span&gt;\n    buff[&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buff)&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; OK;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with some test code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Test program for getLine().&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; rc;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buff[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n\n    rc = getLine (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter string&amp;gt; &quot;&lt;/span&gt;, buff, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(buff));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rc == NO_INPUT) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;No input\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rc == TOO_LONG) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Input too long\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;OK [%s]\\n&quot;&lt;/span&gt;, buff);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It provides the same protections as &lt;code&gt;fgets&lt;/code&gt; in that it prevents buffer overflows but it also notifies the caller as to what happened and clears out the excess characters so that they do not affect your next input operation.&lt;/p&gt;\n\n&lt;p&gt;Feel free to use it as you wish, I hereby release it under the &quot;do what you damn well want to&quot; licence :-)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.cplusplus.com/reference/clibrary/cstdio/fgets/&quot; rel=&quot;noreferrer&quot;&gt;fgets&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;To read from the stdin:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;512&lt;/span&gt;];\n\nfgets(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* no buffer overflows here, you&apos;re safe! */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can&apos;t remove API functions without breaking the API. If you would, many applications would no longer compile or run at all.&lt;/p&gt;\n\n&lt;p&gt;This is the reason that &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/gets.html&quot; rel=&quot;noreferrer&quot;&gt;one reference&lt;/a&gt; gives:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Reading a line that overflows the\n  array pointed to by s results in\n  undefined behavior. The use of fgets()\n  is recommended.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I read recently, in a &lt;a href=&quot;http://groups.google.com/group/comp.lang.c/msg/7e92710bc5ff2ba8&quot; rel=&quot;noreferrer&quot;&gt;USENET post to &lt;code&gt;comp.lang.c&lt;/code&gt;&lt;/a&gt;, that &lt;code&gt;gets()&lt;/code&gt; is getting removed from the Standard. &lt;strong&gt;WOOHOO&lt;/strong&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;You&apos;ll be happy to know that the\n  committee just voted (unanimously, as\n  it turns out) to remove gets() from\n  the draft as well.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;In C11(ISO/IEC 9899:201x), &lt;code&gt;gets()&lt;/code&gt; has been removed. (It&apos;s deprecated in ISO/IEC 9899:1999/Cor.3:2007(E))&lt;/p&gt;\n\n&lt;p&gt;In addition to &lt;code&gt;fgets()&lt;/code&gt;, C11 introduces a new safe alternative &lt;code&gt;gets_s()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;C11 K.3.5.4.1 The &lt;code&gt;gets_s&lt;/code&gt; function&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; __STDC_WANT_LIB_EXT1__ 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;gets_s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;rsize_t&lt;/span&gt; n)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;However, in the &lt;em&gt;Recommended practice&lt;/em&gt; section, &lt;code&gt;fgets()&lt;/code&gt; is still preferred.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;code&gt;fgets&lt;/code&gt; function allows properly-written programs to safely process input lines too\n  long to store in the result array. In general this requires that callers of &lt;code&gt;fgets&lt;/code&gt; pay\n  attention to the presence or absence of a new-line character in the result array. Consider\n  using &lt;code&gt;fgets&lt;/code&gt; (along with any needed processing based on new-line characters) instead of\n  &lt;code&gt;gets_s&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;code&gt;gets()&lt;/code&gt; is dangerous because it is possible for the user to crash the program by typing too much into the prompt. It can&apos;t detect the end of available memory, so if you allocate an amount of memory too small for the purpose, it can cause a seg fault and crash. Sometimes it seems very unlikely that a user will type 1000 letters into a prompt meant for a person&apos;s name, but as programmers, we need to make our programs bulletproof. (it may also be a security risk if a user can crash a system program by sending too much data).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;fgets()&lt;/code&gt; allows you to specify how many characters are taken out of the standard input buffer, so they don&apos;t overrun the variable.&lt;/p&gt;\n    ","\n&lt;p&gt;The C gets function is dangerous and has been a very costly mistake. Tony Hoare singles it out for specific mention in his talk &quot;Null References: The Billion Dollar Mistake&quot;:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot; rel=&quot;nofollow&quot;&gt;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The whole hour is worth watching but for his comments view from 30 minutes on with the specific gets criticism around 39 minutes.&lt;/p&gt;\n\n&lt;p&gt;Hopefully this whets your appetite for the whole talk, which draws attention to how we need more formal correctness proofs in languages and how language designers should be blamed for the mistakes in their languages, not the programmer. This seems to have been the whole dubious reason for designers of bad languages to push the blame to programmers in the guise of &apos;programmer freedom&apos;.&lt;/p&gt;\n    ","\n&lt;p&gt;I would like to extend an earnest invitation to any C library maintainers out there who are still including &lt;code&gt;gets&lt;/code&gt; in their libraries &quot;just in case anyone is still depending on it&quot;: Please replace your implementation with the equivalent of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *str)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(str, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Never use gets!&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will help make sure nobody is still depending on it.  Thank you.&lt;/p&gt;\n    ","\n&lt;p&gt;In a few words &lt;code&gt;gets()&lt;/code&gt; (can) be dangerous because the user might input something bigger than what the variable has enough space to store. First answer says about &lt;code&gt;fgets()&lt;/code&gt; and why it is safer.&lt;/p&gt;\n    ","\n&lt;p&gt;Additional info:&lt;/p&gt;\n&lt;p&gt;From &lt;code&gt;man 3 gets&lt;/code&gt; on Linux Ubuntu you&apos;ll see (emphasis added):&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;DESCRIPTION\n       Never use this function.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;And, from the cppreference.com wiki here (&lt;a href=&quot;https://en.cppreference.com/w/c/io/gets&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://en.cppreference.com/w/c/io/gets&lt;/a&gt;) you&apos;ll see: &lt;code&gt;Notes  Never use gets().&lt;/code&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;h2&gt;Notes&lt;/h2&gt;\n&lt;p&gt;The &lt;code&gt;gets()&lt;/code&gt; function does not perform bounds checking, therefore this function is extremely vulnerable to buffer-overflow attacks. It cannot be used safely (unless the program runs in an environment which restricts what can appear on &lt;code&gt;stdin&lt;/code&gt;). For this reason, the function has been deprecated in the third corrigendum to the C99 standard and removed altogether in the C11 standard. &lt;code&gt;fgets()&lt;/code&gt; and &lt;code&gt;gets_s()&lt;/code&gt; are the recommended replacements.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Never use &lt;code&gt;gets()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As you can see, the function has been deprecated and removed entirely in C11 or later.&lt;/p&gt;\n&lt;p&gt;Use &lt;a href=&quot;https://en.cppreference.com/w/c/io/fgets&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;fgets()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://en.cppreference.com/w/c/io/gets&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;gets_s()&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;\n&lt;p&gt;Here is my demo usage of &lt;code&gt;fgets()&lt;/code&gt;, with full error checking:&lt;/p&gt;\n&lt;p&gt;From &lt;a href=&quot;https://github.com/ElectricRCAircraftGuy/eRCaGuy_hello_world/blob/master/c/read_stdin_fgets_basic_input_from_user.c&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;read_stdin_fgets_basic_input_from_user.c&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// `errno`&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;   &lt;span class=&quot;hljs-comment&quot;&gt;// `printf()`, `fgets()`&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// `exit()`&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// `strerror()`&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// int main(int argc, char *argv[])  // alternative prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// NEVER USE `gets()`! USE `fgets()` BELOW INSTEAD!&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// USE THIS!: `fgets()`: &quot;file get string&quot;, which reads until either EOF is&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// reached, OR a newline (`\\n`) is found, keeping the newline char in&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// `buf`.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// For `feof()` and `ferror()`, see:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 1. https://en.cppreference.com/w/c/io/feof&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// 1. https://en.cppreference.com/w/c/io/ferror&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter up to %zu chars: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(buf) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// - 1 to save room&lt;/span&gt;\n                                                        &lt;span class=&quot;hljs-comment&quot;&gt;// for null terminator&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* retval = fgets(buf, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (feof(&lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;))\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Check for `EOF`, which means &quot;End of File was reached&quot;.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// - This doesn&apos;t really make sense on `stdin` I think, but it is a good&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//   check to have when reading from a regular file with `fgets&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//   ()`. Keep it here regardless, just in case.&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EOF (End of File) reached.\\n&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ferror(&lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error indicator set. IO error when reading from file &quot;&lt;/span&gt;\n               &lt;span class=&quot;hljs-string&quot;&gt;&quot;`stdin`.\\n&quot;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (retval == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR in %s(): fgets() failed; errno = %i: %s\\n&quot;&lt;/span&gt;,\n            __func__, errno, strerror(errno));\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; num_chars_written = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buf) + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// + 1 for null terminator&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (num_chars_written &amp;gt;= &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(buf))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Warning: user input may have been truncated! All %zu chars &quot;&lt;/span&gt;\n               &lt;span class=&quot;hljs-string&quot;&gt;&quot;were written into buffer.\\n&quot;&lt;/span&gt;, num_chars_written);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;You entered \\&quot;%s\\&quot;.\\n&quot;&lt;/span&gt;, buf);\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Sample runs and output:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;eRCaGuy_hello_world/c$ gcc -Wall -Wextra -Werror -O3 -&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;=c17 read_stdin_fgets_basic_input_from_user.c -o bin/a &amp;amp;&amp;amp; bin/a\nEnter up to &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; chars: hello world!\nWarning: user input may have been truncated! All &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; chars were written into buffer.\nYou entered &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello wor&quot;&lt;/span&gt;.\n\neRCaGuy_hello_world/c$ gcc -Wall -Wextra -Werror -O3 -&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;=c17 read_stdin_fgets_basic_input_from_user.c -o bin/a &amp;amp;&amp;amp; bin/a\nEnter up to &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; chars: hey\nYou entered &lt;span class=&quot;hljs-string&quot;&gt;&quot;hey\n&quot;&lt;/span&gt;.\n&lt;/code&gt;&lt;/pre&gt;\n    "],"87":["\n&lt;p&gt;The &lt;a href=&quot;http://ex-parrot.com/%7Epdw/Mail-RFC822-Address.html&quot; rel=&quot;noreferrer&quot;&gt;fully RFC 822 compliant regex&lt;/a&gt; is inefficient and obscure because of its length.  Fortunately, RFC 822 was superseded twice and the current specification for email addresses is &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5322&quot; rel=&quot;noreferrer&quot;&gt;RFC 5322&lt;/a&gt;.  RFC 5322 leads to a regex that can be understood if studied for a few minutes and is efficient enough for actual use.&lt;/p&gt;\n&lt;p&gt;One RFC 5322 compliant regex can be found at the top of the page at &lt;a href=&quot;http://emailregex.com/&quot; rel=&quot;noreferrer&quot;&gt;http://emailregex.com/&lt;/a&gt; but uses the IP address pattern that is floating around the internet with a bug that allows &lt;code&gt;00&lt;/code&gt; for any of the unsigned byte decimal values in a dot-delimited address, which is illegal.  The rest of it appears to be consistent with the RFC 5322 grammar and passes several tests using &lt;code&gt;grep -Po&lt;/code&gt;, including cases domain names, IP addresses, bad ones, and account names with and without quotes.&lt;/p&gt;\n&lt;p&gt;Correcting the &lt;code&gt;00&lt;/code&gt; bug in the IP pattern, we obtain a working and fairly fast regex.  (Scrape the rendered version, not the markdown, for actual code.)&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;(?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*|&quot;(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*&quot;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;(?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;!#$%&amp;amp;&lt;span class=&quot;hljs-string&quot;&gt;&apos;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;&apos;&lt;/span&gt;*+/=?^_`{|}~-]+)*|&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*&quot;&lt;/span&gt;)@(?:(?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;](?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]*[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])?\\.)+[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;](?:[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]*[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])?|\\[(?:(?:(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]?[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]))\\.){&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}(?:(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]|[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]?[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;])|[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-]*[a-z0-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here is &lt;a href=&quot;https://regexper.com/#(%3F%3A%5Ba-z0-9!%23%24%25%26%27*%2B%2F%3D%3F%5E_%60%7B%7C%7D%7E-%5D%2B(%3F%3A%5C.%5Ba-z0-9!%23%24%25%26%27*%2B%2F%3D%3F%5E_%60%7B%7C%7D%7E-%5D%2B)*%7C%22(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21%5Cx23-%5Cx5b%5Cx5d-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)*%22)%40(%3F%3A(%3F%3A%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%5C.)%2B%5Ba-z0-9%5D(%3F%3A%5Ba-z0-9-%5D*%5Ba-z0-9%5D)%3F%7C%5C%5B(%3F%3A(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D))%5C.)%7B3%7D(%3F%3A(2(5%5B0-5%5D%7C%5B0-4%5D%5B0-9%5D)%7C1%5B0-9%5D%5B0-9%5D%7C%5B1-9%5D%3F%5B0-9%5D)%7C%5Ba-z0-9-%5D*%5Ba-z0-9%5D%3A(%3F%3A%5B%5Cx01-%5Cx08%5Cx0b%5Cx0c%5Cx0e-%5Cx1f%5Cx21-%5Cx5a%5Cx53-%5Cx7f%5D%7C%5C%5C%5B%5Cx01-%5Cx09%5Cx0b%5Cx0c%5Cx0e-%5Cx7f%5D)%2B)%5C%5D)&quot; rel=&quot;noreferrer&quot;&gt;diagram&lt;/a&gt; of &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot; rel=&quot;noreferrer&quot;&gt;finite state machine&lt;/a&gt; for above regexp which is more clear than regexp itself\n&lt;a href=&quot;https://i.stack.imgur.com/YI6KR.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/YI6KR.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;The more sophisticated patterns in Perl and PCRE (regex library used e.g. in PHP) can &lt;a href=&quot;https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982&quot;&gt;correctly parse RFC 5322 without a hitch&lt;/a&gt;. Python and C# can do that too, but they use a different syntax from those first two. However, if you are forced to use one of the many less powerful pattern-matching languages, then its best to use a real parser.&lt;/p&gt;\n&lt;p&gt;It&apos;s also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered on the same web page as was the address.&lt;/p&gt;\n&lt;p&gt;Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down &lt;code&gt;president@whitehouse.gov&lt;/code&gt;, and that will even parse as legal, but it isn&apos;t likely to be the person at the other end.&lt;/p&gt;\n&lt;p&gt;For PHP, you should &lt;em&gt;not&lt;/em&gt; use the pattern given in &lt;a href=&quot;http://www.linuxjournal.com/article/9585&quot; rel=&quot;noreferrer&quot;&gt;Validate an E-Mail Address with PHP, the Right Way&lt;/a&gt; from which I quote:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;That is no better than all the other non-RFC patterns. It isnt even smart enough to handle even &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc822&quot; rel=&quot;noreferrer&quot;&gt;RFC 822&lt;/a&gt;, let alone RFC 5322. &lt;a href=&quot;https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/1917982#1917982&quot;&gt;This one&lt;/a&gt;, however, is.&lt;/p&gt;\n&lt;p&gt;If you want to get fancy and pedantic, &lt;a href=&quot;http://cubicspot.blogspot.com/2012/06/correct-way-to-validate-e-mail-address.html&quot; rel=&quot;noreferrer&quot;&gt;implement a complete state engine&lt;/a&gt;. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can&apos;t handle it is just rude and impolite from the user&apos;s perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The specified e-mail address &apos;myemail@address,com&apos; is invalid. Did you mean &apos;myemail@address.com&apos;?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;See also &lt;a href=&quot;http://worsethanfailure.com/Articles/Validating_Email_Addresses.aspx&quot; rel=&quot;noreferrer&quot;&gt;Validating Email Addresses&lt;/a&gt;, including the comments. Or &lt;a href=&quot;http://fightingforalostcause.net/misc/2006/compare-email-regex.php&quot; rel=&quot;noreferrer&quot;&gt;Comparing E-mail Address Validating Regular Expressions&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SrUwP.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SrUwP.png&quot; alt=&quot;Regular expression visualization&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.debuggex.com/r/aH_x42NflV8G-GS7&quot; rel=&quot;noreferrer&quot;&gt;Debuggex Demo&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You should not use regular expressions to validate email addresses.&lt;/p&gt;\n&lt;p&gt;Instead, in C# use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.net.mail.mailaddress.aspx&quot; rel=&quot;noreferrer&quot;&gt;MailAddress&lt;/a&gt; class, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-csharp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    address = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MailAddress(address).Address;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(FormatException) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// address is invalid&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;MailAddress&lt;/code&gt; class uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&quot; rel=&quot;noreferrer&quot;&gt;BNF&lt;/a&gt; parser to validate the address in full accordance with RFC822.&lt;/p&gt;\n&lt;p&gt;If you plan to use the &lt;code&gt;MailAddress&lt;/code&gt; to validate the e-mail address, be aware that this approach accepts the display name part of the e-mail address as well, and that may not be exactly what you want to achieve. For example, it accepts these strings as valid e-mail addresses:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&quot;user1@hotmail.com; user2@gmail.com&quot;&lt;/li&gt;\n&lt;li&gt;&quot;user1@hotmail.com; user2@gmail.com; user3@company.com&quot;&lt;/li&gt;\n&lt;li&gt;&quot;User Display Name user3@company.com&quot;&lt;/li&gt;\n&lt;li&gt;&quot;user4 @company.com&quot;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;In some of these cases, only the last part of the strings is parsed as the address; the rest before that is the display name. To get a plain e-mail address without any display name, you can check the normalized address against your original string.&lt;/p&gt;\n&lt;pre class=&quot;lang-csharp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; isValid = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n    MailAddress address = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MailAddress(emailAddress);\n    isValid = (address.Address == emailAddress);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// isValid = string.IsNullOrEmpty(address.DisplayName);&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (FormatException)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// address is invalid&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Furthermore, an address having a dot at the end, like &lt;code&gt;user@company.&lt;/code&gt; is accepted by MailAddress as well.&lt;/p&gt;\n&lt;p&gt;If you really want to use a regex, &lt;a href=&quot;http://www.ex-parrot.com/%7Epdw/Mail-RFC822-Address.html&quot; rel=&quot;noreferrer&quot;&gt;here it is&lt;/a&gt;:&lt;/p&gt;\n&lt;pre&gt;(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)\n?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;\n\n@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;\n(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;\n:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?\n:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\\n]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;\n()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;\n\n@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)&lt;/pre&gt;\n    ","\n&lt;p&gt;This question is asked a lot, but I think you should step back and ask yourself &lt;em&gt;why&lt;/em&gt; you want to validate email adresses syntactically? What is the benefit really?&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It will not catch common typos.&lt;/li&gt;\n&lt;li&gt;It does not prevent people from entering invalid or made-up email addresses, or entering someone else&apos;s address for that matter.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you want to validate that an email is correct, you have no choice than to send a confirmation email and have the user reply to that. In many cases you will &lt;em&gt;have&lt;/em&gt; to send a confirmation mail anyway for security reasons or for ethical reasons (so you cannot e.g. sign someone up to a service against their will).&lt;/p&gt;\n    ","\n&lt;p&gt;It all depends on how accurate you want to be.  For my purposes, where I&apos;m just trying to keep out things like &lt;code&gt;bob @ aol.com&lt;/code&gt; (spaces in emails) or &lt;code&gt;steve&lt;/code&gt; (no domain at all) or &lt;code&gt;mary@aolcom&lt;/code&gt; (no period before .com), I use&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-coffeescript&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/^\\S+@\\S+\\.\\S+$/&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sure, it will match things that aren&apos;t valid email addresses, but it&apos;s a matter of getting common simple errors.&lt;/p&gt;\n\n&lt;p&gt;There are any number of changes that can be made to that regex (and some are in the comments for this answer), but it&apos;s simple, and easy to understand, and is a fine first attempt.&lt;/p&gt;\n    ","\n&lt;p&gt;It depends on what you mean by best:\nIf you&apos;re talking about catching every valid email address use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\n\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(\n?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \n\\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\0\n31]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\\n](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+\n(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:\n(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)\n?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\\nr\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[\n \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)\n?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t]\n)*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[\n \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*\n)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t]\n)+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)\n*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+\n|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\n\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\n\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t\n]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031\n]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](\n?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?\n:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?\n:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?\n:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?\n[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*:(?:(?:\\r\\n)?[ \\t])*(?:(?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\n\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;\n@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;\n(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?\n:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\n\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\n\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(\n?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;\n:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([\n^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;\n.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\\n]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\\n[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\\nr\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \n\\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]\n|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\0\n00-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\\n.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?\n:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*))*@(?:(?:\\r\\n)?[ \\t])*\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t])*(?:[\n^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]\n]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(?:\\r\\n)?[ \\t])*)(?:,\\s*(\n?:(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(\n?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\n\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t\n])*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t\n])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?\n:\\.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\n\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*|(?:\n[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\\n]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)*\\&amp;lt;(?:(?:\\r\\n)\n?[ \\t])*(?:@(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;\n()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)\n?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;\n@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*(?:,@(?:(?:\\r\\n)?[\n \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,\n;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\\r\\n)?[ \\t]\n)*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\\n&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*)*:(?:(?:\\r\\n)?[ \\t])*)?\n(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\n\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])*)(?:\\.(?:(?:\n\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z|(?=[\\[\n&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|&quot;(?:[^\\&quot;\\r\\\\]|\\\\.|(?:(?:\\r\\n)?[ \\t]))*&quot;(?:(?:\\r\\n)?[ \\t])\n*))*@(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])\n+|\\Z|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*)(?:\\\n.(?:(?:\\r\\n)?[ \\t])*(?:[^()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\] \\000-\\031]+(?:(?:(?:\\r\\n)?[ \\t])+|\\Z\n|(?=[\\[&quot;()&amp;lt;&amp;gt;@,;:\\\\&quot;.\\[\\]]))|\\[([^\\[\\]\\r\\\\]|\\\\.)*\\](?:(?:\\r\\n)?[ \\t])*))*\\&amp;gt;(?:(\n?:\\r\\n)?[ \\t])*))*)?;\\s*)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(&lt;a href=&quot;http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html&quot; rel=&quot;noreferrer&quot;&gt;http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html&lt;/a&gt;)\nIf you&apos;re looking for something simpler but that will catch most valid email addresses try something like: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT:\nFrom the link:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;This regular expression will only validate addresses that have had any comments stripped and replaced with whitespace (this is done by the module).&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Per &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#valid-e-mail-address&quot; rel=&quot;noreferrer&quot;&gt;the W3C HTML5 specification&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;^[a-zA-Z0-9.!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Context:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;A &lt;strong&gt;valid e-mail address&lt;/strong&gt; is a string that matches the ABNF production [].&lt;/p&gt;\n&lt;p&gt;&lt;i&gt;Note: This requirement is a &lt;a href=&quot;http://www.w3.org/TR/html5/introduction.html#willful-violation&quot; rel=&quot;noreferrer&quot;&gt;willful violation&lt;/a&gt; of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;noreferrer&quot;&gt;RFC 5322&lt;/a&gt;, which defines a syntax for e-mail addresses that is simultaneously too strict (before the @ character), too vague (after the @ character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.&lt;/i&gt;&lt;/p&gt;\n&lt;p&gt;&lt;i&gt;The following JavaScript- and Perl-compatible regular expression is an implementation of the above definition.&lt;/i&gt;&lt;/p&gt;&lt;i&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;/^[a-zA-Z0-9.!#$%&amp;amp;&apos;*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/i&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;[UPDATED] I&apos;ve collated everything I know about email address validation at &lt;a href=&quot;http://isemail.info&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://isemail.info&lt;/a&gt;, which now not only validates, but it also diagnoses problems with email addresses. I agree with many of the comments here that validation is only part of the answer; see my essay &lt;em&gt;&lt;a href=&quot;http://isemail.info/about&quot; rel=&quot;nofollow noreferrer&quot;&gt;What is a valid email address?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;is_email() remains, as far as I know, the only validator that will tell you definitively whether a given string is a valid email address or not. I&apos;ve uploaded a new version at &lt;a href=&quot;http://isemail.info/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://isemail.info/&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;I collated test cases from Cal Henderson, Dave Child, Phil Haack, Doug Lovell, &lt;a href=&quot;https://en.wikipedia.org/wiki/Email#Message_format&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;5322&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Email_address#Syntax&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;3696&lt;/a&gt;. 275 test addresses in all. I ran all these tests against all the free validators I could find.&lt;/p&gt;\n&lt;p&gt;I&apos;ll try to keep this page up-to-date as people enhance their validators. Thanks to Cal, Michael, Dave, Paul and Phil for their help and cooperation in compiling these tests and constructive criticism of &lt;a href=&quot;http://code.google.com/p/isemail&quot; rel=&quot;nofollow noreferrer&quot;&gt;my own validator&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;People should be aware of the &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=3696&quot; rel=&quot;nofollow noreferrer&quot;&gt;errata against RFC 3696&lt;/a&gt; in particular. Three of the canonical examples are in fact invalid addresses. And the maximum length of an address is 254 or 256 characters, &lt;strong&gt;not&lt;/strong&gt; 320.&lt;/p&gt;\n    ","\n&lt;p&gt;Its easy in Perl 5.10 or newer:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;/(?(DEFINE)\n   (?&amp;lt;address&amp;gt;         (?&amp;amp;mailbox) | (?&amp;amp;group))\n   (?&amp;lt;mailbox&amp;gt;         (?&amp;amp;name_addr) | (?&amp;amp;addr_spec))\n   (?&amp;lt;name_addr&amp;gt;       (?&amp;amp;display_name)? (?&amp;amp;angle_addr))\n   (?&amp;lt;angle_addr&amp;gt;      (?&amp;amp;CFWS)? &amp;lt; (?&amp;amp;addr_spec) &amp;gt; (?&amp;amp;CFWS)?)\n   (?&amp;lt;group&amp;gt;           (?&amp;amp;display_name) : (?:(?&amp;amp;mailbox_list) | (?&amp;amp;CFWS))? ;\n                                          (?&amp;amp;CFWS)?)\n   (?&amp;lt;display_name&amp;gt;    (?&amp;amp;phrase))\n   (?&amp;lt;mailbox_list&amp;gt;    (?&amp;amp;mailbox) (?: , (?&amp;amp;mailbox))*)\n\n   (?&amp;lt;addr_spec&amp;gt;       (?&amp;amp;local_part) \\@ (?&amp;amp;domain))\n   (?&amp;lt;local_part&amp;gt;      (?&amp;amp;dot_atom) | (?&amp;amp;quoted_string))\n   (?&amp;lt;domain&amp;gt;          (?&amp;amp;dot_atom) | (?&amp;amp;domain_literal))\n   (?&amp;lt;domain_literal&amp;gt;  (?&amp;amp;CFWS)? \\[ (?: (?&amp;amp;FWS)? (?&amp;amp;dcontent))* (?&amp;amp;FWS)?\n                                 \\] (?&amp;amp;CFWS)?)\n   (?&amp;lt;dcontent&amp;gt;        (?&amp;amp;dtext) | (?&amp;amp;quoted_pair))\n   (?&amp;lt;dtext&amp;gt;           (?&amp;amp;NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\n\n   (?&amp;lt;atext&amp;gt;           (?&amp;amp;ALPHA) | (?&amp;amp;DIGIT) | [!#\\$%&amp;amp;&apos;*+-/=?^_`{|}~])\n   (?&amp;lt;atom&amp;gt;            (?&amp;amp;CFWS)? (?&amp;amp;atext)+ (?&amp;amp;CFWS)?)\n   (?&amp;lt;dot_atom&amp;gt;        (?&amp;amp;CFWS)? (?&amp;amp;dot_atom_text) (?&amp;amp;CFWS)?)\n   (?&amp;lt;dot_atom_text&amp;gt;   (?&amp;amp;atext)+ (?: \\. (?&amp;amp;atext)+)*)\n\n   (?&amp;lt;text&amp;gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\n   (?&amp;lt;quoted_pair&amp;gt;     \\\\ (?&amp;amp;text))\n\n   (?&amp;lt;qtext&amp;gt;           (?&amp;amp;NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\n   (?&amp;lt;qcontent&amp;gt;        (?&amp;amp;qtext) | (?&amp;amp;quoted_pair))\n   (?&amp;lt;quoted_string&amp;gt;   (?&amp;amp;CFWS)? (?&amp;amp;DQUOTE) (?:(?&amp;amp;FWS)? (?&amp;amp;qcontent))*\n                        (?&amp;amp;FWS)? (?&amp;amp;DQUOTE) (?&amp;amp;CFWS)?)\n\n   (?&amp;lt;word&amp;gt;            (?&amp;amp;atom) | (?&amp;amp;quoted_string))\n   (?&amp;lt;phrase&amp;gt;          (?&amp;amp;word)+)\n\n   # Folding white space\n   (?&amp;lt;FWS&amp;gt;             (?: (?&amp;amp;WSP)* (?&amp;amp;CRLF))? (?&amp;amp;WSP)+)\n   (?&amp;lt;ctext&amp;gt;           (?&amp;amp;NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\n   (?&amp;lt;ccontent&amp;gt;        (?&amp;amp;ctext) | (?&amp;amp;quoted_pair) | (?&amp;amp;comment))\n   (?&amp;lt;comment&amp;gt;         \\( (?: (?&amp;amp;FWS)? (?&amp;amp;ccontent))* (?&amp;amp;FWS)? \\) )\n   (?&amp;lt;CFWS&amp;gt;            (?: (?&amp;amp;FWS)? (?&amp;amp;comment))*\n                       (?: (?:(?&amp;amp;FWS)? (?&amp;amp;comment)) | (?&amp;amp;FWS)))\n\n   # No whitespace control\n   (?&amp;lt;NO_WS_CTL&amp;gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\n\n   (?&amp;lt;ALPHA&amp;gt;           [A-Za-z])\n   (?&amp;lt;DIGIT&amp;gt;           [0-9])\n   (?&amp;lt;CRLF&amp;gt;            \\x0d \\x0a)\n   (?&amp;lt;DQUOTE&amp;gt;          &quot;)\n   (?&amp;lt;WSP&amp;gt;             [\\x20\\x09])\n )\n\n (?&amp;amp;address)/x\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;^\\w+([-+.&apos;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is the one used in ASP.NET by the RegularExpressionValidator.&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t know about best, but &lt;a href=&quot;http://ex-parrot.com/%7Epdw/Mail-RFC822-Address.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;this one&lt;/a&gt; is at least correct, as long as the addresses have their comments stripped and replaced with white space.&lt;/p&gt;\n&lt;p&gt;Seriously. You should use an already-written library for validating emails. The best way is probably to just send a verification e-mail to that address.&lt;/p&gt;\n    ","\n&lt;h1&gt;Quick answer&lt;/h1&gt;\n&lt;p&gt;Use the following regex for input validation:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Addresses matched by this regex:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;have a local part (i.e. the part before the @-sign) that is strictly compliant with RFC&amp;nbsp;5321/5322,&lt;/li&gt;\n&lt;li&gt;have a domain part (i.e. the part after the @-sign) that is a host name with at least two labels, each of which is at most 63 characters long.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The second constraint is a restriction on RFC&amp;nbsp;5321/5322.&lt;/p&gt;\n&lt;h1&gt;Elaborate answer&lt;/h1&gt;\n&lt;p&gt;Using a regular expression that recognizes email addresses could be useful in various situations: for example to scan for email addresses in a document, to validate user input, or as an integrity constraint on a data repository.&lt;/p&gt;\n&lt;p&gt;It should however be noted that if you want to find out if the address actually refers to an existing mailbox, there&apos;s no substitute for sending a message to the address. If you only want to check if an address is grammatically correct then you could use a regular expression, but note that &lt;code&gt;&quot;&quot;@[]&lt;/code&gt; is a grammatically correct email address that certainly doesn&apos;t refer to an existing mailbox.&lt;/p&gt;\n&lt;p&gt;The syntax of email addresses has been defined in various &lt;a href=&quot;http://en.wikipedia.org/wiki/Request_for_Comments&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFCs&lt;/a&gt;, most notably &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc822&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt; and &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;5322&lt;/a&gt;. RFC&amp;nbsp;822 should be seen as the &quot;original&quot; standard and RFC&amp;nbsp;5322 as the latest standard. The syntax defined in RFC&amp;nbsp;822 is the most lenient and subsequent standards have restricted the syntax further and further, where newer systems or services should recognize obsolete syntax, but never produce it.&lt;/p&gt;\n&lt;p&gt;In this answer Ill take email address to mean &lt;code&gt;addr-spec&lt;/code&gt; as defined in the RFCs (i.e. &lt;code&gt;jdoe@example.org&lt;/code&gt;, but not &lt;code&gt;&quot;John Doe&quot;&amp;lt;jdoe@example.org&amp;gt;&lt;/code&gt;, nor &lt;code&gt;some-group:jdoe@example.org,mrx@exampel.org;&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;There&apos;s one problem with translating the RFC syntaxes into regexes: the syntaxes are not regular! This is because they allow for optional comments in email addresses that can be infinitely nested, while infinite nesting can&apos;t be described by a regular expression. To scan for or validate addresses containing comments you need a parser or more powerful expressions. (Note that languages like Perl have constructs to describe context free grammars in a regex-like way.) In this answer I&apos;ll disregard comments and only consider proper regular expressions.&lt;/p&gt;\n&lt;p&gt;The RFCs define syntaxes for email messages, not for email addresses as such. Addresses may appear in various header fields and this is where they are primarily defined. When they appear in header fields addresses may contain (between lexical tokens) whitespace, comments and even linebreaks. Semantically this has no significance however. By removing this whitespace, etc. from an address you get a semantically equivalent &lt;em&gt;canonical representation&lt;/em&gt;. Thus, the canonical representation of &lt;code&gt;first. last (comment) @   [3.5.7.9]&lt;/code&gt; is &lt;code&gt;first.last@[3.5.7.9]&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Different syntaxes should be used for different purposes. If you want to scan for email addresses in a (possibly very old) document it may be a good idea to use the syntax as defined in RFC&amp;nbsp;822. On the other hand, if you want to validate user input you may want to use the syntax as defined in RFC&amp;nbsp;5322, probably only accepting canonical representations. You should decide which syntax applies to your specific case.&lt;/p&gt;\n&lt;p&gt;I use POSIX &quot;extended&quot; regular expressions in this answer, assuming an ASCII compatible character set.&lt;/p&gt;\n&lt;h2&gt;RFC 822&lt;/h2&gt;\n&lt;p&gt;I arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I&apos;ll try to fix the expression as soon as possible.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;))*@([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I believe it&apos;s fully compliant with RFC 822 including the &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=822&quot; rel=&quot;nofollow noreferrer&quot;&gt;errata&lt;/a&gt;. It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.&lt;/p&gt;\n&lt;p&gt;The derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. Where an erratum has been published I give a separate expression for the corrected grammar rule (marked &quot;erratum&quot;) and use the updated version as a subexpression in subsequent regular expressions.&lt;/p&gt;\n&lt;p&gt;As stated in paragraph 3.1.4. of RFC 822 optional linear white space may be inserted between lexical tokens. Where applicable I&apos;ve expanded the expressions to accommodate this rule and marked the result with &quot;opt-lwsp&quot;.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;CHAR        =  &amp;lt;any ASCII character&amp;gt;\n            =~ .\n\nCTL         =  &amp;lt;any ASCII control character and DEL&amp;gt;\n            =~ [\\x00-\\x1F\\x7F]\n\nCR          =  &amp;lt;ASCII CR, carriage return&amp;gt;\n            =~ \\r\n\nLF          =  &amp;lt;ASCII LF, linefeed&amp;gt;\n            =~ \\n\n\nSPACE       =  &amp;lt;ASCII SP, space&amp;gt;\n            =~  \n\nHTAB        =  &amp;lt;ASCII HT, horizontal-tab&amp;gt;\n            =~ \\t\n\n&amp;lt;&quot;&amp;gt;         =  &amp;lt;ASCII quote mark&amp;gt;\n            =~ &quot;\n\nCRLF        =  CR LF\n            =~ \\r\\n\n\nLWSP-char   =  SPACE / HTAB\n            =~ [ \\t]\n\nlinear-white-space =  1*([CRLF] LWSP-char)\n                   =~ ((\\r\\n)?[ \\t])+\n\nspecials    =  &quot;(&quot; / &quot;)&quot; / &quot;&amp;lt;&quot; / &quot;&amp;gt;&quot; / &quot;@&quot; /  &quot;,&quot; / &quot;;&quot; / &quot;:&quot; / &quot;\\&quot; / &amp;lt;&quot;&amp;gt; /  &quot;.&quot; / &quot;[&quot; / &quot;]&quot;\n            =~ [][()&amp;lt;&amp;gt;@,;:\\\\&quot;.]\n\nquoted-pair =  &quot;\\&quot; CHAR\n            =~ \\\\.\n\nqtext       =  &amp;lt;any CHAR excepting &amp;lt;&quot;&amp;gt;, &quot;\\&quot; &amp;amp; CR, and including linear-white-space&amp;gt;\n            =~ [^&quot;\\\\\\r]|((\\r\\n)?[ \\t])+\n\ndtext       =  &amp;lt;any CHAR excluding &quot;[&quot;, &quot;]&quot;, &quot;\\&quot; &amp;amp; CR, &amp;amp; including linear-white-space&amp;gt;\n            =~ [^][\\\\\\r]|((\\r\\n)?[ \\t])+\n\nquoted-string  =  &amp;lt;&quot;&amp;gt; *(qtext|quoted-pair) &amp;lt;&quot;&amp;gt;\n               =~ &quot;([^&quot;\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*&quot;\n(erratum)      =~ &quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;\n\ndomain-literal =  &quot;[&quot; *(dtext|quoted-pair) &quot;]&quot;\n               =~ \\[([^][\\\\\\r]|((\\r\\n)?[ \\t])|\\\\.)*]\n(erratum)      =~ \\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\natom        =  1*&amp;lt;any CHAR except specials, SPACE and CTLs&amp;gt;\n            =~ [^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+\n\nword        =  atom / quoted-string\n            =~ [^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;\n\ndomain-ref  =  atom\n\nsub-domain  =  domain-ref / domain-literal\n            =~ [^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]\n\nlocal-part  =  word *(&quot;.&quot; word)\n            =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;))*\n(opt-lwsp)  =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;))*\n\ndomain      =  sub-domain *(&quot;.&quot; sub-domain)\n            =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n\naddr-spec   =  local-part &quot;@&quot; domain\n            =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;))*@([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(opt-lwsp)  =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)((\\r\\n)?[ \\t])*(\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*&quot;)((\\r\\n)?[ \\t])*)*@((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*])(((\\r\\n)?[ \\t])*\\.((\\r\\n)?[ \\t])*([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]|(\\r\\n)?[ \\t]))*(\\\\\\r)*]))*\n(canonical) =~ ([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;)(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|&quot;(\\n|(\\\\\\r)*([^&quot;\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*&quot;))*@([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()&amp;lt;&amp;gt;@,;:\\\\&quot;. \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;RFC 5322&lt;/h2&gt;\n&lt;p&gt;I arrived at the following regular expression. I invite everyone to try and break it. If you find any false positives or false negatives, please post them in a comment and I&apos;ll try to fix the expression as soon as possible.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I believe it&apos;s fully compliant with RFC 5322 including the &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;errata&lt;/a&gt;. It only recognizes email addresses in their canonical form. For a regex that recognizes (folding) whitespace see the derivation below.&lt;/p&gt;\n&lt;p&gt;The derivation shows how I arrived at the expression. I list all the relevant grammar rules from the RFC exactly as they appear, followed by the corresponding regex. For rules that include semantically irrelevant (folding) whitespace, I give a separate regex marked &quot;(normalized)&quot; that doesn&apos;t accept this whitespace.&lt;/p&gt;\n&lt;p&gt;I ignored all the &quot;obs-&quot; rules from the RFC. This means that the regexes only match email addresses that are strictly RFC&amp;nbsp;5322 compliant. If you have to match &quot;old&quot; addresses (as the looser grammar including the &quot;obs-&quot; rules does), you can use one of the RFC&amp;nbsp;822 regexes from the previous paragraph.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;VCHAR           =   %x21-7E\n                =~  [!-~]\n\nALPHA           =   %x41-5A / %x61-7A\n                =~  [A-Za-z]\n\nDIGIT           =   %x30-39\n                =~  [0-9]\n\nHTAB            =   %x09\n                =~  \\t\n\nCR              =   %x0D\n                =~  \\r\n\nLF              =   %x0A\n                =~  \\n\n\nSP              =   %x20\n                =~  \n\nDQUOTE          =   %x22\n                =~  &quot;\n\nCRLF            =   CR LF\n                =~  \\r\\n\n\nWSP             =   SP / HTAB\n                =~  [\\t ]\n\nquoted-pair     =   &quot;\\&quot; (VCHAR / WSP)\n                =~  \\\\[\\t -~]\n\nFWS             =   ([*WSP CRLF] 1*WSP)\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\nctext           =   %d33-39 / %d42-91 / %d93-126\n                =~  []!-&apos;*-[^-~]\n\n(&quot;comment&quot; is left out in the regex)\nccontent        =   ctext / quoted-pair / comment\n                =~  []!-&apos;*-[^-~]|(\\\\[\\t -~])\n\n(not regular)\ncomment         =   &quot;(&quot; *([FWS] ccontent) [FWS] &quot;)&quot;\n\n(is equivalent to FWS when leaving out comments)\nCFWS            =   (1*([FWS] comment) [FWS]) / FWS\n                =~  ([\\t ]*\\r\\n)?[\\t ]+\n\natext           =   ALPHA / DIGIT / &quot;!&quot; / &quot;#&quot; / &quot;$&quot; / &quot;%&quot; / &quot;&amp;amp;&quot; / &quot;&apos;&quot; / &quot;*&quot; / &quot;+&quot; / &quot;-&quot; / &quot;/&quot; / &quot;=&quot; / &quot;?&quot; / &quot;^&quot; / &quot;_&quot; / &quot;`&quot; / &quot;{&quot; / &quot;|&quot; / &quot;}&quot; / &quot;~&quot;\n                =~  [-!#-&apos;*+/-9=?A-Z^-~]\n\ndot-atom-text   =   1*atext *(&quot;.&quot; 1*atext)\n                =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*\n\ndot-atom        =   [CFWS] dot-atom-text [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*\n\nqtext           =   %d33 / %d35-91 / %d93-126\n                =~  []!#-[^-~]\n\nqcontent        =   qtext / quoted-pair\n                =~  []!#-[^-~]|(\\\\[\\t -~])\n\n(erratum)\nquoted-string   =   [CFWS] DQUOTE ((1*([FWS] qcontent) [FWS]) / FWS) DQUOTE [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?&quot;(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)&quot;(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  &quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;\n\ndtext           =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\ndomain-literal  =   [CFWS] &quot;[&quot; *([FWS] dtext) [FWS] &quot;]&quot; [CFWS]\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  \\[[\\t -Z^-~]*]\n\nlocal-part      =   dot-atom / quoted-string\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?&quot;(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)&quot;(([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;\n\ndomain          =   dot-atom / domain-literal\n                =~  (([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?\n(normalized)    =~  [-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*]\n\naddr-spec       =   local-part &quot;@&quot; domain\n                =~  ((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?&quot;(((([\\t ]*\\r\\n)?[\\t ]+)?([]!#-[^-~]|(\\\\[\\t -~])))+(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?)&quot;(([\\t ]*\\r\\n)?[\\t ]+)?)@((([\\t ]*\\r\\n)?[\\t ]+)?[-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*(([\\t ]*\\r\\n)?[\\t ]+)?|(([\\t ]*\\r\\n)?[\\t ]+)?\\[((([\\t ]*\\r\\n)?[\\t ]+)?[!-Z^-~])*(([\\t ]*\\r\\n)?[\\t ]+)?](([\\t ]*\\r\\n)?[\\t ]+)?)\n(normalized)    =~  ([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|\\[[\\t -Z^-~]*])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that some sources (notably &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#valid-e-mail-address&quot; rel=&quot;nofollow noreferrer&quot;&gt;W3C&lt;/a&gt;) claim that RFC&amp;nbsp;5322 is too strict on the local part (i.e. the part before the @-sign). This is because &quot;..&quot;, &quot;a..b&quot; and &quot;a.&quot; are &lt;em&gt;not&lt;/em&gt; valid dot-atoms, while they may be used as mailbox names. The RFC, however, &lt;em&gt;does&lt;/em&gt; allow for local parts like these, except that they have to be quoted. So instead of &lt;code&gt;a..b@example.net&lt;/code&gt; you should write &lt;code&gt;&quot;a..b&quot;@example.net&lt;/code&gt;, which is semantically equivalent.&lt;/p&gt;\n&lt;h2&gt;Further restrictions&lt;/h2&gt;\n&lt;p&gt;SMTP (as defined in &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5321&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 5321&lt;/a&gt;) further restricts the set of valid email addresses (or actually: mailbox names). It seems reasonable to impose this stricter grammar, so that the matched email address can actually be used to send an email.&lt;/p&gt;\n&lt;p&gt;RFC 5321 basically leaves alone the &quot;local&quot; part (i.e. the part before the @-sign), but is stricter on the domain part (i.e. the part after the @-sign). It allows only host names in place of dot-atoms and address literals in place of domain literals.&lt;/p&gt;\n&lt;p&gt;The grammar presented in RFC 5321 is too lenient when it comes to both host names and IP addresses. I took the liberty of &quot;correcting&quot; the rules in question, using &lt;a href=&quot;https://tools.ietf.org/id/draft-main-ipaddr-text-rep-01.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;this draft&lt;/a&gt; and &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc1034&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;1034&lt;/a&gt; as guidelines. Here&apos;s the resulting regex.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Note that depending on the use case you may not want to allow for a &quot;General-address-literal&quot; in your regex. Also note that I used a negative lookahead &lt;code&gt;(?!IPv6:)&lt;/code&gt; in the final regex to prevent the &quot;General-address-literal&quot; part to match malformed IPv6 addresses. Some regex processors don&apos;t support negative lookahead. Remove the substring &lt;code&gt;|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+&lt;/code&gt; from the regex if you want to take the whole &quot;General-address-literal&quot; part out.&lt;/p&gt;\n&lt;p&gt;Here&apos;s the derivation:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Let-dig         =   ALPHA / DIGIT\n                =~  [0-9A-Za-z]\n\nLdh-str         =   *( ALPHA / DIGIT / &quot;-&quot; ) Let-dig\n                =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\n(regex is updated to make sure sub-domains are max. 63 characters long - RFC 1034 section 3.5)\nsub-domain      =   Let-dig [Ldh-str]\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\n\nDomain          =   sub-domain *(&quot;.&quot; sub-domain)\n                =~  [0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*\n\nSnum            =   1*3DIGIT\n                =~  [0-9]{1,3}\n\n(suggested replacement for &quot;Snum&quot;)\nip4-octet       =   DIGIT / %x31-39 DIGIT / &quot;1&quot; 2DIGIT / &quot;2&quot; %x30-34 DIGIT / &quot;25&quot; %x30-35\n                =~  25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9]\n\nIPv4-address-literal    =   Snum 3(&quot;.&quot;  Snum)\n                        =~  [0-9]{1,3}(\\.[0-9]{1,3}){3}\n\n(suggested replacement for &quot;IPv4-address-literal&quot;)\nip4-address     =   ip4-octet 3(&quot;.&quot; ip4-octet)\n                =~  (25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement for &quot;IPv6-hex&quot;)\nip6-h16         =   &quot;0&quot; / ( (%x49-57 / %x65-70 /%x97-102) 0*3(%x48-57 / %x65-70 /%x97-102) )\n                =~  0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}\n\n(not from RFC)\nls32            =   ip6-h16 &quot;:&quot; ip6-h16 / ip4-address\n                =~  (0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}\n\n(suggested replacement of &quot;IPv6-addr&quot;)\nip6-address     =                                      6(ip6-h16 &quot;:&quot;) ls32\n                    /                             &quot;::&quot; 5(ip6-h16 &quot;:&quot;) ls32\n                    / [                 ip6-h16 ] &quot;::&quot; 4(ip6-h16 &quot;:&quot;) ls32\n                    / [ *1(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot; 3(ip6-h16 &quot;:&quot;) ls32\n                    / [ *2(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot; 2(ip6-h16 &quot;:&quot;) ls32\n                    / [ *3(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;   ip6-h16 &quot;:&quot;  ls32\n                    / [ *4(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;                ls32\n                    / [ *5(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;   ip6-h16\n                    / [ *6(ip6-h16 &quot;:&quot;) ip6-h16 ] &quot;::&quot;\n                =~  (((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::\n\nIPv6-address-literal    =   &quot;IPv6:&quot; ip6-address\n                        =~  IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)\n\nStandardized-tag        =   Ldh-str\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]\n\ndcontent        =   %d33-90 / %d94-126\n                =~  [!-Z^-~]\n\nGeneral-address-literal =   Standardized-tag &quot;:&quot; 1*dcontent\n                        =~  [0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+\n\naddress-literal =   &quot;[&quot; ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) &quot;]&quot;\n                =~  \\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)]\n\nMailbox         =   Local-part &quot;@&quot; ( Domain / address-literal )\n                =~  ([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)*|\\[((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|IPv6:((((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){6}|::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){5}|[0-9A-Fa-f]{0,4}::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){4}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):)?(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){3}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,2}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){2}|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,3}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,4}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,5}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3})|(((0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}):){0,6}(0|[1-9A-Fa-f][0-9A-Fa-f]{0,3}))?::)|(?!IPv6:)[0-9A-Za-z-]*[0-9A-Za-z]:[!-Z^-~]+)])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;User input validation&lt;/h2&gt;\n&lt;p&gt;A common use case is user input validation, for example on an html form. In that case it&apos;s usually reasonable to preclude address-literals and to require at least two labels in the hostname. Taking the improved RFC&amp;nbsp;5321 regex from the previous section as a basis, the resulting expression would be:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?)+&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;I do not recommend restricting the local part further, e.g. by precluding quoted strings, since we don&apos;t know what kind of mailbox names some hosts allow (like &lt;code&gt;&quot;a..b&quot;@example.net&lt;/code&gt; or even &lt;code&gt;&quot;a b&quot;@example.net&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;I also do not recommend explicitly validating against a list of literal top-level domains or even imposing length-constraints (remember how &quot;.museum&quot; invalidated &lt;code&gt;[a-z]{2,4}&lt;/code&gt;), but if you must:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;([-!#-&apos;*+/-9=?A-Z^-~]+(\\.[-!#-&apos;*+/-9=?A-Z^-~]+)*|&quot;([]!#-[^-~ \\t]|(\\\\[\\t -~]))+&quot;)@([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?\\.)*(net|org|com|info|&lt;/code&gt;&lt;em&gt;etc...&lt;/em&gt;&lt;code&gt;)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Make sure to keep your regex up-to-date if you decide to go down the path of explicit top-level domain validation.&lt;/p&gt;\n&lt;h2&gt;Further considerations&lt;/h2&gt;\n&lt;p&gt;When only accepting host names in the domain part (after the @-sign), the regexes above accept only labels with at most 63 characters, as they should. However, they don&apos;t enforce the fact that the entire host name must be at most 253 characters long (including the dots). Although this constraint is strictly speaking still regular, it&apos;s not feasible to make a regex that incorporates this rule.&lt;/p&gt;\n&lt;p&gt;Another consideration, especially when using the regexes for input validation, is feedback to the user. If a user enters an incorrect address, it would be nice to give a little more feedback than a simple &quot;syntactically incorrect address&quot;. With &quot;vanilla&quot; regexes this is not possible.&lt;/p&gt;\n&lt;p&gt;These two considerations could be addressed by parsing the address. The extra length constraint on host names could in some cases also be addressed by using an extra regex that checks it, and matching the address against both expressions.&lt;/p&gt;\n&lt;p&gt;None of the regexes in this answer are optimized for performance. If performance is an issue, you should see if (and how) the regex of your choice can be optimized.&lt;/p&gt;\n    ","\n&lt;p&gt;The email addresses I want to validate are going to be used by an ASP.NET web application using the &lt;code&gt;System.Net.Mail&lt;/code&gt; namespace to send emails to a list of people.&lt;/p&gt;\n\n&lt;p&gt;So, rather than using some very complex regular expression, I just try to create a &lt;code&gt;MailAddress&lt;/code&gt; instance from the address. The &lt;code&gt;MailAddress&lt;/code&gt; constructor will throw an exception if the address is not formed properly. This way, I know I can at least get the email out of the door. Of course this is server-side validation, but at a minimum you need that anyway.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;emailValidator_ServerValidate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; source, ServerValidateEventArgs args&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MailAddress(txtEmail.Text);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n    {\n        args.IsValid = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        emailValidator.ErrorMessage = &lt;span class=&quot;hljs-string&quot;&gt;&quot;email: &quot;&lt;/span&gt; + ex.Message;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are plenty examples of this out on the Internet (and I think even one that fully validates the RFC - but it&apos;s tens/hundreds of lines long if memory serves).&lt;/p&gt;\n&lt;p&gt;People tend to get carried away validating this sort of thing. Why not just check it has an @ and at least one &lt;code&gt;.&lt;/code&gt; and meets some simple minimum length? It&apos;s trivial to enter a fake email and still match any valid regex anyway. I would guess that false positives are better than false negatives.&lt;/p&gt;\n    ","\n&lt;p&gt;This regex is from Perl&apos;s &lt;a href=&quot;https://metacpan.org/source/RJBS/Email-Valid-1.198/lib/Email/Valid.pm&quot; rel=&quot;nofollow noreferrer&quot;&gt;Email::Valid&lt;/a&gt; library. I believe it to be the most accurate, and it matches all of &lt;a href=&quot;https://en.wikipedia.org/wiki/Email&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt;. And, it is based on the regular expression in the O&apos;Reilly book:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Regular expression built using Jeffrey Friedl&apos;s example in\n&lt;em&gt;Mastering Regular Expressions&lt;/em&gt; (&lt;a href=&quot;http://www.ora.com/catalog/regexp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.ora.com/catalog/regexp/&lt;/a&gt;).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;$RFC822PAT = &amp;lt;&amp;lt;&apos;EOF&apos;;\n[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xf\nf\\n\\015()]*)*\\)[\\040\\t]*)*(?:(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\x\nff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\\015\n&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x80-\\\nxff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80\n-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*\n)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\n\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\\nx80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x8\n0-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([\n^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\n\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\\nx80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\n\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()\n]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\\nx80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\04\n0\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\\nn\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\\n015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?!\n[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\\n]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\\nx80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\01\n5()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*|(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\n\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]\n)|&quot;[^\\\\\\x80-\\xff\\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[^\n()&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*(?:(?:\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][\n^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)|&quot;[^\\\\\\x80-\\xff\\\nn\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015&quot;]*)*&quot;)[^()&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\\nx80-\\xff\\000-\\010\\012-\\037]*)*&amp;lt;[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?\n:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\n\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:@[\\040\\t]*\n(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()\n]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\0\n40)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\\n[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\\nxff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*\n)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80\n-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x\n80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t\n]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\n\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])\n*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80\n-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*(?:,[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015(\n)]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\n\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*@[\\040\\t\n]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\0\n15()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015\n()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\n\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\n\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80\n-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()\n]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x\n80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\n\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\n\\t]*)*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\n\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff\n])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\n\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x\n80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*)*:[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015\n()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\n\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)?(?:[^\n(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\n\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\\nn\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))\n[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\n\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\x\nff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(\n?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\\n000-\\037\\x80-\\xff])|&quot;[^\\\\\\x80-\\xff\\n\\015&quot;]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\\nxff\\n\\015&quot;]*)*&quot;)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\x\nff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)\n*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\x\nff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\n\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)\n*(?:[^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\\n]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\]\n)[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\n\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\x\nff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(\n?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80\n-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)&amp;lt;\n&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)&amp;lt;&amp;gt;@,;:&quot;.\\\\\\[\\]\\000-\\037\\x8\n0-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\n\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]\n*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)\n*\\)[\\040\\t]*)*)*&amp;gt;)\nEOF\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As you&apos;re writing in PHP I&apos;d advice you to use the PHP built-in validation for emails.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;filter_var&lt;/span&gt;($value, FILTER_VALIDATE_EMAIL)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you&apos;re running a PHP version lower than 5.3.6, please be aware of this issue: &lt;em&gt;&lt;a href=&quot;https://bugs.php.net/bug.php?id=53091&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bug #53091: Crashes when I try to filter a text of &amp;gt; 2264 characters&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;If you want more information how this built-in validation works, see here: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3722831/does-phps-filter-var-filter-validate-email-actually-work&quot;&gt;Does PHP&apos;s filter_var FILTER_VALIDATE_EMAIL actually work?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.iamcal.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cal Henderson&lt;/a&gt; (Flickr) wrote an article called &lt;em&gt;&lt;a href=&quot;http://www.iamcal.com/publish/articles/php/parsing_email/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parsing Email Addresses in PHP&lt;/a&gt;&lt;/em&gt; and shows how to do proper RFC (2)822-compliant email address parsing.&lt;/p&gt;\n&lt;p&gt;You can also get the source code in &lt;a href=&quot;http://code.iamcal.com/php/rfc822/&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP&lt;/a&gt;, Python, and Ruby which is &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.5/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Creative Commons licensed&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I never bother creating with my own regular expression, because chances are that someone else has already come up with a better version.  I always use &lt;a href=&quot;http://regexlib.com/Search.aspx&quot; rel=&quot;noreferrer&quot;&gt;regexlib&lt;/a&gt; to find one to my liking.&lt;/p&gt;\n    ","\n&lt;p&gt;One simple regular expression which would at least not reject any valid email address would be checking for something, followed by an @ sign and then something followed by a period and at least 2 somethings. It won&apos;t reject anything, but after reviewing the spec I can&apos;t find any email that would be valid and rejected.&lt;/p&gt;\n\n&lt;p&gt;email =~ &lt;code&gt;/.+@[^@]+\\.[^@]{2,}$/&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;There is not one which is really usable. I discuss some issues in my &lt;a href=&quot;https://stackoverflow.com/questions/161342/is-there-a-php-library-for-email-address-validation#161582&quot; title=&quot;Is there a PHP library for email address validation?&quot;&gt;answer to &lt;em&gt;Is there a PHP library for email address validation?&lt;/em&gt;&lt;/a&gt;, it is discussed also in &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/156430/regexp-recognition-of-email-address-hard&quot; title=&quot;Is regular expression recognition of an email address hard?&quot;&gt;Is regular expression recognition of an email address hard?&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;In short, don&apos;t expect a single, usable regex to do a proper job. And the best regex will validate the syntax, not the validity of an e-mail (&lt;em&gt;jhohn@example.com&lt;/em&gt; is correct, but it will probably bounce...).&lt;/p&gt;\n    ","\n&lt;p&gt;You could use the one employed by the jQuery Validation plugin:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt;/^((([a-z]|\\d|[!#\\$%&amp;amp;&apos;\\&lt;span class=&quot;hljs-emphasis&quot;&gt;*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;amp;&apos;\\*&lt;/span&gt;\\+\\-\\/=\\?\\^&lt;span class=&quot;hljs-emphasis&quot;&gt;_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_&lt;/span&gt;|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])&lt;span class=&quot;hljs-emphasis&quot;&gt;*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*&lt;/span&gt;([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Internationalized_domain_name&quot; rel=&quot;nofollow noreferrer&quot;&gt;Since May 2010&lt;/a&gt;, non-Latin (Chinese, Arabic, Greek, Hebrew, Cyrillic and so on) domain names exist on the Internet. Everyone has to change the email regex used, because those characters are surely not to be covered by &lt;code&gt;[a-z]/i&lt;/code&gt; nor &lt;code&gt;\\w&lt;/code&gt;. They will all fail.&lt;/p&gt;\n&lt;p&gt;After all, the &lt;strong&gt;best&lt;/strong&gt; way to validate the email address is still to actually &lt;em&gt;send&lt;/em&gt; an email to the address in question to validate the address. If the email address is part of user authentication (register/login/etc), then you can perfectly combine it with the user activation system. I.e. send an email with a link with an unique activation key to the specified email address and only allow login when the user has activated the newly created account using the link in the email.&lt;/p&gt;\n&lt;p&gt;If the purpose of the regex is just to quickly inform the user in the UI that the specified email address doesn&apos;t look like in the right format, best is still to check if it matches basically the following regex:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;^(&lt;span class=&quot;hljs-selector-attr&quot;&gt;[^.@]&lt;/span&gt;+)(\\.&lt;span class=&quot;hljs-selector-attr&quot;&gt;[^.@]&lt;/span&gt;+)*@([^.@]+\\.)+([^.@]+)$\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Simple as that. Why on earth would you care about the characters used in the name and domain? It&apos;s the client&apos;s responsibility to enter a valid email address, not the server&apos;s. Even when the client enters a &lt;em&gt;syntactically&lt;/em&gt; valid email address like &lt;code&gt;aa@bb.cc&lt;/code&gt;, this does not guarantee that it&apos;s a legit email address. No one regex can cover that.&lt;/p&gt;\n    ","\n&lt;p&gt;For the most comprehensive evaluation of the best regular expression for validating an email address please see this link; &quot;&lt;a href=&quot;http://fightingforalostcause.net/misc/2006/compare-email-regex.php&quot; rel=&quot;noreferrer&quot;&gt;Comparing E-mail Address Validating Regular Expressions&lt;/a&gt;&quot;&lt;/p&gt;\n\n&lt;p&gt;Here is the current top expression for reference purposes:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;/^([\\w\\!\\&lt;span class=&quot;hljs-comment&quot;&gt;#$\\%\\&amp;amp;\\&apos;\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&amp;amp;\\&apos;\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.w3.org/TR/html5/forms.html#valid-e-mail-address&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5 specification suggests&lt;/a&gt; a simple regex for validating email addresses:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;/^[a-zA-Z0-9.!#$%&amp;amp;&apos;*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This intentionally doesn&apos;t comply with &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 5322&lt;/a&gt;.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This requirement is a &lt;a href=&quot;http://www.w3.org/TR/html5/introduction.html#willful-violation&quot; rel=&quot;nofollow noreferrer&quot;&gt;wilful violation&lt;/a&gt; of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc5322&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 5322&lt;/a&gt;, which defines a syntax for e-mail addresses that is simultaneously too strict (before the &lt;code&gt;@&lt;/code&gt; character), too vague (after the &lt;code&gt;@&lt;/code&gt; character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The total length could also be limited to 254 characters, per &lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=3696&amp;amp;eid=1690&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 3696  errata 1690&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;For a vivid demonstration, the following monster is pretty good, but it still does not correctly recognize all syntactically valid email addresses: it recognizes nested comments up to four levels deep.&lt;/p&gt;\n&lt;p&gt;This is a job for a parser, but even if an address is syntactically valid, it still may not be deliverable. Sometimes you have to resort to the hillbilly method of &quot;Hey, y&apos;all, watch ee-us!&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;// derivative of work with the following copyright and license:\n// Copyright (c) 2004 Casey West.  All rights reserved.\n// This module is free software; you can redistribute it and/or\n// modify it under the same terms as Perl itself.\n\n// see http://search.cpan.org/~cwest/Email-Address-1.80/\n\nprivate static string gibberish = @&quot;\n(?-xism:(?:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(?-xism:(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+\n|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*&amp;lt;DQ&amp;gt;(?-xism:(?-xism:[\n^\\\\&amp;lt;DQ&amp;gt;])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+&amp;lt;DQ&amp;gt;(?-xism:(?-xi\nsm:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xis\nm:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\\ns*)+|\\s+)*))+)?(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?\n-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*&amp;lt;(?-xism:(?-xi\nsm:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^(\n)\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(\n?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))\n|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()&amp;lt;\n&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]\n+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))\n|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:\n(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s\n*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?\n:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x\n0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xi\nsm:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\n&amp;lt;DQ&amp;gt;(?-xism:(?-xism:[^\\\\&amp;lt;DQ&amp;gt;])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]\n)))+&amp;lt;DQ&amp;gt;(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\\n]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-x\nism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+\n)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:(\n?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?\n-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s\n*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(\n?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+)*)(?-xism:(?-xism:\n\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[\n^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)\n+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-x\nism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-xi\nsm:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\n\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(\n?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+\n)*\\s*\\)\\s*)+|\\s+)*)))&amp;gt;(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-\nxism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\\ns*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\n\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))|(?-xism:(?-x\nism:(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^\n()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*\n(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])\n)|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()\n&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+(?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s\n]+)*)(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+)\n)|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism\n:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\\ns*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((\n?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\\nx0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-x\nism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)\n*&amp;lt;DQ&amp;gt;(?-xism:(?-xism:[^\\\\&amp;lt;DQ&amp;gt;])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D\n])))+&amp;lt;DQ&amp;gt;(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\n\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-\nxism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)\n+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*))\\@(?-xism:(?-xism:(?-xism:\n(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(\n?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[\n^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\\ns*\\)\\s*)+|\\s+)*(?-xism:[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+\n(?:\\.[^\\x00-\\x1F\\x7F()&amp;lt;&amp;gt;\\[\\]:;@\\,.&amp;lt;DQ&amp;gt;\\s]+)*)(?-xism:(?-xism\n:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:\n[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+\n))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*\n)+|\\s+)*)|(?-xism:(?-xism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism\n:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\(\n(?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\n\\x0D]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)+|\\s+)*\\[(?:\\s*(?-xism:(?-\nxism:[^\\[\\]\\\\])|(?-xism:\\\\(?-xism:[^\\x0A\\x0D])))+)*\\s*\\](?-x\nism:(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism\n:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:\n(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|)+)*\\s*\\)\\s*))\n+)*\\s*\\)\\s*)+|\\s+)*))))(?-xism:\\s*\\((?:\\s*(?-xism:(?-xism:(?\n&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0D]))|(?-xism:\\s*\\((?:\n\\s*(?-xism:(?-xism:(?&amp;gt;[^()\\\\]+))|(?-xism:\\\\(?-xism:[^\\x0A\\x0\nD]))|)+)*\\s*\\)\\s*))+)*\\s*\\)\\s*)*)&quot;\n  .Replace(&quot;&amp;lt;DQ&amp;gt;&quot;, &quot;\\&quot;&quot;)\n  .Replace(&quot;\\t&quot;, &quot;&quot;)\n  .Replace(&quot; &quot;, &quot;&quot;)\n  .Replace(&quot;\\r&quot;, &quot;&quot;)\n  .Replace(&quot;\\n&quot;, &quot;&quot;);\n\nprivate static Regex mailbox =\n  new Regex(gibberish, RegexOptions.ExplicitCapture);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;According to the official standard, &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2822#section-3.4.1&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC 2822&lt;/a&gt;, a valid email regex is:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*|&quot;(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*&quot;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to use it in Java, it&apos;s really very easy:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.regex.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;regexSample&lt;/span&gt; \n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; args[]) \n   {\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Input the string for validation&lt;/span&gt;\n      &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; email &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;xyz@hotmail.com&quot;&lt;/span&gt;;\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Set the email pattern string&lt;/span&gt;\n      &lt;span class=&quot;hljs-type&quot;&gt;Pattern&lt;/span&gt; p &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Pattern&lt;/span&gt;.compile(&lt;span class=&quot;hljs-string&quot;&gt;&quot; (?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*|&quot;&lt;/span&gt;\n              &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?:[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x08&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x1f&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x21&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x23-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x5b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x5d-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f]|&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x09&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f])*&lt;span class=&quot;hljs-subst&quot;&gt;\\&quot;&lt;/span&gt;)&quot;&lt;/span&gt;\n                     &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x08&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x1f&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x21-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x5a&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x53-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f]|&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x01-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x09&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0b&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0c&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x0e-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;x7f])+)&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;]&quot;&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Match the given string with the pattern&lt;/span&gt;\n      &lt;span class=&quot;hljs-type&quot;&gt;Matcher&lt;/span&gt; m &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; p.matcher(email);\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Check whether match is found &lt;/span&gt;\n      boolean matchFound &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; m.matches();\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (matchFound)\n        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Valid Email Id.&quot;&lt;/span&gt;);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid Email Id.&quot;&lt;/span&gt;);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;RFC 5322 standard:&lt;/p&gt;\n\n&lt;p&gt;Allows dot-atom local-part, quoted-string local-part, obsolete (mixed dot-atom and quoted-string) local-part, domain name domain, (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain, and (nested) CFWS.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scheme&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;/^&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&quot;?(?&amp;gt;\\\\\\[ -~]|[^&quot;&lt;/span&gt;])&lt;span class=&quot;hljs-string&quot;&gt;&quot;?(?1)){255,})(?!(?&amp;gt;(?1)&quot;&lt;/span&gt;?(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\\\\\[ -~]|[&lt;span class=&quot;hljs-name&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;])&quot;&lt;/span&gt;?(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,}@)((&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;((&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\x0D\\x0A)?[\\t ])+|(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[\\x01-\\x08\\x0B\\x0C\\x0E-\\&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;*-&lt;/span&gt;\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]|(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)))*(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;)\\)))+(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;))|(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;))?)([&lt;span class=&quot;hljs-name&quot;&gt;!&lt;/span&gt;#-\\&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;*+&lt;/span&gt;\\/-9=?^-~-]+|&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;gt;(?2)(?&amp;gt;[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\\\[\\x00-\\x7F]))*(?2)&quot;&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)\\.(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?4&lt;/span&gt;))*(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)@(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;](&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]*[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;])?)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)\\.(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?5&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;}|\\[(&lt;span class=&quot;hljs-name&quot;&gt;?:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;})(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;:&lt;/span&gt;\\]]){&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,})((&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;})?::(&lt;span class=&quot;hljs-name&quot;&gt;?7&lt;/span&gt;)?))|(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}:|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]:){&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?8&lt;/span&gt;)?::(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;((&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}):)?))?(&lt;span class=&quot;hljs-name&quot;&gt;25&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-5&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-4&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}|[&lt;span class=&quot;hljs-name&quot;&gt;1-9&lt;/span&gt;]?[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;])(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?9&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}))\\])(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;)$/isD&apos;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;RFC 5321 standard:&lt;/p&gt;\n\n&lt;p&gt;Allows dot-atom local-part, quoted-string local-part, domain name domain, and (IPv4, IPv6, and IPv4-mapped IPv6 address) domain literal domain.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scheme&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;/^&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;?(?&amp;gt;\\\\\\[ -~]|[^&quot;&lt;/span&gt;])&lt;span class=&quot;hljs-string&quot;&gt;&quot;?){255,})(?!&quot;&lt;/span&gt;?(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\\\\\[ -~]|[&lt;span class=&quot;hljs-name&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;]){65,}&quot;&lt;/span&gt;?@)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;!&lt;/span&gt;#-\\&lt;span class=&quot;hljs-symbol&quot;&gt;&apos;*+&lt;/span&gt;\\/-9=?^-~-]+)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?1&lt;/span&gt;))*|&lt;span class=&quot;hljs-string&quot;&gt;&quot;(?&amp;gt;[ !#-\\[\\]-~]|\\\\\\[ -~])*&quot;&lt;/span&gt;)@(&lt;span class=&quot;hljs-name&quot;&gt;?!.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;^.&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;](&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9-&lt;/span&gt;]*[&lt;span class=&quot;hljs-name&quot;&gt;a-z0-9&lt;/span&gt;])?)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?2&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;126&lt;/span&gt;}|\\[(&lt;span class=&quot;hljs-name&quot;&gt;?:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;([&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;})(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;:&lt;/span&gt;\\]]){&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,})((&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;})?::(&lt;span class=&quot;hljs-name&quot;&gt;?4&lt;/span&gt;)?))|(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;IPv6:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;}:|(&lt;span class=&quot;hljs-name&quot;&gt;?!&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?:.*&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;a-f0-9&lt;/span&gt;]:){&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,})(&lt;span class=&quot;hljs-name&quot;&gt;?5&lt;/span&gt;)?::(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;((&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;:&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;?3&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}):)?))?(&lt;span class=&quot;hljs-name&quot;&gt;25&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-5&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-4&lt;/span&gt;][&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]|&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}|[&lt;span class=&quot;hljs-name&quot;&gt;1-9&lt;/span&gt;]?[&lt;span class=&quot;hljs-name&quot;&gt;0-9&lt;/span&gt;])(&lt;span class=&quot;hljs-name&quot;&gt;?&amp;gt;&lt;/span&gt;\\.(&lt;span class=&quot;hljs-name&quot;&gt;?6&lt;/span&gt;)){&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}))\\])$/iD&apos;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basic:&lt;/p&gt;\n\n&lt;p&gt;Allows dot-atom local-part and domain name domain (requiring at least two domain name labels with the TLD limited to 2-6 alphabetic characters).&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt;&quot;/^(?!.{255,})(?!.{65,}@)([&lt;span class=&quot;hljs-string&quot;&gt;!#-&apos;*+\\/-9=?^-~-&lt;/span&gt;]+)(?&amp;gt;\\.(?1))&lt;span class=&quot;hljs-emphasis&quot;&gt;*@(?!.*&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;^.&lt;/span&gt;]{64,})(?&amp;gt;[&lt;span class=&quot;hljs-string&quot;&gt;a-z0-9&lt;/span&gt;](&lt;span class=&quot;hljs-link&quot;&gt;?&amp;gt;[a-z0-9-]*[a-z0-9]&lt;/span&gt;)?\\.){1,126}[a-z]{2,6}$/iD&quot;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s the PHP code I use. I&apos;ve chosen this solution in the spirit of &quot;false positives are better than false negatives&quot; as declared by another commenter here &lt;em&gt;and&lt;/em&gt; with regards to keeping your response time up and server load down ... there&apos;s really no need to waste server resources with a regular expression when this will weed out most simple user errors. You can always follow this up by sending a test email if you want.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;validateEmail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;) &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;stripos&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;@&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Strange that you &quot;cannot&quot; allow 4 characters TLDs.  You are banning people from &lt;em&gt;.info&lt;/em&gt; and &lt;em&gt;.name&lt;/em&gt;, and the length limitation stop &lt;em&gt;.travel&lt;/em&gt; and &lt;em&gt;.museum&lt;/em&gt;, but yes, they are less common than 2 characters TLDs and 3 characters TLDs.&lt;/p&gt;\n&lt;p&gt;You should allow uppercase alphabets too.  Email systems will normalize the local part and domain part.&lt;/p&gt;\n&lt;p&gt;For your regex of domain part, domain name cannot starts with &apos;-&apos; and cannot ends with &apos;-&apos;. Dash can only stays in between.&lt;/p&gt;\n&lt;p&gt;If you used the &lt;a href=&quot;https://en.wikipedia.org/wiki/PEAR&quot; rel=&quot;nofollow noreferrer&quot;&gt;PEAR&lt;/a&gt; library, check out their mail function (I forgot the exact name/library).  You can validate email address by calling one function, and it validates the email address according to definition in &lt;a href=&quot;https://en.wikipedia.org/wiki/Email&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&amp;nbsp;822&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are fine with accepting empty values (which is not an invalid email) and are running PHP&amp;nbsp;5.2+, I would suggest:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;checkEmail&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$ignore_empty&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$ignore_empty&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_null&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;) || &lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt; == &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;filter_var&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$email&lt;/span&gt;, FILTER_VALIDATE_EMAIL);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve been using this touched up version of the OP&apos;s regex for a while and it hasn&apos;t left me with too many surprises. &lt;strike&gt;I&apos;ve never encountered an apostrophe in an email yet so it doesn&apos;t validate that&lt;/strike&gt;. It does validate &lt;code&gt;Jean+FranÃ§ois@anydomain.museum&lt;/code&gt; and &lt;code&gt;@..Ù…Ø«Ø§Ù„.Ø¢Ø²Ù…Ø§ÛŒØ´ÛŒ&lt;/code&gt;, but not weird abuse of those non alphanumeric characters &lt;code&gt;.+@you.com&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;(?!^[.+&amp;amp;&apos;_-]*@.*$)(^[_\\w\\d+&amp;amp;&apos;-]+(\\.[_\\w\\d+&amp;amp;&apos;-]*)*@[\\w\\d-]+(\\.[\\w\\d-]+)*\\.(([\\d]{1,3})|([\\w]{2,}))$)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It does support IP addresses &lt;code&gt;you@192.168.1.1&lt;/code&gt;, but I haven&apos;t refined it enough to deal with bogus IP address ranges such as &lt;code&gt;999.999.999.1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strike&gt;It also supports all the TLDs over three characters which stops &lt;code&gt;asdf@asdf.asdf&lt;/code&gt; which I think the original let through.&lt;/strike&gt; &lt;a href=&quot;http://data.iana.org/TLD/tlds-alpha-by-domain.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;I&apos;ve been beat, there are too many TLDs now over 3 characters&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;I know the OP has abandoned his regex, but this flavour lives on.&lt;/p&gt;\n    "],"88":["\n&lt;p&gt;Sounds like there is something wrong with your configuration, here are a few things you can check:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Make sure that PHP is installed and running correctly. This may sound silly, but you never know. An easy way to check is to run &lt;code&gt;php -v&lt;/code&gt; from a command line and see if returns version information or any errors.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure that the PHP module is listed &lt;strong&gt;and uncommented&lt;/strong&gt; inside of your Apache&apos;s httpd.conf This should be something like &lt;code&gt;LoadModule php5_module &quot;c:/php/php5apache2_2.dll&quot;&lt;/code&gt; in the file. Search for &lt;code&gt;LoadModule php&lt;/code&gt;, and make sure that there is no comment (&lt;code&gt;;&lt;/code&gt;) in front of it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure that Apache&apos;s httpd.conf file has the PHP MIME type in it. This should be something like &lt;code&gt;AddType application/x-httpd-php .php&lt;/code&gt;. This tells Apache to run &lt;code&gt;.php&lt;/code&gt; files as PHP. Search for AddType, and then make sure there is an entry for PHP, &lt;strong&gt;and that it is uncommented&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure your file has the &lt;code&gt;.php&lt;/code&gt; extension on it, or whichever extension specified in the MIME definition in point #3, otherwise it will not be executed as PHP.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure you are not using &lt;a href=&quot;http://php.net/manual/en/language.basic-syntax.phptags.php&quot; rel=&quot;noreferrer&quot;&gt;short tags&lt;/a&gt; in the PHP file (&lt;code&gt;&amp;lt;?&lt;/code&gt;), these are  &lt;em&gt;not enabled on all servers&lt;/em&gt; by default and their use is discouraged. Use &lt;code&gt;&amp;lt;?php&lt;/code&gt; instead (or &lt;a href=&quot;http://php.net/manual/en/ini.core.php#ini.short-open-tag&quot; rel=&quot;noreferrer&quot;&gt;enable short tags in your php.ini&lt;/a&gt; with &lt;code&gt;short_open_tag=On&lt;/code&gt; if you have code that relies on them). &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Make sure you are accessing your file over your webserver using an URL like &lt;code&gt;http://localhost/file.php&lt;/code&gt; not via local file access &lt;code&gt;file://localhost/www/file.php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;And lastly check the &lt;a href=&quot;http://php.net/install&quot; rel=&quot;noreferrer&quot;&gt;PHP manual for further setup tips&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;php7 : &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;sudo a2enmod proxy_fcgi setenvif\nsudo a2enconf php7.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-fpm\nsudo service apache2 restart\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m running Apache on Ubuntu and my issue was that the &lt;code&gt;/etc/apache2/mods-available/php5.conf&lt;/code&gt; file was missing this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;FilesMatch &lt;span class=&quot;hljs-string&quot;&gt;&quot;.+\\.ph(p[345]?|t|tml)$&quot;&lt;/span&gt;&amp;gt;\n    SetHandler application/x-httpd-php\n&amp;lt;/FilesMatch&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I added it back in and php was parsing php files correctly.&lt;/p&gt;\n    ","\n&lt;p&gt;note for php 7 users, add this to your httpd.conf file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# PHP 7 specific configuration&lt;/span&gt;\n&amp;lt;IfModule php7_module&amp;gt;\n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n    &amp;lt;IfModule dir_module&amp;gt;\n        DirectoryIndex index.html index.php\n    &amp;lt;/IfModule&amp;gt;\n&amp;lt;/IfModule&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I found another problem causing this issue and already solved it. I accidentally saved my script in &lt;code&gt;UTF-16&lt;/code&gt; encoding. It seems that PHP5 can&apos;t recognize &lt;code&gt;&amp;lt;?php&lt;/code&gt; tag in 16 bit encoding by default.&lt;/p&gt;\n    ","\n&lt;p&gt;You&apos;re just opening your php file into browser. You have to open it using localhost url. if you open a file directly from your directory it will not execute the php code in any case.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;use: &lt;code&gt;http://locahost/index.php&lt;/code&gt; or &lt;code&gt;http:127.0.0.1/index.php&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Enable php short code. In your case, you are using &lt;code&gt;&amp;lt;?&lt;/code&gt; which is php short code for &lt;code&gt;&amp;lt;?php&lt;/code&gt;. By default php short codes are disabled.&lt;/p&gt;\n\n&lt;p&gt;Also use: &lt;code&gt;sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt&lt;/code&gt; if you are a ubuntu user.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;I&apos;m posting this answer because my Virtualmin/Webmin admin interface decided it was a good idea to disable my PHP engine.. took me a while to find the solution, so I thought I&apos;d share it with you guys:&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Also, be sure to check that none of your website config files related to this specific host or virtualhost have any php_admin_value&apos;s in them that turn off PHP, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;php_admin_value engine Off\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When in doubt, comment it...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# php_admin_value engine Off&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And restart your webserver.&lt;/p&gt;\n    ","\n&lt;p&gt;This just happened to me again, along with the server downloading html files, rather than processing. I had not use the webserver apache for some time on the computer and meanwhile Ubuntu updated like two more versions from originally installed LTS. Now it is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;$ cat /etc/issue\nUbuntu &lt;span class=&quot;hljs-number&quot;&gt;16.04&lt;/span&gt; LTS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the php worked after like so:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;$ sudo apt-get install lamp-server^\n$ sudo a2enmod php7.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n$ sudo service apache2 restart \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The webserver was now parsing the php. Maybe now got to update some webs since php7.0 now running where as it was before running php5. Oh well.&lt;/p&gt;\n    ","\n&lt;p&gt;I know it should sound silly... but seldom it happens.&lt;/p&gt;\n\n&lt;p&gt;Check if you are trying to execute php from &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;**http:&lt;span class=&quot;hljs-comment&quot;&gt;//localhost/info.php**&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and not from &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;file:&lt;span class=&quot;hljs-comment&quot;&gt;///var/www/info.php&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ps&amp;gt; you can notice that if you write from shell&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;php info.php \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it answer with the code (it means php functions)..&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve solved this by uninstalling XAMPP, and installing WAMP.\nThanks for the help.&lt;/p&gt;\n    ","\n&lt;p&gt;In case we are in the same page do following&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sudo apt-get install php -y&lt;/code&gt;\n&lt;code&gt;sudo apt-get install php-{bcmath,bz2,intl,gd,mbstring,mysql,zip,fpm} -y&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;To enable PHP 7.2 FPM in Apache2 do:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a2enmod proxy_fcgi setenvif&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a2enconf php7.2-fpm&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;update 2: Apache downloads .php file instead of rendering&lt;/h2&gt;\n\n&lt;p&gt;After that, I faced above issue. There are similar questions like &lt;a href=&quot;https://stackoverflow.com/questions/18422140/apache-is-downloading-php-files-instead-of-displaying-them&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I don&apos;t know why but it only happened for my .php files in &lt;code&gt;/var/www/html/&lt;/code&gt; root folder. everything was ok for sub-directories. (for example wordpress and phpmyadmin worked fine)&lt;/p&gt;\n\n&lt;p&gt;So here is my solution. I decided to enable php module. so I ran this command:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;a2enmod php7.2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;but I got this errors:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Considering dependency mpm_prefork for php7.2:\n  Considering conflict mpm_event for mpm_prefork:\n  ERROR: Module mpm_event is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n  Considering conflict mpm_worker for mpm_prefork:\n  ERROR: Could not enable dependency mpm_prefork for php7.2, aborting&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;so I decided to disable mpm by running following commands:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;sudo a2dismod mpm_prefork\nsudo a2dismod mpm_worker\nsudo a2dismod mpm_event\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then restart apache:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;systemctl restart apache2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;then enable php7.2 (my installed version):&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sudo a2enmod php7.2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;and right now everything works fine.&lt;/p&gt;\n    ","\n&lt;p&gt;I faced this issue on php 7.1 that comes with High Sierra (OS X 10.13.5), editing &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt; with following changes helped:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Uncomment this line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;LoadModule php7_module libexec/apache2/libphp7.so\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Paste following at the end&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;IfModule php7_module&amp;gt;\n    AddType application/x-httpd-php .php\n    AddType application/x-httpd-php-source .phps\n\n    &amp;lt;IfModule dir_module&amp;gt;\n        DirectoryIndex index.html index.php\n    &amp;lt;/IfModule&amp;gt;\n&amp;lt;/IfModule&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;on my ubuntu 14.04, apache 2.4, php 5.5.9 install,  I tried with a sample.php on /var/www/html (default document root) and it worked ok. \nSo the problem was on my Virtual Servers config.\nThe solution was to include, on the Directory def containing the .php, this line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    php_admin_flag engine on\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Make sure the script contains &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;before the code that should be executed. There should be no space between &lt;code&gt;&amp;lt;?&lt;/code&gt; and &lt;code&gt;php&lt;/code&gt; in this.&lt;/p&gt;\n    ","\n&lt;p&gt;i had similar problem but in my case solution was different.\nmy file that held php code was called &lt;strong&gt;&quot;somename.html&quot;&lt;/strong&gt;\nchanged it to &lt;strong&gt;&quot;somename.php&quot;&lt;/strong&gt; worked fine&lt;/p&gt;\n    ","\n&lt;p&gt;For fresh setup of LAMP running php 7\nedit the file /etc/httpd/conf/httpd.conf\nNote: make sure to make backup for it before changing anything.&lt;/p&gt;\n\n&lt;p&gt;Paste this at the very bottom of the file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;IfModule php7_module&amp;gt;\nAddType application/x-httpd-php .php\nAddType application/x-httpd-php-source .phps\n&amp;lt;IfModule dir_module&amp;gt;\n    DirectoryIndex index.html index.php\n&amp;lt;/IfModule&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Then, search for LoadModule and paste the following line:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;LoadModule php7_module modules/libphp7.so\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This line will simply ask httpd to load the php 7 module&lt;/p&gt;\n\n&lt;p&gt;Then restart httpd&lt;/p&gt;\n    ","\n&lt;p&gt;Check all the packages you have installed for &lt;strong&gt;php&lt;/strong&gt; using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;yum &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; installed | grep remi\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Install all relevant &lt;strong&gt;php&lt;/strong&gt; packages, especially &lt;strong&gt;php-devel&lt;/strong&gt; on your machine.&lt;/p&gt;\n    ","\n&lt;p&gt;Another possible cause of this problem could be that you are trying to run the script in a &quot;user directory&quot; from the &lt;code&gt;UserDir&lt;/code&gt; module.  Running PHP scripts in user directories is disabled by default.  You will run into this problem if the script is in the &lt;code&gt;public_html&lt;/code&gt; directory in your home folder and you are trying to access it from &lt;code&gt;http://localhost/~your_username&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;To fix this, open up &lt;code&gt;/etc/apache2/mods-enabled/php7.2.conf&lt;/code&gt;.  You must comment or delete the tag block at the bottom that reads&lt;/p&gt;\n&lt;pre class=&quot;lang-xml s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;IfModule&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;mod_userdir.c&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Directory&lt;/span&gt; /&lt;span class=&quot;hljs-attr&quot;&gt;home&lt;/span&gt;/*/&lt;span class=&quot;hljs-attr&quot;&gt;public_html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        php_admin_flag engine Off\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Directory&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;IfModule&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In my case the php module was not loaded. Try this:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Check which modules are loaded: &lt;code&gt;apache2ctl -M&lt;/code&gt;. Look for module like &lt;code&gt;php7_module (shared)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;If no php module is listed, then try to load the module that corresponds to your php version. In my case the php packet is &lt;code&gt;libapache2-mod-php7.3&lt;/code&gt;. So I did: &lt;code&gt;a2enmod php7.3&lt;/code&gt; and the problem was solved.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Easiest way to install Apache + php7 tested using Debian 10:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;apt-get update -y\napt-get install apache2 php7.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; libapache2-mod-php  -y\nsudo service apache2 restart\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This was in my .htaccess&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;DirectoryIndex index.html index.htm\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;index.html contained PHP code.  By default, PHP won&apos;t process files with extentions like htm* as PHP code.&lt;/p&gt;\n\n&lt;p&gt;You can override this, by adding the following to .htaccess:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;FilesMatch &lt;span class=&quot;hljs-string&quot;&gt;&quot;.+\\.html$&quot;&lt;/span&gt;&amp;gt;\n    SetHandler application/x-httpd-php\n&amp;lt;/FilesMatch&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you have configuration like this:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&amp;lt;VirtualHost *:&lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;&amp;gt;\n    ServerName example.com\n    DocumentRoot &lt;span class=&quot;hljs-string&quot;&gt;&quot;/var/www/example.com&quot;&lt;/span&gt;\n\n    &amp;lt;FilesMatch &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\.php$&quot;&lt;/span&gt;&amp;gt;\n        SetHandler &lt;span class=&quot;hljs-string&quot;&gt;&quot;proxy:fcgi://127.0.0.1:9000&quot;&lt;/span&gt;\n    &amp;lt;/FilesMatch&amp;gt;\n&amp;lt;/VirtualHost&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Uncomment next lines in your httpd.conf&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;LoadModule proxy_module lib/httpd/modules/mod_proxy.so\nLoadModule proxy_fcgi_module lib/httpd/modules/mod_proxy_fcgi.so\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It works for me&lt;/p&gt;\n    ","\n&lt;p&gt;Add &lt;code&gt;AddType application/x-httpd-php .php&lt;/code&gt; to your httpd.conf file if you are using Apache 2.4&lt;/p&gt;\n    ","\n&lt;p&gt;For &lt;strong&gt;php7.3.&lt;/strong&gt;* you could try to install these modules. It worked for me.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;sudo apt-get install libapache2-mod-php7.&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n\nsudo service apache2 restart\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think the problem that it is showing code instead of the result is that it is not going to local host . recheck what address u r going in. are u going to a local file directory or to the local host.&lt;/p&gt;\n\n&lt;p&gt;from the screenshot u sent it is going to ur computer not to the localhost.&lt;/p&gt;\n\n&lt;p&gt;&quot;file:/// &quot; it should be  &quot;localhost/&quot;&lt;/p&gt;\n    ","\n&lt;p&gt;Reinstalling the &lt;code&gt;mcrypt&lt;/code&gt; module worked for me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$sudo&lt;/span&gt; apt-get install php5-mcrypt\n&lt;span class=&quot;hljs-variable&quot;&gt;$sudo&lt;/span&gt; php5enmod mcrypt\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I had a case that I accidentally started untaring my files directory in root.  It added the .htaccess file from my files folder that would block all php&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# If we know how to do it safely, disable the PHP engine entirely.&lt;/span&gt;\n&amp;lt;IfModule mod_php5.c&amp;gt;\n  php_flag engine off\n&amp;lt;/IfModule&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Bottom line check the .htaccess file on root.&lt;/p&gt;\n    ","\n&lt;p&gt;Just spent hours of trying to get &lt;strong&gt;PHP 5 to run with Apache 2.4 on Windows 10&lt;/strong&gt;. Finally for me it was a typo in &lt;em&gt;httpd.conf&lt;/em&gt; &lt;code&gt;LoadModule&lt;/code&gt;. Drew attention to writing and exact module path through the &lt;a href=&quot;https://www.apachelounge.com/viewtopic.php?p=36861&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;last answer&lt;/strong&gt; in this apachelounge thread of &lt;strong&gt;denny2018&lt;/strong&gt;&lt;/a&gt;. Thank you!&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;After two nights I discovered... My directory was written &lt;code&gt;c:&lt;/code&gt; (lower case)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I had &lt;code&gt;LoadModule php5_module &quot;c:/php/php5apache2.dll&quot;&lt;/code&gt; but &lt;strong&gt;correct for apache 2.4&lt;/strong&gt; is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;LoadModule php5_module &lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/php/php5apache2_4.dll&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So I also missed the &lt;code&gt;_4&lt;/code&gt; before (for &lt;em&gt;apache 2.4&lt;/em&gt;). The full snippet that worked for me:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# PHP&lt;/span&gt;\nLoadModule php5_module &lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/php/php5apache2_4.dll&quot;&lt;/span&gt;\nAddHandler application/x-httpd-php .php\n&amp;lt;FilesMatch \\.php$&amp;gt;\n    SetHandler application/x-httpd-php\n&amp;lt;/FilesMatch&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just tried &lt;strong&gt;PHP 7&lt;/strong&gt;. There the &lt;code&gt;LoadModule&lt;/code&gt; line in &lt;em&gt;httpd.conf&lt;/em&gt; for Apache 2.4 reads&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;LoadModule php7_module &lt;span class=&quot;hljs-string&quot;&gt;&quot;C:/php/php7apache2_4.dll&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Currently &lt;a href=&quot;http://php.net/manual/fa/install.windows.apache2.php#installing&quot; rel=&quot;nofollow noreferrer&quot;&gt;php manual shows up&lt;/a&gt; &lt;code&gt;c:/php/php5apache2.dll&lt;/code&gt; which of course needs to be adjusted.&lt;/p&gt;\n    ","\n&lt;p&gt;in my case (Apache/2.4.34), &lt;/p&gt;\n\n&lt;p&gt;after uncommenting the specific module &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;LoadModule php7_module libexec/apache2/libphp7.so&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;from&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;/etc/apache2/httpd.conf&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;my problem was gone.&lt;/p&gt;\n    ","\n&lt;p&gt;Try restarting the apache server. This was the mistake I had made - forgetting to restart the server after installing php!&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;service httpd restart\n&lt;/code&gt;&lt;/pre&gt;\n    "],"89":["\n&lt;p&gt;The rules (which did not change in C++11):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Reserved in any scope, including for use as &lt;a href=&quot;https://stackoverflow.com/questions/4297933/c-implementation#4297974&quot;&gt;implementation&lt;/a&gt; macros:\n\n&lt;ul&gt;\n&lt;li&gt;identifiers beginning with an underscore followed immediately by an uppercase letter&lt;/li&gt;\n&lt;li&gt;identifiers containing adjacent underscores (or &quot;double underscore&quot;)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Reserved in the global namespace:\n\n&lt;ul&gt;\n&lt;li&gt;identifiers beginning with an underscore&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Also, everything in the &lt;code&gt;std&lt;/code&gt; namespace is reserved. (You are allowed to add template specializations, though.) &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;From the 2003 C++ Standard:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;17.4.3.1.2 Global names [lib.global.names]&lt;/h3&gt;\n  \n  &lt;p&gt;Certain sets of names and function signatures are always reserved to the implementation:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;Each name that contains a double underscore (&lt;code&gt;__&lt;/code&gt;) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.&lt;/li&gt;\n  &lt;li&gt;Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.&lt;sup&gt;165&lt;/sup&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;&lt;sup&gt;165)&lt;/sup&gt; Such names are also reserved in namespace &lt;code&gt;::std&lt;/code&gt; (17.4.3.1). &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Because C++ is based on the C standard (1.1/2, C++03) and C99 is a normative reference (1.2/1, C++03) these also apply, from the 1999 C Standard:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;7.1.3 Reserved identifiers&lt;/h3&gt;\n  \n  &lt;p&gt;Each header declares or defines all identifiers listed in its associated subclause, and\n  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;All identifiers that begin with an underscore and either an uppercase letter or another\n  underscore are always reserved for any use.&lt;/li&gt;\n  &lt;li&gt;All identifiers that begin with an underscore are always reserved for use as identifiers\n  with file scope in both the ordinary and tag name spaces.&lt;/li&gt;\n  &lt;li&gt;Each macro name in any of the following subclauses (including the future library\n  directions) is reserved for use as specified if any of its associated headers is included;\n  unless explicitly stated otherwise (see 7.1.4).&lt;/li&gt;\n  &lt;li&gt;All identifiers with external linkage in any of the following subclauses (including the\n  future library directions) are always reserved for use as identifiers with external\n  linkage.&lt;sup&gt;154&lt;/sup&gt;&lt;/li&gt;\n  &lt;li&gt;Each identifier with file scope listed in any of the following subclauses (including the\n  future library directions) is reserved for use as a macro name and as an identifier with\n  file scope in the same name space if any of its associated headers is included.&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;No other identifiers are reserved. If the program declares or defines an identifier in a\n  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved\n  identifier as a macro name, the behavior is undefined.&lt;/p&gt;\n  \n  &lt;p&gt;If the program removes (with &lt;code&gt;#undef&lt;/code&gt;) any macro definition of an identifier in the first\n  group listed above, the behavior is undefined.&lt;/p&gt;\n  \n  &lt;p&gt;&lt;sup&gt;154)&lt;/sup&gt; The list of reserved identifiers with external linkage includes &lt;code&gt;errno&lt;/code&gt;, &lt;code&gt;math_errhandling&lt;/code&gt;, &lt;code&gt;setjmp&lt;/code&gt;, and &lt;code&gt;va_end&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Other restrictions might apply. For example, the POSIX standard reserves a lot of identifiers that are likely to show up in normal code:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Names beginning with a capital &lt;code&gt;E&lt;/code&gt; followed a digit or uppercase letter:\n\n&lt;ul&gt;\n&lt;li&gt;may be used for additional error code names.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with either &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; followed by a lowercase letter\n\n&lt;ul&gt;\n&lt;li&gt;may be used for additional character testing and conversion functions.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with &lt;code&gt;LC_&lt;/code&gt; followed by an uppercase letter\n\n&lt;ul&gt;\n&lt;li&gt;may be used for additional macros specifying locale attributes.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names of all existing mathematics functions suffixed with &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;l&lt;/code&gt; are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for corresponding functions that operate on float and long double arguments, respectively.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with &lt;code&gt;SIG&lt;/code&gt; followed by an uppercase letter are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional signal names.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that begin with &lt;code&gt;SIG_&lt;/code&gt; followed by an uppercase letter are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional signal actions.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names beginning with &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;mem&lt;/code&gt;, or &lt;code&gt;wcs&lt;/code&gt; followed by a lowercase letter are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional string and array functions.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names beginning with &lt;code&gt;PRI&lt;/code&gt; or &lt;code&gt;SCN&lt;/code&gt; followed by any lowercase letter or &lt;code&gt;X&lt;/code&gt; are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional format specifier macros&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Names that end with &lt;code&gt;_t&lt;/code&gt; are reserved\n\n&lt;ul&gt;\n&lt;li&gt;for additional type names.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;While using these names for your own purposes right now might not cause a problem, they do raise the possibility of conflict with future versions of that standard.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Personally I just don&apos;t start identifiers with underscores. New addition to my rule: Don&apos;t use double underscores anywhere, which is easy as I rarely use underscore.&lt;/p&gt;\n\n&lt;p&gt;After doing research on this article I no longer end my identifiers with &lt;code&gt;_t&lt;/code&gt;\nas this is reserved by the POSIX standard.&lt;/p&gt;\n\n&lt;p&gt;The rule about any identifier ending with &lt;code&gt;_t&lt;/code&gt; surprised me a lot. I think that is a POSIX standard (not sure yet) looking for clarification and official chapter and verse. This is from the &lt;a href=&quot;http://www.gnu.org/software/libtool/manual/libc/Reserved-Names.html&quot; rel=&quot;noreferrer&quot;&gt;GNU libtool manual&lt;/a&gt;, listing reserved names.&lt;/p&gt;\n\n&lt;p&gt;CesarB provided the following link to the &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX 2004&lt;/a&gt; reserved symbols and notes &apos;that many other reserved prefixes and suffixes ... can be found there&apos;.  The\n&lt;a href=&quot;http://www.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html&quot; rel=&quot;noreferrer&quot;&gt;POSIX 2008&lt;/a&gt; reserved symbols are defined here.  The restrictions are somewhat more nuanced than those above.&lt;/p&gt;\n    ","\n&lt;p&gt;The rules to avoid collision of names are both in the C++ standard (see Stroustrup book) and mentioned by C++ gurus (Sutter, etc.).&lt;/p&gt;\n\n&lt;h2&gt;Personal rule&lt;/h2&gt;\n\n&lt;p&gt;Because I did not want to deal with cases, and wanted a simple rule, I have designed a &lt;strong&gt;personal&lt;/strong&gt; one that is both simple and correct:&lt;/p&gt;\n\n&lt;p&gt;&lt;b&gt;\nWhen naming a symbol, you will avoid collision with compiler/OS/standard libraries if you:&lt;/b&gt;&lt;/p&gt;&lt;b&gt;\n\n&lt;/b&gt;&lt;ul&gt;&lt;b&gt;\n&lt;li&gt;never start a symbol with an underscore&lt;/li&gt;\n&lt;/b&gt;&lt;li&gt;&lt;b&gt;never name a symbol with two consecutive underscores inside.\n&lt;/b&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Of course, putting your code in an unique namespace helps to avoid collision, too (but won&apos;t protect against evil macros)&lt;/p&gt;\n\n&lt;h2&gt;Some examples&lt;/h2&gt;\n\n&lt;p&gt;(I use macros because they are the more code-polluting of C/C++ symbols, but it could be anything from variable name to class name)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; _WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; __WRONG_AGAIN&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; RIGHT_&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; WRONG__WRONG&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; RIGHT_RIGHT&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; RIGHT_x_RIGHT&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Extracts from C++0x draft&lt;/h2&gt;\n\n&lt;p&gt;From the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf&quot; rel=&quot;noreferrer&quot;&gt;n3242.pdf&lt;/a&gt; file (I expect the final standard text to be similar):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;b&gt;17.6.3.3.2 Global names [global.names]&lt;/b&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Certain sets of names and function signatures are always reserved to the implementation:&lt;/p&gt;\n  \n  &lt;p&gt; Each name that contains a double underscore _ _ or begins with an underscore followed by an uppercase letter (2.12) is reserved to the implementation for any use.&lt;/p&gt;\n  \n  &lt;p&gt; Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;But also:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;b&gt;17.6.3.3.5 User-defined literal suffixes [usrlit.suffix]&lt;/b&gt;&lt;/p&gt;\n  \n  &lt;p&gt;Literal suffix identifiers that do not start with an underscore are reserved for future standardization.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This last clause is confusing, unless you consider that a name starting with one underscore and followed by a lowercase letter would be Ok if &lt;i&gt;not&lt;/i&gt; defined in the global namespace...&lt;/p&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/565w213d.aspx&quot; rel=&quot;noreferrer&quot;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Use of two sequential underscore characters ( __ ) at the beginning of an identifier, or a single leading underscore followed by a capital letter, is reserved for C++ implementations in all scopes. You should avoid using one leading underscore followed by a lowercase letter for names with file scope because of possible conflicts with current or future reserved identifiers.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This means that you can use a single underscore as a member variable prefix, as long as it&apos;s followed by a lower-case letter.&lt;/p&gt;\n\n&lt;p&gt;This is apparently taken from section 17.4.3.1.2 of the C++ standard, but I can&apos;t find an original source for the full standard online.&lt;/p&gt;\n\n&lt;p&gt;See also &lt;a href=&quot;https://stackoverflow.com/questions/224397/why-do-people-use-double-underscore-so-much-in-c&quot;&gt;this question&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As for the other part of the question, it&apos;s common to put the underscore at the &lt;em&gt;end&lt;/em&gt; of the variable name to not clash with anything internal.&lt;/p&gt;\n\n&lt;p&gt;I do this even inside classes and namespaces because I then only have to remember one rule (compared to &quot;at the end of the name in global scope, and the beginning of the name everywhere else&quot;).&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, underscores may be used anywhere in an identifier. I believe the rules are: any of a-z, A-Z, _ in the first character and those +0-9 for the following characters.&lt;/p&gt;\n\n&lt;p&gt;Underscore prefixes are common in C code -- a single underscore means &quot;private&quot;, and double underscores are usually reserved for use by the compiler.&lt;/p&gt;\n    "],"90":["\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.increment.php&quot; rel=&quot;noreferrer&quot;&gt;Incrementing / Decrementing Operators&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;++&lt;/code&gt; increment operator&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&lt;/code&gt; decrement operator&lt;/p&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Example    Name              Effect\n---------------------------------------------------------------------\n++$a       Pre-increment     Increments $a by one, then returns $a.\n$a++       Post-increment    Returns $a, then increments $a by one.\n--$a       Pre-decrement     Decrements $a by one, then returns $a.\n$a--       Post-decrement    Returns $a, then decrements $a by one.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These can go before or after the variable.&lt;/p&gt;\n\n&lt;p&gt;If put before the variable, the increment/decrement operation is done to the variable &lt;strong&gt;first&lt;/strong&gt; then the result is returned. If put after the variable, the variable is &lt;strong&gt;first&lt;/strong&gt; returned, then the increment/decrement operation is done.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$apples&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;I have &apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$apples&lt;/span&gt;-- . &lt;span class=&quot;hljs-string&quot;&gt;&quot; apples. I just ate one.\\n&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://codepad.org/5ZD3j0xb&quot; rel=&quot;noreferrer&quot;&gt;Live example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In the case above &lt;code&gt;++$i&lt;/code&gt; is used, since it is faster. &lt;code&gt;$i++&lt;/code&gt; would have the same results.&lt;/p&gt;\n\n&lt;p&gt;Pre-increment is a little bit faster because it really increments the variable and after that &apos;returns&apos; the result. Post-increment creates a special variable, copies there the value of the first variable and only after the first variable is used, replaces its value with second&apos;s.&lt;/p&gt;\n\n&lt;p&gt;However, you must use &lt;code&gt;$apples--&lt;/code&gt;, since first, you want to display the current number of apples, and &lt;strong&gt;then&lt;/strong&gt; you want to subtract one from it.&lt;/p&gt;\n\n&lt;p&gt;You can also increment letters in PHP:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;++;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once &lt;code&gt;z&lt;/code&gt; is reached &lt;code&gt;aa&lt;/code&gt; is next, and so on.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Stack Overflow Posts:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1968371/understanding-incrementing&quot;&gt;Understanding Incrementing&lt;/a&gt;&lt;/strong&gt;  &lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;Bitwise Operator&lt;/h1&gt;\n\n&lt;p&gt;What is a bit? A bit is a representation of 1 or 0. Basically OFF(0) and ON(1)&lt;/p&gt;\n\n&lt;p&gt;What is a byte? A byte is made up of 8 bits and the highest value of a byte is 255, which would mean every bit is set. We will look at why a byte&apos;s maximum value is 255.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;-------------------------------------------\n|      &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Byte&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; bits )                  |\n-------------------------------------------\n|Place Value | &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;|     \n-------------------------------------------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This representation of 1 Byte&lt;/p&gt;\n\n&lt;p&gt;1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255 (1 Byte) &lt;/p&gt;\n\n&lt;h1&gt;A few examples for better understanding&lt;/h1&gt;\n\n&lt;h2&gt;The &quot;AND&quot; operator: &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; =  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would output the number 8. Why? Well let&apos;s see using our table example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;-------------------------------------------\n|      &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Byte&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; bits )                  |\n-------------------------------------------\n|Place Value | &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;|     \n-------------------------------------------\n|      &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;    |   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;|    \n-------------------------------------------\n|      &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;    |   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|\n------------------------------------------- \n|      &amp;amp;     |   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|\n------------------------------------------- \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So you can see from the table the only bit they share together is the 8 bit.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Second example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; =  &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;103&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// This would output the number 36.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;00100100&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;01100111&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The two shared bits are 32 and 4, which when added together return 36.&lt;/p&gt;\n\n&lt;h2&gt;The &quot;Or&quot; operator: &lt;code&gt;|&lt;/code&gt;&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; =  &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; | &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would output the number 11. Why?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;-------------------------------------------\n|      &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;Byte&lt;/span&gt; ( &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; bits )                  |\n-------------------------------------------\n|Place Value | &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;|     \n-------------------------------------------\n|      &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;    |   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;|    \n-------------------------------------------\n|      &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;    |   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|\n------------------------------------------- \n|      |     |   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;|  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;| &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;|\n-------------------------------------------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You will notice that we have 3 bits set, in the 8, 2, and 1 columns. Add those up: 8+2+1=11.&lt;/p&gt;\n    ","\n&lt;h1&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; Spaceship Operator&lt;/h1&gt;\n&lt;h3&gt;Added in PHP 7&lt;/h3&gt;\n&lt;p&gt;The &lt;a href=&quot;http://php.net/language.operators.comparison&quot; rel=&quot;noreferrer&quot;&gt;spaceship operator&lt;/a&gt; &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is the latest comparison operator added in PHP 7. It is a &lt;em&gt;non-associative&lt;/em&gt; binary operator with the same precedence as equality operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;). This operator allows for simpler three-way comparison between left-hand and right-hand operands.&lt;/p&gt;\n&lt;p&gt;The operator results in an integer expression of:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;0&lt;/code&gt; when both operands are equal&lt;/li&gt;\n&lt;li&gt;Less than &lt;code&gt;0&lt;/code&gt; when the left-hand operand is less than the right-hand operand&lt;/li&gt;\n&lt;li&gt;Greater than &lt;code&gt;0&lt;/code&gt; when the left-hand operand is greater than the right-hand operand&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;e.g.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A good practical application of using this operator would be in comparison type callbacks that are expected to return a zero, negative, or positive integer based on a three-way comparison between two values. The comparison function passed to &lt;a href=&quot;http://php.net/manual/en/function.usort.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;usort&lt;/code&gt;&lt;/a&gt; is one such example.&lt;/p&gt;\n&lt;h3&gt;Before PHP 7 you would write...&lt;/h3&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;, function (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;elseif&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Since PHP 7 you can write...&lt;/h3&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;usort&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;, function (&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// return $b &amp;lt;=&amp;gt; $a; // for reversing order&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;_&lt;/code&gt; &lt;strong&gt;&lt;a href=&quot;http://php.net/function.gettext#refsect1-function.gettext-notes&quot; rel=&quot;noreferrer&quot;&gt;Alias for gettext()&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;The underscore character &apos;_&apos; as in &lt;code&gt;_()&lt;/code&gt; is an alias to the &lt;a href=&quot;http://php.net/function.gettext&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;gettext()&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;\n    ","\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th style=&quot;text-align: center;&quot;&gt;Syntax&lt;/th&gt;\n&lt;th style=&quot;text-align: center;&quot;&gt;Name&lt;/th&gt;\n&lt;th style=&quot;text-align: left;&quot;&gt;Description&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x == y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Equality&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if x and y have the same key/value pairs&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x != y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Inequality&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if x is not equal to y&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x === y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Identity&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if x and y have the same key/value pairs&lt;br&gt;in the same order and of the same types&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x !== y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Non-identity&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if x is not identical to y&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x &amp;lt;=&amp;gt; y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Spaceship&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;0 if x is equal to y, greater than 0 if x &amp;gt; y, less than 0 if x &amp;lt; y&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;++x&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Pre-increment&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Increments x by one, then returns x&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x++&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Post-increment&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Returns x, then increments x by one&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;--x&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Pre-decrement&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Decrements x by one, then returns x&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x--&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Post-decrement&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Returns x, then decrements x by one&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x and y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;And&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if both x and y are &lt;code&gt;true&lt;/code&gt;. If x=6, y=3 then&lt;br&gt;&lt;code&gt;(x &amp;lt; 10 and y &amp;gt; 1)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x &amp;amp;&amp;amp; y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;And&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if both x and y are &lt;code&gt;true&lt;/code&gt;. If x=6, y=3 then&lt;br&gt;&lt;code&gt;(x &amp;lt; 10 &amp;amp;&amp;amp; y &amp;gt; 1)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x or y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Or&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if any of x or y are &lt;code&gt;true&lt;/code&gt;. If x=6, y=3 then&lt;br&gt;&lt;code&gt;(x &amp;lt; 10 or y &amp;gt; 10)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;x || y&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Or&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;true&lt;/code&gt; if any of x or y are &lt;code&gt;true&lt;/code&gt;. If x=6, y=3 then&lt;br&gt;&lt;code&gt;(x &amp;lt; 3 || y &amp;gt; 1)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;a . b&lt;/code&gt;&lt;/td&gt;\n&lt;td style=&quot;text-align: center;&quot;&gt;Concatenation&lt;/td&gt;\n&lt;td style=&quot;text-align: left;&quot;&gt;Concatenate two strings: &quot;Hi&quot; . &quot;Ha&quot;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;    ","\n&lt;p&gt;&lt;strong&gt;Magic constants&lt;/strong&gt;: Although these are not just symbols but important part of this token family. There are eight magical constants that change depending on where they are used.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__LINE__&lt;/code&gt;: The current line number of the file.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__FILE__&lt;/code&gt;: The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, &lt;code&gt;__FILE__&lt;/code&gt; always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__DIR__&lt;/code&gt;: The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to &lt;code&gt;dirname(__FILE__)&lt;/code&gt;. This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__FUNCTION__&lt;/code&gt;: The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__CLASS__&lt;/code&gt;: The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased. The class name includes the namespace it was declared in (e.g. &lt;code&gt;Foo\\Bar&lt;/code&gt;). Note that as of PHP 5.4 &lt;code&gt;__CLASS__&lt;/code&gt; works also in traits. When used in a trait method, &lt;code&gt;__CLASS__&lt;/code&gt; is the name of the class the trait is used in.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__TRAIT__&lt;/code&gt;: The trait name. (Added in PHP 5.4.0) As of PHP 5.4 this constant returns the trait as it was declared (case-sensitive). The trait name includes the namespace it was declared in (e.g. &lt;code&gt;Foo\\Bar&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__METHOD__&lt;/code&gt;: The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;__NAMESPACE__&lt;/code&gt;: The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.php.net/manual/en/language.constants.predefined.php&quot; rel=&quot;noreferrer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h1&gt;Type Operators&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;instanceof&lt;/code&gt; is used to determine whether a PHP variable is an instantiated object of a certain class.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;mclass&lt;/span&gt; &lt;/span&gt;{ }\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sclass&lt;/span&gt; &lt;/span&gt;{ }\n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; mclass;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; mclass);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; sclass);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above example will output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Reason:&lt;/strong&gt; Above Example &lt;code&gt;$a&lt;/code&gt; is a object of the &lt;code&gt;mclass&lt;/code&gt; so use only a &lt;code&gt;mclass&lt;/code&gt; data not instance of with the &lt;code&gt;sclass&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Example with inheritance&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; \n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pclass&lt;/span&gt; &lt;/span&gt;{ } \n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;childclass&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;pclass&lt;/span&gt; &lt;/span&gt;{ } \n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; childclass; \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; childclass); \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; pclass);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above example will output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Example with Clone&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt; \n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cloneable&lt;/span&gt; &lt;/span&gt;{ } \n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; cloneable;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt;; \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; cloneable); \n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; cloneable);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above example will output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;An overview of &lt;a href=&quot;http://php.net/manual/en/language.operators.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;operators in PHP&lt;/strong&gt;&lt;/a&gt;:&lt;/h1&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.logical.php&quot; rel=&quot;noreferrer&quot;&gt;Logical Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;amp;&amp;amp; $b :&lt;/strong&gt; TRUE if both $a and $b are TRUE.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a || $b :&lt;/strong&gt; TRUE if either $a or $b is TRUE.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a xor $b :&lt;/strong&gt; TRUE if either $a or $b is TRUE, but not both.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;! $a :&lt;/strong&gt; TRUE if $a is not TRUE.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a and $b :&lt;/strong&gt; TRUE if both $a and $b are TRUE.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a or $b :&lt;/strong&gt; TRUE if either $a or $b is TRUE.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php&quot; rel=&quot;noreferrer&quot;&gt;Comparison operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;$a == $b :&lt;/strong&gt; TRUE if $a is equal to $b after type juggling.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a === $b   :&lt;/strong&gt; TRUE if $a is equal to $b, and they are of the same type.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a != $b :&lt;/strong&gt; TRUE if $a is not equal to $b after type juggling.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt;&amp;gt; $b :&lt;/strong&gt; TRUE if $a is not equal to $b after type juggling.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a !== $b   :&lt;/strong&gt; TRUE if $a is not equal to $b, or they are not of the same type.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt; $b&lt;/strong&gt; : TRUE if $a is strictly less than $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;gt; $b&lt;/strong&gt; : TRUE if $a is strictly greater than $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt;= $b&lt;/strong&gt; : TRUE if $a is less than or equal to $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;gt;= $b&lt;/strong&gt; : TRUE if $a is greater than or equal to $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt;=&amp;gt; $b&lt;/strong&gt; : An integer less than, equal to, or greater than zero when $a is respectively less than, equal to, or greater than $b. Available as of PHP 7.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a ? $b : $c&lt;/strong&gt; : if $a return $b else return $c (&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;ternary operator&lt;/strong&gt;&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a ?? $c&lt;/strong&gt; : Same as $a ? $a : $c (&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;null coalescing operator&lt;/strong&gt;&lt;/a&gt; - requires PHP&amp;gt;=7)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.arithmetic.php&quot; rel=&quot;noreferrer&quot;&gt;Arithmetic Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;-$a&lt;/strong&gt; : Opposite of $a.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a + $b&lt;/strong&gt; : Sum of $a and $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a - $b&lt;/strong&gt; : Difference of $a and $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a * $b&lt;/strong&gt; : Product of $a and $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a / $b&lt;/strong&gt; : Quotient of $a and $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a % $b&lt;/strong&gt; : Remainder of $a divided by $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a ** $b&lt;/strong&gt; : Result of raising $a to the $b&apos;th power (introduced in PHP 5.6)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.increment.php&quot; rel=&quot;noreferrer&quot;&gt;Incrementing/Decrementing Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;++$a&lt;/strong&gt; : Increments $a by one, then returns $a.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a++&lt;/strong&gt; : Returns $a, then increments $a by one.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;--$a&lt;/strong&gt; : Decrements $a by one, then returns $a.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a--&lt;/strong&gt; : Returns $a, then decrements $a by one.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.bitwise.php&quot; rel=&quot;noreferrer&quot;&gt;Bitwise Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;amp; $b&lt;/strong&gt; : Bits that are set in both $a and $b are set.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a | $b&lt;/strong&gt; : Bits that are set in either $a or $b are set.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a ^ $b&lt;/strong&gt; : Bits that are set in $a or $b but not both are set.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;~ $a&lt;/strong&gt; : Bits that are set in $a are not set, and vice versa.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt;&amp;lt; $b&lt;/strong&gt; : Shift the bits of $a $b steps to the left (each step means &quot;multiply by two&quot;)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;gt;&amp;gt; $b&lt;/strong&gt; : Shift the bits of $a $b steps to the right (each step means &quot;divide by two&quot;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.string.php&quot; rel=&quot;noreferrer&quot;&gt;String Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;$a . $b&lt;/strong&gt; : Concatenation of $a and $b.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.array.php&quot; rel=&quot;noreferrer&quot;&gt;Array Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;$a + $b&lt;/strong&gt; : Union of $a and $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a == $b&lt;/strong&gt; : TRUE if $a and $b have the same key/value pairs.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a === $b&lt;/strong&gt; : TRUE if $a and $b have the same key/value pairs in the same order and of the same types.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a != $b&lt;/strong&gt; : TRUE if $a is not equal to $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt;&amp;gt; $b&lt;/strong&gt; : TRUE if $a is not equal to $b.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a !== $b&lt;/strong&gt; : TRUE if $a is not identical to $b.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.assignment.php&quot; rel=&quot;noreferrer&quot;&gt;Assignment Operators:&lt;/a&gt;&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;$a = $b&lt;/strong&gt; : The value of $b is assigned to $a&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a += $b&lt;/strong&gt; : Same as $a = $a + $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a -= $b&lt;/strong&gt; : Same as $a = $a - $b&lt;/li&gt;\n&lt;li&gt;*&lt;em&gt;$a &lt;em&gt;= $b&lt;/em&gt;&lt;/em&gt; : Same as $a = $a * $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a /= $b&lt;/strong&gt; : Same as $a = $a / $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a %= $b&lt;/strong&gt; : Same as $a = $a % $b&lt;/li&gt;\n&lt;li&gt;**$a &lt;strong&gt;= $b&lt;/strong&gt; : Same as $a = $a ** $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a .= $b&lt;/strong&gt; : Same as $a = $a . $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;amp;= $b&lt;/strong&gt; : Same as $a = $a &amp;amp; $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a |= $b&lt;/strong&gt; : Same as $a = $a | $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a ^= $b&lt;/strong&gt; : Same as $a = $a ^ $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;lt;&amp;lt;= $b&lt;/strong&gt; : Same as $a = $a &amp;lt;&amp;lt; $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a &amp;gt;&amp;gt;= $b&lt;/strong&gt; : Same as $a = $a &amp;gt;&amp;gt; $b&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;$a ??= $b&lt;/strong&gt; : The value of $b is assigned to $a if $a is null or not defined (&lt;a href=&quot;https://php.net/manual/en/migration74.new-features.php#migration74.new-features.core.null-coalescing-assignment-operator&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;null coalescing assignment operator&lt;/strong&gt;&lt;/a&gt; - requires PHP&amp;gt;=7.4)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h3&gt;Note&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;and&lt;/code&gt; operator and &lt;code&gt;or&lt;/code&gt; operator have lower precedence than assignment operator &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;This means that &lt;code&gt;$a = true and false;&lt;/code&gt; is equivalent to &lt;code&gt;($a = true) and false&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In most cases you will probably want to use &lt;strong&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;||&lt;/code&gt;&lt;/strong&gt;, which behave in a way known from languages like C, Java or JavaScript.&lt;/p&gt;\n    ","\n&lt;h1&gt;&lt;strong&gt;Spaceship Operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/strong&gt; (Added in PHP 7)&lt;/h1&gt;\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/language.operators.comparison.php&quot; rel=&quot;noreferrer&quot;&gt;Examples for &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; Spaceship operator (PHP 7, Source: PHP Manual):&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Integers, Floats, Strings, Arrays &amp;amp; objects for Three-way comparison of variables.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Integers&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Floats&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2.5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2.5&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1.5&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Strings&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Comparison is case-sensitive&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;zz&quot;&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;aa&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Arrays&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; [] &amp;lt;=&amp;gt; []; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;=&amp;gt; []; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;=&amp;gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Objects&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// -1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// only values are compared&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;) [&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; &amp;lt;=&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; Curly braces&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8470047/blocks-curly-braces-no-curly-braces&quot;&gt;Blocks - curly braces/no curly braces?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2596837/curly-braces-in-string-in-php&quot;&gt;Curly braces in string in PHP&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8092248/php-curly-braces-in-array-notation&quot;&gt;PHP curly braces in array notation&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And some words about last post&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;{&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;} = &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;{&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt;{} = &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// does not work&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$x&lt;/span&gt; = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}; &lt;span class=&quot;hljs-comment&quot;&gt;// does not work&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;${x[4]}&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;${x{4}}&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// does not work&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{$x[4]}&lt;/span&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;{$x{4}&lt;/span&gt;}&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// it works&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Null coalescing operator (??)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;This operator has been added in PHP 7.0 for the common case of needing to use a ternary operator in conjunction with &lt;code&gt;isset()&lt;/code&gt;. It returns its first operand if it exists and is not &lt;code&gt;NULL&lt;/code&gt;; otherwise it returns its second operand.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Fetches the value of $_GET[&apos;user&apos;] and returns &apos;nobody&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// if it does not exist.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;] ?? &lt;span class=&quot;hljs-string&quot;&gt;&apos;nobody&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is equivalent to:&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;]) ? &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;] : &lt;span class=&quot;hljs-string&quot;&gt;&apos;nobody&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Coalescing can be chained: this will return the first&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// defined value out of $_GET[&apos;user&apos;], $_POST[&apos;user&apos;], and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;nobody&apos;.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$username&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;] ?? &lt;span class=&quot;hljs-variable&quot;&gt;$_POST&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;] ?? &lt;span class=&quot;hljs-string&quot;&gt;&apos;nobody&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;PHP Strings:&lt;/strong&gt;\nPHP Strings can be specified in four ways not just two ways:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1) Single Quote Strings:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;This is my string&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// print This is my string&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;2) Double Quote Strings:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$str&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;string&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This is my &lt;span class=&quot;hljs-subst&quot;&gt;$str&lt;/span&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// print This is my string&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;3) Heredoc:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&amp;lt;&amp;lt;EOD\nThis is my string\nEOD&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// print This is my string&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;4) Nowdoc (since PHP 5.3.0):&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;END_OF_STRING&apos;&lt;/span&gt;\n    This is my &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; \nEND_OF_STRING; &lt;span class=&quot;hljs-comment&quot;&gt;// print This is my string&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;QUESTION:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;What does &lt;code&gt;=&amp;gt;&lt;/code&gt; mean?&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;ANSWER:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt; Is the symbol we humans decided to use to separate &lt;code&gt;&quot;Key&quot; =&amp;gt; &quot;Value&quot;&lt;/code&gt; pairs in Associative Arrays.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ELABORATING:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;To understand this, we have to know what Associative Arrays are. The first thing that comes up when a conventional programmer thinks of an array (&lt;strong&gt;in PHP&lt;/strong&gt;) would be something similar to:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$myArray1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//option 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray2&lt;/span&gt; = [&lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;//option 2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt; = [];&lt;span class=&quot;hljs-comment&quot;&gt;//option 3&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[] = &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;; \n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;; \n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[] = &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Where as, if we wanted to call the array in some later part of the code, we could do:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myArray1&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;// output: hello&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myArray2&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;// output: hello&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;// output: hello&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So far so good. However, as humans, we might find it hard to remember that index &lt;code&gt;[0]&lt;/code&gt; of the array is the value of the &lt;strong&gt;year&lt;/strong&gt; 2016, index &lt;code&gt;[1]&lt;/code&gt; of the array is a &lt;strong&gt;greetings&lt;/strong&gt;, and index &lt;code&gt;[2]&lt;/code&gt; of the array is a simple &lt;strong&gt;integer value&lt;/strong&gt;. The alternative we would then have is to use what is called an &lt;strong&gt;Associative Array&lt;/strong&gt;. An Associative array has a few differences from a &lt;strong&gt;Sequential Array&lt;/strong&gt;\n(&lt;em&gt;which is what the previous cases were since they increment the index used in a predetermined sequence, by incrementing by 1 for each following value&lt;/em&gt;).&lt;/p&gt;\n&lt;p&gt;Differences (&lt;em&gt;between a sequential and associative array&lt;/em&gt;):&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Durring the declaration of an Associative Array, you don&apos;t only include the &lt;code&gt;value&lt;/code&gt; of what you want to put in the array, but you also put the index value (called the &lt;code&gt;key&lt;/code&gt;) which you want to use when calling the array in later parts of the code. The following syntax is used during it&apos;s declaration: &lt;code&gt;&quot;key&quot; =&amp;gt; &quot;value&quot;&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When using the Associative Array, the &lt;code&gt;key&lt;/code&gt; value would then be placed inside the index of the array to retrieve the desired &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For instance:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$myArray1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;( \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Year&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Greetings&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Integer_value&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//option 1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray2&lt;/span&gt; = [ \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Year&quot;&lt;/span&gt; =&amp;gt;  &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;, \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Greetings&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Integer_value&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;//option 2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt; = [];&lt;span class=&quot;hljs-comment&quot;&gt;//option 3&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Year&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;; \n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Greetings&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;; \n&lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Integer_value&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And now, to receive the same output as before, the &lt;code&gt;key&lt;/code&gt; value would be used in the arrays index:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myArray1&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Greetings&quot;&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;// output: hello&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myArray2&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Greetings&quot;&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;// output: hello&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$myArray3&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Greetings&quot;&lt;/span&gt;];&lt;span class=&quot;hljs-comment&quot;&gt;// output: hello&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;FINAL POINT:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;So from the above example, it is pretty easy to see that the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol is used to express the relationship of an Associative Array between each of the &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; pairs in an array &lt;strong&gt;DURING&lt;/strong&gt; the initiation of the values within the array.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;What does &quot;&amp;amp;&quot; mean here in PHP?&lt;/p&gt;\n\n&lt;h1&gt;&lt;strong&gt;PHP &quot;&amp;amp;&quot; operator&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Makes life more easier once we get used to it..(check example below carefully)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; usually checks bits that are set in both $a and $b are set.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;have you even noticed how these calls works?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;   &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ERROR | E_WARNING | E_PARSE);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL &amp;amp; ~E_NOTICE);\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;error_reporting&lt;/span&gt;(E_ALL);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So behind all above is game of bitwise operator and bits.&lt;/p&gt;\n\n&lt;p&gt;One usefull case of these is easy configurations like give below, so a single integer field can store thousands of combos for you. &lt;/p&gt;\n\n&lt;p&gt;Most people have already read the docs but didn&apos;t reliase the real world use case of these bitwise operators.&lt;/p&gt;\n\n&lt;h1&gt;Example That you &apos;ll love&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Config&lt;/span&gt; &lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// our constants must be 1,2,4,8,16,32,64 ....so on&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_CAT&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_DOG&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_LION&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_RAT&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_BIRD&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_ALL&lt;/span&gt;=&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$config&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;__construct&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$config&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;config=&lt;span class=&quot;hljs-variable&quot;&gt;$config&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_CAT&lt;/span&gt;)){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;cat &apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_DOG&lt;/span&gt;)){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;dog &apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_RAT&lt;/span&gt;)){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;rat &apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_LION&lt;/span&gt;)){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;lion &apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_BIRD&lt;/span&gt;)){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;bird &apos;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;config &amp;amp; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_ALL&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// cat dog rat lion bird&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_BIRD&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//bird&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_BIRD&lt;/span&gt; | &lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_DOG&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//dog bird&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_ALL&lt;/span&gt; &amp;amp; ~&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_DOG&lt;/span&gt; &amp;amp; ~&lt;span class=&quot;hljs-title class_&quot;&gt;Config&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;TYPE_CAT&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//rat lion bird&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;==&lt;/code&gt;  is used for check equality &lt;strong&gt;without&lt;/strong&gt; considering variable &lt;strong&gt;data-type&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;===&lt;/code&gt; is used for check equality for &lt;strong&gt;both&lt;/strong&gt; the variable &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;data-type&lt;/strong&gt;&lt;/p&gt;\n&lt;h1&gt;Example&lt;/h1&gt;\n&lt;p&gt;&lt;code&gt;$a = 5&lt;/code&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;if ($a == 5)&lt;/code&gt;  - will evaluate to true&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;if ($a == &apos;5&apos;)&lt;/code&gt; - will evaluate to true, because while comparing this both value PHP internally convert that string value into integer and then compare both values&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;if ($a === 5)&lt;/code&gt; - will evaluate to true&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;if ($a === &apos;5&apos;)&lt;/code&gt; - will evaluate to false, because value is 5, but this value 5 is not an integer.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;h2&gt;Null Coalesce operator &quot;??&quot; (Added in PHP 7)&lt;/h2&gt;\n\n&lt;p&gt;Not the catchiest name for an operator, but PHP 7 brings in the rather handy null coalesce so I thought I&apos;d share an example.&lt;/p&gt;\n\n&lt;p&gt;In PHP 5, we already have a ternary operator, which tests a value, and then returns the second element if that returns true and the third if it doesn&apos;t:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt; ? &lt;span class=&quot;hljs-variable&quot;&gt;$count&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// outputs 10&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is also a shorthand for that which allows you to skip the second element if it&apos;s the same as the first one: echo $count ?: 10; // also outputs 10&lt;/p&gt;\n\n&lt;p&gt;In PHP 7 we additionally get the ?? operator which rather than indicating extreme confusion which is how I would usually use two question marks together instead allows us to chain together a string of values. Reading from left to right, the first value which exists and is not null is the value that will be returned.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// $a is not set&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; ?? &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// outputs 2&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$a&lt;/span&gt; ?? &lt;span class=&quot;hljs-variable&quot;&gt;$b&lt;/span&gt; ?? &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// outputs 16&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This construct is useful for giving priority to one or more values coming perhaps from user input or existing configuration, and safely falling back on a given default if that configuration is missing. It&apos;s kind of a small feature but it&apos;s one that I know I&apos;ll be using as soon as my applications upgrade to PHP 7.&lt;/p&gt;\n    ","\n&lt;h2&gt;Nullable return type declaration&lt;/h2&gt;\n\n&lt;p&gt;PHP 7 adds support for return type declarations. Similarly to argument type declarations, return type declarations specify the type of value that will be returned from a function. The same types are available for return type declarations as are available for argument type declarations.&lt;/p&gt;\n\n&lt;p&gt;Strict typing also has an effect on return type declarations. In the default weak mode, returned values will be coerced to the correct type if they are not already of that type. In strong mode, the returned value must be of the correct type, otherwise, a TypeError will be thrown.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;As of PHP 7.1.0, return values can be marked as nullable by prefixing the type name with a question mark (?). This signifies that the function returns either the specified type or NULL.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;get_item&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;): ?&lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;item&apos;&lt;/span&gt;])) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;item&apos;&lt;/span&gt;];\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    }\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/functions.returning-values.php#example-160&quot; rel=&quot;noreferrer&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;?-&amp;gt; NullSafe Operator&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Added in PHP 8.0&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It&apos;s the &lt;a href=&quot;https://wiki.php.net/rfc/nullsafe_operator&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NullSafe Operator&lt;/code&gt;&lt;/a&gt;, it returns &lt;code&gt;null&lt;/code&gt; in case you try to invoke functions or get values from &lt;code&gt;null&lt;/code&gt;. Nullsafe operator can be chained and can be used both on the methods and properties.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$objDrive&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$drive&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$objDrive&lt;/span&gt;?-&amp;gt;func?-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getDriver&lt;/span&gt;()?-&amp;gt;value; &lt;span class=&quot;hljs-comment&quot;&gt;//return null&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$drive&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$objDrive&lt;/span&gt;-&amp;gt;func-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getDriver&lt;/span&gt;()-&amp;gt;value; &lt;span class=&quot;hljs-comment&quot;&gt;// Error: Trying to get property &apos;func&apos; of non-object&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Nullsafe operator doesn&apos;t work with array keys:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$drive&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;admin&apos;&lt;/span&gt;]?-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getDriver&lt;/span&gt;()?-&amp;gt;value &lt;span class=&quot;hljs-comment&quot;&gt;//Warning: Trying to access array offset on value of type null&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$drive&lt;/span&gt; = [];\n&lt;span class=&quot;hljs-variable&quot;&gt;$drive&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;admin&apos;&lt;/span&gt;]?-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getAddress&lt;/span&gt;()?-&amp;gt;value &lt;span class=&quot;hljs-comment&quot;&gt;//Warning: Undefined array key &quot;admin&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;&lt;strong&gt;Three DOTS as Splat Operator (...)&lt;/strong&gt; (since PHP 5.6)&lt;/h2&gt;\n&lt;p&gt;PHP has an operator &quot;...&quot; (Three dots) which is referred as Splat Operator. It is used to pass arbitrary number of parameters in a function and this type of function is called Variadic Functions. Lets take examples to use of &quot;...&quot; (Three dots).&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 1:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculateNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt;;\n}\n \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;calculateNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n \n&lt;span class=&quot;hljs-comment&quot;&gt;//Output 150&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Each arguments of calculateNumbers() function pass through $params as an array when use &quot; &quot;.&lt;/p&gt;\n&lt;p&gt;There are many different ways to use &quot; &quot;  operator. Below some examples:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 2:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculateNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$no1&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$no2&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$no3&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$no4&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$no5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$no1&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$no2&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$no3&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$no4&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$no5&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt;;\n}\n \n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;calculateNumbers&lt;/span&gt;(...&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;);\n \n&lt;span class=&quot;hljs-comment&quot;&gt;//Output 150&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 3:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculateNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-variable&quot;&gt;$no1&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;calculateNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$no1&lt;/span&gt;, ...&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;);\n \n&lt;span class=&quot;hljs-comment&quot;&gt;//Output 220&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 4:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calculateNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt; + &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$total&lt;/span&gt;;\n}\n \n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers1&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers2&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;calculateNumbers&lt;/span&gt;(...&lt;span class=&quot;hljs-variable&quot;&gt;$numbers1&lt;/span&gt;, ...&lt;span class=&quot;hljs-variable&quot;&gt;$numbers2&lt;/span&gt;);\n \n&lt;span class=&quot;hljs-comment&quot;&gt;//Output 1650&lt;/span&gt;\n \n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It should be noted that Variadic Parameters &lt;strong&gt;cannot be targeted&lt;/strong&gt; by named arguments.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 5:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;sumIntegers&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ...&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;int&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$sum&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable&quot;&gt;$sum&lt;/span&gt; += &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$sum&lt;/span&gt;;\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sumIntegers&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;params&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]);     \n&lt;span class=&quot;hljs-comment&quot;&gt;// $params will be equal to [&apos;params&apos; =&amp;gt; [1, 2, 3, 4]] in sumIntegers&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// throws TypeError sumIntegers(): Argument #1 must be of type int, array given &lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;sumIntegers&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;arbitrary_name&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;another_name&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// $params will be equal to [&apos;arbitrary_name&apos; =&amp;gt; 1, &apos;another_name&apos; =&amp;gt; 2] in sumIntegers&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Outputs: 3 &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using an unpacked associative array as the parameter for a function call has the same effect as calling the function using each key-value pair as a named argument.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 6:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;fullName&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$first_name&lt;/span&gt;, ?&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$middle_name&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, ?&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$last_name&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trim&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$first_name&lt;/span&gt;|&lt;span class=&quot;hljs-subst&quot;&gt;$middle_name&lt;/span&gt;|&lt;span class=&quot;hljs-subst&quot;&gt;$last_name&lt;/span&gt;&quot;&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;first_name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;last_name&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Doe&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;fullName&lt;/span&gt;(...&lt;span class=&quot;hljs-variable&quot;&gt;$params&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// same as fullName(first_name: &apos;John&apos;, last_name: &apos;Doe&apos;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// outputs &apos;John||Doe&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This can be used to pass named arguments to something like a nested function call or a class.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Example 7:&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;throw_exception&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$exception&lt;/span&gt;, ...&lt;span class=&quot;hljs-variable&quot;&gt;$parameters&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$exception&lt;/span&gt;(...&lt;span class=&quot;hljs-variable&quot;&gt;$parameters&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;throw_exception&lt;/span&gt;(&lt;span class=&quot;hljs-attr&quot;&gt;exception&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Exception&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;code&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// executes throw new Exception(...[&apos;code&apos; =&amp;gt; 123])&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// which is the same as throw new Exception(code: 123);&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;&lt;strong&gt;NullSafe Operator &quot;?-&amp;gt;&quot; since php8&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;In PHP8 it&apos;s been accepted this new operator,  you can find the documentation &lt;a href=&quot;https://wiki.php.net/rfc/nullsafe_operator&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;. &lt;code&gt;?-&amp;gt;&lt;/code&gt; it&apos;s the &lt;code&gt;NullSafe Operator&lt;/code&gt;, it returns &lt;code&gt;null&lt;/code&gt; in case you try to invoke functions or get values from &lt;code&gt;null&lt;/code&gt;...&lt;/p&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$obj&lt;/span&gt; = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$obj&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$obj&lt;/span&gt;?-&amp;gt;attr; &lt;span class=&quot;hljs-comment&quot;&gt;//return null&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$obj&lt;/span&gt; = ?-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;funct&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// return null&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$obj&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$objDrive&lt;/span&gt;-&amp;gt;attr; &lt;span class=&quot;hljs-comment&quot;&gt;// Error: Trying to get property &apos;attr&apos; of non-object&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;PHP Arrays:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;An &lt;code&gt;array&lt;/code&gt; is a data structure that stores one or more similar types of values in a single value:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Numeric array  An &lt;code&gt;array&lt;/code&gt; with a numeric index. Values are stored and accessed in linear fashion.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Associative array  An &lt;code&gt;array&lt;/code&gt; with strings as index. This stores element values in association with key-values rather than in a strict linear index order.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Multidimensional array  An &lt;code&gt;array&lt;/code&gt; containing one or more arrays, and values are accessed using multiple indices.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h4&gt;Numeric Array&lt;/h4&gt;\n&lt;p&gt;These arrays can store numbers, strings and any object but their index will be represented by numbers. By default, an array&apos;s index starts from zero.&lt;/p&gt;\n&lt;h5&gt;Example:&lt;/h5&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// First way of creating an array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value is &lt;span class=&quot;hljs-subst&quot;&gt;$value&lt;/span&gt;&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Second way of creating an array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d4&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e5&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value is &lt;span class=&quot;hljs-subst&quot;&gt;$value&lt;/span&gt;&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Third way of creating an array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;two&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;three&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;four&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;five&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value is &lt;span class=&quot;hljs-subst&quot;&gt;$value&lt;/span&gt;&quot;&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Fourth way of creating an array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt;[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$numbers&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value is &lt;span class=&quot;hljs-subst&quot;&gt;$value&lt;/span&gt;&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h6&gt;Output:&lt;/h6&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Value is 1\nValue is 2\nValue is 3\nValue is 4\nValue is 5\nValue is a1\nValue is b2\nValue is c3\nValue is d4\nValue is e5\nValue is one\nValue is two\nValue is three\nValue is four\nValue is five\nValue is a\nValue is b\nValue is c\nValue is d\nValue is e\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;Associative Arrays&lt;/h4&gt;\n&lt;p&gt;The associative arrays are equal to numeric arrays in term of functionality but they are different in terms of their index. An associative array will have their index as a &lt;code&gt;string&lt;/code&gt; so that you can establish a defined association between key and values.&lt;/p&gt;\n&lt;h5&gt;Example:&lt;/h5&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// First way of creating an associative array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mohammad&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;qadir&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;zara&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of mohammad is &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mohammad&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of qadir is &quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;qadir&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of zara is &quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;zara&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Second way of creating an associative array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;mohammad&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$$$&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;qadir&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$$&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;zara&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;$&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of mohammad is &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mohammad&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of qadir is &quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;qadir&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of zara is &quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;zara&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Third way of creating an associative array&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mohammad&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;high&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;qadir&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;medium&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;zara&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;low&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of mohammad is &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mohammad&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of qadir is &quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;qadir&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Salary of zara is &quot;&lt;/span&gt; .  &lt;span class=&quot;hljs-variable&quot;&gt;$salaries&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;zara&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h6&gt;Output:&lt;/h6&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Salary of mohammad is 2000\nSalary of qadir is 1000\nSalary of zara is 500\nSalary of mohammad is $$$\nSalary of qadir is $$\nSalary of zara is $\nSalary of mohammad is high\nSalary of qadir is medium\nSalary of zara is low\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;Multidimensional Arrays&lt;/h4&gt;\n&lt;p&gt;Each element of a multidimensional array can also be an array. And each element in the sub-array can be an array, and so on. Values in the multidimensional array are accessed using multiple indexes (numeric or string).&lt;/p&gt;\n&lt;h5&gt;Example:&lt;/h5&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$marks&lt;/span&gt; = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;mohammad&quot;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;physics&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;maths&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;chemistry&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;\n    ],\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;qadir&quot;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;physics&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;maths&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;chemistry&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;\n    ],\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;zara&quot;&lt;/span&gt; =&amp;gt; [\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;physics&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;maths&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;chemistry&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;\n    ]\n];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Accessing a multidimensional array&apos;s values&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Marks for mohammad in physics: &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$marks&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mohammad&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;physics&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Marks for qadir in maths:&quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$marks&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;qadir&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;maths&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Marks for zara in chemistry: &quot;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$marks&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;zara&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;chemistry&apos;&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h6&gt;Output:&lt;/h6&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Marks for mohammad in physics: 35\nMarks for qadir in maths: 32\nMarks for zara in chemistry: 39\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h4&gt;PHP Array Functions&lt;/h4&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;array()&lt;/code&gt; -&amp;gt; Creates an array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_change_key_case()&lt;/code&gt; -&amp;gt; Changes all keys in an array to lowercase or uppercase&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_chunk()&lt;/code&gt; -&amp;gt; Splits an array into chunks of arrays&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_column()&lt;/code&gt; -&amp;gt; Returns the values from a single column in the input array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_combine()&lt;/code&gt; -&amp;gt; Creates an array by using the elements from one &quot;keys&quot; array and one &quot;values&quot; array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_count_values()&lt;/code&gt; -&amp;gt; Counts all the values of an array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_diff()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the differences (compare values only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_diff_assoc()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the differences (compare keys and values)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_diff_key()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the differences (compare keys only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_diff_uassoc()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_diff_ukey()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_fill()&lt;/code&gt; -&amp;gt; Fills an array with values&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_fill_keys()&lt;/code&gt; -&amp;gt; Fills an array with values, specifying keys&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_filter()&lt;/code&gt; -&amp;gt; Filters the values of an array using a callback function&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_flip()&lt;/code&gt; -&amp;gt; Flips/Exchanges all keys with their associated values in an array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_intersect()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the matches (compare values only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_intersect_assoc()&lt;/code&gt; -&amp;gt; Compare arrays and returns the matches (compare keys and values)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_intersect_key()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the matches (compare keys only)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_intersect_uassoc()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_intersect_ukey()&lt;/code&gt; -&amp;gt; Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_key_exists()&lt;/code&gt; -&amp;gt; Checks if the specified key exists in the array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_keys()&lt;/code&gt; -&amp;gt; Returns all the keys of an array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_map()&lt;/code&gt; -&amp;gt; Sends each value of an array to a user-made function, which returns new values&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_merge()&lt;/code&gt; -&amp;gt; Merges one or more arrays into one array&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_merge_recursive()&lt;/code&gt; -&amp;gt; Merges one or more arrays into one array recursively&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_multisort()&lt;/code&gt; -&amp;gt; Sorts multiple or multi-dimensional arrays&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h3&gt;#[] attributes since PHP 8&lt;/h3&gt;\n&lt;p&gt;You can write &lt;code&gt;#[attribute_name]&lt;/code&gt; since PHP 8.  This is an &lt;a href=&quot;https://www.php.net/manual/en/language.attributes.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;attribute&lt;/a&gt; in PHP (also Rust and C#).  Other languages may use names like annotations (Java) or decorators (Python, Javascript) for a similar feature.  Prior to PHP 8, &lt;code&gt;#[whatever]&lt;/code&gt; would have been a comment until the end of the line (because &lt;code&gt;#&lt;/code&gt; starts a comment in PHP).  So if an attribute is the last thing on a line, it will be ignored in versions before PHP 8.  If not the last thing on a line, it would comment out whatever was after it prior to PHP 8 (since then the &lt;code&gt;]&lt;/code&gt; terminates it).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://wiki.php.net/rfc/attributes_v2&quot; rel=&quot;nofollow noreferrer&quot;&gt;RFC&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://wiki.php.net/rfc/shorter_attribute_syntax_change&quot; rel=&quot;nofollow noreferrer&quot;&gt;Syntax RFC&lt;/a&gt; (the syntax was changed from the original RFC)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/language.attributes.php&quot; rel=&quot;nofollow noreferrer&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In php 8&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Instead of writing the classic &lt;code&gt;!== null&lt;/code&gt; you can use the &lt;code&gt;?&lt;/code&gt; operator to write just 1 line of code, the code becomes pretty clear:&lt;/p&gt;\n&lt;p&gt;Before:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$firsName&lt;/span&gt; =  &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$session&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$session&lt;/span&gt;-&amp;gt;user;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getName&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable&quot;&gt;$firstName&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;-&amp;gt;firstName;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$firsName&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$session&lt;/span&gt;?-&amp;gt;user?-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;getName&lt;/span&gt;()?-&amp;gt;firstName;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use &lt;code&gt;match&lt;/code&gt; instead of &lt;code&gt;switch&lt;/code&gt;. The &lt;code&gt;match&lt;/code&gt; expression uses strict comparison (&lt;code&gt;===&lt;/code&gt;) instead. The comparison is strict regardless of &lt;code&gt;strict_types&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Before:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;found A&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;found B&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// Result: &quot;found A&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;found A&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;found B&quot;&lt;/span&gt;,\n};\n&lt;span class=&quot;hljs-comment&quot;&gt;// Result: &quot;found A&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Double-dot syntax&lt;/h1&gt;\n&lt;p&gt;When used between two characters in qualifying native PHP string functions, &lt;code&gt;..&lt;/code&gt; acts to express an inclusive range of characters. &lt;code&gt;a-e&lt;/code&gt; is equivalent to &lt;code&gt;abcde&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;trim&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;adobe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a..e&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Prints:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;o\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/q/72865138/2943403&quot;&gt;Native PHP functions that allow double-dot range syntax&lt;/a&gt;&lt;/p&gt;\n    "]},"page":"105","randomQuestions":[{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"Convert Rows to columns using 'Pivot' in SQL Server","slug":"convert-rows-to-columns-using-'pivot'-in-sql-server-1657388372528"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"How to replace all occurrences of a string in JavaScript","slug":"how-to-replace-all-occurrences-of-a-string-in-javascript-1657384895467"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"How to access the correct `this` inside a callback","slug":"how-to-access-the-correct-this-inside-a-callback-1657384283261"},{"title":"Sort array of objects by string property value","slug":"sort-array-of-objects-by-string-property-value-1657384860090"},{"title":"How do I count the occurrences of a list item?","slug":"how-do-i-count-the-occurrences-of-a-list-item-1657387916234"},{"title":"How to add to the PYTHONPATH in Windows, so it finds my modules/packages?","slug":"how-to-add-to-the-pythonpath-in-windows-so-it-finds-my-modulespackages-1657388540360"},{"title":"What is array to pointer decay?","slug":"what-is-array-to-pointer-decay-1657384709608"},{"title":"What does the comma operator , do?","slug":"what-does-the-comma-operator-do-1657388258021"},{"title":"Where can I find documentation on formatting a date in JavaScript?","slug":"where-can-i-find-documentation-on-formatting-a-date-in-javascript-1657384878157"},{"title":"How do I return the response from an asynchronous call?","slug":"how-do-i-return-the-response-from-an-asynchronous-call-1657384208012"},{"title":"What do 'lazy' and 'greedy' mean in the context of regular expressions?","slug":"what-do-'lazy'-and-'greedy'-mean-in-the-context-of-regular-expressions-1657388200552"},{"title":"What is the canonical way to check for errors using the CUDA runtime API?","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698"},{"title":"Get all unique values in a JavaScript array (remove duplicates)","slug":"get-all-unique-values-in-a-javascript-array-(remove-duplicates)-1657387435296"},{"title":"How to join (merge) data frames (inner, outer, left, right)","slug":"how-to-join-(merge)-data-frames-(inner-outer-left-right)-1657384406445"},{"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894"},{"title":"Ways to circumvent the same-origin policy","slug":"ways-to-circumvent-the-same-origin-policy-1657384763316"}]},"__N_SSG":true}