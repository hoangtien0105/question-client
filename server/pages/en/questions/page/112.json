{"pageProps":{"data":{"count":610,"rows":[{"id":55,"title":"Is there a CSS parent selector?","slug":"is-there-a-css-parent-selector-1657384430692","postType":"QUESTION","createdAt":"2022-07-09T16:33:50.000Z","updatedAt":"2022-07-09T16:33:50.000Z","tags":[{"id":196,"name":"css","slug":"css","createdAt":"2022-07-09T16:33:50.000Z","updatedAt":"2022-07-09T16:33:50.000Z","Questions_Tags":{"questionId":55,"tagId":196}},{"id":197,"name":"css-selectors","slug":"css-selectors","createdAt":"2022-07-09T16:33:50.000Z","updatedAt":"2022-07-09T16:33:50.000Z","Questions_Tags":{"questionId":55,"tagId":197}}]},{"id":54,"title":"What do querySelectorAll and getElementsBy* methods return?","slug":"what-do-queryselectorall-and-getelementsby*-methods-return-1657384425935","postType":"QUESTION","createdAt":"2022-07-09T16:33:45.000Z","updatedAt":"2022-07-09T16:33:45.000Z","tags":[{"id":194,"name":"getelementsbyclassname","slug":"getelementsbyclassname","createdAt":"2022-07-09T16:33:46.000Z","updatedAt":"2022-07-09T16:33:46.000Z","Questions_Tags":{"questionId":54,"tagId":194}},{"id":195,"name":"dom-traversal","slug":"dom-traversal","createdAt":"2022-07-09T16:33:46.000Z","updatedAt":"2022-07-09T16:33:46.000Z","Questions_Tags":{"questionId":54,"tagId":195}}]},{"id":53,"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195","postType":"QUESTION","createdAt":"2022-07-09T16:33:43.000Z","updatedAt":"2022-07-09T16:33:43.000Z","tags":[{"id":190,"name":"reference","slug":"reference","createdAt":"2022-07-09T16:33:43.000Z","updatedAt":"2022-07-09T16:33:43.000Z","Questions_Tags":{"questionId":53,"tagId":190}},{"id":191,"name":"copy","slug":"copy","createdAt":"2022-07-09T16:33:43.000Z","updatedAt":"2022-07-09T16:33:43.000Z","Questions_Tags":{"questionId":53,"tagId":191}},{"id":192,"name":"clone","slug":"clone","createdAt":"2022-07-09T16:33:43.000Z","updatedAt":"2022-07-09T16:33:43.000Z","Questions_Tags":{"questionId":53,"tagId":192}}]},{"id":52,"title":"How do JavaScript closures work?","slug":"how-do-javascript-closures-work-1657384418555","postType":"QUESTION","createdAt":"2022-07-09T16:33:38.000Z","updatedAt":"2022-07-09T16:33:38.000Z","tags":[{"id":186,"name":"scope","slug":"scope","createdAt":"2022-07-09T16:33:38.000Z","updatedAt":"2022-07-09T16:33:38.000Z","Questions_Tags":{"questionId":52,"tagId":186}}]},{"id":51,"title":"\"Least Astonishment\" and the Mutable Default Argument","slug":"\"least-astonishment\"-and-the-mutable-default-argument-1657384412508","postType":"QUESTION","createdAt":"2022-07-09T16:33:32.000Z","updatedAt":"2022-07-09T16:33:32.000Z","tags":[{"id":179,"name":"language-design","slug":"language-design","createdAt":"2022-07-09T16:33:32.000Z","updatedAt":"2022-07-09T16:33:32.000Z","Questions_Tags":{"questionId":51,"tagId":179}},{"id":181,"name":"default-parameters","slug":"default-parameters","createdAt":"2022-07-09T16:33:32.000Z","updatedAt":"2022-07-09T16:33:32.000Z","Questions_Tags":{"questionId":51,"tagId":181}},{"id":182,"name":"least-astonishment","slug":"least-astonishment","createdAt":"2022-07-09T16:33:32.000Z","updatedAt":"2022-07-09T16:33:32.000Z","Questions_Tags":{"questionId":51,"tagId":182}}]}]},"answers":{"51":["\n&lt;p&gt;Actually, this is not a design flaw, and it is not because of internals or performance. It comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.&lt;/p&gt;\n&lt;p&gt;As soon as you think of it this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of &quot;member data&quot; and therefore their state may change from one call to the other - exactly as in any other object.&lt;/p&gt;\n&lt;p&gt;In any case, the effbot (Fredrik Lundh) has a very nice explanation of the reasons for this behavior in &lt;a href=&quot;https://web.archive.org/web/20200221224620id_/http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;Default Parameter Values in Python&lt;/a&gt;.\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.&lt;/p&gt;\n    ","\n&lt;p&gt;Suppose you have the following code&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;fruits = (&lt;span class=&quot;hljs-string&quot;&gt;&quot;apples&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;bananas&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;loganberries&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;food=fruits&lt;/span&gt;):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When I see the declaration of eat, the least astonishing thing is to think that if the first parameter is not given, that it will be equal to the tuple &lt;code&gt;(&quot;apples&quot;, &quot;bananas&quot;, &quot;loganberries&quot;)&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;However, suppose later on in the code, I do something like&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;some_random_function&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; fruits\n    fruits = (&lt;span class=&quot;hljs-string&quot;&gt;&quot;blueberries&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;mangos&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;then if default parameters were bound at function execution rather than function declaration, I would be astonished (in a very bad way) to discover that fruits had been changed. This would be more astonishing IMO than discovering that your &lt;code&gt;foo&lt;/code&gt; function above was mutating the list.&lt;/p&gt;\n&lt;p&gt;The real problem lies with mutable variables, and all languages have this problem to some extent. Here&apos;s a question: suppose in Java I have the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);\nMap&amp;lt;StringBuffer,Integer&amp;gt; counts = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;StringBuffer,Integer&amp;gt;();\ncounts.put(s, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\ns.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;!!!!&quot;&lt;/span&gt;);\nSystem.out.println( counts.get(s) );  &lt;span class=&quot;hljs-comment&quot;&gt;// does this work?&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, does my map use the value of the &lt;code&gt;StringBuffer&lt;/code&gt; key when it was placed into the map, or does it store the key by reference? Either way, someone is astonished; either the person who tried to get the object out of the &lt;code&gt;Map&lt;/code&gt; using a value identical to the one they put it in with, or the person who can&apos;t seem to retrieve their object even though the key they&apos;re using is literally the same object that was used to put it into the map (this is actually why Python doesn&apos;t allow its mutable built-in data types to be used as dictionary keys).&lt;/p&gt;\n&lt;p&gt;Your example is a good one of a case where Python newcomers will be surprised and bitten. But I&apos;d argue that if we &quot;fixed&quot; this, then that would only create a different situation where they&apos;d be bitten instead, and that one would be even less intuitive. Moreover, this is always the case when dealing with mutable variables; you always run into cases where someone could intuitively expect one or the opposite behavior depending on what code they&apos;re writing.&lt;/p&gt;\n&lt;p&gt;I personally like Python&apos;s current approach: default function arguments are evaluated when the function is defined and that object is always the default. I suppose they could special-case using an empty list, but that kind of special casing would cause even more astonishment, not to mention be backwards incompatible.&lt;/p&gt;\n    ","\n&lt;p&gt;The relevant part of the &lt;a href=&quot;http://docs.python.org/reference/compound_stmts.html#function-definitions&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Default parameter values are evaluated from left to right when the function definition is executed.&lt;/strong&gt; This means that the expression is evaluated once, when the function is defined, and that the same pre-computed value is used for each call. This is especially important to understand when a default parameter is a mutable object, such as a list or a dictionary: if the function modifies the object (e.g. by appending an item to a list), the default value is in effect modified. This is generally not what was intended. A way around this is to use &lt;code&gt;None&lt;/code&gt; as the default, and explicitly test for it in the body of the function, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;whats_on_the_telly&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;penguin=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; penguin &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        penguin = []\n    penguin.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;property of the zoo&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; penguin\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;I know nothing about the Python interpreter inner workings (and I&apos;m not an expert in compilers and interpreters either) so don&apos;t blame me if I propose anything unsensible or impossible.&lt;/p&gt;\n\n&lt;p&gt;Provided that python objects &lt;strong&gt;are mutable&lt;/strong&gt; I think that this should be taken into account when designing the default arguments stuff.\nWhen you instantiate a list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you expect to get a &lt;strong&gt;new&lt;/strong&gt; list referenced by &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Why should the &lt;code&gt;a=[]&lt;/code&gt; in&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;instantiate a new list on function definition and not on invocation?\nIt&apos;s just like you&apos;re asking &quot;if the user doesn&apos;t provide the argument then &lt;em&gt;instantiate&lt;/em&gt; a new list and use it as if it was produced by the caller&quot;.\nI think this is ambiguous instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=datetime.datetime.now(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;user, do you want &lt;code&gt;a&lt;/code&gt; to default to the datetime corresponding to when you&apos;re defining or executing &lt;code&gt;x&lt;/code&gt;?\nIn this case, as in the previous one, I&apos;ll keep the same behaviour as if the default argument &quot;assignment&quot; was the first instruction of the function (&lt;code&gt;datetime.now()&lt;/code&gt; called on function invocation).\nOn the other hand, if the user wanted the definition-time mapping he could write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;b = datetime.datetime.now()\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=b&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I know, I know: that&apos;s a closure. Alternatively Python might provide a keyword to force definition-time binding:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;static a=b&lt;/span&gt;):\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Well, the reason is quite simply that bindings are done when code is executed, and the function definition is executed, well... when the functions is defined.&lt;/p&gt;\n\n&lt;p&gt;Compare this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BananaBunch&lt;/span&gt;:\n    bananas = []\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addBanana&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, banana&lt;/span&gt;):\n        self.bananas.append(banana)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code suffers from the exact same unexpected happenstance. bananas is a class attribute, and hence, when you add things to it, it&apos;s added to all instances of that class. The reason is exactly the same.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s just &quot;How It Works&quot;, and making it work differently in the function case would probably be complicated, and in the class case likely impossible, or at least slow down object instantiation a lot, as you would have to keep the class code around and execute it when objects are created.&lt;/p&gt;\n\n&lt;p&gt;Yes, it is unexpected. But once the penny drops, it fits in perfectly with how Python works in general. In fact, it&apos;s a good teaching aid, and once you understand why this happens, you&apos;ll grok python much better.&lt;/p&gt;\n\n&lt;p&gt;That said it should feature prominently in any good Python tutorial. Because as you mention, everyone runs into this problem sooner or later.&lt;/p&gt;\n    ","\n&lt;h2&gt;Why don&apos;t you introspect?&lt;/h2&gt;\n\n&lt;p&gt;I&apos;m &lt;em&gt;really&lt;/em&gt; surprised no one has performed the insightful introspection offered by Python (&lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; apply) on callables. &lt;/p&gt;\n\n&lt;p&gt;Given a simple little function &lt;code&gt;func&lt;/code&gt; defined as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a = []&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;   a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When Python encounters it, the first thing it will do is compile it in order to create a &lt;code&gt;code&lt;/code&gt; object for this function. While this compilation step is done, &lt;em&gt;Python &lt;strong&gt;evaluates&lt;/strong&gt;* and then &lt;strong&gt;stores&lt;/strong&gt; the default arguments (an empty list &lt;code&gt;[]&lt;/code&gt; here) in the function object itself&lt;/em&gt;. As the top answer mentioned: the list &lt;code&gt;a&lt;/code&gt; can now be considered a &lt;em&gt;member&lt;/em&gt; of the function &lt;code&gt;func&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So, let&apos;s do some introspection, a before and after to examine how the list gets expanded &lt;strong&gt;inside&lt;/strong&gt; the function object. I&apos;m using &lt;code&gt;Python 3.x&lt;/code&gt; for this, for Python 2 the same applies (use &lt;code&gt;__defaults__&lt;/code&gt; or &lt;code&gt;func_defaults&lt;/code&gt; in Python 2; yes, two names for the same thing).&lt;/p&gt;\n\n&lt;h3&gt;Function Before Execution:&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a = []&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After Python executes this definition it will take any default parameters specified (&lt;code&gt;a = []&lt;/code&gt; here) and &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy&quot; rel=&quot;noreferrer&quot;&gt;cram them in the &lt;code&gt;__defaults__&lt;/code&gt; attribute for the function object&lt;/a&gt; (relevant section: Callables):     &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func.__defaults__\n([],)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;O.k, so an empty list as the single entry in &lt;code&gt;__defaults__&lt;/code&gt;, just as expected. &lt;/p&gt;\n\n&lt;h3&gt;Function After Execution:&lt;/h3&gt;\n\n&lt;p&gt;Let&apos;s now execute this function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, let&apos;s see those &lt;code&gt;__defaults__&lt;/code&gt; again: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func.__defaults__\n([&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Astonished?&lt;/em&gt; The value inside the object changes! Consecutive calls to the function will now simply append to that embedded &lt;code&gt;list&lt;/code&gt; object:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func(); func(); func()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;func.__defaults__\n([&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, there you have it, the reason why this &lt;em&gt;&apos;flaw&apos;&lt;/em&gt; happens, is because default arguments are part of the function object. There&apos;s nothing weird going on here, it&apos;s all just a bit surprising.&lt;/p&gt;\n\n&lt;p&gt;The common solution to combat this is to use &lt;code&gt;None&lt;/code&gt; as the default and then initialize in the function body:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# or: a = [] if a is None else a&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        a = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since the function body is executed anew each time, you always get a fresh new empty list if no argument was passed for &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;To further verify that the list in &lt;code&gt;__defaults__&lt;/code&gt; is the same as that used in the function &lt;code&gt;func&lt;/code&gt; you can just change your function to return the &lt;code&gt;id&lt;/code&gt; of the list &lt;code&gt;a&lt;/code&gt; used inside the function body. Then, compare it to the list in &lt;code&gt;__defaults__&lt;/code&gt; (position &lt;code&gt;[0]&lt;/code&gt; in &lt;code&gt;__defaults__&lt;/code&gt;) and you&apos;ll see how these are indeed refering to the same list instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a = []&lt;/span&gt;): \n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(func.__defaults__[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) == func()\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All with the power of introspection! &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; To verify that Python evaluates the default arguments during compilation of the function, try executing the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=&lt;span class=&quot;hljs-built_in&quot;&gt;input&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;Did you just see me without calling the function?&apos;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;): \n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# use raw_input in Py2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;as you&apos;ll notice, &lt;code&gt;input()&lt;/code&gt; is called before the process of building the function and binding it to the name &lt;code&gt;bar&lt;/code&gt; is made.&lt;/p&gt;\n    ","\n&lt;p&gt;I used to think that creating the objects at runtime would be the better approach.  I&apos;m less certain now, since you do lose some useful features, though it may be worth it regardless simply to prevent newbie confusion.  The disadvantages of doing so are:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. Performance&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg=something_expensive_to_compute(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;)):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If call-time evaluation is used, then the expensive function is called every time your function is used without an argument.  You&apos;d either pay an expensive price on each call, or need to manually cache the value externally, polluting your namespace and adding verbosity.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Forcing bound parameters&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A useful trick is to bind parameters of a lambda to the &lt;em&gt;current&lt;/em&gt; binding of a variable when the lambda is created.  For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;funcs = [ &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; i=i: i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This returns a list of functions that return 0,1,2,3... respectively.  If the behaviour is changed, they will instead bind &lt;code&gt;i&lt;/code&gt; to the &lt;em&gt;call-time&lt;/em&gt; value of i, so you would get a list of functions that all returned &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The only way to implement this otherwise would be to create a further closure with the i bound, ie:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;make_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: i\nfuncs = [make_func(i) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;3. Introspection&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Consider the code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;, b=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, c=[]&lt;/span&gt;):\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a,b,c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can get information about the arguments and defaults using the &lt;code&gt;inspect&lt;/code&gt; module, which &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;inspect.getargspec(foo)\n([&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, (&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, []))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This information is very useful for things like document generation, metaprogramming, decorators etc.&lt;/p&gt;\n\n&lt;p&gt;Now, suppose the behaviour of defaults could be changed so that this is the equivalent of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;_undefined = &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;()  &lt;span class=&quot;hljs-comment&quot;&gt;# sentinel value&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=_undefined, b=_undefined, c=_undefined&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; _undefined: a=&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; _undefined: b=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; _undefined: c=[]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, we&apos;ve lost the ability to introspect, and see what the default arguments &lt;em&gt;are&lt;/em&gt;.  Because the objects haven&apos;t been constructed, we can&apos;t ever get hold of them without actually calling the function.  The best we could do is to store off the source code and return that as a string.&lt;/p&gt;\n    ","\n&lt;h1&gt;5 points in defense of Python&lt;/h1&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: The behavior is simple in the following sense:\nMost people fall into this trap only once, not several times.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Python &lt;em&gt;always&lt;/em&gt; passes objects, not names.\nThe default parameter is, obviously, part of the function\nheading (not the function body). It therefore ought to be evaluated\nat module load time (and only at module load time, unless nested), not\nat function call time.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usefulness&lt;/strong&gt;: As Frederik Lundh points out in his explanation\nof &lt;a href=&quot;https://web.archive.org/web/20201112004749/http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;&quot;Default Parameter Values in Python&quot;&lt;/a&gt;, the\ncurrent behavior can be quite useful for advanced programming.\n(Use sparingly.)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sufficient documentation&lt;/strong&gt;: In the most basic Python documentation,\nthe tutorial, the issue is loudly announced as\nan &lt;strong&gt;&quot;Important warning&quot;&lt;/strong&gt; in the &lt;em&gt;first&lt;/em&gt; subsection of Section\n&lt;a href=&quot;https://docs.python.org/3/tutorial/controlflow.html#default-argument-values&quot; rel=&quot;noreferrer&quot;&gt;&quot;More on Defining Functions&quot;&lt;/a&gt;.\nThe warning even uses boldface,\nwhich is rarely applied outside of headings.\nRTFM: Read the fine manual.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Meta-learning&lt;/strong&gt;: Falling into the trap is actually a very\nhelpful moment (at least if you are a reflective learner),\nbecause you will subsequently better understand the point\n&quot;Consistency&quot; above and that will\nteach you a great deal about Python.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;This behavior is easy explained by:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;function (class etc.) declaration is executed only once, creating all default value objects&lt;/li&gt;\n&lt;li&gt;everything is passed by reference&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;So:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, b=[], c=[], d=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;):\n    a = a + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = b + [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n    c.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a, b, c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;a&lt;/code&gt; doesn&apos;t change - every assignment call creates new int object - new object is printed&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;b&lt;/code&gt; doesn&apos;t change - new array is build from default value and printed&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;c&lt;/code&gt; changes - operation is performed on same object - and it is printed&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;1)  The so-called problem of &quot;Mutable Default Argument&quot; is in general a special example demonstrating that:&lt;br&gt;\n&quot;All functions with this problem &lt;strong&gt;suffer also from similar side effect problem on the actual parameter&lt;/strong&gt;,&quot;&lt;br&gt;\nThat is against the rules of functional programming, usually undesiderable and should be fixed both together.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):                 &lt;span class=&quot;hljs-comment&quot;&gt;# the same problematic function&lt;/span&gt;\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somevar = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]           &lt;span class=&quot;hljs-comment&quot;&gt;# an example without a default parameter&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo(somevar)\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;somevar\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]                      &lt;span class=&quot;hljs-comment&quot;&gt;# usually expected [1, 2]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:  a &lt;strong&gt;copy&lt;/strong&gt;&lt;br&gt;\nAn absolutely safe solution is to &lt;strong&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;deepcopy&lt;/code&gt;&lt;/strong&gt; the input object first and then to do whatever with the copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n    a = a[:]     &lt;span class=&quot;hljs-comment&quot;&gt;# a copy&lt;/span&gt;\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a     &lt;span class=&quot;hljs-comment&quot;&gt;# or everything safe by one line: &quot;return a + [5]&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Many builtin mutable types have a copy method like &lt;code&gt;some_dict.copy()&lt;/code&gt; or &lt;code&gt;some_set.copy()&lt;/code&gt; or can be copied easy like &lt;code&gt;somelist[:]&lt;/code&gt; or &lt;code&gt;list(some_list)&lt;/code&gt;. Every object can be also copied by &lt;code&gt;copy.copy(any_object)&lt;/code&gt; or more thorough by &lt;code&gt;copy.deepcopy()&lt;/code&gt; (the latter useful if the mutable object is composed from mutable objects). Some objects are fundamentally based on side effects like &quot;file&quot; object and can not be meaningfully reproduced by copy. &lt;a href=&quot;http://effbot.org/pyfaq/how-do-i-copy-an-object-in-python.htm&quot; rel=&quot;noreferrer&quot;&gt;copying&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Example problem for &lt;a href=&quot;https://stackoverflow.com/q/13484107/448474&quot;&gt;a similar SO question&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Test&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):            &lt;span class=&quot;hljs-comment&quot;&gt;# the original problematic class&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, var1=[]&lt;/span&gt;):\n    self._var1 = var1\n\nsomevar = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]               &lt;span class=&quot;hljs-comment&quot;&gt;# an example without a default parameter&lt;/span&gt;\nt1 = Test(somevar)\nt2 = Test(somevar)\nt1._var1.append([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; somevar                  &lt;span class=&quot;hljs-comment&quot;&gt;# [1, 2, [1]] but usually expected [1, 2]&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; t2._var1                 &lt;span class=&quot;hljs-comment&quot;&gt;# [1, 2, [1]] but usually expected [1, 2]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It shouldn&apos;t be neither saved in any &lt;em&gt;public&lt;/em&gt; attribute of an instance returned by this function. (Assuming that &lt;em&gt;private&lt;/em&gt; attributes of instance should not be modified from outside of this class or subclasses by convention. i.e. &lt;code&gt;_var1&lt;/code&gt; is a private attribute )&lt;/p&gt;\n\n&lt;p&gt;Conclusion:&lt;br&gt;\nInput parameters objects shouldn&apos;t be modified in place (mutated) nor they should not be binded into an object returned by the function. (If we prefere programming without side effects which is strongly recommended. see &lt;a href=&quot;http://en.wikipedia.org/wiki/Side_effect_%28computer_science%29&quot; rel=&quot;noreferrer&quot;&gt;Wiki about &quot;side effect&quot;&lt;/a&gt; (The first two paragraphs are relevent in this context.)\n.)&lt;/p&gt;\n\n&lt;p&gt;2)&lt;br&gt;\nOnly if the side effect on the actual parameter is required but unwanted on the default parameter then the useful solution is &lt;code&gt;def ...(var1=None):&lt;/code&gt; &lt;code&gt;if var1 is None:&lt;/code&gt; &lt;code&gt;var1 = []&lt;/code&gt; &lt;a href=&quot;http://effbot.org/zone/default-values.htm#what-to-do-instead&quot; rel=&quot;noreferrer&quot;&gt;More..&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;3) In some cases is &lt;a href=&quot;http://effbot.org/zone/default-values.htm#valid-uses-for-mutable-defaults&quot; rel=&quot;noreferrer&quot;&gt;the mutable behavior of default parameters useful&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;What you&apos;re asking is why this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[], b = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;isn&apos;t internally equivalent to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, b = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    a_default = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: []\n    b_default = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;actual_func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, b=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;: a = a_default()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;: b = b_default()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; actual_func\nfunc = func()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;except for the case of explicitly calling func(None, None), which we&apos;ll ignore.&lt;/p&gt;\n\n&lt;p&gt;In other words, instead of evaluating default parameters, why not store each of them, and evaluate them when the function is called?&lt;/p&gt;\n\n&lt;p&gt;One answer is probably right there--it would effectively turn every function with default parameters into a closure.  Even if it&apos;s all hidden away in the interpreter and not a full-blown closure, the data&apos;s got to be stored somewhere.  It&apos;d be slower and use more memory.&lt;/p&gt;\n    ","\n&lt;p&gt;This actually has nothing to do with default values, other than that it often comes up as an unexpected behaviour when you write functions with mutable default values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;):\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; a\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a  = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo(a)\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo(a)\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo(a)\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo(a)\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No default values in sight in this code, but you get exactly the same problem.&lt;/p&gt;\n\n&lt;p&gt;The problem is that &lt;code&gt;foo&lt;/code&gt; is &lt;em&gt;modifying&lt;/em&gt; a mutable variable passed in from the caller, when the caller doesn&apos;t expect this. Code like this would be fine if the function was called something like &lt;code&gt;append_5&lt;/code&gt;; then the caller would be calling the function in order to modify the value they pass in, and the behaviour would be expected. But such a function would be very unlikely to take a default argument, and probably wouldn&apos;t return the list (since the caller already has a reference to that list; the one it just passed in).&lt;/p&gt;\n\n&lt;p&gt;Your original &lt;code&gt;foo&lt;/code&gt;, with a default argument, shouldn&apos;t be modifying &lt;code&gt;a&lt;/code&gt; whether it was explicitly passed in or got the default value. Your code should leave mutable arguments alone unless it is clear from the context/name/documentation that the arguments are supposed to be modified. Using mutable values passed in as arguments as local temporaries is an extremely bad idea, whether we&apos;re in Python or not and whether there are default arguments involved or not.&lt;/p&gt;\n\n&lt;p&gt;If you need to destructively manipulate a local temporary in the course of computing something, and you need to start your manipulation from an argument value, you need to make a copy.&lt;/p&gt;\n    ","\n&lt;p&gt;Already busy topic, but from what I read here, the following helped me realizing how it&apos;s working internally:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a)\n     a = a + [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a)\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar()\n&lt;span class=&quot;hljs-number&quot;&gt;4484370232&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4484524224&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar()\n&lt;span class=&quot;hljs-number&quot;&gt;4484370232&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4484524152&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar()\n&lt;span class=&quot;hljs-number&quot;&gt;4484370232&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Never change, this is &apos;class property&apos; of the function&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4484523720&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# Always a new object &lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(bar.func_defaults[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n&lt;span class=&quot;hljs-number&quot;&gt;4484370232&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Python: The Mutable Default Argument&lt;/h1&gt;\n\n&lt;p&gt;Default arguments get evaluated at the time the function is compiled into a function object. When used by the function, multiple times by that function, they are and remain the same object. &lt;/p&gt;\n\n&lt;p&gt;When they are mutable, when mutated (for example, by adding an element to it) they remain mutated on consecutive calls.&lt;/p&gt;\n\n&lt;p&gt;They stay mutated because they are the same object each time.&lt;/p&gt;\n\n&lt;h2&gt;Equivalent code:&lt;/h2&gt;\n\n&lt;p&gt;Since the list is bound to the function when the function object is compiled and instantiated, this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mutable_default_argument=[]&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# make a list the default argument&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;function that uses a list&quot;&quot;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is almost exactly equivalent to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;_a_list = [] &lt;span class=&quot;hljs-comment&quot;&gt;# create a list in the globals&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;mutable_default_argument=_a_list&lt;/span&gt;): &lt;span class=&quot;hljs-comment&quot;&gt;# make it the default argument&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;function that uses a list&quot;&quot;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; _a_list &lt;span class=&quot;hljs-comment&quot;&gt;# remove globals name binding&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Demonstration&lt;/h2&gt;\n\n&lt;p&gt;Here&apos;s a demonstration - you can verify that they are the same object each time they are referenced by &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;seeing that the list is created before the function has finished compiling to a function object,&lt;/li&gt;\n&lt;li&gt;observing that the id is the same each time the list is referenced,&lt;/li&gt;\n&lt;li&gt;observing that the list stays changed when the function that uses it is called a second time,&lt;/li&gt;\n&lt;li&gt;observing the order in which the output is printed from the source (which I conveniently numbered for you):&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;example.py&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;1. Global scope being evaluated&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;create_list&lt;/span&gt;():\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;noisily create a list for usage as a kwarg&apos;&apos;&apos;&lt;/span&gt;\n    l = []\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;3. list being created and returned, id: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(l)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;2. example_function about to be compiled to an object&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example_function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;default_kwarg1=create_list(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;appending &quot;a&quot; in default default_kwarg1&apos;&lt;/span&gt;)\n    default_kwarg1.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;list with id: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(default_kwarg1)) + \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos; - is now: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(default_kwarg1))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;4. example_function compiled: &apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(example_function))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;5. calling example_function twice!:&apos;&lt;/span&gt;)\n    example_function()\n    example_function()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and running it with &lt;code&gt;python example.py&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; Global scope being evaluated\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; example_function about to be compiled to an &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; being created &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; returned, &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;140502758808032&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4.&lt;/span&gt; example_function compiled: &amp;lt;function example_function at &lt;span class=&quot;hljs-number&quot;&gt;0x7fc9590905f0&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5.&lt;/span&gt; calling example_function twice!:\nappending &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; default default_kwarg1\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;140502758808032&lt;/span&gt; - &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\nappending &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; default default_kwarg1\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;140502758808032&lt;/span&gt; - &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; now: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Does this violate the principle of &quot;Least Astonishment&quot;?&lt;/h2&gt;\n\n&lt;p&gt;This order of execution is frequently confusing to new users of Python. If you understand the Python execution model, then it becomes quite expected. &lt;/p&gt;\n\n&lt;h2&gt;The usual instruction to new Python users:&lt;/h2&gt;\n\n&lt;p&gt;But this is why the usual instruction to new users is to create their default arguments like this instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example_function_2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;default_kwarg=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; default_kwarg &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        default_kwarg = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This uses the None singleton as a sentinel object to tell the function whether or not we&apos;ve gotten an argument other than the default. If we get no argument, then we actually want to use a new empty list, &lt;code&gt;[]&lt;/code&gt;, as the default.&lt;/p&gt;\n\n&lt;p&gt;As the &lt;a href=&quot;https://docs.python.org/tutorial/controlflow.html#default-argument-values&quot; rel=&quot;noreferrer&quot;&gt;tutorial section on control flow&lt;/a&gt; says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;If you dont want the default to be shared between subsequent calls,\n  you can write the function like this instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, L=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        L = []\n    L.append(a)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; L\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The shortest answer would probably be &quot;definition is execution&quot;, therefore the whole argument makes no strict sense. As a more contrived example, you may cite this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;a&lt;/span&gt;(): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x=a(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; x\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hopefully it&apos;s enough to show that not executing the default argument expressions at the execution time of the &lt;code&gt;def&lt;/code&gt; statement isn&apos;t easy or doesn&apos;t make sense, or both.&lt;/p&gt;\n\n&lt;p&gt;I agree it&apos;s a gotcha when you try to use default constructors, though.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s a performance optimization.  As a result of this functionality, which of these two function calls do you think is faster?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print_tuple&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;some_tuple=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; some_tuple\n\nprint_tuple()        &lt;span class=&quot;hljs-comment&quot;&gt;#1&lt;/span&gt;\nprint_tuple((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;#2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ll give you a hint.  Here&apos;s the disassembly (see &lt;a href=&quot;http://docs.python.org/library/dis.html&quot; rel=&quot;noreferrer&quot;&gt;http://docs.python.org/library/dis.html&lt;/a&gt;):&lt;/p&gt;\n\n&lt;h1&gt;&lt;code&gt;#&lt;/code&gt;1&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; LOAD_GLOBAL              &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (print_tuple)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; CALL_FUNCTION            &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; POP_TOP\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; LOAD_CONST               &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; RETURN_VALUE\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;&lt;code&gt;#&lt;/code&gt;2&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; LOAD_GLOBAL              &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (print_tuple)\n &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; LOAD_CONST               &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; ((&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;))\n &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; CALL_FUNCTION            &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; POP_TOP\n&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; LOAD_CONST               &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; RETURN_VALUE\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs ?)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;As you can see, there &lt;em&gt;is&lt;/em&gt; a performance benefit when using immutable default arguments.  This can make a difference if it&apos;s a frequently called function or the default argument takes a long time to construct.  Also, bear in mind that Python isn&apos;t C.  In C you have constants that are pretty much free.  In Python you don&apos;t have this benefit.&lt;/p&gt;\n    ","\n&lt;p&gt;This behavior is not surprising if you take the following into consideration:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;The behavior of read-only class attributes upon assignment attempts, and that&lt;/li&gt;\n&lt;li&gt;Functions are objects (explained well in the accepted answer).&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;The role of &lt;strong&gt;(2)&lt;/strong&gt; has been covered extensively in this thread. &lt;strong&gt;(1)&lt;/strong&gt; is likely the astonishment causing factor, as this behavior is not &quot;intuitive&quot; when coming from other languages.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; is described in the Python &lt;a href=&quot;http://docs.python.org/tutorial/classes.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorial on classes&lt;/a&gt;. In an attempt to assign a value to a read-only class attribute:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;...all variables found outside of the innermost scope are\nread-only (&lt;em&gt;&lt;strong&gt;an attempt to write to such a variable will simply create a\nnew local variable in the innermost scope, leaving the identically\nnamed outer variable unchanged&lt;/strong&gt;&lt;/em&gt;).&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Look back to the original example and consider the above points:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here &lt;code&gt;foo&lt;/code&gt; is an object and &lt;code&gt;a&lt;/code&gt; is an attribute of &lt;code&gt;foo&lt;/code&gt; (available at &lt;code&gt;foo.func_defs[0]&lt;/code&gt;). Since &lt;code&gt;a&lt;/code&gt; is a list, &lt;code&gt;a&lt;/code&gt; is mutable and is thus a read-write attribute of &lt;code&gt;foo&lt;/code&gt;. It is initialized to the empty list as specified by the signature when the function is instantiated, and is available for reading and writing as long as the function object exists.&lt;/p&gt;\n&lt;p&gt;Calling &lt;code&gt;foo&lt;/code&gt; without overriding a default uses that default&apos;s value from &lt;code&gt;foo.func_defs&lt;/code&gt;. In this case, &lt;code&gt;foo.func_defs[0]&lt;/code&gt; is used for &lt;code&gt;a&lt;/code&gt; within function object&apos;s code scope. Changes to &lt;code&gt;a&lt;/code&gt; change &lt;code&gt;foo.func_defs[0]&lt;/code&gt;, which is part of the &lt;code&gt;foo&lt;/code&gt; object and persists between execution of the code in &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Now, compare this to the example from the documentation on &lt;a href=&quot;http://docs.python.org/tutorial/controlflow.html#default-argument-values&quot; rel=&quot;nofollow noreferrer&quot;&gt;emulating the default argument behavior of other languages&lt;/a&gt;, such that the function signature defaults are used every time the function is executed:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, L=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; L &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        L = []\n    L.append(a)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; L\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Taking &lt;strong&gt;(1)&lt;/strong&gt; and &lt;strong&gt;(2)&lt;/strong&gt; into account, one can see why this accomplishes the desired behavior:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;When the &lt;code&gt;foo&lt;/code&gt; function object is instantiated, &lt;code&gt;foo.func_defs[0]&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;, an immutable object.&lt;/li&gt;\n&lt;li&gt;When the function is executed with defaults (with no parameter specified for &lt;code&gt;L&lt;/code&gt; in the function call), &lt;code&gt;foo.func_defs[0]&lt;/code&gt; (&lt;code&gt;None&lt;/code&gt;) is available in the local scope as &lt;code&gt;L&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Upon &lt;code&gt;L = []&lt;/code&gt;, the assignment cannot succeed at &lt;code&gt;foo.func_defs[0]&lt;/code&gt;, because that attribute is read-only.&lt;/li&gt;\n&lt;li&gt;Per &lt;strong&gt;(1)&lt;/strong&gt;, &lt;em&gt;&lt;strong&gt;a new local variable also named &lt;code&gt;L&lt;/code&gt; is created in the local scope&lt;/strong&gt;&lt;/em&gt; and used for the remainder of the function call. &lt;code&gt;foo.func_defs[0]&lt;/code&gt; thus remains unchanged for future invocations of &lt;code&gt;foo&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;A simple workaround using None&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;b, data=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    data = data &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; []\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    data.append(b)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;])\n[&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;bar(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;])\n[&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It may be true that:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Someone is using every language/library feature, and&lt;/li&gt;\n&lt;li&gt;Switching the behavior here would be ill-advised, but&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;it is entirely consistent to hold to both of the features above and still make another point:&lt;/p&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;It is a confusing feature and it is unfortunate in Python.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The other answers, or at least some of them either make points 1 and 2 but not 3, or make point 3 and downplay points 1 and 2. &lt;strong&gt;But all three are true.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It may be true that switching horses in midstream here would be asking for significant breakage, and that there could be more problems created by changing Python to intuitively handle Stefano&apos;s opening snippet. And it may be true that someone who knew Python internals well could explain a minefield of consequences. &lt;em&gt;However,&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The existing behavior is not Pythonic, and Python is successful because very little about the language violates the principle of least astonishment anywhere &lt;em&gt;near&lt;/em&gt; this badly. It is a real problem, whether or not it would be wise to uproot it. It is a design flaw. If you understand the language much better by trying to trace out the behavior, I can say that C++ does all of this and more; you learn a lot by navigating, for instance, subtle pointer errors. But this is not Pythonic: people who care about Python enough to persevere in the face of this behavior are people who are drawn to the language because Python has far fewer surprises than other language. Dabblers and the curious become Pythonistas when they are astonished at how little time it takes to get something working--not because of a design fl--I mean, hidden logic puzzle--that cuts against the intuitions of programmers who are drawn to Python because it &lt;strong&gt;Just Works&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I am going to demonstrate an alternative structure to pass a default list value to a function (it works equally well with dictionaries).  &lt;/p&gt;\n\n&lt;p&gt;As others have extensively commented, the list parameter is bound to the function when it is defined as opposed to when it is executed.  Because lists and dictionaries are mutable, any alteration to this parameter will affect other calls to this function.  As a result, subsequent calls to the function will receive this shared list which may have been altered by any other calls to the function.  Worse yet, two parameters are using this function&apos;s shared parameter at the same time oblivious to the changes made by the other.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Wrong Method (probably...)&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;list_arg=[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list_arg\n\na = foo()\na.append(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\nb = foo()\nb.append(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# The value of 6 appended to variable &apos;a&apos; is now part of the list held by &apos;b&apos;.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]  \n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Although &apos;a&apos; is expecting to receive 6 (the last element it appended to the list),&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# it actually receives the last element appended to the shared list.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# It thus receives the value 7 previously appended by &apos;b&apos;.&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.pop()             \n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can verify that they are one and the same object by using &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-number&quot;&gt;5347866528&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-number&quot;&gt;5347866528&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Per Brett Slatkin&apos;s &quot;Effective Python: 59 Specific Ways to Write Better Python&quot;, &lt;em&gt;Item 20: Use &lt;code&gt;None&lt;/code&gt; and Docstrings to specify dynamic default arguments&lt;/em&gt; (p. 48)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The convention for achieving the desired result in Python is to\n  provide a default value of &lt;code&gt;None&lt;/code&gt; and to document the actual behaviour\n  in the docstring.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This implementation ensures that each call to the function either receives the default list or else the list passed to the function.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Preferred Method&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;list_arg=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n   &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n   :param list_arg:  A list of input values. \n                     If none provided, used a list with a default value of 5.\n   &quot;&quot;&quot;&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; list_arg:\n       list_arg = [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; list_arg\n\na = foo()\na.append(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\nb = foo()\nb.append(&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]\n\nc = foo([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;])\nc.append(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c\n[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There may be legitimate use cases for the &apos;Wrong Method&apos; whereby the programmer intended the default list parameter to be shared, but this is more likely the exception than the rule.&lt;/p&gt;\n    ","\n&lt;p&gt;The solutions here are:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Use &lt;code&gt;None&lt;/code&gt; as your default value (or a nonce &lt;code&gt;object&lt;/code&gt;), and switch on that to create your values at runtime; or&lt;/li&gt;\n&lt;li&gt;Use a &lt;code&gt;lambda&lt;/code&gt; as your default parameter, and call it within a try block to get the default value (this is the sort of thing that lambda abstraction is for).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The second option is nice because users of the function can pass in a callable, which may be already existing (such as a &lt;code&gt;type&lt;/code&gt;)&lt;/p&gt;\n    ","\n&lt;p&gt;You can get round this by replacing the object (and therefore the tie with the scope):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n    a = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ugly, but it works.&lt;/p&gt;\n    ","\n&lt;p&gt;When we do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... we assign the argument &lt;code&gt;a&lt;/code&gt; to an &lt;em&gt;unnamed&lt;/em&gt; list, if the caller does not pass the value of a.&lt;/p&gt;\n\n&lt;p&gt;To make things simpler for this discussion, let&apos;s temporarily give the unnamed list a name. How about &lt;code&gt;pavlo&lt;/code&gt; ?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=pavlo&lt;/span&gt;):\n   ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At any time, if the caller doesn&apos;t tell us what &lt;code&gt;a&lt;/code&gt; is, we reuse &lt;code&gt;pavlo&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If &lt;code&gt;pavlo&lt;/code&gt; is mutable (modifiable), and &lt;code&gt;foo&lt;/code&gt; ends up modifying it, an effect we notice the next time &lt;code&gt;foo&lt;/code&gt; is called without specifying &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So this is what you see (Remember, &lt;code&gt;pavlo&lt;/code&gt; is initialized to []):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &amp;gt;&amp;gt;&amp;gt; foo()\n [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, &lt;code&gt;pavlo&lt;/code&gt; is [5].&lt;/p&gt;\n\n&lt;p&gt;Calling &lt;code&gt;foo()&lt;/code&gt; again modifies &lt;code&gt;pavlo&lt;/code&gt; again:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Specifying &lt;code&gt;a&lt;/code&gt; when calling &lt;code&gt;foo()&lt;/code&gt; ensures &lt;code&gt;pavlo&lt;/code&gt; is not touched.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ivan = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo(a=ivan)\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ivan\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, &lt;code&gt;pavlo&lt;/code&gt; is still &lt;code&gt;[5, 5]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;foo()\n[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I sometimes exploit this behavior as an alternative to the following pattern:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;singleton = &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_singleton&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; singleton\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; singleton &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        singleton = _make_singleton()\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; singleton.use_me()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &lt;code&gt;singleton&lt;/code&gt; is only used by &lt;code&gt;use_singleton&lt;/code&gt;, I like the following pattern as a replacement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# _make_singleton() is called only once when the def is executed&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;use_singleton&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;singleton=_make_singleton(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; singleton.use_me()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve used this for instantiating client classes that access external resources, and also for creating dicts or lists for memoization.&lt;/p&gt;\n\n&lt;p&gt;Since I don&apos;t think this pattern is well known, I do put a short comment in to guard against future misunderstandings.&lt;/p&gt;\n    ","\n&lt;p&gt;Every other answer explains why this is actually a nice and desired behavior, or why you shouldn&apos;t be needing this anyway. Mine is for those stubborn ones who want to exercise their right to bend the language to their will, not the other way around.&lt;/p&gt;\n&lt;p&gt;We will &quot;fix&quot; this behavior with a decorator that will copy the default value instead of reusing the same instance for each positional argument left at its default value.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; inspect\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy  &lt;span class=&quot;hljs-comment&quot;&gt;# copy would fail on deep arguments like nested dicts&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sanify&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;function&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;wrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;*a, **kw&lt;/span&gt;):\n        &lt;span class=&quot;hljs-comment&quot;&gt;# store the default values&lt;/span&gt;\n        defaults = inspect.getargspec(function).defaults &lt;span class=&quot;hljs-comment&quot;&gt;# for python2&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# construct a new argument list&lt;/span&gt;\n        new_args = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, arg &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(defaults):\n            &lt;span class=&quot;hljs-comment&quot;&gt;# allow passing positional arguments&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)):\n                new_args.append(a[i])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                &lt;span class=&quot;hljs-comment&quot;&gt;# copy the value&lt;/span&gt;\n                new_args.append(deepcopy(arg))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; function(*new_args, **kw)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; wrapper\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now let&apos;s redefine our function using this decorator:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@sanify&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[]&lt;/span&gt;):\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n\nfoo() &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;[5]&apos;&lt;/span&gt;\nfoo() &lt;span class=&quot;hljs-comment&quot;&gt;# &apos;[5]&apos; -- as desired&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is particularly neat for functions that take multiple arguments. Compare:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# the &apos;correct&apos; approach&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, b=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, c=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        a = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        b = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; c &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        c = []\n    &lt;span class=&quot;hljs-comment&quot;&gt;# finally do the actual work&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# the nasty decorator hack&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;@sanify&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a=[], b=[], c=[]&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# wow, works right out of the box!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s important to note that the above solution breaks if you try to use keyword args, like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;foo(a=[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The decorator could be adjusted to allow for that, but we leave this as an exercise for the reader ;)&lt;/p&gt;\n    ","\n&lt;p&gt;This &quot;bug&quot; gave me a lot of overtime work hours! But I&apos;m beginning to see a potential use of it (but I would have liked it to be at the execution time, still)&lt;/p&gt;\n\n&lt;p&gt;I&apos;m gonna give you what I see as a useful example.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;example&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;errors=[]&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# statements&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Something went wrong&lt;/span&gt;\n    mistake = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; mistake:\n        tryToFixIt(errors)\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Didn&apos;t work.. let&apos;s try again&lt;/span&gt;\n        tryToFixItAnotherway(errors)\n        &lt;span class=&quot;hljs-comment&quot;&gt;# This time it worked&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tryToFixIt&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;):\n    err.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Attempt to fix it&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tryToFixItAnotherway&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;err&lt;/span&gt;):\n    err.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Attempt to fix it by another way&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;):\n        errors = example()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;.join(errors)\n\nmain()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;prints the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Attempt to fix it\nAttempt to fix it by another way\nAttempt to fix it\nAttempt to fix it by another way\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;em&gt;This is not a design flaw&lt;/em&gt;. Anyone who trips over this is doing something wrong.&lt;/p&gt;\n\n&lt;p&gt;There are 3 cases I see where you might run into this problem:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;You intend to modify the argument as a side effect of the function. In this case it &lt;em&gt;never makes sense&lt;/em&gt; to have a default argument. The only exception is when you&apos;re abusing the argument list to have function attributes, e.g. &lt;code&gt;cache={}&lt;/code&gt;, and you wouldn&apos;t be expected to call the function with an actual argument at all.&lt;/li&gt;\n&lt;li&gt;You intend to leave the argument unmodified, but you accidentally &lt;em&gt;did&lt;/em&gt; modify it. That&apos;s a bug, fix it.&lt;/li&gt;\n&lt;li&gt;You intend to modify the argument for use inside the function, but didn&apos;t expect the modification to be viewable outside of the function. In that case you need to make a &lt;em&gt;copy&lt;/em&gt; of the argument, whether it was the default or not! Python is not a call-by-value language so it doesn&apos;t make the copy for you, you need to be explicit about it.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The example in the question could fall into category 1 or 3. It&apos;s odd that it both modifies the passed list and returns it; you should pick one or the other.&lt;/p&gt;\n    ","\n&lt;p&gt;Just change the function to be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;notastonishinganymore&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a = []&lt;/span&gt;): \n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;The name is just a joke :)&apos;&apos;&apos;&lt;/span&gt;\n    a = a[:]\n    a.append(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;TLDR: Define-time defaults are consistent and strictly more expressive.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Defining a function affects two scopes: the defining scope &lt;em&gt;containing&lt;/em&gt; the function, and the execution  scope &lt;em&gt;contained by&lt;/em&gt; the function. While it is pretty clear how blocks map to scopes, the question is where &lt;code&gt;def &amp;lt;name&amp;gt;(&amp;lt;args=defaults&amp;gt;):&lt;/code&gt; belongs to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;                          &lt;span class=&quot;hljs-comment&quot;&gt;# defining scope&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;parameter=default&lt;/span&gt;):  &lt;span class=&quot;hljs-comment&quot;&gt;# ???&lt;/span&gt;\n    ...                       &lt;span class=&quot;hljs-comment&quot;&gt;# execution scope&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;def name&lt;/code&gt; part &lt;strong&gt;must&lt;/strong&gt; evaluate in the defining scope - we want &lt;code&gt;name&lt;/code&gt; to be available there, after all. Evaluating the function only inside itself would make it inaccessible.&lt;/p&gt;\n\n&lt;p&gt;Since &lt;code&gt;parameter&lt;/code&gt; is a constant name, we can &quot;evaluate&quot; it at the same time as &lt;code&gt;def name&lt;/code&gt;. This also has the advantage it produces the function with a known signature as &lt;code&gt;name(parameter=...):&lt;/code&gt;, instead of a bare &lt;code&gt;name(...):&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Now, when to evaluate &lt;code&gt;default&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;Consistency already says &quot;at definition&quot;: everything else of &lt;code&gt;def &amp;lt;name&amp;gt;(&amp;lt;args=defaults&amp;gt;):&lt;/code&gt; is best evaluated at definition as well. Delaying parts of it would be the astonishing choice.&lt;/p&gt;\n\n&lt;p&gt;The two choices are not equivalent, either: If &lt;code&gt;default&lt;/code&gt; is evaluated at definition time, it &lt;em&gt;can still&lt;/em&gt; affect execution time. If &lt;code&gt;default&lt;/code&gt; is evaluated at execution time, it &lt;em&gt;cannot&lt;/em&gt; affect definition time. Choosing &quot;at definition&quot; allows expressing both cases, while choosing &quot;at execution&quot; can express only one:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;parameter=defined&lt;/span&gt;):  &lt;span class=&quot;hljs-comment&quot;&gt;# set default at definition time&lt;/span&gt;\n    ...\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;parameter=default&lt;/span&gt;):     &lt;span class=&quot;hljs-comment&quot;&gt;# delay default until execution time&lt;/span&gt;\n    parameter = default &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; parameter &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; parameter\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think the answer to this question lies in how python pass data to parameter (pass by value or by reference), not mutability or how python handle the &quot;def&quot; statement.&lt;/p&gt;\n\n&lt;p&gt;A brief introduction. First, there are two type of data types in python, one is simple elementary data type, like numbers, and another data type is objects. Second, when passing data to parameters, python pass elementary data type by value, i.e., make a local copy of the value to a local variable, but pass object by reference, i.e., pointers to the object.&lt;/p&gt;\n\n&lt;p&gt;Admitting the above two points, let&apos;s explain what happened to the python code. It&apos;s only because of passing by reference for objects, but has nothing to do with mutable/immutable, or arguably the fact that &quot;def&quot; statement is executed only once when it is defined.&lt;/p&gt;\n\n&lt;p&gt;[] is an object, so python pass the reference of [] to &lt;code&gt;a&lt;/code&gt;, i.e., &lt;code&gt;a&lt;/code&gt; is only a pointer to [] which lies in memory as an object. There is only one copy of [] with, however, many references to it. For the first foo(), the list [] is changed to &lt;a href=&quot;http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;1&lt;/a&gt; by append method. But Note that there is only one copy of the list object and this object now becomes &lt;a href=&quot;http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;1&lt;/a&gt;. When running the second foo(), what effbot webpage says (items is not evaluated any more) is wrong. &lt;code&gt;a&lt;/code&gt; is evaluated to be the list object, although now the content of the object is &lt;a href=&quot;http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;1&lt;/a&gt;. This is the effect of passing by reference! The result of foo(3) can be easily derived in the same way.&lt;/p&gt;\n\n&lt;p&gt;To further validate my answer, let&apos;s take a look at two additional codes.&lt;/p&gt;\n\n&lt;p&gt;====== No. 2 ========&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, items=&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; items &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n        items = []\n    items.append(x)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items\n\nfoo(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;#return [1]&lt;/span&gt;\nfoo(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;#return [2]&lt;/span&gt;\nfoo(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;#return [3]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; is an object, so is &lt;code&gt;None&lt;/code&gt; (the former is mutable while the latter is immutable. But the mutability has nothing to do with the question). None is somewhere in the space but we know it&apos;s there and there is only one copy of None there. So every time foo is invoked, items is evaluated (as opposed to some answer that it is only evaluated once) to be None, to be clear, the reference (or the address) of None. Then in the foo, item is changed to [], i.e., points to another object which has a different address. &lt;/p&gt;\n\n&lt;p&gt;====== No. 3 =======&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, items=[]&lt;/span&gt;):\n    items.append(x)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; items\n\nfoo(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;# returns [1]&lt;/span&gt;\nfoo(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[]) &lt;span class=&quot;hljs-comment&quot;&gt;# returns [2]&lt;/span&gt;\nfoo(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;# returns [1,3]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The invocation of foo(1) make items point to a list object [] with an address, say, 11111111. the content of the list is changed to &lt;a href=&quot;http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;1&lt;/a&gt; in the foo function in the sequel, but the address is not changed, still 11111111. Then foo(2,[]) is coming. Although the [] in foo(2,[]) has the same content as the default parameter [] when calling foo(1), their address are different! Since we provide the parameter explicitly, &lt;code&gt;items&lt;/code&gt; has to take the address of this new &lt;code&gt;[]&lt;/code&gt;, say 2222222, and return it after making some change. Now foo(3) is executed. since only &lt;code&gt;x&lt;/code&gt; is provided, items has to take its default value again. What&apos;s the default value? It is set when defining the foo function: the list object located in 11111111. So the items is evaluated to be the address 11111111 having an element 1. The list located at 2222222 also contains one element 2, but it is not pointed by items any more. Consequently, An append of 3 will make &lt;code&gt;items&lt;/code&gt; [1,3]. &lt;/p&gt;\n\n&lt;p&gt;From the above explanations, we can see that the &lt;a href=&quot;http://effbot.org/zone/default-values.htm&quot; rel=&quot;noreferrer&quot;&gt;effbot&lt;/a&gt; webpage recommended in the accepted answer failed to give a relevant answer to this question. What is more, I think a point in the effbot webpage is wrong. I think the code regarding the UI.Button is correct:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;clicked button&quot;&lt;/span&gt;, i\n    UI.Button(&lt;span class=&quot;hljs-string&quot;&gt;&quot;button %s&quot;&lt;/span&gt; % i, callback)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each button can hold a distinct callback function which will display different value of &lt;code&gt;i&lt;/code&gt;. I can provide an example to show this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x=[]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;callback&lt;/span&gt;():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i)\n    x.append(callback) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we execute &lt;code&gt;x[7]()&lt;/code&gt; we&apos;ll get 7 as expected, and &lt;code&gt;x[9]()&lt;/code&gt; will gives 9, another value of &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;\n    "],"52":["\n&lt;p&gt;A closure is a pairing of:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;A function and&lt;/li&gt;\n&lt;li&gt;A reference to that function&apos;s outer scope (lexical environment)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;A lexical environment is part of every execution context (stack frame) and is a map between identifiers (i.e. local variable names) and values.&lt;/p&gt;\n&lt;p&gt;Every function in JavaScript maintains a reference to its outer lexical environment. This reference is used to configure the execution context created when a function is invoked. This reference enables code inside the function to &quot;see&quot; variables declared outside the function, regardless of when and where the function is called.&lt;/p&gt;\n&lt;p&gt;If a function was called by a function, which in turn was called by another function, then a chain of references to outer lexical environments is created. This chain is called the scope chain.&lt;/p&gt;\n&lt;p&gt;In the following code, &lt;code&gt;inner&lt;/code&gt; forms a closure with the lexical environment of the execution context created when &lt;code&gt;foo&lt;/code&gt; is invoked, &lt;em&gt;closing over&lt;/em&gt; variable &lt;code&gt;secret&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; secret = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;trunc&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`The secret number is &lt;span class=&quot;hljs-subst&quot;&gt;${secret}&lt;/span&gt;.`&lt;/span&gt;)\n  }\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; f = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// `secret` is not directly accessible from outside `foo`&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// The only way to retrieve `secret`, is to invoke `f`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;In other words: in JavaScript, functions carry a reference to a private &quot;box of state&quot;, to which only they (and any other functions declared within the same lexical environment) have access. This box of the state is invisible to the caller of the function, delivering an excellent mechanism for data-hiding and encapsulation.&lt;/p&gt;\n&lt;p&gt;And remember: functions in JavaScript can be passed around like variables (first-class functions), meaning these pairings of functionality and state can be passed around your program: similar to how you might pass an instance of a class around in C++.&lt;/p&gt;\n&lt;p&gt;If JavaScript did not have closures, then more states would have to be passed between functions &lt;em&gt;explicitly&lt;/em&gt;, making parameter lists longer and code noisier.&lt;/p&gt;\n&lt;p&gt;So, if you want a function to always have access to a private piece of state, you can use a closure.&lt;/p&gt;\n&lt;p&gt;...and frequently we &lt;em&gt;do&lt;/em&gt; want to associate the state with a function. For example, in Java or C++, when you add a private instance variable and a method to a class, you are associating the state with functionality.&lt;/p&gt;\n&lt;p&gt;In C and most other common languages, after a function returns, all the local variables are no longer accessible because the stack-frame is destroyed. In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible after returning from it. In this way, in the code above, &lt;code&gt;secret&lt;/code&gt; remains available to the function object &lt;code&gt;inner&lt;/code&gt;, &lt;em&gt;after&lt;/em&gt; it has been returned from &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;Uses of Closures&lt;/h2&gt;\n&lt;p&gt;Closures are useful whenever you need a private state associated with a function. This is a very common scenario - and remember: JavaScript did not have a class syntax until 2015, and it still does not have a private field syntax. Closures meet this need.&lt;/p&gt;\n&lt;h3&gt;Private Instance Variables&lt;/h3&gt;\n&lt;p&gt;In the following code, the function &lt;code&gt;toString&lt;/code&gt; closes over the details of the car.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;manufacturer, model, year, color&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${manufacturer}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${model}&lt;/span&gt; (&lt;span class=&quot;hljs-subst&quot;&gt;${year}&lt;/span&gt;, &lt;span class=&quot;hljs-subst&quot;&gt;${color}&lt;/span&gt;)`&lt;/span&gt;\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; car = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Car&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Aston Martin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;V8 Vantage&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;2012&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Quantum Silver&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(car.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Functional Programming&lt;/h3&gt;\n&lt;p&gt;In the following code, the function &lt;code&gt;inner&lt;/code&gt; closes over both &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;curry&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fn&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; args = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;arg&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(args.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; === fn.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fn&lt;/span&gt;(...args)\n    args.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(arg)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; curriedAdd = &lt;span class=&quot;hljs-title function_&quot;&gt;curry&lt;/span&gt;(add)\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;curriedAdd&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)()) &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Event-Oriented Programming&lt;/h3&gt;\n&lt;p&gt;In the following code, function &lt;code&gt;onClick&lt;/code&gt; closes over variable &lt;code&gt;BACKGROUND_COLOR&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; $ = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;querySelector&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-variable constant_&quot;&gt;BACKGROUND_COLOR&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;rgba(200, 200, 242, 1)&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onClick&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;body&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt; = &lt;span class=&quot;hljs-variable constant_&quot;&gt;BACKGROUND_COLOR&lt;/span&gt;\n}\n\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, onClick)&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;Set background color&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Modularization&lt;/h3&gt;\n&lt;p&gt;In the following example, all the implementation details are hidden inside an immediately executed function expression. The functions &lt;code&gt;tick&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; close over the private state and functions they need to complete their work. Closures have enabled us to modularize and encapsulate our code.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; namespace = {};\n\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; numbers = []\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;trunc&lt;/span&gt;(n)\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;tick&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    numbers.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;random&lt;/span&gt;() * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; numbers.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(format)\n  }\n\n  n.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt; = {\n    tick,\n    toString\n  }\n}(namespace))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; counter = namespace.&lt;span class=&quot;hljs-property&quot;&gt;counter&lt;/span&gt;\ncounter.&lt;span class=&quot;hljs-title function_&quot;&gt;tick&lt;/span&gt;()\ncounter.&lt;span class=&quot;hljs-title function_&quot;&gt;tick&lt;/span&gt;()\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(counter.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;())&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Examples&lt;/h2&gt;\n&lt;h3&gt;Example 1&lt;/h3&gt;\n&lt;p&gt;This example shows that the local variables are not copied in the closure: the closure maintains a reference to the original variables &lt;em&gt;themselves&lt;/em&gt;. It is as though the stack-frame stays alive in memory even after the outer function exits.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x)\n  x = x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; inner\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;()() &lt;span class=&quot;hljs-comment&quot;&gt;// logs 43&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Example 2&lt;/h3&gt;\n&lt;p&gt;In the following code, three methods &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;increment&lt;/code&gt;, and &lt;code&gt;update&lt;/code&gt; all close over the same lexical environment.&lt;/p&gt;\n&lt;p&gt;And every time &lt;code&gt;createObject&lt;/code&gt; is called, a new execution context (stack frame) is created and a completely new variable &lt;code&gt;x&lt;/code&gt;, and a new set of functions (&lt;code&gt;log&lt;/code&gt; etc.) are created, that close over this new variable.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x) },\n    &lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { x++ },\n    &lt;span class=&quot;hljs-title function_&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) { x = value }\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-title function_&quot;&gt;createObject&lt;/span&gt;()\no.&lt;span class=&quot;hljs-title function_&quot;&gt;increment&lt;/span&gt;()\no.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 43&lt;/span&gt;\no.&lt;span class=&quot;hljs-title function_&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\no.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 5&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; p = &lt;span class=&quot;hljs-title function_&quot;&gt;createObject&lt;/span&gt;()\np.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// 42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h3&gt;Example 3&lt;/h3&gt;\n&lt;p&gt;If you are using variables declared using &lt;code&gt;var&lt;/code&gt;, be careful you understand which variable you are closing over. Variables declared using &lt;code&gt;var&lt;/code&gt; are hoisted. This is much less of a problem in modern JavaScript due to the introduction of &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;In the following code, each time around the loop, a new function &lt;code&gt;inner&lt;/code&gt; is created, which closes over &lt;code&gt;i&lt;/code&gt;. But because &lt;code&gt;var i&lt;/code&gt; is hoisted outside the loop, all of these inner functions close over the same variable, meaning that the final value of &lt;code&gt;i&lt;/code&gt; (3) is printed, three times.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n    result.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(i) } )\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; result = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;()\n&lt;span class=&quot;hljs-comment&quot;&gt;// The following will print `3`, three times...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; i++) {\n  result[i]() \n}&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;Final points:&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Whenever a function is declared in JavaScript closure is created.&lt;/li&gt;\n&lt;li&gt;Returning a &lt;code&gt;function&lt;/code&gt; from inside another function is the classic example of closure, because the state inside the outer function is implicitly available to the returned inner function, even after the outer function has completed execution.&lt;/li&gt;\n&lt;li&gt;Whenever you use &lt;code&gt;eval()&lt;/code&gt; inside a function, a closure is used. The text you &lt;code&gt;eval&lt;/code&gt; can reference local variables of the function, and in the non-strict mode, you can even create new local variables by using &lt;code&gt;eval(&apos;var foo = &apos;)&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;When you use &lt;code&gt;new Function()&lt;/code&gt; (the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot; rel=&quot;noreferrer&quot;&gt;Function constructor&lt;/a&gt;) inside a function, it does not close over its lexical environment: it closes over the global context instead. The new function cannot reference the local variables of the outer function.&lt;/li&gt;\n&lt;li&gt;A closure in JavaScript is like keeping a reference (&lt;strong&gt;NOT&lt;/strong&gt; a copy) to the scope at the point of function declaration, which in turn keeps a reference to its outer scope, and so on, all the way to the global object at the top of the scope chain.&lt;/li&gt;\n&lt;li&gt;A closure is created when a function is declared; this closure is used to configure the execution context when the function is invoked.&lt;/li&gt;\n&lt;li&gt;A new set of local variables is created every time a function is called.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Links&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Douglas Crockford&apos;s simulated &lt;a href=&quot;http://www.crockford.com/javascript/private.html&quot; rel=&quot;noreferrer&quot;&gt;private attributes and private methods&lt;/a&gt; for an object, using closures.&lt;/li&gt;\n&lt;li&gt;A great explanation of how closures can &lt;a href=&quot;https://www.codeproject.com/Articles/12231/Memory-Leakage-in-Internet-Explorer-revisited&quot; rel=&quot;noreferrer&quot;&gt;cause memory leaks in IE&lt;/a&gt; if you are not careful.&lt;/li&gt;\n&lt;li&gt;MDN documentation on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;noreferrer&quot;&gt;JavaScript Closures&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Every function in JavaScript maintains a link to its outer lexical environment. A lexical environment is a map of all the names (eg. variables, parameters) within a scope, with their values.&lt;/p&gt;\n\n&lt;p&gt;So, whenever you see the &lt;code&gt;function&lt;/code&gt; keyword, code inside that function has access to variables declared outside the function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tmp = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x + y + (++tmp)); &lt;span class=&quot;hljs-comment&quot;&gt;// will log 16&lt;/span&gt;\n  }\n\n  &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;This will log &lt;code&gt;16&lt;/code&gt; because function &lt;code&gt;bar&lt;/code&gt; closes over the parameter &lt;code&gt;x&lt;/code&gt; and the variable &lt;code&gt;tmp&lt;/code&gt;, both of which exist in the lexical environment of outer function &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Function &lt;code&gt;bar&lt;/code&gt;, together with its link with the lexical environment of function &lt;code&gt;foo&lt;/code&gt; is a closure. &lt;/p&gt;\n\n&lt;p&gt;A function doesn&apos;t have to &lt;em&gt;return&lt;/em&gt; in order to create a closure. Simply by virtue of its declaration, every function closes over its enclosing lexical environment, forming a closure.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tmp = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x + y + (++tmp)); &lt;span class=&quot;hljs-comment&quot;&gt;// will also log 16&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 16&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 17&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The above function will also log 16, because the code inside &lt;code&gt;bar&lt;/code&gt; can still refer to argument &lt;code&gt;x&lt;/code&gt; and variable &lt;code&gt;tmp&lt;/code&gt;, even though they are no longer directly in scope.&lt;/p&gt;\n\n&lt;p&gt;However, since &lt;code&gt;tmp&lt;/code&gt; is still hanging around inside &lt;code&gt;bar&lt;/code&gt;&apos;s closure, it is available to be incremented. It will be incremented each time you call &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The simplest example of a closure is this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(a); &lt;span class=&quot;hljs-comment&quot;&gt;// will output 10&lt;/span&gt;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(b); &lt;span class=&quot;hljs-comment&quot;&gt;// will output 6&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif11&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;When a JavaScript function is invoked, a new execution context &lt;code&gt;ec&lt;/code&gt; is created. Together with the function arguments and the target object, this execution context also receives a link to the lexical environment of the calling execution context, meaning the variables declared in the outer lexical environment (in the above example, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;) are available from &lt;code&gt;ec&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Every function creates a closure because every function has a link to its outer lexical environment. &lt;/p&gt;\n\n&lt;p&gt;Note that variables &lt;em&gt;themselves&lt;/em&gt; are visible from within a closure, &lt;em&gt;not&lt;/em&gt; copies.&lt;/p&gt;\n    ","\n&lt;p&gt;FOREWORD: this answer was written when the question was:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Like the old Albert said : &quot;If you can&apos;t explain it to a six-year old, you really don&apos;t understand it yourself.. Well I tried to explain JS closures to a 27 years old friend and completely failed.&lt;/p&gt;\n  \n  &lt;p&gt;Can anybody consider that I am 6 and strangely interested in that subject ?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&apos;m pretty sure I was one of the only people that attempted to take the initial question literally. Since then, the question has mutated several times, so my answer may now seem incredibly silly &amp;amp; out of place. Hopefully the general idea of the story remains fun for some.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I&apos;m a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Once upon a time:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There was a princess...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;princess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;She lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; adventures = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;princeCharming&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; unicorn = { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; },\n        dragons = [ &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; ],\n        squirrel = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But she would always have to return back to her dull world of chores and grown-ups.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And she would often tell them of her latest amazing adventure as a princess.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;        &lt;span class=&quot;hljs-attr&quot;&gt;story&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; adventures[adventures.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        }\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But all they would see is a little girl...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; littleGirl = &lt;span class=&quot;hljs-title function_&quot;&gt;princess&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...telling stories about magic and fantasy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;littleGirl.&lt;span class=&quot;hljs-title function_&quot;&gt;story&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl&apos;s imagination.&lt;/p&gt;\n\n&lt;p&gt;But we know the real truth; that the little girl with the princess inside...&lt;/p&gt;\n\n&lt;p&gt;...is really a princess with a little girl inside.&lt;/p&gt;\n    ","\n&lt;p&gt;Taking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.  &lt;/p&gt;\n\n&lt;p&gt;On  &lt;a href=&quot;http://www.howkidsdevelop.com/5-7years.html&quot; rel=&quot;noreferrer&quot;&gt;Childhood Development: 5 to 7 Years &lt;/a&gt; it says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Your child will be able to follow two-step directions. For example, if you say to your child, &quot;Go to the kitchen and get me a trash bag&quot; they will be able to remember that direction.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;We can use this example to explain closures, as follows:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The kitchen is a closure that has a local variable, called &lt;code&gt;trashBags&lt;/code&gt;.  There is a function inside the kitchen called &lt;code&gt;getTrashBag&lt;/code&gt; that gets one trash bag and returns it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;We can code this in JavaScript like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;makeKitchen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; trashBags = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// only 3 at first&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;getTrashBag&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; trashBags.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;();\n    }\n  };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; kitchen = &lt;span class=&quot;hljs-title function_&quot;&gt;makeKitchen&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(kitchen.&lt;span class=&quot;hljs-title function_&quot;&gt;getTrashBag&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns trash bag C&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(kitchen.&lt;span class=&quot;hljs-title function_&quot;&gt;getTrashBag&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns trash bag B&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(kitchen.&lt;span class=&quot;hljs-title function_&quot;&gt;getTrashBag&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// returns trash bag A&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif12&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Further points that explain why closures are interesting:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Each time &lt;code&gt;makeKitchen()&lt;/code&gt; is called, a new closure is created with its own separate &lt;code&gt;trashBags&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;trashBags&lt;/code&gt; variable is local to the inside of each kitchen and is not accessible outside, but the inner function on the &lt;code&gt;getTrashBag&lt;/code&gt; property does have access to it.  &lt;/li&gt;\n&lt;li&gt;Every function call creates a closure, but there would be no need to keep the closure around unless an inner function, which has access to the inside of the closure, can be called from outside the closure.  Returning the object with the &lt;code&gt;getTrashBag&lt;/code&gt; function does that here.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;h1&gt;The Straw Man&lt;/h1&gt;\n&lt;p&gt;I need to know how many times a button has been clicked and do something on every third click...&lt;/p&gt;\n&lt;h2&gt;Fairly Obvious Solution&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Declare counter outside event handler&apos;s scope&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button&apos;&lt;/span&gt;);\n\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Increment outside counter&lt;/span&gt;\n  counter++;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (counter === &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something every third time&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Third time&apos;s the charm!&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Reset counter&lt;/span&gt;\n    counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  }\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click Me!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif13&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Now this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations, this would be preferable as your outer application might need access to this information. But in this case, we are only changing every third click&apos;s behavior, so it is preferable to &lt;strong&gt;enclose this functionality inside the event handler&lt;/strong&gt;.&lt;/p&gt;\n&lt;h2&gt;Consider this option&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button&apos;&lt;/span&gt;);\n\nelement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// init the count to 0&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;- This function becomes the click handler&lt;/span&gt;\n    count++; &lt;span class=&quot;hljs-comment&quot;&gt;//    and will retain access to the above `count`&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (count === &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Do something every third time&lt;/span&gt;\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Third time&apos;s the charm!&quot;&lt;/span&gt;);\n\n      &lt;span class=&quot;hljs-comment&quot;&gt;//Reset counter&lt;/span&gt;\n      count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n  };\n})());&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Click Me!&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif14&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Notice a few things here.&lt;/p&gt;\n&lt;p&gt;In the above example, I am using the closure behavior of JavaScript. &lt;strong&gt;This behavior allows any function to have access to the scope in which it was created, indefinitely.&lt;/strong&gt; To practically apply this, I immediately invoke a function that returns another function, and because the function I&apos;m returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? Let&apos;s dilute it down...&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;A simple one-line closure&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//          _______________________Immediately invoked______________________&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         |                                                                |&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         |        Scope retained for use      ___Returned as the____      |&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         |       only by returned function   |    value of func     |     |&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         |             |            |        |                      |     |&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//         v             v            v        v                      v     v&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; func = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-string&quot;&gt;&apos;val&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(a); }; })();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;All variables outside the returned function are available to the returned function, but they are not directly available to the returned function object...&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// Alerts &quot;val&quot;&lt;/span&gt;\nfunc.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// Undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get it? So in our primary example, the count variable is contained within the closure and always available to the event handler, so it retains its state from click to click.&lt;/p&gt;\n&lt;p&gt;Also, this private variable state is &lt;strong&gt;fully&lt;/strong&gt; accessible, for both readings and assigning to its private scoped variables.&lt;/p&gt;\n&lt;p&gt;There you go; you&apos;re now fully encapsulating this behavior.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jondavidjohn.com/javascript-closure-explained-using-events/&quot; rel=&quot;noreferrer&quot;&gt;Full Blog Post&lt;/a&gt;&lt;/strong&gt; (including jQuery considerations)&lt;/p&gt;\n    ","\n&lt;p&gt;Closures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that &lt;em&gt;I&lt;/em&gt; learned what they do) is to imagine the situation without them:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; makePlus = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x + y; };\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; plus5 = &lt;span class=&quot;hljs-title function_&quot;&gt;makePlus&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;plus5&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif15&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;What would happen here if JavaScript &lt;em&gt;didn&apos;t&lt;/em&gt; know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x + &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, where&apos;s the definition of &lt;code&gt;x&lt;/code&gt;? We didn&apos;t define it in the current scope. The only solution is to let &lt;code&gt;plus5&lt;/code&gt; &lt;em&gt;carry&lt;/em&gt; its scope (or rather, its parent&apos;s scope) around. This way, &lt;code&gt;x&lt;/code&gt; is well-defined and it is bound to the value 5.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A closure is a link between a function and its outer lexical (ie. as-written) environment, such that the identifiers (variables, parameters, function declarations etc) defined within that environment are visible from within the function, regardless of when or from where the function is invoked.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In the terminology of the ECMAScript specification, a closure can be said to be implemented by the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-functioninitialize&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;[[Environment]]&lt;/code&gt;&lt;/a&gt; reference of every function-object, which points to the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments&quot; rel=&quot;noreferrer&quot;&gt;lexical environment&lt;/a&gt; within which the function is defined.&lt;/p&gt;\n\n&lt;p&gt;When a function is invoked via the internal &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-ecmascript-function-objects-call-thisargument-argumentslist&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;[[Call]]&lt;/code&gt;&lt;/a&gt; method, the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-functioninitialize&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;[[Environment]]&lt;/code&gt;&lt;/a&gt; reference on the function-object is copied into the &lt;em&gt;outer environment reference&lt;/em&gt; of the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-environment-records&quot; rel=&quot;noreferrer&quot;&gt;environment record&lt;/a&gt; of the newly-created &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-execution-contexts&quot; rel=&quot;noreferrer&quot;&gt;execution context&lt;/a&gt; (stack frame).&lt;/p&gt;\n\n&lt;p&gt;In the following example, function &lt;code&gt;f&lt;/code&gt; closes over the lexical environment of the global execution context:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the following example, function &lt;code&gt;h&lt;/code&gt; closes over the lexical environment of function &lt;code&gt;g&lt;/code&gt;, which, in turn, closes over the lexical environment of the global execution context.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If an inner function is returned by an outer, then the outer lexical environment will persist after the outer function has returned. This is because the outer lexical environment needs to be available if the inner function is eventually invoked.&lt;/p&gt;\n\n&lt;p&gt;In the following example, function &lt;code&gt;j&lt;/code&gt; closes over the lexical environment of function &lt;code&gt;i&lt;/code&gt;, meaning that variable &lt;code&gt;x&lt;/code&gt; is visible from inside function &lt;code&gt;j&lt;/code&gt;, long after function &lt;code&gt;i&lt;/code&gt; has completed execution:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;i&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-string&quot;&gt;&apos;mochacchino&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;j&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Printing the value of x, from within function j: &apos;&lt;/span&gt;, x)\n    }\n} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; k = &lt;span class=&quot;hljs-title function_&quot;&gt;i&lt;/span&gt;()\n&lt;span class=&quot;hljs-built_in&quot;&gt;setTimeout&lt;/span&gt;(k, &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// invoke k (which is j) after 500ms&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif16&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;In a closure, the variables in the outer lexical environment &lt;em&gt;themselves&lt;/em&gt; are available, &lt;em&gt;not&lt;/em&gt; copies.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;l&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-string&quot;&gt;&apos;vanilla&apos;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;setY&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n      y = value;\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;logY&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;The value of y is: &apos;&lt;/span&gt;, y);\n    }\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; o = &lt;span class=&quot;hljs-title function_&quot;&gt;l&lt;/span&gt;()\no.&lt;span class=&quot;hljs-title function_&quot;&gt;logY&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// The value of y is: vanilla&lt;/span&gt;\no.&lt;span class=&quot;hljs-title function_&quot;&gt;setY&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;chocolate&apos;&lt;/span&gt;)\no.&lt;span class=&quot;hljs-title function_&quot;&gt;logY&lt;/span&gt;() &lt;span class=&quot;hljs-comment&quot;&gt;// The value of y is: chocolate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif17&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The chain of lexical environments, linked between execution contexts via outer environment references, forms a &lt;em&gt;scope chain&lt;/em&gt; and defines the identifiers visible from any given function.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Please note that in an attempt to improve clarity and accuracy, this answer has been substantially changed from the original.&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;OK, 6-year-old closures fan. Do you want to hear the simplest example of closure?&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That&apos;s it. When you turn 27, look at the &lt;a href=&quot;https://stackoverflow.com/a/111200/1393791&quot;&gt;more detailed explanation&lt;/a&gt; or at the example below.&lt;/p&gt;\n\n&lt;p&gt;Here is how I can convert my plane story into the code.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; plane = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;defaultAirport&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lastAirportLeft = defaultAirport;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; car = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;driver&lt;/span&gt;: {\n      &lt;span class=&quot;hljs-attr&quot;&gt;startAccessPlaneInfo&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Last airport was &quot;&lt;/span&gt; + lastAirportLeft);\n        }, &lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;);\n      }\n    }\n  };\n  car.&lt;span class=&quot;hljs-property&quot;&gt;driver&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startAccessPlaneInfo&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;leaveTheAirport&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;airPortName&lt;/span&gt;) {\n      lastAirportLeft = airPortName;\n    }\n  }\n}(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Boryspil International Airport&quot;&lt;/span&gt;);\n\nplane.&lt;span class=&quot;hljs-title function_&quot;&gt;leaveTheAirport&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John F. Kennedy&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif18&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;A closure is not only created when you return an inner function.&lt;/strong&gt; In fact, the enclosing function &lt;em&gt;does not need to return at all&lt;/em&gt; in order for its closure to be created. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be called immediately or any time later. Therefore, the closure of the enclosing function is probably created &lt;em&gt;as soon as the enclosing function is called&lt;/em&gt; since any inner function has access to that closure whenever the inner function is called, before or after the enclosing function returns. &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;A closure does not reference a copy of the &lt;em&gt;old values&lt;/em&gt; of variables in its scope.&lt;/strong&gt; The variables themselves are part of the closure, and so the value seen when accessing one of those variables is the latest value at the time it is accessed. This is why inner functions created inside of loops can be tricky, since each one has access to the same outer variables rather than grabbing a copy of the variables at the time the function is created or called.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;The &quot;variables&quot; in a closure include any named functions&lt;/strong&gt; declared within the function. They also include arguments of the function. A closure also has access to its containing closure&apos;s variables, all the way up to the global scope.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Closures use memory, but they don&apos;t cause memory leaks&lt;/strong&gt; since JavaScript by itself cleans up its own circular structures that are not referenced. Internet&amp;nbsp;Explorer memory leaks involving closures are created when it fails to disconnect DOM attribute values that reference closures, thus maintaining references to possibly circular structures.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I wrote a blog post a while back explaining closures. Here&apos;s what I said about closures in terms of &lt;strong&gt;why&lt;/strong&gt; you&apos;d want one.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Closures are a way to let a function\n  have &lt;strong&gt;persistent, private variables&lt;/strong&gt; -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In that sense, they let a function act a bit like an object with private attributes.&lt;/p&gt;\n\n&lt;p&gt;Full post:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://sleeplessgeek.blogspot.com/2009/12/so-what-are-these-closure-thingys.html&quot; rel=&quot;noreferrer&quot;&gt;So what are these closure thingys?&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The original question had a quote:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;If you can&apos;t explain it to a six-year old, you really don&apos;t understand it yourself.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This is how I&apos;d try to explain it to an actual six-year-old:&lt;/p&gt;\n&lt;p&gt;You know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn&apos;t really own anything, right? But its parents own a house, so whenever someone asks the child &quot;Where&apos;s your home?&quot;, he/she can answer &quot;that house!&quot;, and point to the house of its parents. A &quot;Closure&quot; is the ability of the child to always (even if abroad) be able to say it has a home, even though it&apos;s really the parent&apos;s who own the house.&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;strong&gt;Closures are simple:&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;p&gt;The following simple example covers all the main points of JavaScript closures.&lt;sup&gt;*&lt;/sup&gt;\n&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;Here is a factory that produces calculators that can add and multiply:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;make_calculator&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// this calculator stores a single number n&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attr&quot;&gt;add&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n      n += a;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n;\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;multiply&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n      n *= a;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n;\n    }\n  };\n}\n\nfirst_calculator = &lt;span class=&quot;hljs-title function_&quot;&gt;make_calculator&lt;/span&gt;();\nsecond_calculator = &lt;span class=&quot;hljs-title function_&quot;&gt;make_calculator&lt;/span&gt;();\n\nfirst_calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 3&lt;/span&gt;\nsecond_calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 400&lt;/span&gt;\n\nfirst_calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;multiply&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 33&lt;/span&gt;\nsecond_calculator.&lt;span class=&quot;hljs-title function_&quot;&gt;multiply&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// returns 4000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;The key point:&lt;/strong&gt; Each call to &lt;code&gt;make_calculator&lt;/code&gt; creates a new local variable &lt;code&gt;n&lt;/code&gt;, which continues to be usable by that calculator&apos;s &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt; functions long after &lt;code&gt;make_calculator&lt;/code&gt; returns.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;If you are familiar with stack frames, these calculators seem strange: How can they keep accessing &lt;code&gt;n&lt;/code&gt; after &lt;code&gt;make_calculator&lt;/code&gt; returns?  The answer is to imagine that JavaScript doesn&apos;t use &quot;stack frames&quot;, but instead uses &quot;heap frames&quot;, which can persist after the function call that made them returns.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Inner functions like &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt;, which access variables declared in an outer function&lt;sup&gt;**&lt;/sup&gt;, are called &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;That is pretty much all there is to closures.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;sup&gt;&lt;sup&gt;*&lt;/sup&gt; For example, it covers all the points in the &quot;Closures for Dummies&quot; article given in &lt;a href=&quot;https://stackoverflow.com/a/111111/706054&quot;&gt;another answer&lt;/a&gt;, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in &lt;a href=&quot;https://stackoverflow.com/a/111200/706054&quot;&gt;the accepted answer&lt;/a&gt;, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in &lt;a href=&quot;https://stackoverflow.com/a/111114/706054&quot;&gt;this answer&lt;/a&gt; but a bit shorter and less abstract. It does not cover the point of &lt;a href=&quot;https://stackoverflow.com/a/17200991/706054&quot;&gt;this answer&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/questions/111102/how-do-javascript-closures-work/17308587?noredirect=1#comment26377355_111111&quot;&gt;this comment&lt;/a&gt;, which is that JavaScript makes it difficult to plug the &lt;em&gt;current&lt;/em&gt; value of a loop variable into your inner function: The &quot;plugging in&quot; step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function&apos;s copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the &quot;plugging in&quot; way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values. &lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;&lt;sup&gt;**&lt;/sup&gt; Any outer function, if several are nested, or even in the global context, as &lt;a href=&quot;https://stackoverflow.com/a/5099447/706054&quot;&gt;this answer&lt;/a&gt; points out clearly.&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1700514/how-do-you-explain-closure-to-a-5-year-old/1700627#1700627&quot;&gt;Can you explain closures to a 5-year-old?*&lt;/a&gt;&lt;/h2&gt;\n&lt;p&gt;I still think &lt;a href=&quot;http://code.google.com/apis/ajax/playground/?exp=maps#closure_simple&quot; rel=&quot;noreferrer&quot;&gt;Google&apos;s explanation&lt;/a&gt; works very well and is concise:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n*    When a function is defined in another function and it\n*    has access to the outer function&apos;s context even after\n*    the outer function returns.\n*\n* An important concept to learn in JavaScript.\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;someNum&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; someString = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hey!&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; content = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;content&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        content.&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = someNum + &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt; + someString;\n        content = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Internet Explorer memory leak for DOM reference&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/N0mn0.png&quot; alt=&quot;Proof that this example creates a closure even if the inner function doesn&apos;t return&quot;&gt;&lt;/p&gt;\n&lt;p&gt;&lt;sub&gt;*A C# question&lt;/sub&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together &lt;a href=&quot;http://jsfiddle.net/KMQZK/&quot; rel=&quot;noreferrer&quot;&gt;a jsFiddle&lt;/a&gt; that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.&lt;/p&gt;\n&lt;h2&gt;Closures done right:&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;CLOSURES DONE RIGHT&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; arr = [];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createClosure&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;n = &apos;&lt;/span&gt; + n;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; index++) {\n    arr[index] = &lt;span class=&quot;hljs-title function_&quot;&gt;createClosure&lt;/span&gt;(index);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(arr[index]());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In the above code &lt;code&gt;createClosure(n)&lt;/code&gt; is invoked in every iteration of the loop. Note that I named the variable &lt;code&gt;n&lt;/code&gt; to highlight that it is a &lt;strong&gt;new&lt;/strong&gt; variable created in a new function scope and is not the same variable as &lt;code&gt;index&lt;/code&gt; which is bound to the outer scope.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;This creates a new scope and &lt;code&gt;n&lt;/code&gt; is bound to that scope; this means we have 10 separate scopes, one for each iteration.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;createClosure(n)&lt;/code&gt; returns a function that returns the n within that scope.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Within each scope &lt;code&gt;n&lt;/code&gt; is bound to whatever value it had when &lt;code&gt;createClosure(n)&lt;/code&gt; was invoked so the nested function that gets returned will always return the value of &lt;code&gt;n&lt;/code&gt; that it had when &lt;code&gt;createClosure(n)&lt;/code&gt; was invoked.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Closures done wrong:&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;CLOSURES DONE WRONG&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;createClosureArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; badArr = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; index++) {\n        badArr[index] = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;n = &apos;&lt;/span&gt; + index;\n        };\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; badArr;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; badArr = &lt;span class=&quot;hljs-title function_&quot;&gt;createClosureArray&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; badArr) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(badArr[index]());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In the above code the loop was moved within the &lt;code&gt;createClosureArray()&lt;/code&gt; function and the function now just returns the completed array, which at first glance seems more intuitive.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;What might not be obvious is that since &lt;code&gt;createClosureArray()&lt;/code&gt; is only invoked once only one scope is created for this function instead of one for every iteration of the loop.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Within this function a variable named &lt;code&gt;index&lt;/code&gt; is defined. The loop runs and adds functions to the array that return &lt;code&gt;index&lt;/code&gt;. Note that &lt;code&gt;index&lt;/code&gt; is defined within the &lt;code&gt;createClosureArray&lt;/code&gt; function which only ever gets invoked one time.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Because there was only one scope within the &lt;code&gt;createClosureArray()&lt;/code&gt; function, &lt;code&gt;index&lt;/code&gt; is only bound to a value within that scope. In other words, each time the loop changes the value of &lt;code&gt;index&lt;/code&gt;, it changes it for everything that references it within that scope.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All of the functions added to the array return the SAME &lt;code&gt;index&lt;/code&gt; variable from the parent scope where it was defined instead of 10 different ones from 10 different scopes like the first example. The end result is that all 10 functions return the same variable from the same scope.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;After the loop finished and &lt;code&gt;index&lt;/code&gt; was done being modified the end value was 10, therefore every function added to the array returns the value of the single &lt;code&gt;index&lt;/code&gt; variable which is now set to 10.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Result&lt;/h2&gt;\n&lt;blockquote&gt;\n&lt;p&gt;CLOSURES DONE RIGHT&lt;br&gt;\nn = 0&lt;br&gt;\nn = 1&lt;br&gt;\nn = 2&lt;br&gt;\nn = 3&lt;br&gt;\nn = 4&lt;br&gt;\nn = 5&lt;br&gt;\nn = 6&lt;br&gt;\nn = 7&lt;br&gt;\nn = 8&lt;br&gt;\nn = 9&lt;/p&gt;\n&lt;p&gt;CLOSURES DONE WRONG&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;br&gt;\nn = 10&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Closure_(computer_science)&quot; rel=&quot;noreferrer&quot;&gt;Wikipedia on closures&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Technically, in &lt;a href=&quot;http://en.wikipedia.org/wiki/JavaScript&quot; rel=&quot;noreferrer&quot;&gt;JavaScript&lt;/a&gt;, &lt;strong&gt;every function is a closure&lt;/strong&gt;. It always has an access to variables defined in the surrounding scope.&lt;/p&gt;\n\n&lt;p&gt;Since &lt;strong&gt;scope-defining construction in JavaScript is a function&lt;/strong&gt;, not a code block like in many other languages, &lt;strong&gt;what we usually mean by &lt;em&gt;closure&lt;/em&gt; in JavaScript&lt;/strong&gt; is a &lt;strong&gt;function working with nonlocal variables defined in already executed surrounding function&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Closures are often used for creating functions with some hidden private data (but it&apos;s not always the case).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; db = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Create a hidden object, which will hold the data&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// it&apos;s inaccessible from the outside.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {};\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Make a function, which will provide some access to the data.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;key, val&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (val === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[key] } &lt;span class=&quot;hljs-comment&quot;&gt;// Get&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; data[key] = val } &lt;span class=&quot;hljs-comment&quot;&gt;// Set&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// We are calling the anonymous surrounding function,&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// returning the above inner function, which is a closure.&lt;/span&gt;\n})();\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;db&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; undefined&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;db&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// Set x to 1&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;db&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; 1&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// It&apos;s impossible to access the data object itself.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// We are able to get or set individual it.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ems&lt;/p&gt;\n\n&lt;p&gt;The example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. &lt;code&gt;mkdb&lt;/code&gt;) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don&apos;t return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.&lt;/p&gt;\n    ","\n&lt;p&gt;I put together an interactive JavaScript tutorial to explain how closures work.\n&lt;a href=&quot;http://nathansjslessons.appspot.com&quot; rel=&quot;noreferrer&quot;&gt;What&apos;s a Closure?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s one of the examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; create = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x; &lt;span class=&quot;hljs-comment&quot;&gt;// We can refer to x here!&lt;/span&gt;\n    };\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;\n};\n&lt;span class=&quot;hljs-comment&quot;&gt;// &apos;create&apos; takes one argument, creates a function&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; g = &lt;span class=&quot;hljs-title function_&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// g is a function that takes no arguments now&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-title function_&quot;&gt;g&lt;/span&gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// y is 42 here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;The children will always remember the secrets they have shared with their parents, even after their parents are\n  gone. This is what closures are for functions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;The secrets for JavaScript functions are the private variables&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parent = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// secret&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Every time you call it, local variable &quot;name&quot; is created and given name &quot;Mary&quot;. And every time the function exits the variable is lost and the name is forgotten.&lt;/p&gt;\n\n&lt;p&gt;As you may guess, because the variables are re-created every time the function is called, and nobody else will know them, there must be a secret place where they are stored. It could be called &lt;strong&gt;Chamber of Secrets&lt;/strong&gt; or &lt;strong&gt;stack&lt;/strong&gt; or &lt;strong&gt;local scope&lt;/strong&gt; but it doesn&apos;t really matter. We know they are there, somewhere, hidden in the memory.&lt;/p&gt;\n\n&lt;p&gt;But, in JavaScript there is this very special thing that functions which are created inside other functions, can also know the local variables of their parents and keep them as long as they live.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parent = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; child = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;childName&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// I can also see that &quot;name&quot; is &quot;Mary&quot;&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, as long as we are in the parent -function, it can create one or more child functions which do share the secret variables from the secret place.&lt;/p&gt;\n\n&lt;p&gt;But the sad thing is, if the child is also a private variable of its parent function, it would also die when the parent ends, and the secrets would die with them.&lt;/p&gt;\n\n&lt;p&gt;So to live, the child has to leave before it&apos;s too late&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parent = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; child = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;childName&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is &quot;&lt;/span&gt; + childName  +&lt;span class=&quot;hljs-string&quot;&gt;&quot;, child of &quot;&lt;/span&gt; + name; \n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; child; &lt;span class=&quot;hljs-comment&quot;&gt;// child leaves the parent -&amp;gt;&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; child = &lt;span class=&quot;hljs-title function_&quot;&gt;parent&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt; - and here it is outside &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And now, even though Mary is &quot;no longer running&quot;, the memory of her is not lost and her child will always remember her name and other secrets they shared during their time together.&lt;/p&gt;\n\n&lt;p&gt;So, if you call the child &quot;Alice&quot;, she will respond&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is Alice, child of Mary&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s all there is to tell.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;I do not understand why the answers are so complex here.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Here is a closure:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Yes. You probably use that many times a day.&lt;/p&gt;\n&lt;br&gt;\n&lt;blockquote&gt;\n&lt;p&gt;There is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope &lt;strong&gt;from the perspective of where the function was declared (not run)&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Now what it &lt;em&gt;allows&lt;/em&gt; you to do can be more spectacular, see other answers.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Example for the first point by dlaliberte:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be used immediately. Therefore, the closure of the enclosing function probably already exists at the time that enclosing function was called since any inner function has access to it as soon as it is called.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tmp = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    i = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;y&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(x + y + (++tmp));\n    }\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;i&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A closure is where an inner function has access to variables in its outer function. That&apos;s probably the simplest one-line explanation you can get for closures.&lt;/p&gt;\n    ","\n&lt;p&gt;I know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// makeSequencer will return a &quot;sequencer&quot; function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; makeSequencer = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// not accessible outside this function&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sequencer = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _count++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sequencer;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fnext = &lt;span class=&quot;hljs-title function_&quot;&gt;makeSequencer&lt;/span&gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; v0 = &lt;span class=&quot;hljs-title function_&quot;&gt;fnext&lt;/span&gt;();     &lt;span class=&quot;hljs-comment&quot;&gt;// v0 = 0;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; v1 = &lt;span class=&quot;hljs-title function_&quot;&gt;fnext&lt;/span&gt;();     &lt;span class=&quot;hljs-comment&quot;&gt;// v1 = 1;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; vz = fnext.&lt;span class=&quot;hljs-property&quot;&gt;_count&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// vz = undefined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You&apos;re having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.&lt;/p&gt;\n\n&lt;p&gt;Dan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sleepOver&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;howManyControllersToBring&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numberOfDansControllers = howManyControllersToBring;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;danInvitedPaul&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;numberOfPaulsControllers&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; totalControllers = numberOfDansControllers + numberOfPaulsControllers;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; totalControllers;\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; howManyControllersToBring = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; inviteDan = &lt;span class=&quot;hljs-title function_&quot;&gt;sleepOver&lt;/span&gt;(howManyControllersToBring);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// The only reason Paul was invited is because Dan was invited. &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// So we set Paul&apos;s invitation = Dan&apos;s invitation.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; danInvitedPaul = &lt;span class=&quot;hljs-title function_&quot;&gt;inviteDan&lt;/span&gt;(howManyControllersToBring);\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;There were &quot;&lt;/span&gt; + danInvitedPaul + &lt;span class=&quot;hljs-string&quot;&gt;&quot; controllers brought to the party.&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The author of &lt;em&gt;&lt;a href=&quot;http://javascript.info/tutorial/closures&quot; rel=&quot;noreferrer&quot;&gt;Closures&lt;/a&gt;&lt;/em&gt; has explained closures pretty well, explaining the reason why we need them and also explaining LexicalEnvironment which is necessary to understanding closures. &lt;br&gt;\nHere is the summary:&lt;/p&gt;\n\n&lt;p&gt;What if a variable is accessed, but it isnt local? Like here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/SLlVB.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/SLlVB.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In this case, the interpreter finds the variable in the\nouter &lt;a href=&quot;http://javascript.info/tutorial/initialization&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;LexicalEnvironment&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;\n\n&lt;p&gt;The process consists of two steps:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;First, when a function f is created, it is not created in an empty\nspace. There is a current LexicalEnvironment object. In the case\nabove, its window (a is undefined at the time of function\ncreation).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/0KBin.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/0KBin.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When a function is created, it gets a hidden property, named [[Scope]], which references the current LexicalEnvironment.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/U3yt7.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/U3yt7.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If a variable is read, but can not be found anywhere, an error is generated.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Nested functions&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Functions can be nested one inside another, forming a chain of LexicalEnvironments which can also be called a scope chain.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/2hUwr.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/2hUwr.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So, function g has access to g, a and f.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Closures&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A nested function may continue to live after the outer function has finished:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/S1mlB.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/S1mlB.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Marking up LexicalEnvironments:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/BzUNi.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/BzUNi.png&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;As we see, &lt;code&gt;this.say&lt;/code&gt; is a property in the user object, so it continues to live after User completed.&lt;/p&gt;\n\n&lt;p&gt;And if you remember, when &lt;code&gt;this.say&lt;/code&gt; is created, it (as every function) gets an internal reference &lt;code&gt;this.say.[[Scope]]&lt;/code&gt; to the current LexicalEnvironment. So, the LexicalEnvironment of the current User execution stays in memory. All variables of User also are its properties, so they are also carefully kept, not junked as usually.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The whole point is to ensure that if the inner function wants to access an outer variable in the future, it is able to do so.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To summarize:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The inner function keeps a reference to the outer\nLexicalEnvironment.&lt;/li&gt;\n&lt;li&gt;The inner function may access variables from it\nany time even if the outer function is finished.&lt;/li&gt;\n&lt;li&gt;The browser keeps the LexicalEnvironment and all its properties (variables) in memory until there is an inner function which references it.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This is called a closure.&lt;/p&gt;\n    ","\n&lt;p&gt;JavaScript functions can access their:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Arguments&lt;/li&gt;\n&lt;li&gt;Locals (that is, their local variables and local functions)&lt;/li&gt;\n&lt;li&gt;Environment, which includes:\n\n&lt;ul&gt;\n&lt;li&gt;globals, including the DOM&lt;/li&gt;\n&lt;li&gt;anything in outer functions&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;If a function accesses its environment, then the function is a closure.&lt;/p&gt;\n\n&lt;p&gt;Note that outer functions are not required, though they do offer benefits I don&apos;t discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function&apos;s local data alive.&lt;/p&gt;\n\n&lt;p&gt;Example of a closure that uses the global environment:&lt;/p&gt;\n\n&lt;p&gt;Imagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity&apos;s sake, I am referring to StackOverflow&apos;s Question Vote buttons, not the array of Answer Vote buttons.)&lt;/p&gt;\n\n&lt;p&gt;When the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isVotedUp = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isVotedDown = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;voteUp_click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isVotedUp)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isVotedDown)\n    &lt;span class=&quot;hljs-title class_&quot;&gt;SetDownVote&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;SetUpVote&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;voteDown_click&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isVotedDown)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isVotedUp)\n    &lt;span class=&quot;hljs-title class_&quot;&gt;SetUpVote&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-title class_&quot;&gt;SetDownVote&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SetUpVote&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;status&lt;/span&gt;) {\n  isVotedUp = status;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Do some CSS stuff to Vote-Up button&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SetDownVote&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;status&lt;/span&gt;) {\n  isVotedDown = status;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Do some CSS stuff to Vote-Down button&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All four of these functions are closures as they all access their environment.&lt;/p&gt;\n    ","\n&lt;p&gt;As a father of a 6-year-old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required), I think the lesson would stick best through hands-on play. If the 6-year-old is ready to understand what a closure is, then they are old enough to have a go themselves. I&apos;d suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;person&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; firstPart = &lt;span class=&quot;hljs-string&quot;&gt;&quot;There was &quot;&lt;/span&gt; + person + &lt;span class=&quot;hljs-string&quot;&gt;&quot; who swallowed &quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fly = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; creature = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a fly&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Perhaps she&apos;ll die&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(firstPart + creature + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + result);\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; spider = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; creature = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a spider&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&quot;that wiggled and jiggled and tickled inside her&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(firstPart + creature + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + result);\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bird = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; creature = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a bird&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&quot;How absurd!&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(firstPart + creature + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + result);\n    };\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cat = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; creature = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a cat&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Imagine That!&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(firstPart + creature + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt; + result);\n    };\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fly&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;spider&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;bird&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;cat&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person=&lt;span class=&quot;hljs-string&quot;&gt;&quot;an old lady&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;sing&lt;/span&gt;(person);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;INSTRUCTIONS&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;DATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can&apos;t touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to &lt;em&gt;create&lt;/em&gt; touch smell and taste using a computer. It can be made useful by a computer using code.&lt;/p&gt;\n\n&lt;p&gt;CODE: All the writing above is called &lt;em&gt;code&lt;/em&gt;. It is written in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;JAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For JavaScript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says &quot;все садятся&quot;, the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means &quot;everybody sit down&quot; - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.&lt;/p&gt;\n\n&lt;p&gt;BROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.&lt;/p&gt;\n\n&lt;p&gt;FUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and T-shirts and jeans coming out. Our JavaScript factory only processes data, it can&apos;t sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out.&lt;/p&gt;\n\n&lt;p&gt;All this data stuff sounds a bit boring, but it is really very cool; we might have a function that tells a robot what to make for dinner. Let&apos;s say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat.&lt;/p&gt;\n\n&lt;p&gt;I haven&apos;t got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could &apos;talk&apos; to the fridge, and the function could control the robot.&lt;/p&gt;\n\n&lt;p&gt;A function normally has a name, parentheses and braces. Like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cookMeal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;/*  STUFF INSIDE THE FUNCTION  */&lt;/span&gt;  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Note that &lt;code&gt;/*...*/&lt;/code&gt; and &lt;code&gt;//&lt;/code&gt; stop code being read by the browser.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;NAME: You can call a function just about whatever word you want. The example &quot;cookMeal&quot; is typical in joining two words together and giving the second one a capital letter at the beginning - but this is not necessary. It can&apos;t have a space in it, and it can&apos;t be a number on its own.&lt;/p&gt;\n\n&lt;p&gt;PARENTHESES: &quot;Parentheses&quot; or &lt;code&gt;()&lt;/code&gt; are the letter box on the JavaScript function factory&apos;s door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked &lt;em&gt;for example&lt;/em&gt; &lt;code&gt;cookMeal(you, me, yourFriend, myFriend, fridge, dinnerTime)&lt;/code&gt;, in which case you know what data you have to give it.&lt;/p&gt;\n\n&lt;p&gt;BRACES: &quot;Braces&quot; which look like this &lt;code&gt;{}&lt;/code&gt; are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can&apos;t see in.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;THE LONG CODE EXAMPLE ABOVE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Our code begins with the word &lt;em&gt;function&lt;/em&gt;, so we know that it is one! Then the name of the function &lt;em&gt;sing&lt;/em&gt; - that&apos;s my own description of what the function is about. Then parentheses &lt;em&gt;()&lt;/em&gt;. The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: &lt;code&gt;(person)&lt;/code&gt;. After this there is a brace like this &lt;code&gt;{&lt;/code&gt; . This marks the start of the function &lt;em&gt;sing()&lt;/em&gt;. It has a partner which marks the end of &lt;em&gt;sing()&lt;/em&gt; like this &lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;person&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;/* STUFF INSIDE THE FUNCTION */&lt;/span&gt;  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.&lt;/p&gt;\n\n&lt;p&gt;Now, after the function &lt;em&gt;sing()&lt;/em&gt;, near the end of the code is the line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; person=&lt;span class=&quot;hljs-string&quot;&gt;&quot;an old lady&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;VARIABLE: The letters &lt;em&gt;var&lt;/em&gt; stand for &quot;variable&quot;. A variable is like an envelope. On the outside this envelope is marked &quot;person&quot;. On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (it&apos;s called a string) that make a phrase reading &quot;an old lady&quot;. Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called &lt;em&gt;arrays&lt;/em&gt;). Because this variable is written outside of all the braces &lt;code&gt;{}&lt;/code&gt;, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a &apos;global variable&apos;.&lt;/p&gt;\n\n&lt;p&gt;GLOBAL VARIABLE: &lt;em&gt;person&lt;/em&gt; is a global variable, meaning that if you change its value from &quot;an old lady&quot; to &quot;a young man&quot;, the &lt;em&gt;person&lt;/em&gt; will keep being a young man until you decide to change it again and that any other function in the code can see that it&apos;s a young man. Press the &lt;kbd&gt;F12&lt;/kbd&gt; button or look at the Options settings to open the developer console of a browser and type &quot;person&quot; to see what this value is. Type &lt;code&gt;person=&quot;a young man&quot;&lt;/code&gt; to change it and then type &quot;person&quot; again to see that it has changed.&lt;/p&gt;\n\n&lt;p&gt;After this we have the line&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;sing&lt;/span&gt;(person);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This line is calling the function, as if it were calling a dog&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&quot;Come on &lt;em&gt;sing&lt;/em&gt;, Come and get &lt;em&gt;person&lt;/em&gt;!&quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;When the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.&lt;/p&gt;\n\n&lt;p&gt;Functions define actions  - the main function is about singing. It contains a variable called &lt;em&gt;firstPart&lt;/em&gt; which applies to the singing about the person that applies to each of the verses of the song: &quot;There was &quot; + person + &quot; who swallowed&quot;. If you type &lt;em&gt;firstPart&lt;/em&gt; into the console, you won&apos;t get an answer because the variable is locked up in a function - the browser can&apos;t see inside the tinted windows of the braces.&lt;/p&gt;\n\n&lt;p&gt;CLOSURES: The closures are the smaller functions that are inside the big &lt;em&gt;sing()&lt;/em&gt; function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can&apos;t be seen from the outside. That&apos;s why the names of the variables (&lt;em&gt;creature&lt;/em&gt; and &lt;em&gt;result&lt;/em&gt;) can be repeated in the closures but with different values. If you type these variable names in the console window, you won&apos;t get its value because it&apos;s hidden by two layers of tinted windows.&lt;/p&gt;\n\n&lt;p&gt;The closures all know what the &lt;em&gt;sing()&lt;/em&gt; function&apos;s variable called &lt;em&gt;firstPart&lt;/em&gt; is, because they can see out from their tinted windows.&lt;/p&gt;\n\n&lt;p&gt;After the closures come the lines&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fly&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;spider&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;bird&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;cat&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The sing() function will call each of these functions in the order they are given. Then the sing() function&apos;s work will be done.&lt;/p&gt;\n    ","\n&lt;p&gt;Okay, talking with a 6-year old child, I would possibly use following associations.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother&apos;s room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy&apos;s &lt;em&gt;closure&lt;/em&gt;; your brother made it up for you, and he is now into outer &lt;em&gt;scope&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Compare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.&lt;/p&gt;\n\n&lt;p&gt;For an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;playingInBrothersRoom&lt;/span&gt; (withToys) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// We closure toys which we played in the brother&apos;s room. When he come back and lock the door&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// your brother is supposed to be into the outer [[scope]] object now. Thanks god you could communicate with him.&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; closureToys = withToys || [],\n      returnToy, countIt, toy; &lt;span class=&quot;hljs-comment&quot;&gt;// Just another closure helpers, for brother&apos;s inner use.&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; brotherGivesToyBack = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;toy&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// New request. There is not yet closureToys on brother&apos;s hand yet. Give him a time.&lt;/span&gt;\n    returnToy = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toy &amp;amp;&amp;amp; closureToys.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// If we ask for a specific toy, the brother is going to search for it.&lt;/span&gt;\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( countIt = closureToys.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; countIt; countIt--) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (closureToys[countIt - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == toy) {\n          returnToy = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Take your &apos;&lt;/span&gt; + closureToys.&lt;span class=&quot;hljs-title function_&quot;&gt;splice&lt;/span&gt;(countIt - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;, little boy!&apos;&lt;/span&gt;;\n          &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n      }\n      returnToy = returnToy || &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hey, I could not find any &apos;&lt;/span&gt; + toy + &lt;span class=&quot;hljs-string&quot;&gt;&apos; here. Look for it in another room.&apos;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (closureToys.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;// Otherwise, just give back everything he has in the room.&lt;/span&gt;\n      returnToy = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Behold! &apos;&lt;/span&gt; + closureToys.&lt;span class=&quot;hljs-title function_&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;;\n      closureToys = [];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      returnToy = &lt;span class=&quot;hljs-string&quot;&gt;&apos;Hey, lil shrimp, I gave you everything!&apos;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(returnToy);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; brotherGivesToyBack;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// You are playing in the house, including the brother&apos;s room.&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; toys = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;teddybear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;car&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;jumpingrope&apos;&lt;/span&gt;],\n    askBrotherForClosuredToy = &lt;span class=&quot;hljs-title function_&quot;&gt;playingInBrothersRoom&lt;/span&gt;(toys);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// The door is locked, and the brother came from the school. You could not cheat and take it out directly.&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(askBrotherForClosuredToy.&lt;span class=&quot;hljs-property&quot;&gt;closureToys&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Undefined&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// But you could ask your brother politely, to give it back.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;askBrotherForClosuredToy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;teddybear&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Hooray, here it is, teddybear&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;askBrotherForClosuredToy&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ball&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// The brother would not be able to find it.&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;askBrotherForClosuredToy&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// The brother gives you all the rest&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;askBrotherForClosuredToy&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// Nothing left in there&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is &lt;a href=&quot;http://jsbin.com/ubakor/9/edit&quot; rel=&quot;noreferrer&quot;&gt;a jsbin&lt;/a&gt; to play around with it.&lt;/p&gt;\n    ","\n&lt;p&gt;A function in JavaScript is not just a reference to a set of instructions (as in C language), but it also includes a hidden data structure which is composed of references to all nonlocal variables it uses (captured variables). Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.&lt;/p&gt;\n\n&lt;p&gt;Closures are functions with a state. It is somewhat similar to &quot;this&quot; in the sense that &quot;this&quot; also provides state for a function but function and &quot;this&quot; are separate objects (&quot;this&quot; is just a fancy parameter, and the only way to bind it permanently to a function is to create a closure). While &quot;this&quot; and function always live separately, a function cannot be separated from its closure and the language provides no means to access captured variables.&lt;/p&gt;\n\n&lt;p&gt;Because all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, it follows that every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).&lt;/p&gt;\n\n&lt;p&gt;Also, it must be understood that local variables in JavaScript are created not on the stack frame, but on the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented, but they can still be non-null if during the current execution they became part of a closure and are still referenced by its lexically nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).&lt;/p&gt;\n\n&lt;p&gt;An example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; (initValue) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;//This variable is not destroyed when the foo function exits.&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;//It is &apos;captured&apos; by the two nested functions returned below.&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; value = initValue;\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//Note that the two returned functions are created right now.&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;//If the foo function is called again, it will return&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;//new functions referencing a different &apos;value&apos; variable.&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n       &lt;span class=&quot;hljs-attr&quot;&gt;getValue&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value; },\n       &lt;span class=&quot;hljs-attr&quot;&gt;setValue&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;newValue&lt;/span&gt;) { value = newValue; }\n   }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt; () {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//foo sets its local variable &apos;value&apos; to 5 and returns an object with&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//two functions still referencing that local variable&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Extracting functions just to show that no &apos;this&apos; is involved here&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; getValue = obj.&lt;span class=&quot;hljs-property&quot;&gt;getValue&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; setValue = obj.&lt;span class=&quot;hljs-property&quot;&gt;setValue&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//Displays 5&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setValue&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;//Displays 10&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//At this point getValue and setValue functions are destroyed&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//(in reality they are destroyed at the next iteration of the garbage collector).&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//The local variable &apos;value&apos; in the foo is no longer referenced by&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//anything and is destroyed too.&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;An answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):&lt;/p&gt;\n\n&lt;p&gt;Functions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don&apos;t go away. Instead, that parent function &quot;closes.&quot; In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;the_closure&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x; &lt;span class=&quot;hljs-comment&quot;&gt;// Here, we look back inside the_closure for the value of x&lt;/span&gt;\n  }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myFn = &lt;span class=&quot;hljs-title function_&quot;&gt;the_closure&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;myFn&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//=&amp;gt; 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another really simple way to explain it is in terms of scope:&lt;/p&gt;\n\n&lt;p&gt;Any time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.&lt;/p&gt;\n    ","\n&lt;p&gt;Perhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.&lt;/p&gt;\n\n&lt;p&gt;A closure is a function that has access to another function&apos;s scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing functions scope.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerVar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;monkey&quot;&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerVar);\n    }\n    \n    &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif19&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;ALERT: monkey&lt;/p&gt;\n\n&lt;p&gt;In the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.&lt;/p&gt;\n\n&lt;p&gt;Now consider the following:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerVar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;monkey&quot;&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; outerVar;\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; innerFunction;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; referenceToInnerFunction = &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;referenceToInnerFunction&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif20&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;ALERT: monkey&lt;/p&gt;\n\n&lt;p&gt;referenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.&lt;/p&gt;\n\n&lt;p&gt;And here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case. &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerVar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;monkey&quot;&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; outerVar;\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; innerFunction;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; referenceToInnerFunction = &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;();\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;referenceToInnerFunction&lt;/span&gt;());\n\nouterFunction = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;referenceToInnerFunction&lt;/span&gt;());&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif21&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;ALERT: monkey\nALERT: monkey&lt;/p&gt;\n\n&lt;p&gt;But how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?&lt;/p&gt;\n\n&lt;p&gt;The reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunctions scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunctions variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunctions variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.&lt;/p&gt;\n\n&lt;p&gt;//////////&lt;/p&gt;\n\n&lt;p&gt;Two other things about closures to note. First, the closure will always have access to the last values of its containing function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outerVar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;monkey&quot;&lt;/span&gt;;\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(outerVar);\n    }\n    \n    outerVar = &lt;span class=&quot;hljs-string&quot;&gt;&quot;gorilla&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;innerFunction&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;outerFunction&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif22&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;ALERT: gorilla&lt;/p&gt;\n\n&lt;p&gt;Second, when a closure is created, it retains a reference to all of its enclosing functions variables and functions; it doesnt get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d simply point them to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures&quot;&gt;Mozilla Closures page&lt;/a&gt;. It&apos;s the best, most &lt;strong&gt;concise and simple explanation&lt;/strong&gt; of closure basics and practical usage that I&apos;ve found. It is highly recommended to anyone learning JavaScript.&lt;/p&gt;\n\n&lt;p&gt;And yes, I&apos;d even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it&apos;s logical they&apos;re ready to comprehend the &lt;em&gt;concise and simple explanation&lt;/em&gt; provided in the article.&lt;/p&gt;\n    "],"53":["\n&lt;p&gt;&lt;code&gt;new_list = my_list&lt;/code&gt; doesn&apos;t actually create a second list. The assignment just copies the reference to the list, not the actual list, so both &lt;code&gt;new_list&lt;/code&gt; and &lt;code&gt;my_list&lt;/code&gt; refer to the same list after the assignment.&lt;/p&gt;\n&lt;p&gt;To actually copy the list, you have several options:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You can use the builtin &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;list.copy()&lt;/code&gt;&lt;/a&gt; method (available since Python 3.3):&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = old_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;You can slice it:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = old_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Alex_Martelli&quot; rel=&quot;nofollow noreferrer&quot;&gt;Alex Martelli&lt;/a&gt;&apos;s opinion (at least &lt;a href=&quot;https://www.youtube.com/watch?v=g7V89K8QfgQ&quot; rel=&quot;nofollow noreferrer&quot;&gt;back in 2007&lt;/a&gt;) about this is, that &lt;em&gt;it is a weird syntax and it does not make sense to use it ever&lt;/em&gt;. ;) (In his opinion, the next one is more readable).&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You can use the built in &lt;a href=&quot;https://docs.python.org/2/library/functions.html#list&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/a&gt; function:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;You can use generic &lt;a href=&quot;https://docs.python.org/2/library/copy.html#copy.copy&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;copy.copy()&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.copy(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is a little slower than &lt;code&gt;list()&lt;/code&gt; because it has to find out the datatype of &lt;code&gt;old_list&lt;/code&gt; first.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you need to copy the elements of the list as well, use generic &lt;a href=&quot;https://docs.python.org/2/library/copy.html#copy.deepcopy&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;copy.deepcopy()&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Obviously the slowest and most memory-needing method, but sometimes unavoidable. This operates recursively; it will handle any number of levels of nested lists (or other containers).&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self, val&lt;/span&gt;):\n         self.val = val\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__repr__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;f&apos;Foo(&lt;span class=&quot;hljs-subst&quot;&gt;{self.val!r}&lt;/span&gt;)&apos;&lt;/span&gt;\n\nfoo = Foo(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n\na = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, foo]\nb = a.copy()\nc = a[:]\nd = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\ne = copy.copy(a)\nf = copy.deepcopy(a)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# edit orignal list and instance &lt;/span&gt;\na.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;)\nfoo.val = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;f&apos;original: &lt;span class=&quot;hljs-subst&quot;&gt;{a}&lt;/span&gt;\\nlist.copy(): &lt;span class=&quot;hljs-subst&quot;&gt;{b}&lt;/span&gt;\\nslice: &lt;span class=&quot;hljs-subst&quot;&gt;{c}&lt;/span&gt;\\nlist(): &lt;span class=&quot;hljs-subst&quot;&gt;{d}&lt;/span&gt;\\ncopy: &lt;span class=&quot;hljs-subst&quot;&gt;{e}&lt;/span&gt;\\ndeepcopy: &lt;span class=&quot;hljs-subst&quot;&gt;{f}&lt;/span&gt;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;original: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;baz&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.copy(): [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;span class=&quot;hljs-built_in&quot;&gt;slice&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(): [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\ncopy: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)]\ndeepcopy: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;, Foo(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Felix already provided an excellent answer, but I thought I&apos;d do a speed comparison of the various methods:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;10.59 sec (105.9 µs/itn) -  &lt;a href=&quot;http://docs.python.org/library/copy.html#copy.deepcopy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;copy.deepcopy(old_list)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;10.16 sec (101.6 µs/itn) - pure Python &lt;code&gt;Copy()&lt;/code&gt; method copying classes with deepcopy&lt;/li&gt;\n&lt;li&gt;1.488 sec (14.88 µs/itn) - pure Python &lt;code&gt;Copy()&lt;/code&gt; method not copying classes (only dicts/lists/tuples)&lt;/li&gt;\n&lt;li&gt;0.325 sec (3.25 µs/itn) - &lt;code&gt;for item in old_list: new_list.append(item)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;0.217 sec (2.17 µs/itn) - &lt;code&gt;[i for i in old_list]&lt;/code&gt; (a &lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#list-comprehensions&quot; rel=&quot;noreferrer&quot;&gt;list comprehension&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;0.186 sec (1.86 µs/itn) - &lt;a href=&quot;http://docs.python.org/library/copy.html#copy.copy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;copy.copy(old_list)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;0.075 sec (0.75 µs/itn) - &lt;code&gt;list(old_list)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;0.053 sec (0.53 µs/itn) - &lt;code&gt;new_list = []; new_list.extend(old_list)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;0.039 sec (0.39 µs/itn) - &lt;code&gt;old_list[:]&lt;/code&gt; (&lt;a href=&quot;http://docs.python.org/tutorial/introduction.html#lists&quot; rel=&quot;noreferrer&quot;&gt;list slicing&lt;/a&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;So the fastest is list slicing. But be aware that &lt;code&gt;copy.copy()&lt;/code&gt;, &lt;code&gt;list[:]&lt;/code&gt; and &lt;code&gt;list(list)&lt;/code&gt;, unlike &lt;code&gt;copy.deepcopy()&lt;/code&gt; and the python version don&apos;t copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.&lt;/p&gt;\n&lt;p&gt;(Here&apos;s the script if anyone&apos;s interested or wants to raise any issues:)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;old_class&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.blah = &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;new_class&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;object&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;self&lt;/span&gt;):\n        self.blah = &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;\n\ndignore = {&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, unicode: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;): &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;obj, use_deepcopy=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    t = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t == &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Convert to a list if a tuple to&lt;/span&gt;\n            &lt;span class=&quot;hljs-comment&quot;&gt;# allow assigning to when copying&lt;/span&gt;\n            is_tuple = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            obj = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(obj)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Otherwise just do a quick slice copy&lt;/span&gt;\n            obj = obj[:]\n            is_tuple = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Copy each item recursively&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(obj)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj[x]) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dignore:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n            obj[x] = Copy(obj[x], use_deepcopy)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; is_tuple:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Convert back into a tuple again&lt;/span&gt;\n            obj = &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(obj)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; t == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Use the fast shallow dict copy() method and copy any&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# values which aren&apos;t immutable (like lists, dicts etc)&lt;/span&gt;\n        obj = obj.copy()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; obj:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(obj[k]) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dignore:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n            obj[k] = Copy(obj[k], use_deepcopy)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dignore:\n        &lt;span class=&quot;hljs-comment&quot;&gt;# Numeric or string/unicode?&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;# It&apos;s immutable, so ignore it!&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; use_deepcopy:\n        obj = deepcopy(obj)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n\n    num_times = &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;\n    L = [&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;543.4532&lt;/span&gt;,\n         [&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], (&lt;span class=&quot;hljs-string&quot;&gt;&apos;bar&apos;&lt;/span&gt;,), {&lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;blah&apos;&lt;/span&gt;},\n         old_class(), new_class()]\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        Copy(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Custom Copy:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        Copy(L, use_deepcopy=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Custom Copy Only Copying Lists/Tuples/Dicts (no classes):&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        copy.copy(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy.copy:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        copy.deepcopy(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy.deepcopy:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        L[:]\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list slicing [:]:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list(L):&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L]\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list expression(L):&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        a = []\n        a.extend(L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list extend:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        a = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L:\n            a.append(y)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list append:&apos;&lt;/span&gt;, time()-t\n\n    t = time()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(num_times):\n        a = []\n        a.extend(i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;generator expression extend:&apos;&lt;/span&gt;, time()-t\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve &lt;a href=&quot;http://mail.python.org/pipermail/python-ideas/2013-July/022368.html&quot; rel=&quot;noreferrer&quot;&gt;been told&lt;/a&gt; that Python 3.3+ &lt;a href=&quot;http://bugs.python.org/issue10516&quot; rel=&quot;noreferrer&quot;&gt;adds the &lt;code&gt;list.copy()&lt;/code&gt;&lt;/a&gt; method, which should be as fast as slicing:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;newlist = old_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h1&gt;What are the options to clone or copy a list in Python?&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In Python 3, a shallow copy can be made with:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Python 2 and 3, you can get a shallow copy with a full slice of the original:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Explanation&lt;/h2&gt;\n\n&lt;p&gt;There are two semantic ways to copy a list. A shallow copy creates a new list of the same objects, a deep copy creates a new list containing new equivalent objects.&lt;/p&gt;\n\n&lt;h2&gt;Shallow list copy&lt;/h2&gt;\n\n&lt;p&gt;A shallow copy only copies the list itself, which is a container of references to the objects in the list. If the objects contained themselves are mutable and one is changed, the change will be reflected in both lists. &lt;/p&gt;\n\n&lt;p&gt;There are different ways to do this in Python 2 and 3. The Python 2 ways will also work in Python 3.&lt;/p&gt;\n\n&lt;h3&gt;Python 2&lt;/h3&gt;\n\n&lt;p&gt;In Python 2, the idiomatic way of making a shallow copy of a list is with a complete slice of the original:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also accomplish the same thing by passing the list through the list constructor, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but using the constructor is less efficient:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: l[:]))\n&lt;span class=&quot;hljs-number&quot;&gt;0.30504298210144043&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;0.40698814392089844&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Python 3&lt;/h3&gt;\n\n&lt;p&gt;In Python 3, lists get the &lt;code&gt;list.copy&lt;/code&gt; method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a_copy = a_list.copy()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Python 3.5:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: l[:]))\n&lt;span class=&quot;hljs-number&quot;&gt;0.38448613602668047&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;0.6309100328944623&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: l.copy()))\n&lt;span class=&quot;hljs-number&quot;&gt;0.38122922903858125&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Making another pointer does &lt;em&gt;not&lt;/em&gt; make a copy&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Using new_list = my_list then modifies new_list every time my_list changes. Why is this?&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;my_list&lt;/code&gt; is just a name that points to the actual list in memory. When you say &lt;code&gt;new_list = my_list&lt;/code&gt; you&apos;re not making a copy, you&apos;re just adding another name that points at that original list in memory. We can have similar issues when we make copies of lists. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [[], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy = l[:]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy\n[[], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_copy\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The list is just an array of pointers to the contents, so a shallow copy just copies the pointers, and so you have two different lists, but they have the same contents. To make copies of the contents, you need a deep copy.&lt;/p&gt;\n\n&lt;h2&gt;Deep copies&lt;/h2&gt;\n\n&lt;p&gt;To make a &lt;a href=&quot;https://docs.python.org/library/copy.html&quot; rel=&quot;noreferrer&quot;&gt;deep copy of a list, in Python 2 or 3, use &lt;code&gt;deepcopy&lt;/code&gt; in the &lt;code&gt;copy&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\na_deep_copy = copy.deepcopy(a_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To demonstrate how this allows us to make new sub-lists:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_deep_copy = copy.deepcopy(l)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_deep_copy[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].pop()\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l_deep_copy\n[[], [], []]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;], [], []]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And so we see that the deep copied list is an entirely different list from the original. You could roll your own function - but don&apos;t. You&apos;re likely to create bugs you otherwise wouldn&apos;t have by using the standard library&apos;s deepcopy function.&lt;/p&gt;\n\n&lt;h2&gt;Don&apos;t use &lt;code&gt;eval&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;You may see this used as a way to deepcopy, but don&apos;t do it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;problematic_deep_copy = &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(a_list))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It&apos;s dangerous, particularly if you&apos;re evaluating something from a source you don&apos;t trust.&lt;/li&gt;\n&lt;li&gt;It&apos;s not reliable, if a subelement you&apos;re copying doesn&apos;t have a representation that can be eval&apos;d to reproduce an equivalent element.&lt;/li&gt;\n&lt;li&gt;It&apos;s also less performant. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;In 64 bit Python 2.7:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: copy.deepcopy(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;27.55826997756958&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(l))))\n&lt;span class=&quot;hljs-number&quot;&gt;29.04534101486206&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;on 64 bit Python 3.5:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: copy.deepcopy(l)))\n&lt;span class=&quot;hljs-number&quot;&gt;16.84255409205798&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(timeit.repeat(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;repr&lt;/span&gt;(l))))\n&lt;span class=&quot;hljs-number&quot;&gt;34.813894678023644&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Let&apos;s start from the beginning and explore this question.&lt;/p&gt;\n&lt;p&gt;So let&apos;s suppose you have two lists:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;list_1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\nlist_2 = [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And we have to copy both lists, now starting from the first list:&lt;/p&gt;\n&lt;p&gt;So first let&apos;s try by setting the variable &lt;code&gt;copy&lt;/code&gt; to our original list, &lt;code&gt;list_1&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy = list_1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if you are thinking copy copied the &lt;em&gt;list_1&lt;/em&gt;, then you are wrong. The &lt;code&gt;id&lt;/code&gt; function can show us if two variables can point to the same object. Let&apos;s try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_1))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4329485320&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4329485320&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Both variables are the exact same argument. Are you surprised?&lt;/p&gt;\n&lt;p&gt;So as we know, Python doesn&apos;t store anything in a variable, Variables are just referencing to the object and object store the value. Here object is a &lt;code&gt;list&lt;/code&gt; but we created two references to that same object by two different variable names. This means that both variables are pointing to the same object, just with different names.&lt;/p&gt;\n&lt;p&gt;When you do &lt;code&gt;copy = list_1&lt;/code&gt;, it is actually doing:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/vNGqw.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/vNGqw.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Here in the image &lt;em&gt;list_1&lt;/em&gt; and &lt;em&gt;copy&lt;/em&gt; are two variable names, but the object is same for both variable which is &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;So if you try to modify copied list then it will modify the original list too because the list is only one there, you will modify that list no matter you do from the copied list or from the original list:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(copy)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So it modified the original list:&lt;/p&gt;\n&lt;p&gt;Now let&apos;s move onto a Pythonic method for copying lists.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_1 = list_1[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This method fixes the first issue we had:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy_1))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_1))\n\n&lt;span class=&quot;hljs-number&quot;&gt;4338792136&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4338791432&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So as we can see our both list having different id and it means that both variables are pointing to different objects. So what actually going on here is:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/iitLk.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/iitLk.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Now let&apos;s try to modify the list and let&apos;s see if we still face the previous problem:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_1)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(copy_1)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, it only modified the copied list. That means it worked.&lt;/p&gt;\n&lt;p&gt;Do you think we&apos;re done? No. Let&apos;s try to copy our nested list.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_2 = list_2[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;list_2&lt;/code&gt; should reference to another object which is copy of &lt;code&gt;list_2&lt;/code&gt;. Let&apos;s check:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;((list_2)), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy_2))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We get the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4330403592&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4330403528&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we can assume both lists are pointing different object, so now let&apos;s try to modify it and let&apos;s see it is giving what we want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_2, copy_2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This gives us the output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;]] [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This may seem a little bit confusing, because the same method we previously used worked. Let&apos;s try to understand this.&lt;/p&gt;\n&lt;p&gt;When you do:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;copy_2 = list_2[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You&apos;re only copying the outer list, not the inside list. We can use the &lt;code&gt;id&lt;/code&gt; function once again to check this.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(copy_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4329485832&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4329485832&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When we do &lt;code&gt;copy_2 = list_2[:]&lt;/code&gt;, this happens:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/3hPti.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/3hPti.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;It creates the copy of list, but only outer list copy, not the nested list copy. The nested list is same for both variable, so if you try to modify the nested list then it will modify the original list too as the nested list object is same for both lists.&lt;/p&gt;\n&lt;p&gt;What is the solution? The solution is the &lt;code&gt;deepcopy&lt;/code&gt; function.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\ndeep = deepcopy(list_2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Let&apos;s check this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;((list_2)), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(deep))\n\n&lt;span class=&quot;hljs-number&quot;&gt;4322146056&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4322148040&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Both outer lists have different IDs. Let&apos;s try this on the inner nested lists.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(deep[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(list_2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The output is:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;4322145992&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4322145800&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see both IDs are different, meaning we can assume that both nested lists are pointing different object now.&lt;/p&gt;\n&lt;p&gt;This means when you do &lt;code&gt;deep = deepcopy(list_2)&lt;/code&gt; what actually happens:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/O7yoo.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/O7yoo.jpg&quot; alt=&quot;Enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Both nested lists are pointing different object and they have separate copy of nested list now.&lt;/p&gt;\n&lt;p&gt;Now let&apos;s try to modify the nested list and see if it solved the previous issue or not:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;deep[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;modify&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(list_2, deep)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It outputs:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;98&apos;&lt;/span&gt;]] [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;modify&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, it didn&apos;t modify the original nested list, it only modified the copied list.&lt;/p&gt;\n    ","\n&lt;p&gt;There are many answers already that tell you how to make a proper copy, but none of them say why your original &apos;copy&apos; failed. &lt;/p&gt;\n\n&lt;p&gt;Python doesn&apos;t store values in variables; it binds names to objects. Your original assignment took the object referred to by &lt;code&gt;my_list&lt;/code&gt; and bound it to &lt;code&gt;new_list&lt;/code&gt; as well. No matter which name you use there is still only one list, so changes made when referring to it as &lt;code&gt;my_list&lt;/code&gt; will persist when referring to it as &lt;code&gt;new_list&lt;/code&gt;. Each of the other answers to this question give you different ways of creating a new object to bind to &lt;code&gt;new_list&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;Each element of a list acts like a name, in that each element binds non-exclusively to an object. A shallow copy creates a new list whose elements bind to the same objects as before.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(my_list)  &lt;span class=&quot;hljs-comment&quot;&gt;# or my_list[:], but I prefer this syntax&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# is simply a shorter way of:&lt;/span&gt;\nnew_list = [element &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To take your list copy one step further, copy each object that your list refers to, and bind those element copies to a new list. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy  \n&lt;span class=&quot;hljs-comment&quot;&gt;# each element must have __copy__ defined for this...&lt;/span&gt;\nnew_list = [copy.copy(element) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_list]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is not yet a deep copy, because each element of a list may refer to other objects, just like the list is bound to its elements. To recursively copy every element in the list, and then each other object referred to by each element, and so on: perform a deep copy. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n&lt;span class=&quot;hljs-comment&quot;&gt;# each element must have __deepcopy__ defined for this...&lt;/span&gt;\nnew_list = copy.deepcopy(my_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://docs.python.org/3/library/copy.html&quot; rel=&quot;noreferrer&quot;&gt;the documentation&lt;/a&gt; for more information about corner cases in copying.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;thing[:]&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a[:]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a += [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;Python 3.6 Timings&lt;/h2&gt;\n&lt;p&gt;Here are the timing results using Python 3.6.8. Keep in mind these times are relative to one another, not absolute.&lt;/p&gt;\n&lt;p&gt;I stuck to only doing shallow copies, and also added some new methods that weren&apos;t possible in Python&amp;nbsp;2, such as &lt;code&gt;list.copy()&lt;/code&gt; (the Python&amp;nbsp;3 &lt;a href=&quot;https://mail.python.org/pipermail/python-ideas/2013-July/022368.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;slice equivalent&lt;/a&gt;) and two forms of &lt;a href=&quot;https://stackoverflow.com/questions/43190992/understanding-x-lst&quot;&gt;list unpacking&lt;/a&gt; (&lt;code&gt;*new_list, = list&lt;/code&gt; and &lt;code&gt;new_list = [*list]&lt;/code&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;METHOD                TIME TAKEN\nb = [*a]               &lt;span class=&quot;hljs-number&quot;&gt;2.75180600000021&lt;/span&gt;\nb = a * &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;              &lt;span class=&quot;hljs-number&quot;&gt;3.50215399999990&lt;/span&gt;\nb = a[:]               &lt;span class=&quot;hljs-number&quot;&gt;3.78278899999986&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Python 2 winner (see above)&lt;/span&gt;\nb = a.copy()           &lt;span class=&quot;hljs-number&quot;&gt;4.20556500000020&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Python 3 &quot;slice equivalent&quot; (see above)&lt;/span&gt;\nb = []; b.extend(a)    &lt;span class=&quot;hljs-number&quot;&gt;4.68069800000012&lt;/span&gt;\nb = a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(a)]        &lt;span class=&quot;hljs-number&quot;&gt;6.84498999999959&lt;/span&gt;\n*b, = a                &lt;span class=&quot;hljs-number&quot;&gt;7.54031799999984&lt;/span&gt;\nb = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)            &lt;span class=&quot;hljs-number&quot;&gt;7.75815899999997&lt;/span&gt;\nb = [i &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a]    &lt;span class=&quot;hljs-number&quot;&gt;18.4886440000000&lt;/span&gt;\nb = copy.copy(a)      &lt;span class=&quot;hljs-number&quot;&gt;18.8254879999999&lt;/span&gt;\nb = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a:\n  b.append(item)      &lt;span class=&quot;hljs-number&quot;&gt;35.4729199999997&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can see the Python 2 winner still does well, but doesn&apos;t edge out Python 3 &lt;code&gt;list.copy()&lt;/code&gt; by much, especially considering the superior readability of the latter.&lt;/p&gt;\n&lt;p&gt;The dark horse is the unpacking and repacking method (&lt;code&gt;b = [*a]&lt;/code&gt;), which is ~25% faster than raw slicing, and more than twice as fast as the other unpacking method (&lt;code&gt;*b, = a&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;b = a * 1&lt;/code&gt; also does surprisingly well.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Note that these methods do &lt;em&gt;not&lt;/em&gt; output equivalent results for any input other than lists.&lt;/strong&gt; They all work for sliceable objects, a few work for any iterable, but only &lt;code&gt;copy.copy()&lt;/code&gt; works for more general Python objects.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Here is the testing code for interested parties (&lt;a href=&quot;https://stackoverflow.com/questions/13047895/efficient-ways-to-duplicate-array-list-in-python&quot;&gt;Template from here&lt;/a&gt;):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; timeit\n\nCOUNT = &lt;span class=&quot;hljs-number&quot;&gt;50000000&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Array duplicating. Tests run&quot;&lt;/span&gt;, COUNT, &lt;span class=&quot;hljs-string&quot;&gt;&quot;times&quot;&lt;/span&gt;)\nsetup = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a = [0,1,2,3,4,5,6,7,8,9]; import copy&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = list(a)\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = list(a)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = copy.copy(a)\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = copy.copy(a)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a.copy()\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a.copy()&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a[:]\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a[:]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a[0:len(a)]\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a[0:len(a)]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*b, = a\\t\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;*b, = a&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = []; b.extend(a)\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = []; b.extend(a)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = []; for item in a: b.append(item)\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = []\\nfor item in a:  b.append(item)&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = [i for i in a]\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = [i for i in a]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = [*a]\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = [*a]&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b = a * 1\\t\\t&quot;&lt;/span&gt;, timeit.timeit(stmt=&lt;span class=&quot;hljs-string&quot;&gt;&apos;b = a * 1&apos;&lt;/span&gt;, setup=setup, number=COUNT))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Python&apos;s idiom for doing this is &lt;code&gt;newList = oldList[:]&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;All of the other contributors gave &lt;strong&gt;great&lt;/strong&gt; answers, which work when you have a single dimension (leveled) list, however of the methods mentioned so far, only &lt;code&gt;copy.deepcopy()&lt;/code&gt; works to clone/copy a list and not have it point to the nested &lt;code&gt;list&lt;/code&gt; objects when you are working with multidimensional, nested lists (list of lists). While &lt;a href=&quot;https://stackoverflow.com/users/218196/felix-kling&quot;&gt;Felix Kling&lt;/a&gt; refers to it in his answer, there is a little bit more to the issue and possibly a workaround using built-ins that might prove a faster alternative to &lt;code&gt;deepcopy&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;While &lt;code&gt;new_list = old_list[:]&lt;/code&gt;, &lt;code&gt;copy.copy(old_list)&apos;&lt;/code&gt; and for Py3k &lt;code&gt;old_list.copy()&lt;/code&gt; work for single-leveled lists, they revert to pointing at the &lt;code&gt;list&lt;/code&gt; objects nested within the &lt;code&gt;old_list&lt;/code&gt; and the &lt;code&gt;new_list&lt;/code&gt;, and changes to one of the &lt;code&gt;list&lt;/code&gt; objects are perpetuated in the other.&lt;/p&gt;\n&lt;h1&gt;Edit: New information brought to light&lt;/h1&gt;\n&lt;blockquote&gt;\n&lt;p&gt;As was pointed out by both &lt;a href=&quot;https://stackoverflow.com/users/541136/aaron-hall&quot;&gt;Aaron Hall&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/users/4014959/pm-2ring&quot;&gt;PM 2Ring&lt;/a&gt; &lt;strong&gt;using &lt;code&gt;eval()&lt;/code&gt; is not only a bad idea, it is also much slower than &lt;code&gt;copy.deepcopy()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This means that for multidimensional lists, the only option is &lt;code&gt;copy.deepcopy()&lt;/code&gt;. With that being said, it really isn&apos;t an option as the performance goes way south when you try to use it on a moderately sized multidimensional array.  I tried to &lt;code&gt;timeit&lt;/code&gt; using a 42x42 array, not unheard of or even that large for bioinformatics applications, and I gave up on waiting for a response and just started typing my edit to this post.&lt;/p&gt;\n&lt;p&gt;It would seem that the only real option then is to initialize multiple lists and work on them independently. If anyone has any other suggestions, for how to handle multidimensional list copying, it would be appreciated.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;As others have stated, there  &lt;em&gt;&lt;strong&gt;are significant&lt;/strong&gt;&lt;/em&gt; performance issues using the &lt;code&gt;copy&lt;/code&gt; module and &lt;code&gt;copy.deepcopy&lt;/code&gt; &lt;em&gt;&lt;strong&gt;for multidimensional lists&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It surprises me that this hasn&apos;t been mentioned yet, so for the sake of completeness...&lt;/p&gt;\n\n&lt;p&gt;You can perform list unpacking with the &quot;splat operator&quot;: &lt;code&gt;*&lt;/code&gt;, which will also copy elements of your list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;old_list = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\nnew_list = [*old_list]\n\nnew_list.append(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)\nold_list == [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nnew_list == [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The obvious downside to this method is that it is only available in Python 3.5+.&lt;/p&gt;\n\n&lt;p&gt;Timing wise though, this appears to perform better than other common methods.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [random.random() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)]\n\n%timeit a = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x)\n%timeit a = x.copy()\n%timeit a = x[:]\n\n%timeit a = [*x]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.47 µs ± 38.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.47 µs ± 54.6 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.39 µs ± 58.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#: 2.22 µs ± 43.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = my_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;new_list = my_list&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Try to understand this. Let&apos;s say that &lt;em&gt;my_list&lt;/em&gt; is in the heap memory at location X, i.e., &lt;em&gt;my_list&lt;/em&gt; is pointing to the X. Now by assigning &lt;code&gt;new_list = my_list&lt;/code&gt; you&apos;re letting &lt;em&gt;new_list&lt;/em&gt; point to the X. This is known as a &lt;em&gt;shallow copy&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Now if you assign &lt;code&gt;new_list = my_list[:]&lt;/code&gt;, you&apos;re simply copying each object of &lt;em&gt;my_list&lt;/em&gt; to &lt;em&gt;new_list&lt;/em&gt;. This is known as a &lt;em&gt;deep copy&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;The &lt;em&gt;other&lt;/em&gt; ways you can do this are:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(old_list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;A very simple approach independent of python version was missing in already-given answers which you can use most of the time (at least I do):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = my_list * &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;hljs-comment&quot;&gt;# Solution 1 when you are not using nested lists&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, &lt;em&gt;if&lt;/em&gt; &lt;em&gt;my_list&lt;/em&gt; contains other containers (for example, nested lists) you must use &lt;em&gt;deepcopy&lt;/em&gt; as others suggested in the answers above from the copy library. For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(my_list)   &lt;span class=&quot;hljs-comment&quot;&gt;# Solution 2 when you are using nested lists&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;.&lt;strong&gt;Bonus&lt;/strong&gt;: If you don&apos;t want to copy elements use (AKA shallow copy):&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;new_list = my_list[:]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Let&apos;s understand difference between solution #1 and solution #2&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a,b\n([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a,b\n([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As you can see, solution #1 worked perfectly when we were not using the nested lists. Let&apos;s check what will happen when we apply solution #1 to nested lists.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(i,i+&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = deepcopy(a)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (a, b, c): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;99&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (a, b, c): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; i\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;]]\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;]]   &lt;span class=&quot;hljs-comment&quot;&gt;# Solution #1 didn&apos;t work in nested list&lt;/span&gt;\n[[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]]       &lt;span class=&quot;hljs-comment&quot;&gt;# Solution #2 - DeepCopy worked in nested list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I wanted to post something a bit different than some of the other answers. Even though this is most likely not the most understandable, or fastest option, it provides a bit of an inside view of how deep copy works, as well as being another alternative option for deep copying. It doesn&apos;t really matter if my function has bugs, since the point of this is to show a way to copy objects like the question answers, but also to use this as a point to explain how deepcopy works at its core.&lt;/p&gt;\n&lt;p&gt;At the core of any deep copy function is way to make a shallow copy. How? Simple. Any deep copy function only duplicates the containers of immutable objects. When you deepcopy a nested list, you are only duplicating the outer lists, not the mutable objects inside of the lists. You are only duplicating the containers. The same works for classes, too. When you deepcopy a class, you deepcopy all of its mutable attributes. So, how? How come you only have to copy the containers, like lists, dicts, tuples, iters, classes, and class instances?&lt;/p&gt;\n&lt;p&gt;It&apos;s simple. A mutable object can&apos;t really be duplicated. It can never be changed, so it is only a single value. That means you never have to duplicate strings, numbers, bools, or any of those. But how would you duplicate the containers? Simple. You make just initialize a new container with all of the values. Deepcopy relies on recursion. It duplicates all the containers, even ones with containers inside of them, until no containers are left. A container is an immutable object.&lt;/p&gt;\n&lt;p&gt;Once you know that, completely duplicating an object without any references is pretty easy. Here&apos;s a function for deepcopying basic data-types (wouldn&apos;t work for custom classes but you could always add that)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepcopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n  immutables = (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;)\n  mutables = (&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, immutables):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, mutables):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;(deepcopy(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [deepcopy(y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;):\n      values = [deepcopy(y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x.values())]\n      keys = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(x.keys())\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(keys, values))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Python&apos;s own built-in deepcopy is based around that example. The only difference is it supports other types, and also supports user-classes by duplicating the attributes into a new duplicate class, and also blocks infinite-recursion with a reference to an object it&apos;s already seen using a memo list or dictionary. And that&apos;s really it for making deep copies. At its core, making a deep copy is just making shallow copies. I hope this answer adds something to the question.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;EXAMPLES&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Say you have this list: &lt;code&gt;[1, 2, 3]&lt;/code&gt;. The immutable numbers cannot be duplicated, but the other layer can. You can duplicate it using a list comprehension: &lt;code&gt;[x for x in [1, 2, 3]]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;Now, imagine you have this list: &lt;code&gt;[[1, 2], [3, 4], [5, 6]]&lt;/code&gt;. This time, you want to make a function, which uses recursion to deep copy all layers of the list. Instead of the previous list comprehension:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It uses a new one for lists:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[deepcopy_list(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And &lt;strong&gt;deepcopy_list&lt;/strong&gt; looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;deepcopy_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [deepcopy_list(y) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then now you have a function which can deepcopy any list of &lt;strong&gt;strs, bools, floast, ints&lt;/strong&gt; and even &lt;strong&gt;lists&lt;/strong&gt; to infinitely many layers using recursion. And there you have it, deepcopying.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: Deepcopy uses recursion to duplicate objects, and merely returns the same immutable objects as before, as immutable objects cannot be duplicated. However, it deepcopies the most inner layers of mutable objects until it reaches the outermost mutable layer of an object.&lt;/p&gt;\n    ","\n&lt;p&gt;Note that there are some cases where if you have defined your own custom class and you want to keep the attributes then you should use &lt;code&gt;copy.copy()&lt;/code&gt; or &lt;code&gt;copy.deepcopy()&lt;/code&gt; rather than the alternatives, for example in Python 3:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyList&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\nlst = MyList([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n\nlst.name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;custom list&apos;&lt;/span&gt;\n\nd = {\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;original&apos;&lt;/span&gt;: lst,\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;slicecopy&apos;&lt;/span&gt; : lst[:],\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;lstcopy&apos;&lt;/span&gt; : lst.copy(),\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;copycopy&apos;&lt;/span&gt;: copy.copy(lst),\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;deepcopy&apos;&lt;/span&gt;: copy.deepcopy(lst)\n}\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;lst: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(k), end=&lt;span class=&quot;hljs-string&quot;&gt;&apos;, &apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        name = v.name\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; AttributeError:\n        name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;NA&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;name: {}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(name))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Outputs:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;lst: original, name: custom &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\nlst: slicecopy, name: NA\nlst: lstcopy, name: NA\nlst: copycopy, name: custom &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\nlst: deepcopy, name: custom &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Remember that in Python when you do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    list1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;apples&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;bananas&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;pineapples&apos;&lt;/span&gt;]\n    list2 = list1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;List2 isn&apos;t storing the actual list, but a reference to list1. So when you do anything to list1, list2 changes as well. use the copy module (not default, download on pip) to make an original copy of the list(&lt;code&gt;copy.copy()&lt;/code&gt; for simple lists, &lt;code&gt;copy.deepcopy()&lt;/code&gt; for nested ones). This makes a copy that doesn&apos;t change with the first list.&lt;/p&gt;\n    ","\n&lt;p&gt;A slight practical perspective to look into memory through id and gc. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;c = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c)\n(&lt;span class=&quot;hljs-number&quot;&gt;4424020872&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424020872&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4423979272&lt;/span&gt;) \n     |           |\n      -----------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# all referring to same &apos;hell&apos;&lt;/span&gt;\n     |           |           |\n      -----------------------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4422785208&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4422785208&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4422785208&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# all referring to same &apos;h&apos;&lt;/span&gt;\n     |           |           |\n      -----------------------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] += &lt;span class=&quot;hljs-string&quot;&gt;&apos;o&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a,b,c\n([&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;])  &lt;span class=&quot;hljs-comment&quot;&gt;# b changed too&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4424018384&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018384&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# augmented assignment changed a[0],b[0]&lt;/span&gt;\n     |           |\n      -----------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(b[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;(c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n(&lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4424018328&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# the same hell&lt;/span&gt;\n     |           |           |\n      -----------------------\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; gc\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;gc.get_referrers(a[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) \n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;]]  &lt;span class=&quot;hljs-comment&quot;&gt;# one copy belong to a,b, the another for c&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;gc.get_referrers((&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;))\n[[&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;word&apos;&lt;/span&gt;], (&lt;span class=&quot;hljs-string&quot;&gt;&apos;hell&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;)] &lt;span class=&quot;hljs-comment&quot;&gt;# (&apos;hello&apos;, None) &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is another way of copying a list that was not listed until now: adding an empty list: &lt;code&gt;l2 = l + []&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;I tested it with Python 3.8:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\nl2 = l + []\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l,l2)\nl[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(l,l2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is not the best answer, but it works.&lt;/p&gt;\n    ","\n&lt;p&gt;The deepcopy option is the only method that works for me:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]   ]\nb = deepcopy(a)\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Deep:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]   ]\nb = a*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*1:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ] ]\nb = a[:]\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Vector copy:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]  ]\nb = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(a)\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;List copy:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]  ]\nb = a.copy()\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.copy():&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\na = [   [ &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) ]  ]\nb = a\nb[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Shallow:&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(b)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-----------------------------&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;leads to output of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;Deep:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n*&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\nVector copy:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; copy:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n.copy():\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\nShallow:\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]]\n-----------------------------\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is because, the line &lt;code&gt;new_list = my_list&lt;/code&gt; assigns a new reference to the variable &lt;code&gt;my_list&lt;/code&gt; which is &lt;code&gt;new_list&lt;/code&gt;\nThis is similar to the &lt;code&gt;C&lt;/code&gt; code given below,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; my_list[] = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; *new_list;\nnew_list = my_list;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should use the copy module to create a new list by&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\nnew_list = copy.deepcopy(my_list)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The method to use depends on the contents of the list being copied. If the list contains nested &lt;code&gt;dicts&lt;/code&gt; than deepcopy is the only method that works, otherwise most of the methods listed in the answers (slice, loop [for], copy, extend, combine, or unpack) will work and execute in similar time (except for loop and deepcopy, which preformed the worst).&lt;/p&gt;\n&lt;h3&gt;Script&lt;/h3&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; randint\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; time\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; copy\n\nitem_count = &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;copy_type&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l1: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;, l2: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;&lt;/span&gt;):\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l1 == l2:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;shallow&apos;&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;deep&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;run_time&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;start, end&lt;/span&gt;):\n  run = end - start\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(run * &lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_combine&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = [] + l1\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;combine&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_extend&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = []\n  l2.extend(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;extend&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_unpack&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = [*l1]\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;unpack&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_deepcopy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = copy.deepcopy(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;deepcopy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_copy&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.copy(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_slice&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = l1[:]\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;slice&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_loop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l1)):\n    l2.append(l1[i])\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;loop&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;):\n  l1 = [data &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(item_count)]\n  start = time()\n  l2 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l1)\n  end = time()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    l2[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;].append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(data) == &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n    l2.append(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;hljs-string&quot;&gt;&apos;method&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;list()&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;copy_type&apos;&lt;/span&gt;: copy_type(l1, l2), \n          &lt;span class=&quot;hljs-string&quot;&gt;&apos;time_µs&apos;&lt;/span&gt;: run_time(start, end)}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&apos;__main__&apos;&lt;/span&gt;:\n  list_type = [{&lt;span class=&quot;hljs-string&quot;&gt;&apos;list[dict]&apos;&lt;/span&gt;: {&lt;span class=&quot;hljs-string&quot;&gt;&apos;test&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]}}, \n          {&lt;span class=&quot;hljs-string&quot;&gt;&apos;list[list]&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]}]\n  store = []\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list_type:\n    key = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(data.keys())[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    store.append({key: [list_unpack(data[key]), list_extend(data[key]), \n                list_combine(data[key]), list_deepcopy(data[key]), \n                list_copy(data[key]), list_slice(data[key]),           \n                list_loop(data[key])]})\n  &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(store)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Results&lt;/h3&gt;\n&lt;pre class=&quot;lang-json s-code-block&quot;&gt;&lt;code class=&quot;hljs language-json&quot;&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;list[dict]&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;unpack&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;56149&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;extend&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52991&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;combine&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53726&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deepcopy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2702616&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52204&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;slice&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52223&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;loop&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;shallow&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;836928&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;list[list]&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-punctuation&quot;&gt;[&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;unpack&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52313&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;extend&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52550&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;combine&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53203&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deepcopy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2608560&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;copy&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;53210&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;slice&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;52937&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt;\n  &lt;span class=&quot;hljs-punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;loop&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;copy_type&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;deep&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;&quot;time_µs&quot;&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;834774&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hljs-punctuation&quot;&gt;]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"54":["\n&lt;p&gt;Your &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementById&lt;/code&gt;&lt;/a&gt; code works since IDs have to be unique and thus the function always returns exactly one element (or &lt;code&gt;null&lt;/code&gt; if none was found).&lt;/p&gt;\n&lt;p&gt;However, the methods\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsByClassName&lt;/code&gt;&lt;/a&gt;,\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsByName&lt;/code&gt;&lt;/a&gt;,\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsByTagName&lt;/code&gt;&lt;/a&gt;, and\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsByTagNameNS&lt;/code&gt;&lt;/a&gt;\nreturn an iterable collection of elements.&lt;/p&gt;\n&lt;p&gt;The method names provide the hint: &lt;code&gt;getElement&lt;/code&gt; implies &lt;em&gt;singular&lt;/em&gt;, whereas &lt;code&gt;getElements&lt;/code&gt; implies &lt;em&gt;plural&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;The method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;querySelector&lt;/code&gt;&lt;/a&gt; also returns a single element, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;querySelectorAll&lt;/code&gt;&lt;/a&gt; returns an iterable collection.&lt;/p&gt;\n&lt;p&gt;The iterable collection can either be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/dom.html#the-document-object&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsByName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-parentnode&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;querySelectorAll&lt;/code&gt;&lt;/a&gt; are both specified to return a &lt;code&gt;NodeList&lt;/code&gt;; the other &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-document&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getElementsBy*&lt;/code&gt; methods&lt;/a&gt; are specified to return an &lt;code&gt;HTMLCollection&lt;/code&gt;, but please note that some browser versions implement this differently.&lt;/p&gt;\n&lt;p&gt;Both of these collection types dont offer the same properties that Elements, Nodes, or similar types offer; thats why reading &lt;code&gt;style&lt;/code&gt; off of &lt;code&gt;document.getElements&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt; fails.\nIn other words: a &lt;code&gt;NodeList&lt;/code&gt; or an &lt;code&gt;HTMLCollection&lt;/code&gt; doesnt have a &lt;code&gt;style&lt;/code&gt;; only an &lt;code&gt;Element&lt;/code&gt; has a &lt;code&gt;style&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;These array-like collections are lists that contain zero or more elements, which you need to iterate over, in order to access them.\nWhile you can iterate over them similarly to an array, note that they are &lt;a href=&quot;https://stackoverflow.com/q/29707568&quot;&gt;&lt;em&gt;different&lt;/em&gt;&lt;/a&gt; from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;In modern browsers, you can convert these iterables to a proper Array with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.from&lt;/code&gt;&lt;/a&gt;; then you can use &lt;code&gt;forEach&lt;/code&gt; and other &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods&quot; rel=&quot;noreferrer&quot;&gt;Array methods, e.g. iteration methods&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myElement&quot;&lt;/span&gt;))\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) =&amp;gt;&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;100px&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In old browsers that dont support &lt;code&gt;Array.from&lt;/code&gt; or the iteration methods, you can still use &lt;a href=&quot;https://stackoverflow.com/q/7056925&quot;&gt;&lt;code&gt;Array.prototype.slice.call&lt;/code&gt;&lt;/a&gt;.\nThen you can iterate over it like you would with a real array:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elements = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myElement&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; elements.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i){\n  elements[i].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;100px&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also iterate over the &lt;code&gt;NodeList&lt;/code&gt; or &lt;code&gt;HTMLCollection&lt;/code&gt; itself, but be aware that in most circumstances, these collections are &lt;em&gt;live&lt;/em&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList#live_vs._static_nodelists&quot; rel=&quot;noreferrer&quot;&gt;MDN docs&lt;/a&gt;, &lt;a href=&quot;https://dom.spec.whatwg.org/#concept-collection-live&quot; rel=&quot;noreferrer&quot;&gt;DOM spec&lt;/a&gt;), i.e. they are updated as the DOM changes.\nSo if you insert or remove elements as you loop, make sure to not accidentally &lt;a href=&quot;https://stackoverflow.com/q/15562484&quot;&gt;skip over some elements&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/q/9709351&quot;&gt;create an infinite loop&lt;/a&gt;.\nMDN documentation should always note if a method returns a live collection or a static one.&lt;/p&gt;\n&lt;p&gt;For example, a &lt;code&gt;NodeList&lt;/code&gt; offers some iteration methods such as &lt;code&gt;forEach&lt;/code&gt; in modern browsers:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.myElement&quot;&lt;/span&gt;)\n  .&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) =&amp;gt;&lt;/span&gt; element.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;100px&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A simple &lt;code&gt;for&lt;/code&gt; loop can also be used:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elements = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myElement&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; elements.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; ++i){\n  elements[i].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;100px&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Aside: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.childNodes&lt;/code&gt;&lt;/a&gt; yields a &lt;em&gt;live&lt;/em&gt; &lt;code&gt;NodeList&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/children&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;.children&lt;/code&gt;&lt;/a&gt; yields a &lt;em&gt;live&lt;/em&gt; &lt;code&gt;HTMLCollection&lt;/code&gt;, so these two getters also need to be handled carefully.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;There are some libraries like &lt;a href=&quot;https://jquery.com&quot; rel=&quot;noreferrer&quot;&gt;jQuery&lt;/a&gt; which make DOM querying a bit shorter and create a layer of abstraction over one element and a collection of elements:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.myElement&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;100px&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You are using a array as an object, the difference between &lt;code&gt;getElementbyId&lt;/code&gt; and \n&lt;code&gt;getElementsByClassName&lt;/code&gt; is that: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;getElementbyId&lt;/code&gt; will return an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element&quot; rel=&quot;noreferrer&quot;&gt;Element object&lt;/a&gt; or null if no element with the ID is found&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;getElementsByClassName&lt;/code&gt; will return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection&quot; rel=&quot;noreferrer&quot;&gt;live HTMLCollection&lt;/a&gt;, possibly of length 0 if no matching elements are found&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;getElementsByClassName&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;code&gt;getElementsByClassName(classNames)&lt;/code&gt; method takes a string that\n  contains an unordered set of unique space-separated tokens\n  representing classes. When called, the method must return a live\n  &lt;code&gt;NodeList&lt;/code&gt; object containing all the elements in the document that\n  have all the classes specified in that argument, having obtained the\n  classes by splitting a string on spaces. If there are no tokens\n  specified in the argument, then the method must return an empty\n  NodeList.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/2008/WD-html5-20080610/dom.html#getelementsbyclassname&quot; rel=&quot;noreferrer&quot;&gt;https://www.w3.org/TR/2008/WD-html5-20080610/dom.html#getelementsbyclassname&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;getElementById&lt;/h2&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The getElementById() method accesses the first element with the specified id.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;in your code the lines:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;1- document.getElementsByClassName(&apos;myElement&apos;).style.size = &apos;100px&apos;;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;will &lt;strong&gt;NOT&lt;/strong&gt; work as expected, because the &lt;code&gt;getElementByClassName&lt;/code&gt; will return an array, and the array will &lt;strong&gt;NOT&lt;/strong&gt; have the &lt;code&gt;style&lt;/code&gt; property, you can access each &lt;code&gt;element&lt;/code&gt; by iterating through them.&lt;/p&gt;\n\n&lt;p&gt;That&apos;s why the function &lt;code&gt;getElementById&lt;/code&gt; worked for you, this function will return the direct object. Therefore you will be able to access the &lt;code&gt;style&lt;/code&gt; property.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;ES6&lt;/strong&gt; provides &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method, which creates a new Array instance from an array-like or iterable object.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; boxes = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(boxes).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; v.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;background&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;from&lt;/span&gt;(boxes));&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;As you can see inside the code snippet, after using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; function you are then able to manipulate over each element.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;\nThe same solution using &lt;strong&gt;&lt;code&gt;jQuery&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.box&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;({&lt;span class=&quot;hljs-string&quot;&gt;&apos;background&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: blue;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The following description is taken from &lt;a href=&quot;http://www.w3schools.com/jsref/met_document_getelementsbyclassname.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;this page&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The getElementsByClassName() method returns a collection of all elements in the document with the specified class name, as a NodeList object.&lt;/p&gt;\n&lt;p&gt;The NodeList object represents a collection of nodes. The nodes can be\naccessed by index numbers. The index starts at 0.&lt;/p&gt;\n&lt;p&gt;Tip: You can use the  length property of the NodeList object to determine the number of elements with a specified class name, then you can loop through all elements and extract the info you want.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;So, as a parameter &lt;code&gt;getElementsByClassName&lt;/code&gt; would accept a class name.&lt;/p&gt;\n&lt;p&gt;If this is your HTML body:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menuItem&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;second&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menuItem&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;third&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menuItem&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;then &lt;code&gt;var menuItems = document.getElementsByClassName(&apos;menuItem&apos;)&lt;/code&gt; would return a collection (not an array) of the 3 upper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s, as they match the given class name.&lt;/p&gt;\n&lt;p&gt;You can then iterate over this nodes (&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s in this case) collection with:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; menuItemIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; menuItemIndex &amp;lt; menuItems.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; ; menuItemIndex ++) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; currentMenuItem = menuItems[menuItemIndex];\n   &lt;span class=&quot;hljs-comment&quot;&gt;// do stuff with currentMenuItem as a node.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Please refer to &lt;a href=&quot;https://stackoverflow.com/questions/9979172/difference-between-node-object-and-element-object&quot;&gt;this post&lt;/a&gt; for more on differences between elements and nodes.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;In Other Words&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;document.querySelector()&lt;/code&gt; selects only the first &lt;strong&gt;one&lt;/strong&gt; element of the specified selector. So it doesn&apos;t spit out an array, it&apos;s a single value. Similar to &lt;code&gt;document.getElementById()&lt;/code&gt; which fetches ID-elements only, since IDs have to be unique.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;document.querySelectorAll()&lt;/code&gt; selects &lt;strong&gt;all&lt;/strong&gt; elements with the specified selector and returns them in an array. Similar to &lt;code&gt;document.getElementsByClassName()&lt;/code&gt; for classes and &lt;code&gt;document.getElementsByTagName()&lt;/code&gt; tags only.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why use querySelector?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s used merely for the sole purpose of ease and brevity.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why use getElement/sBy?*&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Faster performance.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Why this performance difference?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Both ways of selection has the purpose of creating a &lt;strong&gt;NodeList&lt;/strong&gt; for further use. \n&lt;strong&gt;querySelectors&lt;/strong&gt; generates a static NodeList with the selectors thus it must be first created from scratch.&lt;br&gt;\n&lt;strong&gt;getElement/sBy*&lt;/strong&gt; immediately adapts the existing live NodeList of the current DOM.&lt;/p&gt;\n\n&lt;p&gt;So, when to use which method it&apos;s up to you/your project/your device.&lt;/p&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Infos&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/Thielicious/teu8nbd4/&quot; rel=&quot;noreferrer&quot;&gt;Demo of all methods&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot; rel=&quot;noreferrer&quot;&gt;NodeList Documentation&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://jsperf.com/different-types-of-selecting&quot; rel=&quot;noreferrer&quot;&gt;Performance Test&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You could get a single element by running &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.myElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;100px&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but it&apos;s going to work for the first element with class .myElement.&lt;/p&gt;\n\n&lt;p&gt;If you would like apply this for all elements with the class I suggest you to use &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.myElement&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) {\n    element.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;100px&apos;&lt;/span&gt;;\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It returns Array-like list.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;You make that an Array as example&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; el = &lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;elem&quot;&lt;/span&gt;);\nel = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(el); &lt;span class=&quot;hljs-comment&quot;&gt;//this line&lt;/span&gt;\nel[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-title function_&quot;&gt;appendChild&lt;/span&gt;(otherElem);  \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n * To hide all elements with the same class, \n * use looping to reach each element with that class. \n * In this case, looping is done recursively\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hideAll&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;className, i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;) =&amp;gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(className)[i]){ &lt;span class=&quot;hljs-comment&quot;&gt;//exits the loop when element of that id does not exist&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;; \n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(className)[i].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;visibility&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hidden&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//hide element&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;hideAll&lt;/span&gt;(className, i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//loop for the next element&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;hideAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;appBanner&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//the function call requires the class name&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With any browser supporting ES5+ (any browser basically above IE8) you can use the &lt;code&gt;Array.prototype.forEach&lt;/code&gt; method.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;forEach&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;answer&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n    el.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;;\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://caniuse.com/mdn-javascript_builtins_array_foreach&quot; rel=&quot;nofollow noreferrer&quot;&gt;caniuse source&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Super old school solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;        [].&lt;span class=&quot;hljs-property&quot;&gt;forEach&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;myClass&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n            el.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;100px&apos;&lt;/span&gt;;\n        });\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So I was told that this is a duplicate from my question and I should delete mine, which I will do so I can keep the forum clean and keep the right to make questions.&lt;/p&gt;\n&lt;p&gt;As I think mine and this question are really different I will point out the answer to mine, so I will complete the knowledge in this page and the information will not be lost.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;I have a code in the snippet that has a &lt;code&gt;document.getElementsByClassName(&quot;close&quot;)[0]&lt;/code&gt;, what the &lt;code&gt;[0]&lt;/code&gt; is doing?&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I never seen a square brackets being used in &lt;code&gt;getElementsByClassName&lt;/code&gt; for what purpose is it used for?&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Also, how can I convert it to jQuery?&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The code in the snippet has a &lt;code&gt;[0]&lt;/code&gt; it is actually being used as a array and as it is a 0 it is referring to the first time the appointed class is being used.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Same thing above.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I couldn&apos;t really do it and no one answered it. In the part of the code that is refering to &lt;code&gt;event. target&lt;/code&gt; I can not use &lt;code&gt;$(&quot;#myModal&quot;)&lt;/code&gt; instead of &lt;code&gt;document.getElementById(&quot;myModal&quot;)&lt;/code&gt;, I think they should equivalent, but in this case the jQuery form substituting the standard one will not result in the desired effect.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (event.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt; == modal) {\n        modal.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;\n      }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; modal = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myModal&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; btn = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; span = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;close&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\nbtn.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  modal.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;block&quot;&lt;/span&gt;;\n}\nspan.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  modal.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (event.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt; == modal) {\n    modal.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;\n  }\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: Arial, Helvetica, sans-serif;}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.modal&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: fixed;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgb&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0.4&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.modal-content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#fefefe&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: auto;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;hljs-number&quot;&gt;#888&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;80%&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.close&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#aaaaaa&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: right;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;28px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;: bold;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.close&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.close&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:focus&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-decoration&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Modal &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Open Modal&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myModal&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;modal&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;modal-content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;close&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;times;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Some text in the Modal..&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;It seems I can&apos;t really delete mine question and people are unsatisfied with it, I really don&apos;t know what I should do.&lt;/p&gt;\n    ","\n&lt;p&gt;An answer &lt;strong&gt;for Drenzii&apos;s specific case&lt;/strong&gt;...&lt;/p&gt;\n&lt;p&gt;You could make &lt;strong&gt;a function that will work for any of the &lt;code&gt;word&lt;/code&gt; elements&lt;/strong&gt; and pass in the number of the one you want to transform, like:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Binds `wordButtons` to an (array-like) HTMLCollection of buttons&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; wordButtons = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;word&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Applies the `slantWord` function to the first word button&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;slantWord&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Defines the `slantWord` function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;slantWord&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;wordNumber&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; index = wordNumber - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Collection index is zero-based&lt;/span&gt;\n  wordButtons[index].&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;transform&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;rotate(7deg)&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Transforms the specified button&lt;/span&gt;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;wordGameContainer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;word word1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;WORD 1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;word word2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;WORD 2&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;word word3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;WORD 3&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;word word4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;WORD 4&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;moveWord()&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;playButton&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;PLAY&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "],"55":["\n&lt;p&gt;There is currently no way to select the parent of an element in CSS, at least not a way that works across all browsers.&lt;/p&gt;\n&lt;p&gt;If there was a way to do it, it would be in either of the current CSS selectors specs:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-selectors/#selectors&quot; rel=&quot;noreferrer&quot;&gt;Selectors Level 3 Spec&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/CSS2/selector.html#pattern-matching&quot; rel=&quot;noreferrer&quot;&gt;CSS 2.1 Selectors Spec&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;That said, the &lt;a href=&quot;https://dev.w3.org/csswg/selectors4/#relational&quot; rel=&quot;noreferrer&quot;&gt;Selectors Level 4 Working Draft&lt;/a&gt; includes a &lt;code&gt;:has()&lt;/code&gt; pseudo-class that will provide this capability. It will be similar to the &lt;a href=&quot;https://api.jquery.com/has-selector/&quot; rel=&quot;noreferrer&quot;&gt;jQuery implementation&lt;/a&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:has&lt;/span&gt;(&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* styles to apply to the li tag */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;However, as of 2022, &lt;strong&gt;&lt;a href=&quot;https://caniuse.com/css-has&quot; rel=&quot;noreferrer&quot;&gt;it is only supported by Safari&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;In the meantime, you&apos;ll have to resort to JavaScript if you need to select a parent element.&lt;/p&gt;\n    ","\n&lt;p&gt;Yes: &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/:has&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;:has()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;Browser support: &lt;a href=&quot;https://caniuse.com/css-has&quot; rel=&quot;nofollow noreferrer&quot;&gt;Safari by default; Chrome (behind a flag)&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I dont think you can select the parent in CSS only.&lt;/p&gt;\n\n&lt;p&gt;But as you already seem to have an &lt;code&gt;.active&lt;/code&gt; class, it would be easier to move that class to the &lt;code&gt;li&lt;/code&gt; (instead of the &lt;code&gt;a&lt;/code&gt;). That way you can access both the &lt;code&gt;li&lt;/code&gt; and the &lt;code&gt;a&lt;/code&gt; via CSS only.&lt;/p&gt;\n    ","\n&lt;p&gt;You can use &lt;a href=&quot;https://github.com/Idered/cssParentSelector&quot; rel=&quot;noreferrer&quot;&gt;this script&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;*! &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[type=text]&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will select any parent of a text input. But wait, there&apos;s still much more. If you want, you can select a specified parent:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.input-wrap&lt;/span&gt;! &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[type=text]&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or select it when it&apos;s active:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.input-wrap&lt;/span&gt;! &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[type=text]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:focus&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#000&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Check out this HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;input-wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;help hide&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Your name sir&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can select that &lt;code&gt;span.help&lt;/code&gt; when the &lt;code&gt;input&lt;/code&gt; is active and show it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.input-wrap&lt;/span&gt;! &lt;span class=&quot;hljs-selector-class&quot;&gt;.help&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[type=text]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:focus&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are many more capabilities; just check out the documentation of the plugin.&lt;/p&gt;\n\n&lt;p&gt;BTW, it works in Internet&amp;nbsp;Explorer.&lt;/p&gt;\n    ","\n&lt;p&gt;As mentioned by a couple of others, there isn&apos;t a way to style an element&apos;s parent/s using just CSS but the following works with &lt;a href=&quot;http://jquery.com/&quot; rel=&quot;noreferrer&quot; title=&quot;jQuery. Write less. Do more.&quot;&gt;jQuery&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a.active&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;parents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;property&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is no parent selector; just the way there is no previous sibling selector. One good reason for not having these selectors is because the browser has to traverse through all children of an element to determine whether or not a class should be applied. For example, if you wrote:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;contains-selector&lt;/span&gt;(a.active) { &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the browser will have to wait until it has loaded and parsed everything until the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; to determine if the page should be red or not.&lt;/p&gt;\n\n&lt;p&gt;The article &lt;em&gt;&lt;a href=&quot;http://snook.ca/archives/html_and_css/css-parent-selectors&quot; rel=&quot;noreferrer&quot;&gt;Why we don&apos;t have a parent selector&lt;/a&gt;&lt;/em&gt; explains it in detail.&lt;/p&gt;\n    ","\n&lt;p&gt;There isn&apos;t a way to do this in CSS&amp;nbsp;2. You could add the class to the &lt;code&gt;li&lt;/code&gt; and reference the &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; {\n    property: value;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The pseudo element &lt;code&gt;:focus-within&lt;/code&gt; allows a parent to be selected if a descendent has focus.&lt;/p&gt;\n&lt;p&gt;An element can be focused if it has a &lt;code&gt;tabindex&lt;/code&gt; attribute.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.caniuse.com/#feat=css-focus-within&quot; rel=&quot;noreferrer&quot;&gt;Browser support for focus-within&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex&quot; rel=&quot;noreferrer&quot;&gt;Tabindex&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:focus&lt;/span&gt;-within {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;hsl&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;199deg&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65%&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;73%&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* demo styles */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;hsl&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0%&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80%&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100vh&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: grid;\n  place-&lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;hsl&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0%&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0%&lt;/span&gt;);\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3rem&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;outline&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18px&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;1.25&lt;/span&gt; sans-serif;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;20ch&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;tabindex&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Click or Focus on me, my parent will change.\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Try to switch &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;block&lt;/code&gt; display, and then use any style you want. The &lt;code&gt;a&lt;/code&gt; element will fill the &lt;code&gt;li&lt;/code&gt; element, and you will be able to modify its look as you want. Don&apos;t forget to set &lt;code&gt;li&lt;/code&gt; padding to 0.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;overflow&lt;/span&gt;: hidden;\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: ..., background: ..., border-radius: ..., etc...\n}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: ..., background: ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The CSS selector &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_selectors&quot; rel=&quot;noreferrer&quot;&gt;General Sibling Combinator&lt;/a&gt; could maybe used for what you want:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;E ~ F {\n    property: value;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This matches any &lt;code&gt;F&lt;/code&gt; element that is preceded by an &lt;code&gt;E&lt;/code&gt; element.&lt;/p&gt;\n    ","\n&lt;p&gt;Not in CSS 2 as far as I&apos;m aware.  CSS 3 has more robust selectors but is not consistently implemented across all browsers.  Even with the improved selectors, I don&apos;t believe it will accomplish exactly what you&apos;ve specified in your example.&lt;/p&gt;\n    ","\n&lt;p&gt;I know the OP was looking for a CSS solution but it is simple to achieve using jQuery. In my case I needed to find the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; parent tag for a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag contained in the child &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. jQuery has the &lt;code&gt;:has&lt;/code&gt; selector so it&apos;s possible to identify a parent by the children it contains:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ul:has(#someId)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will select the &lt;code&gt;ul&lt;/code&gt; element that has a child element with id &lt;em&gt;someId&lt;/em&gt;. Or to answer the original question, something like the following should do the trick (untested):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;li:has(.active)&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is the most discussed aspect of the &lt;strong&gt;Selectors Level 4&lt;/strong&gt; specification.\nWith this, a selector will be able to style an element according to its child by using an exclamation mark after the given selector (!).&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;! &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt;{\n   &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will set a red background-color if the user hovers over any anchor.&lt;/p&gt;\n\n&lt;p&gt;But we have to wait for browsers&apos; implementation :(&lt;/p&gt;\n    ","\n&lt;p&gt;You might try to use hyperlink as the parent, and then change the inner elements on hover. Like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;h1&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:red;}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;h1&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:green;}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;h2&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:blue;}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;h1&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:yellow;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you can change the style in multiple inner tags, based on the rollover of the parent element.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a hack using &lt;code&gt;pointer-events&lt;/code&gt; with &lt;code&gt;hover&lt;/code&gt;:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!doctype &lt;span class=&quot;hljs-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* accessory */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: gray;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt;, \n&lt;span class=&quot;hljs-selector-class&quot;&gt;.selector&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: flex;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;justify-content&lt;/span&gt;: center;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;align-items&lt;/span&gt;: center;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.selector&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: silver;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;;\n}\n        &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/* pertinent */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: gray;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;pointer-events&lt;/span&gt;: none;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: fuchsia;\n}\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; \n&lt;span class=&quot;hljs-selector-class&quot;&gt;.selector&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;pointer-events&lt;/span&gt;: auto;\n}\n        &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;selector&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Currently there is no parent selector &amp;amp; it is not even being discussed in any of the talks of W3C. You need to understand how CSS is evaluated by the browser to actually understand if we need it or not.&lt;/p&gt;\n\n&lt;p&gt;There is a lot of technical explanation here.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://snook.ca/archives/html_and_css/css-parent-selectors&quot; rel=&quot;noreferrer&quot;&gt;Jonathan Snook explains how CSS is evaluated&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://css-tricks.com/parent-selectors-in-css/&quot; rel=&quot;noreferrer&quot;&gt;Chris Coyier on the talks of Parent selector&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://csswizardry.com/2011/09/writing-efficient-css-selectors/&quot; rel=&quot;noreferrer&quot;&gt;Harry Roberts again on writing efficient CSS selectors&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;But &lt;a href=&quot;http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/&quot; rel=&quot;noreferrer&quot;&gt;Nicole Sullivan has some interesting facts on positive trends&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;These people are all top class in the field of front end development.&lt;/p&gt;\n    ","\n&lt;p&gt;Just an idea for horizontal menu...&lt;/p&gt;\n&lt;h3&gt;Part of HTML&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;item&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;Link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;parent-background&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- submenu takes this place --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Part of CSS&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Hide parent backgrounds... */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent-background&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none; }\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* ... and show it when hover on children */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.item&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt; + &lt;span class=&quot;hljs-selector-class&quot;&gt;.parent-background&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: absolute;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/ilyabogdanov/4fyxywee/&quot; rel=&quot;noreferrer&quot;&gt;Updated demo and the rest of code&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/ilyabogdanov/o4fkL7kv/&quot; rel=&quot;noreferrer&quot;&gt;Another example&lt;/a&gt; how to use it with text-inputs - select parent fieldset&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a plugin that extends CSS to include some non-standard features that can really help when designing websites. It&apos;s called &lt;a href=&quot;http://elementqueries.com&quot; rel=&quot;nofollow noreferrer&quot;&gt;EQCSS&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;One of the things EQCSS adds is a parent selector. It works in all browsers, Internet&amp;nbsp;Explorer&amp;nbsp;8 and up. Here&apos;s the format:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-less&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;@element&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.active&apos;&lt;/span&gt; {\n  $&lt;span class=&quot;hljs-selector-tag&quot;&gt;parent&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So here we&apos;ve opened an element query on every element &lt;code&gt;a.active&lt;/code&gt;, and for the styles inside that query, things like &lt;code&gt;$parent&lt;/code&gt; make sense, because there&apos;s a reference point. The browser can find the parent, because it&apos;s very similar to &lt;code&gt;parentNode&lt;/code&gt; in JavaScript.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://elementqueries.com/demos/parent.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Here&apos;s a demo of &lt;code&gt;$parent&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://staticresource.com/parent.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;another &lt;code&gt;$parent&lt;/code&gt; demo that works in Internet&amp;nbsp;Explorer&amp;nbsp;8&lt;/a&gt;, as well as &lt;a href=&quot;https://i.imgur.com/QyVAj2u.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;a screenshot in case you don&apos;t have Internet&amp;nbsp;Explorer&amp;nbsp;8 around to test with&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;EQCSS also includes &lt;a href=&quot;http://elementqueries.com/#meta-selectors&quot; rel=&quot;nofollow noreferrer&quot;&gt;meta-selectors&lt;/a&gt;: &lt;code&gt;$prev&lt;/code&gt; for the element before a selected element and &lt;code&gt;$this&lt;/code&gt; for only those elements that match an element query, and more.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s now 2019, and the &lt;a href=&quot;https://drafts.csswg.org/css-nesting-1/&quot; rel=&quot;noreferrer&quot;&gt;latest draft of the CSS Nesting Module&lt;/a&gt; actually has something like this. Introducing &lt;code&gt;@nest&lt;/code&gt; at-rules.&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;3.2. The Nesting At-Rule: @nest&lt;/p&gt;\n&lt;p&gt;While direct nesting looks nice, it is somewhat fragile. Some valid nesting selectors, like .foo &amp;amp;, are disallowed, and editing the selector in certain ways can make the rule invalid unexpectedly. As well, some people find the nesting challenging to distinguish visually from the surrounding declarations.&lt;/p&gt;\n&lt;p&gt;To aid in all these issues, this specification defines the @nest rule, which imposes fewer restrictions on how to validly nest style rules. Its syntax is:&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;@nest = @nest &amp;lt;selector&amp;gt; { &amp;lt;declaration-list&amp;gt; }&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The @nest rule functions identically to a style rule: it starts with a selector, and contains declarations that apply to the elements the selector matches. The only difference is that the selector used in a @nest rule must be nest-containing, which means it contains a nesting selector in it somewhere. A list of selectors is nest-containing if all of its individual complex selectors are nest-containing.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;(Copy and pasted from the URL above).&lt;/p&gt;\n&lt;p&gt;Example of valid selectors under this specification:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-less&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.foo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-variable&quot;&gt;@nest&lt;/span&gt; &amp;amp; &amp;gt; .bar {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n  }\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Equivalent to:\n   .foo { color: red; }\n   .foo &amp;gt; .bar { color: blue; }\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.foo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-variable&quot;&gt;@nest&lt;/span&gt; .parent &amp;amp; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n  }\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Equivalent to:\n   .foo { color: red; }\n   .parent .foo { color: blue; }\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.foo&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n  &lt;span class=&quot;hljs-variable&quot;&gt;@nest :&lt;/span&gt;not(&amp;amp;) {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;\n  }\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Equivalent to:\n   .foo { color: red; }\n   :not(.foo) { color: blue; }\n */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The W3C excluded such a selector because of the huge performance impact it would have on a browser.&lt;/p&gt;\n    ","\n&lt;p&gt;Technically there is no direct way to do this. However, you can sort that out with either jQuery or JavaScript.&lt;/p&gt;\n\n&lt;p&gt;However, you can do something like this as well.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;h1&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: blue;}\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.active&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: green;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a.active&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;parents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;property&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to achieve this using jQuery here is the reference for the &lt;a href=&quot;http://www.snoopcode.com/jquery/jquery-parent-selector&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery parent selector&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The short answer is &lt;strong&gt;NO&lt;/strong&gt;; we don&apos;t have a &lt;code&gt;parent selector&lt;/code&gt; at this stage in CSS, but if you don&apos;t have to swap the elements or classes anyway, the second option is using JavaScript. Something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; activeATag = &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;slice&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.active&apos;&lt;/span&gt;));\n\nactiveATag.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(x.&lt;span class=&quot;hljs-property&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;tagName&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;LI&apos;&lt;/span&gt;) {\n    x.&lt;span class=&quot;hljs-property&quot;&gt;parentNode&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;color&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Your property: value;&lt;/span&gt;\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or a shorter way if you use &lt;strong&gt;jQuery&lt;/strong&gt; in your application:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a.active&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;parents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;li&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Your property: value;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although there is no parent selector in standard CSS at present, I am working on a (personal) project called &lt;strong&gt;axe&lt;/strong&gt; (ie. &lt;em&gt;Augmented CSS Selector Syntax / ACSSSS&lt;/em&gt;) which, among its 7 new selectors, includes both:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;an &lt;em&gt;immediate parent&lt;/em&gt; selector &lt;code&gt;&amp;lt;&lt;/code&gt; (which enables the opposite selection to &lt;code&gt;&amp;gt;&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;an &lt;em&gt;any ancestor selector&lt;/em&gt; &lt;code&gt;^&lt;/code&gt; (which enables the opposite selection to &lt;code&gt;[SPACE]&lt;/code&gt;)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;&lt;strong&gt;axe&lt;/strong&gt; is presently in a relatively early BETA stage of development.&lt;/p&gt;\n&lt;p&gt;See a demo here:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;180px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;180px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin-right&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgb&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;191&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;191&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;191&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;90px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;45px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding-top&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-family&lt;/span&gt;: sans-serif;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;text-align&lt;/span&gt;: center;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgb&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.using-axe&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.parent&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rgb&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child using-axe&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Here, the axe parent selector turns the outer square red.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://rouninmedia.github.io/axe/axe.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;In the example above &lt;code&gt;&amp;lt;&lt;/code&gt; is the &lt;strong&gt;immediate parent selector&lt;/strong&gt;, so&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.child.using-axe &amp;lt; .parent&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;means:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;any immediate parent of &lt;code&gt;.child.using-axe&lt;/code&gt; which is &lt;code&gt;.parent&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;You could alternatively use:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;.child.using-axe &amp;lt; div&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;which would mean:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;any immediate parent of &lt;code&gt;.child.using-axe&lt;/code&gt; which is a &lt;code&gt;div&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The CSS parent selector (also know as the &lt;strong&gt;:has() selector&lt;/strong&gt;) has finally landed in Safari TP 137. The feature is currently being implementated in Chrome as well. (&lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/:has&quot; rel=&quot;nofollow noreferrer&quot;&gt;MDN Documentation&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;Parent selection is done via the pseudo-class &lt;code&gt;:has()&lt;/code&gt;.  For example, &lt;code&gt;div:has(&amp;gt; .child)&lt;/code&gt; will select all &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements with a child having a &lt;code&gt;child&lt;/code&gt; class.&lt;/p&gt;\n&lt;p&gt;Other examples:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Selecting direct parent of an element &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Child Element&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:has&lt;/span&gt;(&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;p&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Selecting all the parents of an element&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;grandparent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The following selector will select both &lt;code&gt;grandparent&lt;/code&gt; and &lt;code&gt;parent&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:has&lt;/span&gt;(&lt;span class=&quot;hljs-selector-class&quot;&gt;.child&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also use it for nested selectors and even with other pseudo classes:&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:has&lt;/span&gt;(&amp;gt; &lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:nth-child&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Other valid CSS operators can be used to customize the query.&lt;/p&gt;\n&lt;p&gt;Keep an eye on &lt;a href=&quot;https://caniuse.com/css-has&quot; rel=&quot;nofollow noreferrer&quot;&gt;caniuse.com/css-has&lt;/a&gt; for browser compatibility.&lt;/p&gt;\n    ","\n&lt;p&gt;At least up to and including CSS&amp;nbsp;3 you cannot select like that.\nBut it can be done pretty easily nowadays in JavaScript, you just need to add a bit of vanilla JavaScript, notice that the code is pretty short.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;cells = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div&apos;&lt;/span&gt;);\n[].&lt;span class=&quot;hljs-property&quot;&gt;forEach&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(cells, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;//console.log(el.nodeName)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (el.&lt;span class=&quot;hljs-title function_&quot;&gt;hasChildNodes&lt;/span&gt;() &amp;amp;&amp;amp; el.&lt;span class=&quot;hljs-property&quot;&gt;firstChild&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nodeName&lt;/span&gt;==&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(el)\n    };\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Peter&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Jackson link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Philip&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Pullman link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Changing parent element based on child element can currently only happen when we have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element inside the parent element. When an input gets focus, its corresponding parent element can get affected using CSS.&lt;/p&gt;\n\n&lt;p&gt;Following example will help you understand using &lt;code&gt;:focus-within&lt;/code&gt; in CSS.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer-div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;400px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.outer-div&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:focus&lt;/span&gt;-within {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.inner-div&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;200px&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;float&lt;/span&gt;: left;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;: yellow;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;outer-div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;inner-div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    I want to change outer-div(Background color) class based on inner-div. Is it possible?\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;No, you cannot select the parent in CSS only.&lt;/p&gt;\n\n&lt;p&gt;But as you already seem to have an &lt;code&gt;.active&lt;/code&gt; class, it would be easier to move that class to the &lt;code&gt;li&lt;/code&gt; (instead of the &lt;code&gt;a&lt;/code&gt;). That way you can access both the &lt;code&gt;li&lt;/code&gt; and the &lt;code&gt;a&lt;/code&gt; via CSS only.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n&lt;p&gt;Any ideas?&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;CSS4 will be fancy if it adds some &lt;em&gt;hooks&lt;/em&gt; into &lt;em&gt;walking backwards&lt;/em&gt;. Until then it is possible (though &lt;strong&gt;not&lt;/strong&gt; advisable) to use &lt;code&gt;checkbox&lt;/code&gt; and/or &lt;code&gt;radio&lt;/code&gt; &lt;em&gt;&lt;code&gt;input&lt;/code&gt;s&lt;/em&gt; to &lt;em&gt;break&lt;/em&gt; the usual way that things are connected, and through that also allow CSS to operate outside of its normal scope...&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Hide things that may be latter shown */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__hidden&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;visibility&lt;/span&gt;: hidden;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;alpha&lt;/span&gt;(opacity=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* Old Microsoft opacity */&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Base style for content and style menu */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: lightgray;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: black;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__hidden&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: lightgray;\n  &lt;span class=&quot;hljs-comment&quot;&gt;/* Make list look not so _listy_ */&lt;/span&gt;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;list-style&lt;/span&gt;: none;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;padding-left&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__option&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;box-sizing&lt;/span&gt;: content-box;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;: static;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;z-index&lt;/span&gt;: auto;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* &amp;amp;#9660; - \\u2630 - Three Bars */&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/*\n.menu__trigger__selection::before {\n  content: &apos;\\2630&apos;;\n  display: inline-block;\n}\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* &amp;amp;#9660; - Down Arrow */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\25BC&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;90deg&lt;/span&gt;);\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Customize to look more `select` like if you like */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:hover&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:active&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;cursor&lt;/span&gt;: pointer;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: darkgray;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Things to do when checkboxes/radios are checked\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; + &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[checked]&lt;/span&gt; + &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;::after&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;rotate&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0deg&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* This bit is something that you may see elsewhere */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__hidden&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[checked]&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__hidden&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;visibility&lt;/span&gt;: visible;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;filter&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;alpha&lt;/span&gt;(opacity=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;/* Microsoft!? */&lt;/span&gt;\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Hacky CSS only changes based off non-inline checkboxes\n * ... AKA the stuff you cannot unsee after this...\n */&lt;/span&gt;\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-default&quot;&lt;/span&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: lightgray;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: black;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-default&quot;&lt;/span&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[for=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-default&quot;&lt;/span&gt;]&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: darkorange;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-one&quot;&lt;/span&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: black;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: lightgray;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-one&quot;&lt;/span&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[for=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-one&quot;&lt;/span&gt;]&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: darkorange;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-two&quot;&lt;/span&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: darkgreen;\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: red;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-two&quot;&lt;/span&gt;]&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.main__content&lt;/span&gt; &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__trigger__style&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[for=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-two&quot;&lt;/span&gt;]&lt;/span&gt; {\n  &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: darkorange;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--\n  This bit works, but will one day cause troubles,\n  but truth is you can stick checkbox/radio inputs\n  just about anywhere and then call them by id with\n  a `for` label. Keep scrolling to see what I mean\n--&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;radio&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;colorize&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__checkbox__style&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-default&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;radio&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;colorize&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__checkbox__style&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-one&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;radio&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;colorize&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__checkbox__style&quot;&lt;/span&gt;\n       &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-two&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;main__content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;paragraph__split&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__checkbox__selection&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;trigger-style-menu&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;trigger-style-menu&quot;&lt;/span&gt;\n         &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__trigger__selection&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; Theme&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__hidden&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__option&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-default&quot;&lt;/span&gt;\n             &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__trigger__style&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Default Style&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__option&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-one&quot;&lt;/span&gt;\n             &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__trigger__style&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;First Alternative Style&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__option&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;style-two&quot;&lt;/span&gt;\n             &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;menu__trigger__style&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Second Alternative Style&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;paragraph__split&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;... pretty &lt;em&gt;gross&lt;/em&gt;, but with just CSS and HTML it is possible to touch and re-touch anything but the &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;:root&lt;/code&gt; from just about anywhere by linking the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; properties of &lt;code&gt;radio&lt;/code&gt;/&lt;code&gt;checkbox&lt;/code&gt; &lt;em&gt;&lt;code&gt;input&lt;/code&gt;s&lt;/em&gt; and &lt;code&gt;label&lt;/code&gt; &lt;em&gt;triggers&lt;/em&gt;; likely someone&apos;ll show how to re-touch those at some point.&lt;/p&gt;\n&lt;p&gt;One additional caveat is that only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;input&lt;/code&gt; of a specific &lt;code&gt;id&lt;/code&gt; maybe used, first &lt;code&gt;checkbox&lt;/code&gt;/&lt;code&gt;radio&lt;/code&gt; &lt;em&gt;wins&lt;/em&gt; a toggled state in other words... &lt;strong&gt;But&lt;/strong&gt; multiple labels can all point to the same &lt;code&gt;input&lt;/code&gt;, though that would make both the HTML and CSS look even grosser.&lt;/p&gt;\n&lt;hr&gt;\n&lt;blockquote&gt;\n&lt;p&gt;... I&apos;m hoping that there is some sort of workaround that exists native to CSS Level 2...&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;I am not sure about the other pseudo classes, but I &lt;code&gt;:checked&lt;/code&gt; for pre-CSS&amp;nbsp;3. If I remember correctly, it was something like &lt;code&gt;[checked]&lt;/code&gt; which is why you may find it in the above code, for example,&lt;/p&gt;\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:checked&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__hidden&lt;/span&gt;,\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__checkbox__selection&lt;/span&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[checked]&lt;/span&gt; ~ &lt;span class=&quot;hljs-selector-class&quot;&gt;.menu__hidden&lt;/span&gt; {\n &lt;span class=&quot;hljs-comment&quot;&gt;/* rules: and-stuff; */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;... but for things like &lt;code&gt;::after&lt;/code&gt; and &lt;code&gt;:hover&lt;/code&gt;, I&apos;m not at all certain in which CSS version those first appeared.&lt;/p&gt;\n&lt;p&gt;That all stated, please don&apos;t ever use this in production, not even in anger. As a joke sure, or in other words just because something &lt;em&gt;can&lt;/em&gt; be done does not always mean it &lt;em&gt;should&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Try this...&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;This solution uses plain CSS2 rules with no Javascript and works in all browsers, old and new&lt;/strong&gt;. When clicked, the child &lt;code&gt;anchor&lt;/code&gt; tag activates its &lt;code&gt;active&lt;/code&gt; pseudo-class event. It then simply hides itself, allowing the &lt;code&gt;active&lt;/code&gt; event to bubble up to the parent &lt;code&gt;li&lt;/code&gt; tag who then restyles himself and reveals his anchor child again with a new style. The child has styled the parent.&lt;/p&gt;\n&lt;p&gt;Using your example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;listitem&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a Link&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now apply these styles with the &lt;code&gt;active&lt;/code&gt; pseudo-class on &lt;code&gt;a&lt;/code&gt; to restyle the parent &lt;code&gt;li&lt;/code&gt; tag when the link is clicked:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.link&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;: white;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: green;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;text-decoration&lt;/span&gt;: none;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5px&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.listitem&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: transparent;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* When this &apos;active&apos; pseudo-class event below fires on click, it hides itself,\ntriggering the active event again on its parent which applies new styles to itself and its child. */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.link&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:active&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.listitem&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:active&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: blue;\n}\n\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.listitem&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:active&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.link&lt;/span&gt; {\n    &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: inline-block;\n    &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: transparent;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You should see the link with a green background now change to the list item&apos;s blue background on click.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/2MTVy.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/2MTVy.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;turns to&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/aRVcH.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/aRVcH.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;on click.&lt;/p&gt;\n    ","\n&lt;p&gt;There no css (and therefore in css preprocessors) parent selector due to &quot;The major reasons for the CSS Working Group previously rejecting proposals for parent selectors are related to browser performance and incremental rendering issues.&quot;&lt;/p&gt;\n    "]},"page":"112","randomQuestions":[{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825"},{"title":"Merge/flatten an array of arrays","slug":"mergeflatten-an-array-of-arrays-1657387827427"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"How do JavaScript closures work?","slug":"how-do-javascript-closures-work-1657384418555"},{"title":"Why are mutable structs “evil”?","slug":"why-are-mutable-structs-\"evil\"-1657388508974"},{"title":"The useState set method is not reflecting a change immediately","slug":"the-usestate-set-method-is-not-reflecting-a-change-immediately-1657384524775"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"How do I get PHP errors to display?","slug":"how-do-i-get-php-errors-to-display-1657384570095"},{"title":"Get the data received in a Flask request","slug":"get-the-data-received-in-a-flask-request-1657387804432"},{"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803"},{"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218"},{"title":"How can I deserialize JSON with C#?","slug":"how-can-i-deserialize-json-with-c-1657388102941"},{"title":"Methods in ES6 objects: using arrow functions","slug":"methods-in-es6-objects:-using-arrow-functions-1657388249058"},{"title":"Simulating group_concat MySQL function in Microsoft SQL Server 2005?","slug":"simulating-group_concat-mysql-function-in-microsoft-sql-server-2005-1657384832169"},{"title":"Iterator invalidation rules for C++ containers","slug":"iterator-invalidation-rules-for-c++-containers-1657387561090"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"},{"title":"What are the basic rules and idioms for operator overloading?","slug":"what-are-the-basic-rules-and-idioms-for-operator-overloading-1657384449752"}]},"__N_SSG":true}