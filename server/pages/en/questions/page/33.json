{"pageProps":{"data":{"count":610,"rows":[{"id":450,"title":"Why Use Integer Instead of Long?","slug":"why-use-integer-instead-of-long-1657388012352","postType":"QUESTION","createdAt":"2022-07-09T17:33:32.000Z","updatedAt":"2022-07-09T17:33:32.000Z","tags":[{"id":2321,"name":"long-integer","slug":"long-integer","createdAt":"2022-07-09T17:33:32.000Z","updatedAt":"2022-07-09T17:33:32.000Z","Questions_Tags":{"questionId":450,"tagId":2321}},{"id":2322,"name":"integer-overflow","slug":"integer-overflow","createdAt":"2022-07-09T17:33:32.000Z","updatedAt":"2022-07-09T17:33:32.000Z","Questions_Tags":{"questionId":450,"tagId":2322}}]},{"id":449,"title":"How do you convert a byte array to a hexadecimal string, and vice versa?","slug":"how-do-you-convert-a-byte-array-to-a-hexadecimal-string-and-vice-versa-1657388010428","postType":"QUESTION","createdAt":"2022-07-09T17:33:30.000Z","updatedAt":"2022-07-09T17:33:30.000Z","tags":[{"id":2319,"name":"hex","slug":"hex","createdAt":"2022-07-09T17:33:30.000Z","updatedAt":"2022-07-09T17:33:30.000Z","Questions_Tags":{"questionId":449,"tagId":2319}}]},{"id":448,"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897","postType":"QUESTION","createdAt":"2022-07-09T17:33:26.000Z","updatedAt":"2022-07-09T17:33:26.000Z","tags":[]},{"id":447,"title":"Why do regex constructors need to be double escaped?","slug":"why-do-regex-constructors-need-to-be-double-escaped-1657388004942","postType":"QUESTION","createdAt":"2022-07-09T17:33:24.000Z","updatedAt":"2022-07-09T17:33:24.000Z","tags":[]},{"id":446,"title":"How can I parse a JSON file with PHP? [duplicate]","slug":"how-can-i-parse-a-json-file-with-php-duplicate-1657388002325","postType":"QUESTION","createdAt":"2022-07-09T17:33:22.000Z","updatedAt":"2022-07-09T17:33:22.000Z","tags":[]}]},"answers":{"446":["\n&lt;p&gt;To iterate over a multidimensional array, you can use &lt;a href=&quot;http://us2.php.net/manual/en/recursivearrayiterator.getchildren.php&quot; rel=&quot;noreferrer&quot;&gt;RecursiveArrayIterator&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$jsonIterator&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;RecursiveIteratorIterator&lt;/span&gt;(\n    &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;RecursiveArrayIterator&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;)),\n    &lt;span class=&quot;hljs-title class_&quot;&gt;RecursiveIteratorIterator&lt;/span&gt;::&lt;span class=&quot;hljs-variable constant_&quot;&gt;SELF_FIRST&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$jsonIterator&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$key&lt;/span&gt;:\\n&quot;&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-subst&quot;&gt;$val&lt;/span&gt;\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;John:\nstatus =&amp;gt; Wait\nJennifer:\nstatus =&amp;gt; Active\nJames:\nstatus =&amp;gt; Active\nage =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;\ncount =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nprogress =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;\nbad =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://codepad.org/Gtk8DqJE&quot; rel=&quot;noreferrer&quot;&gt;run on codepad&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I can&apos;t believe so many people are posting answers without reading the JSON properly.&lt;/p&gt;\n\n&lt;p&gt;If you foreach iterate &lt;code&gt;$json_a&lt;/code&gt; alone, you have an object of objects. Even if you pass in &lt;code&gt;true&lt;/code&gt; as the second parameter, you have a two-dimensional array. If you&apos;re looping through the first dimension you can&apos;t just echo the second dimension like that. So this is wrong:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; : &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To echo the statuses of each person, try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// deal with error...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// deal with error...&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person_name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person_a&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;];\n}\n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The most elegant solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;shipments.js&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Remember that the json-file has to be encoded in UTF-8 without BOM. If the file has BOM, then json_decode will return NULL.&lt;/p&gt;\n\n&lt;p&gt;Alternatively:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_encode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;shipments.js&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;));\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$shipments&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s completely beyond me that no one pointed out that your begining &quot;tags&quot; are wrong. You&apos;re creating an object with {}, while you could create an array with []. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;[ &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- Note that I changed this&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;john&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// And moved the name here.&lt;/span&gt;\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wait&quot;&lt;/span&gt;\n    },\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jennifer&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Active&quot;&lt;/span&gt;\n    },\n    {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&quot;James&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;Active&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;count&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;progress&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;bad&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    }\n] &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- And this.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this change, the json will be parsed as an array instead of an object. And with that array, you can do whatever you want, like loops etc. &lt;/p&gt;\n    ","\n&lt;p&gt;Try This&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;    &lt;span class=&quot;hljs-variable&quot;&gt;$json_data&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{\n    &quot;John&quot;: {\n        &quot;status&quot;:&quot;Wait&quot;\n    },\n    &quot;Jennifer&quot;: {\n        &quot;status&quot;:&quot;Active&quot;\n    },\n    &quot;James&quot;: {\n        &quot;status&quot;:&quot;Active&quot;,\n        &quot;age&quot;:56,\n        &quot;count&quot;:10,\n        &quot;progress&quot;:0.0029857,\n        &quot;bad&quot;:0\n      }\n     }&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-variable&quot;&gt;$decode_data&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_data&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$decode_data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;){\n\n            &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;print_r&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/michael/test.json&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;is_array&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&amp;gt;&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br /&amp;gt;&apos;&lt;/span&gt;;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&amp;gt;&apos;&lt;/span&gt; . &lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br /&amp;gt;&apos;&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;More standard answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$jsondata&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(PATH_TO_JSON_FILE.&lt;span class=&quot;hljs-string&quot;&gt;&quot;/jsonfile.json&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$jsondata&lt;/span&gt;,&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;b&amp;gt;Name: &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$k&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/b&amp;gt;&amp;lt;/br&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;array_keys&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$keys&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;amp;nbsp;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;ucfirst&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;).&lt;span class=&quot;hljs-string&quot;&gt;&apos; = &apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$val&lt;/span&gt;[&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;].&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;/br&amp;gt;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;endforeach&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;endforeach&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the output is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;Name: John\n Status = Wait\nName: Jennifer\n Status = Active\nName: James\n Status = Active\n Age = &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;\n Count = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n Progress = &lt;span class=&quot;hljs-number&quot;&gt;0.0029857&lt;/span&gt;\n Bad = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Loop through the JSON with a &lt;code&gt;foreach&lt;/code&gt; loop as key-value pairs. Do type-checking to determine if more looping needs to be done.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;gettype&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;object&quot;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-comment&quot;&gt;# and so on&lt;/span&gt;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;{\n    &quot;response&quot;: {\n        &quot;data&quot;: [{&quot;identifier&quot;: &quot;Be Soft Drinker, Inc.&quot;, &quot;entityName&quot;: &quot;BusinessPartner&quot;}],\n        &quot;status&quot;: 0,\n        &quot;totalRows&quot;: 83,\n        &quot;startRow&quot;: 0,\n        &quot;endRow&quot;: 82\n    }\n}&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;//echo &apos;&amp;lt;pre&amp;gt;&apos;; print_r($json); exit;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;identifier&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;data&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;entityName&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;totalRows&apos;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;startRow&apos;&lt;/span&gt;]; \n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;response&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;endRow&apos;&lt;/span&gt;]; \n\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)\n {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; : &apos;&lt;/span&gt;;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;)\n   {\n       &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$v&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you decode a json string, you will get an object. not an array. So the best way to see the structure you are getting, is to make a var_dump of the decode. (this var_dump can help you understand the structure, mainly in complex cases).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n     &lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;file_get_contents&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/michael/test.json&apos;&lt;/span&gt;);\n     &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;);\n     &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// just to see the structure. It will help you for future cases&lt;/span&gt;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n     &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;){\n         &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$row&lt;/span&gt;-&amp;gt;status;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n     }\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;TRUE&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$json_o&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$string&lt;/span&gt;);\n\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-variable&quot;&gt;$personal&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$person&lt;/span&gt;. &lt;span class=&quot;hljs-string&quot;&gt;&quot; with &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$key&lt;/span&gt; . &lt;span class=&quot;hljs-string&quot;&gt;&quot; is &quot;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$personal&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;;\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The quickest way to echo all json values is using loop in loop, the first loop is going to get all the objects and the second one the values...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$object&lt;/span&gt;) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$object&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;) {\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$value&lt;/span&gt;;\n\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You have to give like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;John&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;]; \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;hljs-variable&quot;&gt;$json_a&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Jennifer&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt;];\n\nbr inside &amp;lt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which gives the result :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;wait\nactive\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am using below code for converting json to array in &lt;code&gt;PHP&lt;/code&gt;,\nIf JSON is valid then &lt;code&gt;json_decode()&lt;/code&gt; works well, and will return an array,\nBut in case of malformed JSON It will return &lt;code&gt;NULL&lt;/code&gt;,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonDecode1&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In case of malformed JSON, it will return NULL&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;jsonDecode1&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;) );\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If in case of malformed JSON, you are expecting only array, then you can use this function,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonDecode2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;) &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In case of malformed JSON, it will return an empty array()&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;jsonDecode2&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;) );\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If in case of malformed JSON, you want to stop code execution, then you can use this function,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?php&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jsonDecode3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;) &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_decode&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_last_error&lt;/span&gt;())){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$arr&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ErrorException&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;json_last_error_msg&lt;/span&gt;() );\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// In case of malformed JSON, Fatal error will be generated&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;var_dump&lt;/span&gt;( &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;jsonDecode3&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$json&lt;/span&gt;) );\n&lt;span class=&quot;hljs-meta&quot;&gt;?&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"447":["\n&lt;p&gt;You are constructing the regular expression by passing a string to the RegExp constructor.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\\&lt;/code&gt; is an escape character in string literals.&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;\\&lt;/code&gt; is consumed by the string literal parsing&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-string&quot;&gt;&quot;foo&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; string = &lt;span class=&quot;hljs-string&quot;&gt;&apos;(\\s|^)&apos;&lt;/span&gt; + foo;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(string);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt; so the data you pass to the RegEx compiler is a plain &lt;code&gt;s&lt;/code&gt; and not &lt;code&gt;\\s&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You need to escape the &lt;code&gt;\\&lt;/code&gt; to express the &lt;code&gt;\\&lt;/code&gt; as data instead of being an escape character itself.&lt;/p&gt;\n    ","\n&lt;p&gt;Inside the code where you&apos;re creating a string, the backslash is a javascript escape character first, which means the escape sequences like &lt;code&gt;\\t&lt;/code&gt;, &lt;code&gt;\\n&lt;/code&gt;, &lt;code&gt;\\&quot;&lt;/code&gt;, etc. will be translated into their javascript counterpart (tab, newline, quote, etc.), and that will be made a part of the string. Double-backslash represents a single backslash in the actual string itself, so if you want a backslash in the string, you escape that first.&lt;/p&gt;\n\n&lt;p&gt;So when you generate a string by saying &lt;code&gt;var someString = &apos;(\\\\s|^)&apos;&lt;/code&gt;, what you&apos;re really doing is creating an actual string with the value &lt;code&gt;(\\s|^)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The Regex needs a string representation of &lt;code&gt;\\s&lt;/code&gt;, which in JavaScript can be produced using the literal &lt;code&gt;&quot;\\\\s&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a live example to illustrate why &lt;code&gt;&quot;\\s&quot;&lt;/code&gt; is not enough: &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One backslash:          \\s\\nDouble backslashes: \\\\s&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Note how an extra &lt;code&gt;\\&lt;/code&gt; before &lt;code&gt;\\s&lt;/code&gt; changes the output.&lt;/p&gt;\n    ","\n&lt;p&gt;As has been said, inside a string literal, a backslash indicates an escape sequence, rather than a literal backslash character, but the RegExp constructor often needs literal backslash characters in the string passed to it, so the code should have &lt;code&gt;\\\\&lt;/code&gt;s to represent a literal backslash, &lt;em&gt;in most cases&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;A problem is that double-escaping metacharacters is tedious. There is one way to pass a string to &lt;code&gt;new RegExp&lt;/code&gt; without having to double escape them: use the &lt;code&gt;String.raw&lt;/code&gt; template tag, an ES6 feature, which allows you to write a string that will be parsed by the interpreter &lt;em&gt;verbatim&lt;/em&gt;, without any parsing of escape sequences. For example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);           &lt;span class=&quot;hljs-comment&quot;&gt;// length 1: an escaped backslash&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;`\\\\`&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);           &lt;span class=&quot;hljs-comment&quot;&gt;// length 1: an escaped backslash&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`\\\\`&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// length 2: no escaping in String.raw!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;So, if you wish to keep your code readable, and you have many backslashes, you may use &lt;code&gt;String.raw&lt;/code&gt; to type only &lt;em&gt;one&lt;/em&gt; backslash, when the pattern requires a backslash:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sentence = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar baz&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`\\bfoo\\sbar\\sbaz\\b`&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(regex.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(sentence));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;But there&apos;s a better option.&lt;/strong&gt; Generally, there&apos;s not much good reason to use &lt;code&gt;new RegExp&lt;/code&gt; unless you need to dynamically create a regular expression from existing variables. Otherwise, you should use regex literals instead, which do not require double-escaping of metacharacters, and do not require writing out &lt;code&gt;String.raw&lt;/code&gt; to keep the pattern readable:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sentence = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar baz&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regex = &lt;span class=&quot;hljs-regexp&quot;&gt;/\\bfoo\\sbar\\sbaz\\b/&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(regex.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(sentence));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Best to only use &lt;code&gt;new RegExp&lt;/code&gt; when the pattern must be created on-the-fly, like in the following snippet:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; sentence = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar baz&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; wordToFind = &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo&apos;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// from user input&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; regex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;`\\b&lt;span class=&quot;hljs-subst&quot;&gt;${wordToFind}&lt;/span&gt;\\b`&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(regex.&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(sentence));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;\\ is used in Strings to escape special characters. If you want a backslash in your string (e.g. for the \\ in \\s) you have to escape it via a backslash. So \\ becomes \\\\ .&lt;/p&gt;\n\n&lt;p&gt;EDIT: Even had to do it here, because \\\\ in my answer turned to \\.&lt;/p&gt;\n    "],"448":["\n&lt;h3&gt;PDF versions of the standard&lt;/h3&gt;\n&lt;p&gt;As of &lt;strike&gt;1st September 2014&lt;/strike&gt; March 2022, the best locations by price for the official C and C++ standards documents in PDF seem to be:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;C++20  ISO/IEC 14882:2020: &lt;a href=&quot;https://www.csagroup.org/store/product/CSA%20ISO%25100IEC%2014882%3A21/?format=PDF&quot; rel=&quot;nofollow noreferrer&quot;&gt;212 CAD (about $165 US) from csagroup.org&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++17  ISO/IEC 14882:2017: &lt;a href=&quot;https://www.standards.govt.nz/shop/isoiec-148822017/&quot; rel=&quot;nofollow noreferrer&quot;&gt;$90 NZD (about $65 US) from Standards New Zealand&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++14  ISO/IEC 14882:2014: &lt;a href=&quot;https://www.standards.govt.nz/shop/isoiec-148822014/&quot; rel=&quot;nofollow noreferrer&quot;&gt;$90 NZD (about $65 US) from Standards New Zealand&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++11  ISO/IEC 14882-2011: &lt;a href=&quot;https://webstore.ansi.org/Standards/INCITS/INCITSISOIEC148822012&quot; rel=&quot;nofollow noreferrer&quot;&gt;$60 from ansi.org&lt;/a&gt; or &lt;a href=&quot;https://www.techstreet.com/standards/incits-iso-iec-14882-2011-2012?product_id=1852925&quot; rel=&quot;nofollow noreferrer&quot;&gt;$60 from Techstreet&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++03  INCITS/ISO/IEC 14882:2003: &lt;a href=&quot;https://webstore.ansi.org/standards/incits/incitsisoiec148822003&quot; rel=&quot;nofollow noreferrer&quot;&gt;$30 from ansi.org&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++98  ISO/IEC 14882:1998: &lt;a href=&quot;https://www.standards.govt.nz/shop/asnzs-148821999/&quot; rel=&quot;nofollow noreferrer&quot;&gt;$95 NZD (about $65 US) from Standards New Zealand&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C17/C18  INCITS/ISO/IEC 9899:2018: &lt;a href=&quot;https://webstore.ansi.org/Standards/INCITS/INCITSISOIEC989920182019&quot; rel=&quot;nofollow noreferrer&quot;&gt;$116 from INCITS/ANSI&lt;/a&gt; / &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2176 / c17_updated_proposed_fdis.pdf draft from November 2017&lt;/a&gt; (Link broken, see &lt;a href=&quot;https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wayback Machine N2176&lt;/a&gt;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C11  ISO/IEC 9899:2011: &lt;a href=&quot;https://webstore.ansi.org/Standards/INCITS/INCITSISOIEC989920112012&quot; rel=&quot;nofollow noreferrer&quot;&gt;$60 from ansi.org&lt;/a&gt; / &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;WG14 draft version N1570&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C99  INCITS/ISO/IEC 9899-1999(R2005): &lt;a href=&quot;https://webstore.ansi.org/Standards/INCITS/INCITSISOIEC98991999R2005&quot; rel=&quot;nofollow noreferrer&quot;&gt;$60 from ansi.org&lt;/a&gt; / &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;WG14 draft version N1256&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C90  ISO/IEC 9899:1990: &lt;a href=&quot;https://www.standards.govt.nz/shop/isoiec-98991990/&quot; rel=&quot;nofollow noreferrer&quot;&gt;$90 NZD (about $65 USD) from Standards New Zealand&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Non-PDF electronic versions of the standard&lt;/h3&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning: most copies of standard drafts are published in PDF format, and errors may have been introduced if the text/HTML was transcribed or automatically generated from the PDF.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;C89  Draft version in ANSI text format: (&lt;a href=&quot;https://web.archive.org/web/20161223125339/http://flash-gordon.me.uk/ansi.c.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://web.archive.org/web/20161223125339/http://flash-gordon.me.uk/ansi.c.txt&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;C89  Draft version as HTML document: (&lt;a href=&quot;http://port70.net/%7Ensz/c/c89/c89-draft.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://port70.net/~nsz/c/c89/c89-draft.html&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;C90 TC1; ISO/IEC 9899 TCOR1, single-page HTML document: (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc1.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc1.htm&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;C90 TC2; ISO/IEC 9899 TCOR2, single-page HTML document: (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc2.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/tc2.htm&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;C99  Draft version (N1256) as HTML document: (&lt;a href=&quot;http://port70.net/%7Ensz/c/c99/n1256.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://port70.net/~nsz/c/c99/n1256.html&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;C11  Draft version (N1570) as HTML document: (&lt;a href=&quot;http://port70.net/%7Ensz/c/c11/n1570.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://port70.net/~nsz/c/c11/n1570.html&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;C++11  Working draft (N3337) as plain text document: (&lt;a href=&quot;http://port70.net/%7Ensz/c/c%2B%2B/c%2B%2B11_n3337.txt&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://port70.net/~nsz/c/c%2B%2B/c%2B%2B11_n3337.txt&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;em&gt;(The site hosting the plain text version of the C++11 working draft also has some C++14 drafts in this format. But none of them are copies of the final working draft, N4140.)&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;Print versions of the standard&lt;/h3&gt;\n&lt;p&gt;Print copies of the standards are available from national standards bodies and &lt;a href=&quot;https://www.iso.org/home.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;ISO&lt;/a&gt; but are very expensive.&lt;/p&gt;\n&lt;p&gt;If you want a hardcopy of the C90 standard for much less money than above, you may be able to find a cheap used copy of &lt;a href=&quot;http://www.catb.org/jargon/html/B/bullschildt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Herb Schildt&lt;/a&gt;&apos;s book &lt;a href=&quot;http://www.davros.org/c/schildt.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;em&gt;The Annotated ANSI Standard&lt;/em&gt;&lt;/a&gt; at &lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0078819520&quot; rel=&quot;nofollow noreferrer&quot;&gt;Amazon&lt;/a&gt;, which contains the actual text of the standard (useful) and commentary on the standard (less useful - it contains several dangerous and misleading errors).&lt;/p&gt;\n&lt;p&gt;The C99 and C++03 standards are available in book form from Wiley and the BSI (British Standards Institute):&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0470846747&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++03 Standard&lt;/a&gt; on Amazon&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0470845732&quot; rel=&quot;nofollow noreferrer&quot;&gt;C99 Standard&lt;/a&gt; on Amazon&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Standards committee draft versions (free)&lt;/h3&gt;\n&lt;p&gt;The working drafts for future standards are often available from the committee websites:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ committee website&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C committee website&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you want to get drafts from the current or earlier C/C++ standards, there are some available for free on the internet:&lt;/p&gt;\n&lt;h3&gt;For C:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;ANSI X3.159-198 (C89):\nI cannot find a PDF of C89, but it is almost the same as C90. The only major differences are in the boilerplate and section numbering, although there are some slight textual differences&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 9899:1990 (C90):\n(Almost the same as ANSI X3.159-198 (C89) except for the frontmatter and section numbering. There is at least one textual difference in section 6.5.7 (previously 3.5.7), where &lt;em&gt;&quot;a list&quot;&lt;/em&gt; became &lt;em&gt;&quot;a brace-enclosed list&quot;&lt;/em&gt;. Note that the conversion between ANSI and ISO/IEC Standard is seen inside this document, the document refers to its name as &quot;ANSI/ISO: 9899/99&quot; although this isn&apos;t the right name of the later made standard of it, the right name is &quot;ISO/IEC 9899:1990&quot;)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;TC1 for C90: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n423.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n423.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There isn&apos;t a PDF link for TC2 on the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/wg14_document_log.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;WG14 website&lt;/a&gt;, sadly.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 9899:1999 (C99 incorporating all three Technical Corrigenda):\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An earlier version of C99 incorporating only TC1 and TC2:\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Working draft for the original (i.e. pre-corrigenda) C99: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n843.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n843.htm&lt;/a&gt; (HTML) and &lt;a href=&quot;http://www.dkuug.dk/JTC1/SC22/WG14/www/docs/n843.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.dkuug.dk/JTC1/SC22/WG14/www/docs/n843.pdf&lt;/a&gt; (PDF).\nNote that there were two later working drafts: N869 and N878, but they seem to have been removed from the WG14 website, so this is the latest one available.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;List of changes between C89/C90 and C99: &lt;a href=&quot;http://port70.net/%7Ensz/c/c89/c9x_changes.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://port70.net/~nsz/c/c89/c9x_changes.html&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;TC1 for C99 (only the TC, not the standard incorporating it): &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/9899tc1/n32071.PDF&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/9899tc1/n32071.PDF&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;TC2 for C99 (only the TC, not the standard incorporating it): &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/9899-1999_cor_2-2004.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/9899-1999_cor_2-2004.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 9899:2011 (C11):\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For information on the differences between N1570 and the final, published version of C11, see &lt;a href=&quot;https://stackoverflow.com/questions/8631228/latest-changes-in-c11/15737472#15737472&quot;&gt;Latest changes in C11&lt;/a&gt; and &lt;a href=&quot;https://groups.google.com/g/comp.std.c/c/v5hsWOu5vSw&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://groups.google.com/g/comp.std.c/c/v5hsWOu5vSw&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 9899:2011/Cor 1:2012 (C11&apos;s only technical corrigendum): This can be viewed at &lt;a href=&quot;https://www.iso.org/obp/ui/#iso:std:iso-iec:9899:ed-3:v1:cor:1:v1:en&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.iso.org/obp/ui/#iso:std:iso-iec:9899:ed-3:v1:cor:1:v1:en&lt;/a&gt; but cannot be downloaded. It is the actual corrigendum, not a draft.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 9899:2018 (C17/C18):\n&lt;a href=&quot;https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf&lt;/a&gt; (N2176)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C2x work-in-progress - latest working draft as of 10th June 2022 (N2912):\n&lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG14/www/docs/n2912.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/JTC1/SC22/WG14/www/docs/n2912.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;For C++:&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:1998 (C++98):\n&lt;a href=&quot;http://www.lirmm.fr/%7Educour/Doc-objets/ISO+IEC+14882-1998.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.lirmm.fr/~ducour/Doc-objets/ISO+IEC+14882-1998.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:2003 (C++03):\n&lt;a href=&quot;https://cs.nyu.edu/courses/fall11/CSCI-GA.2110-003/documents/c++2003std.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://cs.nyu.edu/courses/fall11/CSCI-GA.2110-003/documents/c++2003std.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:2011 (C++11):\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:2014 (C++14):\n&lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:2017 (C++17):\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:2020 (C++20): &lt;a href=&quot;https://isocpp.org/files/papers/N4860.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://isocpp.org/files/papers/N4860.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ISO/IEC 14882:2023 (C++23 work-in-progress. Working draft dated March 17 2022): &lt;a href=&quot;https://open-std.org/JTC1/SC22/WG21/docs/papers/2022/n4910.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://open-std.org/JTC1/SC22/WG21/docs/papers/2022/n4910.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Note that these documents are not the same as the standard, though the versions just prior to the meetings that decide on a standard are usually very close to what is in the final standard. The FCD (Final Committee Draft) versions are password protected; you need to be on the standards committee to get them.&lt;/p&gt;\n&lt;p&gt;Even though the draft versions might be very close to the final ratified versions of the standards, some of this post&apos;s editors would strongly advise you to get a copy of the actual documents  especially if you&apos;re planning on quoting them as references. Of course, starving students should go ahead and use the drafts if strapped for cash.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;It appears that, if you are willing and able to wait a few months after ratification of a standard, to search for &quot;INCITS/ISO/IEC&quot; instead of &quot;ISO/IEC&quot; when looking for a standard is the key. By doing so, one of this post&apos;s editors was able to find the C11 and C++11 standards at reasonable prices. For example, if you search for &quot;INCITS/ISO/IEC 9899:2011&quot; instead of &quot;ISO/IEC 9899:2011&quot; on &lt;a href=&quot;https://webstore.ansi.org&quot; rel=&quot;nofollow noreferrer&quot;&gt;webstore.ansi.org&lt;/a&gt; you will find the reasonably priced PDF version.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The site &lt;a href=&quot;https://wg21.link/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://wg21.link/&lt;/a&gt; provides short-URL links to the C++ current working draft and draft standards, and committee papers:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://wg21.link/std11&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://wg21.link/std11&lt;/a&gt; - C++11&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://wg21.link/std14&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://wg21.link/std14&lt;/a&gt; - C++14&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://wg21.link/std17&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://wg21.link/std17&lt;/a&gt; - C++17&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://wg21.link/std20&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://wg21.link/std20&lt;/a&gt; - C++20&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://wg21.link/std&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://wg21.link/std&lt;/a&gt; - current working draft (as of May 2022 still points to the 2021 version)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;The current draft of the standard is maintained as LaTeX sources on &lt;a href=&quot;https://github.com/cplusplus/draft&quot; rel=&quot;nofollow noreferrer&quot;&gt;Github&lt;/a&gt;. These sources can be converted to HTML using &lt;a href=&quot;https://github.com/Eelis/cxxdraft-htmlgen&quot; rel=&quot;nofollow noreferrer&quot;&gt;cxxdraft-htmlgen&lt;/a&gt;. The following sites maintain HTML pages so generated:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Tim Song - &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Current working draft&lt;/a&gt; - &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n3337/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++11&lt;/a&gt; - &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4140/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++14&lt;/a&gt; - &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4659/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++17&lt;/a&gt; - &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4861/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++20&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Eelis - &lt;a href=&quot;http://eel.is/c++draft/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Current working draft&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/timsong-cpp/cppwp&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tim Song&lt;/a&gt; also maintains generated HTML and PDF versions of the Networking TS and Ranges TS.&lt;/p&gt;\n&lt;h3&gt;POSIX extensions to the C standard&lt;/h3&gt;\n&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot; rel=&quot;nofollow noreferrer&quot;&gt;POSIX&lt;/a&gt; standard (IEEE 1003.1) requires a compliant operating system to include a C compiler. This compiler must in turn be compliant with the C standard, and must also support various extensions defined in the &quot;System Interfaces&quot; section of POSIX (such as the &lt;code&gt;off_t&lt;/code&gt; data type, the &lt;code&gt;&amp;lt;aio.h&amp;gt;&lt;/code&gt; header, the &lt;code&gt;clock_gettime()&lt;/code&gt; function and the &lt;code&gt;_POSIX_C_SOURCE&lt;/code&gt; macro.)&lt;/p&gt;\n&lt;p&gt;So if you&apos;ve tried to look up a particular function, been informed &quot;This function is part of POSIX, not the C standard&quot;, and wondered why an operating system standard was mandating compiler features and language extensions... now you know!&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;POSIX.1-2001: The System Interfaces section can be downloaded as a separate document from &lt;a href=&quot;https://mirror.math.princeton.edu/pub/oldlinux/download/c951.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mirror.math.princeton.edu/pub/oldlinux/download/c951.pdf&lt;/a&gt;. Section 1.7 states that the relevant version of the C standard is C99.&lt;/p&gt;\n&lt;p&gt;The &quot;Shell and Utilities&quot; section (&lt;a href=&quot;https://mirror.math.princeton.edu/pub/oldlinux/download/c952.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://mirror.math.princeton.edu/pub/oldlinux/download/c952.pdf&lt;/a&gt;) mandates not only that a C99-compliant compiler should exist, but that it should be invokable from the command line under the name &quot;c99&quot;. One way in which this can be implemented is to place a shell script called &quot;c99&quot; in /usr/bin, which calls gcc with the &lt;code&gt;-std=c99&lt;/code&gt; option added to the list of command-line parameters, and blocks any competing standards from being specified.&lt;/p&gt;\n&lt;p&gt;POSIX.1-2001 had two technical corrigenda, one dated 2002 and one dated 2004. I don&apos;t think they&apos;re incorporated into the documents as linked above. There&apos;s an online HTML version incorporating the corrigenda at &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/009695399/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://pubs.opengroup.org/onlinepubs/009695399/&lt;/a&gt; - but I should add that I&apos;ve had some trouble with the search box and so using Google to search the site is probably your best bet.&lt;/p&gt;\n&lt;p&gt;There is a paywalled link to download the first corrigendum at &lt;a href=&quot;https://standards.ieee.org/standard/1003_1-2001-Cor1-2002.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://standards.ieee.org/standard/1003_1-2001-Cor1-2002.html&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;There is also a paywalled link for the second at &lt;a href=&quot;https://standards.ieee.org/standard/1003_1-2001-Cor2-2004.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://standards.ieee.org/standard/1003_1-2001-Cor2-2004.html&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;There is a draft version of POSIX.1-2008 at &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/open/n4217.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.open-std.org/jtc1/sc22/open/n4217.pdf&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;POSIX.1-2008 also had two technical corrigenda, the latter of the two being dated 2016. There is an online HTML version of the standard incorporating the corrigenda at &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799.2016edition/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799.2016edition/&lt;/a&gt; - though, again, I have had situations where the site&apos;s own search box wasn&apos;t good for finding information.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;There is an online HTML version of POSIX.1-2017 at &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/&lt;/a&gt; - though, again, I recommend using Google instead of that site&apos;s searchbox. According to the &lt;a href=&quot;https://www.opengroup.org/austin/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Open Group website&lt;/a&gt; &quot;IEEE 1003.1-2017 ... is a revision to the 1003.1-2008 standard to rollup the standard including its two technical corrigenda (as-is)&quot;. &lt;a href=&quot;https://man7.org/linux/man-pages/man7/standards.7.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Linux manpages&lt;/a&gt; describe it as &quot;technically identical&quot; to POSIX.1-2008 with Technical Corrigenda 1 and 2 applied. This is therefore not a major revision and does not change the value of the &lt;code&gt;_POSIX_C_SOURCE&lt;/code&gt; macro.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Online versions of the standard can be found:&lt;/p&gt;\n&lt;h3&gt;Working Draft, Standard for Programming Language C++&lt;/h3&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The following all draft versions of the standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nAll the following are freely downloadable&lt;br&gt;\n2022-03-17: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4910.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4910&lt;/a&gt;&lt;br&gt;\n2021-06-18: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4892.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4892&lt;/a&gt;&lt;br&gt;\n2021-03-17: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4885.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4885&lt;/a&gt;&lt;br&gt;\n2020-12-15: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4878.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4878&lt;/a&gt;&lt;br&gt;\n2020-10-18: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4868.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4868&lt;/a&gt;&lt;br&gt;\n2020-04-08: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4861&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;This is the C++20 Standard:&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;\nThis version requires Authentication&lt;br&gt;\n2020-04-08: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4860.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4860&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The following all draft versions of the standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nAll the following are freely downloadable&lt;br&gt;\n(many of these can be found at this &lt;a href=&quot;https://github.com/cplusplus/draft/tree/master/papers&quot; rel=&quot;nofollow noreferrer&quot;&gt;main GitHub link&lt;/a&gt;)&lt;br&gt;\n2020-01-14: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4849.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4849&lt;/a&gt;&lt;br&gt;\n2019-11-27: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4842.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4842&lt;/a&gt;&lt;br&gt;\n2019-10-08: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4835.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4835&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4835.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2019-08-15: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4830.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4830&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers//n4830.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2019-06-17: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4820.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4820&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4820.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2019-03-15: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4810.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4810&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4810.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2019-01-21: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4800.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4800&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4800.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2018-11-26: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4791.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4791&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4791.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2018-10-08: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4778.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4778&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4778.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2018-07-07: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4762.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4762&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4762.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2018-05-07: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4750.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4750&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4750.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2018-04-02: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4741.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4741&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4741.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2018-02-12: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4727.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4727&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4727.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2017-11-27: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4713.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4713&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4713.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2017-10-16: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4700.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4700&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4700.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2017-07-30: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4687.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4687&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4687.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;This is the old C++17 Standard:&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;\nThis version requires Authentication&lt;br&gt;\n2017-03-21: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4660.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4660&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The following all draft versions of the standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nAll the following are freely downloadable&lt;br&gt;\n2017-03-21: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4659&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4659.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2017-02-06: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4640.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4640&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4640.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2016-11-28: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4618.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4618&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4618.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2016-07-12: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4606.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4606&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4606.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2016-05-30: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4594.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4594&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4594.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2016-03-19: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4582.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4582&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4582.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2015-11-09: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4567.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4567&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4567.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2015-05-22: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4527.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4527&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4527.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2015-04-10: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4431.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4431&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4431.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2014-11-19: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4296&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4296.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;This is the old C++14 standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nThese version requires Authentication&lt;br&gt;\n2014-10-07: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4140.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4140&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt; Essentially C++14 with minor errors and typos corrected&lt;br&gt;\n2014-09-02: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4141.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N4141&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/tree/n4141&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt; Standard C++14&lt;br&gt;\n2014-03-02: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n3937.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3937&lt;/a&gt;&lt;br&gt;\n2014-03-02: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n3936.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3936&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/b7b8ed08ba4c111ad03e13e8524a1b746cb74ec6/papers/N3936.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The following all draft versions of the standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nAll the following are freely downloadable&lt;br&gt;\n2013-10-13: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3797&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/blob/master/papers/N3797.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt;&lt;br&gt;\n2013-05-16: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3691.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3691&lt;/a&gt;&lt;br&gt;\n2013-05-15: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3690&lt;/a&gt;&lt;br&gt;\n2012-11-02: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3485.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3485&lt;/a&gt;&lt;br&gt;\n2012-02-28: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3376.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3376&lt;/a&gt;&lt;br&gt;\n2012-01-16: &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3337&lt;/a&gt; &lt;a href=&quot;https://github.com/cplusplus/draft/tree/n3337&quot; rel=&quot;nofollow noreferrer&quot;&gt;git&lt;/a&gt; Essentially C++11 with minor errors and typos corrected&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;This is the old C++11 Standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nThis version requires Authentication&lt;br&gt;\n2011-04-05: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n3291.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3291&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The following all draft versions of the standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nAll the following are freely downloadable&lt;br&gt;\n2011-02-28: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2011/n3242.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3242&lt;/a&gt;  (differences from N3291 very minor)&lt;br&gt;\n2010-11-27: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3225.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3225&lt;/a&gt;&lt;br&gt;\n2010-08-21: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3126.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3126&lt;/a&gt;&lt;br&gt;\n2010-03-29: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3090.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3090&lt;/a&gt;&lt;br&gt;\n2010-02-16: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2010/n3035.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3035&lt;/a&gt;&lt;br&gt;\n2009-11-09: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n3000.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3000&lt;/a&gt;&lt;br&gt;\n2009-09-25: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n2960.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2960&lt;/a&gt;&lt;br&gt;\n2009-06-22: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n2914.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2914&lt;/a&gt;&lt;br&gt;\n2009-03-23: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2009/n2857.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2857&lt;/a&gt;&lt;br&gt;\n2008-10-04: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2798.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2798&lt;/a&gt;&lt;br&gt;\n2008-08-25: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2723.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2723&lt;/a&gt;&lt;br&gt;\n2008-06-27: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2691.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2691&lt;/a&gt;&lt;br&gt;\n2008-05-19: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2606.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2606&lt;/a&gt;&lt;br&gt;\n2008-03-17: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2588.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2588&lt;/a&gt;&lt;br&gt;\n2008-02-04: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2521.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2521&lt;/a&gt;&lt;br&gt;\n2007-10-22: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2461.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2461&lt;/a&gt;&lt;br&gt;\n2007-08-06: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2369.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2369&lt;/a&gt;&lt;br&gt;\n2007-06-25: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2315.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2315&lt;/a&gt;&lt;br&gt;\n2007-05-07: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2007/n2284.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2284&lt;/a&gt;&lt;br&gt;\n2006-11-03: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2006/n2134.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2134&lt;/a&gt;&lt;br&gt;\n2006-04-21: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2006/n2009.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N2009&lt;/a&gt;&lt;br&gt;\n2005-10-19: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1905.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1905&lt;/a&gt;&lt;br&gt;\n2005-04-27: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2005/n1804.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1804&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;This is the old C++03 Standard:&lt;/strong&gt;&lt;br&gt;\nAll the below versions require Authentication&lt;br&gt;\n2004-11-05: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n1733.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1733&lt;/a&gt;&lt;br&gt;\n2004-07-16: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n1655.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1655&lt;/a&gt; Unofficial&lt;br&gt;\n2004-02-07: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/prot/14882fdis/n1577.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1577&lt;/a&gt; C++03 (Or Very Close)&lt;br&gt;\n2001-09-13: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2001/n1316&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1316&lt;/a&gt; Draft Expanded Technical Corrigendum&lt;br&gt;\n1997-00-00: N1117   Draft Expanded Technical Corrigendum&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;&lt;strong&gt;The following all draft versions of the standard&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt;\nAll the following are freely downloadable&lt;br&gt;\n1996-00-00: &lt;a href=&quot;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/1996/N0836.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N0836&lt;/a&gt;  Draft Expanded Technical Corrigendum&lt;br&gt;\n1995-00-00: N0785 Working Paper for Draft Proposed International Standard for Information Systems - Programming Language C++&lt;/p&gt;\n&lt;h3&gt;Other Interesting Papers:&lt;/h3&gt;\n&lt;p&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2022&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2021&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2020&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2019&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2018&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2017&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2016&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2015&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2014&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2013&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2012&lt;/a&gt; /\n&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/&quot; rel=&quot;nofollow noreferrer&quot;&gt;2011&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;C99 is &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot; rel=&quot;noreferrer&quot;&gt;available online&lt;/a&gt;. Quoted from &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/standards.html#9899&quot; rel=&quot;noreferrer&quot;&gt;www.open-std.org&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The lastest publically available version of the standard is the\n  combined C99 + TC1 + TC2 + TC3, &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot; rel=&quot;noreferrer&quot;&gt;WG14 N1256&lt;/a&gt;, dated 2007-09-07. This is\n  a WG14 working paper, but it reflects the consolidated standard at the\n  time of issue.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Draft Links:&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;C++11 (+editorial fixes): N3337 &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n3337/&quot; rel=&quot;noreferrer&quot;&gt;HTML&lt;/a&gt;, &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf&quot; rel=&quot;noreferrer&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;C++14 (+editorial fixes): N4140 &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4140/&quot; rel=&quot;noreferrer&quot;&gt;HTML&lt;/a&gt;, &lt;a href=&quot;https://timsong-cpp.github.io/cppwp/n4140/draft.pdf&quot; rel=&quot;noreferrer&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;C11 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot; rel=&quot;noreferrer&quot;&gt;N1570&lt;/a&gt; (&lt;a href=&quot;http://www.iso-9899.info/n1570.html&quot; rel=&quot;noreferrer&quot;&gt;text&lt;/a&gt;)&lt;/p&gt;\n&lt;p&gt;C99 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot; rel=&quot;noreferrer&quot;&gt;N1256&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;http://clc-wiki.net/wiki/c_standard#Drafts&quot; rel=&quot;noreferrer&quot;&gt;Drafts&lt;/a&gt; of the Standard are circulated for comment prior to ratification and publication.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;http://herbsutter.com/2010/03/03/where-can-you-get-the-iso-c-standard-and-what-does-open-standard-mean/&quot; rel=&quot;noreferrer&quot;&gt;Note&lt;/a&gt; that a working draft is not the standard currently in force, and it is not exactly the published standard&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;You might find the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3225.pdf&quot; rel=&quot;noreferrer&quot;&gt;draft international standard&lt;/a&gt; for C++0x useful.&lt;/p&gt;\n    ","\n&lt;p&gt;ISO standards cost money, from a moderate amount (for a PDF version), to a bit more (for a book version).&lt;/p&gt;\n\n&lt;p&gt;While they aren&apos;t finalised however, they can usually be found online, as drafts. Most of the times the final version doesn&apos;t differ significantly from the last draft, so while not perfect, they&apos;ll suit just fine.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.justsoftwaresolutions.co.uk/cplusplus/new-cplusplus-draft-and-concurrency-papers.html&quot; rel=&quot;noreferrer&quot;&gt;C++ 0x draft&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The C99 and C++03 standards are available in book form from Wiley:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0470846747&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ Standard on Amazon&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0470845732&quot; rel=&quot;nofollow noreferrer&quot;&gt;C Standard on Amazon&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Plus, as already mentioned, the working draft for future standards is often available from the committee websites:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C++ committee website&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/&quot; rel=&quot;nofollow noreferrer&quot;&gt;C committee website&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The C-201x draft is available as &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1336.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N1336&lt;/a&gt;, and the C++0x draft as &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3225.pdf&quot; rel=&quot;nofollow noreferrer&quot;&gt;N3225&lt;/a&gt;. &lt;/p&gt;\n    ","\n&lt;p&gt;The text of a &lt;a href=&quot;http://www.bsb.me.uk/ansi-c/ansi-c-one-file&quot; rel=&quot;nofollow noreferrer&quot;&gt;draft of the ANSI C standard&lt;/a&gt; (aka C.89) is available online. This was standardized by the ANSI committee prior to acceptance by the ISO C Standard (C.90), so the numbering of the sections differ (ANSI sections 2 through 4 correspond roughly to ISO sections 5 through 7), although the content is (supposed to be) largely identical. &lt;/p&gt;\n    ","\n&lt;p&gt;The ISO C and C++ standards are bloody expensive. On the other hand, the INCITS republishes them for a lot less. &lt;a href=&quot;http://www.techstreet.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.techstreet.com/&lt;/a&gt; seems to have the PDF for $30\n(search for INCITS/ISO/IEC 14882:2003).&lt;/p&gt;\n\n&lt;p&gt;Hardcopy versions are available, too. Look for the British Standards Institute versions, published by Wiley.&lt;/p&gt;\n    ","\n&lt;p&gt;The actual standards documents may not be the most useful.  Most compilers do not fully implement the standards and may sometimes actually conflict.  So the compiler documentation that you would already have will be more useful.  Additionally, the documentation will contain platform-specific remarks and notes on any caveats.&lt;/p&gt;\n    ","\n&lt;p&gt;Although not an actual standard, there is an amendment to ISO C (C89/90) called C94/95, or Normative Addendum 1. It was integrated into C99, although some compilers such as &lt;a href=&quot;http://clang.llvm.org/docs/UsersManual.html&quot; rel=&quot;nofollow&quot;&gt;Clang&lt;/a&gt; allow you to specifiy &lt;code&gt;-std=c94&lt;/code&gt; on the command line. ISO/IEC 9899:1990/Amd 1:1995 can be purchased for a hefty price from &lt;a href=&quot;http://infostore.saiglobal.com/store/Details.aspx?DocN=isoc000767513&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;SAI GLOBAL&lt;/strong&gt;&lt;/a&gt; (PDF or hard copy).&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://clc-wiki.net/wiki/The_C_Standard&quot; rel=&quot;nofollow&quot;&gt;http://clc-wiki.net/wiki/The_C_Standard&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;A summary of the document can be found &lt;a href=&quot;http://www.lysator.liu.se/c/na1.html&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When the (then draft) ANSI C Standard was being considered for\n  adoption of an International Standard in 1990, there were several\n  objections because it didn&apos;t address internationalization issues. \n  Because the Standard had already been several years in the making, it\n  was agreed that a few changes would be made to provide the basis (for\n  example, the functions in subclause 7.10.7 were added), and work would\n  be carried out separately to provide proper internationalization of\n  the Standard.  This work has culminated in Normative Addendum 1.&lt;/p&gt;\n  \n  &lt;p&gt;Normative Addendum 1 embodies C&apos;s reaction to both the limitations and\n  promises of international character sets.  Digraphs and the \n  header were meant to improve the appearance of C programs written in\n  national variants of ISO 646 without, e.g., { or } characters.  On the\n  other end of the spectrum, the facilities connected to  and\n   extend the old Standard&apos;s barely adequate basis into a\n  complete and consistent set of utilities for handling wide characters\n  and multibyte strings.&lt;/p&gt;\n  \n  &lt;p&gt;This document summarizes Normative Addendum 1.  It is intended to\n  quickly inform readers who are already familiar with the Standard; it\n  does not, and cannot, introduce the complex subject matter behind NA1,\n  nor can it replace the original document as a reference manual. \n  (Nevertheless, it tries to be as accurate as possible, and its author\n  would like to hear about any errors or omissions.)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.lysator.liu.se/c/na1.html&quot; rel=&quot;nofollow&quot;&gt;http://www.lysator.liu.se/c/na1.html&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    "],"449":["\n&lt;p&gt;You can use &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.convert.tohexstring&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Convert.ToHexString&lt;/code&gt;&lt;/a&gt; starting with .NET 5. &lt;br&gt;\nThere&apos;s also a method for the reverse operation: &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.convert.fromhexstring&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Convert.FromHexString&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;For older versions of .NET you can either use:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] ba&lt;/span&gt;)&lt;/span&gt;\n{\n  StringBuilder hex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(ba.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ba)\n    hex.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0:x2}&quot;&lt;/span&gt;, b);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hex.ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] ba&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; BitConverter.ToString(ba).Replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are even more variants of doing it, for example &lt;a href=&quot;https://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/3928b8cb-3703-4672-8ccd-33718148d1e3/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;The reverse conversion would go like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;StringToByteArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;String hex&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; NumberChars = hex.Length;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[NumberChars / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; NumberChars; i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    bytes[i / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = Convert.ToByte(hex.Substring(i, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;Using &lt;code&gt;Substring&lt;/code&gt; is the best option in combination with &lt;code&gt;Convert.ToByte&lt;/code&gt;. See &lt;a href=&quot;https://stackoverflow.com/a/26304129&quot;&gt;this answer&lt;/a&gt; for more information. If you need better performance, you must avoid &lt;code&gt;Convert.ToByte&lt;/code&gt; before you can drop &lt;code&gt;SubString&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Performance Analysis&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;Note: new leader as of 2015-08-20.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;I ran each of the various conversion methods through some crude &lt;code&gt;Stopwatch&lt;/code&gt; performance testing, a run with a random sentence (n=61, 1000 iterations) and a run with a Project Gutenburg text (n=1,238,957, 150 iterations). Here are the results, roughly from fastest to slowest. All measurements are in ticks (&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.timespan.tickspermillisecond.aspx&quot; rel=&quot;noreferrer&quot;&gt;10,000 ticks = 1 ms&lt;/a&gt;) and all relative notes are compared to the [slowest] &lt;code&gt;StringBuilder&lt;/code&gt; implementation. For the code used, see below or the &lt;a href=&quot;https://github.com/patridge/PerformanceStubs&quot; rel=&quot;noreferrer&quot;&gt;test framework repo&lt;/a&gt; where I now maintain the code for running this.&lt;/p&gt;\n\n&lt;h2&gt;Disclaimer&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;WARNING: Do not rely on these stats for anything concrete; they are simply a sample run of sample data. If you really need top-notch performance, please test these methods in an environment representative of your production needs with data representative of what you will use.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h2&gt;Results&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/24343727/48700&quot;&gt;Lookup by byte &lt;code&gt;unsafe&lt;/code&gt; (via CodesInChaos)&lt;/a&gt; (added to test repo by &lt;a href=&quot;https://github.com/airbreather&quot; rel=&quot;noreferrer&quot;&gt;airbreather&lt;/a&gt;)\n\n&lt;ul&gt;\n&lt;li&gt;Text: 4,727.85 (105.2X)&lt;/li&gt;\n&lt;li&gt;Sentence: 0.28 (99.7X)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/24343727/48700&quot;&gt;Lookup by byte (via CodesInChaos)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 10,853.96 (45.8X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 0.65 (42.7X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/14333437/48700&quot;&gt;Byte Manipulation 2 (via CodesInChaos)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 12,967.69 (38.4X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 0.73 (37.9X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/632920/48700&quot;&gt;Byte Manipulation (via Waleed Eissa)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 16,856.64 (29.5X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 0.70 (39.5X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/5919521/48700&quot;&gt;Lookup/Shift (via Nathan Moinvaziri)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 23,201.23 (21.4X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 1.24 (22.3X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/blambert/2009/02/22/blambertcodesnip-fast-byte-array-to-hex-string-conversion/&quot; rel=&quot;noreferrer&quot;&gt;Lookup by nibble (via Brian Lambert)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 23,879.41 (20.8X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 1.15 (23.9X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311179/48700&quot;&gt;&lt;code&gt;BitConverter&lt;/code&gt; (via Tomalak)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 113,269.34 (4.4X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 9.98 (2.8X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2556329/48700&quot;&gt;&lt;code&gt;{SoapHexBinary}.ToString&lt;/code&gt; (via Mykroft)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 178,601.39 (2.8X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 10.68 (2.6X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311382/48700&quot;&gt;&lt;code&gt;{byte}.ToString(&quot;X2&quot;)&lt;/code&gt; (using &lt;code&gt;foreach&lt;/code&gt;) (derived from Will Dean&apos;s answer)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 308,805.38 (2.4X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 16.89 (2.4X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/3824807/48700&quot;&gt;&lt;code&gt;{byte}.ToString(&quot;X2&quot;)&lt;/code&gt; (using &lt;code&gt;{IEnumerable}.Aggregate&lt;/code&gt;, requires System.Linq) (via Mark)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 352,828.20 (2.1X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 16.87 (2.4X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311382/48700&quot;&gt;&lt;code&gt;Array.ConvertAll&lt;/code&gt; (using &lt;code&gt;string.Join&lt;/code&gt;) (via Will Dean)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 675,451.57 (1.1X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 17.95 (2.2X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311382/48700&quot;&gt;&lt;code&gt;Array.ConvertAll&lt;/code&gt; (using &lt;code&gt;string.Concat&lt;/code&gt;, requires .NET 4.0) (via Will Dean)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 752,078.70 (1.0X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 18.28 (2.2X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311179/48700&quot;&gt;&lt;code&gt;{StringBuilder}.AppendFormat&lt;/code&gt; (using &lt;code&gt;foreach&lt;/code&gt;) (via Tomalak)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 672,115.77 (1.1X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 36.82 (1.1X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311179/48700&quot;&gt;&lt;code&gt;{StringBuilder}.AppendFormat&lt;/code&gt; (using &lt;code&gt;{IEnumerable}.Aggregate&lt;/code&gt;, requires System.Linq) (derived from Tomalak&apos;s answer)&lt;/a&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Text: 718,380.63 (1.0X faster)&lt;/li&gt;\n&lt;li&gt;Sentence: 39.71 (1.0X faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Lookup tables have taken the lead over byte manipulation. Basically, there is some form of precomputing what any given nibble or byte will be in hex. Then, as you rip through the data, you simply look up the next portion to see what hex string it would be. That value is then added to the resulting string output in some fashion. For a long time byte manipulation, potentially harder to read by some developers, was the top-performing approach.&lt;/p&gt;\n\n&lt;p&gt;Your best bet is still going to be finding some representative data and trying it out in a production-like environment. If you have different memory constraints, you may prefer a method with fewer allocations to one that would be faster but consume more memory.&lt;/p&gt;\n\n&lt;h2&gt;Testing Code&lt;/h2&gt;\n\n&lt;p&gt;Feel free to play with the testing code I used. A version is included here but feel free to clone the &lt;a href=&quot;https://github.com/patridge/PerformanceStubs&quot; rel=&quot;noreferrer&quot;&gt;repo&lt;/a&gt; and add your own methods. Please submit a pull request if you find anything interesting or want to help improve the testing framework it uses.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Add the new static method (&lt;code&gt;Func&amp;lt;byte[], string&amp;gt;&lt;/code&gt;) to /Tests/ConvertByteArrayToHexString/Test.cs.&lt;/li&gt;\n&lt;li&gt;Add that method&apos;s name to the &lt;code&gt;TestCandidates&lt;/code&gt; return value in that same class.&lt;/li&gt;\n&lt;li&gt;Make sure you are running the input version you want, sentence or text, by toggling the comments in &lt;code&gt;GenerateTestInput&lt;/code&gt; in that same class.&lt;/li&gt;\n&lt;li&gt;Hit &lt;kbd&gt;F5&lt;/kbd&gt; and wait for the output (an HTML dump is also generated in the /bin folder).&lt;/li&gt;\n&lt;/ol&gt;\n\n\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaStringJoinArrayConvertAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Join(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Empty, Array.ConvertAll(bytes, b =&amp;gt; b.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;)));\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaStringConcatArrayConvertAll&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Concat(Array.ConvertAll(bytes, b =&amp;gt; b.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;)));\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaBitConverter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hex = BitConverter.ToString(bytes);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hex.Replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaStringBuilderAggregateByteToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes.Aggregate(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (sb, b) =&amp;gt; sb.Append(b.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;))).ToString();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaStringBuilderForEachByteToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    StringBuilder hex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; bytes)\n        hex.Append(b.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hex.ToString();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaStringBuilderAggregateAppendFormat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes.Aggregate(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (sb, b) =&amp;gt; sb.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0:X2}&quot;&lt;/span&gt;, b)).ToString();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexStringViaStringBuilderForEachAppendFormat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    StringBuilder hex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; bytes)\n        hex.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0:X2}&quot;&lt;/span&gt;, b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hex.ToString();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaByteManipulation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++) {\n        b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(bytes[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(b &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? b + &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : b + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n        b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(bytes[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;));\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(b &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? b + &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : b + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaByteManipulation2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++) {\n        b = bytes[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt; + b + (((b - &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;));\n        b = bytes[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;;\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt; + b + (((b - &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaSoapHexBinary&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    SoapHexBinary soapHexBinary = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SoapHexBinary(bytes);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; soapHexBinary.ToString();\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookupAndShift&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    StringBuilder result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hexAlphabet = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0123456789ABCDEF&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; bytes) {\n        result.Append(hexAlphabet[(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)(b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)]);\n        result.Append(hexAlphabet[(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)(b &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;)]);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result.ToString();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;* _lookup32UnsafeP = (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;*)GCHandle.Alloc(_Lookup32, GCHandleType.Pinned).AddrOfPinnedObject();\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookup32UnsafeDirect&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lookupP = _lookup32UnsafeP;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;((&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;* bytesP = bytes)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* resultP = result) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;* resultP2 = (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;*)resultP;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++) {\n            resultP2[i] = lookupP[bytesP[i]];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[] _Lookup32 = Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;).Select(i =&amp;gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s = i.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n}).ToArray();\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookupPerByte&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = _Lookup32[bytes[i]];\n        result[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)val;\n        result[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;) (val &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(result);\n}\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] hexStringTable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[] {\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;00&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;01&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;02&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;03&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;04&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;05&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;06&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;07&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;08&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;09&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;11&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;13&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;14&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;15&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;16&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;17&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;18&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;19&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;1F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;20&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;21&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;22&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;23&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;24&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;25&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;26&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;27&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;28&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;29&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;2F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;31&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;32&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;33&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;34&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;35&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;36&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;37&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;38&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;39&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;3F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;40&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;41&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;42&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;43&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;44&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;45&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;46&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;47&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;48&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;49&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;4A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;4B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;4C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;4D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;4E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;4F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;50&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;51&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;52&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;53&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;54&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;55&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;56&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;57&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;58&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;59&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;5A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;5B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;5C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;5D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;5E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;5F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;60&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;61&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;62&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;63&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;64&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;65&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;66&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;67&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;68&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;69&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;6A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;6B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;6C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;6D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;6E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;6F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;70&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;71&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;72&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;73&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;74&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;75&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;76&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;77&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;78&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;79&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;7A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;7B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;7C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;7D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;7E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;7F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;80&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;81&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;82&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;83&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;84&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;85&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;86&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;87&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;88&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;89&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;8F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;90&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;91&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;92&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;93&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;94&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;95&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;96&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;97&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;98&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;99&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;9A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;9B&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;9C&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;9D&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;9E&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;9F&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;A0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;AA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;AB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;AC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;AD&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;AE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;AF&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;B0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BD&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BF&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;C0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;C9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CD&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;CF&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;D0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;D9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DD&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;DF&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;E0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;E9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ED&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EF&quot;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-string&quot;&gt;&quot;F0&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F6&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F7&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F8&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;F9&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FA&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FB&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FC&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FD&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FE&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FF&quot;&lt;/span&gt;,\n    };\n    StringBuilder result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; bytes) {\n        result.Append(hexStringTable[b]);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result.ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Update (2010-01-13)&lt;/h3&gt;\n\n&lt;p&gt;Added Waleed&apos;s answer to analysis. Quite fast.&lt;/p&gt;\n\n&lt;h3&gt;Update (2011-10-05)&lt;/h3&gt;\n\n&lt;p&gt;Added &lt;code&gt;string.Concat&lt;/code&gt; &lt;code&gt;Array.ConvertAll&lt;/code&gt; variant for completeness (requires .NET 4.0). On par with &lt;code&gt;string.Join&lt;/code&gt; version.&lt;/p&gt;\n\n&lt;h3&gt;Update (2012-02-05)&lt;/h3&gt;\n\n&lt;p&gt;Test repo includes more variants such as &lt;code&gt;StringBuilder.Append(b.ToString(&quot;X2&quot;))&lt;/code&gt;. None upset the results any. &lt;code&gt;foreach&lt;/code&gt; is faster than &lt;code&gt;{IEnumerable}.Aggregate&lt;/code&gt;, for instance, but &lt;code&gt;BitConverter&lt;/code&gt; still wins.&lt;/p&gt;\n\n&lt;h3&gt;Update (2012-04-03)&lt;/h3&gt;\n\n&lt;p&gt;Added Mykroft&apos;s &lt;code&gt;SoapHexBinary&lt;/code&gt; answer to analysis, which took over third place.&lt;/p&gt;\n\n&lt;h3&gt;Update (2013-01-15)&lt;/h3&gt;\n\n&lt;p&gt;Added CodesInChaos&apos;s byte manipulation answer, which took over first place (by a large margin on large blocks of text).&lt;/p&gt;\n\n&lt;h3&gt;Update (2013-05-23)&lt;/h3&gt;\n\n&lt;p&gt;Added Nathan Moinvaziri&apos;s lookup answer and the variant from Brian Lambert&apos;s blog. Both rather fast, but not taking the lead on the test machine I used (AMD Phenom 9750).&lt;/p&gt;\n\n&lt;h3&gt;Update (2014-07-31)&lt;/h3&gt;\n\n&lt;p&gt;Added @CodesInChaos&apos;s new byte-based lookup answer. It appears to have taken the lead on both the sentence tests and the full-text tests.&lt;/p&gt;\n\n&lt;h3&gt;Update (2015-08-20)&lt;/h3&gt;\n\n&lt;p&gt;Added &lt;a href=&quot;https://github.com/airbreather&quot; rel=&quot;noreferrer&quot;&gt;airbreather&apos;s&lt;/a&gt; optimizations and &lt;code&gt;unsafe&lt;/code&gt; variant to this &lt;a href=&quot;https://github.com/patridge/PerformanceStubs&quot; rel=&quot;noreferrer&quot;&gt;answer&apos;s repo&lt;/a&gt;. If you want to play in the unsafe game, you can get some huge performance gains over any of the prior top winners on both short strings and large texts.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a class called &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.runtime.remoting.metadata.w3cxsd2001.soaphexbinary.aspx&quot; rel=&quot;noreferrer&quot;&gt;SoapHexBinary&lt;/a&gt; that does exactly what you want.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System.Runtime.Remoting.Metadata.W3cXsd2001;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;GetStringToBytes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n{\n    SoapHexBinary shb = SoapHexBinary.Parse(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; shb.Value;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetBytesToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n{\n    SoapHexBinary shb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SoapHexBinary(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; shb.ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When writing crypto code it&apos;s common to avoid data dependent branches and table lookups to ensure the runtime doesn&apos;t depend on the data, since data dependent timing can lead to side-channel attacks.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s also pretty fast.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteToHexBitFiddle&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++) {\n        b = bytes[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt; + b + (((b&lt;span class=&quot;hljs-number&quot;&gt;-10&lt;/span&gt;)&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;)&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;));\n        b = bytes[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;;\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt; + b + (((b&lt;span class=&quot;hljs-number&quot;&gt;-10&lt;/span&gt;)&amp;gt;&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;)&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;sub&gt;Ph&apos;nglui mglw&apos;nafh Cthulhu R&apos;lyeh wgah&apos;nagl fhtagn&lt;/sub&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Abandon all hope, ye who enter here&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;An explanation of the weird bit fiddling:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;bytes[i] &amp;gt;&amp;gt; 4&lt;/code&gt; extracts the high nibble of a byte&lt;br&gt;\n&lt;code&gt;bytes[i] &amp;amp; 0xF&lt;/code&gt; extracts the low nibble of a byte&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;b - 10&lt;/code&gt;&lt;br&gt;\nis &lt;code&gt;&amp;lt; 0&lt;/code&gt; for values &lt;code&gt;b &amp;lt; 10&lt;/code&gt;, which will become a decimal digit&lt;br&gt;\nis &lt;code&gt;&amp;gt;= 0&lt;/code&gt; for values &lt;code&gt;b &amp;gt; 10&lt;/code&gt;, which will become a letter from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;F&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Using &lt;code&gt;i &amp;gt;&amp;gt; 31&lt;/code&gt; on a signed 32 bit integer extracts the sign, thanks to sign extension.\nIt will be &lt;code&gt;-1&lt;/code&gt; for &lt;code&gt;i &amp;lt; 0&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;i &amp;gt;= 0&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Combining 2) and 3), shows that &lt;code&gt;(b-10)&amp;gt;&amp;gt;31&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt; for letters and &lt;code&gt;-1&lt;/code&gt; for digits.&lt;/li&gt;\n&lt;li&gt;Looking at the case for letters, the last summand becomes &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; is in the range 10 to 15. We want to map it to &lt;code&gt;A&lt;/code&gt;(65) to &lt;code&gt;F&lt;/code&gt;(70), which implies adding 55 (&lt;code&gt;&apos;A&apos;-10&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Looking at the case for digits, we want to adapt the last summand so it maps &lt;code&gt;b&lt;/code&gt; from the range 0 to 9 to the range &lt;code&gt;0&lt;/code&gt;(48) to &lt;code&gt;9&lt;/code&gt;(57). This means it needs to become -7 (&lt;code&gt;&apos;0&apos; - 55&lt;/code&gt;).&lt;br&gt;\nNow we could just multiply with 7. But since -1 is represented by all bits being 1, we can instead use &lt;code&gt;&amp;amp; -7&lt;/code&gt; since &lt;code&gt;(0 &amp;amp; -7) == 0&lt;/code&gt; and &lt;code&gt;(-1 &amp;amp; -7) == -7&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Some further considerations:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I didn&apos;t use a second loop variable to index into &lt;code&gt;c&lt;/code&gt;, since measurement shows that calculating it from &lt;code&gt;i&lt;/code&gt; is cheaper. &lt;/li&gt;\n&lt;li&gt;Using exactly &lt;code&gt;i &amp;lt; bytes.Length&lt;/code&gt; as upper bound of the loop allows the JITter to eliminate bounds checks on &lt;code&gt;bytes[i]&lt;/code&gt;, so I chose that variant.&lt;/li&gt;\n&lt;li&gt;Making &lt;code&gt;b&lt;/code&gt; an int allows unnecessary conversions from and to byte.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;If you want more flexibility than &lt;code&gt;BitConverter&lt;/code&gt;, but don&apos;t want those clunky 1990s-style explicit loops, then you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;String.Join(String.Empty, Array.ConvertAll(bytes, x =&amp;gt; x.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or, if you&apos;re using .NET 4.0:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;String.Concat(Array.ConvertAll(bytes, x =&amp;gt; x.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(The latter from a comment on the original post.)&lt;/p&gt;\n    ","\n&lt;p&gt;Another lookup table based approach. This one uses only one lookup table for each byte, instead of a lookup table per nibble.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[] _lookup32 = CreateLookup32();\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;CreateLookup32&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; i++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s=i.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;);\n        result[i] = ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookup32&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lookup32 = _lookup32;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = lookup32[bytes[i]];\n        result[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)val;\n        result[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;*i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;) (val &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(result);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I also tested variants of this using &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;struct{char X1, X2}&lt;/code&gt;, &lt;code&gt;struct{byte X1, X2}&lt;/code&gt; in the lookup table.&lt;/p&gt;\n\n&lt;p&gt;Depending on the compilation target (x86, X64) those either had the approximately same performance or were slightly slower than this variant.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;And for even higher performance, its &lt;code&gt;unsafe&lt;/code&gt; sibling:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[] _lookup32Unsafe = CreateLookup32Unsafe();\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;* _lookup32UnsafeP = (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;*)GCHandle.Alloc(_lookup32Unsafe,GCHandleType.Pinned).AddrOfPinnedObject();\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;CreateLookup32Unsafe&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; i++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s=i.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(BitConverter.IsLittleEndian)\n            result[i] = ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            result[i] = ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) + ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookup32Unsafe&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lookupP = _lookup32UnsafeP;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;* bytesP = bytes)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* resultP = result)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;* resultP2 = (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;*)resultP;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n        {\n            resultP2[i] = lookupP[bytesP[i]];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(result);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or if you consider it acceptable to write into the string directly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaLookup32UnsafeDirect&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lookupP = _lookup32UnsafeP;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;((&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;* bytesP = bytes)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* resultP = result)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;* resultP2 = (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;*)resultP;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n        {\n            resultP2[i] = lookupP[bytesP[i]];\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use the BitConverter.ToString method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;}\nConsole.WriteLine( BitConverter.ToString(bytes));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;00-01-02-04-08-10-20-40-80-FF&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;More information: &lt;em&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/3a733s97.aspx&quot; rel=&quot;noreferrer&quot;&gt;BitConverter.ToString Method (Byte[])&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I just encountered the very same problem today, and I came across this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] barray&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[barray.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; barray.Length; ++i)\n    {\n        b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(barray[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(b &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? b + &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : b + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n        b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(barray[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;));\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(b &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? b + &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : b + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source: Forum post &lt;em&gt;&lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/3928b8cb-3703-4672-8ccd-33718148d1e3/&quot; rel=&quot;noreferrer&quot;&gt;byte[] Array to Hex String&lt;/a&gt;&lt;/em&gt; (see the post by PZahra). I modified the code a little to remove the 0x prefix.&lt;/p&gt;\n\n&lt;p&gt;I did some performance testing to the code and it was almost eight times faster than using BitConverter.ToString() (the fastest according to patridge&apos;s post).&lt;/p&gt;\n    ","\n&lt;p&gt;As of .NET 5 RC2 you can use:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.convert.tohexstring&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Convert.ToHexString(byte[] inArray)&lt;/code&gt;&lt;/a&gt; which returns a &lt;code&gt;string&lt;/code&gt; and&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.convert.fromhexstring&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Convert.FromHexString(string s)&lt;/code&gt;&lt;/a&gt; which returns a &lt;code&gt;byte[]&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Overloads are available that take span parameters.&lt;/p&gt;\n    ","\n&lt;p&gt;This is an answer to &lt;a href=&quot;https://stackoverflow.com/revisions/311179/4&quot;&gt;revision 4&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/a/311179&quot;&gt;Tomalak&apos;s highly popular answer&lt;/a&gt; (and subsequent edits).&lt;/p&gt;\n\n&lt;p&gt;I&apos;ll make the case that this edit is wrong, and explain why it could be reverted. Along the way, you might learn a thing or two about some internals, and see yet another example of what premature optimization really is and how it can bite you.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Just use &lt;code&gt;Convert.ToByte&lt;/code&gt; and &lt;code&gt;String.Substring&lt;/code&gt; if you&apos;re in a hurry (&quot;Original code&quot; below), it&apos;s the best combination if you don&apos;t want to re-implement &lt;code&gt;Convert.ToByte&lt;/code&gt;. Use something more advanced (see other answers) that doesn&apos;t use &lt;code&gt;Convert.ToByte&lt;/code&gt; if you &lt;em&gt;need&lt;/em&gt; performance. Do &lt;strong&gt;not&lt;/strong&gt; use anything else other than &lt;code&gt;String.Substring&lt;/code&gt; in combination with &lt;code&gt;Convert.ToByte&lt;/code&gt;, unless someone has something interesting to say about this in the comments of this answer.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;warning:&lt;/strong&gt; This answer may become obsolete &lt;em&gt;if&lt;/em&gt; a &lt;code&gt;Convert.ToByte(char[], Int32)&lt;/code&gt; overload is implemented in the framework. This is unlikely to happen soon.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;As a general rule, I don&apos;t much like to say &quot;don&apos;t optimize prematurely&quot;, because nobody knows when &quot;premature&quot; is. The only thing you must consider when deciding whether to optimize or not is: &quot;Do I have the time and resources to investigate optimization approaches properly?&quot;. If you don&apos;t, then it&apos;s too soon, wait until your project is more mature or until you need the performance (if there is a real need, then you will &lt;strong&gt;make&lt;/strong&gt; the time). In the meantime, do the simplest thing that could possibly work instead.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Original code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexadecimalStringToByteArray_Original&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outputLength = input.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[outputLength];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outputLength; i++)\n            output[i] = Convert.ToByte(input.Substring(i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Revision 4:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexadecimalStringToByteArray_Rev4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outputLength = input.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[outputLength];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringReader(input))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outputLength; i++)\n                output[i] = Convert.ToByte(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] { (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)sr.Read(), (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)sr.Read() }), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The revision avoids &lt;code&gt;String.Substring&lt;/code&gt; and uses a &lt;code&gt;StringReader&lt;/code&gt; instead. The given reason is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Edit: you can improve performance for long strings by using a single\n  pass parser, like so:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Well, looking at the &lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/string.cs,115953b3f767ea7d&quot; rel=&quot;noreferrer&quot;&gt;reference code for &lt;code&gt;String.Substring&lt;/code&gt;&lt;/a&gt;, it&apos;s clearly &quot;single-pass&quot; already; and why shouldn&apos;t it be? It operates at byte-level, not on surrogate pairs.&lt;/p&gt;\n\n&lt;p&gt;It does allocate a new string however, but then you need to allocate one to pass to &lt;code&gt;Convert.ToByte&lt;/code&gt; anyway. Furthermore, the solution provided in the revision allocates yet another object on every iteration (the two-char array); you can safely put that allocation outside the loop and reuse the array to avoid that.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexadecimalStringToByteArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outputLength = input.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[outputLength];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numeral = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringReader(input))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outputLength; i++)\n            {\n                numeral[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)sr.Read();\n                numeral[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)sr.Read();\n                output[i] = Convert.ToByte(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(numeral), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Each hexadecimal &lt;code&gt;numeral&lt;/code&gt; represents a single octet using two digits (symbols).&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;But then, why call &lt;code&gt;StringReader.Read&lt;/code&gt; twice? Just call its second overload and ask it to read two characters in the two-char array at once; and reduce the amount of calls by two.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexadecimalStringToByteArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outputLength = input.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[outputLength];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numeral = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringReader(input))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outputLength; i++)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; read = sr.Read(numeral, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n                Debug.Assert(read == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n                output[i] = Convert.ToByte(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(numeral), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What you&apos;re left with is a string reader whose only added &quot;value&quot; is a parallel index (internal &lt;code&gt;_pos&lt;/code&gt;) which you could have declared yourself (as &lt;code&gt;j&lt;/code&gt; for example), a redundant length variable (internal &lt;code&gt;_length&lt;/code&gt;), and a redundant reference to the input string (internal &lt;code&gt;_s&lt;/code&gt;). In other words, it&apos;s useless.&lt;/p&gt;\n\n&lt;p&gt;If you wonder how &lt;code&gt;Read&lt;/code&gt; &quot;reads&quot;, just look at &lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/io/stringreader.cs,2db106106e966794&quot; rel=&quot;noreferrer&quot;&gt;the code&lt;/a&gt;, all it does is call &lt;code&gt;String.CopyTo&lt;/code&gt; on the input string. The rest is just book-keeping overhead to maintain values we don&apos;t need.&lt;/p&gt;\n\n&lt;p&gt;So, remove the string reader already, and call &lt;code&gt;CopyTo&lt;/code&gt; yourself; it&apos;s simpler, clearer, and more efficient.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexadecimalStringToByteArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outputLength = input.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[outputLength];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numeral = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outputLength; i++, j += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n        {\n            input.CopyTo(j, numeral, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n            output[i] = Convert.ToByte(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(numeral), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Do you really need a &lt;code&gt;j&lt;/code&gt; index that increments in steps of two parallel to &lt;code&gt;i&lt;/code&gt;? Of course not, just multiply &lt;code&gt;i&lt;/code&gt; by two (which the compiler should be able to optimize to an addition).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexadecimalStringToByteArray_BestEffort&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; outputLength = input.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[outputLength];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numeral = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outputLength; i++)\n        {\n            input.CopyTo(i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, numeral, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n            output[i] = Convert.ToByte(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(numeral), &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What does the solution look like now? Exactly like it was at the beginning, only instead of using &lt;code&gt;String.Substring&lt;/code&gt; to allocate the string and copy the data to it, you&apos;re using an intermediary array to which you copy the hexadecimal numerals to, then allocate the string yourself and copy the data &lt;em&gt;again&lt;/em&gt; from the array and into the string (when you pass it in the string constructor). The second copy might be optimized-out if the string is already in the intern pool, but then &lt;code&gt;String.Substring&lt;/code&gt; will also be able to avoid it in these cases.&lt;/p&gt;\n\n&lt;p&gt;In fact, if you look at &lt;code&gt;String.Substring&lt;/code&gt; again, you see that it uses some low-level internal knowledge of how strings are constructed to allocate the string faster than you could normally do it, and it inlines the same code used by &lt;code&gt;CopyTo&lt;/code&gt; directly in there to avoid the call overhead.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;String.Substring&lt;/code&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Worst-case: One fast allocation, one fast copy.&lt;/li&gt;\n&lt;li&gt;Best-case: No allocation, no copy.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Manual method&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Worst-case: Two normal allocations, one normal copy, one fast copy.&lt;/li&gt;\n&lt;li&gt;Best-case: One normal allocation, one normal copy.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Conclusion? &lt;strong&gt;If you want to use &lt;code&gt;Convert.ToByte(String, Int32)&lt;/code&gt;&lt;/strong&gt; (because you don&apos;t want to re-implement that functionality yourself), there doesn&apos;t seem to be a way to beat &lt;code&gt;String.Substring&lt;/code&gt;; all you do is run in circles, re-inventing the wheel (only with sub-optimal materials).&lt;/p&gt;\n\n&lt;p&gt;Note that using &lt;code&gt;Convert.ToByte&lt;/code&gt; and &lt;code&gt;String.Substring&lt;/code&gt; is a perfectly valid choice if you don&apos;t need extreme performance. Remember: only opt for an alternative if you have the time and resources to investigate how it works properly.&lt;/p&gt;\n\n&lt;p&gt;If there was a &lt;code&gt;Convert.ToByte(char[], Int32)&lt;/code&gt;, things would be different of course (it would be possible to do what I described above and completely avoid &lt;code&gt;String&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;I suspect that people who report better performance by &quot;avoiding &lt;code&gt;String.Substring&lt;/code&gt;&quot; also avoid &lt;code&gt;Convert.ToByte(String, Int32)&lt;/code&gt;, which you should really be doing if you need the performance anyway. Look at the countless other answers to discover all the different approaches to do that.&lt;/p&gt;\n\n&lt;p&gt;Disclaimer: I haven&apos;t decompiled the latest version of the framework to verify that the reference source is up-to-date, I assume it is.&lt;/p&gt;\n\n&lt;p&gt;Now, it all sounds good and logical, hopefully even obvious if you&apos;ve managed to get so far.  But is it true?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Intel(R) Core(TM) i7&lt;span class=&quot;hljs-number&quot;&gt;-3720&lt;/span&gt;QM CPU @ &lt;span class=&quot;hljs-number&quot;&gt;2.60&lt;/span&gt;GHz\n    Cores: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n    Current Clock Speed: &lt;span class=&quot;hljs-number&quot;&gt;2600&lt;/span&gt;\n    Max Clock Speed: &lt;span class=&quot;hljs-number&quot;&gt;2600&lt;/span&gt;\n--------------------\nParsing hexadecimal &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; an array of bytes\n--------------------\nHexadecimalStringToByteArray_Original: &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;777.09&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;average &lt;span class=&quot;hljs-title&quot;&gt;ticks&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;over &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; runs&lt;/span&gt;), 1.2X\nHexadecimalStringToByteArray_BestEffort: 8,550.82 average &lt;span class=&quot;hljs-title&quot;&gt;ticks&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;over &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; runs&lt;/span&gt;), 1.1X\nHexadecimalStringToByteArray_Rev4: 9,218.03 average &lt;span class=&quot;hljs-title&quot;&gt;ticks&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;over &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; runs&lt;/span&gt;), 1.0X\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yes!&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Props to Partridge for the bench framework, it&apos;s easy to hack. The input used is the following SHA-1 hash repeated 5000 times to make a 100,000 bytes long string.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;209113288F&lt;/span&gt;93A9AB8E474EA78D899AFDBB874355\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Have fun! (But optimize with moderation.)&lt;/p&gt;\n    ","\n&lt;p&gt;Complement to answer by @CodesInChaos (reversed method)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexToByteUsingByteManipulation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[s.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hi = s[i*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n        hi = hi + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; + ((hi &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; lo = s[i*&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;;\n        lo = lo + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; + ((lo &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x0f&lt;/span&gt;;\n\n        bytes[i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) (lo | hi &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explanation:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;amp; 0x0f&lt;/code&gt; is to support  also lower case letters&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;hi = hi + 10 + ((hi &amp;gt;&amp;gt; 31) &amp;amp; 7);&lt;/code&gt; is the same as:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;hi = ch-65 + 10 + (((ch-65) &amp;gt;&amp;gt; 31) &amp;amp; 7);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;For &apos;0&apos;..&apos;9&apos; it is the same as &lt;code&gt;hi = ch - 65 + 10 + 7;&lt;/code&gt; which is &lt;code&gt;hi = ch - 48&lt;/code&gt; (this is because of &lt;code&gt;0xffffffff &amp;amp; 7&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;For &apos;A&apos;..&apos;F&apos; it is &lt;code&gt;hi = ch - 65 + 10;&lt;/code&gt; (this is because of &lt;code&gt;0x00000000 &amp;amp; 7&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;For &apos;a&apos;..&apos;f&apos; we have to big numbers so we must subtract 32 from default version by making some bits &lt;code&gt;0&lt;/code&gt; by using &lt;code&gt;&amp;amp; 0x0f&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;65 is code for &lt;code&gt;&apos;A&apos;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;48 is code for &lt;code&gt;&apos;0&apos;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;7 is the number of letters between &lt;code&gt;&apos;9&apos;&lt;/code&gt; and &lt;code&gt;&apos;A&apos;&lt;/code&gt; in the ASCII table (&lt;code&gt;...456789:;&amp;lt;=&amp;gt;?@ABCD...&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;This problem could also be solved using a look-up table. This would require a small amount of static memory for both the encoder and decoder. This method will however be fast:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Encoder table 512&amp;nbsp;bytes or 1024&amp;nbsp;bytes (twice\nthe size if both upper and lower case\nis needed)&lt;/li&gt;\n&lt;li&gt;Decoder table 256&amp;nbsp;bytes or\n64&amp;nbsp;KiB (either a single char look-up\nor dual char look-up)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;My solution uses 1024&amp;nbsp;bytes for the encoding table, and 256&amp;nbsp;bytes for decoding.&lt;/p&gt;\n\n&lt;h2&gt;Decoding&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] LookupTable = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] {\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x01&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x02&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x03&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x04&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x05&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x06&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x07&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x08&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x09&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0A&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0B&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0C&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0D&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0E&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0F&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0A&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0B&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0C&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0D&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0E&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0F&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Lookup&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; c&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = LookupTable[c];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expected a hex character, got &quot;&lt;/span&gt; + c);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToByte&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] chars, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; offset&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(Lookup(chars[offset]) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; | Lookup(chars[offset + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Encoding&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[][] LookupTableUpper;\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[][] LookupTableLower;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Hex&lt;/span&gt;()&lt;/span&gt;\n{\n  LookupTableLower = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;][];\n  LookupTableUpper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;][];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;; i++)\n  {\n    LookupTableLower[i] = i.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x2&quot;&lt;/span&gt;).ToCharArray();\n    LookupTableUpper[i] = i.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;).ToCharArray();\n  }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;ToCharLower&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] b, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; bOffset&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LookupTableLower[b[bOffset]];\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;ToCharUpper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] b, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; bOffset&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; LookupTableUpper[b[bOffset]];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Comparison&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;StringBuilderToStringFromBytes:   &lt;span class=&quot;hljs-number&quot;&gt;106148&lt;/span&gt;\nBitConverterToStringFromBytes:     &lt;span class=&quot;hljs-number&quot;&gt;15783&lt;/span&gt;\nArrayConvertAllToStringFromBytes:  &lt;span class=&quot;hljs-number&quot;&gt;54290&lt;/span&gt;\nByteManipulationToCharArray:        &lt;span class=&quot;hljs-number&quot;&gt;8444&lt;/span&gt;\nTableBasedToCharArray:              &lt;span class=&quot;hljs-number&quot;&gt;5651&lt;/span&gt; *\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;* this solution&lt;/p&gt;\n\n&lt;h2&gt;Note&lt;/h2&gt;\n\n&lt;p&gt;During decoding IOException and IndexOutOfRangeException could occur (if a character has a too high value &amp;gt; 256). Methods for de/encoding streams or arrays should be implemented, this is just a proof of concept.&lt;/p&gt;\n    ","\n&lt;h1&gt;Dotnet 5 Update&lt;/h1&gt;\n&lt;h2&gt;To convert from &lt;code&gt;byte[]&lt;/code&gt; (byte array) to hexadecimal &lt;code&gt;string&lt;/code&gt;, use:&lt;/h2&gt;\n&lt;h3&gt;&lt;code&gt;System.Convert.ToHexString&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myBytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString = System.Convert.ToHexString(myBytes);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;To convert from hexadecimal &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;byte[]&lt;/code&gt;, use:&lt;/h2&gt;\n&lt;h3&gt;&lt;code&gt;System.Convert.FromHexString&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myString  = &lt;span class=&quot;hljs-string&quot;&gt;&quot;E10B116E8530A340BCC7B3EAC208487B&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myBytes = System.Convert.FromHexString(myString);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Why make it complex? This is simple in Visual&amp;nbsp;Studio&amp;nbsp;2008:&lt;/p&gt;\n\n&lt;p&gt;C#:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hex = BitConverter.ToString(YourByteArray).Replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;VB:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Dim hex As String = BitConverter.ToString(YourByteArray).Replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a great post. I like Waleed&apos;s solution. I haven&apos;t run it through patridge&apos;s test but it seems to be quite fast. I also needed the reverse process, converting a hex string to a byte array, so I wrote it as a reversal of Waleed&apos;s solution. Not sure if it&apos;s any faster than Tomalak&apos;s original solution. Again, I did not run the reverse process through patridge&apos;s test either.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexStringToByteArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hexString&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hexStringLength = hexString.Length;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[hexStringLength / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; hexStringLength; i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; topChar = (hexString[i] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt; ? hexString[i] - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : hexString[i] - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; bottomChar = hexString[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt; ? hexString[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : hexString[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;;\n        b[i / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = Convert.ToByte(topChar + bottomChar);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Not to pile on to the many answers here, but I found a fairly optimal (~4.5x better than accepted), straightforward implementation of the hex string parser. First, output from my tests (the first batch is my implementation):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Give me that &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;:\n&lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;c63f7842740c77e545bb0b2ade90b384f119f6ab57b680b7aa575a2f40939f\n\nTime to parse &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt; times: &lt;span class=&quot;hljs-number&quot;&gt;50.4192&lt;/span&gt; ms\nResult &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter&lt;span class=&quot;hljs-string&quot;&gt;&apos;d: 04-C6-3F-78-42-74-0C-77-E5-45-BB-0B-2A-DE-90-B3-84-F1-19-F6-AB-5\n7-B6-80-B7-AA-57-5A-2F-40-93-9F\n\nAccepted answer: (StringToByteArray)\nTime to parse 100000 times: 233.1264ms\nResult as base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter&apos;&lt;/span&gt;d: &lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-C6&lt;span class=&quot;hljs-number&quot;&gt;-3F&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-78&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-42&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-74&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-0&lt;/span&gt;C&lt;span class=&quot;hljs-number&quot;&gt;-77&lt;/span&gt;-E5&lt;span class=&quot;hljs-number&quot;&gt;-45&lt;/span&gt;-BB&lt;span class=&quot;hljs-number&quot;&gt;-0B&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;A-DE&lt;span class=&quot;hljs-number&quot;&gt;-90&lt;/span&gt;-B3&lt;span class=&quot;hljs-number&quot;&gt;-84&lt;/span&gt;-F1&lt;span class=&quot;hljs-number&quot;&gt;-19&lt;/span&gt;-F6-AB&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-B6&lt;span class=&quot;hljs-number&quot;&gt;-80&lt;/span&gt;-B7-AA&lt;span class=&quot;hljs-number&quot;&gt;-57&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;A&lt;span class=&quot;hljs-number&quot;&gt;-2F&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-40&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-93&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-9F&lt;/span&gt;\n\nWith Mono&lt;span class=&quot;hljs-string&quot;&gt;&apos;s implementation:\nTime to parse 100000 times: 777.2544ms\nResult as base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter&apos;&lt;/span&gt;d: &lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;-C6&lt;span class=&quot;hljs-number&quot;&gt;-3F&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-78&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-42&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-74&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-0&lt;/span&gt;C&lt;span class=&quot;hljs-number&quot;&gt;-77&lt;/span&gt;-E5&lt;span class=&quot;hljs-number&quot;&gt;-45&lt;/span&gt;-BB&lt;span class=&quot;hljs-number&quot;&gt;-0B&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;A-DE&lt;span class=&quot;hljs-number&quot;&gt;-90&lt;/span&gt;-B3&lt;span class=&quot;hljs-number&quot;&gt;-84&lt;/span&gt;-F1&lt;span class=&quot;hljs-number&quot;&gt;-19&lt;/span&gt;-F6-AB&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;-B6&lt;span class=&quot;hljs-number&quot;&gt;-80&lt;/span&gt;-B7-AA&lt;span class=&quot;hljs-number&quot;&gt;-57&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;A&lt;span class=&quot;hljs-number&quot;&gt;-2F&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-40&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-93&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-9F&lt;/span&gt;\n\nWith SoapHexBinary:\nTime to parse &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; times: &lt;span class=&quot;hljs-number&quot;&gt;845.1456&lt;/span&gt;ms\nResult &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; base64: BMY/eEJ0DHflRbsLKt6Qs4TxGfarV7aAt6pXWi9Ak58=\nBitConverter&lt;span class=&quot;hljs-string&quot;&gt;&apos;d: 04-C6-3F-78-42-74-0C-77-E5-45-BB-0B-2A-DE-90-B3-84-F1-19-F6-AB-5\n7-B6-80-B7-AA-57-5A-2F-40-93-9F\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The base64 and &apos;BitConverter&apos;d&apos; lines are there to test for correctness. Note that they are equal.&lt;/p&gt;\n\n&lt;p&gt;The implementation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;ToByteArrayFromHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hexString&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (hexString.Length % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;String must have an even length&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[hexString.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; hexString.Length; i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n  {\n    array[i/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = ByteFromTwoChars(hexString[i], hexString[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; array;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteFromTwoChars&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; p, &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; p_2&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; ret;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; &amp;amp;&amp;amp; p &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;)\n  {\n    ret = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) ((p - &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt; &amp;amp;&amp;amp; p &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n  {\n    ret = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) ((p - &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt; &amp;amp;&amp;amp; p &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;)\n  {\n    ret = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) ((p - &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Char is not a hex digit: &quot;&lt;/span&gt; + p,&lt;span class=&quot;hljs-string&quot;&gt;&quot;p&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p_2 &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; &amp;amp;&amp;amp; p_2 &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;)\n  {\n    ret |= (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) ((p_2 - &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;));\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p_2 &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt; &amp;amp;&amp;amp; p_2 &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;)\n  {\n    ret |= (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) ((p_2 - &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p_2 &amp;lt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt; &amp;amp;&amp;amp; p_2 &amp;gt;= &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;)\n  {\n    ret |= (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;) ((p_2 - &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;));\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Char is not a hex digit: &quot;&lt;/span&gt; + p_2, &lt;span class=&quot;hljs-string&quot;&gt;&quot;p_2&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I tried some stuff with &lt;code&gt;unsafe&lt;/code&gt; and moving the (clearly redundant) character-to-nibble &lt;code&gt;if&lt;/code&gt; sequence to another method, but this was the fastest it got.&lt;/p&gt;\n\n&lt;p&gt;(I concede that this answers half the question. I felt that the string-&amp;gt;byte[] conversion was underrepresented, while the byte[]-&amp;gt;string angle seems to be well covered. Thus, this answer.)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Safe versions:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HexHelper&lt;/span&gt;\n{\n    [&lt;span class=&quot;hljs-meta&quot;&gt;System.Diagnostics.Contracts.Pure&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hexAlphabet = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;0123456789ABCDEF&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; chars = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[checked(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;unchecked&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length; i++)\n            {\n                chars[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = hexAlphabet[&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n                chars[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = hexAlphabet[&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;];\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(chars);\n    }\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;System.Diagnostics.Contracts.Pure&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;FromHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hexadecimal value length must be even.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;unchecked&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; result.Length; i++)\n            {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// 0(48) - 9(57) -&amp;gt; 0 - 9&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;// A(65) - F(70) -&amp;gt; 10 - 15&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// High 4 bits.&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; val = ((b - &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;) + (((&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; - b) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;)) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n                b = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Low 4 bits.&lt;/span&gt;\n                val += (b - &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;) + (((&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; - b) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;);\n                result[i] = checked((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)val);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Unsafe versions&lt;/strong&gt; For those who prefer performance and do not afraid of unsafeness. About 35% faster ToHex and 10% faster FromHex.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HexUnsafeHelper&lt;/span&gt;\n{\n    [&lt;span class=&quot;hljs-meta&quot;&gt;System.Diagnostics.Contracts.Pure&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; alphabet = &lt;span class=&quot;hljs-string&quot;&gt;@&quot;0123456789ABCDEF&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, checked(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* alphabetPtr = alphabet)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* resultPtr = result)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* ptr = resultPtr;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;unchecked&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length; i++)\n                {\n                    *ptr++ = *(alphabetPtr + (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n                    *ptr++ = *(alphabetPtr + (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;));\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;System.Diagnostics.Contracts.Pure&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;FromHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentNullException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hexadecimal value length must be even.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;unchecked&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n            &lt;span class=&quot;hljs-keyword&quot;&gt;fixed&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* valuePtr = &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;* valPtr = valuePtr;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; result.Length; i++)\n                {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// 0(48) - 9(57) -&amp;gt; 0 - 9&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// A(65) - F(70) -&amp;gt; 10 - 15&lt;/span&gt;\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b = *valPtr++; &lt;span class=&quot;hljs-comment&quot;&gt;// High 4 bits.&lt;/span&gt;\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; val = ((b - &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;) + (((&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; - b) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;)) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n                    b = *valPtr++; &lt;span class=&quot;hljs-comment&quot;&gt;// Low 4 bits.&lt;/span&gt;\n                    val += (b - &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;) + (((&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; - b) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;-7&lt;/span&gt;);\n                    result[i] = checked((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)val);\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;BTW&lt;/strong&gt;\nFor benchmark testing initializing alphabet every time convert function called is wrong, alphabet must be const (for string) or static readonly (for char[]). Then alphabet-based conversion of byte[] to string becomes as fast as byte manipulation versions.&lt;/p&gt;\n\n&lt;p&gt;And of course test must be compiled in Release (with optimization) and with debug option &quot;Suppress JIT optimization&quot; turned off (same for &quot;Enable Just My Code&quot; if code must be debuggable).&lt;/p&gt;\n    ","\n&lt;p&gt;From Microsoft&apos;s developers, a nice, simple conversion:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] ba&lt;/span&gt;)&lt;/span&gt; \n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Concatenate the bytes into one long string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ba.Aggregate(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;),\n                            (sb, b) =&amp;gt; sb.Append(b.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;))\n                            ).ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While the above is clean and compact, performance junkies will scream about it using enumerators. You can get peak performance with an improved version of &lt;a href=&quot;https://stackoverflow.com/a/311179/3258851&quot;&gt;Tomalak&apos;s original answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] ba&lt;/span&gt;)&lt;/span&gt;   \n{   \n   StringBuilder hex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(ba.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);   \n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; ba.Length; i++)       &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- Use for loop is faster than foreach   &lt;/span&gt;\n       hex.Append(ba[i].ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;));   &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- ToString is faster than AppendFormat   &lt;/span&gt;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hex.ToString();   \n} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the fastest of all the routines I&apos;ve seen posted here so far. Don&apos;t just take my word for it... performance test each routine and inspect its CIL code for yourself.&lt;/p&gt;\n    ","\n&lt;p&gt;Inverse function for Waleed Eissa code (Hex String To Byte Array):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexToBytes&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hexString&lt;/span&gt;)&lt;/span&gt;        \n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[hexString.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];            \n        &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; c;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; hexString.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; i++)\n        {\n            c = hexString[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n            b[i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)((c &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt; ? c - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt; : (c &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0x47&lt;/span&gt; ? c - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : c - &lt;span class=&quot;hljs-number&quot;&gt;0x57&lt;/span&gt;)) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n            c = hexString[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n            b[i] += (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(c &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt; ? c - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt; : (c &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0x47&lt;/span&gt; ? c - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : c - &lt;span class=&quot;hljs-number&quot;&gt;0x57&lt;/span&gt;));\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Waleed Eissa function with lower case support:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;BytesToHex&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] barray, &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; toLowerCase = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; addByte = &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (toLowerCase) addByte = &lt;span class=&quot;hljs-number&quot;&gt;0x57&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[barray.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; barray.Length; ++i)\n        {\n            b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(barray[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n            c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(b &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? b + addByte : b + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n            b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(barray[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;));\n            c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(b &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? b + addByte : b + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;.NET 5 has added the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.convert.tohexstring?view=net-5.0&quot; rel=&quot;noreferrer&quot;&gt;Convert.ToHexString&lt;/a&gt; method.&lt;/p&gt;\n&lt;p&gt;For those using an older version of .NET&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayExtensions&lt;/span&gt;\n{\n    \n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHexString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes, Casing casing = Casing.Upper&lt;/span&gt;)&lt;/span&gt;\n    {\n        Span&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;&amp;gt; result = &lt;span class=&quot;hljs-keyword&quot;&gt;stackalloc&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (bytes.Length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n            result = array.AsSpan();\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            result = &lt;span class=&quot;hljs-keyword&quot;&gt;stackalloc&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        }\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; bytes)\n        {\n            ToCharsBuffer(b, result, pos, casing);\n            pos += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result.ToString();\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToCharsBuffer&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, Span&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;&amp;gt; buffer, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; startingIndex = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, Casing casing = Casing.Upper&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; difference = (((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF0&lt;/span&gt;U) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) + ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x0F&lt;/span&gt;U) - &lt;span class=&quot;hljs-number&quot;&gt;0x8989&lt;/span&gt;U;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; packedResult = ((((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)(-(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)difference) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x7070&lt;/span&gt;U) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) + difference + &lt;span class=&quot;hljs-number&quot;&gt;0xB9B9&lt;/span&gt;U) | (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)casing;\n\n        buffer[startingIndex + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(packedResult &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;);\n        buffer[startingIndex] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(packedResult &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enum&lt;/span&gt; Casing : &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Output [ &apos;0&apos; .. &apos;9&apos; ] and [ &apos;A&apos; .. &apos;F&apos; ].&lt;/span&gt;\n    Upper = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Output [ &apos;0&apos; .. &apos;9&apos; ] and [ &apos;a&apos; .. &apos;f&apos; ].&lt;/span&gt;\n    Lower = &lt;span class=&quot;hljs-number&quot;&gt;0x2020&lt;/span&gt;U,\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Adapted from the .NET repository\n&lt;a href=&quot;https://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/System.Private.CoreLib/src/System/Convert.cs&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/System.Private.CoreLib/src/System/Convert.cs&lt;/a&gt;\n&lt;a href=&quot;https://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/Common/src/System/HexConverter.cs&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/dotnet/runtime/blob/v5.0.3/src/libraries/Common/src/System/HexConverter.cs&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;Extension methods&lt;/em&gt; (disclaimer: completely untested code, BTW...):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteExtensions&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHexString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] ba&lt;/span&gt;)&lt;/span&gt;\n    {\n        StringBuilder hex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder(ba.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ba)\n        {\n            hex.AppendFormat(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{0:x2}&quot;&lt;/span&gt;, b);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; hex.ToString();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc.. Use either of &lt;a href=&quot;https://stackoverflow.com/questions/311165/how-do-you-convert-a-byte-array-to-a-hexadecimal-string-and-vice-versa/311179#311179&quot;&gt;Tomalak&apos;s three solutions&lt;/a&gt; (with the last one being an extension method on a string).&lt;/p&gt;\n    ","\n&lt;p&gt;Fastest method for old school people... miss you pointers&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexStrToByteArray&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; str&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] res = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[(str.Length % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; : str.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)]; &lt;span class=&quot;hljs-comment&quot;&gt;//check and allocate memory&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; res.Length; i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, j++) &lt;span class=&quot;hljs-comment&quot;&gt;//convert loop&lt;/span&gt;\n            res[j] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)((str[i] % &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) % &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt; + (str[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] % &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) % &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Converting byte[] to a hexadecimal string - performance analysis&lt;/h1&gt;\n&lt;p&gt;Updated on: 2022-04-17&lt;/p&gt;\n&lt;h2&gt;Since .NET 5 you should use &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.convert.tohexstring?view=net-6.0&quot; rel=&quot;nofollow noreferrer&quot;&gt;Convert.ToHexString(bytes[])&lt;/a&gt;!&lt;/h2&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; result = Convert.ToHexString(bytesToConvert);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h2&gt;About this leaderboard and the benchmark&lt;/h2&gt;\n&lt;p&gt;The comparison from &lt;a href=&quot;https://stackoverflow.com/users/356218/thymine&quot;&gt;Thymine&lt;/a&gt; seems to be outdated and incomplete, especially after .NET 5 with its &lt;code&gt;Convert.ToHexString&lt;/code&gt;, so I decided to ~~fall into the bytes to hex string rabbit hole~~ create a new, updated comparison with more methods from answers to &lt;a href=&quot;https://stackoverflow.com/q/623104/3161322&quot;&gt;both&lt;/a&gt; of &lt;a href=&quot;https://stackoverflow.com/q/311165/3161322&quot;&gt;these&lt;/a&gt; two questions.&lt;/p&gt;\n&lt;p&gt;I went with &lt;a href=&quot;https://benchmarkdotnet.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;BenchamrkDotNet&lt;/a&gt; instead of a custom-made benchmarking script, which will, hopefully, make the result more accurate.&lt;br&gt;\nAlways please remember that any micro-benchmarking won&apos;t ever represent the real situation and you should do your own tests.&lt;/p&gt;\n&lt;p&gt;I ran these benchmarks on a &lt;em&gt;Linux&lt;/em&gt; with &lt;em&gt;Kernel 5.15.32&lt;/em&gt; on an &lt;em&gt;AMD Ryzen 5800H&lt;/em&gt; with &lt;em&gt;2x8 GB DDR4 @ 2133 MHz&lt;/em&gt;.&lt;br&gt;\nBe aware, that the whole benchmark might take a lot of time to complete - around 40 minutes on my machine.&lt;/p&gt;\n&lt;h2&gt;UPPERCASE (capitalized) vs lowercase output&lt;/h2&gt;\n&lt;p&gt;All methods mentioned (unless stated otherwise) focus on &lt;strong&gt;UPPERCASE&lt;/strong&gt; output only. That means the &lt;strong&gt;output will look like &lt;code&gt;B33F69&lt;/code&gt;&lt;/strong&gt;, not &lt;code&gt;b33f69&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The output from &lt;code&gt;Convert.ToHexString&lt;/code&gt; is always uppercase, but thankfully there isn&apos;t any significant performance drop when paired with &lt;code&gt;ToLower()&lt;/code&gt;, although both &lt;code&gt;unsafe&lt;/code&gt; methods will be faster if that&apos;s your concern.&lt;/p&gt;\n&lt;p&gt;Making the string lowercase &lt;em&gt;efficiently&lt;/em&gt; might be a challenge in some methods (especially the ones with bit operators magic), but in most, it&apos;s enough to just change a parameter &lt;code&gt;X2&lt;/code&gt; to &lt;code&gt;x2&lt;/code&gt; or change the letters from uppercase to lowercase in a mapping.&lt;/p&gt;\n&lt;h2&gt;Leaderboard&lt;/h2&gt;\n&lt;p&gt;Sorted by &lt;code&gt;Mean N=100&lt;/code&gt;. The reference point is the &lt;em&gt;StringBuilderForEachByte&lt;/em&gt; method.&lt;/p&gt;\n&lt;div class=&quot;s-table-container&quot;&gt;\n&lt;table class=&quot;s-table&quot;&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Method (means are in nanoseconds)&lt;/th&gt;\n&lt;th&gt;Mean N=10&lt;/th&gt;\n&lt;th&gt;Ratio N=10&lt;/th&gt;\n&lt;th&gt;Mean N=100&lt;/th&gt;\n&lt;th&gt;Ratio N=100&lt;/th&gt;\n&lt;th&gt;Mean N=500&lt;/th&gt;\n&lt;th&gt;Ratio N=500&lt;/th&gt;\n&lt;th&gt;Mean N=1k&lt;/th&gt;\n&lt;th&gt;Ratio N=1k&lt;/th&gt;\n&lt;th&gt;Mean N=10k&lt;/th&gt;\n&lt;th&gt;Ratio N=10k&lt;/th&gt;\n&lt;th&gt;Mean N=100k&lt;/th&gt;\n&lt;th&gt;Ratio N=100k&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;StringBuilderAggregateBytesAppendFormat&lt;/td&gt;\n&lt;td&gt;364.92&lt;/td&gt;\n&lt;td&gt;1.48&lt;/td&gt;\n&lt;td&gt;3,680.00&lt;/td&gt;\n&lt;td&gt;1.74&lt;/td&gt;\n&lt;td&gt;18,928.33&lt;/td&gt;\n&lt;td&gt;1.86&lt;/td&gt;\n&lt;td&gt;38,362.94&lt;/td&gt;\n&lt;td&gt;1.87&lt;/td&gt;\n&lt;td&gt;380,994.74&lt;/td&gt;\n&lt;td&gt;1.72&lt;/td&gt;\n&lt;td&gt;42,618,861.57&lt;/td&gt;\n&lt;td&gt;1.62&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringBuilderForEachAppendFormat&lt;/td&gt;\n&lt;td&gt;309.59&lt;/td&gt;\n&lt;td&gt;1.26&lt;/td&gt;\n&lt;td&gt;3,203.11&lt;/td&gt;\n&lt;td&gt;1.52&lt;/td&gt;\n&lt;td&gt;20,775.07&lt;/td&gt;\n&lt;td&gt;2.04&lt;/td&gt;\n&lt;td&gt;41,398.07&lt;/td&gt;\n&lt;td&gt;2.02&lt;/td&gt;\n&lt;td&gt;426,839.96&lt;/td&gt;\n&lt;td&gt;1.93&lt;/td&gt;\n&lt;td&gt;37,220,750.15&lt;/td&gt;\n&lt;td&gt;1.41&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringJoinSelect&lt;/td&gt;\n&lt;td&gt;310.84&lt;/td&gt;\n&lt;td&gt;1.26&lt;/td&gt;\n&lt;td&gt;2,765.91&lt;/td&gt;\n&lt;td&gt;1.31&lt;/td&gt;\n&lt;td&gt;13,549.12&lt;/td&gt;\n&lt;td&gt;1.33&lt;/td&gt;\n&lt;td&gt;28,691.16&lt;/td&gt;\n&lt;td&gt;1.40&lt;/td&gt;\n&lt;td&gt;304,163.97&lt;/td&gt;\n&lt;td&gt;1.38&lt;/td&gt;\n&lt;td&gt;63,541,601.12&lt;/td&gt;\n&lt;td&gt;2.41&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringConcatSelect&lt;/td&gt;\n&lt;td&gt;301.34&lt;/td&gt;\n&lt;td&gt;1.22&lt;/td&gt;\n&lt;td&gt;2,733.64&lt;/td&gt;\n&lt;td&gt;1.29&lt;/td&gt;\n&lt;td&gt;14,449.53&lt;/td&gt;\n&lt;td&gt;1.42&lt;/td&gt;\n&lt;td&gt;29,174.83&lt;/td&gt;\n&lt;td&gt;1.42&lt;/td&gt;\n&lt;td&gt;307,196.94&lt;/td&gt;\n&lt;td&gt;1.39&lt;/td&gt;\n&lt;td&gt;32,877,994.95&lt;/td&gt;\n&lt;td&gt;1.25&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringJoinArrayConvertAll&lt;/td&gt;\n&lt;td&gt;279.21&lt;/td&gt;\n&lt;td&gt;1.13&lt;/td&gt;\n&lt;td&gt;2,608.71&lt;/td&gt;\n&lt;td&gt;1.23&lt;/td&gt;\n&lt;td&gt;13,305.96&lt;/td&gt;\n&lt;td&gt;1.30&lt;/td&gt;\n&lt;td&gt;27,207.12&lt;/td&gt;\n&lt;td&gt;1.32&lt;/td&gt;\n&lt;td&gt;295,589.61&lt;/td&gt;\n&lt;td&gt;1.34&lt;/td&gt;\n&lt;td&gt;62,950,871.38&lt;/td&gt;\n&lt;td&gt;2.39&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringBuilderAggregateBytesAppend&lt;/td&gt;\n&lt;td&gt;276.18&lt;/td&gt;\n&lt;td&gt;1.12&lt;/td&gt;\n&lt;td&gt;2,599.62&lt;/td&gt;\n&lt;td&gt;1.23&lt;/td&gt;\n&lt;td&gt;12,788.11&lt;/td&gt;\n&lt;td&gt;1.25&lt;/td&gt;\n&lt;td&gt;26,043.54&lt;/td&gt;\n&lt;td&gt;1.27&lt;/td&gt;\n&lt;td&gt;255,389.06&lt;/td&gt;\n&lt;td&gt;1.16&lt;/td&gt;\n&lt;td&gt;27,664,344.41&lt;/td&gt;\n&lt;td&gt;1.05&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringConcatArrayConvertAll&lt;/td&gt;\n&lt;td&gt;244.81&lt;/td&gt;\n&lt;td&gt;0.99&lt;/td&gt;\n&lt;td&gt;2,361.08&lt;/td&gt;\n&lt;td&gt;1.12&lt;/td&gt;\n&lt;td&gt;11,881.18&lt;/td&gt;\n&lt;td&gt;1.16&lt;/td&gt;\n&lt;td&gt;23,709.21&lt;/td&gt;\n&lt;td&gt;1.15&lt;/td&gt;\n&lt;td&gt;265,197.33&lt;/td&gt;\n&lt;td&gt;1.20&lt;/td&gt;\n&lt;td&gt;56,044,744.44&lt;/td&gt;\n&lt;td&gt;2.12&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;em&gt;StringBuilderForEachByte&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;246.09&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;1.00&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;2,112.77&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;1.00&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;10,200.36&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;1.00&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;20,540.77&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;1.00&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;220,993.95&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;1.00&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;26,387,941.13&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;em&gt;1.00&lt;/em&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;StringBuilderForEachBytePreAllocated&lt;/td&gt;\n&lt;td&gt;213.85&lt;/td&gt;\n&lt;td&gt;0.87&lt;/td&gt;\n&lt;td&gt;1,897.19&lt;/td&gt;\n&lt;td&gt;0.90&lt;/td&gt;\n&lt;td&gt;9,340.66&lt;/td&gt;\n&lt;td&gt;0.92&lt;/td&gt;\n&lt;td&gt;19,142.27&lt;/td&gt;\n&lt;td&gt;0.93&lt;/td&gt;\n&lt;td&gt;204,968.88&lt;/td&gt;\n&lt;td&gt;0.93&lt;/td&gt;\n&lt;td&gt;24,902,075.81&lt;/td&gt;\n&lt;td&gt;0.94&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;BitConverterReplace&lt;/td&gt;\n&lt;td&gt;140.09&lt;/td&gt;\n&lt;td&gt;0.57&lt;/td&gt;\n&lt;td&gt;1,207.74&lt;/td&gt;\n&lt;td&gt;0.57&lt;/td&gt;\n&lt;td&gt;6,170.46&lt;/td&gt;\n&lt;td&gt;0.60&lt;/td&gt;\n&lt;td&gt;12,438.23&lt;/td&gt;\n&lt;td&gt;0.61&lt;/td&gt;\n&lt;td&gt;145,022.35&lt;/td&gt;\n&lt;td&gt;0.66&lt;/td&gt;\n&lt;td&gt;17,719,082.72&lt;/td&gt;\n&lt;td&gt;0.67&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;LookupPerNibble&lt;/td&gt;\n&lt;td&gt;63.78&lt;/td&gt;\n&lt;td&gt;0.26&lt;/td&gt;\n&lt;td&gt;421.75&lt;/td&gt;\n&lt;td&gt;0.20&lt;/td&gt;\n&lt;td&gt;1,978.22&lt;/td&gt;\n&lt;td&gt;0.19&lt;/td&gt;\n&lt;td&gt;3,957.58&lt;/td&gt;\n&lt;td&gt;0.19&lt;/td&gt;\n&lt;td&gt;35,358.21&lt;/td&gt;\n&lt;td&gt;0.16&lt;/td&gt;\n&lt;td&gt;4,993,649.91&lt;/td&gt;\n&lt;td&gt;0.19&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;LookupAndShift&lt;/td&gt;\n&lt;td&gt;53.22&lt;/td&gt;\n&lt;td&gt;0.22&lt;/td&gt;\n&lt;td&gt;311.56&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;td&gt;1,461.15&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;2,924.11&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;26,180.11&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;3,771,827.62&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;WhilePropertyLookup&lt;/td&gt;\n&lt;td&gt;41.83&lt;/td&gt;\n&lt;td&gt;0.17&lt;/td&gt;\n&lt;td&gt;308.59&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;td&gt;1,473.10&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;2,925.66&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;28,440.28&lt;/td&gt;\n&lt;td&gt;0.13&lt;/td&gt;\n&lt;td&gt;5,060,341.10&lt;/td&gt;\n&lt;td&gt;0.19&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;LookupAndShiftAlphabetArray&lt;/td&gt;\n&lt;td&gt;37.06&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;td&gt;290.96&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;1,387.01&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;3,087.86&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;td&gt;29,883.54&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;5,136,607.61&lt;/td&gt;\n&lt;td&gt;0.19&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ByteManipulationDecimal&lt;/td&gt;\n&lt;td&gt;35.29&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;251.69&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;1,180.38&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;2,347.56&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;22,731.55&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;4,645,593.05&lt;/td&gt;\n&lt;td&gt;0.18&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ByteManipulationHexMultiply&lt;/td&gt;\n&lt;td&gt;35.45&lt;/td&gt;\n&lt;td&gt;0.14&lt;/td&gt;\n&lt;td&gt;235.22&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;1,342.50&lt;/td&gt;\n&lt;td&gt;0.13&lt;/td&gt;\n&lt;td&gt;2,661.25&lt;/td&gt;\n&lt;td&gt;0.13&lt;/td&gt;\n&lt;td&gt;25,810.54&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;7,833,116.68&lt;/td&gt;\n&lt;td&gt;0.30&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ByteManipulationHexIncrement&lt;/td&gt;\n&lt;td&gt;36.43&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;td&gt;234.31&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;1,345.38&lt;/td&gt;\n&lt;td&gt;0.13&lt;/td&gt;\n&lt;td&gt;2,737.89&lt;/td&gt;\n&lt;td&gt;0.13&lt;/td&gt;\n&lt;td&gt;26,413.92&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;7,820,224.57&lt;/td&gt;\n&lt;td&gt;0.30&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;WhileLocalLookup&lt;/td&gt;\n&lt;td&gt;42.03&lt;/td&gt;\n&lt;td&gt;0.17&lt;/td&gt;\n&lt;td&gt;223.59&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;1,016.93&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;1,979.24&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;19,360.07&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;4,150,234.71&lt;/td&gt;\n&lt;td&gt;0.16&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;LookupAndShiftAlphabetSpan&lt;/td&gt;\n&lt;td&gt;30.00&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;216.51&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;1,020.65&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;2,316.99&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;22,357.13&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;4,580,277.95&lt;/td&gt;\n&lt;td&gt;0.17&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;strong&gt;LookupAndShiftAlphabetSpanMultiply&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;29.04&lt;/td&gt;\n&lt;td&gt;0.12&lt;/td&gt;\n&lt;td&gt;207.38&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;985.94&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;2,259.29&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;22,287.12&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;4,563,518.13&lt;/td&gt;\n&lt;td&gt;0.17&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;LookupPerByte&lt;/td&gt;\n&lt;td&gt;32.45&lt;/td&gt;\n&lt;td&gt;0.13&lt;/td&gt;\n&lt;td&gt;205.84&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;951.30&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;1,906.27&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;18,311.03&lt;/td&gt;\n&lt;td&gt;0.08&lt;/td&gt;\n&lt;td&gt;3,908,692.66&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;LookupSpanPerByteSpan&lt;/td&gt;\n&lt;td&gt;25.69&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;184.29&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;863.79&lt;/td&gt;\n&lt;td&gt;0.08&lt;/td&gt;\n&lt;td&gt;2,035.55&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;19,448.30&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;4,086,961.29&lt;/td&gt;\n&lt;td&gt;0.15&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;strong&gt;LookupPerByteSpan&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;27.03&lt;/td&gt;\n&lt;td&gt;0.11&lt;/td&gt;\n&lt;td&gt;184.26&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;866.03&lt;/td&gt;\n&lt;td&gt;0.08&lt;/td&gt;\n&lt;td&gt;2,005.34&lt;/td&gt;\n&lt;td&gt;0.10&lt;/td&gt;\n&lt;td&gt;19,760.55&lt;/td&gt;\n&lt;td&gt;0.09&lt;/td&gt;\n&lt;td&gt;4,192,457.14&lt;/td&gt;\n&lt;td&gt;0.16&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Lookup32SpanUnsafeDirect&lt;/td&gt;\n&lt;td&gt;16.90&lt;/td&gt;\n&lt;td&gt;0.07&lt;/td&gt;\n&lt;td&gt;99.20&lt;/td&gt;\n&lt;td&gt;0.05&lt;/td&gt;\n&lt;td&gt;436.66&lt;/td&gt;\n&lt;td&gt;0.04&lt;/td&gt;\n&lt;td&gt;895.23&lt;/td&gt;\n&lt;td&gt;0.04&lt;/td&gt;\n&lt;td&gt;8,266.69&lt;/td&gt;\n&lt;td&gt;0.04&lt;/td&gt;\n&lt;td&gt;1,506,058.05&lt;/td&gt;\n&lt;td&gt;0.06&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Lookup32UnsafeDirect&lt;/td&gt;\n&lt;td&gt;16.51&lt;/td&gt;\n&lt;td&gt;0.07&lt;/td&gt;\n&lt;td&gt;98.64&lt;/td&gt;\n&lt;td&gt;0.05&lt;/td&gt;\n&lt;td&gt;436.49&lt;/td&gt;\n&lt;td&gt;0.04&lt;/td&gt;\n&lt;td&gt;878.28&lt;/td&gt;\n&lt;td&gt;0.04&lt;/td&gt;\n&lt;td&gt;8,278.18&lt;/td&gt;\n&lt;td&gt;0.04&lt;/td&gt;\n&lt;td&gt;1,753,655.67&lt;/td&gt;\n&lt;td&gt;0.07&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;em&gt;&lt;strong&gt;ConvertToHexString&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;19.27&lt;/td&gt;\n&lt;td&gt;0.08&lt;/td&gt;\n&lt;td&gt;64.83&lt;/td&gt;\n&lt;td&gt;0.03&lt;/td&gt;\n&lt;td&gt;295.15&lt;/td&gt;\n&lt;td&gt;0.03&lt;/td&gt;\n&lt;td&gt;585.86&lt;/td&gt;\n&lt;td&gt;0.03&lt;/td&gt;\n&lt;td&gt;5,445.73&lt;/td&gt;\n&lt;td&gt;0.02&lt;/td&gt;\n&lt;td&gt;1,478,363.32&lt;/td&gt;\n&lt;td&gt;0.06&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;ConvertToHexString.ToLower()&lt;/td&gt;\n&lt;td&gt;45.66&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;175.16&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;787.86&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;1,516.65&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;13,939.71&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;2,620,046.76&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;\n&lt;p&gt;The method &lt;code&gt;ConvertToHexString&lt;/code&gt; is without any doubt the fastest out there and in my perspective, it should be always used if you have the option - it&apos;s very fast and very clean.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; System;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; result = Convert.ToHexString(bytesToConvert);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If not, I decided to highlight two other methods I consider worthy below.\nI decided not to highlight &lt;code&gt;unsafe&lt;/code&gt; methods since such code might be not only, well, &lt;em&gt;unsafe&lt;/em&gt;, but most projects I&apos;ve worked with don&apos;t allow such code at all.&lt;/p&gt;\n&lt;h2&gt;Worthy mentions&lt;/h2&gt;\n&lt;p&gt;The first one is &lt;code&gt;LookupPerByteSpan&lt;/code&gt;.&lt;br&gt;\nThe code is almost identical to the code in &lt;code&gt;LookupPerByte&lt;/code&gt; by &lt;a href=&quot;https://stackoverflow.com/users/445517&quot;&gt;CodesInChaos&lt;/a&gt; from this &lt;a href=&quot;http://stackoverflow.com/a/24343727/48700&quot;&gt;answer&lt;/a&gt;. This one is the fastest not-&lt;code&gt;unsafe&lt;/code&gt; method benchmarked. The difference between the original and this one is in using stack allocation for shorter inputs (up to 512 bytes). This makes this method around 10 % faster on these inputs, but around 5 % slower on larger ones. Since most of the data I work with is shorter than larger I opted in for this one. &lt;code&gt;LookupSpanPerByteSpan&lt;/code&gt; is also very fast, but the size of the code of its &lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt; mapping is too large compared to all other methods.&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;[] Lookup32 = Enumerable.Range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;).Select(i =&amp;gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s = i.ToString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X2&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + ((&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)s[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n}).ToArray();\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHexString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result = bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;\n        ? &lt;span class=&quot;hljs-keyword&quot;&gt;stackalloc&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n        : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; val = Lookup32[bytes[i]];\n        result[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)val;\n        result[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(val &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(result);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The second one is &lt;code&gt;LookupAndShiftAlphabetSpanMultiply&lt;/code&gt;.\nFirst I would like to mention that this one is my own creation. I believe that this method is not only pretty fast but also simple to understand.\nThe speed comes from a change that happened in C# 7.3, where declared &lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt; methods returning a &lt;em&gt;constant&lt;/em&gt; array initialization - &lt;code&gt;new byte {1, 2, 3, ...}&lt;/code&gt; - are compiled as the program&apos;s static data, therefore omitting a redundant memcpy. &lt;a href=&quot;https://vcsjones.dev/csharp-readonly-span-bytes-static/&quot; rel=&quot;nofollow noreferrer&quot;&gt;[source]&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; ReadOnlySpan&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;&amp;gt; HexAlphabetSpan =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[]\n{\n    (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;,\n    (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;6&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;7&apos;&lt;/span&gt;,\n    (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;8&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,\n    (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHexString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; res = bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt; ? &lt;span class=&quot;hljs-keyword&quot;&gt;stackalloc&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; ++i)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; j = i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n        res[j] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)HexAlphabetSpan[bytes[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n        res[j + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)HexAlphabetSpan[bytes[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;];\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(res);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Source code&lt;/h2&gt;\n&lt;p&gt;The source code for all methods, the benchmark and this answer can be found &lt;a href=&quot;https://gist.github.com/antoninkriz/915364de7f264dd14a572936abd5228b&quot; rel=&quot;nofollow noreferrer&quot;&gt;here as a Gist on my GitHub&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;And for inserting into an SQL string (if you&apos;re not using command parameters):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToSQLHexString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] Source&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;0x&quot;&lt;/span&gt; + BitConverter.ToString(Source).Replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In terms of speed, this seems to be better than anything here:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToHexString&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] data&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i, j, k;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; l = data.Length;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] r = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[l * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, j = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; l; ++i) {\n      b = data[i];\n      k = b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n      r[j++] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(k &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? k + &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : k + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n      k = b &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;;\n      r[j++] = (&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;)(k &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; ? k + &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : k + &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(r);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I did not get the code you suggested to work, Olipro. &lt;code&gt;hex[i] + hex[i+1]&lt;/code&gt; apparently returned an &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I did, however have some success by taking some hints from Waleeds code and hammering this together. It&apos;s ugly as hell but it seems to work and performs at 1/3 of the time compared to the others according to my tests (using patridges testing mechanism). Depending on input size. Switching around the ?:s to separate out 0-9 first would probably yield a slightly faster result since there are more numbers than letters.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;StringToByteArray2&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hex&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[hex.Length/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; bl = bytes.Length;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bl; ++i)\n    {\n        bytes[i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)((hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] &amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt; ? hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] - &lt;span class=&quot;hljs-number&quot;&gt;0x57&lt;/span&gt; : hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] &amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; ? hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i] - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;);\n        bytes[i] |= (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt; ? hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;0x57&lt;/span&gt; : hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; ? hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : hex[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; bytes;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This version of ByteArrayToHexViaByteManipulation could be faster.&lt;/p&gt;\n\n&lt;p&gt;From my reports:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;ByteArrayToHexViaByteManipulation3: 1,68 average ticks (over 1000 runs), 17,5X&lt;/li&gt;\n&lt;li&gt;ByteArrayToHexViaByteManipulation2: 1,73 average ticks (over 1000 runs), 16,9X&lt;/li&gt;\n&lt;li&gt;ByteArrayToHexViaByteManipulation: 2,90 average ticks (over 1000 runs), 10,1X&lt;/li&gt;\n&lt;li&gt;ByteArrayToHexViaLookupAndShift: 3,22 average ticks (over 1000 runs), 9,1X&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] hexAlphabet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[]\n    {&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;6&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;7&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;};\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaByteManipulation3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++)\n    {\n        b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(bytes[i] &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = hexAlphabet[b];\n        b = ((&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(bytes[i] &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;));\n        c[i * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = hexAlphabet[b];\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And I think this one is an optimization:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] hexAlphabet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[]\n        {&lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;1&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;2&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;4&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;5&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;6&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;7&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;8&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;F&apos;&lt;/span&gt;};\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ByteArrayToHexViaByteManipulation4&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] bytes&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] c = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[bytes.Length * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, ptr = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; bytes.Length; i++, ptr += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; b = bytes[i];\n            c[ptr] = hexAlphabet[b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n            c[ptr + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = hexAlphabet[b &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;];\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(c);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ll enter this bit fiddling competition as I have an answer that also uses bit-fiddling to &lt;em&gt;decode&lt;/em&gt; hexadecimals. Note that using character arrays may be even faster as calling &lt;code&gt;StringBuilder&lt;/code&gt; methods will take time as well.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;ToHex&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] data&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; dataLength = data.Length;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// pre-create the stringbuilder using the length of the data * 2, precisely enough&lt;/span&gt;\n    StringBuilder sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder (dataLength * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; dataLength; i++) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; b = data [i];\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// check using calculation over bits to see if first tuple is a letter&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// isLetter is zero if it is a digit, 1 if it is a letter&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; isLetter = (b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &amp;amp; ((b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) | (b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// calculate the code using a multiplication to make up the difference between&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// a digit character and an alphanumerical character&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; code = &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; + ((b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;) + isLetter * (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// now append the result, after casting the code point to a character&lt;/span&gt;\n        sb.Append ((Char)code);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// do the same with the lower (less significant) tuple&lt;/span&gt;\n        isLetter = (b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &amp;amp; ((b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) | (b &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        code = &lt;span class=&quot;hljs-string&quot;&gt;&apos;0&apos;&lt;/span&gt; + (b &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;) + isLetter * (&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-string&quot;&gt;&apos;9&apos;&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        sb.Append ((Char)code);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sb.ToString ();\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;FromHex&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;String hex&lt;/span&gt;)&lt;/span&gt;\n{\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// pre-create the array&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; resultLength = hex.Length / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[resultLength];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// set validity = 0 (0 = valid, anything else is not valid)&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; validity = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; c, isLetter, &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;, validDigitStruct, validDigit, validLetterStruct, validLetter;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, hexOffset = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; resultLength; i++, hexOffset += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n        c = hex [hexOffset];\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// check using calculation over bits to see if first char is a letter&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// isLetter is zero if it is a digit, 1 if it is a letter (upper &amp;amp; lowercase)&lt;/span&gt;\n        isLetter = (c &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// calculate the tuple value using a multiplication to make up the difference between&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// a digit character and an alphanumerical character&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// minus 1 for the fact that the letters are not zero based&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = ((c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;) + isLetter * (&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// check validity of all the other bits&lt;/span&gt;\n        validity |= c &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// changed to &amp;gt;&amp;gt;, maybe not OK, use UInt?&lt;/span&gt;\n\n        validDigitStruct = (c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;) ^ &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;;\n        validDigit = ((c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) * (c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x6&lt;/span&gt;);\n        validity |= (isLetter ^ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * (validDigitStruct | validDigit);\n\n        validLetterStruct = c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x18&lt;/span&gt;;\n        validLetter = (((c - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x4&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * ((c - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x2&lt;/span&gt;);\n        validity |= isLetter * (validLetterStruct | validLetter);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// do the same with the lower (less significant) tuple&lt;/span&gt;\n        c = hex [hexOffset + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        isLetter = (c &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; ^= (c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0xF&lt;/span&gt;) + isLetter * (&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n        result [i] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// check validity of all the other bits&lt;/span&gt;\n        validity |= c &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// changed to &amp;gt;&amp;gt;, maybe not OK, use UInt?&lt;/span&gt;\n\n        validDigitStruct = (c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;) ^ &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;;\n        validDigit = ((c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) * (c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x6&lt;/span&gt;);\n        validity |= (isLetter ^ &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) * (validDigitStruct | validDigit);\n\n        validLetterStruct = c &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x18&lt;/span&gt;;\n        validLetter = (((c - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x4&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) * ((c - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;amp; &lt;span class=&quot;hljs-number&quot;&gt;0x2&lt;/span&gt;);\n        validity |= isLetter * (validLetterStruct | validLetter);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (validity != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException (&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hexadecimal encoding incorrect for input &quot;&lt;/span&gt; + hex);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Converted from Java code.&lt;/p&gt;\n    ","\n&lt;p&gt;For performance I would go with drphrozens solution. A tiny optimization for the decoder could be to use a table for either char to get rid of the &quot;&amp;lt;&amp;lt; 4&quot;.&lt;/p&gt;\n\n&lt;p&gt;Clearly the two method calls are costly. If some kind of check is made either on input or output data (could be CRC, checksum or whatever) the &lt;code&gt;if (b == 255)...&lt;/code&gt; could be skipped and thereby also the method calls altogether.&lt;/p&gt;\n\n&lt;p&gt;Using &lt;code&gt;offset++&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; instead of &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;offset + 1&lt;/code&gt; might give some theoretical benefit but I suspect the compiler handles this better than me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] LookupTableLow = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] {\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x01&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x02&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x03&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x04&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x05&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x06&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x07&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x08&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x09&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0A&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0B&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0C&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0D&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0E&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0F&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0A&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0B&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0C&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0D&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0E&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x0F&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] LookupTableHigh = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] {\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x90&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xA0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xB0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xC0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xD0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xE0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xF0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xA0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xB0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xC0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xD0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xE0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xF0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;,\n  &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0xFF&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LookupLow&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; c&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = LookupTableLow[c];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expected a hex character, got &quot;&lt;/span&gt; + c);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LookupHigh&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt; c&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; b = LookupTableHigh[c];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Expected a hex character, got &quot;&lt;/span&gt; + c);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ToByte&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;char&lt;/span&gt;[] chars, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; offset&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(LookupHigh(chars[offset++]) | LookupLow(chars[offset]));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is just off the top of my head and has not been tested or benchmarked.&lt;/p&gt;\n    ","\n&lt;h2 id=&quot;tests-hex-string-to-byte-array&quot;&gt;Tests: Hex String To Byte Array&lt;/h2&gt;\n&lt;p&gt;I noticed that most of tests were performed on functions that convert Bytes array to Hex string.\nSo, in this post I will focus on the other side: functions that convert Hex String To Byte Array.\nIf you are interested in result only, you could skip down to &lt;strong&gt;Summary&lt;/strong&gt; section.\nThe test code file is supplied at the end of the post.&lt;/p&gt;\n&lt;h2 id=&quot;labels&quot;&gt;Labels&lt;/h2&gt;\n&lt;p&gt;I would like to name the function from the accepted answer (by Tomalak) StringToByteArrayV1, or to shortcut it to V1. rest of functions will be named in same way: V2, V3, V4, ..., etc.&lt;/p&gt;\n&lt;h2 id=&quot;index-of-participating-functions&quot;&gt;Index of Participating Functions&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/311179/13817556&quot;&gt;StringToByteArrayV1 by Tomalak&lt;/a&gt; (the accepted answer)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2556329/13817556&quot;&gt;StringToByteArrayV2 by Mykroft&lt;/a&gt; (using SoapHexBinary)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/6274772/13817556&quot;&gt;StringToByteArrayV3 by drphrozen&lt;/a&gt; (look-up table)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/17923942/13817556&quot;&gt;StringToByteArrayV4 by CoperNick&lt;/a&gt; (Byte Manipulation)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2050653/13817556&quot;&gt;StringToByteArrayV5_1 by Chris F&lt;/a&gt; (Byte Manipulation)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2050653/13817556&quot;&gt;StringToByteArrayV5_2 by Chris F&lt;/a&gt; ( V5_1 + ehanced it based on Amir Rezaei&apos;s comment)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2050653/13817556&quot;&gt;StringToByteArrayV5_3 by Chris F&lt;/a&gt; ( V5_2 + ehanced it based on Ben Voigt&apos;s comment) (you could see final shape of it at this post published test code)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/10706477/13817556&quot;&gt;StringToByteArrayV6 by Ben Mosher&lt;/a&gt; (Byte Manipulation)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/20695932/13817556&quot;&gt;StringToByteArrayV7 by Maratius&lt;/a&gt; (Byte Manipulation - the safe version)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/20695932/13817556&quot;&gt;StringToByteArrayV8 by Maratius&lt;/a&gt; (Byte Manipulation - the unsafe version)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/34333212/13817556&quot;&gt;StringToByteArrayV9 by Geograph&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/64498722/13817556&quot;&gt;StringToByteArrayV10 by AlejandroAlis&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2889978/13817556&quot;&gt;StringToByteArrayV11 by Fredrik Hu&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/21246369/13817556&quot;&gt;StringToByteArrayV12 by Maarten Bodewes&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/6275329/13817556&quot;&gt;StringToByteArrayV13 by ClausAndersen&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/6378247/13817556&quot;&gt;StringToByteArrayV14 by Stas Makutin&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/16565896/13817556&quot;&gt;StringToByteArrayV15 by JJJ&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/16907438/13817556&quot;&gt;StringToByteArrayV16 by JamieSee&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/18939148/13817556&quot;&gt;StringToByteArrayV17 by spacepille&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/60626134/13817556&quot;&gt;StringToByteArrayV18 by Gregory Morse&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/10758999/13817556&quot;&gt;StringToByteArrayV19 by Rick&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/56378760/13817556&quot;&gt;StringToByteArrayV20 by SandRock&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/63864709/13817556&quot;&gt;StringToByteArrayV21 by Paul&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2 id=&quot;correctness-test&quot;&gt;Correctness Test&lt;/h2&gt;\n&lt;p&gt;I have tested correctness by passing all 256 possible values of 1 byte, then checking output to see if correct.\nResult:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;V18 has issue with strings start with &quot;00&quot; (see Roger Stewart comment on it ). other than that it passes all tests.&lt;/li&gt;\n&lt;li&gt;if hex string alphabet letters are uppercase: all functions successfully passed&lt;/li&gt;\n&lt;li&gt;if hex string alphabet letters are lowercase then the following functions failed: V5_1, V5_2, v7, V8, V15, V19&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;note: V5_3 solves this issue (of V5_1 and V5_2)&lt;/p&gt;\n&lt;h2 id=&quot;performance-test&quot;&gt;Performance Test&lt;/h2&gt;\n&lt;p&gt;I have done performance tests using Stopwatch class.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Performance for long strings&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;input length: &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt; bytes\nruns: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;\naverage elapsed time per run:\nV1 = &lt;span class=&quot;hljs-number&quot;&gt;136.4&lt;/span&gt;ms\nV2 = &lt;span class=&quot;hljs-number&quot;&gt;104.5&lt;/span&gt;ms\nV3 = &lt;span class=&quot;hljs-number&quot;&gt;22.0&lt;/span&gt;ms\nV4 = &lt;span class=&quot;hljs-number&quot;&gt;9.9&lt;/span&gt;ms\nV5_1 = &lt;span class=&quot;hljs-number&quot;&gt;10.2&lt;/span&gt;ms\nV5_2 = &lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;ms\nV5_3 = &lt;span class=&quot;hljs-number&quot;&gt;9.3&lt;/span&gt;ms\nV6 = &lt;span class=&quot;hljs-number&quot;&gt;18.3&lt;/span&gt;ms\nV7 = &lt;span class=&quot;hljs-number&quot;&gt;9.8&lt;/span&gt;ms\nV8 = &lt;span class=&quot;hljs-number&quot;&gt;8.8&lt;/span&gt;ms\nV9 = &lt;span class=&quot;hljs-number&quot;&gt;10.2&lt;/span&gt;ms\nV10 = &lt;span class=&quot;hljs-number&quot;&gt;19.0&lt;/span&gt;ms\nV11 = &lt;span class=&quot;hljs-number&quot;&gt;12.2&lt;/span&gt;ms\nV12 = &lt;span class=&quot;hljs-number&quot;&gt;27.4&lt;/span&gt;ms\nV13 = &lt;span class=&quot;hljs-number&quot;&gt;21.8&lt;/span&gt;ms\nV14 = &lt;span class=&quot;hljs-number&quot;&gt;12.0&lt;/span&gt;ms\nV15 = &lt;span class=&quot;hljs-number&quot;&gt;14.9&lt;/span&gt;ms\nV16 = &lt;span class=&quot;hljs-number&quot;&gt;15.3&lt;/span&gt;ms\nV17 = &lt;span class=&quot;hljs-number&quot;&gt;9.5&lt;/span&gt;ms\nV18 got excluded &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt; test, because it was very slow &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; very &lt;span class=&quot;hljs-built_in&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;\nV19 = &lt;span class=&quot;hljs-number&quot;&gt;222.8&lt;/span&gt;ms\nV20 = &lt;span class=&quot;hljs-number&quot;&gt;66.0&lt;/span&gt;ms\nV21 = &lt;span class=&quot;hljs-number&quot;&gt;15.4&lt;/span&gt;ms\n\nV1 average ticks per run: &lt;span class=&quot;hljs-number&quot;&gt;1363529.4&lt;/span&gt;\nV2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.3&lt;/span&gt; times (ticks ratio)\nV3 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6.2&lt;/span&gt; times (ticks ratio)\nV4 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;13.8&lt;/span&gt; times (ticks ratio)\nV5_1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;13.3&lt;/span&gt; times (ticks ratio)\nV5_2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.2&lt;/span&gt; times (ticks ratio)\nV5_3 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;14.8&lt;/span&gt; times (ticks ratio)\nV6 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7.4&lt;/span&gt; times (ticks ratio)\nV7 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;13.9&lt;/span&gt; times (ticks ratio)\nV8 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.4&lt;/span&gt; times (ticks ratio)\nV9 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;13.4&lt;/span&gt; times (ticks ratio)\nV10 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7.2&lt;/span&gt; times (ticks ratio)\nV11 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;11.1&lt;/span&gt; times (ticks ratio)\nV12 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5.0&lt;/span&gt; times (ticks ratio)\nV13 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;6.3&lt;/span&gt; times (ticks ratio)\nV14 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;11.4&lt;/span&gt; times (ticks ratio)\nV15 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9.2&lt;/span&gt; times (ticks ratio)\nV16 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.9&lt;/span&gt; times (ticks ratio)\nV17 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;14.4&lt;/span&gt; times (ticks ratio)\nV19 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more SLOW than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt; times (ticks ratio)\nV20 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2.1&lt;/span&gt; times (ticks ratio)\nV21 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.9&lt;/span&gt; times (ticks ratio)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Performance of V18 for long strings&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;V18 took &lt;span class=&quot;hljs-built_in&quot;&gt;long&lt;/span&gt; time at the previous test, \nso &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;s decrease length for it:  \ninput length: 1,000,000 bytes\nruns: 100\naverage elapsed time per run: V1 = 14.1ms , V18 = 146.7ms\nV1 average ticks per run: 140630.3\nV18 is more SLOW than V1 by: 10.4 times (ticks ratio)\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Performance for short strings&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;input length: &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;\nruns: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;000&lt;/span&gt;\nV1 average ticks per run: &lt;span class=&quot;hljs-number&quot;&gt;14.6&lt;/span&gt;\nV2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.4&lt;/span&gt; times (ticks ratio)\nV3 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5.9&lt;/span&gt; times (ticks ratio)\nV4 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.7&lt;/span&gt; times (ticks ratio)\nV5_1 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.1&lt;/span&gt; times (ticks ratio)\nV5_2 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18.4&lt;/span&gt; times (ticks ratio)\nV5_3 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16.3&lt;/span&gt; times (ticks ratio)\nV6 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5.3&lt;/span&gt; times (ticks ratio)\nV7 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.7&lt;/span&gt; times (ticks ratio)\nV8 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;18.0&lt;/span&gt; times (ticks ratio)\nV9 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15.5&lt;/span&gt; times (ticks ratio)\nV10 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;7.8&lt;/span&gt; times (ticks ratio)\nV11 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;12.4&lt;/span&gt; times (ticks ratio)\nV12 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5.3&lt;/span&gt; times (ticks ratio)\nV13 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;5.2&lt;/span&gt; times (ticks ratio)\nV14 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;13.4&lt;/span&gt; times (ticks ratio)\nV15 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9.9&lt;/span&gt; times (ticks ratio)\nV16 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;9.2&lt;/span&gt; times (ticks ratio)\nV17 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;16.2&lt;/span&gt; times (ticks ratio)\nV18 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.1&lt;/span&gt; times (ticks ratio)\nV19 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more SLOW than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.6&lt;/span&gt; times (ticks ratio)\nV20 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1.9&lt;/span&gt; times (ticks ratio)\nV21 &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; more fast than V1 &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;11.4&lt;/span&gt; times (ticks ratio)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id=&quot;testing-code&quot;&gt;Testing Code&lt;/h2&gt;\n&lt;p&gt;It is good idea to read Disclaimer section down here in this post, before using any from the following code\n&lt;a href=&quot;https://github.com/Ghosticollis/performance-tests/blob/main/MTestPerformance.cs&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://github.com/Ghosticollis/performance-tests/blob/main/MTestPerformance.cs&lt;/a&gt;&lt;/p&gt;\n&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;\n&lt;p&gt;I recommend using one of the following functions, because of the good performance, and support both upper and lower case:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/17923942/13817556&quot;&gt;StringToByteArrayV4 by CoperNick&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/34333212/13817556&quot;&gt;StringToByteArrayV9 by Geograph&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/18939148/13817556&quot;&gt;StringToByteArrayV17 by spacepille&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/2050653/13817556&quot;&gt;StringToByteArrayV5_3 basically by Chris F&lt;/a&gt; (it is base on V5_1, but I have enhanced it based on Amir Rezaei&apos;s and Ben Voigt&apos;s comments).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Here is the final shape of V5_3:&lt;/p&gt;\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] &lt;span class=&quot;hljs-title&quot;&gt;HexStringToByteArrayV5_3&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; hexString&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hexStringLength = hexString.Length;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[] b = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;[hexStringLength / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; hexStringLength; i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; topChar = hexString[i];\n        topChar = (topChar &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt; ? (topChar &amp;amp; ~&lt;span class=&quot;hljs-number&quot;&gt;0x20&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : topChar - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; bottomChar = hexString[i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        bottomChar = bottomChar &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0x40&lt;/span&gt; ? (bottomChar &amp;amp; ~&lt;span class=&quot;hljs-number&quot;&gt;0x20&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;0x37&lt;/span&gt; : bottomChar - &lt;span class=&quot;hljs-number&quot;&gt;0x30&lt;/span&gt;;\n        b[i / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;hljs-built_in&quot;&gt;byte&lt;/span&gt;)(topChar + bottomChar);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;\n&lt;p&gt;WARNING: I don&apos;t have proper knowledge in testing. The main purpose of these primitive tests is to give quick overview on what might be good from all of posted functions.\nIf you need accurate results, please use proper testing tools.&lt;/p&gt;\n&lt;p&gt;Finally, I would like to say I am new to be active at stackoverflow, sorry if my post is lacking.\ncomments to enhance this post would be appreciated.&lt;/p&gt;\n    "],"450":["\n&lt;blockquote&gt;\n  &lt;p&gt;Integer variables are stored as 16-bit (2-byte) numbers &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/integer-data-type&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Office VBA Reference&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Long (long integer) variables are stored as signed 32-bit (4-byte) numbers&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/office/vba/Language/Reference/User-Interface-Help/long-data-type&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Office VBA Reference&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So, the benefit is in reduced memory space. An Integer takes up half the memory that a Long does. Now, we are talking about 2 bytes, so it&apos;s not going to make a real difference for individual integers, it&apos;s only a concern when you are dealing with TONS of integers (e.g large arrays) and memory usage is critical.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;BUT&lt;/em&gt;&lt;/strong&gt; on a &lt;strong&gt;&lt;em&gt;32&lt;/em&gt;&lt;/strong&gt; bit system, the halved memory usage comes at a performance cost. When the processor actually performs some computation with a 16 bit integer (e.g. incrementing a loop counter), the value silently gets converted to a temporary Long without the benefit of the larger range of numbers to work with. Overflows still happen, and the register that the processor uses to store the values for the calculation will take the same amount of memory (32 bits) either way. &lt;a href=&quot;http://bytes.com/topic/access/answers/211764-looping-variables-integer-vs-long&quot; rel=&quot;noreferrer&quot;&gt;Performance may even be &lt;strong&gt;&lt;em&gt;hurt&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; because the datatype has to be converted (at a very low level).&lt;/p&gt;\n\n&lt;p&gt;Not the reference I was looking for but....&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;My understanding is that the underlying VB engine converts integers to long even if its declared as an integer. Therefore a slight speed decrease can be noted. I have believed this for some time and perhaps thats also why the above statement was made, I didnt ask for reasoning. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.ozgrid.com/forum/showthread.php?t=79584&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;ozgrid forums&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the reference I was looking for.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Short answer, in 32-bit systems 2 byte integers are converted to 4 byte\n  Longs. There really is no other way so that respective bits correctly line\n  up for any form of processing. Consider the following&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;MsgBox Hex(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = Hex(&lt;span class=&quot;hljs-number&quot;&gt;65535&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;&apos; = True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Obviously -1 does not equal 65535 yet the computer is returning the correct\n  answer, namely\n  &quot;FFFF&quot; = &quot;FFFF&quot;&lt;/p&gt;\n  \n  &lt;p&gt;However had we coerced the -1 to a long first we would have got the right\n  answer (the 65535 being greater than 32k is automatically a long)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;MsgBox Hex(-&lt;span class=&quot;hljs-number&quot;&gt;1&amp;amp;&lt;/span&gt;) = Hex(&lt;span class=&quot;hljs-number&quot;&gt;65535&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;&apos; = False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;&quot;FFFFFFFF&quot; = &quot;FFFF&quot;&lt;/p&gt;\n  \n  &lt;p&gt;Generally there is no point in VBA to declare &quot;As Integer&quot; in modern\n  systems, except perhaps for some legacy API&apos;s that expect to receive an\n  Integer.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.pcreview.co.uk/forums/vba-code-optimization-why-using-long-instead-integer-t3606971.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;pcreview forum&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And at long last I found the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/office/aa164506%28v=office.10%29.aspx&quot; rel=&quot;noreferrer&quot;&gt;msdn documentation&lt;/a&gt; I was really truly looking for.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Traditionally, VBA programmers have used integers to hold small\n  numbers, because they required less memory. In recent versions,\n  however, VBA converts all integer values to type Long, even if they&apos;re\n  declared as type Integer. So there&apos;s no longer a performance advantage\n  to using Integer variables; in fact, Long variables may be slightly\n  faster because VBA does not have to convert them.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;sub&gt;To clarify based on the comments: Integers &lt;em&gt;still&lt;/em&gt; require less memory to store - a large array of integers will need significantly less RAM than an Long array with the same dimensions. But because the processor needs to work with 32 bit chunks of memory, VBA converts Integers to Longs &lt;em&gt;temporarily&lt;/em&gt; when it performs calculations&lt;/sub&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;So, in summary, there&apos;s almost no good reason to use an &lt;code&gt;Integer&lt;/code&gt; type these days. &lt;strong&gt;&lt;em&gt;Unless&lt;/em&gt;&lt;/strong&gt; you need to Interop with an old API call that expects a 16 bit int, or you are working with large arrays of small integers and memory is at a premium.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;One thing worth pointing out is that some old API functions may be expecting parameters that are 16-bit (2-byte) Integers and if you are on a 32 bit and trying to pass an Integer (that is already a 4-byte long) by reference it will not work due to difference in length of bytes.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thanks to Vba4All for pointing that out. &lt;/p&gt;\n    ","\n&lt;p&gt;Even though this post is four years old, I was curious about this and ran some tests. The most important thing to note is that a coder should &lt;strong&gt;&lt;em&gt;ALWAYS declare a variable as SOMETHING&lt;/em&gt;&lt;/strong&gt;. Undeclared variables clearly performed the worst (undeclared are technically &lt;code&gt;Variant&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Long&lt;/code&gt; did perform the fastest, so I have to think that Microsoft&apos;s recommendation to always use &lt;code&gt;Long&lt;/code&gt; instead of &lt;code&gt;Integer&lt;/code&gt; makes sense. I&apos;m guessing the same as true with &lt;code&gt;Byte&lt;/code&gt;, but most coders don&apos;t use this.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;RESULTS ON 64 BIT WINDOWS 10 LAPTOP&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ptDyT.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ptDyT.jpg&quot; alt=&quot;Variable Olympics&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Code Used:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; VariableOlymics()\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;Run this macro as many times as you&apos;d like, with an activesheet ready for data&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;in cells B2 to D6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; beginTIME &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, p &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n    trials = &lt;span class=&quot;hljs-number&quot;&gt;1000000000&lt;/span&gt;\n    p = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomBYTE\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomINTEGER\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomLONG\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomDOUBLE\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    &lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; trials\n        &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; boomUNDECLARED\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Call&lt;/span&gt; Finished(p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials))\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomBYTE()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomINTEGER()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomLONG()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomDOUBLE()\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomUNDECLARED()\n\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Finished(i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, timeUSED &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;).Offset(i, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            .Value = .Value + trials\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value = .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value + timeUSED\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).FormulaR1C1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;=ROUND(RC[-1]*3600*24,0)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As noted in other answers, the real difference between int and long is the size of its memory space and therefore the size of the number it can hold.&lt;/p&gt;\n\n&lt;p&gt;here is the full documentation on these datatypes\n&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/office/ms474284(v=office.14).aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://msdn.microsoft.com/en-us/library/office/ms474284(v=office.14).aspx&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;an &lt;strong&gt;Integer&lt;/strong&gt; is 16 bits and can represent a value between -32,768 and 32,767&lt;/p&gt;\n\n&lt;p&gt;a &lt;strong&gt;Long&lt;/strong&gt; is 32 bits and can represent -2,147,483,648 to 2,147,483,647&lt;/p&gt;\n\n&lt;p&gt;and there is a &lt;strong&gt;LongLong&lt;/strong&gt; which is 64 bits and can handle like 9 pentilion &lt;/p&gt;\n\n&lt;p&gt;One of the most important things to remember on this is that datatypes differ by both language and operating system / platform. In your world of VBA a long is 32 bits, but in c# on a 64 bit processor a long is 64 bits. This can introduce significant confusion.&lt;/p&gt;\n\n&lt;p&gt;Although VBA does not have support for it, when you move to any other language in .net or java or other, I much prefer to use the system datatypes of &lt;strong&gt;int16&lt;/strong&gt;, &lt;strong&gt;int32&lt;/strong&gt; and &lt;strong&gt;int64&lt;/strong&gt; which allows me to b much more transparent about the values that can be held in these datatypes.&lt;/p&gt;\n    ","\n&lt;p&gt;VBA has a lot of historical baggage.  &lt;/p&gt;\n\n&lt;p&gt;An &lt;code&gt;Integer&lt;/code&gt; is 16 bits wide and was a good default numeric type back when 16 bit architecture/word sizes were prevalent.&lt;/p&gt;\n\n&lt;p&gt;A &lt;code&gt;Long&lt;/code&gt; is 32 bits wide and (IMO) should be used wherever possible.&lt;/p&gt;\n    ","\n&lt;p&gt;I have taken @PGSystemTester&apos;s method and updated it to remove some potential variability. By placing the loop in the routines, this removes the time taken to call the routine (which is a lot of time). I have also turned off screen updating to remove any delays this may cause.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Long&lt;/code&gt; still performed the best, and as these results are more closely limited to the impacts of the variable types alone, the magnitude of variation is worth noting.&lt;/p&gt;\n\n&lt;p&gt;My results (desktop, Windows 7, Excel 2010):&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/RNuDE.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/RNuDE.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Code used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-vb s-code-block&quot;&gt;&lt;code class=&quot;hljs language-vbnet&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Explicit&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; VariableOlympics()\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;Run this macro as many times as you&apos;d like, with an activesheet ready for data&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&apos;in cells B2 to D6&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; beginTIME &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, p &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; chosenWorksheet &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Worksheet\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;Set&lt;/span&gt; chosenWorksheet = ThisWorkbook.Sheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;TimeTrialInfo&quot;&lt;/span&gt;)\n\n    Application.EnableEvents = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    Application.Calculation = xlCalculationManual\n    Application.ScreenUpdating = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n\n    trials = &lt;span class=&quot;hljs-number&quot;&gt;1000000000&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&apos; 1,000,000,000 - not 10,000,000,000 as used by @PGSystemTester&lt;/span&gt;\n\n    p = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\n    beginTIME = Now\n    boomBYTE trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    beginTIME = Now\n    boomINTEGER trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    boomLONG trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    boomDOUBLE trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n\n    beginTIME = Now\n    boomUNDECLARED trials\n    Finished p, Now - beginTIME, &lt;span class=&quot;hljs-built_in&quot;&gt;CDbl&lt;/span&gt;(trials), chosenWorksheet.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B2&quot;&lt;/span&gt;)\n    p = p + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n    Application.EnableEvents = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    Application.Calculation = xlCalculationAutomatic\n    Application.ScreenUpdating = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n    chosenWorksheet.Calculate\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomBYTE(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Byte&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomINTEGER(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomLONG(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomDOUBLE(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; boomUNDECLARED(numTrials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant, b &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant, c &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Variant\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Dim&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;For&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;To&lt;/span&gt; numTrials\n    a = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    b = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + a\n    c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + b\n    c = c + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;Next&lt;/span&gt; i\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt; Finished(i &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Long&lt;/span&gt;, timeUSED &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, trials &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;, initialCell &lt;span class=&quot;hljs-keyword&quot;&gt;As&lt;/span&gt; Range)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt; initialCell.Offset(i, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            .Value = trials\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).Value = timeUSED\n            .Offset(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).FormulaR1C1 = &lt;span class=&quot;hljs-string&quot;&gt;&quot;=ROUND(RC[-1]*3600*24,2)&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;With&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;Sub&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a &lt;strong&gt;space&lt;/strong&gt; vs &lt;strong&gt;necessity&lt;/strong&gt; problem. &lt;/p&gt;\n\n&lt;p&gt;In some situations it&apos;s a &lt;strong&gt;necessity&lt;/strong&gt; to use a long. If you&apos;re looping through rows in a large excel file, the variable that holds the row number should be a long.&lt;/p&gt;\n\n&lt;p&gt;However, sometimes you will know that an integer can handle your problem and using a long would be a waste of &lt;strong&gt;space&lt;/strong&gt; (memory). Individual variables really don&apos;t make much of a difference, but when you start dealing with arrays it can make a big difference. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In VBA7, Integers are 2 bytes and longs are 4 bytes&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you have an array of 1 million numbers between 1 and 10, using an Integer array would take up &lt;em&gt;about&lt;/em&gt; 2MB of RAM, compared to roughly 4MB of RAM for a long array.  &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;As others already mentioned, a &lt;strong&gt;Long&lt;/strong&gt; &lt;em&gt;may&lt;/em&gt; take twice as much space as an &lt;strong&gt;Integer&lt;/strong&gt;. As others also already mentioned, the high capacity of current computers means you will see &lt;strong&gt;no difference in performance whatsoever&lt;/strong&gt;, unless you are dealing with extra extra extra large amounts of data:&lt;/p&gt;\n\n&lt;h3&gt;Memory&lt;/h3&gt;\n\n&lt;p&gt;Considering &lt;strong&gt;1 million values&lt;/strong&gt;, the difference between using Integers versus Longs would be of 2 bytes for each value, so that is 2 * 1 000 000 / 1,024 / 1024 = &lt;strong&gt;less than 2 MB of difference in your RAM&lt;/strong&gt;, which is likely much less than 1% or even 0.1% of your RAM capacity.&lt;/p&gt;\n\n&lt;h3&gt;Processing&lt;/h3&gt;\n\n&lt;p&gt;Considering the benchmark done by PGSystemTester&apos;s, you can see a difference of 811 - 745 = 66 seconds between Longs and Integers, when processing 10 billion batches of 4 operations each. Reduce the number to &lt;strong&gt;1 million of operations&lt;/strong&gt; and we can expect 66 / 10 000 / 4 = &lt;strong&gt;less than 2ms of difference in execution time&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I personally use Integers and Longs to &lt;strong&gt;help readability of my code&lt;/strong&gt;, particularly in loops, where an Integer indicates the loop is expected to be small (less than 1000 iterations), whereas a Long tells me the loop is expected to be rather large (more than 1000).&lt;/p&gt;\n\n&lt;p&gt;Note this subjective threshold is way below the Integer upper limit, I use Longs just to make the distinction between my own definitions of small and large.&lt;/p&gt;\n    "]},"page":"33","randomQuestions":[{"title":"The difference between bracket [ ] and double bracket [[ ]] for accessing the elements of a list or dataframe","slug":"the-difference-between-bracket-and-double-bracket-for-accessing-the-elements-of-a-list-or-dataframe-1657388451711"},{"title":"How do I split a delimited string so I can access individual items?","slug":"how-do-i-split-a-delimited-string-so-i-can-access-individual-items-1657388042385"},{"title":"Big O, how do you calculate/approximate it?","slug":"big-o-how-do-you-calculateapproximate-it-1657387856392"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"How to Sort a Multi-dimensional Array by Value","slug":"how-to-sort-a-multi-dimensional-array-by-value-1657387746110"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"UTF-8 all the way through","slug":"utf-8-all-the-way-through-1657384323434"},{"title":"What is DOM Event delegation?","slug":"what-is-dom-event-delegation-1657387625599"},{"title":"Which characters are valid in CSS class names/selectors?","slug":"which-characters-are-valid-in-css-class-namesselectors-1657387959188"},{"title":"How to use java.net.URLConnection to fire and handle HTTP requests","slug":"how-to-use-java.net.urlconnection-to-fire-and-handle-http-requests-1657387245934"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Pandas Merging 101","slug":"pandas-merging-101-1657384447080"},{"title":"Order Bars in ggplot2 bar graph","slug":"order-bars-in-ggplot2-bar-graph-1657388099080"},{"title":"How to deal with SettingWithCopyWarning in Pandas","slug":"how-to-deal-with-settingwithcopywarning-in-pandas-1657384778377"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"Center one and right/left align other flexbox element","slug":"center-one-and-rightleft-align-other-flexbox-element-1657387899083"},{"title":"Error in finding last used cell in Excel with VBA","slug":"error-in-finding-last-used-cell-in-excel-with-vba-1657384584748"},{"title":"How do I make a list of data frames?","slug":"how-do-i-make-a-list-of-data-frames-1657385480437"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"}]},"__N_SSG":true}