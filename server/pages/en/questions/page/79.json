{"pageProps":{"data":{"count":610,"rows":[{"id":220,"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571","postType":"QUESTION","createdAt":"2022-07-09T17:21:55.000Z","updatedAt":"2022-07-09T17:21:55.000Z","tags":[]},{"id":219,"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824","postType":"QUESTION","createdAt":"2022-07-09T17:21:51.000Z","updatedAt":"2022-07-09T17:21:51.000Z","tags":[{"id":1505,"name":"collections","slug":"collections","createdAt":"2022-07-09T17:21:51.000Z","updatedAt":"2022-07-09T17:21:51.000Z","Questions_Tags":{"questionId":219,"tagId":1505}}]},{"id":218,"title":"Removing trailing newline character from fgets() input","slug":"removing-trailing-newline-character-from-fgets()-input-1657387308069","postType":"QUESTION","createdAt":"2022-07-09T17:21:48.000Z","updatedAt":"2022-07-09T17:21:48.000Z","tags":[{"id":1501,"name":"gcc","slug":"gcc","createdAt":"2022-07-09T17:21:48.000Z","updatedAt":"2022-07-09T17:21:48.000Z","Questions_Tags":{"questionId":218,"tagId":1501}},{"id":1502,"name":"newline","slug":"newline","createdAt":"2022-07-09T17:21:48.000Z","updatedAt":"2022-07-09T17:21:48.000Z","Questions_Tags":{"questionId":218,"tagId":1502}}]},{"id":217,"title":"What is the canonical way to check for errors using the CUDA runtime API?","slug":"what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api-1657387302698","postType":"QUESTION","createdAt":"2022-07-09T17:21:42.000Z","updatedAt":"2022-07-09T17:21:42.000Z","tags":[{"id":1496,"name":"cuda","slug":"cuda","createdAt":"2022-07-09T17:21:42.000Z","updatedAt":"2022-07-09T17:21:42.000Z","Questions_Tags":{"questionId":217,"tagId":1496}},{"id":1497,"name":"error-checking","slug":"error-checking","createdAt":"2022-07-09T17:21:42.000Z","updatedAt":"2022-07-09T17:21:42.000Z","Questions_Tags":{"questionId":217,"tagId":1497}}]},{"id":216,"title":"How to deal with floating point number precision in JavaScript?","slug":"how-to-deal-with-floating-point-number-precision-in-javascript-1657387293762","postType":"QUESTION","createdAt":"2022-07-09T17:21:33.000Z","updatedAt":"2022-07-09T17:21:33.000Z","tags":[]}]},"answers":{"216":["\n&lt;p&gt;From the &lt;a href=&quot;http://floating-point-gui.de/&quot; rel=&quot;noreferrer&quot;&gt;Floating-Point Guide&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;What can I do to avoid this problem?&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;That depends on what kind of\ncalculations youre doing.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you really need your results to add up exactly, especially when you\nwork with money: use a special decimal\ndatatype.&lt;/li&gt;\n&lt;li&gt;If you just dont want to see all those extra decimal places: simply\nformat your result rounded to a fixed\nnumber of decimal places when\ndisplaying it.&lt;/li&gt;\n&lt;li&gt;If you have no decimal datatype available, an alternative is to work\nwith integers, e.g. do money\ncalculations entirely in cents. But\nthis is more work and has some\ndrawbacks.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Note that the first point only applies if you really need specific precise &lt;em&gt;decimal&lt;/em&gt; behaviour. Most people don&apos;t need that, they&apos;re just irritated that their programs don&apos;t work correctly with numbers like 1/10 without realizing that they wouldn&apos;t even blink at the same error if it occurred with 1/3.&lt;/p&gt;\n&lt;p&gt;If the first point really applies to you, use &lt;a href=&quot;https://github.com/royNiladri/js-big-decimal&quot; rel=&quot;noreferrer&quot;&gt;BigDecimal for JavaScript&lt;/a&gt;, which is not elegant at all, but actually solves the problem rather than providing an imperfect workaround.&lt;/p&gt;\n    ","\n&lt;p&gt;I like Pedro Ladaria&apos;s solution and use something similar.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strip&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(number).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Unlike Pedros solution this will round up 0.999...repeating and is accurate to plus/minus one on the least significant digit.&lt;/p&gt;\n\n&lt;p&gt;Note: When dealing with 32 or 64 bit floats, you should use toPrecision(7) and toPrecision(15) for best results.  See &lt;a href=&quot;https://stackoverflow.com/questions/28045787/how-many-decimal-places-does-the-primitive-float-and-double-support&quot;&gt;this question&lt;/a&gt; for info as to why.&lt;/p&gt;\n    ","\n&lt;p&gt;For the mathematically inclined: &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The recommended approach is to use correction factors (multiply by a suitable power of 10 so that the arithmetic happens between integers).  For example, in the case of &lt;code&gt;0.1 * 0.2&lt;/code&gt;, the correction factor is &lt;code&gt;10&lt;/code&gt;, and you are performing the calculation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;\n&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; y = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;\n&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; cf = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n&amp;gt; x * y\n&lt;span class=&quot;hljs-number&quot;&gt;0.020000000000000004&lt;/span&gt;\n&amp;gt; (x * cf) * (y * cf) / (cf * cf)\n&lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A (very quick) solution looks something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; _cf = (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_shift&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parts = x.&lt;span class=&quot;hljs-title function_&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (parts.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) ? &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, parts[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;prev, next&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; prev === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; || next === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;(prev, _shift (next)); }, -&lt;span class=&quot;hljs-title class_&quot;&gt;Infinity&lt;/span&gt;);\n  };\n})();\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = _cf.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(f === &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, i, o&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x + f * y; }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, cb, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) / f;\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;s&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;l,r&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-title function_&quot;&gt;_cf&lt;/span&gt;(l,r); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (l * f - r * f) / f; };\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;m&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = _cf.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cb&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, i, o&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (x*f) * (y*f) / (f * f); }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Array&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;reduce&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;, cb, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n};\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;d&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;l,r&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-title function_&quot;&gt;_cf&lt;/span&gt;(l,r); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (l * f) / (r * f); };\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I definitely recommend using a tested library like &lt;a href=&quot;https://github.com/guipn/sinful.js/blob/master/sinful.js&quot;&gt;SinfulJS&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Are you only performing multiplication?  If so then you can use to your advantage a neat secret about decimal arithmetic.  That is that &lt;code&gt;NumberOfDecimals(X) + NumberOfDecimals(Y) = ExpectedNumberOfDecimals&lt;/code&gt;. That is to say that if we have &lt;code&gt;0.123 * 0.12&lt;/code&gt; then we know that there will be 5 decimal places because &lt;code&gt;0.123&lt;/code&gt; has 3 decimal places and &lt;code&gt;0.12&lt;/code&gt; has two. Thus if JavaScript gave us a number like &lt;code&gt;0.014760000002&lt;/code&gt; we can safely round to the 5th decimal place without fear of losing precision.&lt;/p&gt;\n    ","\n&lt;p&gt;Surprisingly, this function has not been posted yet although others have similar variations of it. It is from the MDN web docs for &lt;code&gt;Math.round()&lt;/code&gt;.\nIt&apos;s concise and allows for varying precision.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, precision&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factor = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, precision);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(number * factor) / factor;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5678&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected output: 1234.6&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5678&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));\n&lt;span class=&quot;hljs-comment&quot;&gt;// expected output: 1230&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; inp = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; btn = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;button&apos;&lt;/span&gt;);\n\nbtn.&lt;span class=&quot;hljs-property&quot;&gt;onclick&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  inp[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(inp[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;) * &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(inp[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;) , &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; );\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//MDN function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, precision&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factor = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, precision);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(number * factor) / factor;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;button&lt;/span&gt;{\n&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;0.1&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;0.2&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;Get Product&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;text&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;UPDATE: Aug/20/2019&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Just noticed this error. I believe it&apos;s due to a floating point precision error with &lt;code&gt;Math.round()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1.005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1, incorrect, should be 1.01&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;These conditions work correctly:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1.0005&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1.001&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1235&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;precisionRound&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1234.5&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// produces 1230&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Fix:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;precisionRoundMod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;number, precision&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; factor = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, precision);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = precision &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ? number : &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt; / factor + number;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;( n * factor) / factor;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This just adds a digit to the right when rounding decimals.\nMDN has updated the &lt;code&gt;Math.round()&lt;/code&gt; page so maybe someone could provide a better solution.&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;m finding &lt;a href=&quot;https://github.com/MikeMcl/bignumber.js/&quot; rel=&quot;noreferrer&quot;&gt;BigNumber.js&lt;/a&gt; meets my needs.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;A JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It has good &lt;a href=&quot;http://mikemcl.github.io/bignumber.js/&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; and the author is very diligent responding to feedback.&lt;/p&gt;\n\n&lt;p&gt;The same author has 2 other similar libraries:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/MikeMcl/big.js/&quot; rel=&quot;noreferrer&quot;&gt;Big.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;A small, fast JavaScript library for arbitrary-precision decimal arithmetic. The little sister to bignumber.js.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and &lt;a href=&quot;https://github.com/MikeMcl/decimal.js/&quot; rel=&quot;noreferrer&quot;&gt;Decimal.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;blockquote&gt;\n    &lt;p&gt;An arbitrary-precision Decimal type for JavaScript.&lt;/p&gt;\n  &lt;/blockquote&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Here&apos;s some code using BigNumber:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;false&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n  \n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; product = &lt;span class=&quot;hljs-title class_&quot;&gt;BigNumber&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;);  \n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#product&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(product);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;hljs-title class_&quot;&gt;BigNumber&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;plus&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt;);  \n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#sum&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(sum);\n\n\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- 1.4.1 is not the current version, but works for this example. --&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://cdn.bootcss.com/bignumber.js/1.4.1/bignumber.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n.1 &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;times;&lt;/span&gt; .2 = &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;product&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n.1 &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;plus;&lt;/span&gt; .2 = &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;sum&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You are looking for an &lt;code&gt;sprintf&lt;/code&gt; implementation for JavaScript, so that you can write out floats with small errors in them (since they are stored in binary format) in a format that you expect.&lt;/p&gt;\n\n&lt;p&gt;Try &lt;a href=&quot;http://www.diveintojavascript.com/projects/javascript-sprintf&quot; rel=&quot;noreferrer&quot;&gt;javascript-sprintf&lt;/a&gt;, you would call it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; yourString = &lt;span class=&quot;hljs-title function_&quot;&gt;sprintf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%.2f&quot;&lt;/span&gt;, yourNumber);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to print out your number as a float with two decimal places.&lt;/p&gt;\n\n&lt;p&gt;You may also use  &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_tofixed.asp&quot; rel=&quot;noreferrer&quot;&gt;Number.toFixed()&lt;/a&gt;  for display purposes, if you&apos;d rather not include  more files merely for floating point rounding to a given precision.  &lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; times = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a, b&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;((a * b) * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;---or---&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fpFix = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;n&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(n * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpFix&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; 0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;---also---&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fpArithmetic = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;op, x, y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; n = {\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;: x * y,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;: x - y,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;: x + y,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;: x / y\n        }[op];        \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(n * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;--- as in ---&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// 0.02&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// 0.3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// -0.1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;fpArithmetic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This function will determine the needed precision from the multiplication of two floating point numbers and return a result with the appropriate precision. Elegant though it is not.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;multFloats&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; atens = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), \n      btens = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(b).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(b).&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); \n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a * atens) * (b * btens) / (atens * btens); \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;code&gt;parseFloat()&lt;/code&gt; and &lt;code&gt;toFixed()&lt;/code&gt; if you want to bypass this issue for a small operation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;;\nb = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n\na + b = &lt;span class=&quot;hljs-number&quot;&gt;0.30000000000000004&lt;/span&gt;;\n\nc = &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;((a+b).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n\nc = &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;;\n\na = &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;;\nb = &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n\na - b = &lt;span class=&quot;hljs-number&quot;&gt;0.09999999999999998&lt;/span&gt;;\n\nc = &lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;((a-b).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n\nc = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You just have to make up your mind on how many decimal digits you actually want - can&apos;t have the cake and eat it too :-)&lt;/p&gt;\n\n&lt;p&gt;Numerical errors accumulate with every further operation and if you don&apos;t cut it off early it&apos;s just going to grow. Numerical libraries which present results that look clean simply cut off the last 2 digits at every step, numerical co-processors also have a &quot;normal&quot; and &quot;full&quot; lenght for the same reason. Cuf-offs are cheap for a processor but very expensive for you in a script (multiplying and dividing and using pov(...)). Good math lib would provide floor(x,n) to do the cut-off for you.&lt;/p&gt;\n\n&lt;p&gt;So at the very least you should make global var/constant with pov(10,n) - meaning that you decided on the precision you need :-) Then do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(x*&lt;span class=&quot;hljs-variable constant_&quot;&gt;PREC_LIM&lt;/span&gt;)/&lt;span class=&quot;hljs-variable constant_&quot;&gt;PREC_LIM&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// floor - you are cutting off, not rounding&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You could also keep doing math and only cut-off at the end - assuming that you are only displaying and not doing if-s with results. If you can do that, then .toFixed(...) might be more efficient.&lt;/p&gt;\n\n&lt;p&gt;If you are doing if-s/comparisons and don&apos;t want to cut of then you also need a small constant, usually called eps, which is one decimal place higher than max expected error. Say that your cut-off is last two decimals - then your eps has 1 at the 3rd place from the last (3rd least significant) and you can use it to compare whether the result is within eps range of expected (0.02 -eps &amp;lt; 0.1*0.2 &amp;lt; 0.02 +eps).&lt;/p&gt;\n    ","\n&lt;p&gt;Notice that for the general purpose use, this behavior is likely to be acceptable.&lt;br&gt;\nThe problem arises when comparing those floating points values to determine an appropriate action.&lt;br&gt;\n   With the advent of ES6, a new constant &lt;code&gt;Number.EPSILON&lt;/code&gt; is defined to determine the acceptable error margin :&lt;br&gt;\nSo instead of performing the comparison like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// which returns false&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you can define a custom compare function, like this :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;epsEqu&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;abs&lt;/span&gt;(x - y) &amp;lt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;EPSILON&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;epsEqu&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source : &lt;a href=&quot;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&quot; rel=&quot;noreferrer&quot;&gt;http://2ality.com/2015/04/numbers-math-es6.html#numberepsilon&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The round() function at phpjs.org works nicely: &lt;a href=&quot;http://phpjs.org/functions/round&quot;&gt;http://phpjs.org/functions/round&lt;/a&gt; &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;num = &lt;span class=&quot;hljs-number&quot;&gt;.01&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;.06&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// yields 0.0699999999999&lt;/span&gt;\nrnum = &lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(num,&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// yields 0.07&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://mikemcl.github.io/decimal.js/&quot; rel=&quot;nofollow noreferrer&quot;&gt;decimal.js&lt;/a&gt;, &lt;a href=&quot;https://mikemcl.github.io/big.js/&quot; rel=&quot;nofollow noreferrer&quot;&gt;big.js&lt;/a&gt; or &lt;a href=&quot;https://mikemcl.github.io/bignumber.js/&quot; rel=&quot;nofollow noreferrer&quot;&gt;bignumber.js&lt;/a&gt; can be used to avoid floating-point manipulation problems in Javascript:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;                                &lt;span class=&quot;hljs-comment&quot;&gt;// 0.020000000000000004&lt;/span&gt;\nx = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Decimal&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;)\ny = x.&lt;span class=&quot;hljs-title function_&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;)                          &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;0.2&apos;&lt;/span&gt;\nx.&lt;span class=&quot;hljs-title function_&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;equals&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;)                  &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;big.js: minimalist; easy-to-use; precision specified in decimal places; precision applied to division only.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;bignumber.js: bases 2-64; configuration options; NaN; Infinity; precision specified in decimal places; precision applied to division only; base prefixes.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;blockquote&gt;\n&lt;p&gt;decimal.js: bases 2-64; configuration options; NaN; Infinity; non-integer powers, exp, ln, log; precision specified in significant digits; precision always applied; random numbers.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/MikeMcl/big.js/issues/45#issuecomment-104211175&quot; rel=&quot;nofollow noreferrer&quot;&gt;link to detailed comparisons&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The result you&apos;ve got is correct and fairly consistent across floating point implementations in different languages, processors and operating systems - the only thing that changes is the level of the inaccuracy when the float is actually a double (or higher).&lt;/p&gt;\n\n&lt;p&gt;0.1 in binary floating points is like 1/3 in decimal (i.e. 0.3333333333333... forever), there&apos;s just no accurate way to handle it. &lt;/p&gt;\n\n&lt;p&gt;If you&apos;re dealing with floats &lt;em&gt;always&lt;/em&gt; expect small rounding errors, so you&apos;ll also always have to round the displayed result to something sensible. In return you get very very fast and powerful arithmetic because all the computations are in the native binary of the processor.&lt;/p&gt;\n\n&lt;p&gt;Most of the time the solution is not to switch to fixed-point arithmetic, mainly because it&apos;s much slower and 99% of the time you just don&apos;t need the accuracy. If you&apos;re dealing with stuff that does need that level of accuracy (for instance financial transactions) Javascript probably isn&apos;t the best tool to use anyway (as you&apos;ve want to enforce the fixed-point types a static language is probably better).&lt;/p&gt;\n\n&lt;p&gt;You&apos;re looking for the elegant solution then I&apos;m afraid this is it: floats are quick but have small rounding errors - always round to something sensible when displaying their results.&lt;/p&gt;\n    ","\n&lt;p&gt;0.6 * 3 it&apos;s awesome!))\nFor me this works fine:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dec&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; num &lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;( num * p ) / p;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Very very simple))&lt;/p&gt;\n    ","\n&lt;p&gt;To avoid this you should work with integer values instead of floating points. So when you want to have 2 positions precision work with the values * 100, for 3 positions use 1000. When displaying you use a formatter to put in the separator.&lt;/p&gt;\n\n&lt;p&gt;Many systems omit working with decimals this way. That is the reason why many systems work with cents (as integer) instead of dollars/euro&apos;s (as floating point).&lt;/p&gt;\n    ","\n&lt;p&gt;not elegant but does the job (removes trailing zeros)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;*&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(num.&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;))); &lt;span class=&quot;hljs-comment&quot;&gt;// shows 0.02&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Floating point can&apos;t store all decimal values exactly. So when using floating point formats there will always be rounding errors on the input values.\nThe errors on the inputs of course results on errors on the output.\nIn case of a discrete function or operator there can be big differences on the output around the point where the function or operator is discrete.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Input and output for floating point values&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So, when using floating point variables, you should always be aware of this. And whatever output you want from a calculation with floating points should always be formatted/conditioned before displaying with this in mind.&lt;br&gt;\nWhen only continuous functions and operators are used, rounding to the desired precision often will do (don&apos;t truncate).  Standard formatting features used to convert floats to string will usually do this for you.&lt;br&gt;\nBecause the rounding adds an error which can cause the total error to be more then half of the desired precision, the output should be corrected based on expected precision of inputs and desired precision of output. You should&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Round inputs to the expected precision or make sure no values can be entered with higher precision.&lt;/li&gt;\n&lt;li&gt;Add a small value to the outputs before rounding/formatting them which is smaller than or equal to 1/4 of the desired precision and bigger than the maximum expected error caused by rounding errors on input and during calculation. If that is not possible the combination of the precision of the used data type isn&apos;t enough to deliver the desired output precision for your calculation.  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;These 2 things are usually not done and in most cases the differences caused by not doing them are too small to be important for most users, but I already had a project where output wasn&apos;t accepted by the users without those corrections.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Discrete functions or operators (like modula)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When discrete operators or functions are involved, extra corrections might be required to make sure the output is as expected. Rounding and adding small corrections before rounding can&apos;t solve the problem.&lt;br&gt;\nA special check/correction on intermediate calculation results, immediately after applying the discrete function or operator might be required.\nFor a specific case (modula operator), see my answer on question: &lt;a href=&quot;https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/45346570#45346570&quot;&gt;Why does modulus operator return fractional number in javascript?&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Better avoid having the problem&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It is often more efficient to avoid these problems by using data types (integer or fixed point formats) for calculations like this which can store the expected input without rounding errors.\nAn example of that is that you should never use floating point values for financial calculations.&lt;/p&gt;\n    ","\n&lt;h2&gt;Elegant, Predictable, and  Reusable&lt;/h2&gt;\n\n&lt;p&gt;Let&apos;s deal with the problem in an elegant way reusable way. The following seven lines will let you access the floating point precision you desire on any number simply by appending &lt;code&gt;.decimal&lt;/code&gt; to the end of the number, formula, or built in &lt;code&gt;Math&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// First extend the native Number object to handle precision. This populates&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the functionality to all math operations.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;decimal&quot;&lt;/span&gt;, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;get&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;decimal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;precision&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt; ? &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt; * f ) / f;\n  }\n});\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Now lets see how it works by adjusting our global precision level and &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// checking our results.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos;1/3 + 1/3 + 1/3 = 1&apos; Right?&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// true&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.3333&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.333 - A raw 4 digit decimal, trimmed to 3...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 3&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.001&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 2&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.01&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 1&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0.1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;precision&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Precision: 0&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.8&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.08&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.02&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.0008&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.0002&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;decimal&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cheers!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Solved it by first making both numbers integers, executing the expression and afterwards dividing the result to get the decimal places back:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;evalMathematicalExpression&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a, b, op&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; smallest = &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;(a &amp;lt; b ? a : b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; factor = smallest.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; - smallest.&lt;span class=&quot;hljs-title function_&quot;&gt;indexOf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; factor; i++) {\n        b *= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n        a *= &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;\n    }\n\n    a = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(a);\n    b = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(b);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; m = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; ** factor;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (op) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;+&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a + b) / m;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a - b) / m;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (a * b) / (m ** &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a / b;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`Unknown operator &lt;span class=&quot;hljs-subst&quot;&gt;${op}&lt;/span&gt;`&lt;/span&gt;;\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results for several operations (the excluded numbers are results from &lt;code&gt;eval&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;0.002&lt;/span&gt;   = &lt;span class=&quot;hljs-number&quot;&gt;0.102&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.10200000000000001&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;     = &lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; - &lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;     = -&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt; (-&lt;span class=&quot;hljs-number&quot;&gt;0.19999999999999998&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; - -&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;    = &lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1053&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.0003&lt;/span&gt;  = &lt;span class=&quot;hljs-number&quot;&gt;0.00009&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0.00008999999999999999&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;      = &lt;span class=&quot;hljs-number&quot;&gt;2500&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2500&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;0.03&lt;/span&gt;    = &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;30.000000000000004&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt; / &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;      = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Have a look at &lt;a href=&quot;http://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fixed-point arithmetic&lt;/a&gt;. It will probably solve your problem, if the range of numbers you want to operate on is small (eg, currency). I would round it off to a few decimal values, which is the simplest solution. &lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t represent most decimal fractions exactly with binary floating point types (which is what ECMAScript uses to represent floating point values). So there isn&apos;t an elegant solution unless you use arbitrary precision arithmetic types or a decimal based floating point type. For example, &lt;a href=&quot;http://blogs.msdn.com/b/oldnewthing/archive/2004/05/25/141253.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;the Calculator app that ships with Windows now uses arbitrary precision arithmetic to solve this problem&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;h2&gt;Avoid dealing with floating points during the operation using Integers&lt;/h2&gt;\n\n&lt;p&gt;As stated on the most voted answer until now, you can &lt;strong&gt;work with integers&lt;/strong&gt;, that would mean to multiply all your factors by 10 for each decimal you are working with, and divide the result by the same number used.&lt;/p&gt;\n\n&lt;p&gt;For example, if you are working with 2 decimals, you multiply all your factors by 100 before doing the operation, and then divide the result by 100.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example, Result1 is the usual result, Result2 uses the solution:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1110.7&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2220.2&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Result1&lt;/span&gt;=&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;)+&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Result2&lt;/span&gt;=((&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)+(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;))/&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Result3&lt;/span&gt;=(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor1&lt;/span&gt;))+&lt;span class=&quot;hljs-built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Factor2&lt;/span&gt;))).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result1: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;Result1&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;Result2: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;Result2&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;br&amp;gt;Result3: &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;Result3&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;The third result is to show what happens when using parseFloat instead, which created a conflict in our case.&lt;/p&gt;\n    ","\n&lt;p&gt;From my point of view, the idea here is to round the fp number in order to have a nice/short default string representation.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The 53-bit significand precision gives from 15 to 17 significant decimal digits precision (253  1.11 × 1016).\n  If a decimal string with at most 15 significant digits is converted to IEEE 754 double-precision representation,\n  and then converted back to a decimal string with the same number of digits, the final result should match the original string.\n  If an IEEE 754 double-precision number is converted to a decimal string with at least 17 significant digits,\n  and then converted back to double-precision representation, the final result must match the original number.&lt;br&gt;\n  ...&lt;br&gt;\n  With the 52 bits of the fraction (F) significand appearing in the memory format, the total precision is therefore 53 bits (approximately 16 decimal digits, 53 log10(2)  15.955). The bits are laid out as follows ... &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-precision_floating-point_format#cite_note-whyieee-1&quot; rel=&quot;nofollow noreferrer&quot;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) -&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.1000000000000000055511151231257827021181583404541015625000000000000000000000000000000000000000000000&lt;/span&gt;\n\n(&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) -&amp;gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.3000000000000000444089209850062616169452667236328125000000000000000000000000000000000000000000000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, as far as I understand, we can round the value up to 15 digits to keep a nice string representation.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt; * &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log10&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// 1e15&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;eg.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt; ) / &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;0.3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;((&lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt; ) / &lt;span class=&quot;hljs-number&quot;&gt;1e15&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;toPrecision&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)\n&lt;span class=&quot;hljs-number&quot;&gt;0.2999999999999999888977697537484345957636833190917968750000000000000000000000000000000000000000000000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;roundNumberToHaveANiceDefaultStringRepresentation&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num&lt;/span&gt;) {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; integerDigits = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log10&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;abs&lt;/span&gt;(num))+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; mult = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;**(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;-integerDigits); &lt;span class=&quot;hljs-comment&quot;&gt;// also consider integer digits&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(num * mult) / mult;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You are right, the reason for that is limited precision of floating point numbers. Store your rational numbers as a division of two integer numbers and in most situations you&apos;ll be able to store numbers without any precision loss. When it comes to printing, you may want to display the result as fraction. With representation I proposed, it becomes trivial.&lt;/p&gt;\n\n&lt;p&gt;Of course that won&apos;t help much with irrational numbers. But you may want to optimize your computations in the way they will cause the least problem (e.g. detecting situations like &lt;code&gt;sqrt(3)^2)&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I had a nasty rounding error problem with mod 3. Sometimes when I should get 0 I would get .000...01. That&apos;s easy enough to handle, just test for &amp;lt;= .01. But then sometimes I would get 2.99999999999998. OUCH!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/MikeMcl/bignumber.js&quot; rel=&quot;nofollow&quot;&gt;BigNumbers&lt;/a&gt; solved the problem, but introduced another, somewhat ironic, problem. When trying to load 8.5 into BigNumbers I was informed that it was really 8.4999 and had more than 15 significant digits. This meant BigNumbers could not accept it (I believe I mentioned this problem was somewhat ironic).&lt;/p&gt;\n\n&lt;p&gt;Simple solution to ironic problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;x = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(x*&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n&lt;span class=&quot;hljs-comment&quot;&gt;// I only need 2 decimal places, if i needed 3 I would use 1,000, etc.&lt;/span&gt;\nx = x / &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\nxB = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BigNumber&lt;/span&gt;(x);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/gWE8D.png&quot; alt=&quot;enter image description here&quot;&gt;    &lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;    You can use library https://github.com/MikeMcl/decimal.js/. \n    it will   help  lot to give proper solution. \n    javascript console output 95 *722228.630 /100 = 686117.1984999999\n    decimal library implementation \n    var firstNumber = new Decimal(95);\n    var secondNumber = new Decimal(722228.630);\n    var thirdNumber = new Decimal(100);\n    var partialOutput = firstNumber.times(secondNumber);\n    console.log(partialOutput);\n    var output = new Decimal(partialOutput).div(thirdNumber);\n    alert(output.valueOf());\n    console.log(output.valueOf())== 686117.1985\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try my chiliadic arithmetic library, which you can see &lt;a href=&quot;http://www.daniweb.com/forums/thread222006.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;.\nIf you want a later version, I can get you one.&lt;/p&gt;\n    ","\n&lt;p&gt;Use Number(1.234443).toFixed(2); it will print 1.23&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;0.2&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Number&lt;/span&gt;(x).&lt;span class=&quot;hljs-title function_&quot;&gt;toFixed&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;));\n}\n&lt;span class=&quot;hljs-title function_&quot;&gt;test&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    "],"217":["\n&lt;p&gt;Probably the best way to check for errors in runtime API code is to define an assert style handler function and wrapper macro like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-selector-id&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;(ans) { &lt;span class=&quot;hljs-built_in&quot;&gt;gpuAssert&lt;/span&gt;((ans), __FILE__, __LINE__); }\ninline void &lt;span class=&quot;hljs-built_in&quot;&gt;gpuAssert&lt;/span&gt;(cudaError_t code, const char *file, int line, bool abort=true)\n{\n   if (code != cudaSuccess) \n   {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(stderr,&quot;GPUassert: %s %s %d\\n&quot;, cudaGetErrorString(code), file, line);\n      if (abort) &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(code);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can then wrap each API call with the &lt;code&gt;gpuErrchk&lt;/code&gt; macro, which will process the return status of the API call it wraps, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-lisp&quot;&gt;gpuErrchk( &lt;span class=&quot;hljs-name&quot;&gt;cudaMalloc&lt;/span&gt;(&lt;span class=&quot;hljs-name&quot;&gt;&amp;amp;a_d&lt;/span&gt;, size*sizeof(&lt;span class=&quot;hljs-name&quot;&gt;int&lt;/span&gt;)) )&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If there is an error in a call, a textual message describing the error and the file and line in your code where the error occurred will be emitted to &lt;code&gt;stderr&lt;/code&gt; and the application will exit. You could conceivably modify &lt;code&gt;gpuAssert&lt;/code&gt; to raise an exception rather than call &lt;code&gt;exit()&lt;/code&gt; in a more sophisticated application if it were required.&lt;/p&gt;\n\n&lt;p&gt;A second related question is how to check for errors in kernel launches, which can&apos;t be directly wrapped in a macro call like standard runtime API calls. For kernels, something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;kernel&amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(a);\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaPeekAtLastError() );\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaDeviceSynchronize() );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will firstly check for invalid launch argument, then force the host to wait until the kernel stops and checks for an execution error. The synchronisation can be eliminated if you have a subsequent blocking API call like this:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;kernel&amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(a_d);\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaPeekAtLastError() );\n&lt;span class=&quot;hljs-built_in&quot;&gt;gpuErrchk&lt;/span&gt;( cudaMemcpy(a_h, a_d, size * sizeof(int), cudaMemcpyDeviceToHost) );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in which case the &lt;code&gt;cudaMemcpy&lt;/code&gt; call can return either errors which occurred during the kernel execution or those from the memory copy itself. This can be confusing for the beginner, and I would recommend using explicit synchronisation after a kernel launch during debugging to make it easier to understand where problems might be arising. &lt;/p&gt;\n\n&lt;p&gt;Note that when using &lt;a href=&quot;https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#cuda-dynamic-parallelism&quot; rel=&quot;noreferrer&quot;&gt;CUDA Dynamic Parallelism&lt;/a&gt;, a very similar methodology can and should be applied to any usage of the CUDA runtime API in device kernels, as well as after any device kernel launches:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; cdpErrchk(ans) { cdpAssert((ans), __FILE__, __LINE__); }&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;__device__ &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;cdpAssert&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cudaError_t code, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; line, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; abort=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (code != cudaSuccess)\n   {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GPU kernel assert: %s %s %d\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;cudaGetErrorString&lt;/span&gt;(code), file, line);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (abort) &lt;span class=&quot;hljs-built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;talonmies&apos; answer above is a fine way to abort an application in an &lt;code&gt;assert&lt;/code&gt;-style manner.&lt;/p&gt;\n\n&lt;p&gt;Occasionally we may wish to report and recover from an error condition in a C++ context as part of a larger application.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a reasonably terse way to do that by throwing a C++ exception derived from &lt;code&gt;std::runtime_error&lt;/code&gt; using &lt;code&gt;thrust::system_error&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;thrust/system_error.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;thrust/system/cuda/error.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;throw_on_cuda_error&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(cudaError_t code, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; line)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(code != cudaSuccess)\n  {\n    std::stringstream ss;\n    ss &amp;lt;&amp;lt; file &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;(&quot;&lt;/span&gt; &amp;lt;&amp;lt; line &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;)&quot;&lt;/span&gt;;\n    std::string file_and_line;\n    ss &amp;gt;&amp;gt; file_and_line;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; thrust::&lt;span class=&quot;hljs-built_in&quot;&gt;system_error&lt;/span&gt;(code, thrust::&lt;span class=&quot;hljs-built_in&quot;&gt;cuda_category&lt;/span&gt;(), file_and_line);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will incorporate the filename, line number, and an English language description of the &lt;code&gt;cudaError_t&lt;/code&gt; into the thrown exception&apos;s &lt;code&gt;.what()&lt;/code&gt; member:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;main&lt;/span&gt;()\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do something crazy&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;throw_on_cuda_error&lt;/span&gt;(&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;cudaSetDevice&lt;/span&gt;(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;__FILE__&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;__LINE__&lt;/span&gt;);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(thrust::&lt;span class=&quot;hljs-variable constant_&quot;&gt;system_error&lt;/span&gt; &amp;amp;e)\n  {\n    std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;CUDA error after cudaSetDevice: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// oops, recover&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;cudaSetDevice&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ocaml&quot;&gt;$ nvcc &lt;span class=&quot;hljs-keyword&quot;&gt;exception&lt;/span&gt;.cu -run\n&lt;span class=&quot;hljs-type&quot;&gt;CUDA&lt;/span&gt; error after cudaSetDevice: &lt;span class=&quot;hljs-keyword&quot;&gt;exception&lt;/span&gt;.cu(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;): invalid device ordinal\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A client of &lt;code&gt;some_function&lt;/code&gt; can distinguish CUDA errors from other kinds of errors if desired:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// call some_function which may throw something&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_function&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(thrust::&lt;span class=&quot;hljs-variable constant_&quot;&gt;system_error&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;CUDA error during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;bad_alloc&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Bad memory allocation during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;runtime_error&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Runtime error during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(...)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Some other kind of error during some_function&quot;&lt;/span&gt; &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// no idea what to do, so just rethrow the exception&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Because &lt;code&gt;thrust::system_error&lt;/code&gt; is a &lt;code&gt;std::runtime_error&lt;/code&gt;, we can alternatively handle it in the same manner of a broad class of errors if we don&apos;t require the precision of the previous example:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-comment&quot;&gt;// call some_function which may throw something&lt;/span&gt;\n  &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;some_function&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;runtime_error&lt;/span&gt; &amp;amp;e)\n{\n  std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;cerr&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Runtime error during some_function: &quot;&lt;/span&gt; &amp;lt;&amp;lt; e.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::&lt;span class=&quot;hljs-variable constant_&quot;&gt;endl&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;The C++-canonical way: Don&apos;t check for errors...use the C++ bindings which throw exceptions.&lt;/h3&gt;\n&lt;p&gt;I used to be irked by this problem; and I used to have a macro-cum-wrapper-function solution just like in Talonmies and Jared&apos;s answers, but, honestly? It makes using the CUDA Runtime API even more ugly and C-like.&lt;/p&gt;\n&lt;p&gt;So I&apos;ve approached this in a different and more fundamental way. For a sample of the result, here&apos;s part of the CUDA &lt;code&gt;vectorAdd&lt;/code&gt; sample - with &lt;em&gt;complete&lt;/em&gt; error checking of every runtime API call:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-rust&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// (... prepare host-side buffers here ...)&lt;/span&gt;\n\nauto current_device = cuda::device::current::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;();\nauto d_A = cuda::memory::device::make_unique&amp;lt;float[]&amp;gt;(current_device, numElements);\nauto d_B = cuda::memory::device::make_unique&amp;lt;float[]&amp;gt;(current_device, numElements);\nauto d_C = cuda::memory::device::make_unique&amp;lt;float[]&amp;gt;(current_device, numElements);\n\ncuda::memory::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;copy&lt;/span&gt;(d_A.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), h_A.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), size);\ncuda::memory::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;copy&lt;/span&gt;(d_B.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), h_B.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), size);\n\nauto launch_config = cuda::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;launch_config_builder&lt;/span&gt;()\n    .&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;overall_size&lt;/span&gt;(numElements)\n    .&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;block_size&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;build&lt;/span&gt;();\n\ncuda::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;launch&lt;/span&gt;(vectorAdd, launch_config,\n    d_A.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), d_B.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), d_C.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), numElements\n);    \ncuda::memory::&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;copy&lt;/span&gt;(h_C.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), d_C.&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;get&lt;/span&gt;(), size);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// (... verify results here...)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again - all potential errors are checked , and an exception if an error occurred (caveat: If the kernel caused some error &lt;em&gt;after&lt;/em&gt; launch, it will be caught after the attempt to copy the result, not before; to ensure the kernel was successful you would need to check for error between the launch and the copy with a &lt;code&gt;cuda::outstanding_error::ensure_none()&lt;/code&gt; command).&lt;/p&gt;\n&lt;p&gt;The code above uses my&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;Thin Modern-C++ wrappers for the CUDA Runtime API library&lt;/strong&gt;&lt;/a&gt; (Github)&lt;/p&gt;\n&lt;p&gt;Note that the exceptions carry both a string explanation and the CUDA runtime API status code after the failing call.&lt;/p&gt;\n&lt;p&gt;A few links to how CUDA errors are automagically checked with these wrappers:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://github.com/eyalroz/cuda-api-wrappers/blob/master/examples/by_runtime_api_module/error_handling.cu&quot; rel=&quot;nofollow noreferrer&quot;&gt;A test program throwing and catching a bunch of exceptions&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://codedocs.xyz/eyalroz/cuda-api-wrappers/error_8hpp.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Documentation for the error-related functionality&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The solution discussed &lt;a href=&quot;https://code.google.com/p/stanford-cs193g-sp2010/wiki/TutorialWhenSomethingGoesWrong&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; worked well for me. This solution uses built-in cuda functions and is very simple to implement.&lt;/p&gt;\n\n&lt;p&gt;The relevant code is copied below:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;__global__ &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr)&lt;/span&gt;\n&lt;/span&gt;{\n  *ptr = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n  foo&amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// make the host block until the device is finished with foo&lt;/span&gt;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;cudaDeviceSynchronize&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// check for error&lt;/span&gt;\n  cudaError_t error = &lt;span class=&quot;hljs-built_in&quot;&gt;cudaGetLastError&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(error != cudaSuccess)\n  {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// print the CUDA error message and exit&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;CUDA error: %s\\n&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;cudaGetErrorString&lt;/span&gt;(error));\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"218":["\n&lt;p&gt;Perhaps the simplest solution uses one of my favorite little-known functions, &lt;a href=&quot;http://www.freebsd.org/cgi/man.cgi?query=strcspn&amp;amp;sektion=3&quot; rel=&quot;noreferrer&quot; title=&quot;strcspn manpage&quot;&gt;&lt;code&gt;strcspn()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;buffer[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(buffer, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want it to also handle &lt;code&gt;&apos;\\r&apos;&lt;/code&gt; (say, if the stream is binary):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;buffer[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(buffer, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// works for LF, CR, CRLF, LFCR, ...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The function counts the number of characters until it hits a &lt;code&gt;&apos;\\r&apos;&lt;/code&gt; or a &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; (in other words, it finds the first &lt;code&gt;&apos;\\r&apos;&lt;/code&gt; or &lt;code&gt;&apos;\\n&apos;&lt;/code&gt;). If it doesn&apos;t hit anything, it stops at the &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; (returning the length of the string).&lt;/p&gt;\n\n&lt;p&gt;Note that this works fine even if there is no newline, because &lt;code&gt;strcspn&lt;/code&gt; stops at a &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;. In that case, the entire line is simply replacing &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; with &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The elegant way:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Name[&lt;span class=&quot;hljs-built_in&quot;&gt;strcspn&lt;/span&gt;(Name, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The slightly ugly way:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pos;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((pos=&lt;span class=&quot;hljs-built_in&quot;&gt;strchr&lt;/span&gt;(Name, &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)) != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    *pos = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* input too long for buffer, flag error */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The slightly strange way:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;strtok(Name, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the &lt;code&gt;strtok&lt;/code&gt; function doesn&apos;t work as expected if the user enters an empty string (i.e. presses only Enter). It leaves the &lt;code&gt;\\n&lt;/code&gt; character intact.&lt;/p&gt;\n&lt;p&gt;There are others as well, of course.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; ln = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(name) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*name &amp;amp;&amp;amp; name[ln] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) \n    name[ln] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Below is a fast approach to remove a potential &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; from a string saved by &lt;code&gt;fgets()&lt;/code&gt;.&lt;br&gt;\nIt uses &lt;code&gt;strlen()&lt;/code&gt;, with 2 tests.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets(buffer, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; buffer, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;) {\n\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buffer);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; buffer[len&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {\n    buffer[--len] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now use &lt;code&gt;buffer&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; as needed.&lt;/p&gt;\n\n&lt;p&gt;This method has the side benefit of a &lt;code&gt;len&lt;/code&gt; value for subsequent code.  It can be easily faster than &lt;code&gt;strchr(Name, &apos;\\n&apos;)&lt;/code&gt;.  &lt;a href=&quot;https://codereview.stackexchange.com/a/67844/29485&quot;&gt;Ref&lt;/a&gt;  YMMV, but both methods work.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;code&gt;buffer&lt;/code&gt;, from the original &lt;code&gt;fgets()&lt;/code&gt; will not contain in &lt;code&gt;&quot;\\n&quot;&lt;/code&gt; under some circumstances:&lt;br&gt;\nA) The line was too long for &lt;code&gt;buffer&lt;/code&gt; so only &lt;code&gt;char&lt;/code&gt; preceding the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; is saved in &lt;code&gt;buffer&lt;/code&gt;. The unread characters remain in the stream.&lt;br&gt;\nB) The last line in the file did not end with a &lt;code&gt;&apos;\\n&apos;&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;If input has embedded null characters &lt;code&gt;&apos;\\0&apos;&lt;/code&gt; in it somewhere, the length reported by &lt;code&gt;strlen()&lt;/code&gt; will not include the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; location.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Some other answers&apos; issues: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;strtok(buffer, &quot;\\n&quot;);&lt;/code&gt; fails to remove the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; when &lt;code&gt;buffer&lt;/code&gt; is &lt;code&gt;&quot;\\n&quot;&lt;/code&gt;.  From this &lt;a href=&quot;https://stackoverflow.com/a/2693826/2410359&quot;&gt;answer&lt;/a&gt; - amended after this answer to warn of this limitation. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The following fails on rare occasions when the first &lt;code&gt;char&lt;/code&gt; read by &lt;code&gt;fgets()&lt;/code&gt; is &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.  This happens when input begins with an embedded &lt;code&gt;&apos;\\0&apos;&lt;/code&gt;.  Then &lt;code&gt;buffer[len -1]&lt;/code&gt; becomes &lt;code&gt;buffer[SIZE_MAX]&lt;/code&gt; accessing memory certainly outside the legitimate range of &lt;code&gt;buffer&lt;/code&gt;. Something a hacker may try or found in foolishly reading UTF16 text files.  This was the state of an &lt;a href=&quot;https://stackoverflow.com/a/2693827/2410359&quot;&gt;answer&lt;/a&gt; when this answer was written.  Later a non-OP edited it to include code like this answer&apos;s check for &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(buffer);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (buffer[len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {  &lt;span class=&quot;hljs-comment&quot;&gt;// FAILS when len == 0&lt;/span&gt;\n  buffer[len &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;sprintf(buffer,&quot;%s&quot;,buffer);&lt;/code&gt; is undefined behavior: &lt;a href=&quot;https://stackoverflow.com/questions/1283354/is-sprintfbuffer-s-buffer-safe&quot;&gt;Ref&lt;/a&gt;.  Further, it does not save any leading, separating or trailing whitespace.  Now &lt;a href=&quot;https://stackoverflow.com/a/23695411/2410359&quot;&gt;deleted&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;[Edit due to good later &lt;a href=&quot;https://stackoverflow.com/a/28462221/2410359&quot;&gt;answer&lt;/a&gt;] There are no problems with the 1 liner &lt;code&gt;buffer[strcspn(buffer, &quot;\\n&quot;)] = 0;&lt;/code&gt; other than performance as compared to the &lt;code&gt;strlen()&lt;/code&gt; approach.  Performance in trimming is usually not an issue given code is doing I/O - a black hole of CPU time.  Should following code need the string&apos;s length or is highly performance conscious, use this &lt;code&gt;strlen()&lt;/code&gt; approach.  Else the &lt;code&gt;strcspn()&lt;/code&gt; is a fine alternative.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;Direct to remove the &apos;\\n&apos; from the fgets output if every line has &apos;\\n&apos;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;line[&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(line) - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Otherwise:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_newline_ch&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *line)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; new_line = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(line) &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (line[new_line] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n        line[new_line] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For single &apos;\\n&apos; trimming,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_new_line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; length = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;((length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] =&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for multiple &apos;\\n&apos; trimming,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;remove_multi_new_line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; length = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((length&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;))\n  {\n      --length;\n      &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[length] =&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My Newbie way ;-) Please let me know if that&apos;s correct. It seems to be working for all my cases:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; IPT_SIZE 5&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;findNULL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* arr)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(arr); i++)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*(arr+i) == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *input = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(IPT_SIZE + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)), buff;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; counter = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//prompt user for the input:&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input string no longer than %i characters: &quot;&lt;/span&gt;, IPT_SIZE);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    {\n        fgets(input, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n        *(input + findNULL(input)) = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(input) &amp;gt; IPT_SIZE)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;error! the given string is too large. try again...\\n&quot;&lt;/span&gt;);\n            counter++;\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;//if the counter exceeds 3, exit the program (custom function):&lt;/span&gt;\n        errorMsgExit(counter, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;); \n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(input) &amp;gt; IPT_SIZE);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//rest of the program follows&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(input)\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The steps to remove the newline character in the perhaps most obvious way:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Determine the length of the string inside &lt;code&gt;NAME&lt;/code&gt; by using &lt;code&gt;strlen()&lt;/code&gt;, header &lt;code&gt;string.h&lt;/code&gt;. Note that &lt;code&gt;strlen()&lt;/code&gt; does not count the terminating &lt;code&gt;\\0&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sl = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(NAME);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Look if the string begins with or only includes one &lt;code&gt;\\0&lt;/code&gt; character (empty string). In this case &lt;code&gt;sl&lt;/code&gt; would be &lt;code&gt;0&lt;/code&gt; since &lt;code&gt;strlen()&lt;/code&gt; as I said above doesn´t count the &lt;code&gt;\\0&lt;/code&gt; and stops at the first occurrence of it: &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n{\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Skip the newline replacement process.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Check if the last character of the proper string is a newline character &lt;code&gt;&apos;\\n&apos;&lt;/code&gt;.  If this is the case, replace &lt;code&gt;\\n&lt;/code&gt; with a &lt;code&gt;\\0&lt;/code&gt;. Note that index counts start at &lt;code&gt;0&lt;/code&gt; so we will need to do &lt;code&gt;NAME[sl - 1]&lt;/code&gt;:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n{\n   NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note if you only pressed Enter at the &lt;code&gt;fgets()&lt;/code&gt; string request (the string content was only consisted of a newline character) the string in &lt;code&gt;NAME&lt;/code&gt; will be an empty string thereafter.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;We can combine step 2. and 3. together in just one &lt;code&gt;if&lt;/code&gt;-statement by using the logic operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n{\n   NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;The finished code:&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sl = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(NAME);\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n{\n   NAME[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If you rather like a function for use this technique by handling &lt;code&gt;fgets&lt;/code&gt; output strings in general without retyping each and every time, here is &lt;code&gt;fgets_newline_kill&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fgets_newline_kill&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; a[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sl = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(a);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(sl &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)\n    {\n       a[sl - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In your provided example, it would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter your Name: &quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fgets(Name, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; Name, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;) == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Error reading Name.\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    fgets_newline_kill(NAME);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that this method does not work if the input string has embedded &lt;code&gt;\\0&lt;/code&gt;s in it. If that would be the case &lt;code&gt;strlen()&lt;/code&gt; would only return the amount of characters until the first &lt;code&gt;\\0&lt;/code&gt;. But this isn´t quite a common approach, since the most string-reading functions usually stop at the first &lt;code&gt;\\0&lt;/code&gt; and take the string until that null character.&lt;/p&gt;\n\n&lt;p&gt;Aside from the question on its own. Try to avoid double negations that make your code unclearer: &lt;code&gt;if (!(fgets(Name, sizeof Name, stdin) != NULL) {}&lt;/code&gt;. You can simply do &lt;code&gt;if (fgets(Name, sizeof Name, stdin) == NULL) {}&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;If using &lt;code&gt;getline&lt;/code&gt; is an option - Not neglecting its security issues and if you wish to brace pointers - you can avoid string functions as the &lt;code&gt;getline&lt;/code&gt; returns the number of characters. Something like below&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *fname, *lname;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; size = &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, nchar; &lt;span class=&quot;hljs-comment&quot;&gt;// Max size of strings and number of characters read&lt;/span&gt;\n    fname = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(size * &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; *fname);\n    lname = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(size * &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; *lname);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; == fname || &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; == lname)\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error in memory allocation.&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter first name &quot;&lt;/span&gt;);\n    nchar = getline(&amp;amp;fname, &amp;amp;size, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (nchar == &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// getline return -1 on failure to read a line.&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Line couldn&apos;t be read..&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// This if block could be repeated for next getline too&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Number of characters read :%zu\\n&quot;&lt;/span&gt;, nchar);\n    fname[nchar - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter last name &quot;&lt;/span&gt;);\n    nchar = getline(&amp;amp;lname, &amp;amp;size, &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Number of characters read :%zu\\n&quot;&lt;/span&gt;, nchar);\n    lname[nchar - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name entered %s %s\\n&quot;&lt;/span&gt;, fname, lname);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;sup&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;a href=&quot;https://stackoverflow.com/questions/2008173/writing-secure-c-and-secure-c-idioms&quot;&gt;[ &lt;strong&gt;security issues&lt;/strong&gt; ]&lt;/a&gt; with &lt;code&gt;getline&lt;/code&gt; shouldn&apos;t be neglected though.&lt;/sup&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;In general, rather than trimming data that you don&apos;t want, avoid writing it in the first place.  If you don&apos;t want the newline in the buffer, don&apos;t use fgets.  Instead, use &lt;code&gt;getc&lt;/code&gt; or &lt;code&gt;fgetc&lt;/code&gt; or &lt;code&gt;scanf&lt;/code&gt;.  Perhaps something like:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;\n&lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n{\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Name[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; fmt[&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;snprintf&lt;/span&gt;(fmt, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; fmt, &lt;span class=&quot;hljs-string&quot;&gt;&quot;%%%zd[^\\n]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; Name - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;gt;= (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt; fmt ){\n                &lt;span class=&quot;hljs-built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to write format\\n&quot;&lt;/span&gt;);\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_FAILURE;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(fmt, Name) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ) {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Name = %s\\n&quot;&lt;/span&gt;, Name);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that this particular approach will leave the newline unread, so you may want to use a format string like &lt;code&gt;&quot;%255[^\\n]%*c&quot;&lt;/code&gt; to discard it (eg, &lt;code&gt;sprintf(fmt, &quot;%%%zd[^\\n]%%*c&quot;, sizeof Name - 1);&lt;/code&gt;), or perhaps follow the scanf with a &lt;code&gt;getchar()&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Tim Čas one liner is amazing for strings obtained by a call to fgets, because you know they contain a single newline at the end. &lt;/p&gt;\n\n&lt;p&gt;If you are in a different context and want to handle strings that may contain more than one newline, you might be looking for strrspn. It is not POSIX, meaning you will not find it on all Unices. I wrote one for my own needs.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Returns the length of the segment leading to the last \n   characters of s in accept. */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strrspn&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *accept)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ch;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(s);\n\nmore: \n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ch = accept ; *ch != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; ch++) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s[len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == *ch) {\n        len--;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;goto&lt;/span&gt; more;\n      }\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; len;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For those looking for a Perl chomp equivalent in C, I think this is it (chomp only removes the trailing newline).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;line[strrspn(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\r\\n&quot;&lt;/span&gt;)] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The strrcspn function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Returns the length of the segment leading to the last \n   character of reject in s. */&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strrcspn&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *reject)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *ch;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(s);\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; origlen = len;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (len &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ch = reject ; *ch != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ; ch++) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (s[len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == *ch) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; len;\n      }\n    }\n    len--;\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; origlen;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is my solution. Very simple.&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Delete new line&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// char preDelete[256]  include &quot;\\n&quot; as newline after fgets&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; deletedWords[&lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; iLeng = &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(preDelete);\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; iFinal = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; iLeng; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (preDelete[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) {\n\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        deletedWords[iFinal]  = preDelete[i];\n        iFinal++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == iLeng &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; ) {\n        deletedWords[iFinal] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The function below is a part of string processing library I am maintaining on Github. It removes and unwanted characters from a string, exactly what you want&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;zstring_search_chr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *token,&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s)&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!token || s==&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;*token; token++)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*token == s)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;zstring_remove_chr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *str,&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *bad)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *src = str , *dst = str;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(*src)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(zstring_search_chr(bad,*src))\n            src++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            *dst++ = *src++;  &lt;span class=&quot;hljs-comment&quot;&gt;/* assign first, then incement */&lt;/span&gt;\n\n    *dst=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; str;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An example usage could be &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;Example Usage\n      &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s[]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;this is a trial string to test the function.&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; *d=&lt;span class=&quot;hljs-string&quot;&gt;&quot; .&quot;&lt;/span&gt;;\n      &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;,zstring_remove_chr(s,d));\n\n  Example Output\n      thisisatrialstringtotestthefunction\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may want to check other available functions, or even contribute to the project :)\n&lt;a href=&quot;https://github.com/fnoyanisi/zString&quot; rel=&quot;nofollow&quot;&gt;https://github.com/fnoyanisi/zString&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;strlen&lt;/span&gt;(Name); i++ )\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(Name[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) Name[i] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should give it a try. This code basically loop through the string until it finds the &apos;\\n&apos;. When it&apos;s found the &apos;\\n&apos; will be replaced by the null character terminator &apos;\\0&apos;&lt;/p&gt;\n\n&lt;p&gt;Note that you are comparing characters and not strings in this line, then there&apos;s no need to use strcmp():&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(Name[i] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;) Name[i] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;since you will be using single quotes and not double quotes. &lt;a href=&quot;https://stackoverflow.com/questions/3683602/single-quotes-vs-double-quotes-in-c-or-c&quot; title=&quot;Here&apos;s&quot;&gt;Here&apos;s&lt;/a&gt; a link about single vs double quotes if you want to know more&lt;/p&gt;\n    "],"219":["\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterator.remove()&lt;/code&gt;&lt;/a&gt; is safe, you can use it like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This is a clever way to create the iterator and call iterator.hasNext() like&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// you would do in a while-loop. It would be the same as doing:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     Iterator&amp;lt;String&amp;gt; iterator = list.iterator();&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//     while (iterator.hasNext()) {&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; iterator = list.iterator(); iterator.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string.isEmpty()) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Remove the current element from the iterator and the list.&lt;/span&gt;\n        iterator.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;a href=&quot;https://docs.oracle.com/javase/9/docs/api/java/util/Iterator.html#remove--&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterator.remove()&lt;/code&gt;&lt;/a&gt; is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified &lt;strong&gt;in any other way&lt;/strong&gt; while the iteration is in progress.&lt;/p&gt;\n\n&lt;p&gt;Source:&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html&quot; rel=&quot;noreferrer&quot;&gt; docs.oracle &amp;gt; The Collection Interface&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;And similarly, if you have a &lt;code&gt;ListIterator&lt;/code&gt; and want to &lt;em&gt;add&lt;/em&gt; items, you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ListIterator#add&lt;/code&gt;&lt;/a&gt;, for the same reason you can use &lt;code&gt;Iterator#remove&lt;/code&gt;&amp;nbsp; it&apos;s designed to allow it.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;In your case you tried to remove from a list, but the same restriction applies if trying to &lt;code&gt;put&lt;/code&gt; into a &lt;code&gt;Map&lt;/code&gt; while iterating its content. &lt;/p&gt;\n    ","\n&lt;p&gt;This works:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Integer&amp;gt; iter = l.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iter.next() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n        iter.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I assumed that since a foreach loop is syntactic sugar for iterating, using an iterator wouldn&apos;t help... but it gives you this &lt;code&gt;.remove()&lt;/code&gt; functionality.&lt;/p&gt;\n    ","\n&lt;p&gt;With Java 8 you can use &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#removeIf-java.util.function.Predicate-&quot; rel=&quot;noreferrer&quot;&gt;the new &lt;code&gt;removeIf&lt;/code&gt; method&lt;/a&gt;. Applied to your example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Collection&amp;lt;Integer&amp;gt; coll = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;//populate&lt;/span&gt;\n\ncoll.removeIf(i -&amp;gt; i == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Since the question has been already answered i.e. the best way is to use the remove method of the iterator object, I would go into the specifics of the place where the error &lt;code&gt;&quot;java.util.ConcurrentModificationException&quot;&lt;/code&gt; is thrown.&lt;/p&gt;\n\n&lt;p&gt;Every collection class has a private class which implements the Iterator interface and provides methods like &lt;code&gt;next()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;hasNext()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The code for next looks something like this...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;hljs-title function_&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    checkForComodification();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; get(cursor);\n        lastRet = cursor++;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; next;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(IndexOutOfBoundsException e) {\n        checkForComodification();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NoSuchElementException&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here the method &lt;code&gt;checkForComodification&lt;/code&gt; is implemented as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checkForComodification&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ConcurrentModificationException&lt;/span&gt;();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, as you can see, if you explicitly try to remove an element from the collection. It results in &lt;code&gt;modCount&lt;/code&gt; getting different from &lt;code&gt;expectedModCount&lt;/code&gt;, resulting in the exception &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end. This allows you to keep using the type-safety of the for-each loop at the cost of increased memory use and cpu time (shouldn&apos;t be a huge problem unless you have really, really big lists or a really old computer)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;\n{\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n    Collection&amp;lt;Integer&amp;gt; itemsToRemove = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) {\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n        l.add(Integer.of(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            itemsToRemove.add(i);\n        }\n    }\n\n    l.removeAll(itemsToRemove);\n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In such cases a common trick is (was?) to go backwards:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; l.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i --) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l.get(i) == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n    l.remove(i);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That said, I&apos;m more than happy that you have better ways in Java 8, e.g. &lt;code&gt;removeIf&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; on streams.&lt;/p&gt;\n    ","\n&lt;p&gt;Same answer as &lt;a href=&quot;https://stackoverflow.com/a/223927/1433392&quot;&gt;Claudius&lt;/a&gt; with a for loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Object&amp;gt; it = objects.iterator(); it.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; it.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (test) {\n        it.remove();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://www.eclipse.org/collections/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eclipse Collections&lt;/a&gt;, the method &lt;code&gt;removeIf&lt;/code&gt; defined on &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections-api/src/main/java/org/eclipse/collections/api/collection/MutableCollection.java#L236&quot; rel=&quot;nofollow noreferrer&quot;&gt;MutableCollection&lt;/a&gt; will work:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MutableList&amp;lt;Integer&amp;gt; list = Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nlist.removeIf(Predicates.lessThan(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\nAssert.assertEquals(Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With Java 8 Lambda syntax this can be written as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;MutableList&amp;lt;Integer&amp;gt; list = Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\nlist.removeIf(Predicates.cast(integer -&amp;gt; integer &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));\nAssert.assertEquals(Lists.mutable.of(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;), list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The call to &lt;code&gt;Predicates.cast()&lt;/code&gt; is necessary here because a default &lt;code&gt;removeIf&lt;/code&gt; method was added on the &lt;code&gt;java.util.Collection&lt;/code&gt; interface in Java 8. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I am a committer for &lt;a href=&quot;https://www.eclipse.org/collections/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Make a copy of existing list and iterate over new copy.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str : &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;(listOfStr))     \n{\n    listOfStr.remove(&lt;span class=&quot;hljs-comment&quot;&gt;/* object reference or index */&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;People are asserting one &lt;strong&gt;can&apos;t&lt;/strong&gt; remove from a Collection being iterated by a foreach loop. I just wanted to point out that is &lt;em&gt;technically&lt;/em&gt; incorrect and describe exactly (I know the OP&apos;s question is so advanced as to obviate knowing this) the code behind that assumption:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TouchableObj obj : untouchedSet) {  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;--- This is where ConcurrentModificationException strikes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (obj.isTouched()) {\n        untouchedSet.remove(obj);\n        touchedSt.add(obj);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// this is key to avoiding returning to the foreach&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It isn&apos;t that you can&apos;t remove from the iterated &lt;code&gt;Colletion&lt;/code&gt; rather that you can&apos;t then continue iteration once you do. Hence the &lt;code&gt;break&lt;/code&gt; in the code above.&lt;/p&gt;\n\n&lt;p&gt;Apologies if this answer is a somewhat specialist use-case and more suited to the original &lt;a href=&quot;https://stackoverflow.com/questions/1110404/remove-elements-from-a-hashset-while-iterating&quot;&gt;thread&lt;/a&gt; I arrived here from, that one is marked as a duplicate (despite this thread appearing more nuanced) of this and locked.&lt;/p&gt;\n    ","\n&lt;p&gt;With a traditional for loop&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ArrayList&amp;lt;String&amp;gt; myArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; myArray.size(); ) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myArray.get(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (someCondition(text))\n        myArray.remove(i);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        i++;   \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentHashMap&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentLinkedQueue&lt;/a&gt; or &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentSkipListMap.html&quot; rel=&quot;nofollow&quot;&gt;ConcurrentSkipListMap&lt;/a&gt; may be another option, because they will never throw any ConcurrentModificationException, even if you remove or add item.&lt;/p&gt;\n    ","\n&lt;p&gt;Another way is to use a copy of your arrayList just for iteration:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Object&amp;gt; l = ...\n    \nList&amp;lt;Object&amp;gt; iterationList = ImmutableList.copyOf(l);\n    \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object curr : iterationList) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(curr)) {\n        l.remove(curr);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A &lt;code&gt;ListIterator&lt;/code&gt; allows you to add or remove items in the list.  Suppose you have a list of &lt;code&gt;Car&lt;/code&gt; objects:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Car&amp;gt; cars = ArrayList&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-comment&quot;&gt;// add cars here...&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (ListIterator&amp;lt;Car&amp;gt; carIterator = cars.listIterator();  carIterator.hasNext(); )\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&amp;lt;some-condition&amp;gt;)\n   { \n      carIterator().remove()\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&amp;lt;some-other-condition&amp;gt;)\n   { \n      carIterator().add(aNewCar);\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I know this question is too old to be about Java 8, but for those using Java 8 you can easily use removeIf():&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n    l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n}\n\nl.removeIf(i -&amp;gt; i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Now, You can remove with the following code&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;l.removeIf(current -&amp;gt; current == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Java Concurrent Modification Exception&lt;/strong&gt;&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Single thread&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iter.next()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        list.remove(it.next()); &lt;span class=&quot;hljs-comment&quot;&gt;//throws ConcurrentModificationException&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Solution: iterator &lt;code&gt;remove()&lt;/code&gt; method&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iter.next()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;) {\n        it.remove()\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Multi thread&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;copy/convert and iterate over another one collection. For small collections&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;synchronize&lt;/code&gt;&lt;a href=&quot;https://stackoverflow.com/a/59500618/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;thread safe collection&lt;a href=&quot;https://stackoverflow.com/a/65410514/4770877&quot;&gt;&lt;sup&gt;[About]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I have a suggestion for the problem above. No need of secondary list or any extra time. Please find an example which would do the same stuff but in a different way.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;list&quot; is ArrayList&amp;lt;Object&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//&quot;state&quot; is some boolean variable, which when set to true, Object will be removed from the list&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(index &amp;lt; list.size()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.get(index);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( state ) {\n        list.remove(index);\n        index = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;\n    }\n    index += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;\nThis would avoid the Concurrency Exception.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;){\n            itemsToRemove.add(i);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The catch is the after removing the element from the list if you skip the internal iterator.next() call. it still works! Though I dont propose to write code like this it helps to understand the concept behind it :-)&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n    ","\n&lt;p&gt;Example of thread safe collection modification:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Example&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;String&amp;gt; queue = Collections.synchronizedList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;());\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;removeFromQueue&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;synchronized&lt;/span&gt; (queue) {\n            Iterator&amp;lt;String&amp;gt; iterator = queue.iterator();\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string.isEmpty()) {\n                iterator.remove();\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One solution could be to rotate the list and remove the first element to avoid the ConcurrentModificationException or IndexOutOfBoundsException&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.size();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//you can also put a condition before remove&lt;/span&gt;\n    list.remove(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    Collections.rotate(list, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n}\nCollections.rotate(list, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try this one (removes all elements in the list that equal &lt;code&gt;i&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object i : l) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (condition(i)) {\n        l = (l.stream().filter((a) -&amp;gt; a != i)).collect(Collectors.toList());\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use a while loop.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; iterator = map.entrySet().iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(iterator.hasNext()){\n    Map.Entry&amp;lt;String, String&amp;gt; entry = iterator.next();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(entry.getKey().equals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)) {\n        iterator.remove();\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I ended up with this &lt;code&gt;ConcurrentModificationException&lt;/code&gt;, while iterating the list using &lt;code&gt;stream().map()&lt;/code&gt; method. However the &lt;code&gt;for(:)&lt;/code&gt; did not throw the exception while iterating and modifying the the list.&lt;/p&gt;\n&lt;p&gt;Here is code snippet , if its of help to anyone:\nhere I&apos;m iterating on a &lt;code&gt;ArrayList&amp;lt;BuildEntity&amp;gt;&lt;/code&gt; , and modifying it using the list.remove(obj)&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(BuildEntity build : uniqueBuildEntities){\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(build!=&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(isBuildCrashedWithErrors(build)){\n                    log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;The following build crashed with errors ,  will not be persisted -&amp;gt; \\n{}&quot;&lt;/span&gt;\n                            ,build.getBuildUrl());\n                    uniqueBuildEntities.remove(build);\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uniqueBuildEntities.isEmpty()) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  EMPTY_LIST;\n                }\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(uniqueBuildEntities.size()&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            dbEntries.addAll(uniqueBuildEntities);\n        }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If using HashMap, in newer versions of Java (8+) you can select each of 3 options:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserProfileEntity&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String Code;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String mobileNumber;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; LocalDateTime inputDT;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// getters and setters here&lt;/span&gt;\n}\nHashMap&amp;lt;String, UserProfileEntity&amp;gt; upMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by value&lt;/span&gt;\nupMap.values().removeIf(value -&amp;gt; !value.getCode().contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;0005&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by key&lt;/span&gt;\nupMap.keySet().removeIf(key -&amp;gt; key.contentEquals(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testUser&quot;&lt;/span&gt;));\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// remove by entry / key + value&lt;/span&gt;\nupMap.entrySet().removeIf(entry -&amp;gt; (entry.getKey().endsWith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;admin&quot;&lt;/span&gt;) || entry.getValue().getInputDT().isBefore(LocalDateTime.now().minusMinutes(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The best way (recommended) is use of &lt;code&gt;java.util.concurrent&lt;/code&gt; package. By\nusing this package you can easily avoid this exception. Refer\nModified Code:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    Collection&amp;lt;Integer&amp;gt; l = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CopyOnWriteArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i) {\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;));\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;));\n        l.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;));\n    }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Integer i : l) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i.intValue() == &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n            l.remove(i);\n        }\n    }\n    \n    System.out.println(l);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In case &lt;strong&gt;ArrayList:remove(int index)&lt;/strong&gt;- if(index is last element&apos;s position) it avoids without &lt;code&gt;System.arraycopy()&lt;/code&gt; and takes not time for this.&lt;/p&gt;\n\n&lt;p&gt;arraycopy time increases if(index decreases), by the way elements of list also decreases!&lt;/p&gt;\n\n&lt;p&gt;the best effective remove way is- removing its elements in descending order:\n&lt;code&gt;while(list.size()&amp;gt;0)list.remove(list.size()-1);&lt;/code&gt;//takes O(1)\n&lt;code&gt;while(list.size()&amp;gt;0)list.remove(0);&lt;/code&gt;//takes O(factorial(n))&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//region prepare data&lt;/span&gt;\nArrayList&amp;lt;Integer&amp;gt; ints = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\nArrayList&amp;lt;Integer&amp;gt; toRemove = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rdm&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Random&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; millis;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; rdm.nextInt();\n    ints.add(integer);\n}\nArrayList&amp;lt;Integer&amp;gt; intsForIndex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\nArrayList&amp;lt;Integer&amp;gt; intsDescIndex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\nArrayList&amp;lt;Integer&amp;gt; intsIterator = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;Integer&amp;gt;(ints);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region for index&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; intsForIndex.size(); i++) \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intsForIndex.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) intsForIndex.remove(i--);\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;// endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region for index desc&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; intsDescIndex.size() - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i--) \n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (intsDescIndex.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) intsDescIndex.remove(i);\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// region iterator&lt;/span&gt;\nmillis = System.currentTimeMillis();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Integer&amp;gt; iterator = intsIterator.iterator(); iterator.hasNext(); )\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iterator.next() % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) iterator.remove();\nSystem.out.println(System.currentTimeMillis() - millis);\n&lt;span class=&quot;hljs-comment&quot;&gt;//endregion&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;for index loop: 1090 msec&lt;/li&gt;\n&lt;li&gt;for desc index: &lt;strong&gt;519&lt;/strong&gt; msec---the best&lt;/li&gt;\n&lt;li&gt;for iterator: 1043 msec&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I know this question assumes just a &lt;code&gt;Collection&lt;/code&gt;, and not more specifically any &lt;code&gt;List&lt;/code&gt;.  But &lt;strong&gt;for those reading this question who are indeed working with a &lt;code&gt;List&lt;/code&gt; reference, you can avoid &lt;code&gt;ConcurrentModificationException&lt;/code&gt; with a &lt;code&gt;while&lt;/code&gt;-loop (while modifying within it) instead if you want to avoid &lt;code&gt;Iterator&lt;/code&gt;&lt;/strong&gt; (either if you want to avoid it in general, or avoid it specifically to achieve a looping order different from start-to-end stopping at each element [which I believe is the only order &lt;code&gt;Iterator&lt;/code&gt; itself can do]):&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;*Update: See comments below that clarify the analogous is also achievable with the &lt;em&gt;traditional&lt;/em&gt;-for-loop.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i){\n    list.add(i);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; list.size()){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n        list.remove(i++);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        i += &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;No ConcurrentModificationException from that code.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;There we see looping not start at the beginning, and not stop at &lt;em&gt;every&lt;/em&gt; element (which I believe &lt;code&gt;Iterator&lt;/code&gt; itself can&apos;t do).&lt;/p&gt;\n\n&lt;p&gt;FWIW we also see &lt;code&gt;get&lt;/code&gt; being called on &lt;code&gt;list&lt;/code&gt;, which could not be done if its reference was just &lt;code&gt;Collection&lt;/code&gt; (instead of the more specific &lt;code&gt;List&lt;/code&gt;-type of &lt;code&gt;Collection&lt;/code&gt;) - &lt;code&gt;List&lt;/code&gt; interface includes &lt;code&gt;get&lt;/code&gt;, but &lt;code&gt;Collection&lt;/code&gt; interface does not.  If not for that difference, then the &lt;code&gt;list&lt;/code&gt; reference could instead be a &lt;code&gt;Collection&lt;/code&gt; [and therefore technically this Answer would then be a direct Answer, instead of a tangential Answer].&lt;/p&gt;\n\n&lt;p&gt;FWIWW same code still works after modified to start at beginning at stop at every element (just like &lt;code&gt;Iterator&lt;/code&gt; order):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; ++i){\n    list.add(i);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; list.size()){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(list.get(i) % &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){\n        list.remove(i);\n\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        ++i;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can also use &lt;strong&gt;Recursion&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.&lt;/p&gt;\n    ","\n&lt;p&gt;this might not be the best way, but for most of the small cases this should acceptable:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;em&gt;&quot;create a second empty-array and add only the ones you want to keep&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;sub&gt;I don&apos;t remeber where I read this from... for justiness I will make this wiki in hope someone finds it or just to don&apos;t earn rep I don&apos;t deserve.&lt;/sub&gt;&lt;/p&gt;\n    "],"220":["\n&lt;p&gt;Using generator functions can make your example easier to read and improve performance.&lt;/p&gt;\n&lt;h3&gt;Python 2&lt;/h3&gt;\n&lt;p&gt;Using the &lt;a href=&quot;https://docs.python.org/2/library/collections.html#collections-abstract-base-classes&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt; ABC&lt;/a&gt; added in 2.6:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xs:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, basestring):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten(x):\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; x\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Python 3&lt;/h3&gt;\n&lt;p&gt;In Python 3, &lt;code&gt;basestring&lt;/code&gt; is no more, but the tuple &lt;code&gt;(str, bytes)&lt;/code&gt; gives the same effect. Also, the &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.3.html#pep-380&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;yield from&lt;/code&gt;&lt;/a&gt; operator returns an item from a generator one at a time.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections.abc &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xs:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt;)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(x)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; x\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(x, collections.Iterable):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [a &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten(i)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [x]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A little more concise, but pretty much the same.&lt;/p&gt;\n    ","\n&lt;p&gt;Generator using recursion and duck typing (updated for Python 3):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;L&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\n&amp;gt;&amp;gt;&amp;gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is my functional version of recursive flatten which handles both tuples and lists, and lets you throw in any mix of positional arguments. Returns a generator which produces the entire sequence in order, arg by arg:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flatten = &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; *n: (e &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (flatten(*a) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(a, (&lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; (a,)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;l1 = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)]]\nl2 = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), [[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, (&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,), [&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]), &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]], (&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,)]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(l1, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, l2))\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Generator version of @unutbu&apos;s non-recursive solution, as requested by @Andrew in a comment:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;genflat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, ltypes=collections.&lt;span class=&quot;hljs-type&quot;&gt;Sequence&lt;/span&gt;&lt;/span&gt;):\n    l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)\n    i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(l[i], ltypes):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; l[i]:\n                l.pop(i)\n                i -= &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                l[i:i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = l[i]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; l[i]\n        i += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Slightly simplified version of this generator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;genflat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, ltypes=collections.&lt;span class=&quot;hljs-type&quot;&gt;Sequence&lt;/span&gt;&lt;/span&gt;):\n    l = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(l)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; l:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], ltypes):\n            l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l: &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; l.pop(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This version of &lt;code&gt;flatten&lt;/code&gt; avoids python&apos;s recursion limit (and thus works with arbitrarily deep, nested iterables). It is a generator which can handle strings and arbitrary iterables (even infinite ones).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; IT\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; collections\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable, ltypes=collections.Iterable&lt;/span&gt;):\n    remainder = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(iterable)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        first = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(remainder)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(first, ltypes) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(first, (&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;bytes&lt;/span&gt;)):\n            remainder = IT.chain(first, remainder)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; first\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here are some examples demonstrating its use:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(IT.islice(flatten(IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)),&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(IT.islice(flatten(IT.chain(IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;),\n                                       {&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;},\n                                       &lt;span class=&quot;hljs-string&quot;&gt;&apos;foo bar&apos;&lt;/span&gt;.split(),\n                                       IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;),)),&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [2, 2, 2, 10, 20, 30, &apos;foo&apos;, &apos;bar&apos;, 1, 1]&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten([[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]]])))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [1, 2, 3, 4]&lt;/span&gt;\n\nseq = ([[&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(i),&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(i-&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;)] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;)+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)] + &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(seq)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# [&apos;a&apos;, &apos;A&apos;, &apos;b&apos;, &apos;B&apos;, &apos;c&apos;, &apos;C&apos;, &apos;d&apos;, &apos;D&apos;, &apos;e&apos;, &apos;E&apos;, &apos;f&apos;, &apos;F&apos;, &apos;g&apos;, &apos;G&apos;, &apos;h&apos;, &apos;H&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &apos;i&apos;, &apos;I&apos;, &apos;j&apos;, &apos;J&apos;, &apos;k&apos;, &apos;K&apos;, &apos;l&apos;, &apos;L&apos;, &apos;m&apos;, &apos;M&apos;, &apos;n&apos;, &apos;N&apos;, &apos;o&apos;, &apos;O&apos;, &apos;p&apos;, &apos;P&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &apos;q&apos;, &apos;Q&apos;, &apos;r&apos;, &apos;R&apos;, &apos;s&apos;, &apos;S&apos;, &apos;t&apos;, &apos;T&apos;, &apos;u&apos;, &apos;U&apos;, &apos;v&apos;, &apos;V&apos;, &apos;w&apos;, &apos;W&apos;, &apos;x&apos;, &apos;X&apos;,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# &apos;y&apos;, &apos;Y&apos;, &apos;z&apos;, &apos;Z&apos;, 0, 1, 2, 3, 4, 5, 6, 7, 8]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Although &lt;code&gt;flatten&lt;/code&gt; can handle infinite generators, it can not handle infinite nesting:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;infinitely_nested&lt;/span&gt;():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; IT.chain(infinitely_nested(), IT.repeat(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(IT.islice(flatten(infinitely_nested()), &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))\n&lt;span class=&quot;hljs-comment&quot;&gt;# hangs&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xs&lt;/span&gt;):\n    res = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;loop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ys&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ys:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(i, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n                loop(i)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                res.append(i)\n    loop(xs)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; res\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another answer that is even more interesting...&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TheList&lt;/span&gt;):\n    a = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(TheList)\n    b,_Anon = re.subn(&lt;span class=&quot;hljs-string&quot;&gt;r&apos;[\\[,\\]]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, a)\n    c = b.split()\n    d = [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; c]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(d)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Basically, it converts the nested list to a string, uses a regex to strip out the nested syntax, and then converts the result back to a (flattened) list.&lt;/p&gt;\n    ","\n&lt;p&gt;It was fun trying to create a function that could flatten irregular list in Python, but of course that is what Python is for (to make programming fun). The following generator works fairly well with some caveats:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; iterable\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will flatten datatypes that you might want left alone (like &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, and &lt;code&gt;str&lt;/code&gt; objects). Also, the code relies on the fact that requesting an iterator from a non-iterable raises a &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; iterable\n\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I disagree with the previous implementation. The problem is that you should not be able to flatten something that is not an iterable. It is confusing and gives the wrong impression of the argument.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;))\n[&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following generator is almost the same as the first but does not have the problem of trying to flatten a non-iterable object. It fails as one would expect when an inappropriate argument is given to it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; flatten(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Testing the generator works fine with the list that was provided. However, the new code will raise a &lt;code&gt;TypeError&lt;/code&gt; when a non-iterable object is given to it. Example are shown below of the new behavior.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;))\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;pyshell#32&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;))\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;pyshell#27&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; iterable:\nTypeError: &lt;span class=&quot;hljs-string&quot;&gt;&apos;int&apos;&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; iterable\n&amp;gt;&amp;gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You could use &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/generated/deepflatten.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;deepflatten&lt;/code&gt;&lt;/a&gt; from the 3rd party package &lt;a href=&quot;https://iteration-utilities.readthedocs.io/en/latest/index.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;iteration_utilities&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; iteration_utilities &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepflatten\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;L = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L, types=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# only flatten &quot;inner&quot; lists&lt;/span&gt;\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s an iterator so you need to iterate it (for example by wrapping it with &lt;code&gt;list&lt;/code&gt; or using it in a loop). Internally it uses an iterative approach instead of an recursive approach and it&apos;s written as C extension so it can be faster than pure python approaches:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L))\n&lt;span class=&quot;hljs-number&quot;&gt;12.6&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;298&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(deepflatten(L, types=&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;))\n&lt;span class=&quot;hljs-number&quot;&gt;8.7&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;139&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))   &lt;span class=&quot;hljs-comment&quot;&gt;# Cristian - Python 3.x approach from https://stackoverflow.com/a/2158532/5393381&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;86.4&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;4.42&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flatten(L))   &lt;span class=&quot;hljs-comment&quot;&gt;# Josh Lee - https://stackoverflow.com/a/2158522/5393381&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;107&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;2.99&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;%timeit &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(genflat(L, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;))  &lt;span class=&quot;hljs-comment&quot;&gt;# Alex Martelli - https://stackoverflow.com/a/2159079/5393381&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;23.1&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;710&lt;/span&gt; ns per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;I&apos;m the author of the &lt;code&gt;iteration_utilities&lt;/code&gt; library.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple function that flattens lists of arbitrary depth. No recursion, to avoid stack overflow.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; copy &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; deepcopy\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nested_list&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Flatten an arbitrarily nested list, without recursion (to avoid\n    stack overflows). Returns a new list, the original list is unchanged.\n\n    &amp;gt;&amp;gt; list(flatten_list([1, 2, 3, [4], [], [[[[[[[[[5]]]]]]]]]]))\n    [1, 2, 3, 4, 5]\n    &amp;gt;&amp;gt; list(flatten_list([[1, 2], 3]))\n    [1, 2, 3]\n\n    &quot;&quot;&quot;&lt;/span&gt;\n    nested_list = deepcopy(nested_list)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; nested_list:\n        sublist = nested_list.pop(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(sublist, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            nested_list = sublist + nested_list\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; sublist\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Pandas has a function that does this. It returns an iterator as you mentioned.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas\nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: pandas.core.common.flatten([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: &amp;lt;generator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; flatten at &lt;span class=&quot;hljs-number&quot;&gt;0x7f12ade66200&lt;/span&gt;&amp;gt;\nIn [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(pandas.core.common.flatten([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\nOut[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Although an elegant and very pythonic answer has been selected I would present my solution just for the review:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    ret = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(i, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(i, &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt;):\n            ret.extend(flat(i))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            ret.append(i)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Please tell how good or bad this code is?&lt;/p&gt;\n    ","\n&lt;p&gt;I prefer simple answers.  No generators.  No recursion or recursion limits.  Just iteration:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;TheList&lt;/span&gt;):\n    listIsNested = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; listIsNested:                 &lt;span class=&quot;hljs-comment&quot;&gt;#outer loop&lt;/span&gt;\n        keepChecking = &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n        Temp = []\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; TheList:         &lt;span class=&quot;hljs-comment&quot;&gt;#inner loop&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(element,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n                Temp.extend(element)\n                keepChecking = &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n                Temp.append(element)\n\n        listIsNested = keepChecking     &lt;span class=&quot;hljs-comment&quot;&gt;#determine if outer loop exits&lt;/span&gt;\n        TheList = Temp[:]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; TheList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works with two lists: an inner for loop and an outer while loop.  &lt;/p&gt;\n\n&lt;p&gt;The inner for loop iterates through the list.  If it finds a list element, it (1) uses list.extend() to flatten that part one level of nesting and (2) switches keepChecking to True.  keepchecking is used to control the outer while loop.  If the outer loop gets set to true, it triggers the inner loop for another pass.  &lt;/p&gt;\n\n&lt;p&gt;Those passes keep happening until no more nested lists are found.  When a pass finally occurs where none are found, keepChecking never gets tripped to true, which means listIsNested stays false and the outer while loop exits.  &lt;/p&gt;\n\n&lt;p&gt;The flattened list is then returned.&lt;/p&gt;\n\n&lt;p&gt;Test-run   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flatten([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;]]])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;[1, 2, 3, 4, 100, 200, 300, 1000, 2000, 3000]&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;When trying to answer such a question you really need to give the limitations of the code you propose as a solution. If it was only about performances I wouldn&apos;t mind too much, but most of the codes proposed as solution (including the accepted answer) fail to flatten any list that has a depth greater than 1000.&lt;/p&gt;\n\n&lt;p&gt;When I say &lt;em&gt;most of the codes&lt;/em&gt; I mean all codes that use any form of recursion (or call a standard library function that is recursive). All these codes fail because for every of the recursive call made, the (call) stack grow by one unit, and the (default) python call stack has a size of 1000. &lt;/p&gt;\n\n&lt;p&gt;If you&apos;re not too familiar with the call stack, then maybe the following will help (otherwise you can just scroll to the &lt;strong&gt;Implementation&lt;/strong&gt;).&lt;/p&gt;\n\n&lt;h2&gt;Call stack size and recursive programming (dungeon analogy)&lt;/h2&gt;\n\n&lt;h3&gt;Finding the treasure and exit&lt;/h3&gt;\n\n&lt;p&gt;Imagine you enter a huge &lt;em&gt;dungeon with numbered rooms&lt;/em&gt;, looking for a treasure. You don&apos;t know the place but you have some &lt;strong&gt;indications&lt;/strong&gt; on how to find the treasure. Each indication is a riddle (difficulty varies, but you can&apos;t predict how hard they will be). You decide to think a little bit about a strategy to save time, you make two observations: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;It&apos;s hard (long) to find the treasure as you&apos;ll have to solve (potentially hard) riddles to get there. &lt;/li&gt;\n&lt;li&gt;Once the treasure found, returning to the entrance may be easy, you just have to use the same path in the other direction (though this needs a bit of memory to recall your path). &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;When entering the dungeon, you notice a small &lt;strong&gt;notebook&lt;/strong&gt; here. You decide to use it to write down every room you exit after solving a riddle (when entering a new room), this way you&apos;ll be able to return back to the entrance. That&apos;s a genius idea, you &lt;em&gt;won&apos;t even spend a cent&lt;/em&gt; implementing your strategy.&lt;/p&gt;\n\n&lt;p&gt;You enter the dungeon, solving with great success the first 1001 riddles, but here comes something you hadn&apos;t planed, you have no space left in the notebook you borrowed. You decide to &lt;em&gt;abandon&lt;/em&gt; your quest as you prefer not having the treasure than being lost forever inside the dungeon (that looks smart indeed).&lt;/p&gt;\n\n&lt;h3&gt;Executing a recursive program&lt;/h3&gt;\n\n&lt;p&gt;Basically, it&apos;s the exact same thing as finding the treasure. The dungeon is the &lt;em&gt;computer&apos;s memory&lt;/em&gt;, your goal now is not to find a treasure but to &lt;em&gt;compute some function&lt;/em&gt; (find &lt;em&gt;f(x)&lt;/em&gt; for a given &lt;em&gt;x&lt;/em&gt;). The indications simply are sub-routines that will help you solving &lt;em&gt;f(x)&lt;/em&gt;. Your strategy is the same as the &lt;em&gt;call stack&lt;/em&gt; strategy, the notebook is the stack, the rooms are the functions&apos; return addresses: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;over here&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;am&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;I&quot;&lt;/span&gt;]\ny = &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(x) &lt;span class=&quot;hljs-comment&quot;&gt;# You&apos;re about to enter a room named `sorted`, note down the current room address here so you can return back: 0x4004f4 (that room address looks weird)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Seems like you went back from your quest using the return address 0x4004f4&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Let&apos;s see what you&apos;ve collected &lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;.join(y))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem you encountered in the dungeon will be the same here, the call stack has a finite size (here 1000) and therefore, if you enter too many functions without returning back then you&apos;ll fill the call stack and have an error that look like &lt;strike&gt;&quot;Dear adventurer, I&apos;m very sorry but your notebook is full&quot;&lt;/strike&gt;: &lt;code&gt;RecursionError: maximum recursion depth exceeded&lt;/code&gt;. Note that you don&apos;t need recursion to fill the call stack, but it&apos;s very unlikely that a non-recursive program call 1000 functions without ever returning. It&apos;s important to also understand that once you returned from a function, the call stack is freed from the address used (hence the name &quot;stack&quot;, return address are pushed in before entering a function and pulled out when returning). In the special case of a simple recursion (a function &lt;code&gt;f&lt;/code&gt; that call itself once -- over and over --) you will enter &lt;code&gt;f&lt;/code&gt; over and over until the computation is finished (until the treasure is found) and return from &lt;code&gt;f&lt;/code&gt; until you go back to the place where you called &lt;code&gt;f&lt;/code&gt; in the first place. The call stack will never be freed from anything until the end where it will be freed from all return addresses one after the other. &lt;/p&gt;\n\n&lt;h3&gt;How to avoid this issue?&lt;/h3&gt;\n\n&lt;p&gt;That&apos;s actually pretty simple: &quot;don&apos;t use recursion if you don&apos;t know how deep it can go&quot;. That&apos;s not always true as in some cases, &lt;a href=&quot;https://stackoverflow.com/questions/310974/what-is-tail-call-optimization&quot;&gt;Tail Call recursion can be Optimized (TCO)&lt;/a&gt;. But in python, this is not the case, and even &quot;well written&quot; recursive function will &lt;strong&gt;not&lt;/strong&gt; optimize stack use. There is an interesting post from Guido about this question: &lt;a href=&quot;http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;em&gt;Tail Recursion Elimination&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;There is a technique that you can use to make any recursive function iterative, this technique we could call &lt;em&gt;&lt;strong&gt;bring your own notebook&lt;/strong&gt;&lt;/em&gt;. For example, in our particular case we simply are exploring a list, entering a room is equivalent to entering a sublist, the question you should ask yourself is &lt;em&gt;how can I get back from a list to its parent list?&lt;/em&gt; The answer is not that complex, repeat the following until the &lt;code&gt;stack&lt;/code&gt; is empty:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;push the current list &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; in a &lt;code&gt;stack&lt;/code&gt; when entering a new sublist (note that a list address+index is also an address, therefore we just use the exact same technique used by the call stack);&lt;/li&gt;\n&lt;li&gt;every time an item is found, &lt;code&gt;yield&lt;/code&gt; it (or add them in a list);&lt;/li&gt;\n&lt;li&gt;once a list is fully explored, go back to the parent list using the &lt;code&gt;stack&lt;/code&gt; &lt;em&gt;return &lt;code&gt;address&lt;/code&gt; (and &lt;code&gt;index&lt;/code&gt;)&lt;/em&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Also note that this is equivalent to a DFS in a tree where some nodes are sublists &lt;code&gt;A = [1, 2]&lt;/code&gt; and some are simple items: &lt;code&gt;0, 1, 2, 3, 4&lt;/code&gt; (for &lt;code&gt;L = [0, [1,2], 3, 4]&lt;/code&gt;). The tree looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;                    L\n                    |\n           -------------------\n           |     |     |     |\n           &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   --A--   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n               |   |\n               &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The DFS traversal pre-order is: L, 0, A, 1, 2, 3, 4. Remember, in order to implement an iterative DFS you also &quot;need&quot; a stack. The implementation I proposed before result in having the following states (for the &lt;code&gt;stack&lt;/code&gt; and the &lt;code&gt;flat_list&lt;/code&gt;): &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;init.:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)]\n**&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)],         flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n**A**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (A, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)], flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (A, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)], flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (A, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)], flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)],         flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n**&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;**:  stack=[(L, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)],         flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;: stack=[],               flat_list=[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this example, the stack maximum size is 2, because the input list (and therefore the tree) have depth 2.&lt;/p&gt;\n\n&lt;h2&gt;Implementation&lt;/h2&gt;\n\n&lt;p&gt;For the implementation, in python you can simplify a little bit by using iterators instead of simple lists. References to the (sub)iterators will be used to store &lt;em&gt;sublists return addresses&lt;/em&gt; (instead of having both the list address and the index). This is not a big difference but I feel this is more readable (and also a bit faster):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(items_from(iterable))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;items_from&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;iterable&lt;/span&gt;):\n    cursor_stack = [&lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(iterable)]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; cursor_stack:\n        sub_iterable = cursor_stack[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n            item = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(sub_iterable)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; StopIteration:   &lt;span class=&quot;hljs-comment&quot;&gt;# post-order&lt;/span&gt;\n            cursor_stack.pop()\n            &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; is_list_like(item):  &lt;span class=&quot;hljs-comment&quot;&gt;# pre-order&lt;/span&gt;\n            cursor_stack.append(&lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(item))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item          &lt;span class=&quot;hljs-comment&quot;&gt;# in-order&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;is_list_like&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(item, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, notice that in &lt;code&gt;is_list_like&lt;/code&gt; I have &lt;code&gt;isinstance(item, list)&lt;/code&gt;, which could be changed to handle more input types, here I just wanted to have the simplest version where (iterable) is just a list. But you could also do that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;is_list_like&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(item, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# strings are not lists (hmm...) &lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; TypeError:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This considers strings as &quot;simple items&quot; and therefore &lt;code&gt;flatten_iter([[&quot;test&quot;, &quot;a&quot;], &quot;b])&lt;/code&gt; will return &lt;code&gt;[&quot;test&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt; and not &lt;code&gt;[&quot;t&quot;, &quot;e&quot;, &quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;b&quot;]&lt;/code&gt;. Remark that in that case, &lt;code&gt;iter(item)&lt;/code&gt; is called twice on each item, let&apos;s pretend it&apos;s an exercise for the reader to make this cleaner. &lt;/p&gt;\n\n&lt;h2&gt;Testing and remarks on other implementations&lt;/h2&gt;\n\n&lt;p&gt;In the end, remember that you can&apos;t print a infinitely nested list &lt;code&gt;L&lt;/code&gt; using &lt;code&gt;print(L)&lt;/code&gt; because internally it will use recursive calls to &lt;code&gt;__repr__&lt;/code&gt; (&lt;code&gt;RecursionError: maximum recursion depth exceeded while getting the repr of an object&lt;/code&gt;). For the same reason, solutions to &lt;code&gt;flatten&lt;/code&gt; involving &lt;code&gt;str&lt;/code&gt; will fail with the same error message. &lt;/p&gt;\n\n&lt;p&gt;If you need to test your solution, you can use this function to generate a simple nested list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;build_deep_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;depth&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Returns a list of the form $l_{depth} = [depth-1, l_{depth-1}]$\n    with $depth &amp;gt; 1$ and $l_0 = [0]$.\n    &quot;&quot;&quot;&lt;/span&gt;\n    sub_list = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, depth):\n        sub_list = [d, sub_list]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sub_list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which gives: &lt;code&gt;build_deep_list(5)&lt;/code&gt; &amp;gt;&amp;gt;&amp;gt; &lt;code&gt;[4, [3, [2, [1, [0]]]]]&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I didn&apos;t go through all the already available answers here, but here is a one liner I came up with, borrowing from lisp&apos;s way of first and rest list processing&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; flatten(l[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) + (flatten(l[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(l) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; []) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(l) &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [l]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;here is one simple and one not-so-simple case -&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flatten([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flatten([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_name&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]], [&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;some&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;set&apos;&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_string&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;])\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, {&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_name&apos;&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&apos;set&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;some&apos;&lt;/span&gt;]), &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;some_string&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s the &lt;code&gt;compiler.ast.flatten&lt;/code&gt; implementation in 2.7.5:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    l = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elt &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; seq:\n        t = &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(elt)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; elt2 &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; flatten(elt):\n                l.append(elt2)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            l.append(elt)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; l\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are better, faster methods (If you&apos;ve reached here, you have seen them already)&lt;/p&gt;\n\n&lt;p&gt;Also note:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Deprecated since version 2.6: The compiler package has been removed in Python 3.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;totally hacky but I think it would work (depending on your data_type)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flat_list = ast.literal_eval(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[%s]&quot;&lt;/span&gt;%re.sub(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\[\\]]&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(the_list)))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m surprised no one has thought of this. Damn recursion I don&apos;t get the recursive answers that the advanced people here made. anyway here is my attempt on this. caveat is it&apos;s very specific to the OP&apos;s use case&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re\n\nL = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\nflattened_list = re.sub(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\[\\]]&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(L)).replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;).split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;)\nnew_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, flattened_list))\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(new_list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Just use a &lt;a href=&quot;https://funcy.readthedocs.io/en/stable/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;funcy&lt;/code&gt;&lt;/a&gt; library:\n&lt;code&gt;pip install funcy&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; funcy\n\n\nfuncy.flatten([[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# returns generator&lt;/span&gt;\nfuncy.lflatten([[[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]) &lt;span class=&quot;hljs-comment&quot;&gt;# returns list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am a dumb guy so I&apos;ll give a &quot;dumb&quot; solution. All that recursion hurts my brain.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flattened_list = []\nnested_list = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nested_list, container&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nested_list:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isintance(item, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            flatten(item, container)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            container.append(item)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flatten(nested_list, flattened_list)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;flattened_list\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I get that it&apos;s using a side effect but well that&apos;s to the best of my comprehension of recursion can go&lt;/p&gt;\n    ","\n&lt;p&gt;I don&apos;t see anything like this posted around here and just got here from a closed question on the same subject, but why not just do something like this(if you know the type of the list you want to split):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]]    \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;g = &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(a).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)    \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = [&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; g.split(&lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x.strip()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You would need to know the type of the elements but I think this can be generalised and in terms of speed I think it would be faster.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is another py2 approach, Im not sure if its the fastest or the most elegant nor safest ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; imap, repeat, chain\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seqs, ignore=(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, long, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, basestring&lt;/span&gt;)&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; repeat(seqs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(imap(&lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;, repeat(seqs), ignore)) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(seqs, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; chain.from_iterable(imap(flat, seqs))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can ignore any specific (or derived) type you would like, it returns an iterator, so you can convert it to any specific container such as list, tuple, dict or simply consume it in order to reduce memory footprint, for better or worse it can handle initial non-iterable objects such as int ...&lt;/p&gt;\n\n&lt;p&gt;Note most of the heavy lifting is done in C, since as far as I know thats how itertools are implemented, so while it is recursive, AFAIK it isn&apos;t bounded by python recursion depth since the function calls are happening in C, though this doesn&apos;t mean you are bounded by memory, specially in OS X where its stack size has a hard limit as of today (OS X Mavericks) ...&lt;/p&gt;\n\n&lt;p&gt;there is a slightly faster approach, but less portable method, only use it if you can assume that the base elements of the input can be explicitly determined otherwise, you&apos;ll get an infinite recursion, and OS X with its limited stack size, will throw a segmentation fault fairly quickly ...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seqs, ignore={&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;, long, &lt;span class=&quot;hljs-built_in&quot;&gt;float&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, unicode}&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; repeat(seqs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(seqs) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; ignore &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(seqs, Iterable) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; chain.from_iterable(imap(flat, seqs))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;here we are using sets to check for the type so it takes O(1) vs O(number of types) to check whether or not an element should be ignored, though of course any value with derived type of the stated ignored types will fail, this is why its using &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt; so use it with caution ...&lt;/p&gt;\n\n&lt;p&gt;tests:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;test_size=&lt;span class=&quot;hljs-number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;increase_depth&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;value, depth=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; func &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xrange(depth):\n            value = repeat(value, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; value\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;random_sub_chaining&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nested_values&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; values &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nested_values:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; chain((values,), chain.from_iterable(imap(&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;, repeat(nested_values, random.randint(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)))))\n\n    expected_values = &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;(xrange(test_size), imap(&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;, xrange(test_size)))\n    nested_values = random_sub_chaining((increase_depth(value, depth) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; depth, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(expected_values)))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(imap(cmp, chain.from_iterable(expected_values), flat(chain(((),), nested_values, ((),)))))\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;test_flat()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(flat([[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]))\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; \n\n$ uname -a\nDarwin Samys-MacBook-Pro.local &lt;span class=&quot;hljs-number&quot;&gt;13.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt; Darwin Kernel Version &lt;span class=&quot;hljs-number&quot;&gt;13.3&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;: Tue Jun  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt; PDT &lt;span class=&quot;hljs-number&quot;&gt;2014&lt;/span&gt;; root:xnu-&lt;span class=&quot;hljs-number&quot;&gt;2422.110&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.17&lt;/span&gt;~&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/RELEASE_X86_64 x86_64\n$ python --version\nPython &lt;span class=&quot;hljs-number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Without using any library:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_flat&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;l, r&lt;/span&gt;):    \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(l) &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n            r.append(l)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; l:\n                r = r + flat(i)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; _flat(l, [])\n\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# example&lt;/span&gt;\ntest = [[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], [[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]], [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;] , [[&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;]], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;g&apos;&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]    \n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; flat(test) &lt;span class=&quot;hljs-comment&quot;&gt;# prints [1, 2, 3, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;z&apos;, &apos;x&apos;, &apos;y&apos;, &apos;d&apos;, &apos;f&apos;, &apos;g&apos;, 4]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;itertools.chain&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; itertools\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Iterable\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lst&lt;/span&gt;):\n    flat_lst = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; itertools.chain(lst):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(item, Iterable):\n            item = list_flatten(item)\n            flat_lst.extend(item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            flat_lst.append(item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; flat_lst\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or without chaining:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;q, final&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; q:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(q, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(q[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            final.append(q[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            flatten(q[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], final)\n        flatten(q[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:], final)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        final.append(q)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I used recursive to solve &lt;strong&gt;&lt;em&gt;nested list with any depth&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;combine_nlist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nlist,init=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,combiner=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y: x+y&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;\n    apply function: combiner to a nested list element by element(treated as flatten list)\n    &apos;&apos;&apos;&lt;/span&gt;\n    current_value=init\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; each_item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; nlist:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(each_item,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n            current_value =combine_nlist(each_item,current_value,combiner)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            current_value = combiner(current_value,each_item)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; current_value\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So after i define function combine_nlist, it is easy to use this function do flatting. Or you can combine it into one function. I like my solution because it can be applied to any nested list.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten_nlist&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;nlist&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; combine_nlist(nlist,[],&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y:x+[y])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;result&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;379&lt;/span&gt;]: flatten_nlist([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;],[[[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;])\nOut[&lt;span class=&quot;hljs-number&quot;&gt;379&lt;/span&gt;]: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The easiest way is to use the &lt;a href=&quot;https://github.com/metagriffin/morph&quot; rel=&quot;nofollow&quot;&gt;morph&lt;/a&gt; library using &lt;code&gt;pip install morph&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The code is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; morph\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\nflattened_list = morph.flatten(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# returns [1, 2, 3, 4, 5, 6]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am aware that there are already many awesome answers but i wanted to add an answer that uses the functional programming method of solving the question. In this answer i make use of double recursion :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten_list&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;seq&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; seq:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;],&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (flatten_list(seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])+flatten_list(seq[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:]))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [seq[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]]+flatten_list(seq[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:])\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(flatten_list([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;m not sure if this is necessarily quicker or more effective, but this is what I do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;flatten&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;lst&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(lst).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;).replace(&lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot;&gt;&apos;]&apos;&lt;/span&gt;)\n\nL = [[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]], &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(flatten(L))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;flatten&lt;/code&gt; function here turns the list into a string, takes out &lt;strong&gt;all&lt;/strong&gt; of the square brackets, attaches square brackets back onto the ends, and turns it back into a list. &lt;/p&gt;\n\n&lt;p&gt;Although, if you knew you would have square brackets in your list in strings, like &lt;code&gt;[[1, 2], &quot;[3, 4] and [5]&quot;]&lt;/code&gt;, you would have to do something else.&lt;/p&gt;\n    ","\n&lt;p&gt;This is a simple implement of flatten on python2&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flatten=&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; l: reduce(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x,y:x+y,&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(flatten,l),[]) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;isinstance&lt;/span&gt;(l,&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [l]\n\ntest=[[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;,[&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;]]]]]],]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; flatten(test)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#output [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"79","randomQuestions":[{"title":"Asking the user for input until they give a valid response","slug":"asking-the-user-for-input-until-they-give-a-valid-response-1657384376162"},{"title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","slug":"which-equals-operator-(-vs-)-should-be-used-in-javascript-comparisons-1657384663105"},{"title":"How do I use arrays in C++?","slug":"how-do-i-use-arrays-in-c++-1657387456118"},{"title":"What is the difference between single-quoted and double-quoted strings in PHP?","slug":"what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php-1657384624345"},{"title":"The ViewData item that has the key 'XXX' is of type 'System.Int32' but must be of type 'IEnumerable<SelectListItem>'","slug":"the-viewdata-item-that-has-the-key-'xxx'-is-of-type-'system.int32'-but-must-be-of-type-'ienumerablelessselectlistitemgreater'-1657388454191"},{"title":"Iterator invalidation rules for C++ containers","slug":"iterator-invalidation-rules-for-c++-containers-1657387561090"},{"title":"What is JSONP, and why was it created?","slug":"what-is-jsonp-and-why-was-it-created-1657387770563"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"Split array into chunks","slug":"split-array-into-chunks-1657387896420"},{"title":"Selenium \"selenium.common.exceptions.NoSuchElementException\" when using Chrome","slug":"selenium-\"selenium.common.exceptions.nosuchelementexception\"-when-using-chrome-1657388136699"},{"title":"Why do I get a segmentation fault when writing to a \"char *s\" initialized with a string literal, but not \"char s[]\"?","slug":"why-do-i-get-a-segmentation-fault-when-writing-to-a-\"char-*s\"-initialized-with-a-string-literal-but-not-\"char-s\"-1657385511046"},{"title":"Captured variable in a loop in C#","slug":"captured-variable-in-a-loop-in-c-1657387696779"},{"title":"How to remove \"noise\" from GCC/clang assembly output?","slug":"how-to-remove-\"noise\"-from-gccclang-assembly-output-1657387612391"},{"title":"How can I fix 'android.os.NetworkOnMainThreadException'?","slug":"how-can-i-fix-'android.os.networkonmainthreadexception'-1657384454963"},{"title":"Remove duplicate values from JS array [duplicate]","slug":"remove-duplicate-values-from-js-array-duplicate-1657387801931"},{"title":"\"is\" operator behaves unexpectedly with integers","slug":"\"is\"-operator-behaves-unexpectedly-with-integers-1657387563823"},{"title":"Why JSF calls getters multiple times","slug":"why-jsf-calls-getters-multiple-times-1657388244489"},{"title":"How to make function decorators and chain them together?","slug":"how-to-make-function-decorators-and-chain-them-together-1657388180803"},{"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929"},{"title":"Parsing a string to a date in JavaScript","slug":"parsing-a-string-to-a-date-in-javascript-1657387782497"}]},"__N_SSG":true}