{"pageProps":{"data":{"count":610,"rows":[{"id":160,"title":"Selenium - wait until element is present, visible and interactable","slug":"selenium-wait-until-element-is-present-visible-and-interactable-1657384820071","postType":"QUESTION","createdAt":"2022-07-09T16:40:20.000Z","updatedAt":"2022-07-09T16:40:20.000Z","tags":[{"id":586,"name":"selenium-webdriver","slug":"selenium-webdriver","createdAt":"2022-07-09T16:40:20.000Z","updatedAt":"2022-07-09T16:40:20.000Z","Questions_Tags":{"questionId":160,"tagId":586}},{"id":587,"name":"webdriverwait","slug":"webdriverwait","createdAt":"2022-07-09T16:40:20.000Z","updatedAt":"2022-07-09T16:40:20.000Z","Questions_Tags":{"questionId":160,"tagId":587}},{"id":588,"name":"expected-condition","slug":"expected-condition","createdAt":"2022-07-09T16:40:20.000Z","updatedAt":"2022-07-09T16:40:20.000Z","Questions_Tags":{"questionId":160,"tagId":588}}]},{"id":159,"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490","postType":"QUESTION","createdAt":"2022-07-09T16:40:17.000Z","updatedAt":"2022-07-09T16:40:17.000Z","tags":[{"id":580,"name":"unicode","slug":"unicode","createdAt":"2022-07-09T16:40:17.000Z","updatedAt":"2022-07-09T16:40:17.000Z","Questions_Tags":{"questionId":159,"tagId":580}},{"id":582,"name":"character-encoding","slug":"character-encoding","createdAt":"2022-07-09T16:40:17.000Z","updatedAt":"2022-07-09T16:40:17.000Z","Questions_Tags":{"questionId":159,"tagId":582}},{"id":583,"name":"mariadb","slug":"mariadb","createdAt":"2022-07-09T16:40:17.000Z","updatedAt":"2022-07-09T16:40:17.000Z","Questions_Tags":{"questionId":159,"tagId":583}}]},{"id":158,"title":"How can I upload files asynchronously with jQuery?","slug":"how-can-i-upload-files-asynchronously-with-jquery-1657384815389","postType":"QUESTION","createdAt":"2022-07-09T16:40:15.000Z","updatedAt":"2022-07-09T16:40:15.000Z","tags":[{"id":578,"name":"xmlhttprequest","slug":"xmlhttprequest","createdAt":"2022-07-09T16:40:15.000Z","updatedAt":"2022-07-09T16:40:15.000Z","Questions_Tags":{"questionId":158,"tagId":578}}]},{"id":157,"title":"Select first row in each GROUP BY group?","slug":"select-first-row-in-each-group-by-group-1657384809388","postType":"QUESTION","createdAt":"2022-07-09T16:40:09.000Z","updatedAt":"2022-07-09T16:40:09.000Z","tags":[{"id":570,"name":"sqlite","slug":"sqlite","createdAt":"2022-07-09T16:40:09.000Z","updatedAt":"2022-07-09T16:40:09.000Z","Questions_Tags":{"questionId":157,"tagId":570}},{"id":571,"name":"postgresql","slug":"postgresql","createdAt":"2022-07-09T16:40:09.000Z","updatedAt":"2022-07-09T16:40:09.000Z","Questions_Tags":{"questionId":157,"tagId":571}}]},{"id":156,"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129","postType":"QUESTION","createdAt":"2022-07-09T16:40:06.000Z","updatedAt":"2022-07-09T16:40:06.000Z","tags":[]}]},"answers":{"156":["\n&lt;p&gt;I use this to split string by a delimiter. The first puts the results in a pre-constructed vector, the second returns a new vector.&lt;/p&gt;\n\n\n\n&lt;pre class=&quot;lang-c++ s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\ntemplate &amp;lt;typename Out&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &amp;amp;s, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim, Out result)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;istringstream&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; item;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::getline(iss, item, delim)) {\n        *result++ = item;\n    }\n}\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; &amp;amp;s, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; elems;\n    split(s, delim, &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::back_inserter(elems));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; elems;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Note that this solution does not skip empty tokens, so the following will find 4 items, one of which is empty:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c++ s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; x = split(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one:two::three&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For what it&apos;s worth, here&apos;s another way to extract tokens from an input string, relying only on standard library facilities. It&apos;s an example of the power and elegance behind the design of the STL.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n    string sentence = &lt;span class=&quot;hljs-string&quot;&gt;&quot;And I feel fine...&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(sentence)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(iss),\n         &lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(),\n         &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Instead of copying the extracted tokens to an output stream, one could insert them into a container, using the same generic &lt;a href=&quot;https://en.cppreference.com/w/cpp/algorithm/copy&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; algorithm.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;vector&amp;lt;string&amp;gt; tokens;\n&lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(iss),\n     &lt;span class=&quot;hljs-built_in&quot;&gt;istream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(),\n     &lt;span class=&quot;hljs-built_in&quot;&gt;back_inserter&lt;/span&gt;(tokens));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... or create the &lt;code&gt;vector&lt;/code&gt; directly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;vector&amp;lt;string&amp;gt; tokens{istream_iterator&amp;lt;string&amp;gt;{iss},\n                      istream_iterator&amp;lt;string&amp;gt;{}};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A possible solution using Boost might be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\nstd::vector&amp;lt;std::string&amp;gt; strs;\nboost::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(strs, &lt;span class=&quot;hljs-string&quot;&gt;&quot;string to split&quot;&lt;/span&gt;, boost::&lt;span class=&quot;hljs-built_in&quot;&gt;is_any_of&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t &quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach might be even faster than the &lt;code&gt;stringstream&lt;/code&gt; approach. And since this is a generic template function it can be used to split other types of strings (wchar, etc. or UTF-8) using all kinds of delimiters.&lt;/p&gt;\n\n&lt;p&gt;See the &lt;a href=&quot;http://www.boost.org/doc/libs/1_36_0/doc/html/string_algo/usage.html&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Split me by whitespaces&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    std::string buf;                 &lt;span class=&quot;hljs-comment&quot;&gt;// Have a buffer string&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;std::stringstream &lt;span class=&quot;hljs-title&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(str)&lt;/span&gt;&lt;/span&gt;;       &lt;span class=&quot;hljs-comment&quot;&gt;// Insert the string into a stream&lt;/span&gt;\n\n    std::vector&amp;lt;std::string&amp;gt; tokens; &lt;span class=&quot;hljs-comment&quot;&gt;// Create vector to hold our words&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (ss &amp;gt;&amp;gt; buf)\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(buf);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For those with whom it does not sit well to sacrifice all efficiency for code size and see &quot;efficient&quot; as a type of elegance, the following should hit a sweet spot (and I think the template container class is an awesomely elegant addition.):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ContainerT&lt;/span&gt; &amp;gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; str, ContainerT&amp;amp; tokens,\n              &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; delimiters = &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; trimEmpty = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n   std::string::size_type pos, lastPos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, length = str.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;();\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; value_type = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ContainerT::value_type;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; size_type  = &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; ContainerT::size_type;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(lastPos &amp;lt; length + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n   {\n      pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, lastPos);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos == std::string::npos)\n      {\n         pos = length;\n      }\n\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos != lastPos || !trimEmpty)\n         tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;value_type&lt;/span&gt;(str.&lt;span class=&quot;hljs-built_in&quot;&gt;data&lt;/span&gt;()+lastPos,\n               (size_type)pos-lastPos ));\n\n      lastPos = pos + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I usually choose to use &lt;code&gt;std::vector&amp;lt;std::string&amp;gt;&lt;/code&gt; types as my second parameter (&lt;code&gt;ContainerT&lt;/code&gt;)... but &lt;code&gt;list&amp;lt;&amp;gt;&lt;/code&gt; is way faster than &lt;code&gt;vector&amp;lt;&amp;gt;&lt;/code&gt; for when direct access is not needed, and you can even create your own string class and use something like &lt;code&gt;std::list&amp;lt;subString&amp;gt;&lt;/code&gt; where &lt;code&gt;subString&lt;/code&gt; does not do any copies for incredible speed increases.&lt;/p&gt;\n\n&lt;p&gt;It&apos;s more than double as fast as the fastest tokenize on this page and almost 5 times faster than some others. Also with the perfect parameter types you can eliminate all string and list copies for additional speed increases.&lt;/p&gt;\n\n&lt;p&gt;Additionally it does not do the (extremely inefficient) return of result, but rather it passes the tokens as a reference, thus also allowing you to build up tokens using multiple calls if you so wished.&lt;/p&gt;\n\n&lt;p&gt;Lastly it allows you to specify whether to trim empty tokens from the results via a last optional parameter.&lt;/p&gt;\n\n&lt;p&gt;All it needs is &lt;code&gt;std::string&lt;/code&gt;... the rest are optional. It does not use streams or the boost library, but is flexible enough to be able to accept some of these foreign types naturally.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another solution. It&apos;s compact and reasonably efficient:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;text, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sep)&lt;/span&gt; &lt;/span&gt;{\n  std::vector&amp;lt;std::string&amp;gt; tokens;\n  std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, end = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((end = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(sep, start)) != std::string::npos) {\n    tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start, end - start));\n    start = end + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  }\n  tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start));\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tokens;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It can easily be templatised to handle string separators, wide strings, etc.&lt;/p&gt;\n\n&lt;p&gt;Note that splitting &lt;code&gt;&quot;&quot;&lt;/code&gt; results in a single empty string and splitting &lt;code&gt;&quot;,&quot;&lt;/code&gt; (ie. sep) results in two empty strings.&lt;/p&gt;\n\n&lt;p&gt;It can also be easily expanded to skip empty tokens:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string &amp;amp;text, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sep)&lt;/span&gt; &lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt; tokens;\n    std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, end = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((end = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(sep, start)) != std::string::npos) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (end != start) {\n          tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start, end - start));\n        }\n        start = end + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (end != start) {\n       tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start));\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tokens;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;If splitting a string at multiple delimiters while skipping empty tokens is desired, this version may be used:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;std::string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; text, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; delims)&lt;/span&gt;\n&lt;/span&gt;{\n    std::vector&amp;lt;std::string&amp;gt; tokens;\n    std::&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; start = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delims), end = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;((end = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delims, start)) != std::string::npos)\n    {\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start, end - start));\n        start = text.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delims, end);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(start != std::string::npos)\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(text.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(start));\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; tokens;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is my favorite way to iterate through a string. You can do whatever you want per word.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;string line = &lt;span class=&quot;hljs-string&quot;&gt;&quot;a line of text to iterate through&quot;&lt;/span&gt;;\nstring word;\n\n&lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line, istringstream::in)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( iss &amp;gt;&amp;gt; word )     \n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do something on `word` here...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is similar to Stack&amp;nbsp;Overflow question &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/53849/how-do-i-tokenize-a-string-in-c&quot;&gt;How do I tokenize a string in C++?&lt;/a&gt;&lt;/em&gt;. &lt;strong&gt;Requires Boost external library&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/tokenizer.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;\n&lt;/span&gt;{\n    string text = &lt;span class=&quot;hljs-string&quot;&gt;&quot;token  test\\tstring&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;char_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    tokenizer&amp;lt;char_separator&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;tokens&lt;/span&gt;(text, sep);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; t : tokens)\n    {\n        cout &amp;lt;&amp;lt; t &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like the following because it puts the results into a vector, supports a string as a delim and gives control over keeping empty values. But, it doesn&apos;t look as good then.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; s, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; delim, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; keep_empty = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; result;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (delim.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;()) {\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(s);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n    }\n    string::const_iterator substart = s.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), subend;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n        subend = &lt;span class=&quot;hljs-built_in&quot;&gt;search&lt;/span&gt;(substart, s.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), delim.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), delim.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;());\n        &lt;span class=&quot;hljs-function&quot;&gt;string &lt;span class=&quot;hljs-title&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(substart, subend)&lt;/span&gt;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keep_empty || !temp.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;()) {\n            result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (subend == s.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n        substart = subend + delim.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; vector&amp;lt;string&amp;gt; words = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;So close no matter how far&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;copy&lt;/span&gt;(words.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), words.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, Boost has a &lt;a href=&quot;http://www.boost.org/doc/libs/1_36_0/doc/html/string_algo/usage.html#id3483755&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; that works partially like that. And, if by &apos;white-space&apos;, you really do mean any type of white-space, using Boost&apos;s split with &lt;code&gt;is_any_of()&lt;/code&gt; works great.&lt;/p&gt;\n    ","\n&lt;p&gt;The STL does not have such a method available already.&lt;/p&gt;\n\n&lt;p&gt;However, you can either use C&apos;s &lt;a href=&quot;http://en.cppreference.com/w/c/string/byte/strtok&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strtok()&lt;/code&gt;&lt;/a&gt; function by using the &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/c_str&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::string::c_str()&lt;/code&gt;&lt;/a&gt; member, or you can write your own. Here is a code sample I found after a quick Google search (&lt;strong&gt;&quot;STL string split&quot;&lt;/strong&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; str,\n              vector&amp;lt;string&amp;gt;&amp;amp; tokens,\n              &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string&amp;amp; delimiters = &lt;span class=&quot;hljs-string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters at beginning.&lt;/span&gt;\n    string::size_type lastPos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiters, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find first &quot;non-delimiter&quot;.&lt;/span&gt;\n    string::size_type pos     = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, lastPos);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (string::npos != pos || string::npos != lastPos)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Found a token, add it to the vector.&lt;/span&gt;\n        tokens.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(str.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(lastPos, pos - lastPos));\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Skip delimiters.  Note the &quot;not_of&quot;&lt;/span&gt;\n        lastPos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_not_of&lt;/span&gt;(delimiters, pos);\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Find next &quot;non-delimiter&quot;&lt;/span&gt;\n        pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, lastPos);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Taken from: &lt;a href=&quot;http://oopweb.com/CPP/Documents/CPPHOWTO/Volume/C++Programming-HOWTO-7.html&quot; rel=&quot;noreferrer&quot;&gt;http://oopweb.com/CPP/Documents/CPPHOWTO/Volume/C++Programming-HOWTO-7.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you have questions about the code sample, leave a comment and I will explain.&lt;/p&gt;\n\n&lt;p&gt;And just because it does not implement a &lt;code&gt;typedef&lt;/code&gt; called iterator or overload the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator does not mean it is bad code. I use C functions quite frequently. For example, &lt;a href=&quot;http://en.cppreference.com/w/c/io/fprintf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/c/io/fscanf&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;scanf&lt;/code&gt;&lt;/a&gt; both are faster than &lt;a href=&quot;http://en.cppreference.com/w/cpp/io/cin&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::cin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/io/cout&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::cout&lt;/code&gt;&lt;/a&gt; (significantly), the &lt;a href=&quot;http://en.cppreference.com/w/c/io/fopen&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;fopen&lt;/code&gt;&lt;/a&gt; syntax is a lot more friendly for binary types, and they also tend to produce smaller EXEs.&lt;/p&gt;\n\n&lt;p&gt;Don&apos;t get sold on this &lt;strong&gt;&quot;Elegance over performance&quot;&lt;/strong&gt; deal.&lt;/p&gt;\n    ","\n&lt;p&gt;Here is a split function that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;is generic&lt;/li&gt;\n&lt;li&gt;uses standard C++ (no boost)&lt;/li&gt;\n&lt;li&gt;accepts multiple delimiters&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ignores empty tokens (can easily be changed)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;\nvector&amp;lt;T&amp;gt; \n&lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T &amp;amp; str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; T &amp;amp; delimiters)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt;T&amp;gt; v;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; T::size_type start = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, start);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(pos != T::npos) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(pos != start) &lt;span class=&quot;hljs-comment&quot;&gt;// ignore empty tokens&lt;/span&gt;\n            v.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(str, start, pos - start);\n        start = pos + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        pos = str.&lt;span class=&quot;hljs-built_in&quot;&gt;find_first_of&lt;/span&gt;(delimiters, start);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(start &amp;lt; str.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;()) &lt;span class=&quot;hljs-comment&quot;&gt;// ignore trailing delimiter&lt;/span&gt;\n        v.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;(str, start, str.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;() - start); &lt;span class=&quot;hljs-comment&quot;&gt;// add what&apos;s left of the string&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;    vector&amp;lt;string&amp;gt; v = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;&amp;lt;string&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello, there; World&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;;,&quot;&lt;/span&gt;);\n    vector&amp;lt;wstring&amp;gt; v = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;&amp;lt;wstring&amp;gt;(&lt;span class=&quot;hljs-string&quot;&gt;L&quot;Hello, there; World&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;L&quot;;,&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have a 2 lines solution to this problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; sep = &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;;\nstd::string s=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 This is an example&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; p=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, q=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; p!=s.npos; p=q)\n  std::cout &amp;lt;&amp;lt; s.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(p+(p!=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (q=s.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(sep, p+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))-p-(p!=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) &amp;lt;&amp;lt; std::endl;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then instead of printing you can put it in a vector.&lt;/p&gt;\n    ","\n&lt;p&gt;Yet another flexible and fast way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; Operator&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Operator&amp;amp; op, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* input, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delimiters)&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* s = input;\n  &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* e = s;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*e != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n    e = s;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*e != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-built_in&quot;&gt;strchr&lt;/span&gt;(delimiters, *e) == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) ++e;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e - s &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-built_in&quot;&gt;op&lt;/span&gt;(s, e - s);\n    }\n    s = e + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To use it with a vector of strings (Edit: Since someone pointed out not to inherit STL classes... hrmf ;) ) :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ContainerType&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Appender&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;Appender&lt;/span&gt;(ContainerType&amp;amp; container) : &lt;span class=&quot;hljs-built_in&quot;&gt;container_&lt;/span&gt;(container) {;}\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* s, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;{ \n    container_.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(std::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;(s,length));\n  }\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n  ContainerType&amp;amp; container_;\n};\n\nstd::vector&amp;lt;std::string&amp;gt; strVector;\n&lt;span class=&quot;hljs-function&quot;&gt;Appender &lt;span class=&quot;hljs-title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(strVector)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;tokenize&lt;/span&gt;(v, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A number of words to be tokenized&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&apos;s it! And that&apos;s just one way to use the tokenizer, like how to just \ncount words:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WordCounter&lt;/span&gt; {\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n  &lt;span class=&quot;hljs-built_in&quot;&gt;WordCounter&lt;/span&gt;() : &lt;span class=&quot;hljs-built_in&quot;&gt;noOfWords&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {}\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{\n    ++noOfWords;\n  }\n  &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; noOfWords;\n};\n\nWordCounter wc;\n&lt;span class=&quot;hljs-built_in&quot;&gt;tokenize&lt;/span&gt;(wc, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A number of words to be counted&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t&quot;&lt;/span&gt;); \n&lt;span class=&quot;hljs-built_in&quot;&gt;ASSERT&lt;/span&gt;( wc.noOfWords == &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Limited by imagination ;)&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s a simple solution that uses only the standard regex library&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;regex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;Tokenize&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::regex regex )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n    std::vector&amp;lt;string&amp;gt; result;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;sregex_token_iterator &lt;span class=&quot;hljs-title&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( str.begin(), str.end(), regex, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;\n    sregex_token_iterator reg_end;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; it != reg_end; ++it ) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( !it-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() ) &lt;span class=&quot;hljs-comment&quot;&gt;//token could be empty:check&lt;/span&gt;\n            result.&lt;span class=&quot;hljs-built_in&quot;&gt;emplace_back&lt;/span&gt;( it-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;() );\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The regex argument allows checking for multiple arguments (spaces, commas, etc.)&lt;/p&gt;\n\n&lt;p&gt;I usually only check to split on spaces and commas, so I also have this default function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;std::vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;TokenizeDefault&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; string str )&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;regex &lt;span class=&quot;hljs-title&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;[\\\\s,]+&quot;&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Tokenize&lt;/span&gt;( str, re );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;&quot;[\\\\s,]+&quot;&lt;/code&gt; checks for spaces (&lt;code&gt;\\\\s&lt;/code&gt;) and commas (&lt;code&gt;,&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Note, if you want to split &lt;code&gt;wstring&lt;/code&gt; instead of &lt;code&gt;string&lt;/code&gt;,&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;change all &lt;code&gt;std::regex&lt;/code&gt; to &lt;code&gt;std::wregex&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;change all &lt;code&gt;sregex_token_iterator&lt;/code&gt; to &lt;code&gt;wsregex_token_iterator&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Note, you might also want to take the string argument by reference, depending on your compiler.&lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;std::stringstream&lt;/code&gt; as you have works perfectly fine, and do exactly what you wanted. If you&apos;re just looking for different way of doing things though, you can use &lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/find&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::find()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;http://en.cppreference.com/w/cpp/algorithm/find_first_of&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::find_first_of()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.cppreference.com/w/cpp/string/basic_string/substr&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;std::string::substr()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the road&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    std::string::size_type prev_pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, pos = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( (pos = s.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, pos)) != std::string::npos )\n    {\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( s.substr(prev_pos, pos-prev_pos) )&lt;/span&gt;&lt;/span&gt;;\n\n        std::cout &amp;lt;&amp;lt; substring &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n\n        prev_pos = ++pos;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( s.substr(prev_pos, pos-prev_pos) )&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Last word&lt;/span&gt;\n    std::cout &amp;lt;&amp;lt; substring &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you like to use boost, but want to use a whole string as delimiter (instead of single characters as in most of the previously proposed solutions), you can use the &lt;code&gt;boost_split_iterator&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Example code including convenient template:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;typename&lt;/span&gt; _OutputIterator&amp;gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(\n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; str, \n    &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; delim, \n    _OutputIterator result)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; boost::algorithm;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; split_iterator&amp;lt;std::string::const_iterator&amp;gt; It;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(It iter=&lt;span class=&quot;hljs-built_in&quot;&gt;make_split_iterator&lt;/span&gt;(str, &lt;span class=&quot;hljs-built_in&quot;&gt;first_finder&lt;/span&gt;(delim, &lt;span class=&quot;hljs-built_in&quot;&gt;is_equal&lt;/span&gt;()));\n            iter!=&lt;span class=&quot;hljs-built_in&quot;&gt;It&lt;/span&gt;();\n            ++iter)\n    {\n        *(result++) = boost::&lt;span class=&quot;hljs-built_in&quot;&gt;copy_range&lt;/span&gt;&amp;lt;std::string&amp;gt;(*iter);\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n    vector&amp;lt;string&amp;gt; splitted;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HelloFOOworldFOO!&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;back_inserter&lt;/span&gt;(splitted));\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// or directly to console, for example&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HelloFOOworldFOO!&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;FOO&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ostream_iterator&lt;/span&gt;&amp;lt;string&amp;gt;(cout, &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;));\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Heres a regex solution that only uses the standard regex library.  (I&apos;m a little rusty, so there may be a few syntax errors, but this is at least the general idea)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;regex.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string s)&lt;/span&gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;regex &lt;span class=&quot;hljs-title&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\w+&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//regex matches whole words, (greedy, so no fragment words)&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;regex_iterator&amp;lt;string::iterator&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;rit&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;( s.begin(), s.end(), r )&lt;/span&gt;&lt;/span&gt;;\n    regex_iterator&amp;lt;string::iterator&amp;gt; rend; &lt;span class=&quot;hljs-comment&quot;&gt;//iterators to iterate thru words&lt;/span&gt;\n    vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;result&lt;/span&gt;&amp;lt;regex_iterator&amp;gt;(rit, rend);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;  &lt;span class=&quot;hljs-comment&quot;&gt;//iterates through the matches to fill the vector&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a function named &lt;a href=&quot;http://www.cplusplus.com/reference/clibrary/cstring/strtok/&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strtok&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* str,&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* saveptr;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* token = &lt;span class=&quot;hljs-built_in&quot;&gt;strtok_r&lt;/span&gt;(str,delim,&amp;amp;saveptr);\n\n    vector&amp;lt;string&amp;gt; result;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(token != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    {\n        result.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(token);\n        token = &lt;span class=&quot;hljs-built_in&quot;&gt;strtok_r&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,delim,&amp;amp;saveptr);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://www.cplusplus.com/reference/sstream/stringstream/&quot; rel=&quot;noreferrer&quot;&gt;stringstream&lt;/a&gt; can be convenient if you need to parse the string by non-space symbols:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;string s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Name:JAck; Spouse:Susan; ...&quot;&lt;/span&gt;;\nstring dummy, name, spouse;\n\n&lt;span class=&quot;hljs-function&quot;&gt;istringstream &lt;span class=&quot;hljs-title&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;;\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, dummy, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, name, &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, dummy, &lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-built_in&quot;&gt;getline&lt;/span&gt;(iss, spouse, &lt;span class=&quot;hljs-string&quot;&gt;&apos;;&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;code&gt;std::string_view&lt;/code&gt; and Eric Niebler&apos;s &lt;code&gt;range-v3&lt;/code&gt; library:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://wandbox.org/permlink/kW5lwRCL1pxjp2pW&quot; rel=&quot;noreferrer&quot;&gt;https://wandbox.org/permlink/kW5lwRCL1pxjp2pW&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;range/v3/view.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;range/v3/algorithm.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    std::string s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the range v3 library&quot;&lt;/span&gt;;\n    ranges::for_each(s  \n        |   ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n        |   ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;transform&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;sub) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;string_view&lt;/span&gt;(&amp;amp;*sub.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), ranges::&lt;span class=&quot;hljs-built_in&quot;&gt;distance&lt;/span&gt;(sub));\n            }),\n        [](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; s) {std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Substring: &quot;&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;}\n    );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By using a range &lt;code&gt;for&lt;/code&gt; loop instead of &lt;code&gt;ranges::for_each&lt;/code&gt; algorithm:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;range/v3/view.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    std::string str = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the range v3 library&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; s : str | ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n                      | ranges::view::&lt;span class=&quot;hljs-built_in&quot;&gt;transform&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt;&amp;amp;&amp;amp; sub) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; std::&lt;span class=&quot;hljs-built_in&quot;&gt;string_view&lt;/span&gt;(&amp;amp;*sub.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(), ranges::&lt;span class=&quot;hljs-built_in&quot;&gt;distance&lt;/span&gt;(sub)); }\n                      ))\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Substring: &quot;&lt;/span&gt; &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;C++20 finally blesses us with a &lt;code&gt;split&lt;/code&gt; function. Or rather, a range adapter. &lt;a href=&quot;https://godbolt.org/z/6mZ8hG&quot; rel=&quot;noreferrer&quot;&gt;Godbolt link&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; ranges = std::ranges;\n&lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; views = std::views;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; str = std::string_view;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; view =\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Multiple words&quot;&lt;/span&gt;\n    | views::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;)\n    | views::&lt;span class=&quot;hljs-built_in&quot;&gt;transform&lt;/span&gt;([](&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;&amp;amp;r) -&amp;gt; str {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; {\n            &amp;amp;*r.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(),\n            &lt;span class=&quot;hljs-built_in&quot;&gt;static_cast&lt;/span&gt;&amp;lt;str::size_type&amp;gt;(ranges::&lt;span class=&quot;hljs-built_in&quot;&gt;distance&lt;/span&gt;(r))\n        };\n    });\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (str &amp;amp;&amp;amp;sv : view) {\n        std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;So far I used the one in &lt;a href=&quot;http://en.wikipedia.org/wiki/Boost_C++_Libraries&quot; rel=&quot;noreferrer&quot;&gt;Boost&lt;/a&gt;, but I needed something that doesn&apos;t depends on it, so I came to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(std::vector&amp;lt;std::string&amp;gt;&amp;amp; lst, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; input, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::string&amp;amp; separators, &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; remove_empty = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    std::ostringstream word;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; n &amp;lt; input.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++n)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (std::string::npos == separators.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(input[n]))\n            word &amp;lt;&amp;lt; input[n];\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() || !remove_empty)\n                lst.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;());\n            word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;().&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;() || !remove_empty)\n        lst.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word.&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A good point is that in &lt;code&gt;separators&lt;/code&gt; you can pass more than one character.&lt;/p&gt;\n    ","\n&lt;p&gt;Short and elegant&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string data, string token)&lt;/span&gt;\n&lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; output;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; pos = string::npos; &lt;span class=&quot;hljs-comment&quot;&gt;// size_t to avoid improbable overflow&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n    {\n        pos = data.&lt;span class=&quot;hljs-built_in&quot;&gt;find&lt;/span&gt;(token);\n        output.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(data.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, pos));\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (string::npos != pos)\n            data = data.&lt;span class=&quot;hljs-built_in&quot;&gt;substr&lt;/span&gt;(pos + token.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;());\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (string::npos != pos);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; output;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;can use any string as delimiter, also can be used with binary data (std::string supports binary data, including nulls)&lt;/p&gt;\n\n&lt;p&gt;using:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;auto&lt;/span&gt; a = &lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;this!!is!!!example!string&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;!!&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;\nis\n!example!string\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I&apos;ve rolled my own using strtok and used boost to split a string.  The best method I have found is the &lt;a href=&quot;http://www.partow.net/programming/strtk/&quot;&gt;C++ String Toolkit Library&lt;/a&gt;.  It is incredibly flexible and fast.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;strtk.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *whitespace  = &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t\\r\\n\\f&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *whitespace_and_punctuation  = &lt;span class=&quot;hljs-string&quot;&gt;&quot; \\t\\r\\n\\f;,=&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    {   &lt;span class=&quot;hljs-comment&quot;&gt;// normal parsing of a string into a vector of strings&lt;/span&gt;\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Somewhere down the road&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        std::vector&amp;lt;std::string&amp;gt; result;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( strtk::&lt;span class=&quot;hljs-built_in&quot;&gt;parse&lt;/span&gt;( s, whitespace, result ) )\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; result.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i )\n                std::cout &amp;lt;&amp;lt; result[i] &amp;lt;&amp;lt; std::endl;\n        }\n    }\n\n    {  &lt;span class=&quot;hljs-comment&quot;&gt;// parsing a string into a vector of floats with other separators&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// besides spaces&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;3.0, 3.14; 4.0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        std::vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt;&amp;gt; values;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( strtk::&lt;span class=&quot;hljs-built_in&quot;&gt;parse&lt;/span&gt;( s, whitespace_and_punctuation, values ) )\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; values.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); ++i )\n                std::cout &amp;lt;&amp;lt; values[i] &amp;lt;&amp;lt; std::endl;\n        }\n    }\n\n    {  &lt;span class=&quot;hljs-comment&quot;&gt;// parsing a string into specific variables&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;angle = 45; radius = 9.9&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n        std::string w1, w2;\n        &lt;span class=&quot;hljs-type&quot;&gt;float&lt;/span&gt; v1, v2;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( strtk::&lt;span class=&quot;hljs-built_in&quot;&gt;parse&lt;/span&gt;( s, whitespace_and_punctuation, w1, v1, w2, v2) )\n        {\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;word &quot;&lt;/span&gt; &amp;lt;&amp;lt; w1 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, value &quot;&lt;/span&gt; &amp;lt;&amp;lt; v1 &amp;lt;&amp;lt; std::endl;\n            std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;word &quot;&lt;/span&gt; &amp;lt;&amp;lt; w2 &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;, value &quot;&lt;/span&gt; &amp;lt;&amp;lt; v2 &amp;lt;&amp;lt; std::endl;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The toolkit has much more flexibility than this simple example shows but its utility in parsing a string into useful elements is incredible.&lt;/p&gt;\n    ","\n&lt;p&gt;I made this because I needed an easy way to split strings and c-based strings... Hopefully someone else can find it useful as well. Also it doesn&apos;t rely on tokens and you can use fields as delimiters, which is another key I needed.&lt;/p&gt;\n\n&lt;p&gt;I&apos;m sure there&apos;s improvements that can be made to even further improve its elegance and please do by all means&lt;/p&gt;\n\n&lt;p&gt;StringSplitter.hpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StringSplit&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;match_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string_contains&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;calc_string_size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;copy_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* String;\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; do_string;\n    &lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; keep_empty;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; Container;\n    vector&amp;lt;string&amp;gt; ContainerS;\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;StringSplit&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * in)\n    {\n        String = in;\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;StringSplit&lt;/span&gt;(string in)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;((&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n        String = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[len + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;memset&lt;/span&gt;(String, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy_string&lt;/span&gt;(String, (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)in.&lt;span class=&quot;hljs-built_in&quot;&gt;c_str&lt;/span&gt;());\n        do_string = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    ~&lt;span class=&quot;hljs-built_in&quot;&gt;StringSplit&lt;/span&gt;()\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Container.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Container[i] != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] Container[i];\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (do_string)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n        }\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;StringSplitter.cpp:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;StringSplit.hpp&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; until = &lt;span class=&quot;hljs-built_in&quot;&gt;untilnextdelim&lt;/span&gt;(src, delim);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (until &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;memset&lt;/span&gt;(temp, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy_fragment&lt;/span&gt;(temp, src, delim);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keep_empty || *temp != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!do_string)\n            {\n                Container.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                string x = temp;\n                ContainerS.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(x);\n            }\n\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] temp;\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::assimilate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; until = &lt;span class=&quot;hljs-built_in&quot;&gt;untilnextdelim&lt;/span&gt;(src, delim);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (until &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * temp = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;memset&lt;/span&gt;(temp, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, until + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;copy_fragment&lt;/span&gt;(temp, src, delim);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (keep_empty || *temp != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!do_string)\n            {\n                Container.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(temp);\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                string x = temp;\n                ContainerS.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(x);\n            }\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] temp;\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::calc_string_size&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _in)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*_in++)\n    {\n        i++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; i;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::string_contains&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* haystack, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* needle)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(needle);\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; lenh = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(haystack);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (lenh--)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(haystack + lenh, needle, len))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::match_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* cmp, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (len--)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*(_src + len) != *(cmp + len))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _in, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(_in);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*_in == delim)\n    {\n        _in += &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; len - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*(_in + c) != delim &amp;amp;&amp;amp; c &amp;lt; len)\n    {\n        c++;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::untilnextdelim&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* _in, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(delim);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + s;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;string_contains&lt;/span&gt;(_in, delim))\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(_in);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(_in, delim, s))\n    {\n        _in += s;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(_in);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(_in + c, delim, s))\n    {\n        c++;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* dest, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*src == delim)\n    {\n        src++;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*(src + c) != delim &amp;amp;&amp;amp; *(src + c))\n    {\n        *(dest + c) = *(src + c);\n        c++;\n    }\n    *(dest + c) = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::copy_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* dest, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* src)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*(src + i))\n    {\n        *(dest + i) = *(src + i);\n        i++;\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::copy_fragment&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* dest, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* src, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* delim)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(delim);\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; lens = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(src);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(src, delim, len))\n    {\n        src += len;\n        lens -= len;\n    }\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(src + c, delim, len) &amp;amp;&amp;amp; (c &amp;lt; lens))\n    {\n        *(dest + c) = *(src + c);\n        c++;\n    }\n    *(dest + c) = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String != Delimiter &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String == Delimiter)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Container;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    do_string = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String != Delimiter &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*String == Delimiter)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ContainerS;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_cstr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; LenDelim = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(Delimiter);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim) &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String,Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Container;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;StringSplit::split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* Delimiter)&lt;/span&gt;\n&lt;/span&gt;{\n    do_string = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; LenDelim = &lt;span class=&quot;hljs-built_in&quot;&gt;calc_string_size&lt;/span&gt;(Delimiter);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (*String)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim) &amp;amp;&amp;amp; i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;match_fragment&lt;/span&gt;(String, Delimiter, LenDelim))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;assimilate&lt;/span&gt;(String, Delimiter);\n        }\n        i++;\n        String++;\n    }\n\n    String -= i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;delete&lt;/span&gt;[] String;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ContainerS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    StringSplit ss = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This:CUT:is:CUT:an:CUT:example:CUT:cstring&quot;&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_cstr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:CUT:&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will output:&lt;/p&gt;\n\n&lt;p&gt;This&lt;br&gt;\nis&lt;br&gt;\nan&lt;br&gt;\nexample&lt;br&gt;\ncstring&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    StringSplit ss = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This:is:an:example:cstring&quot;&lt;/span&gt;;\n    vector&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_cstr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    string mystring = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This[SPLIT]is[SPLIT]an[SPLIT]example[SPLIT]string&quot;&lt;/span&gt;;\n    StringSplit ss = mystring;\n    vector&amp;lt;string&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;[SPLIT]&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*argv[])&lt;/span&gt;\n&lt;/span&gt;{\n    string mystring = &lt;span class=&quot;hljs-string&quot;&gt;&quot;This|is|an|example|string&quot;&lt;/span&gt;;\n    StringSplit ss = mystring;\n    vector&amp;lt;string&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;|&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Split.&lt;span class=&quot;hljs-built_in&quot;&gt;size&lt;/span&gt;(); i++)\n    {\n        cout &amp;lt;&amp;lt; Split[i] &amp;lt;&amp;lt; endl;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To keep empty entries (by default empties will be excluded):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;StringSplit ss = mystring;\nss.keep_empty = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\nvector&amp;lt;string&amp;gt; Split = ss.&lt;span class=&quot;hljs-built_in&quot;&gt;split_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:DELIM:&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The goal was to make it similar to C#&apos;s Split() method where splitting a string is as easy as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;String[] Split = \n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hey:cut:what&apos;s:cut:your:cut:name?&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;Split&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;:cut:&quot;&lt;/span&gt;}, StringSplitOptions.None);\n\nforeach(String X in Split)\n{\n    Console.&lt;span class=&quot;hljs-built_in&quot;&gt;Write&lt;/span&gt;(X);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I hope someone else can find this as useful as I do.&lt;/p&gt;\n    ","\n&lt;p&gt;This answer takes the string and puts it into a vector of strings. It uses the boost library.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/algorithm/string.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\nstd::vector&amp;lt;std::string&amp;gt; strs;\nboost::&lt;span class=&quot;hljs-built_in&quot;&gt;split&lt;/span&gt;(strs, &lt;span class=&quot;hljs-string&quot;&gt;&quot;string to split&quot;&lt;/span&gt;, boost::&lt;span class=&quot;hljs-built_in&quot;&gt;is_any_of&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\t &quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;What about this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n\n&lt;span class=&quot;hljs-function&quot;&gt;vector&amp;lt;string&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string str, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; delim)&lt;/span&gt; &lt;/span&gt;{\n    vector&amp;lt;string&amp;gt; v;\n    string tmp;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(string::const_iterator i; i = str.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(); i &amp;lt;= str.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(); ++i) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(*i != delim &amp;amp;&amp;amp; i != str.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;()) {\n            tmp += *i; \n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            v.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(tmp);\n            tmp = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;; \n        }   \n    }   \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; v;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s another way of doing it..&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;split_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(string text,vector&amp;lt;string&amp;gt;&amp;amp; words)&lt;/span&gt;\n&lt;/span&gt;{\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; ch;\n  string word;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(ch=text[i++])\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;isspace&lt;/span&gt;(ch))\n    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n      {\n        words.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word);\n      }\n      word = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n      word += ch;\n    }\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!word.&lt;span class=&quot;hljs-built_in&quot;&gt;empty&lt;/span&gt;())\n  {\n    words.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(word);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I like to use the boost/regex methods for this task since they provide maximum flexibility for specifying the splitting criteria.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/regex.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{\n    &lt;span class=&quot;hljs-function&quot;&gt;std::string &lt;span class=&quot;hljs-title&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A:::line::to:split&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; boost::regex &lt;span class=&quot;hljs-title&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:+&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// one or more colons&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// -1 means find inverse matches aka split&lt;/span&gt;\n    &lt;span class=&quot;hljs-function&quot;&gt;boost::sregex_token_iterator &lt;span class=&quot;hljs-title&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(line.begin(),line.end(),re,&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;\n    boost::sregex_token_iterator end;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; tokens != end; ++tokens)\n        std::cout &amp;lt;&amp;lt; *tokens &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Recently I had to split a camel-cased word into subwords.  There are no delimiters, just upper characters. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;locale&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// std::isupper&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; String&amp;gt;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::list&amp;lt;String&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;split_camel_case_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; String &amp;amp;s)&lt;/span&gt;\n&lt;/span&gt;{\n    std::list&amp;lt;String&amp;gt; R;\n    String w;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String::const_iterator i = s.&lt;span class=&quot;hljs-built_in&quot;&gt;begin&lt;/span&gt;(); i &amp;lt; s.&lt;span class=&quot;hljs-built_in&quot;&gt;end&lt;/span&gt;(); ++i) {  {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (std::&lt;span class=&quot;hljs-built_in&quot;&gt;isupper&lt;/span&gt;(*i)) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (w.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;()) {\n                R.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(w);\n                w.&lt;span class=&quot;hljs-built_in&quot;&gt;clear&lt;/span&gt;();\n            }\n        }\n        w += *i;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (w.&lt;span class=&quot;hljs-built_in&quot;&gt;length&lt;/span&gt;())\n        R.&lt;span class=&quot;hljs-built_in&quot;&gt;push_back&lt;/span&gt;(w);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; R;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, this splits &quot;AQueryTrades&quot; into &quot;A&quot;, &quot;Query&quot; and &quot;Trades&quot;.  The function works with narrow and wide strings. Because it respects the current locale it splits &quot;RaumfahrtÜberwachungsVerordnung&quot; into &quot;Raumfahrt&quot;, &quot;Überwachungs&quot; and &quot;Verordnung&quot;.&lt;/p&gt;\n\n&lt;p&gt;Note &lt;code&gt;std::upper&lt;/code&gt; should be really passed as function template argument. Then the more generalized from of this function can split at delimiters like &lt;code&gt;&quot;,&quot;&lt;/code&gt;, &lt;code&gt;&quot;;&quot;&lt;/code&gt; or &lt;code&gt;&quot; &quot;&lt;/code&gt; too.&lt;/p&gt;\n    "],"157":["\n&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; is typically simplest and fastest for this in &lt;strong&gt;PostgreSQL&lt;/strong&gt;.&lt;br&gt;\n&lt;sub&gt;(For performance optimization for certain workloads see below.)&lt;/sub&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (customer)\n       id, customer, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or shorter (if not as clear) with ordinal numbers of output columns:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n       id, customer, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If &lt;code&gt;total&lt;/code&gt; can be NULL, add &lt;code&gt;NULLS LAST&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;...\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt; NULLS &lt;span class=&quot;hljs-keyword&quot;&gt;LAST&lt;/span&gt;, id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Works either way, but you&apos;ll want to &lt;a href=&quot;https://dba.stackexchange.com/q/254731/3684&quot;&gt;match existing indexes&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=bf589b26f6e9fe8cdf3c6ca6e045eb6d&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;Major points&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt;&lt;/strong&gt; is a PostgreSQL extension of the standard, where only &lt;code&gt;DISTINCT&lt;/code&gt; on the whole &lt;code&gt;SELECT&lt;/code&gt; list is defined.&lt;/p&gt;\n&lt;p&gt;List any number of expressions in the &lt;code&gt;DISTINCT ON&lt;/code&gt; clause, the combined row value defines duplicates. &lt;a href=&quot;https://www.postgresql.org/docs/current/queries-select-lists.html#QUERIES-DISTINCT&quot; rel=&quot;noreferrer&quot;&gt;The manual:&lt;/a&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Obviously, two rows are considered distinct if they differ in at least\none column value. &lt;strong&gt;Null values are considered equal in this\ncomparison.&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Bold emphasis mine.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt; can be combined with &lt;strong&gt;&lt;code&gt;ORDER BY&lt;/code&gt;&lt;/strong&gt;. Leading expressions in &lt;code&gt;ORDER BY&lt;/code&gt; must be in the set of expressions in &lt;code&gt;DISTINCT ON&lt;/code&gt;, but you can rearrange order among those freely. &lt;a href=&quot;https://dba.stackexchange.com/a/89786/3684&quot;&gt;Example.&lt;/a&gt;&lt;br&gt;\nYou can add &lt;em&gt;additional&lt;/em&gt; expressions to &lt;code&gt;ORDER BY&lt;/code&gt; to pick a particular row from each group of peers. Or, as &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT&quot; rel=&quot;noreferrer&quot;&gt;the manual puts it&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The &lt;code&gt;DISTINCT ON&lt;/code&gt; expression(s) must match the leftmost &lt;code&gt;ORDER BY&lt;/code&gt;\nexpression(s). The &lt;code&gt;ORDER BY&lt;/code&gt; clause will normally contain additional\nexpression(s) that determine the desired precedence of rows within\neach &lt;code&gt;DISTINCT ON&lt;/code&gt; group.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;I added &lt;code&gt;id&lt;/code&gt; as last item to break ties:&lt;br&gt;\n&lt;em&gt;&quot;Pick the row with the smallest &lt;code&gt;id&lt;/code&gt; from each group sharing the highest &lt;code&gt;total&lt;/code&gt;.&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;To order results in a way that disagrees with the sort order determining the first per group, you can nest above query in an outer query with another &lt;code&gt;ORDER BY&lt;/code&gt;. &lt;a href=&quot;https://stackoverflow.com/a/9796104/939860&quot;&gt;Example.&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;If &lt;code&gt;total&lt;/code&gt; can be NULL, you &lt;em&gt;most probably&lt;/em&gt; want the row with the greatest non-null value. Add &lt;strong&gt;&lt;code&gt;NULLS LAST&lt;/code&gt;&lt;/strong&gt; like demonstrated. See:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/9510509/postgresql-sort-by-datetime-asc-null-first/9511492#9511492&quot;&gt;Sort by column ASC, but NULL values first?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;The &lt;code&gt;SELECT&lt;/code&gt; list&lt;/strong&gt; is not constrained by expressions in &lt;code&gt;DISTINCT ON&lt;/code&gt; or &lt;code&gt;ORDER BY&lt;/code&gt; in any way:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You &lt;em&gt;don&apos;t have to&lt;/em&gt; include any of the expressions in &lt;code&gt;DISTINCT ON&lt;/code&gt; or &lt;code&gt;ORDER BY&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; include any other expression in the &lt;code&gt;SELECT&lt;/code&gt; list. This is instrumental for replacing complex subqueries and aggregate / window functions.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;I tested with Postgres versions 8.3  15. But the feature has been there at least since version 7.1, so basically always.&lt;/p&gt;\n&lt;h2&gt;Index&lt;/h2&gt;\n&lt;p&gt;The &lt;em&gt;perfect&lt;/em&gt; index for the above query would be a &lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-multicolumn.html&quot; rel=&quot;noreferrer&quot;&gt;multi-column index&lt;/a&gt; spanning all three columns in matching sequence and with matching sort order:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; INDEX purchases_3c_idx &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; purchases (customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;May be too specialized. But use it if read performance for the particular query is crucial. If you have &lt;code&gt;DESC NULLS LAST&lt;/code&gt; in the query, use the same in the index so that sort order matches and the index is perfectly applicable.&lt;/p&gt;\n&lt;h2&gt;Effectiveness / Performance optimization&lt;/h2&gt;\n&lt;p&gt;Weigh cost and benefit before creating tailored indexes for each query. The potential of above index largely depends on &lt;strong&gt;data distribution&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;The index is used because it delivers pre-sorted data. In Postgres 9.2 or later the query can also benefit from an &lt;strong&gt;&lt;a href=&quot;https://www.postgresql.org/docs/current/indexes-index-only-scans.html&quot; rel=&quot;noreferrer&quot;&gt;index only scan&lt;/a&gt;&lt;/strong&gt; if the index is smaller than the underlying table. The index has to be scanned in its entirety, though. &lt;a href=&quot;https://dba.stackexchange.com/a/313755/3684&quot;&gt;Example.&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;For &lt;strong&gt;&lt;em&gt;few&lt;/em&gt; rows per customer&lt;/strong&gt; (high cardinality in column &lt;code&gt;customer&lt;/code&gt;), this is very efficient. Even more so if you need sorted output anyway. The benefit shrinks with a growing number of rows per customer.&lt;br&gt;\nIdeally, you have enough &lt;a href=&quot;https://www.postgresql.org/docs/current/runtime-config-resource.html#GUC-WORK-MEM&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;work_mem&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; to process the involved sort step in RAM and not spill to disk. But generally setting &lt;code&gt;work_mem&lt;/code&gt; &lt;em&gt;too&lt;/em&gt; high can have adverse effects. Consider &lt;code&gt;SET LOCAL&lt;/code&gt; for exceptionally big queries. Find how much you need with &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;. Mention of &quot;&lt;em&gt;Disk:&lt;/em&gt;&quot; in the sort step indicates the need for more:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8106181/configuration-parameter-work-mem-in-postgresql-on-linux/8108807#8108807&quot;&gt;Configuration parameter work_mem in PostgreSQL on Linux&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://dba.stackexchange.com/a/48633/3684&quot;&gt;Optimize simple query using ORDER BY date and text&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For &lt;strong&gt;&lt;em&gt;many&lt;/em&gt; rows per customer&lt;/strong&gt; (low cardinality in column &lt;code&gt;customer&lt;/code&gt;), a &lt;a href=&quot;https://wiki.postgresql.org/wiki/Loose_indexscan&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;loose index scan&lt;/strong&gt;&lt;/a&gt; (a.k.a. &quot;skip scan&quot;) would be (much) more efficient, but that&apos;s not implemented up to Postgres 14. (An implementation for index-only scans is in development for Postgres 15. See &lt;a href=&quot;https://commitfest.postgresql.org/19/1741/&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.postgresql.org/message-id/flat/20200609102247.jdlatmfyeecg52fi%40localhost&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.)&lt;br&gt;\nFor now, there are &lt;strong&gt;faster query techniques&lt;/strong&gt; to substitute for this. In particular if you have a separate table holding unique customers, which is the typical use case. But also if you don&apos;t:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/66893968/select-distinct-is-slower-than-expected-on-my-table-in-postgresql/66894500#66894500&quot;&gt;SELECT DISTINCT is slower than expected on my table in PostgreSQL&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25536422/optimize-group-by-query-to-retrieve-latest-record-per-user/25536748#25536748&quot;&gt;Optimize GROUP BY query to retrieve latest row per user&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24244026/optimize-groupwise-maximum-query/24377356#24377356&quot;&gt;Optimize groupwise maximum query&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25957558/querying-last-n-related-records-in-postgres/25965393#25965393&quot;&gt;Query last N related rows per row&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Benchmarks&lt;/h2&gt;\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/34715134/939860&quot;&gt;See separate answer.&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;On databases that &lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL#Common_table_expression&quot; rel=&quot;noreferrer&quot;&gt;support CTE and windowing functions&lt;/a&gt;:&lt;/h2&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; summary &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; p.id, \n           p.customer, \n           p.total, \n           &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.customer \n                                 &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rank\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES p)\n &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; summary\n &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; rank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Supported by any database:&lt;/h2&gt;\n&lt;p&gt;But you need to add logic to break ties:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MIN&lt;/span&gt;(x.id),  &lt;span class=&quot;hljs-comment&quot;&gt;-- change to MAX if you want the highest&lt;/span&gt;\n         x.customer, \n         x.total\n    &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES x\n    &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; p.customer,\n                 &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; max_total\n            &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES p\n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.customer) y &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; y.customer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x.customer\n                              &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; y.max_total &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; x.total\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; x.customer, x.total\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h1&gt;Benchmarks&lt;/h1&gt;\n&lt;p&gt;I tested the most interesting candidates:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Initially with &lt;strong&gt;Postgres 9.4&lt;/strong&gt; and &lt;strong&gt;9.5&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Added accented tests for &lt;strong&gt;Postgres 13&lt;/strong&gt; later.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Basic test setup&lt;/h3&gt;\n&lt;p&gt;Main table: &lt;code&gt;purchases&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; purchases (\n  id          serial  &lt;span class=&quot;hljs-comment&quot;&gt;-- PK constraint added below&lt;/span&gt;\n, customer_id &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;-- REFERENCES customer&lt;/span&gt;\n, total       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;-- could be amount of money in Cent&lt;/span&gt;\n, some_column text    &lt;span class=&quot;hljs-comment&quot;&gt;-- to make the row bigger, more realistic&lt;/span&gt;\n);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Dummy data (with some dead tuples), PK, index:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; purchases (customer_id, total, some_column)    &lt;span class=&quot;hljs-comment&quot;&gt;-- 200k rows&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- 10k distinct customers&lt;/span&gt;\n     , (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; total     \n     , &lt;span class=&quot;hljs-string&quot;&gt;&apos;note: &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, (random()&lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   generate_series(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;200000&lt;/span&gt;) g;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; purchases_id_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (id);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.9&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;-- some dead rows&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; purchases (customer_id, total, some_column)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- 10k customers&lt;/span&gt;\n     , (random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; total     \n     , &lt;span class=&quot;hljs-string&quot;&gt;&apos;note: &apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; repeat(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, (random()&lt;span class=&quot;hljs-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; random() &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)::&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   generate_series(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;20000&lt;/span&gt;) g;  &lt;span class=&quot;hljs-comment&quot;&gt;-- add 20k to make it ~ 200k&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; INDEX purchases_3c_idx &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; purchases (customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id);\n\nVACUUM ANALYZE purchases;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;customer&lt;/code&gt; table - used for optimized query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; customer_id, &lt;span class=&quot;hljs-string&quot;&gt;&apos;customer_&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;||&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; customer &lt;span class=&quot;hljs-keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CONSTRAINT&lt;/span&gt; customer_customer_id_pkey &lt;span class=&quot;hljs-keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY (customer_id);\n\nVACUUM ANALYZE customer;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In my second test for 9.5 I used the same setup, but with 100000 distinct &lt;code&gt;customer_id&lt;/code&gt; to get &lt;em&gt;few&lt;/em&gt; rows per &lt;code&gt;customer_id&lt;/code&gt;.&lt;/p&gt;\n&lt;h3&gt;Object sizes for table &lt;code&gt;purchases&lt;/code&gt;&lt;/h3&gt;\n&lt;p&gt;Basic setup: 200k rows in &lt;code&gt;purchases&lt;/code&gt;, 10k distinct &lt;code&gt;customer_id&lt;/code&gt;, avg. 20 rows per customer.&lt;br&gt;\nFor Postgres 9.5 I added a 2nd test with 86446 distinct customers - avg. 2.3 rows per customer.&lt;/p&gt;\n&lt;p&gt;Generated with a query taken from here:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://dba.stackexchange.com/a/23933/3684&quot;&gt;Measure the size of a PostgreSQL table row&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Gathered for Postgres 9.5:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;               what                | bytes/ct | bytes_pretty | bytes_per_row\n-----------------------------------+----------+--------------+---------------\n core_relation_size                | 20496384 | 20 MB        |           102\n visibility_map                    |        0 | 0 bytes      |             0\n free_space_map                    |    24576 | 24 kB        |             0\n table_size_incl_toast             | 20529152 | 20 MB        |           102\n indexes_size                      | 10977280 | 10 MB        |            54\n total_size_incl_toast_and_indexes | 31506432 | 30 MB        |           157\n live_rows_in_text_representation  | 13729802 | 13 MB        |            68\n ------------------------------    |          |              |\n row_count                         |   200045 |              |\n live_tuples                       |   200045 |              |\n dead_tuples                       |    19955 |              |\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Queries&lt;/h1&gt;\n&lt;h3&gt;1. &lt;code&gt;row_number()&lt;/code&gt; in CTE, (&lt;a href=&quot;https://stackoverflow.com/a/3800572/939860&quot;&gt;see other answer&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; cte &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n        , &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rn\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   )\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   cte\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;2. &lt;code&gt;row_number()&lt;/code&gt; in subquery (my optimization)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n        , &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; rn\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   ) sub\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  rn &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;3. &lt;code&gt;DISTINCT ON&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/7630564/939860&quot;&gt;see other answer&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; (customer_id)\n       id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;4. rCTE with &lt;code&gt;LATERAL&lt;/code&gt; subquery (&lt;a href=&quot;https://stackoverflow.com/a/25536748/939860&quot;&gt;see here&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;RECURSIVE&lt;/span&gt; cte &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; (\n   (  &lt;span class=&quot;hljs-comment&quot;&gt;-- parentheses required&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   LIMIT  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   )\n   &lt;span class=&quot;hljs-keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ALL&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; u.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   cte c\n   ,      &lt;span class=&quot;hljs-keyword&quot;&gt;LATERAL&lt;/span&gt; (\n      &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n      &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n      &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  customer_id &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; c.customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- lateral reference&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n      LIMIT  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n      ) u\n   )\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   cte\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;5. &lt;code&gt;customer&lt;/code&gt; table with &lt;code&gt;LATERAL&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/25536748/939860&quot;&gt;see here&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; l.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   customer c\n,      &lt;span class=&quot;hljs-keyword&quot;&gt;LATERAL&lt;/span&gt; (\n   &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer_id, total\n   &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n   &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  customer_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; c.customer_id  &lt;span class=&quot;hljs-comment&quot;&gt;-- lateral reference&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;\n   LIMIT  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n   ) l;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;6. &lt;code&gt;array_agg()&lt;/code&gt; with &lt;code&gt;ORDER BY&lt;/code&gt; (&lt;a href=&quot;https://stackoverflow.com/a/25534279/939860&quot;&gt;see other answer&lt;/a&gt;)&lt;/h3&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;array_agg&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; id\n     , customer_id\n     , &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer_id;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Results&lt;/h1&gt;\n&lt;p&gt;Execution time for above queries with &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-explain.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;best of 5 runs&lt;/em&gt; to compare with warm cache.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;All&lt;/em&gt; queries used an &lt;strong&gt;Index Only Scan&lt;/strong&gt; on &lt;code&gt;purchases2_3c_idx&lt;/code&gt; (among other steps). Some only to benefit from the smaller size of the index, others more effectively.&lt;/p&gt;\n&lt;h3&gt;A. Postgres 9.4 with 200k rows and ~ 20 per &lt;code&gt;customer_id&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 273.274 ms  \n2. 194.572 ms  \n3. 111.067 ms  \n4.  92.922 ms  -- !\n5.  37.679 ms  -- winner\n6. 189.495 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;B. Same as A. with Postgres 9.5&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 288.006 ms\n2. 223.032 ms  \n3. 107.074 ms  \n4.  78.032 ms  -- !\n5.  33.944 ms  -- winner\n6. 211.540 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;C. Same as B., but with ~ 2.3 rows per &lt;code&gt;customer_id&lt;/code&gt;&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 381.573 ms\n2. 311.976 ms\n3. 124.074 ms  -- winner\n4. 710.631 ms\n5. 311.976 ms\n6. 421.679 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;Retest with Postgres 13 on 2021-08-11&lt;/h1&gt;\n&lt;p&gt;Simplified test setup: no deleted rows, because &lt;code&gt;VACUUM ANALYZE&lt;/code&gt; cleans the table completely for the simple case.&lt;/p&gt;\n&lt;p&gt;Important changes for Postgres:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;General performance improvements.&lt;/li&gt;\n&lt;li&gt;CTEs can be inlined since Postgres 12, so query 1. and 2. now perform mostly identical (same query plan).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;D. Like B. ~ 20 rows per customer_id&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 103 ms\n2. 103 ms  \n3.  23 ms  -- winner  \n4.  71 ms  \n5.  22 ms  -- winner\n6.  81 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=4cfd751a33e9d0ca3b024cb5795a5f6b&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;E. Like C. ~ 2.3 rows per customer_id&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 127 ms\n2. 126 ms  \n3.  36 ms  -- winner  \n4. 620 ms  \n5. 145 ms\n6. 203 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=e0eda395be68b453f51dc6fba4f3d4a6&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h2&gt;Accented tests with Postgres 13&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;1M rows&lt;/strong&gt;, 10.000 vs. 100 vs. 1.6 rows per customer.&lt;/p&gt;\n&lt;h3&gt;F. with ~ 10.000 rows per customer&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 526 ms\n2. 527 ms  \n3. 127 ms\n4.   2 ms  -- winner !\n5.   1 ms  -- winner !\n6. 356 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=1ded28c4adedd3292ba5e0a8401a641f&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;G. with ~ 100 rows per customer&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1. 535 ms\n2. 529 ms  \n3. 132 ms\n4. 108 ms  -- !\n5.  71 ms  -- winner\n6. 376 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=5f797bb9e694a4f0117ed3c957af1de2&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;H. with ~ 1.6 rows per customer&lt;/h3&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1.  691 ms\n2.  684 ms  \n3.  234 ms  -- winner\n4. 4669 ms\n5. 1089 ms\n6. 1264 ms  \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;em&gt;db&amp;lt;&amp;gt;fiddle &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=6cd53673f04cf3b00a3aeb16fc071926&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h1&gt;Conclusions&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;DISTINCT ON&lt;/code&gt; uses the index effectively and typically performs best for &lt;strong&gt;few&lt;/strong&gt; rows per group. And it performs decently even with many rows per group.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;For &lt;strong&gt;many&lt;/strong&gt; rows per group, emulating an index skip scan with an rCTE performs best - second only to the query technique with a separate lookup table (if that&apos;s available).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;row_number()&lt;/code&gt;&lt;/strong&gt; technique demonstrated in the currently accepted answer &lt;strong&gt;never wins any performance test&lt;/strong&gt;. Not then, not now. It never comes even close to &lt;code&gt;DISTINCT ON&lt;/code&gt;, not even when the data distribution is unfavorable for the latter. The only good thing about &lt;code&gt;row_number()&lt;/code&gt;: it does not scale terribly, just mediocre.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;More benchmarks&lt;/h2&gt;\n&lt;p&gt;Benchmark by &quot;ogr&quot; with &lt;strong&gt;10M rows and 60k unique &quot;customers&quot;&lt;/strong&gt; on &lt;strong&gt;Postgres 11.5&lt;/strong&gt;. Results are in line with what we have seen so far:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/57893251/proper-way-to-access-latest-row-for-each-individual-identifier/57975451#57975451&quot;&gt;Proper way to access latest row for each individual identifier?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;Original (outdated) benchmark from 2011&lt;/h3&gt;\n&lt;p&gt;I ran three tests with PostgreSQL &lt;strong&gt;9.1&lt;/strong&gt; on a real life table of 65579 rows and single-column btree indexes on each of the three columns involved and took the best &lt;em&gt;execution time&lt;/em&gt; of 5 runs.&lt;br&gt;\nComparing &lt;a href=&quot;https://stackoverflow.com/a/3800572/939860&quot;&gt;@OMGPonies&apos;&lt;/a&gt; first query (&lt;strong&gt;&lt;code&gt;A&lt;/code&gt;&lt;/strong&gt;) to the &lt;a href=&quot;https://stackoverflow.com/a/7630564/939860&quot;&gt;above &lt;code&gt;DISTINCT ON&lt;/code&gt; solution&lt;/a&gt; (&lt;strong&gt;&lt;code&gt;B&lt;/code&gt;&lt;/strong&gt;):&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Select the whole table, results in 5958 rows in this case.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;A: 567.218 ms\nB: 386.673 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;Use condition &lt;code&gt;WHERE customer BETWEEN x AND y&lt;/code&gt; resulting in 1000 rows.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;A: 249.136 ms\nB:  55.111 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;Select a single customer with &lt;code&gt;WHERE customer = x&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;A:   0.143 ms\nB:   0.072 ms\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Same test repeated with the index described in the other answer:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; INDEX purchases_3c_idx &lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; purchases (customer, total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;, id);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1A: 277.953 ms  \n1B: 193.547 ms\n\n2A: 249.796 ms -- special index not used  \n2B:  28.679 ms\n\n3A:   0.120 ms  \n3B:   0.048 ms\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is common &lt;a href=&quot;/questions/tagged/greatest-n-per-group&quot; class=&quot;post-tag&quot; title=&quot;show questions tagged &apos;greatest-n-per-group&apos;&quot; rel=&quot;tag&quot;&gt;greatest-n-per-group&lt;/a&gt; problem, which already has well tested and highly &lt;a href=&quot;https://stackoverflow.com/q/8748986/684229&quot;&gt;optimized solutions&lt;/a&gt;. Personally I prefer the &lt;a href=&quot;https://stackoverflow.com/a/8749095/684229&quot;&gt;left join solution by Bill Karwin&lt;/a&gt; (the &lt;a href=&quot;https://stackoverflow.com/a/123481/684229&quot;&gt;original post with lots of other solutions&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;Note that bunch of solutions to this common problem can surprisingly be found in the one of most official sources, &lt;strong&gt;MySQL manual&lt;/strong&gt;! See &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/example-maximum-column-group-row.html&quot; rel=&quot;noreferrer&quot;&gt;Examples of Common Queries :: The Rows Holding the Group-wise Maximum of a Certain Column&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In Postgres you can use &lt;code&gt;array_agg&lt;/code&gt; like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;  customer,\n        (&lt;span class=&quot;hljs-built_in&quot;&gt;array_agg&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;],\n        &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will give you the &lt;code&gt;id&lt;/code&gt; of each customer&apos;s largest purchase.&lt;/p&gt;\n\n&lt;p&gt;Some things to note:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;array_agg&lt;/code&gt; is an aggregate function, so it works with &lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;array_agg&lt;/code&gt; lets you specify an ordering scoped to just itself, so it doesn&apos;t constrain the structure of the whole query. There is also syntax for how you sort NULLs, if you need to do something different from the default.&lt;/li&gt;\n&lt;li&gt;Once we build the array, we take the first element. (Postgres arrays are 1-indexed, not 0-indexed).&lt;/li&gt;\n&lt;li&gt;You could use &lt;code&gt;array_agg&lt;/code&gt; in a similar way for your third output column, but &lt;code&gt;max(total)&lt;/code&gt; is simpler.&lt;/li&gt;\n&lt;li&gt;Unlike &lt;code&gt;DISTINCT ON&lt;/code&gt;, using &lt;code&gt;array_agg&lt;/code&gt; lets you keep your &lt;code&gt;GROUP BY&lt;/code&gt;, in case you want that for other reasons.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The solution is not very efficient as pointed by Erwin, because of presence of SubQs&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchases p1 &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n(&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; p1.customer&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;customer) &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; purchases.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; \n  p.customer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; purchases.customer \n  &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; \n  purchases.total &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; p.total\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;HOW DOES THAT WORK!&lt;/strong&gt; (I&apos;ve been there)&lt;/p&gt;\n&lt;p&gt;We want to make sure that we only have the highest total for each purchase.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Some Theoretical Stuff&lt;/strong&gt; (skip this part if you only want to understand the query)&lt;/p&gt;\n&lt;p&gt;Let Total be a function T(customer,id) where it returns a value given the name and id\nTo prove that the given total (T(customer,id)) is the highest we have to prove that\nWe want to prove either&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;x T(customer,id) &amp;gt; T(customer,x) (this total is higher than all other\ntotal for that customer)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;OR&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;¬x T(customer, id) &amp;lt; T(customer, x)   (there exists no higher total for\nthat customer)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The first approach will need us to get all the records for that name which I do not really like.&lt;/p&gt;\n&lt;p&gt;The second one will need a smart way to say there can be no record higher than this one.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;strong&gt;Back to SQL&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;If we left joins the table on the name and total being less than the joined table:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; p \n&lt;span class=&quot;hljs-keyword&quot;&gt;ON&lt;/span&gt; \np.customer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; purchases.customer \n&lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; \npurchases.total &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt; p.total\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;we make sure that all records that have another record with the higher total for the same user to be joined:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+---------------------+-----------------+------+------------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;  purchases.customer &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.customer &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+---------------------+-----------------+------+------------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob                 &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice               &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice               &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+---------------------+-----------------+------+------------+---------+&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;That will help us filter for the highest total for each purchase with no grouping needed:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;\n    \n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+----------------+-----------------+------+--------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.name &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; purchases.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.id &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.name &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; p.total &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+----------------+-----------------+------+--------+---------+&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Tom            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Bob            &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;            &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt; Alice          &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;             &lt;span class=&quot;hljs-number&quot;&gt;700&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;hljs-operator&quot;&gt;|&lt;/span&gt;\n&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;--------------+----------------+-----------------+------+--------+---------+&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And that&apos;s the answer we need.&lt;/p&gt;\n    ","\n&lt;p&gt;I use this way (postgresql only): &lt;a href=&quot;https://wiki.postgresql.org/wiki/First/last_%28aggregate%29&quot;&gt;https://wiki.postgresql.org/wiki/First/last_%28aggregate%29&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a function that always returns the first non-NULL item&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; REPLACE &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; public.first_agg ( anyelement, anyelement )\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; anyelement &lt;span class=&quot;hljs-keyword&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; IMMUTABLE STRICT &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; $$\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; $&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n$$;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- And then wrap an aggregate around it&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; AGGREGATE public.first (\n        sfunc    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; public.first_agg,\n        basetype &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement,\n        stype    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement\n);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- Create a function that always returns the last non-NULL item&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; REPLACE &lt;span class=&quot;hljs-keyword&quot;&gt;FUNCTION&lt;/span&gt; public.last_agg ( anyelement, anyelement )\n&lt;span class=&quot;hljs-keyword&quot;&gt;RETURNS&lt;/span&gt; anyelement &lt;span class=&quot;hljs-keyword&quot;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt; IMMUTABLE STRICT &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; $$\n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; $&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n$$;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;-- And then wrap an aggregate around it&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; AGGREGATE public.last (\n        sfunc    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; public.last_agg,\n        basetype &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement,\n        stype    &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; anyelement\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then your example should work &lt;em&gt;almost&lt;/em&gt; as is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(id), customer, &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FIRST&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;CAVEAT: It ignore&apos;s NULL rows&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Edit 1 - Use the postgres extension instead&lt;/h1&gt;\n\n&lt;p&gt;Now I use this way: &lt;a href=&quot;http://pgxn.org/dist/first_last_agg/&quot;&gt;http://pgxn.org/dist/first_last_agg/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To install on ubuntu 14.04:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;apt&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; install postgresql&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;server&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;dev&lt;span class=&quot;hljs-number&quot;&gt;-9.3&lt;/span&gt; git build&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;essential &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;y\ngit clone git:&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;github.com&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;wulczer&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;first_last_agg.git\ncd first_last_app\nmake &lt;span class=&quot;hljs-operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo make install\npsql &lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;c &lt;span class=&quot;hljs-string&quot;&gt;&apos;create extension first_last_agg&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s a postgres extension that gives you first and last functions; apparently faster than the above way.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;h1&gt;Edit 2 - Ordering and filtering&lt;/h1&gt;\n\n&lt;p&gt;If you use aggregate functions (like these), you can order the results, without the need to have the data already ordered:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;http:&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;www.postgresql.org&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;docs&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;expressions.html#SYNTAX&lt;span class=&quot;hljs-operator&quot;&gt;-&lt;/span&gt;AGGREGATES\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So the equivalent example, with ordering would be something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id), customer, &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;(total &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; id)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;first&lt;/span&gt;(total);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course you can order and filter as you deem fit within the aggregate; it&apos;s very powerful syntax.&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;code&gt;ARRAY_AGG&lt;/code&gt; function for &lt;a href=&quot;https://www.postgresql.org/docs/9.5/functions-aggregate.html&quot; rel=&quot;noreferrer&quot;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/u-sql/functions/aggregate/array-agg&quot; rel=&quot;noreferrer&quot;&gt;U-SQL&lt;/a&gt;, &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/en/SSEPGG_10.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0050494.html&quot; rel=&quot;noreferrer&quot;&gt;IBM DB2&lt;/a&gt;, and &lt;a href=&quot;https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#array_agg&quot; rel=&quot;noreferrer&quot;&gt;Google BigQuery SQL&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; customer, (&lt;span class=&quot;hljs-built_in&quot;&gt;ARRAY_AGG&lt;/span&gt;(id &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(total)\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases\n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In SQL Server you can do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; (\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;()\n&lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt; StRank, &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Purchases) n\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; StRank &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Explaination:Here  &lt;strong&gt;Group by&lt;/strong&gt; is done on the basis of customer and then order it by total then each such group is given serial number as StRank and we are taking out first 1 customer whose StRank is 1&lt;/p&gt;\n    ","\n&lt;p&gt;Very fast solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; a.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;\n    purchases a \n    &lt;span class=&quot;hljs-keyword&quot;&gt;JOIN&lt;/span&gt; ( \n        &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; customer, &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;( id ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id \n        &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; purchases \n        &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; customer \n    ) b &lt;span class=&quot;hljs-keyword&quot;&gt;USING&lt;/span&gt; ( id );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and really very fast if table is indexed by id:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; index purchases_id &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; purchases (id);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Snowflake/Teradata supports &lt;a href=&quot;https://docs.snowflake.net/manuals/sql-reference/constructs/qualify.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;QUALIFY&lt;/code&gt;&lt;/a&gt; clause which works like &lt;code&gt;HAVING&lt;/code&gt; for windowed functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer, total\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; PURCHASES\nQUALIFY &lt;span class=&quot;hljs-built_in&quot;&gt;ROW_NUMBER&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;OVER&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.customer &lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; p.total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In PostgreSQL, another possibility is to use the &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-window.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;first_value&lt;/code&gt;&lt;/a&gt; window function in combination with &lt;code&gt;SELECT DISTINCT&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;distinct&lt;/span&gt; customer_id,\n                &lt;span class=&quot;hljs-built_in&quot;&gt;first_value&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;row&lt;/span&gt;(id, total)) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer_id &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;, id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;            purchases;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I created a composite &lt;code&gt;(id, total)&lt;/code&gt;, so both values are returned by the same aggregate. You can of course always apply &lt;code&gt;first_value()&lt;/code&gt; twice.&lt;/p&gt;\n    ","\n&lt;p&gt;This way it work for me:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; article, dealer, price\n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;   shop s1\n&lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt;  price&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(s2.price)\n              &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; shop s2\n              &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; s1.article &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s2.article\n              &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; s2.article)\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; article;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Select highest price on each article&lt;/p&gt;\n    ","\n&lt;p&gt;This is how we can achieve this by using windows function:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt; purchases (id int4, customer &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;), total &lt;span class=&quot;hljs-type&quot;&gt;integer&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sally&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Joe&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;into&lt;/span&gt; purchases &lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sally&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ID, CUSTOMER, TOTAL &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; ID, CUSTOMER, TOTAL,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt; () &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; CUSTOMER &lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; TOTAL &lt;span class=&quot;hljs-keyword&quot;&gt;desc&lt;/span&gt;) RN\n    &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchases) A &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; RN &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/uwrys.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/uwrys.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted OMG Ponies&apos; &quot;Supported by any database&quot; solution has good speed from my test.&lt;/p&gt;\n\n&lt;p&gt;Here I provide a same-approach, but more complete and clean any-database solution.   Ties are considered (assume desire to get only one row for each customer, even multiple records for max total per customer), and other purchase fields (e.g. purchase_payment_id) will be selected for the real matching rows in the purchase table.&lt;/p&gt;\n\n&lt;p&gt;Supported by any database:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchase\n&lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;min&lt;/span&gt;(id) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; id &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchase\n    &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; customer, &lt;span class=&quot;hljs-built_in&quot;&gt;max&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; purchase\n        &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer\n    ) t1 &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (customer, total)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer\n) t2 &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; customer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This query is reasonably fast especially when there is a composite index like (customer, total) on the purchase table.&lt;/p&gt;\n\n&lt;p&gt;Remark:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;t1, t2 are subquery alias which could be removed depending on database.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt;: the &lt;code&gt;using (...)&lt;/code&gt; clause is currently not supported in MS-SQL and Oracle db as of this edit on Jan 2017. You have to expand it yourself to e.g. &lt;code&gt;on t2.id = purchase.id&lt;/code&gt; etc.  The USING syntax works in SQLite, MySQL and PostgreSQL.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you want to select any (by your some specific condition) row from the set of aggregated rows. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you want to use another (&lt;code&gt;sum/avg&lt;/code&gt;) aggregation function in addition to &lt;code&gt;max/min&lt;/code&gt;. Thus you can not use clue with &lt;code&gt;DISTINCT ON&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can use next subquery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;  \n    (  \n       &lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;id&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2   \n       &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;ANY&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;ARRAY_AGG&lt;/span&gt;( tf.id ) ) &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; amount &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;( tf.amount )   \n    ) id,  \n    name,   \n    &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(amount) ma,  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;SUM&lt;/span&gt;( ratio )  \n&lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; t2  tf  \n&lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can replace &lt;code&gt;amount = MAX( tf.amount )&lt;/code&gt; with any condition you want with one restriction: This subquery must not return more than one row&lt;/p&gt;\n\n&lt;p&gt;But if you wanna to do such things you probably looking for &lt;a href=&quot;https://www.postgresql.org/docs/current/static/tutorial-window.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;window functions&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For SQl Server the most efficient way is:   &lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt;\nids &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ( &lt;span class=&quot;hljs-comment&quot;&gt;--condition for split table into groups&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; v(i) \n) \n,src &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; ( \n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; yourTable &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt;  &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--use this as filter for other conditions&lt;/span&gt;\n)\n,joined &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (\n    &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; tops.&lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ids \n    &lt;span class=&quot;hljs-keyword&quot;&gt;cross&lt;/span&gt; apply &lt;span class=&quot;hljs-comment&quot;&gt;--it`s like for each rows&lt;/span&gt;\n    (\n        &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; top(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; src\n        &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; CommodityId &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; ids.i \n    ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; tops\n)\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; joined\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and don&apos;t forget to create clustered index for used columns&lt;/p&gt;\n    ","\n&lt;p&gt;My approach via window function &lt;a href=&quot;https://dbfiddle.uk/?rdbms=postgres_13&amp;amp;fiddle=01c699f3f47ca9fca8215f8cbf556218&quot; rel=&quot;nofollow noreferrer&quot;&gt;dbfiddle&lt;/a&gt;:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Assign &lt;code&gt;row_number&lt;/code&gt; at each group: &lt;code&gt;row_number() over (partition by agreement_id, order_id ) as nrow&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Take only first row at group: &lt;code&gt;filter (where nrow = 1)&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; intermediate &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; \n &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;,\n &lt;span class=&quot;hljs-built_in&quot;&gt;row_number&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; agreement_id, order_id ) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; nrow,\n (&lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;( suma ) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; ( &lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; agreement_id, order_id ))::&lt;span class=&quot;hljs-type&quot;&gt;numeric&lt;/span&gt;( &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; order_suma,\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;&amp;lt;&lt;/span&gt;your &lt;span class=&quot;hljs-keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; \n  &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt;,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;sum&lt;/span&gt;( order_suma ) &lt;span class=&quot;hljs-keyword&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; nrow &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;over&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; agreement_id)\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; intermediate\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This can be achieved easily by MAX FUNCTION on total and GROUP BY id and customer.&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; id, customer, &lt;span class=&quot;hljs-built_in&quot;&gt;MAX&lt;/span&gt;(total) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt;  purchases &lt;span class=&quot;hljs-keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; id, customer\n&lt;span class=&quot;hljs-keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;BY&lt;/span&gt; total &lt;span class=&quot;hljs-keyword&quot;&gt;DESC&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"158":["\n&lt;p&gt;With &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML5&quot; rel=&quot;noreferrer&quot;&gt;HTML5&lt;/a&gt; you can make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn&apos;t want to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Adobe_Flash&quot; rel=&quot;noreferrer&quot;&gt;Flash&lt;/a&gt; nor Iframes or plugins and after some research I came up with the solution.&lt;/p&gt;\n\n&lt;p&gt;The HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;form enctype=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/form&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;progress&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;progress&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;First, you can do some validation if you want. For example, in the &lt;code&gt;.on(&apos;change&apos;)&lt;/code&gt; event of the file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:file&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;change&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; file = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (file.&lt;span class=&quot;hljs-property&quot;&gt;size&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;max upload size is 1k&apos;&lt;/span&gt;);\n  }\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Also see .name, .type&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now the &lt;code&gt;$.ajax()&lt;/code&gt; submit with the button&apos;s click:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:button&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Your server script to process the upload&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;upload.php&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Form data&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;form&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]),\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Tell jQuery not to process data or worry about content-type&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// You *must* include these options!&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;cache&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Custom XMLHttpRequest&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;xhr&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; myXhr = $.ajaxSettings.&lt;span class=&quot;hljs-title function_&quot;&gt;xhr&lt;/span&gt;();\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (myXhr.&lt;span class=&quot;hljs-property&quot;&gt;upload&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// For handling the progress of the upload&lt;/span&gt;\n        myXhr.&lt;span class=&quot;hljs-property&quot;&gt;upload&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;progress&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.&lt;span class=&quot;hljs-property&quot;&gt;lengthComputable&lt;/span&gt;) {\n            $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;progress&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;({\n              &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: e.&lt;span class=&quot;hljs-property&quot;&gt;loaded&lt;/span&gt;,\n              &lt;span class=&quot;hljs-attr&quot;&gt;max&lt;/span&gt;: e.&lt;span class=&quot;hljs-property&quot;&gt;total&lt;/span&gt;,\n            });\n          }\n        }, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n      }\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myXhr;\n    }\n  });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Chrome&quot; rel=&quot;noreferrer&quot;&gt;Google Chrome&lt;/a&gt; as some of the HTML5 components of the examples aren&apos;t available in every browser.&lt;/p&gt;\n    ","\n&lt;h2&gt;2019 Update: It &lt;em&gt;still&lt;/em&gt; depends on the browsers &lt;em&gt;your&lt;/em&gt; demographic uses.&lt;/h2&gt;\n&lt;p&gt;An important thing to understand with the &quot;new&quot; HTML5 &lt;code&gt;file&lt;/code&gt; API is that it &lt;a href=&quot;http://caniuse.com/fileapi&quot; rel=&quot;nofollow noreferrer&quot;&gt;wasn&apos;t supported until IE&amp;nbsp;10&lt;/a&gt;. If the specific market you&apos;re aiming at has a higher-than-average propensity toward older versions of Windows, you might not have access to it.&lt;/p&gt;\n&lt;p&gt;As of 2017, about 5% of browsers are one of IE 6, 7, 8 or 9. If you head into a big corporation (e.g., this is a B2B tool or something you&apos;re delivering for training) that number can skyrocket. In 2016, I dealt with a company using IE8 on over 60% of their machines.&lt;/p&gt;\n&lt;p&gt;It&apos;s 2019 as of this edit, almost 11 years after my initial answer. IE9 and lower are &lt;em&gt;globally&lt;/em&gt; around the 1% mark but there are still clusters of higher usage.&lt;/p&gt;\n&lt;p&gt;The important take-away from this whatever the feature is, &lt;strong&gt;check what browser &lt;em&gt;your&lt;/em&gt; users use&lt;/strong&gt;. If you don&apos;t, you&apos;ll learn a quick and painful lesson in why &quot;works for me&quot; isn&apos;t good enough in a deliverable to a client. &lt;a href=&quot;https://caniuse.com/&quot; rel=&quot;nofollow noreferrer&quot;&gt;caniuse&lt;/a&gt; is a useful tool but note where they get their demographics from. They may not align with yours. This is never truer than enterprise environments.&lt;/p&gt;\n&lt;p&gt;My answer from 2008 follows.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;However, there are viable non-JS methods of file uploads. You can create an iframe on the page (that you hide with CSS) and then target your form to post to that iframe. The main page doesn&apos;t need to move.&lt;/p&gt;\n&lt;p&gt;It&apos;s a &quot;real&quot; post so it&apos;s not wholly interactive. If you need status you need something server-side to process that. This varies massively depending on your server. &lt;a href=&quot;http://en.wikipedia.org/wiki/ASP.NET&quot; rel=&quot;nofollow noreferrer&quot;&gt;ASP.NET&lt;/a&gt; has nicer mechanisms. PHP plain fails, but you can use &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl&quot; rel=&quot;nofollow noreferrer&quot;&gt;Perl&lt;/a&gt; or Apache modifications to get around it.&lt;/p&gt;\n&lt;p&gt;If you need multiple file uploads, it&apos;s best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.&lt;/p&gt;\n&lt;p&gt;Or use a Java/Flash solution. They&apos;re a lot more flexible in what they can do with their posts...&lt;/p&gt;\n    ","\n&lt;p&gt;I recommend using the &lt;a href=&quot;http://fineuploader.com/demos.html&quot; rel=&quot;noreferrer&quot;&gt;Fine Uploader&lt;/a&gt; plugin for this purpose. Your &lt;code&gt;JavaScript&lt;/code&gt; code would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#uploadbutton&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;jsupload&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;addFile.do&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;onComplete&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;){\n      &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;( &lt;span class=&quot;hljs-string&quot;&gt;&quot;server response: &quot;&lt;/span&gt; + response);\n    }\n  });\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Note: This answer is outdated, it is now possible to upload files using XHR.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;You cannot upload files using &lt;a href=&quot;http://en.wikipedia.org/wiki/XMLHttpRequest&quot; rel=&quot;noreferrer&quot;&gt;XMLHttpRequest&lt;/a&gt; (Ajax). You can simulate the effect using an iframe or Flash. The excellent &lt;a href=&quot;http://malsup.com/jquery/form/&quot; rel=&quot;noreferrer&quot;&gt;jQuery Form Plugin&lt;/a&gt; that posts your files through an iframe to get the effect.&lt;/p&gt;\n    ","\n&lt;p&gt;Wrapping up for future readers.&lt;/p&gt;\n\n&lt;h1&gt;Asynchronous File Upload&lt;/h1&gt;\n\n&lt;h2&gt;With HTML5&lt;/h2&gt;\n\n&lt;p&gt;You can upload files &lt;strong&gt;with jQuery&lt;/strong&gt; using the &lt;code&gt;$.ajax()&lt;/code&gt; method if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects&quot; rel=&quot;noreferrer&quot;&gt;FormData&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot; rel=&quot;noreferrer&quot;&gt;File API&lt;/a&gt; are supported (both HTML5 features). &lt;/p&gt;\n\n&lt;p&gt;You can also send files &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot; rel=&quot;noreferrer&quot;&gt;without FormData&lt;/a&gt; but either way the File API must be present to process files in such a way that they can be sent with &lt;em&gt;XMLHttpRequest&lt;/em&gt; (Ajax).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;file/destination.html&apos;&lt;/span&gt;, \n  &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#formWithFiles&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;hljs-comment&quot;&gt;// The form with the file inputs.&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;                    &lt;span class=&quot;hljs-comment&quot;&gt;// Using FormData, no need to process data.&lt;/span&gt;\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: Files sent!&quot;&lt;/span&gt;);\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;fail&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;An error occurred, the files couldn&apos;t be sent!&quot;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For a quick, pure JavaScript (&lt;strong&gt;no jQuery&lt;/strong&gt;) example see &quot;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object&quot; rel=&quot;noreferrer&quot;&gt;Sending files using a FormData object&lt;/a&gt;&quot;.&lt;/p&gt;\n\n&lt;h2&gt;Fallback&lt;/h2&gt;\n\n&lt;p&gt;When HTML5 isn&apos;t supported (no &lt;em&gt;File API&lt;/em&gt;) the only other pure JavaScript solution (no &lt;em&gt;Flash&lt;/em&gt; or any other browser plugin) is the &lt;strong&gt;hidden iframe&lt;/strong&gt; technique, which allows to emulate an asynchronous request without using the &lt;em&gt;XMLHttpRequest&lt;/em&gt; object.&lt;/p&gt;\n\n&lt;p&gt;It consists of setting an iframe as the target of the form with the file inputs. When the user submits a request is made and the files are uploaded but the response is displayed inside the iframe instead of re-rendering the main page. Hiding the iframe makes the whole process transparent to the user and emulates an asynchronous request.&lt;/p&gt;\n\n&lt;p&gt;If done properly it should work virtually on any browser, but it has some caveats as how to obtain the response from the iframe. &lt;/p&gt;\n\n&lt;p&gt;In this case you may prefer to use a wrapper plugin like &lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot; rel=&quot;noreferrer&quot;&gt;Bifröst&lt;/a&gt; which uses the &lt;em&gt;iframe technique&lt;/em&gt; but also provides a &lt;a href=&quot;//api.jquery.com/jQuery.ajaxTransport&quot; rel=&quot;noreferrer&quot;&gt;jQuery Ajax transport&lt;/a&gt; allowing to &lt;strong&gt;send files&lt;/strong&gt; with just the &lt;code&gt;$.ajax()&lt;/code&gt; method like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;file/destination.html&apos;&lt;/span&gt;, \n  &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Set the transport to use (iframe means to use Bifröst)&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// and the expected data type (json in this case).&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;iframe json&apos;&lt;/span&gt;,                                \n  &lt;span class=&quot;hljs-attr&quot;&gt;fileInputs&lt;/span&gt;: $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input[type=&quot;file&quot;]&apos;&lt;/span&gt;),  &lt;span class=&quot;hljs-comment&quot;&gt;// The file inputs containing the files to send.&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: { &lt;span class=&quot;hljs-attr&quot;&gt;msg&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Some extra data you might need.&apos;&lt;/span&gt;}\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;done&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Success: Files sent!&quot;&lt;/span&gt;);\n}).&lt;span class=&quot;hljs-title function_&quot;&gt;fail&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;An error occurred, the files couldn&apos;t be sent!&quot;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Plugins&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;//github.com/matiasgagliano/bifrost&quot; rel=&quot;noreferrer&quot;&gt;Bifröst&lt;/a&gt; is just a small wrapper that adds fallback support to jQuery&apos;s ajax method, but many of the aforementioned plugins like &lt;a href=&quot;//malsup.com/jquery/form/&quot; rel=&quot;noreferrer&quot;&gt;jQuery Form Plugin&lt;/a&gt; or &lt;a href=&quot;//github.com/blueimp/jQuery-File-Upload&quot; rel=&quot;noreferrer&quot;&gt;jQuery File Upload&lt;/a&gt; include the whole stack from HTML5 to different fallbacks and some useful features to ease out the process. Depending on your needs and requirements you might want to consider a bare implementation or either of this plugins.&lt;/p&gt;\n    ","\n&lt;p&gt;This &lt;a href=&quot;https://github.com/jfeldstein/jQuery.AjaxFileUpload.js&quot;&gt;AJAX file upload jQuery plugin&lt;/a&gt; uploads the file somehwere, and passes the\nresponse to a callback, nothing else. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It does not depend on specific HTML, just give it a &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;It does not require your server to respond in any particular way&lt;/li&gt;\n&lt;li&gt;It does not matter how many files you use, or where they are on the page&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;-- Use as little as --&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#one-specific-file&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ajaxfileupload&lt;/span&gt;({\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;action&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/upload.php&apos;&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;-- or as much as --&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input[type=&quot;file&quot;]&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ajaxfileupload&lt;/span&gt;({\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;action&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/upload.php&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;params&apos;&lt;/span&gt;: {\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;extra&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;info&apos;&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;onComplete&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;custom handler for file:&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(response));\n  },\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;onStart&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(weWantedTo) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// cancels upload&lt;/span&gt;\n  },\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos;onCancel&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;no file selected&apos;&lt;/span&gt;);\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have been using the below script to upload images which happens to work fine.&lt;/p&gt;\n\n&lt;h1&gt;HTML&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;/&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;response&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;JavaScript&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;document&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formdata = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;FormData&lt;/span&gt;) {\n        formdata = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\n    }\n    input.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;evt&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;, img, reader, file;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; i &amp;lt; len; i++ ) {\n            file = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[i];\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!!file.&lt;span class=&quot;hljs-property&quot;&gt;type&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/image.*/&lt;/span&gt;)) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;FileReader&lt;/span&gt; ) {\n                    reader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileReader&lt;/span&gt;();\n                    reader.&lt;span class=&quot;hljs-property&quot;&gt;onloadend&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n                        &lt;span class=&quot;hljs-comment&quot;&gt;//showUploadedItem(e.target.result, file.fileName);&lt;/span&gt;\n                    };\n                    reader.&lt;span class=&quot;hljs-title function_&quot;&gt;readAsDataURL&lt;/span&gt;(file);\n                }\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (formdata) {\n                    formdata.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;image&quot;&lt;/span&gt;, file);\n                    formdata.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;extra&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;extra-data&apos;&lt;/span&gt;);\n                }\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (formdata) {\n                    &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div#response&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;br /&amp;gt;&amp;lt;img src=&quot;ajax-loader.gif&quot;/&amp;gt;&apos;&lt;/span&gt;);\n\n                    jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n                        &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;upload.php&quot;&lt;/span&gt;,\n                        &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n                        &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: formdata,\n                        &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n                        &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n                        &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt;) {\n                         &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div#response&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Successfully uploaded&quot;&lt;/span&gt;);\n                        }\n                    });\n                }\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n            {\n                &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Not a vaild image!&apos;&lt;/span&gt;);\n            }\n        }\n\n    }, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Explanation&lt;/h1&gt;\n\n&lt;p&gt;I use response &lt;code&gt;div&lt;/code&gt; to show the uploading animation and response after upload is done.&lt;/p&gt;\n\n&lt;p&gt;Best part is you can send extra data such as ids &amp;amp; etc with the file when you use this script. I have mention it &lt;code&gt;extra-data&lt;/code&gt; as in the script.&lt;/p&gt;\n\n&lt;p&gt;At the PHP level this will work as normal file upload. extra-data can be retrieved as &lt;code&gt;$_POST&lt;/code&gt; data.&lt;/p&gt;\n\n&lt;p&gt;Here you are not using a plugin and stuff. You can change the code as you want. You are not blindly coding here. This is the core functionality of any jQuery file upload. Actually Javascript.&lt;/p&gt;\n    ","\n&lt;p&gt;You can do it in vanilla JavaScript pretty easily. Here&apos;s a snippet from my current project:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\nxhr.&lt;span class=&quot;hljs-property&quot;&gt;upload&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onprogress&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; percent = (e.&lt;span class=&quot;hljs-property&quot;&gt;position&lt;/span&gt;/ e.&lt;span class=&quot;hljs-property&quot;&gt;totalSize&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Render a pretty progress bar&lt;/span&gt;\n};\nxhr.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Handle file upload complete&lt;/span&gt;\n    }\n};\nxhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/upload&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\nxhr.&lt;span class=&quot;hljs-title function_&quot;&gt;setRequestHeader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;X-FileName&apos;&lt;/span&gt;,file.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Pass the filename along&lt;/span&gt;\nxhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(file);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can upload simply with jQuery &lt;code&gt;.ajax()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;HTML:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;upload-form&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;File:&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;progress&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;progress&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;max&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;100&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;progress&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;CSS&lt;/p&gt;\n\n&lt;pre class=&quot;lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.progress&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Javascript:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-javascript s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ev&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#upload-form&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;submit&apos;&lt;/span&gt;, (&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ev&lt;/span&gt;) {\n        ev.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n            &lt;span class=&quot;hljs-attr&quot;&gt;xhr&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; progress = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.progress&apos;&lt;/span&gt;),\n                    xhr = $.ajaxSettings.&lt;span class=&quot;hljs-title function_&quot;&gt;xhr&lt;/span&gt;();\n\n                progress.&lt;span class=&quot;hljs-title function_&quot;&gt;show&lt;/span&gt;();\n\n                xhr.&lt;span class=&quot;hljs-property&quot;&gt;upload&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onprogress&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ev&lt;/span&gt;) {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ev.&lt;span class=&quot;hljs-property&quot;&gt;lengthComputable&lt;/span&gt;) {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; percentComplete = &lt;span class=&quot;hljs-built_in&quot;&gt;parseInt&lt;/span&gt;((ev.&lt;span class=&quot;hljs-property&quot;&gt;loaded&lt;/span&gt; / ev.&lt;span class=&quot;hljs-property&quot;&gt;total&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);\n                        progress.&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(percentComplete);\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (percentComplete === &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) {\n                            progress.&lt;span class=&quot;hljs-title function_&quot;&gt;hide&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n                        }\n                    }\n                };\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; xhr;\n            },\n            &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;upload.php&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;),\n            &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;cache&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data, status, xhr&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n            },\n            &lt;span class=&quot;hljs-attr&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xhr, status, error&lt;/span&gt;) {\n                &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n            }\n       });\n    }));\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The simplest and most robust way I have done this in the past, is to simply target a hidden iFrame tag with your form - then it will submit within the iframe without reloading the page.&lt;/p&gt;\n\n&lt;p&gt;That is if you don&apos;t want to use a plugin, JavaScript or any other forms of &quot;magic&quot; other than HTML.  Of course you can combine this with JavaScript or what have you...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;form target=&lt;span class=&quot;hljs-string&quot;&gt;&quot;iframe&quot;&lt;/span&gt; action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt; enctype=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/form&amp;gt;\n\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;iframe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;iframe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;display:none&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also read the contents of the iframe &lt;code&gt;onLoad&lt;/code&gt; for server errors or success responses and then output that to user.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Chrome, iFrames, and onLoad&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;-note- you only need to keep reading if you are interested in how to setup a UI blocker when doing uploading/downloading&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Currently Chrome doesn&apos;t trigger the onLoad event for the iframe when it&apos;s used to transfer files.  Firefox, IE, and Edge all fire the onload event for file transfers.&lt;/p&gt;\n\n&lt;p&gt;The only solution that I found works for Chrome was to use a cookie.  &lt;/p&gt;\n\n&lt;p&gt;To do that basically when the upload/download is started:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;[Client Side] Start an interval to look for the existence of a cookie&lt;/li&gt;\n&lt;li&gt;[Server Side] Do whatever you need to with the file data&lt;/li&gt;\n&lt;li&gt;[Server Side] Set cookie for client side interval&lt;/li&gt;\n&lt;li&gt;[Client Side] Interval sees the cookie and uses it like the onLoad event.  For example you can start a UI blocker and then onLoad ( or when cookie is made )  you remove the UI blocker.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Using a cookie for this is ugly but it works.  &lt;/p&gt;\n\n&lt;p&gt;I made a jQuery plugin to handle this issue for Chrome when downloading, you can find here&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/ArtisticPhoenix/jQuery-Plugins/blob/master/iDownloader.js&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/ArtisticPhoenix/jQuery-Plugins/blob/master/iDownloader.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The same basic principal applies to uploading, as well.&lt;/p&gt;\n\n&lt;p&gt;To use the downloader  ( include the JS, obviously )&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;body&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;iDownloader&lt;/span&gt;({\n     &lt;span class=&quot;hljs-string&quot;&gt;&quot;onComplete&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n          $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#uiBlocker&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//hide ui blocker on complete&lt;/span&gt;\n     }\n });\n\n $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;somebuttion&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n      $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#uiBlocker&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;block&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//block the UI&lt;/span&gt;\n      $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;body&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;iDownloader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;download&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;htttp://example.com/location/of/download&apos;&lt;/span&gt;);\n });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And on the server side, just before transferring the file data, create the cookie&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setcookie&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;iDownloader&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-title function_&quot;&gt;time&lt;/span&gt;() + &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The plugin will see the cookie, and then trigger the &lt;code&gt;onComplete&lt;/code&gt; callback.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/&quot; rel=&quot;noreferrer&quot;&gt;I&apos;ve written this up in a Rails environment&lt;/a&gt;.  It&apos;s only about five lines of JavaScript, if you use the lightweight jQuery-form plugin.&lt;/p&gt;\n\n&lt;p&gt;The challenge is in getting AJAX upload working as the standard &lt;code&gt;remote_form_for&lt;/code&gt; doesn&apos;t understand multi-part form submission. It&apos;s not going to send the file data Rails seeks back with the AJAX request.   &lt;/p&gt;\n\n&lt;p&gt;That&apos;s where the jQuery-form plugin comes into play.  &lt;/p&gt;\n\n&lt;p&gt;Heres the Rails code for it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;% &lt;span class=&quot;hljs-title function_&quot;&gt;remote_form_for&lt;/span&gt;(:image_form, \n                   :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;url&lt;/span&gt; =&amp;gt;&lt;/span&gt; { :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;controller&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;blogs&quot;&lt;/span&gt;, :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;action&lt;/span&gt; =&amp;gt;&lt;/span&gt; :create_asset }, \n                   :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;html&lt;/span&gt; =&amp;gt;&lt;/span&gt; { :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;method&lt;/span&gt; =&amp;gt;&lt;/span&gt; :post, \n                              :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;id&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;uploadForm&apos;&lt;/span&gt;, :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;multipart&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; }) \n                                                                        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; |f| %&amp;gt;\n &lt;span class=&quot;hljs-title class_&quot;&gt;Upload&lt;/span&gt; a &lt;span class=&quot;hljs-attr&quot;&gt;file&lt;/span&gt;: &amp;lt;%= f.&lt;span class=&quot;hljs-property&quot;&gt;file_field&lt;/span&gt; :uploaded_data %&amp;gt;\n&amp;lt;% end %&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Heres the associated JavaScript:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#uploadForm input&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;change&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;parent&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;ajaxSubmit&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;beforeSubmit&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a,f,o&lt;/span&gt;) {\n   o.&lt;span class=&quot;hljs-property&quot;&gt;dataType&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&apos;json&apos;&lt;/span&gt;;\n  },\n  &lt;span class=&quot;hljs-attr&quot;&gt;complete&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;XMLHttpRequest, textStatus&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;// XMLHttpRequest.responseText will contain the URL of the uploaded image.&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Put it in an image element you create, or do with it what you will.&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// For example, if you have an image elemtn with id &quot;my_image&quot;, then&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;//  $(&apos;#my_image&apos;).attr(&apos;src&apos;, XMLHttpRequest.responseText);&lt;/span&gt;\n   &lt;span class=&quot;hljs-comment&quot;&gt;// Will set that image tag to display the uploaded image.&lt;/span&gt;\n  },\n });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And heres the Rails controller action, pretty vanilla:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; @image = &lt;span class=&quot;hljs-title class_&quot;&gt;Image&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;new&lt;/span&gt;(params[:image_form])\n @image.&lt;span class=&quot;hljs-property&quot;&gt;save&lt;/span&gt;\n render :&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;text&lt;/span&gt; =&amp;gt;&lt;/span&gt; @image.&lt;span class=&quot;hljs-property&quot;&gt;public_filename&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ive been using this for the past few weeks with Bloggity, and its worked like a champ.&lt;/p&gt;\n    ","\n&lt;p&gt;Simple Ajax Uploader is another option:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/LPology/Simple-Ajax-Uploader&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/LPology/Simple-Ajax-Uploader&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Cross-browser -- works in IE7+, Firefox, Chrome, Safari, Opera&lt;/li&gt;\n&lt;li&gt;Supports multiple, concurrent uploads -- even in non-HTML5 browsers&lt;/li&gt;\n&lt;li&gt;No flash or external CSS -- just one 5Kb Javascript file&lt;/li&gt;\n&lt;li&gt;Optional, built-in support for fully cross-browser progress bars (using PHP&apos;s APC extension)&lt;/li&gt;\n&lt;li&gt;Flexible and highly customizable -- use any element as upload button, style your own progress indicators&lt;/li&gt;\n&lt;li&gt;No forms required, just provide an element that will serve as upload button&lt;/li&gt;\n&lt;li&gt;MIT license -- free to use in commercial project&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; uploader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ss.&lt;span class=&quot;hljs-title class_&quot;&gt;SimpleUpload&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;button&lt;/span&gt;: $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#uploadBtn&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-comment&quot;&gt;// upload button&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/uploadhandler&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// URL of server-side upload handler&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;userfile&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;// parameter name of the uploaded file&lt;/span&gt;\n    &lt;span class=&quot;hljs-attr&quot;&gt;onSubmit&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setProgressBar&lt;/span&gt;( $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#progressBar&apos;&lt;/span&gt;) ); &lt;span class=&quot;hljs-comment&quot;&gt;// designate elem as our progress bar&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-attr&quot;&gt;onComplete&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;file, response&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// do whatever after upload is finished&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A solution I found was to have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; target a hidden iFrame. The iFrame can then run JS to display to the user that it&apos;s complete (on page load).&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s just another solution of how to upload file (&lt;strong&gt;without any plugin&lt;/strong&gt;) &lt;/p&gt;\n\n&lt;p&gt;Using simple &lt;strong&gt;Javascripts&lt;/strong&gt; and &lt;strong&gt;AJAX&lt;/strong&gt; (with progress-bar)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;HTML part&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;form id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;upload_form&quot;&lt;/span&gt; enctype=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt; method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;\n    &amp;lt;input type=&quot;file&quot; name=&quot;file1&quot; id=&quot;file1&quot;&amp;gt;&amp;lt;br&amp;gt;\n    &amp;lt;input type=&quot;button&quot; value=&quot;Upload File&quot; onclick=&quot;uploadFile()&quot;&amp;gt;\n    &amp;lt;progress id=&quot;progressBar&quot; value=&quot;0&quot; max=&quot;100&quot; style=&quot;width:300px;&quot;&amp;gt;&amp;lt;/progress&amp;gt;\n    &amp;lt;h3 id=&quot;status&quot;&amp;gt;&amp;lt;/h3&amp;gt;\n    &amp;lt;p id=&quot;loaded_n_total&quot;&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/form&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;JS part&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(el);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uploadFile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; file = &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// alert(file.name+&quot; | &quot;+file.size+&quot; | &quot;+file.type);&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formdata = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\n    formdata.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;, file);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ajax = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    ajax.&lt;span class=&quot;hljs-property&quot;&gt;upload&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;progress&quot;&lt;/span&gt;, progressHandler, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;load&quot;&lt;/span&gt;, completeHandler, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;error&quot;&lt;/span&gt;, errorHandler, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;abort&quot;&lt;/span&gt;, abortHandler, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;file_upload_parser.php&quot;&lt;/span&gt;);\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(formdata);\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;progressHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;loaded_n_total&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Uploaded &quot;&lt;/span&gt;+event.&lt;span class=&quot;hljs-property&quot;&gt;loaded&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&quot; bytes of &quot;&lt;/span&gt;+event.&lt;span class=&quot;hljs-property&quot;&gt;total&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; percent = (event.&lt;span class=&quot;hljs-property&quot;&gt;loaded&lt;/span&gt; / event.&lt;span class=&quot;hljs-property&quot;&gt;total&lt;/span&gt;) * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;progressBar&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(percent);\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(percent)+&lt;span class=&quot;hljs-string&quot;&gt;&quot;% uploaded... please wait&quot;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;completeHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = event.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;progressBar&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;errorHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload Failed&quot;&lt;/span&gt;;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;abortHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;status&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload Aborted&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PHP part&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?php\n$fileName = $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// The file name&lt;/span&gt;\n$fileTmpLoc = $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;tmp_name&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// File in the PHP tmp folder&lt;/span&gt;\n$fileType = $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;type&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// The type of file it is&lt;/span&gt;\n$fileSize = $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;size&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// File size in bytes&lt;/span&gt;\n$fileErrorMsg = $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&quot;file1&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&quot;error&quot;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// 0 for false... and 1 for true&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!$fileTmpLoc) { &lt;span class=&quot;hljs-comment&quot;&gt;// if file not chosen&lt;/span&gt;\n    echo &lt;span class=&quot;hljs-string&quot;&gt;&quot;ERROR: Please browse for a file before clicking the upload button.&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;exit&lt;/span&gt;();\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;move_uploaded_file&lt;/span&gt;($fileTmpLoc, &lt;span class=&quot;hljs-string&quot;&gt;&quot;test_uploads/$fileName&quot;&lt;/span&gt;)){ &lt;span class=&quot;hljs-comment&quot;&gt;// assuming the directory name &apos;test_uploads&apos;&lt;/span&gt;\n    echo &lt;span class=&quot;hljs-string&quot;&gt;&quot;$fileName upload is complete&quot;&lt;/span&gt;;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    echo &lt;span class=&quot;hljs-string&quot;&gt;&quot;move_uploaded_file function failed&quot;&lt;/span&gt;;\n}\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/SiddharthaChowdhury/Async-File-Upload-using-PHP-Javascript-AJAX&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;Here&apos;s the EXAMPLE application&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;jQuery &lt;a href=&quot;http://www.uploadify.com/download/&quot;&gt;Uploadify&lt;/a&gt; is another good plugin which I have used before to upload files. The JavaScript code is as simple as the following: code. However, the new version does not work in Internet&amp;nbsp;Explorer.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#file_upload&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;uploadify&lt;/span&gt;({\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;swf&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/public/js/uploadify.swf&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;uploader&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/Upload.ashx?formGuid=&apos;&lt;/span&gt; + $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#formGuid&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(),\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;cancelImg&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;/public/images/uploadify-cancel.png&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;multi&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;onQueueComplete&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;queueData&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    },\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;onUploadStart&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;file&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have done a lot of searching and I have come to another solution for uploading files without any plugin and only with ajax. The solution is as below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#btn_Upload&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;live&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;AjaxFileUpload&lt;/span&gt;);\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;AjaxFileUpload&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fileInput = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#Uploader&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; file = fileInput.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; fd = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\n    fd.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;files&quot;&lt;/span&gt;, file);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Uploader.ashx&apos;&lt;/span&gt;);\n    xhr.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xhr.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) {\n             &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;success&apos;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (uploadResult == &lt;span class=&quot;hljs-string&quot;&gt;&apos;success&apos;&lt;/span&gt;)\n            &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt;);\n    };\n    xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(fd);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formData=&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\nformData.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;fieldname&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;);\nformData.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;image&quot;&lt;/span&gt;,$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;[name=&quot;filename&quot;]&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;page.php&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;:formData,\n    &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;JSON&quot;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;cache&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;:&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){ }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use form data to post all your values including images.&lt;/p&gt;\n    ","\n&lt;p&gt;A modern approach &lt;strong&gt;without Jquery&lt;/strong&gt; is to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileList&quot; rel=&quot;noreferrer&quot;&gt;FileList&lt;/a&gt; object you get back from &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; when user selects a file(s) and then use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; rel=&quot;noreferrer&quot;&gt;Fetch&lt;/a&gt; to post the FileList wrapped around a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot; rel=&quot;noreferrer&quot;&gt;FormData&lt;/a&gt; object.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The input DOM element // &amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; inputElement = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input[type=file]&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Listen for a file submit from user&lt;/span&gt;\ninputElement.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;change&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\n    data.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file&apos;&lt;/span&gt;, inputElement.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n    data.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;imageName&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;flower&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// You can then post it to your server.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Fetch can accept an object of type FormData on its  body&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/uploadImage&apos;&lt;/span&gt;, {\n        &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n        &lt;span class=&quot;hljs-attr&quot;&gt;body&lt;/span&gt;: data\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To upload file asynchronously with Jquery use below steps:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt; In your project open Nuget manager and add package (jquery fileupload(only you need to write it in search box it will come up and install it.))\nURL: &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/blueimp/jQuery-File-Upload&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;step 2&lt;/strong&gt; Add below scripts in the HTML files, which are already added to the project by running above package:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;jquery.ui.widget.js&lt;/p&gt;\n&lt;p&gt;jquery.iframe-transport.js&lt;/p&gt;\n&lt;p&gt;jquery.fileupload.js&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;strong&gt;step 3&lt;/strong&gt;  Write file upload control as per below code:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;input id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;upload&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;upload&quot;&lt;/span&gt; type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; /&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;step 4&lt;/strong&gt;  write a js method as uploadFile as below:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uploadFile&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) {\n    \n            $(element).&lt;span class=&quot;hljs-title function_&quot;&gt;fileupload&lt;/span&gt;({\n    \n                &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;json&apos;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;../DocumentUpload/upload&apos;&lt;/span&gt;,\n                &lt;span class=&quot;hljs-attr&quot;&gt;autoUpload&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n                &lt;span class=&quot;hljs-attr&quot;&gt;add&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e, data&lt;/span&gt;) {           \n                  &lt;span class=&quot;hljs-comment&quot;&gt;// write code for implementing, while selecting a file. &lt;/span&gt;\n                  &lt;span class=&quot;hljs-comment&quot;&gt;// data represents the file data. &lt;/span&gt;\n                  &lt;span class=&quot;hljs-comment&quot;&gt;//below code triggers the action in mvc controller&lt;/span&gt;\n                  data.&lt;span class=&quot;hljs-property&quot;&gt;formData&lt;/span&gt; =\n                                    {\n                                     &lt;span class=&quot;hljs-attr&quot;&gt;files&lt;/span&gt;: data.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n                                    };\n                  data.&lt;span class=&quot;hljs-title function_&quot;&gt;submit&lt;/span&gt;();\n                },\n                &lt;span class=&quot;hljs-attr&quot;&gt;done&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e, data&lt;/span&gt;) {          \n                   &lt;span class=&quot;hljs-comment&quot;&gt;// after file uploaded&lt;/span&gt;\n                },\n                &lt;span class=&quot;hljs-attr&quot;&gt;progress&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e, data&lt;/span&gt;) {\n                    \n                   &lt;span class=&quot;hljs-comment&quot;&gt;// progress&lt;/span&gt;\n                },\n                &lt;span class=&quot;hljs-attr&quot;&gt;fail&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e, data&lt;/span&gt;) {\n                    \n                   &lt;span class=&quot;hljs-comment&quot;&gt;//fail operation&lt;/span&gt;\n                },\n                &lt;span class=&quot;hljs-attr&quot;&gt;stop&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n                    \n                  code &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; cancel operation\n                }\n            });\n        \n        };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;step 5&lt;/strong&gt; In ready function call element file upload to initiate the process as per below:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-title function_&quot;&gt;uploadFile&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#upload&apos;&lt;/span&gt;));\n\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;step 6&lt;/strong&gt; Write MVC controller and Action as per below:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DocumentUploadController&lt;/span&gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Controller&lt;/span&gt;\n    {       \n        \n        [&lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Web&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Mvc&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;HttpPost&lt;/span&gt;]\n        public &lt;span class=&quot;hljs-title class_&quot;&gt;JsonResult&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;upload&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ICollection&amp;lt;HttpPostedFileBase&amp;gt; files&lt;/span&gt;)\n        {\n            bool result = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (files != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt; || files.&lt;span class=&quot;hljs-property&quot;&gt;Count&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n                {\n                    foreach (&lt;span class=&quot;hljs-title class_&quot;&gt;HttpPostedFileBase&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; files)\n                    {\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (file.&lt;span class=&quot;hljs-property&quot;&gt;ContentLength&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n                            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Zero length file!&quot;&lt;/span&gt;);                       \n                        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n                            &lt;span class=&quot;hljs-comment&quot;&gt;//code for saving a file&lt;/span&gt;\n\n                    }\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;)\n                {\n                    result = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n                }\n            }\n\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;JsonResult&lt;/span&gt;()\n                {\n                    &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;=result\n                };\n\n\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can see a solved solution with a working demo &lt;a href=&quot;http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; that allows you to preview and submit form files to the server. For your case, you need to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Ajax_%28programming%29&quot; rel=&quot;noreferrer&quot;&gt;Ajax&lt;/a&gt; to facilitate the file upload to the server:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt; id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;formContent&quot;&lt;/span&gt; method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt; enctype=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;File&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;uploadbutton&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/form&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The data being submitted is a formdata. On your jQuery, use a form submit function instead of a button click to submit the form file as shown below.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#formContent&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;submit&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;){\n\n     e.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n     &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formdata = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n\n $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n     &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ajax_upload_image.php&quot;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: formdata,\n     &lt;span class=&quot;hljs-attr&quot;&gt;mimeTypes&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;cache&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n\n     &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;successfully submitted&quot;&lt;/span&gt;);\n\n     });\n   });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/&quot; rel=&quot;noreferrer&quot;&gt;View more details&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Sample: If you use jQuery, you can do easy to an upload file. This is a small and strong jQuery plugin, &lt;a href=&quot;http://jquery.malsup.com/form/&quot; rel=&quot;noreferrer&quot;&gt;http://jquery.malsup.com/form/&lt;/a&gt;.&lt;/p&gt;\n&lt;h3&gt;Example&lt;/h3&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $bar   = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.ProgressBar&apos;&lt;/span&gt;);\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.Form&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;ajaxForm&lt;/span&gt;({\n  &lt;span class=&quot;hljs-attr&quot;&gt;dataType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;json&apos;&lt;/span&gt;,\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;beforeSend&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xhr&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; percentVal = &lt;span class=&quot;hljs-string&quot;&gt;&apos;0%&apos;&lt;/span&gt;;\n    $bar.&lt;span class=&quot;hljs-title function_&quot;&gt;width&lt;/span&gt;(percentVal);\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;uploadProgress&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event, position, total, percentComplete&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; percentVal = percentComplete + &lt;span class=&quot;hljs-string&quot;&gt;&apos;%&apos;&lt;/span&gt;;\n    $bar.&lt;span class=&quot;hljs-title function_&quot;&gt;width&lt;/span&gt;(percentVal)\n  },\n\n  &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Response&lt;/span&gt;\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;I hope it would be helpful&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This is my solution.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;form enctype=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;    \n\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;control-label col-md-2&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;apta_Description&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Description&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;col-md-10&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;form-control text-box single-line&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;apta_Description&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;apta_Description&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and the js&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script&amp;gt;\n\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:button&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formData = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;form&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n            &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;@Url.Action(&quot;Save&quot;, &quot;Home&quot;)&apos;&lt;/span&gt;,  \n            &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,                \n            &lt;span class=&quot;hljs-attr&quot;&gt;success&lt;/span&gt;: completeHandler,\n            &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: formData,\n            &lt;span class=&quot;hljs-attr&quot;&gt;cache&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;contentType&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;processData&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n        });\n    });    \n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;completeHandler&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:)&quot;&lt;/span&gt;);\n    }    \n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Controller&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-title class_&quot;&gt;HttpPost&lt;/span&gt;]\npublic &lt;span class=&quot;hljs-title class_&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Save&lt;/span&gt;(string apta_Description, &lt;span class=&quot;hljs-title class_&quot;&gt;HttpPostedFileBase&lt;/span&gt; file)\n{\n    [...]\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#file_upload_1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;uploadify&lt;/span&gt;({\n        height        : &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;,\n        swf           : &lt;span class=&quot;hljs-string&quot;&gt;&apos;/uploadify/uploadify.swf&apos;&lt;/span&gt;,\n        uploader      : &lt;span class=&quot;hljs-string&quot;&gt;&apos;/uploadify/uploadify.php&apos;&lt;/span&gt;,\n        width         : &lt;span class=&quot;hljs-number&quot;&gt;120&lt;/span&gt;\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.uploadify.com/demos/&quot; rel=&quot;noreferrer&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Convert file to base64 using |HTML5&apos;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29&quot;&gt;readAsDataURL()&lt;/a&gt; or &lt;a href=&quot;http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript&quot;&gt;some base64 encoder&lt;/a&gt;. \n&lt;a href=&quot;http://jsfiddle.net/eliseosoto/JHQnk/&quot;&gt;Fiddle here&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; reader = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileReader&lt;/span&gt;();\n\n        reader.&lt;span class=&quot;hljs-property&quot;&gt;onload&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;readerEvt&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; binaryString = readerEvt.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;result&lt;/span&gt;;\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;base64textarea&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-title function_&quot;&gt;btoa&lt;/span&gt;(binaryString);\n        };\n\n        reader.&lt;span class=&quot;hljs-title function_&quot;&gt;readAsBinaryString&lt;/span&gt;(file);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then to retrieve:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data:application/octet-stream;base64,&quot;&lt;/span&gt; + base64);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can pass additional parameters along with file name on making asynchronous upload using XMLHttpRequest (without flash and iframe dependency). Append the additional parameter value with FormData and send the upload request.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formData = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\nformData.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;parameter1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;value1&apos;&lt;/span&gt;);\nformData.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;parameter2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;value2&apos;&lt;/span&gt;); \nformData.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;file&apos;&lt;/span&gt;, $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input[type=file]&apos;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n\n$.&lt;span class=&quot;hljs-title function_&quot;&gt;ajax&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;post back url&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;data&lt;/span&gt;: formData,\n&lt;span class=&quot;hljs-comment&quot;&gt;// other attributes of AJAX&lt;/span&gt;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Also, Syncfusion JavaScript UI file upload provides solution for this scenario simply using event argument. you can find documentation &lt;a href=&quot;https://ej2.syncfusion.com/documentation/uploader/how-to/#add-additional-data-on-upload&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt; and further details about this control here enter link description &lt;a href=&quot;https://www.syncfusion.com/javascript-ui-controls/file-upload&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Look for &lt;em&gt;Handling the upload process for a file, asynchronously&lt;/em&gt; in here:\n&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Sample from the link&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?php\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isset&lt;/span&gt;($_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myFile&apos;&lt;/span&gt;])) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Example:&lt;/span&gt;\n    &lt;span class=&quot;hljs-title function_&quot;&gt;move_uploaded_file&lt;/span&gt;($_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myFile&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;tmp_name&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;uploads/&quot;&lt;/span&gt; . $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&apos;myFile&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]);\n    exit;\n}\n?&amp;gt;&amp;lt;!&lt;span class=&quot;hljs-variable constant_&quot;&gt;DOCTYPE&lt;/span&gt; html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;dnd binary upload&amp;lt;/title&amp;gt;\n    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;\n    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\n        function sendFile(file) {\n            var uri = &quot;/index.php&quot;;\n            var xhr = new XMLHttpRequest();\n            var fd = new FormData();\n\n            xhr.open(&quot;POST&quot;, uri, true);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200) {\n                    // Handle response.\n                    alert(xhr.responseText); // handle response.\n                }\n            };\n            fd.append(&apos;myFile&apos;, file);\n            // Initiate a multipart/form-data upload\n            xhr.send(fd);\n        }\n\n        window.onload = function() {\n            var dropzone = document.getElementById(&quot;dropzone&quot;);\n            dropzone.ondragover = dropzone.ondragenter = function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n\n            dropzone.ondrop = function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                var filesArray = event.dataTransfer.files;\n                for (var i=0; i&amp;lt;filesArray.length; i++) {\n                    sendFile(filesArray[i]);\n                }\n            }\n        }\n    &amp;lt;/script&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;\n    &amp;lt;div&amp;gt;\n        &amp;lt;div id=&quot;dropzone&quot; style=&quot;margin:30px; width:500px; height:300px; border:1px dotted grey;&quot;&amp;gt;Drag &amp;amp; drop your file here...&amp;lt;/div&amp;gt;\n    &amp;lt;/div&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;strong&gt;newer&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot; rel=&quot;noreferrer&quot;&gt;Fetch API&lt;/a&gt; by JavaScript. Like this:                             &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uploadButtonCLicked&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input[type=&quot;file&quot;]&apos;&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;fetch&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/url&apos;&lt;/span&gt;, {\n      &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;POST&apos;&lt;/span&gt;,\n      &lt;span class=&quot;hljs-attr&quot;&gt;body&lt;/span&gt;: input.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n    }).&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; res.&lt;span class=&quot;hljs-title function_&quot;&gt;json&lt;/span&gt;())   &lt;span class=&quot;hljs-comment&quot;&gt;// you can do something with response&lt;/span&gt;\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Error:&apos;&lt;/span&gt;, error))\n      .&lt;span class=&quot;hljs-title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;response&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Success:&apos;&lt;/span&gt;, response));\n}                               \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Advantage:&lt;/strong&gt; Fetch API is &lt;strong&gt;natively supported&lt;/strong&gt; by all modern browsers, so you don&apos;t have to import anything. Also, note that fetch() returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; rel=&quot;noreferrer&quot;&gt;Promise&lt;/a&gt; which is then handled by using &lt;code&gt;.then(..code to handle response..)&lt;/code&gt; asynchronously. &lt;/p&gt;\n    ","\n&lt;p&gt;Using &lt;strong&gt;HTML5&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;, uploading async is quite easy, I create the uploading logic along with your html, this is not fully working as it needs the api, but demonstrate how it works, if you have the endpoint called &lt;code&gt;/upload&lt;/code&gt; from root of your website, this code should work for you:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;asyncFileUpload&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fileInput = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; file = fileInput.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uri = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/upload&quot;&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n  xhr.&lt;span class=&quot;hljs-property&quot;&gt;upload&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;onprogress&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; percentage = e.&lt;span class=&quot;hljs-property&quot;&gt;loaded&lt;/span&gt; / e.&lt;span class=&quot;hljs-property&quot;&gt;total&lt;/span&gt;;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(percentage);\n  };\n  xhr.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xhr.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; xhr.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file uploaded&quot;&lt;/span&gt;);\n    }\n  };\n  xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, uri, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n  xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;setRequestHeader&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;X-FileName&quot;&lt;/span&gt;, file.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);\n  xhr.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(file);\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;File&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;asyncFileUpload()&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;upload&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Upload&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;Also some further information about XMLHttpReques:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;The XMLHttpRequest Object&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;All modern browsers support the XMLHttpRequest object.\nThe XMLHttpRequest object can be used to exchange data with a web\nserver behind the scenes. This means that it is possible to update\nparts of a web page, without reloading the whole page.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Create an XMLHttpRequest Object&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;All modern browsers (Chrome, Firefox,\nIE7+, Edge, Safari, Opera) have a built-in XMLHttpRequest object.&lt;/p&gt;\n&lt;p&gt;Syntax for creating an XMLHttpRequest object:&lt;/p&gt;\n&lt;p&gt;variable = new XMLHttpRequest();&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;br&gt; \n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Access Across Domains&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;For security reasons, modern browsers do not\nallow access across domains.&lt;/p&gt;\n&lt;p&gt;This means that both the web page and the XML file it tries to load,\nmust be located on the same server.&lt;/p&gt;\n&lt;p&gt;The examples on W3Schools all open XML files located on the W3Schools\ndomain.&lt;/p&gt;\n&lt;p&gt;If you want to use the example above on one of your own web pages, the\nXML files you load must be located on your own server.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;For more details, you can continue reading &lt;a href=&quot;https://www.w3schools.com/js/js_ajax_http.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;...&lt;/p&gt;\n    ","\n&lt;p&gt;For PHP, look for &lt;a href=&quot;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&quot; rel=&quot;noreferrer&quot;&gt;https://developer.hyvor.com/php/image-upload-ajax-php-mysql&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;html&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Image Upload with AJAX, PHP and MYSQL&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;body&amp;gt;\n&amp;lt;form onsubmit=&quot;submitForm(event);&quot;&amp;gt;\n    &amp;lt;input type=&quot;file&quot; name=&quot;image&quot; id=&quot;image-selecter&quot; accept=&quot;image/*&quot;&amp;gt;\n    &amp;lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Upload Image&quot;&amp;gt;\n&amp;lt;/form&amp;gt;\n&amp;lt;div id=&quot;uploading-text&quot; style=&quot;display:none;&quot;&amp;gt;Uploading...&amp;lt;/div&amp;gt;\n&amp;lt;img id=&quot;preview&quot;&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;JAVASCRIPT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; previewImage = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;preview&quot;&lt;/span&gt;),  \n    uploadingText = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;uploading-text&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;submitForm&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;event&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// prevent default form submission&lt;/span&gt;\n    event.&lt;span class=&quot;hljs-title function_&quot;&gt;preventDefault&lt;/span&gt;();\n    &lt;span class=&quot;hljs-title function_&quot;&gt;uploadImage&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uploadImage&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; imageSelecter = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;image-selecter&quot;&lt;/span&gt;),\n        file = imageSelecter.&lt;span class=&quot;hljs-property&quot;&gt;files&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!file) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please select a file&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// clear the previous image&lt;/span&gt;\n    previewImage.&lt;span class=&quot;hljs-title function_&quot;&gt;removeAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;src&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// show uploading text&lt;/span&gt;\n    uploadingText.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;block&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// create form data and append the file&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; formData = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FormData&lt;/span&gt;();\n    formData.&lt;span class=&quot;hljs-title function_&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;image&quot;&lt;/span&gt;, file);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// do the ajax part&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ajax = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;XMLHttpRequest&lt;/span&gt;();\n    ajax.&lt;span class=&quot;hljs-property&quot;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;readyState&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; === &lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; json = &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;responseText&lt;/span&gt;);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!json || json.&lt;span class=&quot;hljs-property&quot;&gt;status&lt;/span&gt; !== &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) \n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;uploadError&lt;/span&gt;(json.&lt;span class=&quot;hljs-property&quot;&gt;error&lt;/span&gt;);\n\n            &lt;span class=&quot;hljs-title function_&quot;&gt;showImage&lt;/span&gt;(json.&lt;span class=&quot;hljs-property&quot;&gt;url&lt;/span&gt;);\n        }\n    }\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;upload.php&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n    ajax.&lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(formData); &lt;span class=&quot;hljs-comment&quot;&gt;// send the form data&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;?php\n$host = &lt;span class=&quot;hljs-string&quot;&gt;&apos;localhost&apos;&lt;/span&gt;;\n$user = &lt;span class=&quot;hljs-string&quot;&gt;&apos;user&apos;&lt;/span&gt;;\n$password = &lt;span class=&quot;hljs-string&quot;&gt;&apos;password&apos;&lt;/span&gt;;\n$database = &lt;span class=&quot;hljs-string&quot;&gt;&apos;database&apos;&lt;/span&gt;;\n$mysqli = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mysqli&lt;/span&gt;($host, $user, $password, $database);\n\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;empty&lt;/span&gt;($_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&apos;image&apos;&lt;/span&gt;])) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Image file is missing&apos;&lt;/span&gt;);\n    }\n    $image = $_FILES[&lt;span class=&quot;hljs-string&quot;&gt;&apos;image&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// check INI error&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt;] !== &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt;] === &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) \n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Max upload size exceeded&apos;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Image uploading error: INI Error&apos;&lt;/span&gt;);\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// check if the file exists&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;file_exists&lt;/span&gt;($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;tmp_name&apos;&lt;/span&gt;]))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Image file is missing in the server&apos;&lt;/span&gt;);\n    $maxFileSize = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;10e6&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// in bytes&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;size&apos;&lt;/span&gt;] &amp;gt; $maxFileSize)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Max size limit exceeded&apos;&lt;/span&gt;); \n    &lt;span class=&quot;hljs-comment&quot;&gt;// check if uploaded file is an image&lt;/span&gt;\n    $imageData = &lt;span class=&quot;hljs-title function_&quot;&gt;getimagesize&lt;/span&gt;($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;tmp_name&apos;&lt;/span&gt;]);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!$imageData) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Invalid image&apos;&lt;/span&gt;);\n    $mimeType = $imageData[&lt;span class=&quot;hljs-string&quot;&gt;&apos;mime&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// validate mime type&lt;/span&gt;\n    $allowedMimeTypes = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;image/jpeg&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;image/png&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;image/gif&apos;&lt;/span&gt;];\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;in_array&lt;/span&gt;($mimeType, $allowedMimeTypes)) \n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Only JPEG, PNG and GIFs are allowed&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// nice! it&apos;s a valid image&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// get file extension (ex: jpg, png) not (.jpg)&lt;/span&gt;\n    $fileExtention = &lt;span class=&quot;hljs-title function_&quot;&gt;strtolower&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;pathinfo&lt;/span&gt;($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;] ,&lt;span class=&quot;hljs-variable constant_&quot;&gt;PATHINFO_EXTENSION&lt;/span&gt;));\n    &lt;span class=&quot;hljs-comment&quot;&gt;// create random name for your image&lt;/span&gt;\n    $fileName = &lt;span class=&quot;hljs-title function_&quot;&gt;round&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;microtime&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)) . &lt;span class=&quot;hljs-title function_&quot;&gt;mt_rand&lt;/span&gt;() . &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt; . $fileExtention; &lt;span class=&quot;hljs-comment&quot;&gt;// anyfilename.jpg&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Create the path starting from DOCUMENT ROOT of your website&lt;/span&gt;\n    $path = &lt;span class=&quot;hljs-string&quot;&gt;&apos;/examples/image-upload/images/&apos;&lt;/span&gt; . $fileName;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// file path in the computer - where to save it &lt;/span&gt;\n    $destination = $_SERVER[&lt;span class=&quot;hljs-string&quot;&gt;&apos;DOCUMENT_ROOT&apos;&lt;/span&gt;] . $path;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-title function_&quot;&gt;move_uploaded_file&lt;/span&gt;($image[&lt;span class=&quot;hljs-string&quot;&gt;&apos;tmp_name&apos;&lt;/span&gt;], $destination))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Error in moving the uploaded file&apos;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// create the url&lt;/span&gt;\n    $protocol = &lt;span class=&quot;hljs-title function_&quot;&gt;stripos&lt;/span&gt;($_SERVER[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_PROTOCOL&apos;&lt;/span&gt;],&lt;span class=&quot;hljs-string&quot;&gt;&apos;https&apos;&lt;/span&gt;) === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;hljs-string&quot;&gt;&apos;https://&apos;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot;&gt;&apos;http://&apos;&lt;/span&gt;;\n    $domain = $protocol . $_SERVER[&lt;span class=&quot;hljs-string&quot;&gt;&apos;SERVER_NAME&apos;&lt;/span&gt;];\n    $url = $domain . $path;\n    $stmt = $mysqli -&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;INSERT INTO image_uploads (url) VALUES (?)&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (\n        $stmt &amp;amp;&amp;amp;\n        $stmt -&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind_param&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, $url) &amp;amp;&amp;amp;\n        $stmt -&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;execute&lt;/span&gt;()\n    ) {\n        &lt;span class=&quot;hljs-title function_&quot;&gt;exit&lt;/span&gt;(\n            &lt;span class=&quot;hljs-title function_&quot;&gt;json_encode&lt;/span&gt;(\n                &lt;span class=&quot;hljs-title function_&quot;&gt;array&lt;/span&gt;(\n                    &lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,\n                    &lt;span class=&quot;hljs-string&quot;&gt;&apos;url&apos;&lt;/span&gt; =&amp;gt; $url\n                )\n            )\n        );\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Error in saving into the database&apos;&lt;/span&gt;);\n\n} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;Exception&lt;/span&gt; $e) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;json_encode&lt;/span&gt;(\n        array (\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;status&apos;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,\n            &lt;span class=&quot;hljs-string&quot;&gt;&apos;error&apos;&lt;/span&gt; =&amp;gt; $e -&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getMessage&lt;/span&gt;()\n        )\n    ));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can do the Asynchronous Multiple File uploads using JavaScript or jQuery and that to without using any plugin. You can also show the real time progress of file upload in the progress control. I have come across 2 nice links -&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.yogihosting.com/multi-file-upload-with-progress-bar-in-asp-net/&quot; rel=&quot;noreferrer&quot;&gt;ASP.NET Web Forms based Mulitple File Upload Feature with Progress Bar&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://www.yogihosting.com/jquery-file-upload/&quot; rel=&quot;noreferrer&quot;&gt;ASP.NET MVC based Multiple File Upload made in jQuery&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The server side language is C# but you can do some modification for making it work with other language like PHP.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;File Upload ASP.NET Core MVC:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In the View create file upload control in html:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;form method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&lt;/span&gt; asp-action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Add&quot;&lt;/span&gt; enctype=&lt;span class=&quot;hljs-string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt;&amp;gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mediaUpload&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&amp;lt;/form&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now create action method in your controller:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;[&lt;span class=&quot;hljs-title class_&quot;&gt;HttpPost&lt;/span&gt;]\npublic &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IActionResult&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;IFormFile&lt;/span&gt;[] mediaUpload)\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;//looping through all the files&lt;/span&gt;\n    foreach (&lt;span class=&quot;hljs-title class_&quot;&gt;IFormFile&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mediaUpload)\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//saving the files&lt;/span&gt;\n        string path = &lt;span class=&quot;hljs-title class_&quot;&gt;Path&lt;/span&gt;.&lt;span class=&quot;hljs-title class_&quot;&gt;Combine&lt;/span&gt;(hostingEnvironment.&lt;span class=&quot;hljs-property&quot;&gt;WebRootPath&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;some-folder-path&quot;&lt;/span&gt;); \n        using (&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; stream = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FileStream&lt;/span&gt;(path, &lt;span class=&quot;hljs-title class_&quot;&gt;FileMode&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;Create&lt;/span&gt;))\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; file.&lt;span class=&quot;hljs-title class_&quot;&gt;CopyToAsync&lt;/span&gt;(stream);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;hostingEnvironment variable is of type IHostingEnvironment which can be injected to the controller using dependency injection, like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;private &lt;span class=&quot;hljs-title class_&quot;&gt;IHostingEnvironment&lt;/span&gt; hostingEnvironment;\npublic &lt;span class=&quot;hljs-title class_&quot;&gt;MediaController&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;IHostingEnvironment&lt;/span&gt; environment)\n{\n    hostingEnvironment = environment;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It is an old question, but still has no answer correct answer, so:&lt;/p&gt;\n\n&lt;p&gt;Have you tried &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload/wiki/Submit-files-asynchronously&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery-File-Upload&lt;/a&gt;?&lt;/p&gt;\n\n&lt;p&gt;Here is an example from the link above that might solve your problem:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#fileupload&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;fileupload&lt;/span&gt;({\n    &lt;span class=&quot;hljs-attr&quot;&gt;add&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e, data&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; that = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n        $.&lt;span class=&quot;hljs-title function_&quot;&gt;getJSON&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/example/url&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;result&lt;/span&gt;) {\n            data.&lt;span class=&quot;hljs-property&quot;&gt;formData&lt;/span&gt; = result; &lt;span class=&quot;hljs-comment&quot;&gt;// e.g. {id: 123}&lt;/span&gt;\n            $.blueimp.&lt;span class=&quot;hljs-property&quot;&gt;fileupload&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;\n                .&lt;span class=&quot;hljs-property&quot;&gt;options&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;add&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(that, e, data);\n        });\n    } \n});\n&lt;/code&gt;&lt;/pre&gt;\n    "],"159":["\n&lt;p&gt;This problem plagues the participants of this site, and many others.&lt;/p&gt;\n\n&lt;p&gt;You have listed the five main cases of &lt;code&gt;CHARACTER SET&lt;/code&gt; troubles.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Best Practice&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Going forward, it is best to use &lt;code&gt;CHARACTER SET utf8mb4&lt;/code&gt; and &lt;code&gt;COLLATION utf8mb4_unicode_520_ci&lt;/code&gt;. (There is a newer version of the Unicode collation in the pipeline.)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;utf8mb4&lt;/code&gt; is a superset of &lt;code&gt;utf8&lt;/code&gt; in that it handles 4-byte utf8 codes, which are needed by Emoji and some of Chinese.&lt;/p&gt;\n\n&lt;p&gt;Outside of MySQL, &quot;UTF-8&quot; refers to all size encodings, hence effectively the same as MySQL&apos;s &lt;code&gt;utf8mb4&lt;/code&gt;, not &lt;code&gt;utf8&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I will try to use those spellings and capitalizations to distinguish inside versus outside MySQL in the following.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Overview of what you &lt;em&gt;should&lt;/em&gt; do&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Have your editor, etc. set to UTF-8.&lt;/li&gt;\n&lt;li&gt;HTML forms should start like &lt;code&gt;&amp;lt;form accept-charset=&quot;UTF-8&quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Have your bytes encoded as UTF-8.&lt;/li&gt;\n&lt;li&gt;Establish UTF-8 as the encoding being used in the client.&lt;/li&gt;\n&lt;li&gt;Have the column/table declared &lt;code&gt;CHARACTER SET utf8mb4&lt;/code&gt; (Check with &lt;code&gt;SHOW CREATE TABLE&lt;/code&gt;.)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&amp;lt;meta charset=UTF-8&amp;gt;&lt;/code&gt; at the beginning of HTML&lt;/li&gt;\n&lt;li&gt;Stored Routines acquire the current charset/collation.  They may need rebuilding.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/279170/how-to-support-utf-8-completely-in-a-web-application&quot;&gt;UTF-8 all the way through&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://mysql.rjweb.org/doc.php/charcoll#python&quot; rel=&quot;noreferrer&quot;&gt;More details for computer languages&lt;/a&gt; (and its following sections)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Test the data&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Viewing the data with a tool or with &lt;code&gt;SELECT&lt;/code&gt; cannot be trusted.\nToo many such clients, especially browsers, try to compensate for incorrect encodings, and show you correct text even if the database is mangled.\nSo, pick a table and column that has some non-English text and do&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; col, HEX(col) &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; tbl &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The HEX for correctly stored UTF-8 will be&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;For a blank space (in any language):  &lt;code&gt;20&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;For English:  &lt;code&gt;4x&lt;/code&gt;, &lt;code&gt;5x&lt;/code&gt;, &lt;code&gt;6x&lt;/code&gt;, or &lt;code&gt;7x&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;For most of Western Europe, accented letters should be &lt;code&gt;Cxyy&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Cyrillic, Hebrew, and Farsi/Arabic:  &lt;code&gt;Dxyy&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Most of Asia:  &lt;code&gt;Exyyzz&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Emoji and some of Chinese:  &lt;code&gt;F0yyzzww&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://mysql.rjweb.org/doc.php/charcoll#diagnosing_charset_issues&quot; rel=&quot;noreferrer&quot;&gt;More details&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Specific causes and fixes of the problems seen&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Truncated&lt;/strong&gt; text (&lt;code&gt;Se&lt;/code&gt; for &lt;code&gt;Señor&lt;/code&gt;):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The bytes to be stored are not encoded as utf8mb4. Fix this.&lt;/li&gt;\n&lt;li&gt;Also, check that the connection during reading is UTF-8.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Black Diamonds&lt;/strong&gt; with question marks (&lt;code&gt;Seor&lt;/code&gt; for &lt;code&gt;Señor&lt;/code&gt;);\none of these cases exists:&lt;/p&gt;\n\n&lt;p&gt;Case 1 (original bytes were &lt;em&gt;not&lt;/em&gt; UTF-8):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The bytes to be stored are not encoded as utf8. Fix this.&lt;/li&gt;\n&lt;li&gt;The connection (or &lt;code&gt;SET NAMES&lt;/code&gt;) for the &lt;code&gt;INSERT&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;SELECT&lt;/code&gt; was not utf8/utf8mb4.  Fix this.&lt;/li&gt;\n&lt;li&gt;Also, check that the column in the database is &lt;code&gt;CHARACTER SET utf8&lt;/code&gt; (or utf8mb4).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Case 2 (original bytes &lt;em&gt;were&lt;/em&gt; UTF-8):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The connection (or &lt;code&gt;SET NAMES&lt;/code&gt;) for the &lt;code&gt;SELECT&lt;/code&gt; was not utf8/utf8mb4.  Fix this.&lt;/li&gt;\n&lt;li&gt;Also, check that the column in the database is &lt;code&gt;CHARACTER SET utf8&lt;/code&gt; (or utf8mb4).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Black diamonds occur only when the browser is set to &lt;code&gt;&amp;lt;meta charset=UTF-8&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Question Marks&lt;/strong&gt; (regular ones, not black diamonds) (&lt;code&gt;Se?or&lt;/code&gt; for &lt;code&gt;Señor&lt;/code&gt;):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The bytes to be stored are not encoded as utf8/utf8mb4.  Fix this.&lt;/li&gt;\n&lt;li&gt;The column in the database is not &lt;code&gt;CHARACTER SET utf8&lt;/code&gt; (or utf8mb4).  Fix this.  (Use &lt;code&gt;SHOW CREATE TABLE&lt;/code&gt;.)&lt;/li&gt;\n&lt;li&gt;Also, check that the connection during reading is UTF-8.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Mojibake&lt;/strong&gt; (&lt;code&gt;SeÃ±or&lt;/code&gt; for &lt;code&gt;Señor&lt;/code&gt;):\n(This discussion also applies to &lt;strong&gt;Double Encoding&lt;/strong&gt;, which is not necessarily visible.)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The bytes to be stored need to be UTF-8-encoded.  Fix this.&lt;/li&gt;\n&lt;li&gt;The connection when &lt;code&gt;INSERTing&lt;/code&gt; and &lt;code&gt;SELECTing&lt;/code&gt; text needs to specify utf8 or utf8mb4.  Fix this.&lt;/li&gt;\n&lt;li&gt;The column needs to be declared &lt;code&gt;CHARACTER SET utf8&lt;/code&gt; (or utf8mb4).  Fix this.&lt;/li&gt;\n&lt;li&gt;HTML should start with &lt;code&gt;&amp;lt;meta charset=UTF-8&amp;gt;&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If the data looks correct, but won&apos;t sort correctly, then\neither you have picked the wrong collation,\nor there is no collation that suits your need,\nor you have &lt;strong&gt;Double Encoding&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Double Encoding&lt;/strong&gt; can be confirmed by doing the &lt;code&gt;SELECT .. HEX ..&lt;/code&gt; described above.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;é should come back C3A9, but instead shows C383C2A9\nThe Emoji  should come back F09F91BD, but comes back C3B0C5B8E28098C2BD\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is, the hex is about twice as long as it should be.\nThis is caused by converting from latin1 (or whatever) to utf8, then treating those\nbytes as if they were latin1 and repeating the conversion.\nThe sorting (and comparing) does not work correctly because it is, for example,\nsorting as if the string were &lt;code&gt;SeÃ±or&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Fixing the Data, where possible&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For &lt;strong&gt;Truncation&lt;/strong&gt; and &lt;strong&gt;Question Marks&lt;/strong&gt;, the data is lost.&lt;/p&gt;\n\n&lt;p&gt;For &lt;strong&gt;Mojibake&lt;/strong&gt; / &lt;strong&gt;Double Encoding&lt;/strong&gt;, ...&lt;/p&gt;\n\n&lt;p&gt;For &lt;strong&gt;Black Diamonds&lt;/strong&gt;, ...&lt;/p&gt;\n\n&lt;p&gt;The &lt;strong&gt;Fixes&lt;/strong&gt; are listed here.  (5 different fixes for 5 different situations; pick carefully):  &lt;a href=&quot;http://mysql.rjweb.org/doc.php/charcoll#fixes_for_various_cases&quot; rel=&quot;noreferrer&quot;&gt;http://mysql.rjweb.org/doc.php/charcoll#fixes_for_various_cases&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I had similar issues with two of my projects, after a server migration. After searching and trying a lot of solutions, I came across with this one:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;mysqli_set_charset($con,&quot;utf8&quot;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After adding this line to my configuration file, everything works fine!&lt;/p&gt;\n&lt;p&gt;I found this solution for &lt;a href=&quot;https://en.wikipedia.org/wiki/MySQLi&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQLi&lt;/a&gt;&lt;em&gt;&lt;a href=&quot;https://www.w3schools.com/PHP/func_mysqli_set_charset.asp&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP mysqli set_charset() Function&lt;/a&gt;&lt;/em&gt;when I was looking to solve an insert from an HTML query.&lt;/p&gt;\n    ","\n&lt;p&gt;I was also searching for the same issue. It took me nearly one month to find the appropriate solution.&lt;/p&gt;\n&lt;p&gt;First of all, you will have to update you database will all the recent CHARACTER and COLLATION to utf8mb4 or at least which support UTF-8 data.&lt;/p&gt;\n&lt;p&gt;For Java:&lt;/p&gt;\n&lt;p&gt;while making a JDBC connection, add this to the connection URL &lt;em&gt;useUnicode=yes&amp;amp;characterEncoding=UTF-8&lt;/em&gt; as parameters and it will work.&lt;/p&gt;\n&lt;p&gt;For Python:&lt;/p&gt;\n&lt;p&gt;Before querying into the database, try enforcing this over the cursor&lt;/p&gt;\n&lt;p&gt;*\n&lt;code&gt;cursor.execute(&apos;SET NAMES utf8mb4&apos;)&lt;/code&gt;\n&lt;code&gt;cursor.execute(&quot;SET CHARACTER SET utf8mb4&quot;)&lt;/code&gt;\n&lt;code&gt;cursor.execute(&quot;SET character_set_connection=utf8mb4&quot;)&lt;/code&gt;\n*&lt;/p&gt;\n&lt;p&gt;If it does not work, happy hunting for the right solution.&lt;/p&gt;\n    ","\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Set your code IDE language to UTF-8&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; to your webpage header where you collect data form.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Check your MySQL table definition looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; your_table (\n   ...\n ) ENGINE&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;InnoDB &lt;span class=&quot;hljs-keyword&quot;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;utf8\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you are using &lt;a href=&quot;https://en.wikipedia.org/wiki/PHP#Development_and_community&quot; rel=&quot;nofollow noreferrer&quot;&gt;PDO&lt;/a&gt;, make sure&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;MYSQL_ATTR_INIT_COMMAND&lt;/span&gt;=&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES utf8&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$dbL&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$pass&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$options&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;If you already got a large database with above problem, you can try SIDU to export with correct charset, and import back with UTF-8.&lt;/p&gt;\n    ","\n&lt;p&gt;Depending on how the server is setup, you have to change the encode accordingly. utf8 from what you said should work the best. However, if you&apos;re getting weird characters, it might help if you change the webpage encoding to ANSI.&lt;/p&gt;\n&lt;p&gt;This helped me when I was setting up a PHP &lt;a href=&quot;https://en.wikipedia.org/wiki/MySQLi&quot; rel=&quot;nofollow noreferrer&quot;&gt;MySQLi&lt;/a&gt;. This might help you understand more: &lt;em&gt;&lt;a href=&quot;https://superuser.com/questions/762473/ansi-to-utf-8-in-notepad&quot;&gt;ANSI to UTF-8 in Notepad++&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n    "],"160":["\n&lt;p&gt;As per the best practices:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If your usecase is to validate the &lt;strong&gt;presence&lt;/strong&gt; of any element you need to induce &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html#module-selenium.webdriver.support.wait&quot; rel=&quot;noreferrer&quot;&gt;WebDriverWait&lt;/a&gt; setting the &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions&quot; rel=&quot;noreferrer&quot;&gt;expected_conditions&lt;/a&gt; as &lt;a href=&quot;https://selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.presence_of_element_located&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;presence_of_element_located()&lt;/code&gt;&lt;/a&gt; which is the expectation for checking that an element is present on the DOM of a page. This does not necessarily mean that the element is visible. So the effective line of code will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;WebDriverWait(browser, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(EC.presence_of_element_located((By.CSS_SELECTOR, &lt;span class=&quot;hljs-string&quot;&gt;&quot;.reply-button&quot;&lt;/span&gt;))).click()\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If your usecase is to &lt;strong&gt;extract any attribute&lt;/strong&gt; of any element you need to induce &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html#module-selenium.webdriver.support.wait&quot; rel=&quot;noreferrer&quot;&gt;WebDriverWait&lt;/a&gt; setting the &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions&quot; rel=&quot;noreferrer&quot;&gt;expected_conditions&lt;/a&gt; as &lt;a href=&quot;https://selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.visibility_of_element_located&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;visibility_of_element_located(locator)&lt;/code&gt;&lt;/a&gt; which is an expectation for checking that an element is present on the DOM of a page and visible. Visibility means that the element is not only displayed but also has a height and width that is greater than 0. So in your usecase effectively the line of code will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;email = WebDriverWait(driver, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(EC.visibility_of_element_located((By.CSS_SELECTOR, &lt;span class=&quot;hljs-string&quot;&gt;&quot;element_css&quot;&lt;/span&gt;))).get_attribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If your usecase is to invoke &lt;strong&gt;&lt;code&gt;click()&lt;/code&gt;&lt;/strong&gt; on any element you need to induce &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.wait.html#module-selenium.webdriver.support.wait&quot; rel=&quot;noreferrer&quot;&gt;WebDriverWait&lt;/a&gt; setting the &lt;a href=&quot;https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions&quot; rel=&quot;noreferrer&quot;&gt;expected_conditions&lt;/a&gt; as &lt;a href=&quot;https://selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#selenium.webdriver.support.expected_conditions.element_to_be_clickable&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;element_to_be_clickable()&lt;/code&gt;&lt;/a&gt; which is an expectation for for checking an element is visible and enabled such that you can click it. So in your usecase effectively the line of code will be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;WebDriverWait(browser, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;).until(EC.element_to_be_clickable((By.CSS_SELECTOR, &lt;span class=&quot;hljs-string&quot;&gt;&quot;.reply-button&quot;&lt;/span&gt;))).click()\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;h2&gt;References&lt;/h2&gt;\n\n&lt;p&gt;You can find a couple of detailed discussion in:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/49775502/webdriverwait-not-working-as-expected/49775808#49775808&quot;&gt;WebDriverWait not working as expected&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/50610553/selenium-check-for-the-presence-of-element/50621712#50621712&quot;&gt;Selenium: Check for the presence of element&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;After clicking the &lt;em&gt;Reply&lt;/em&gt; button, use &lt;code&gt;.visibility_of_element_located&lt;/code&gt; like below:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;browser.find_element_by_css_selector(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.reply-button&quot;&lt;/span&gt;).click()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Wait for initialize, in seconds&lt;/span&gt;\nwait = WebDriverWait(browser, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\n\nemail = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.anonemail&apos;&lt;/span&gt;))).get_attribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(email)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Following import:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; selenium.webdriver.common.by &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; By\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; WebDriverWait\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; selenium.webdriver.support &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; expected_conditions &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; EC\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://selenium-python.readthedocs.io/waits.html&quot; rel=&quot;noreferrer&quot;&gt;Waits documentation&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use waits. Check for more information in &lt;em&gt;&lt;a href=&quot;https://selenium-python.readthedocs.io/waits.html&quot; rel=&quot;noreferrer&quot;&gt;Selenium waits&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;In the example below we are waiting 10 seconds for the element to be visible, using the function &lt;em&gt;visibility_of_element_located&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;driver = webdriver.Firefox()\ndriver.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://somedomain/url_that_delays_loading&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n    element = WebDriverWait(driver, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;).until(\n        EC.visibility_of_element_located((By.ID, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myDynamicElement&quot;&lt;/span&gt;))\n    )\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;:\n    driver.quit()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use &lt;a href=&quot;https://selenium-python.readthedocs.io/waits.html#implicit-waits&quot; rel=&quot;nofollow noreferrer&quot;&gt;implicitly_wait&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; webdriver\n\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;)\ndriver.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://url&quot;&lt;/span&gt;)\ndriver.find_element_by_id(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id_of_element&quot;&lt;/span&gt;).click()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It waits until element is loaded.&lt;/p&gt;\n&lt;p&gt;In your case the implementation would be,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;browser.implicitly_wait(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)\nbrowser.find_element_by_css_selector(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.reply-button&quot;&lt;/span&gt;).click()\nemail = browser.find_element_by_css_selector(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.anonemail&quot;&lt;/span&gt;).get_attribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I also had a similar problem to yours, I tried using &lt;code&gt;implicit_wait()&lt;/code&gt; and &lt;code&gt;WebDriverWait&lt;/code&gt; but they did not work.\nSo I solved setting the &lt;code&gt;implicit_wait(10)&lt;/code&gt; in the &lt;code&gt;web driver&lt;/code&gt; instance and using this snippet to click on the button:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;element = driver.find_elements_by_xpath(&lt;span class=&quot;hljs-string&quot;&gt;&quot;//button[contains(string(), &apos;Log In&apos;)]&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\ndriver.execute_script(&lt;span class=&quot;hljs-string&quot;&gt;&quot;arguments[0].click();&quot;&lt;/span&gt;, element)\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"91","randomQuestions":[{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"What is a StackOverflowError?","slug":"what-is-a-stackoverflowerror-1657388319634"},{"title":"jQuery Ajax File Upload","slug":"jquery-ajax-file-upload-1657387368970"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"What is __init__.py for?","slug":"what-is-__init__.py-for-1657388415243"},{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"},{"title":"Why does Tkinter image not show up if created in a function?","slug":"why-does-tkinter-image-not-show-up-if-created-in-a-function-1657387388233"},{"title":"C++ Singleton design pattern","slug":"c++-singleton-design-pattern-1657387830040"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"Why is setTimeout(fn, 0) sometimes useful?","slug":"why-is-settimeout(fn-0)-sometimes-useful-1657388379869"},{"title":"Using Auto Layout in UITableView for dynamic cell layouts & variable row heights","slug":"using-auto-layout-in-uitableview-for-dynamic-cell-layouts-and-variable-row-heights-1657387722263"},{"title":"What is a plain English explanation of \"Big O\" notation?","slug":"what-is-a-plain-english-explanation-of-\"big-o\"-notation-1657387641953"},{"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960"},{"title":"How to choose the right bean scope?","slug":"how-to-choose-the-right-bean-scope-1657387596513"},{"title":"Get the row(s) which have the max value in groups using groupby","slug":"get-the-row(s)-which-have-the-max-value-in-groups-using-groupby-1657388014787"},{"title":"What causes a java.lang.ArrayIndexOutOfBoundsException and how do I prevent it?","slug":"what-causes-a-java.lang.arrayindexoutofboundsexception-and-how-do-i-prevent-it-1657384370848"},{"title":"Can I bind an array to an IN() condition in a PDO query?","slug":"can-i-bind-an-array-to-an-in()-condition-in-a-pdo-query-1657388382858"},{"title":"The Definitive C++ Book Guide and List","slug":"the-definitive-c++-book-guide-and-list-1657384247395"},{"title":"Retrieving the last record in each group - MySQL","slug":"retrieving-the-last-record-in-each-group-mysql-1657384887369"},{"title":"How do I select rows from a DataFrame based on column values?","slug":"how-do-i-select-rows-from-a-dataframe-based-on-column-values-1657384901065"}]},"__N_SSG":true}