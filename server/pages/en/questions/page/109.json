{"pageProps":{"data":{"count":610,"rows":[{"id":70,"title":"What is a raw type and why shouldn't we use it?","slug":"what-is-a-raw-type-and-why-shouldn't-we-use-it-1657384481079","postType":"QUESTION","createdAt":"2022-07-09T16:34:41.000Z","updatedAt":"2022-07-09T16:34:41.000Z","tags":[{"id":257,"name":"generics","slug":"generics","createdAt":"2022-07-09T16:34:41.000Z","updatedAt":"2022-07-09T16:34:41.000Z","Questions_Tags":{"questionId":70,"tagId":257}},{"id":258,"name":"raw-types","slug":"raw-types","createdAt":"2022-07-09T16:34:41.000Z","updatedAt":"2022-07-09T16:34:41.000Z","Questions_Tags":{"questionId":70,"tagId":258}}]},{"id":69,"title":"The Use of Multiple JFrames: Good or Bad Practice? [closed]","slug":"the-use-of-multiple-jframes:-good-or-bad-practice-closed-1657384478184","postType":"QUESTION","createdAt":"2022-07-09T16:34:38.000Z","updatedAt":"2022-07-09T16:34:38.000Z","tags":[{"id":252,"name":"swing","slug":"swing","createdAt":"2022-07-09T16:34:38.000Z","updatedAt":"2022-07-09T16:34:38.000Z","Questions_Tags":{"questionId":69,"tagId":252}},{"id":254,"name":"user-interface","slug":"user-interface","createdAt":"2022-07-09T16:34:38.000Z","updatedAt":"2022-07-09T16:34:38.000Z","Questions_Tags":{"questionId":69,"tagId":254}},{"id":255,"name":"jframe","slug":"jframe","createdAt":"2022-07-09T16:34:38.000Z","updatedAt":"2022-07-09T16:34:38.000Z","Questions_Tags":{"questionId":69,"tagId":255}}]},{"id":68,"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773","postType":"QUESTION","createdAt":"2022-07-09T16:34:34.000Z","updatedAt":"2022-07-09T16:34:34.000Z","tags":[{"id":249,"name":"database","slug":"database","createdAt":"2022-07-09T16:34:34.000Z","updatedAt":"2022-07-09T16:34:34.000Z","Questions_Tags":{"questionId":68,"tagId":249}},{"id":250,"name":"database-design","slug":"database-design","createdAt":"2022-07-09T16:34:34.000Z","updatedAt":"2022-07-09T16:34:34.000Z","Questions_Tags":{"questionId":68,"tagId":250}},{"id":251,"name":"database-normalization","slug":"database-normalization","createdAt":"2022-07-09T16:34:34.000Z","updatedAt":"2022-07-09T16:34:34.000Z","Questions_Tags":{"questionId":68,"tagId":251}}]},{"id":67,"title":"What is a debugger and how can it help me diagnose problems?","slug":"what-is-a-debugger-and-how-can-it-help-me-diagnose-problems-1657384472469","postType":"QUESTION","createdAt":"2022-07-09T16:34:32.000Z","updatedAt":"2022-07-09T16:34:32.000Z","tags":[]},{"id":66,"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484","postType":"QUESTION","createdAt":"2022-07-09T16:34:30.000Z","updatedAt":"2022-07-09T16:34:30.000Z","tags":[{"id":243,"name":"portability","slug":"portability","createdAt":"2022-07-09T16:34:30.000Z","updatedAt":"2022-07-09T16:34:30.000Z","Questions_Tags":{"questionId":66,"tagId":243}},{"id":244,"name":"turbo-c++","slug":"turbo-c++","createdAt":"2022-07-09T16:34:30.000Z","updatedAt":"2022-07-09T16:34:30.000Z","Questions_Tags":{"questionId":66,"tagId":244}},{"id":246,"name":"implementation-defined-behavior","slug":"implementation-defined-behavior","createdAt":"2022-07-09T16:34:30.000Z","updatedAt":"2022-07-09T16:34:30.000Z","Questions_Tags":{"questionId":66,"tagId":246}}]}]},"answers":{"66":["\n&lt;p&gt;Including &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; appears to be an increasingly common thing to see on Stack Overflow, perhaps something newly added to a national curriculum in the current academic year.&lt;/p&gt;\n&lt;p&gt;I imagine the advantages are vaguely given thus:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;You only need write one &lt;code&gt;#include&lt;/code&gt; line.&lt;/li&gt;\n&lt;li&gt;You do not need to look up which standard header everything is in.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Unfortunately, this is a lazy hack, naming a GCC internal header directly instead of individual standard headers like &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt;. It ruins portability and fosters terrible habits.&lt;/p&gt;\n&lt;p&gt;The disadvantages include:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;It will probably only work on that compiler.&lt;/li&gt;\n&lt;li&gt;You have no idea what it&apos;ll do when you use it, because its contents are not set by a standard.&lt;/li&gt;\n&lt;li&gt;Even just upgrading your compiler to its own next version may break your program.&lt;/li&gt;\n&lt;li&gt;Every single standard header must be parsed and compiled along with your source code, which is slow and results in a bulky executable under certain compilation settings.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;Don&apos;t do it!&lt;/strong&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;More information:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/25337300/560648&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt; with visual studio does not compile&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/25311052/560648&quot;&gt;How does #include &amp;lt;bits/stdc++.h&amp;gt; work in C++?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Example of why Quora is bad:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.quora.com/Is-it-good-practice-to-use-include-bits-stdc++-h-in-programming-contests-instead-of-listing-a-lot-of-includes&quot; rel=&quot;noreferrer&quot;&gt;Is it good practice to use #include &amp;lt;bits/stdc++.h&amp;gt; in programming contests instead of listing a lot of includes?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Why? Because it is used as if it were supposed to be a C++ standard header, but no standard mentions it. So your code is non-portable by construction. You won&apos;t find any documentation for it on &lt;a href=&quot;https://en.cppreference.com&quot; rel=&quot;noreferrer&quot;&gt;cppreference&lt;/a&gt;. So it might as well not exist. It&apos;s a figment of someone&apos;s imagination :)&lt;/p&gt;\n&lt;p&gt;I have discovered - to my horror and disbelief - that there is a well-known tutorial site where &lt;strong&gt;every C++ example seems to include this header&lt;/strong&gt;. The world is mad. That&apos;s the proof.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;&lt;em&gt;To anyone writing such &quot;tutorials&quot;&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;Please stop using this header. Forget about it. Don&apos;t propagate this insanity. If you&apos;re unwilling to understand why doing this is &lt;strong&gt;Wrong&lt;/strong&gt;, take my word for it. I&apos;m not OK being treated as a figure of authority on anything at all, and I&apos;m probably full of it half the time, but I&apos;ll make an exception in this one case only. I claim that I know what I&apos;m talking about here. Take me on my word. I implore you.&lt;/p&gt;\n&lt;p&gt;P.S. I can well imagine the abominable &quot;teaching standard&quot; where this wicked idea might have taken place, and the circumstances that led to it. Just because there seemed to be a practical need for it doesn&apos;t make it acceptable - not even in retrospect.&lt;/p&gt;\n&lt;p&gt;P.P.S. No, there was no practical need for it. There aren&apos;t that many C++ standard headers, and they are well documented. If you teach, you&apos;re doing your students a disservice by adding such &quot;magic&quot;. Producing programmers with a magical mindset is the last thing we want. If you need to offer students a subset of C++ to make their life easier, just produce a handout with the short list of headers applicable to the course you teach, and with concise documentation for the library constructs you expect the students to use.&lt;/p&gt;\n    ","\n&lt;p&gt;There&apos;s a Stack Exchange site called &lt;a href=&quot;https://codegolf.stackexchange.com/&quot;&gt;Programming Puzzles &amp;amp; Code Golf&lt;/a&gt;. The &lt;em&gt;programming puzzles&lt;/em&gt; on that site fit this definition of &lt;a href=&quot;https://www.dictionary.com/browse/puzzle&quot; rel=&quot;noreferrer&quot;&gt;puzzle&lt;/a&gt;: &lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;a toy, problem, or other contrivance designed to amuse by presenting difficulties to be solved by ingenuity or patient effort.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;They are designed to amuse, and not in the way that a working programmer might be amused by a real-world problem encountered in their daily work.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot; rel=&quot;noreferrer&quot;&gt;Code Golf&lt;/a&gt; is &quot;a type of recreational computer programming competition in which participants strive to achieve the shortest possible source code that implements a certain algorithm.&quot; In the answers on the PP&amp;amp;CG site, you&apos;ll see people specify the number of bytes in their answers. When they find a way to shave off a few bytes, they&apos;ll strike out the original number and record the new one.&lt;/p&gt;\n\n&lt;p&gt;As you might expect, code golfing rewards extreme programming language abuse. One-letter variable names. No whitespace. Creative use of library functions. Undocumented features. Nonstandard programming practices. Appalling hacks.&lt;/p&gt;\n\n&lt;p&gt;If a programmer submitted a pull request at work containing golf-style code, it would be rejected. Their co-workers would laugh at them. Their manager would drop by their desk for a chat. Even so, programmers amuse themselves by submitting answers to PP&amp;amp;CG.&lt;/p&gt;\n\n&lt;p&gt;What does this have to do with &lt;code&gt;stdc++.h&lt;/code&gt;? As others have pointed out, using it is lazy. It&apos;s non-portable, so you don&apos;t know if it will work on your compiler or the next version of your compiler. It fosters bad habits. It&apos;s non-standard, so your program&apos;s behavior may differ from what you expect. It may increase compile time and executable size.&lt;/p&gt;\n\n&lt;p&gt;These are all valid and correct objections. So why would anyone use this monstrosity?&lt;/p&gt;\n\n&lt;p&gt;It turns out that some people like &lt;em&gt;programming puzzles&lt;/em&gt; without the &lt;em&gt;code golf&lt;/em&gt;. They get together and compete at events like ACM-ICPC, Google Code Jam, and Facebook Hacker Cup, or on sites like Topcoder and Codeforces. Their rank is based on program correctness, execution speed, and how fast they submit a solution. To maximize execution speed, many participants use C++. To maximize coding speed, some of them use &lt;code&gt;stdc++.h&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Is this is a good idea? Let&apos;s check the list of disadvantages. Portability? It doesn&apos;t matter since these coding events use a specific compiler version that contestants know in advance. Standards compliance? Not relevant for a block of code whose useful life is less than one hour. Compile time and executable size? These aren&apos;t part of the contest&apos;s scoring rubric.&lt;/p&gt;\n\n&lt;p&gt;So we&apos;re left with bad habits. This is a valid objection. By using this header file, contestants are avoiding the chance to learn which standard header file defines the functionality they&apos;re using in their program. When they&apos;re writing real-world code (and not using &lt;code&gt;stdc++.h&lt;/code&gt;) they&apos;ll have to spend time looking up this information, which means they&apos;ll be less productive. That&apos;s the downside of practicing with &lt;code&gt;stdc++.h&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This raises the question of why it&apos;s worth taking part in competitive programming at all if it encourages bad habits like using &lt;code&gt;stdc++.h&lt;/code&gt; and violating other coding standards. One answer is that people do it for the same reason they post programs on PP&amp;amp;CG: some programmers find it enjoyable to use their coding skills in a game-like context.&lt;/p&gt;\n\n&lt;p&gt;So the question of whether to use &lt;code&gt;stdc++.h&lt;/code&gt; comes down to whether the coding speed benefits in a programming contest outweigh the bad habits that one might develop by using it.&lt;/p&gt;\n\n&lt;p&gt;This question asks: &quot;Why should I not #include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;?&quot; I realize that it was asked and answered to make a point, and the accepted answer is intended to be the One True Answer to this question. But the question isn&apos;t &quot;Why should I not #include &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; in production code?&quot; Therefore, I think it&apos;s reasonable to consider other scenarios where the answer may be different.&lt;/p&gt;\n    ","\n&lt;p&gt;From N4606, Working Draft, Standard for Programming Language C++ :&lt;/p&gt;\n\n&lt;p&gt;17.6.1.2 Headers [headers]&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Each element of the C++ standard library is declared or defined (as appropriate) in a header.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The C++ standard library provides 61 C++ library headers, as shown in Table 14.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Table 14  C++ library headers&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&amp;lt;algorithm&amp;gt; &amp;lt;future&amp;gt; &amp;lt;numeric&amp;gt; &amp;lt;strstream&amp;gt;\n&amp;lt;any&amp;gt; &amp;lt;initializer_list&amp;gt; &amp;lt;optional&amp;gt; &amp;lt;system_error&amp;gt;\n&amp;lt;array&amp;gt; &amp;lt;iomanip&amp;gt; &amp;lt;ostream&amp;gt; &amp;lt;thread&amp;gt;\n&amp;lt;atomic&amp;gt; &amp;lt;ios&amp;gt; &amp;lt;queue&amp;gt; &amp;lt;tuple&amp;gt;\n&amp;lt;bitset&amp;gt; &amp;lt;iosfwd&amp;gt; &amp;lt;random&amp;gt; &amp;lt;type_traits&amp;gt;\n&amp;lt;chrono&amp;gt; &amp;lt;iostream&amp;gt; &amp;lt;ratio&amp;gt; &amp;lt;typeindex&amp;gt;\n&amp;lt;codecvt&amp;gt; &amp;lt;istream&amp;gt; &amp;lt;regex&amp;gt; &amp;lt;typeinfo&amp;gt;\n&amp;lt;complex&amp;gt; &amp;lt;iterator&amp;gt; &amp;lt;scoped_allocator&amp;gt; &amp;lt;unordered_map&amp;gt;\n&amp;lt;condition_variable&amp;gt; &amp;lt;limits&amp;gt; &amp;lt;set&amp;gt; &amp;lt;unordered_set&amp;gt;\n&amp;lt;deque&amp;gt; &amp;lt;list&amp;gt; &amp;lt;shared_mutex&amp;gt; &amp;lt;utility&amp;gt;\n&amp;lt;exception&amp;gt; &amp;lt;locale&amp;gt; &amp;lt;sstream&amp;gt; &amp;lt;valarray&amp;gt;\n&amp;lt;execution&amp;gt; &amp;lt;map&amp;gt; &amp;lt;stack&amp;gt; &amp;lt;variant&amp;gt;\n&amp;lt;filesystem&amp;gt; &amp;lt;memory&amp;gt; &amp;lt;stdexcept&amp;gt; &amp;lt;vector&amp;gt;\n&amp;lt;forward_list&amp;gt; &amp;lt;memory_resorce&amp;gt; &amp;lt;streambuf&amp;gt;\n&amp;lt;fstream&amp;gt; &amp;lt;mutex&amp;gt; &amp;lt;string&amp;gt;\n&amp;lt;functional&amp;gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;&amp;gt; &amp;lt;string_view&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There&apos;s no &amp;lt;bits/stdc++.h&amp;gt; there. This is not surprising, since &amp;lt;bits/...&amp;gt; headers are  implementation detail, and usually carry a warning:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;*  This is an internal header file, included by other library headers.\n*  Do &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; attempt to use it directly. \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;lt;bits/stdc++.h&amp;gt; also carries a warning:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;*  This is an implementation file &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a precompiled header.\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The reason we do not use:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;is because of effiency.\nLet me make an analogy:\nFor those of you who know Java:\nIf you asked your instructor if the following was a good idea, unless they are a bad instructor they would say no:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.*.*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The #include... thing does the same thing basically... That&apos;s not the only reason not to use it, but it is one of the major reasons not to use it.\nFor a real life analogy:\nImagine you had a library and you wanted to borrow a couple of books from the library, would you relocate the entire library next to your house?? It would be expensive and ineffiecient. If you only need 5 books, well then only take out 5... Not the whole library.....&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Looks convienent to the program look I only need to type one include statement and it works, same thing with moving a whole library, look I only need to move one whole library instead of 5 books, one by one. Looks convienent to you that is, for the person who actually has to do the moving?? Not so much, and guess what in C++ the person doing the moving will be your computer... The computer will not enjoy moving the entire library for every source file you write :).....&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;I at least like seeing a list of all headers one can include, and which version of C++ they pertain to, by looking at this header file. It is really useful in that regard.&lt;/em&gt;&lt;/p&gt;\n&lt;h2&gt;How bad is including &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;, really?&lt;/h2&gt;\n&lt;p&gt;I wanted to see some real data--some numbers to compare &lt;em&gt;compile time&lt;/em&gt; and &lt;em&gt;binary executable size&lt;/em&gt;. So, here is a quick &quot;hello world&quot; comparison test.&lt;/p&gt;\n&lt;p&gt;Note: to learn &lt;em&gt;where&lt;/em&gt; is the &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; header file, and &lt;em&gt;what&lt;/em&gt; is in it, jump straight down to the section at the bottom titled &quot;Where and what is &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;?&quot;.&lt;/p&gt;\n&lt;h2&gt;Summary:&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Including the &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; &quot;include all headers&quot; header is easy, but comparatively slow to compile.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Including the &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; header file works fine with the gcc/g++ compiler (and presumably the &lt;a href=&quot;https://clang.llvm.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;llvm clang compiler&lt;/a&gt; too, since they aim to be gcc-compatible), and&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;makes &lt;em&gt;no difference on binary executable size&lt;/em&gt;, but&lt;/li&gt;\n&lt;li&gt;it takes up to &lt;strong&gt;4x longer to compile!&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;My testing&lt;/h2&gt;\n&lt;p&gt;Here is a sample C++ program:&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://github.com/ElectricRCAircraftGuy/eRCaGuy_hello_world/blob/master/cpp/include_bits_stdc%2B%2B.cpp&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;include_bits_stdc++.cpp&lt;/strong&gt;:&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// We will test including this header vs NOT including this header&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// For `std::cin`, `std::cout`, `std::endl`, etc.&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello &quot;&lt;/span&gt;);\n    std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;world!\\n\\n&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here are some build and run commands:&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# make a bin dir&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;mkdir&lt;/span&gt; -p bin\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# compile, timing how long it takes&lt;/span&gt;\ntime g++ -Wall -Wextra -Werror -O3 -std=c++17 include_bits_stdc++.cpp -o bin/a\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# check binary executable size&lt;/span&gt;\nsize bin/a\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# run&lt;/span&gt;\nbin/a\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;WithOUT &lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; at the top&lt;/h2&gt;\n&lt;p&gt;If I run the &quot;compile&quot; command above with the code as-is, here are 10 compile times I see:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;real    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.362&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.372&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.502&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.383&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.367&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.283&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.294&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.281&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.292&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.276&lt;/span&gt;s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Average compile time:&lt;/strong&gt; &lt;code&gt;(0.362 + 0.372 + 0.502 + 0.383 + 0.367 + 0.283 + 0.294 + 0.281 + 0.292 + 0.276)/10&lt;/code&gt; = &lt;strong&gt;&lt;code&gt;0.3412&lt;/code&gt; seconds&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;size bin/a&lt;/code&gt; shows:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;text    data     bss     dec     hex filename\n&lt;span class=&quot;hljs-number&quot;&gt;2142&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;656&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;280&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3078&lt;/span&gt;     c06 bin/a\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;WITH &lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; at the top&lt;/h2&gt;\n&lt;p&gt;10 compile times:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;real    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.398&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.006&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m0&lt;span class=&quot;hljs-number&quot;&gt;.952&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.331&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.549&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.454&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.417&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.541&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.546&lt;/span&gt;s\nreal    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;m1&lt;span class=&quot;hljs-number&quot;&gt;.558&lt;/span&gt;s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Average compile time:&lt;/strong&gt; &lt;code&gt;(1.398 + 1.006 + 0.952 + 1.331 + 1.549 + 1.454 + 1.417 + 1.541 + 1.546 + 1.558)/10&lt;/code&gt; = &lt;strong&gt;&lt;code&gt;1.3752&lt;/code&gt; seconds&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;size bin/a&lt;/code&gt; shows:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;text    data     bss     dec     hex filename\n&lt;span class=&quot;hljs-number&quot;&gt;2142&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;656&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;280&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;3078&lt;/span&gt;     c06 bin/a\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;Conclusions&lt;/h2&gt;\n&lt;p&gt;So, including the header works fine with the gcc/g++ compiler, and makes &lt;em&gt;no difference on binary executable size&lt;/em&gt;, but it takes 1.3752 sec / 0.3412 sec = &lt;strong&gt;4x longer to compile!&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;Where and what is &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt;?&lt;/h2&gt;\n&lt;h3&gt;Summary&lt;/h3&gt;\n&lt;p&gt;The &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; header file is included as part of the gcc/g++ compiler.&lt;/p&gt;\n&lt;p&gt;If on Linux, it will be located on your local system at &lt;code&gt;/usr/include/x86_64-linux-gnu/c++/8/bits/stdc++.h&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You can view the file in the gcc source code directly online here: &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/precompiled/stdc%2B%2B.h&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc/libstdc++-v3/include/precompiled/stdc++.h&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;I at least like seeing a list of all headers one can include, and which version of C++ they pertain to, by looking at that header file. It is really useful in that regard.&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;Details&lt;/h3&gt;\n&lt;p&gt;If you open the code above in an IDE with a great indexer, such as Eclipse (which has the best indexer I&apos;ve ever found; it indexes &lt;em&gt;far better&lt;/em&gt; than MS VSCode), and &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Click&lt;/kbd&gt; on the &lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; line, it will jump straight to that header file on your system! On Linux Ubuntu, it jumps straight to this path and opens this file: &lt;code&gt;/usr/include/x86_64-linux-gnu/c++/8/bits/stdc++.h&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;You can view the latest version of this file in the gcc source code directly, here: &lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/precompiled/stdc%2B%2B.h&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc/libstdc++-v3/include/precompiled/stdc++.h&lt;/a&gt;. &lt;strong&gt;It is simply a header file which &lt;em&gt;includes all other header files!&lt;/em&gt;&lt;/strong&gt; This is really useful and insightful to just look at all header files in one place to get a feel for what they are and what they include! And again, in Eclipse, you can easily &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Click&lt;/kbd&gt; on each included header file to jump right to its source code implementation.&lt;/p&gt;\n&lt;p&gt;Here is the full, latest &lt;code&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/code&gt; header file included with the gcc compiler. You can always copy and paste this content and create this file yourself if you want to include it in your own personal project or use it with another compiler.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/precompiled/stdc%2B%2B.h&quot; rel=&quot;nofollow noreferrer&quot;&gt;gcc/libstdc++-v3/include/precompiled/stdc++.h&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// C++ includes used for precompiling -*- C++ -*-&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Copyright (C) 2003-2022 Free Software Foundation, Inc.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;//&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// This file is part of the GNU ISO C++ Library.  This library is free&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// software; you can redistribute it and/or modify it under the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// terms of the GNU General Public License as published by the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Free Software Foundation; either version 3, or (at your option)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// any later version.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// This library is distributed in the hope that it will be useful,&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// GNU General Public License for more details.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Under Section 7 of GPL version 3, you are granted additional&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// permissions described in the GCC Runtime Library Exception, version&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3.1, as published by the Free Software Foundation.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// You should have received a copy of the GNU General Public License and&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// a copy of the GCC Runtime Library Exception along with this program;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/** @file stdc++.h\n *  This is an implementation file for a precompiled header.\n */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 17.4.1.2 Headers&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// C&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; _GLIBCXX_NO_ASSERT&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cerrno&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cfloat&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ciso646&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;climits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;clocale&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;csetjmp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;csignal&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstdarg&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstddef&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cwchar&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cwctype&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 201103L&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ccomplex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cfenv&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cinttypes&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstdalign&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstdbool&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ctgmath&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;cuchar&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// C++&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bitset&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;complex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;exception&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ios&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iosfwd&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;istream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;locale&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;new&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdexcept&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;streambuf&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typeinfo&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;utility&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;valarray&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 201103L&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;atomic&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;codecvt&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;condition_variable&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;forward_list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;future&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;initializer_list&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;random&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ratio&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;regex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;system_error&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;tuple&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;typeindex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 201402L&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 201703L&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;any&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;charconv&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// #include &amp;lt;execution&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;filesystem&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;memory_resource&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;variant&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt;= 202002L&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;barrier&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;bit&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;compare&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;concepts&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cpp_impl_coroutine&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# &lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;coroutine&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;latch&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;numbers&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;ranges&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stop_token&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;semaphore&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;source_location&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;syncstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __cplusplus &amp;gt; 202002L&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;expected&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;spanstream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __has_include(&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stacktrace&amp;gt;&lt;/span&gt;)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;# &lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stacktrace&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;See also&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/bitsstdc-h-c/&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.geeksforgeeks.org/bitsstdc-h-c/&lt;/a&gt;\n&lt;ul&gt;\n&lt;li&gt;this article plagiarizes from Stack Overflow, though; see my comment here:\n&lt;a href=&quot;https://stackoverflow.com/questions/25311011/how-does-include-bits-stdc-h-work-in-c/33764128#comment126990806_33764128&quot;&gt;How does #include &amp;lt;bits/stdc++.h&amp;gt; work in C++?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;[my Questions &amp;amp; Answers] learn what &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;bss&lt;/code&gt;, and &lt;code&gt;dec&lt;/code&gt; mean in the &lt;code&gt;size&lt;/code&gt; output:\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=&quot;https://electronics.stackexchange.com/q/363931/26234&quot;&gt;Electrical Engineering Stack Exchange: How do I find out at compile time how much of an STM32&apos;s Flash memory and dynamic memory (SRAM) is used up?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/64073080/4561887&quot;&gt;Convert binutils &lt;code&gt;size&lt;/code&gt; output from &quot;sysv&quot; format (&lt;code&gt;size --format=sysv my_executable&lt;/code&gt;) to &quot;berkeley&quot; format (&lt;code&gt;size --format=berkeley my_executable&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;The biggest problem for me is that including this header file wont compile. So if its there, Ill have to remove it, try to compile, and add the standard header files that are needed.&lt;/p&gt;\n    ","\n&lt;p&gt;If your teacher is an ICPC teacher then he/she is right, but if your teacher is a software engineering teacher probably he is not.\nThere are pros and cons of both:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;Using it saves coding times but increases compile time.&lt;/li&gt;\n&lt;li&gt;Since it includes lots of namespaces, you may accendentally get into issues which might be hard to debug.&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;As explained in the top answer to the &lt;a href=&quot;https://www.quora.com/Is-it-good-practice-to-use-include-bits-stdc++-h-in-programming-contests-instead-of-listing-a-lot-of-includes&quot; rel=&quot;nofollow noreferrer&quot;&gt;Quora question mentioned by @Lightness Races in Orbit&lt;/a&gt;, there&apos;s nothing wrong with including &lt;code&gt;bits/stdc++.h&lt;/code&gt; in the context of a programming competition. The disadvantages around portability, compile time, and standardization are not relevant there. The same would be true in a college programming class if the example code uses that include.&lt;/p&gt;\n&lt;p&gt;If you&apos;re writing production code, then don&apos;t use it. It shouldn&apos;t be a big deal to switch back and forth depending on the purpose of the code you&apos;re currently writing.&lt;/p&gt;\n    "],"67":["\n&lt;p&gt;A debugger is a program that can examine the state of your program while your program is running. The &lt;a href=&quot;https://stackoverflow.com/questions/216819/how-does-a-debugger-work&quot;&gt;technical means it uses for doing this&lt;/a&gt; are not important for understanding the basics of how to use a debugger. You can use a debugger to halt the execution of your program when it reaches a particular place in your code, then examine the values of the variables in the program. You can use a debugger to run your program very slowly, one line of code at a time (called &lt;em&gt;single stepping&lt;/em&gt;), while you examine the values of its variables.&lt;/p&gt;\n\n&lt;h2&gt;Using a debugger is an expected basic skill&lt;/h2&gt;\n\n&lt;p&gt;A debugger is a very powerful tool for helping diagnose problems with programs.  And debuggers are available for all practical programming languages. Therefore being able to use a debugger is considered a &lt;strong&gt;basic skill&lt;/strong&gt; of any professional or enthusiast programmer. And using a debugger &lt;em&gt;yourself&lt;/em&gt;  is considered &lt;strong&gt;basic work&lt;/strong&gt; you should do &lt;em&gt;yourself&lt;/em&gt; before asking others for help. As this site is for professional and enthusiast programmers, and not a helpdesk or mentoring site, if you have a question about a problem with a specific program, but have not used a debugger, your question is very likely to be closed and downvoted. If you persist with questions like that, you will eventually be blocked from posting more. &lt;/p&gt;\n\n&lt;h2&gt;How a debugger can help you&lt;/h2&gt;\n\n&lt;p&gt;By using a debugger you can discover whether a variable has the wrong value, and where in your program its value changed to the wrong value.&lt;/p&gt;\n\n&lt;p&gt;Using single stepping you can also discover whether the control flow is as you expect. For example, whether an &lt;code&gt;if&lt;/code&gt; branch executed when you expect it ought to be.&lt;/p&gt;\n\n&lt;h2&gt;General notes on using a debugger&lt;/h2&gt;\n\n&lt;p&gt;The specifics of using a debugger depend on the debugger and, to a lesser degree, the programming language you are using.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;You can &lt;em&gt;attach&lt;/em&gt; a debugger to a process already running your program. You might do if your program is stuck.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In practice it is often easier to run your program under the control of a debugger from the very start.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You indicate &lt;em&gt;where&lt;/em&gt; your program should stop executing by indicating the source-code file and line number of the line at which execution should stop, or by indicating the name of the method/function at which the program should stop (if you want to stop as soon as execution enters the method). The technical means that the debugger uses to cause your program to stop is called a &lt;em&gt;breakpoint&lt;/em&gt; and this process is called &lt;em&gt;setting a breakpoint&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Most &lt;a href=&quot;https://stackoverflow.com/a/426586/545127&quot;&gt;modern debuggers are part of an IDE&lt;/a&gt; and provide you with a convenient GUI for examining the source code and variables of your program, with a point-and-click interface for setting breakpoints, running your program and single stepping it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using a debugger can be very difficult unless your program executable or bytecode files include debugging &lt;em&gt;symbol information&lt;/em&gt; and cross-references to your source-code. You might have to &lt;a href=&quot;https://stackoverflow.com/questions/89603/how-does-the-debugging-option-g-change-the-binary-executable&quot;&gt;compile (or recompile) your program slightly differently&lt;/a&gt; to ensure that information is present. If the compiler performs extensive optimizations, those cross-references can become confusing. You might therefore have to &lt;a href=&quot;https://stackoverflow.com/a/7857696/545127&quot;&gt;recompile your program with optimizations turned off&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I want to add that a debugger isn&apos;t always the perfect solution, and shouldn&apos;t always be the go-to solution to debugging. Here are a few cases where a debugger might not work for you:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The part of your program which fails is really large (poor modularization, perhaps?) and you&apos;re not exactly sure where to start stepping through the code. Stepping through all of it might be too time-consuming.&lt;/li&gt;\n&lt;li&gt;Your program uses a lot of callbacks and other non-linear flow control methods, which makes the debugger confused when you step through it.&lt;/li&gt;\n&lt;li&gt;Your program is multi-threaded. Or even worse, your problem is caused by a race condition.&lt;/li&gt;\n&lt;li&gt;The code that has the bug in it runs many times before it bugs out. This can be particularly problematic in main loops, or worse yet, in physics engines, where the problem could be numerical. Even setting a breakpoint, in this case, would simply have you hitting it many times, with the bug not appearing.&lt;/li&gt;\n&lt;li&gt;Your program must run in real-time. This is a big issue for programs that connect to the network. If you set up a breakpoint in your network code, the other end isn&apos;t going to wait for you to step through, it&apos;s simply going to time out. Programs that rely on the system clock, e.g. games with frameskip, aren&apos;t much better off either.&lt;/li&gt;\n&lt;li&gt;Your program performs some form of destructive actions, like writing to files or sending e-mails, and you&apos;d like to limit the number of times you need to run through it.&lt;/li&gt;\n&lt;li&gt;You can tell that your bug is caused by incorrect values arriving at function X, but you don&apos;t know where these values come from. Having to run through the program, again and again, setting breakpoints farther and farther back, can be a huge hassle. Especially if function X is called from many places throughout the program.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In all of these cases, either having your program stop abruptly could cause the end results to differ, or stepping through manually in search of the one line where the bug is caused is too much of a hassle. This can equally happen whether your bug is incorrect behavior, or a crash. For instance, if memory corruption causes a crash, by the time the crash happens, it&apos;s too far from where the memory corruption first occurred, and no useful information is left.&lt;/p&gt;\n\n&lt;p&gt;So, what are the alternatives?&lt;/p&gt;\n\n&lt;p&gt;Simplest is simply logging and assertions. Add logs to your program at various points, and compare what you get with what you&apos;re expecting. For instance, see if the function where you think there&apos;s a bug is even called in the first place. See if the variables at the start of a method are what you think they are. Unlike breakpoints, it&apos;s okay for there to be many log lines in which nothing special happens. You can simply search through the log afterward. Once you hit a log line that&apos;s different from what you&apos;re expecting, add more in the same area. Narrow it down farther and farther, until it&apos;s small enough to be able to log every line in the bugged area.&lt;/p&gt;\n\n&lt;p&gt;Assertions can be used to trap incorrect values as they occur, rather than once they have an effect visible to the end-user. The quicker you catch an incorrect value, the closer you are to the line that produced it.&lt;/p&gt;\n\n&lt;p&gt;Refactor and unit test. If your program is too big, it might be worthwhile to test it one class or one function at a time. Give it inputs, and look at the outputs, and see which are not as you&apos;re expecting. Being able to narrow down a bug from an entire program to a single function can make a huge difference in debugging time.&lt;/p&gt;\n\n&lt;p&gt;In case of memory leaks or memory stomping, use appropriate tools that are able to analyze and detect these at runtime. Being able to detect where the actual corruption occurs is the first step. After this, you can use logs to work your way back to where incorrect values were introduced.&lt;/p&gt;\n\n&lt;p&gt;Remember that debugging is a process going backward. You have the end result - a bug - and find the cause, which preceded it. It&apos;s about working your way backward and, unfortunately, debuggers only step forwards. This is where good logging and postmortem analysis can give you much better results.&lt;/p&gt;\n    "],"68":["\n&lt;p&gt;In addition to violating &lt;a href=&quot;http://en.wikipedia.org/wiki/1NF&quot; rel=&quot;nofollow noreferrer&quot;&gt;First Normal Form&lt;/a&gt; because of the repeating group of values stored in a single column, comma-separated lists have a lot of other more practical problems:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Cant ensure that each value is the right data type: no way to prevent &lt;em&gt;1,2,3,banana,5&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Cant use foreign key constraints to link values to a lookup table; no way to enforce referential integrity.&lt;/li&gt;\n&lt;li&gt;Cant enforce uniqueness: no way to prevent &lt;em&gt;1,2,3,3,3,5&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Cant delete a value from the list without fetching the whole list.&lt;/li&gt;\n&lt;li&gt;Can&apos;t store a list longer than what fits in the string column.&lt;/li&gt;\n&lt;li&gt;Hard to search for all entities with a given value in the list; you have to use an inefficient table-scan. May have to resort to regular expressions, for example in MySQL:&lt;br&gt;\n&lt;code&gt;idlist REGEXP &apos;[[:&amp;lt;:]]2[[:&amp;gt;:]]&apos;&lt;/code&gt; or in MySQL 8.0: &lt;code&gt;idlist REGEXP &apos;\\\\b2\\\\b&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Hard to count elements in the list, or do other aggregate queries.&lt;/li&gt;\n&lt;li&gt;Hard to join the values to the lookup table they reference.&lt;/li&gt;\n&lt;li&gt;Hard to fetch the list in sorted order.&lt;/li&gt;\n&lt;li&gt;Hard to choose a separator that is guaranteed not to appear in the values&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;To solve these problems, you have to write tons of application code, reinventing functionality that the RDBMS &lt;em&gt;already provides much more efficiently&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Comma-separated lists are wrong enough that I made this the first chapter in my book: &lt;a href=&quot;https://pragprog.com/titles/bksap1/&quot; rel=&quot;nofollow noreferrer&quot;&gt;SQL Antipatterns, Volume 1: Avoiding the Pitfalls of Database Programming&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;There are times when you need to employ denormalization, but as &lt;a href=&quot;https://stackoverflow.com/a/3653507/578288&quot;&gt;@OMG Ponies mentions&lt;/a&gt;, these are exception cases.  Any non-relational optimization benefits one type of query at the expense of other uses of the data, so be sure you know which of your queries need to be treated so specially that they deserve denormalization.&lt;/p&gt;\n    ","\n&lt;p&gt;&quot;One reason was laziness&quot;.&lt;/p&gt;\n\n&lt;p&gt;This rings alarm bells. The only reason you should do something like this is that you know how to do it &quot;the right way&quot; but you have come to the conclusion that there is a tangible reason not to do it that way.&lt;/p&gt;\n\n&lt;p&gt;Having said this: if the data you are choosing to store this way is data that you will never need to query by, then there may be a case for storing it in the way you have chosen.&lt;/p&gt;\n\n&lt;p&gt;(Some users would dispute the statement in my previous paragraph, saying that &quot;you can never know what requirements will be added in the future&quot;. These users are either misguided or stating a religious conviction. Sometimes it is advantageous to work to the requirements you have before you.)&lt;/p&gt;\n    ","\n&lt;p&gt;There are numerous questions on SO asking:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;how to get a count of specific values from the comma separated list&lt;/li&gt;\n&lt;li&gt;how to get records that have only the same 2/3/etc specific value from that comma separated list&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Another problem with the comma separated list is ensuring the values are consistent - storing text means the possibility of typos...&lt;/p&gt;\n\n&lt;p&gt;These are all symptoms of denormalized data, and highlight why you should always model for normalized data.  Denormalization &lt;em&gt;can&lt;/em&gt; be a query optimization, &lt;strong&gt;&lt;em&gt;to be applied when the need actually presents itself&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In general anything can be defensible if it meets the requirements of your project.  This doesn&apos;t mean that people will agree with or want to defend your decision...&lt;/p&gt;\n\n&lt;p&gt;In general, storing data in this way is suboptimal (e.g. harder to do efficient queries) and may cause maintenance issues if you modify the items in your form.  Perhaps you could have found a middle ground and used an integer representing a set of bit flags instead?&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, I would say that it really is that bad.  It&apos;s a defensible choice, but that doesn&apos;t make it correct or good.&lt;/p&gt;\n\n&lt;p&gt;It breaks first normal form.&lt;/p&gt;\n\n&lt;p&gt;A second criticism is that putting raw input results directly into a database, without any validation or binding at all, leaves you open to SQL injection attacks.&lt;/p&gt;\n\n&lt;p&gt;What you&apos;re calling laziness and lack of SQL knowledge is the stuff that neophytes are made of.  I&apos;d recommend taking the time to do it properly and view it as an opportunity to learn.&lt;/p&gt;\n\n&lt;p&gt;Or leave it as it is and learn the painful lesson of a SQL injection attack.&lt;/p&gt;\n    ","\n&lt;p&gt;I needed a multi-value column, it could be implemented as an xml field&lt;/p&gt;\n\n&lt;p&gt;It could be converted to a comma delimited as necessary&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6097849/querying-an-xml-list-in-sql-server-using-xquery&quot;&gt;querying an XML list in sql server using Xquery&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;By being an xml field, some of the concerns can be addressed.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t ensure that each value is the right data type: no way to prevent 1,2,3,banana,5&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; values in a tag can be forced to be the correct type&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t use foreign key constraints to link values to a lookup table; no way to enforce referential integrity.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; still an issue&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t enforce uniqueness: no way to prevent 1,2,3,3,3,5&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; still an issue&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Can&apos;t delete a value from the list without fetching the whole list.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; single items can be removed&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to search for all entities with a given value in the list; you have to use an inefficient table-scan.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; xml field can be indexed&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to count elements in the list, or do other aggregate queries.**&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; not particularly hard &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to join the values to the lookup table they reference.**&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; not particularly hard &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Hard to fetch the list in sorted order.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; not particularly hard &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Storing integers as strings takes about twice as much space as storing binary integers.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; storage is even worse than a csv &lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;With CSV:&lt;/strong&gt; Plus a lot of comma characters.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;With XML:&lt;/strong&gt; tags are used instead of commas&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;In short, using XML gets around some of the issues with delimited list AND can be converted to a delimited list as needed&lt;/p&gt;\n    ","\n&lt;p&gt;Yes, it &lt;em&gt;is&lt;/em&gt; that bad.  My view is that if you don&apos;t like using relational databases then look for an alternative that suits you better, there are lots of interesting &quot;NOSQL&quot; projects out there with some really advanced features.&lt;/p&gt;\n    ","\n&lt;p&gt;Well I&apos;ve been using a key/value pair tab separated list in a NTEXT column in SQL Server for more than 4 years now and it works. You do lose the flexibility of making queries but on the other hand, if you have a library that persists/derpersists the key value pair then it&apos;s not a that bad idea.&lt;/p&gt;\n    ","\n&lt;p&gt;I would probably take the middle ground: make each field in the CSV into a separate column in the database, but not worry much about normalization (at least for now). At some point, normalization &lt;em&gt;might&lt;/em&gt; become interesting, but with all the data shoved into a single column you&apos;re gaining virtually no benefit from using a database at all. You need to separate the data into logical fields/columns/whatever you want to call them before you can manipulate it meaningfully at all.&lt;/p&gt;\n    ","\n&lt;p&gt;If you have a fixed number of boolean fields, you could use a &lt;code&gt;INT(1) NOT NULL&lt;/code&gt; (or &lt;code&gt;BIT NOT NULL&lt;/code&gt; if it exists) or &lt;code&gt;CHAR (0)&lt;/code&gt; (nullable) for each. You could also use a &lt;code&gt;SET&lt;/code&gt; (I forget the exact syntax).&lt;/p&gt;\n    "],"69":["\n&lt;blockquote&gt;\n  &lt;p&gt;I&apos;m just wondering whether it is good practice to use multiple JFrames?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Bad (bad, bad) practice.  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;User unfriendly: The user sees multiple icons in their task bar when expecting to see only one.  Plus the side effects of the coding problems..&lt;/li&gt;\n&lt;li&gt;A nightmare to code and maintain:\n\n&lt;ul&gt;\n&lt;li&gt;A &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html&quot; rel=&quot;noreferrer&quot;&gt;modal dialog&lt;/a&gt; offers the easy opportunity to focus attention on the content of that dialog - choose/fix/cancel this, &lt;strong&gt;then&lt;/strong&gt; proceed.  Multiple frames do not.&lt;/li&gt;\n&lt;li&gt;A dialog (or floating tool-bar) with a parent will come to front when the parent is clicked on - you&apos;d have to implement that in frames if that was the desired behavior.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;There are any number of ways of displaying many elements in one GUI, e.g.:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;CardLayout&lt;/code&gt;&lt;/a&gt; (short &lt;a href=&quot;https://stackoverflow.com/a/5786005/418556&quot;&gt;demo.&lt;/a&gt;). Good for:\n\n&lt;ol&gt;\n&lt;li&gt;Showing wizard like dialogs.&lt;/li&gt;\n&lt;li&gt;Displaying list, tree etc. selections for items that have an associated component.&lt;/li&gt;\n&lt;li&gt;Flipping between no component and visible component.&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;/&lt;code&gt;JDesktopPane&lt;/code&gt;&lt;/a&gt; typically used for an &lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot; rel=&quot;noreferrer&quot;&gt;MDI&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;&lt;/a&gt; for groups of components.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JSplitPane&lt;/code&gt;&lt;/a&gt; A way to display two components of which the importance between one or the other (the size) varies according to what the user is doing.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;&lt;/a&gt; far many well ..layered components.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JToolBar&lt;/code&gt;&lt;/a&gt; typically contains groups of actions or controls.  Can be dragged around the GUI, or off it entirely according to user need.  As mentioned above, will minimize/restore according to the parent doing so.&lt;/li&gt;\n&lt;li&gt;As items in a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/list.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JList&lt;/code&gt;&lt;/a&gt; (simple example below).&lt;/li&gt;\n&lt;li&gt;As nodes in a &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JTree&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/5630271/418556&quot;&gt;Nested layouts&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;https://i.stack.imgur.com/Jaqap.png&quot;&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;But if those strategies do not work for a particular use-case, try the following.  Establish a single main &lt;code&gt;JFrame&lt;/code&gt;, then have &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JDialog&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;JOptionPane&lt;/code&gt;&lt;/a&gt; instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.&lt;/p&gt;\n\n&lt;h2&gt;Many images&lt;/h2&gt;\n\n&lt;p&gt;In this case where the multiple elements are images, it would be better to use either of the following instead:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;A single &lt;code&gt;JLabel&lt;/code&gt; (centered in a scroll pane) to display whichever image the user is interested in at that moment.  As seen in &lt;a href=&quot;https://stackoverflow.com/a/13463684/418556&quot;&gt;&lt;code&gt;ImageViewer&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;https://i.stack.imgur.com/5JXpC.gif&quot;&gt;&lt;/li&gt;\n&lt;li&gt;A single row &lt;code&gt;JList&lt;/code&gt;. As seen in &lt;a href=&quot;https://stackoverflow.com/a/9544652/418556&quot;&gt;this answer&lt;/a&gt;.  The &apos;single row&apos; part of that only works if they are all the same dimensions.  Alternately, if you are prepared to scale the images on the fly, and they are all the same aspect ratio (e.g. 4:3 or 16:9).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/q8hEl.jpg&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The multiple &lt;code&gt;JFrame&lt;/code&gt; approach has been something I&apos;ve implemented since I began programming Swing apps. For the most part, I did it in the beginning because I didn&apos;t know any better. &lt;strong&gt;However&lt;/strong&gt;, as I matured in my experience and knowledge as a developer and as began to read and absorb the opinions of so many more experienced Java devs online, I made an attempt to &lt;strong&gt;shift away&lt;/strong&gt; from the multiple &lt;code&gt;JFrame&lt;/code&gt; approach (both in current projects and future projects) only to be met with... get this... &lt;em&gt;resistance from my clients!&lt;/em&gt; As I began implementing modal dialogs to control &quot;child&quot; windows and &lt;code&gt;JInternalFrame&lt;/code&gt;s for separate components, &lt;strong&gt;my clients began to complain!&lt;/strong&gt; I was quite surprised, as I was doing what I thought was best-practice! But, as they say, &quot;A happy wife is a happy life.&quot; Same goes for your clients. Of course, I am a contractor so my end-users have direct access to me, the developer, which is obviously not a common scenario.&lt;/p&gt;\n\n&lt;p&gt;So, I&apos;m going to explain the benefits of the multiple &lt;code&gt;JFrame&lt;/code&gt; approach, as well as myth-bust some of the cons that others have presented.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ultimate flexibility in layout&lt;/strong&gt; - By allowing separate &lt;code&gt;JFrame&lt;/code&gt;s, you give your end-user the ability to spread out and control what&apos;s on his/her screen. The concept feels &quot;open&quot; and non-constricting. You lose this when you go towards one big &lt;code&gt;JFrame&lt;/code&gt; and a bunch of &lt;code&gt;JInternalFrame&lt;/code&gt;s.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Works well for very modularized applications&lt;/strong&gt; - In my case, most of my applications have 3 - 5 big &quot;modules&quot; that really have nothing to do with each other whatsoever. For instance, one module might be a sales dashboard and one might be an accounting dashboard. They don&apos;t talk to each other or anything. However, the executive might want to open both and them being separate frames on the taskbar makes his life easier.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Makes it easy for end-users to reference outside material&lt;/strong&gt; - Once, I had this situation: My app had a &quot;data viewer,&quot; from which you could click &quot;Add New&quot; and it would open a data entry screen. Initially, both were &lt;code&gt;JFrame&lt;/code&gt;s. However, I wanted the data entry screen to be a &lt;code&gt;JDialog&lt;/code&gt; whose parent was the data viewer. I made the change, and immediately I received a call from an end-user who relied heavily on the fact that he could minimize or close the &lt;strong&gt;viewer&lt;/strong&gt; and keep the &lt;strong&gt;editor&lt;/strong&gt; open while he referenced another part of the program (or a website, I don&apos;t remember). He&apos;s &lt;strong&gt;not&lt;/strong&gt; on a multi-monitor, so he needed the entry dialog to be first and &lt;em&gt;something else&lt;/em&gt; to be second, with the data viewer completely hidden. This was impossible with a &lt;code&gt;JDialog&lt;/code&gt; and certainly would&apos;ve been impossible with a &lt;code&gt;JInternalFrame&lt;/code&gt; as well. I begrudgingly changed it back to being separate &lt;code&gt;JFrames&lt;/code&gt; for his sanity, but it taught me an important lesson.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Myth: Hard to code&lt;/strong&gt; - This is not true in my experience. I don&apos;t see why it would be any easier to create a &lt;code&gt;JInternalFrame&lt;/code&gt; than a &lt;code&gt;JFrame&lt;/code&gt;. In fact, in my experience, &lt;code&gt;JInternalFrames&lt;/code&gt; offer much less flexibility. I have developed a systematic way of handling the opening &amp;amp; closing of &lt;code&gt;JFrame&lt;/code&gt;s in my apps that really works well. I control the frame almost completely from within the frame&apos;s code itself; the creation of the new frame, &lt;code&gt;SwingWorker&lt;/code&gt;s that control the retrieval of data on background threads and the GUI code on EDT, restoring/bringing to front the frame if the user tries to open it twice, etc. All you need to open my &lt;code&gt;JFrame&lt;/code&gt;s is call a public static method &lt;code&gt;open()&lt;/code&gt; and the open method, combined with a &lt;code&gt;windowClosing()&lt;/code&gt; event handles the rest (is the frame already open? is it not open, but loading? etc.) I made this approach a template so it&apos;s not difficult to implement for each frame.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Myth/Unproven: Resource Heavy&lt;/strong&gt; - I&apos;d like to see some facts behind this speculative statement. Although, perhaps, you could say a &lt;code&gt;JFrame&lt;/code&gt; needs more space than a &lt;code&gt;JInternalFrame&lt;/code&gt;, even if you open up 100 &lt;code&gt;JFrame&lt;/code&gt;s, how many more resources would you really be consuming? If your concern is memory leaks because of resources: calling &lt;code&gt;dispose()&lt;/code&gt; frees all resources used by the frame for garbage collection (and, again I say, a &lt;code&gt;JInternalFrame&lt;/code&gt; should invoke exactly the same concern).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I&apos;ve written a lot and I feel like I could write more. Anyways, I hope I don&apos;t get down-voted simply because it&apos;s an unpopular opinion. The question is clearly a valuable one and I hope I&apos;ve provided a valuable answer, even if it isn&apos;t the common opinion.&lt;/p&gt;\n\n&lt;p&gt;A great example of multiple frames/single document per frame (&lt;a href=&quot;http://en.wikipedia.org/wiki/Single_document_interface&quot;&gt;SDI&lt;/a&gt;) vs single frame/multiple documents per frame (&lt;a href=&quot;http://en.wikipedia.org/wiki/Multiple_document_interface&quot;&gt;MDI&lt;/a&gt;) is Microsoft Excel. Some of MDI benefits:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;it is possible to have a few windows in non rectangular shape - so they don&apos;t hide desktop or other window from another process (e.g. web browser)&lt;/li&gt;\n&lt;li&gt;it is possible to open a window from another process over one Excel window while writing in second Excel window - with MDI, trying to write in one of internal windows will give focus to the entire Excel window, hence hiding window from another process&lt;/li&gt;\n&lt;li&gt;it is possible to have different documents on different screens, which is especially useful when screens do not have the same resolution&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;SDI (Single-Document Interface, i.e., every window can only have a single document):&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/5iv4S.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n\n&lt;p&gt;MDI (Multiple-Document Interface, i.e., every window can have multiple documents):&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/HeLur.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;d like to counter the &quot;not user friendly&quot; argument with an example that I have just been involved with.&lt;/p&gt;\n\n&lt;p&gt;In our application we have a main window where the users run various &apos;programs&apos; as separate tabs. As much as possible we have tried to keep our application to this single window.&lt;/p&gt;\n\n&lt;p&gt;One of the &apos;programs&apos; they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.&lt;/p&gt;\n\n&lt;p&gt;A few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.&lt;/p&gt;\n\n&lt;p&gt;For some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this &apos;deficiency&apos; of our system.&lt;/p&gt;\n\n&lt;p&gt;They were opening a viewer, using the &apos;Save As&apos; facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.&lt;/p&gt;\n\n&lt;p&gt;So I relented and made the viewer modeless. This means that each viewer has a task-bar icon.&lt;/p&gt;\n\n&lt;p&gt;When the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It&apos;s been one of our most popular recent enhancements to the system.&lt;/p&gt;\n\n&lt;p&gt;So you go ahead and tell your users that what they want is bad, but ultimately it won&apos;t do you any favours.&lt;/p&gt;\n\n&lt;p&gt;SOME NOTES:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It seems to be best practice to use JDialog&apos;s for these modeless windows&lt;/li&gt;\n&lt;li&gt;Use the constructors that use the new &lt;code&gt;ModalityType&lt;/code&gt; rather than the boolean &lt;code&gt;modal&lt;/code&gt; argument. This is what gives these dialogs the task-bar icon.&lt;/li&gt;\n&lt;li&gt;For modeless dialogs, pass a null parent to the constructor, but locate them relative to their &apos;parent&apos; window.&lt;/li&gt;\n&lt;li&gt;Version 6 of Java on Windows has a &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6829546&quot;&gt;bug&lt;/a&gt; which means that your main window can become &apos;always on top&apos; without you telling it. Upgrade to version 7 to fix this&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Make an jInternalFrame into main frame and make it invisible. Then you can use it for further events.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;jInternalFrame.setSize(&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;150&lt;/span&gt;);\njInternalFrame.setVisible(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s been a while since the last time i touch swing but in general is a bad practice to do this. Some of the main disadvantages that comes to mind: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;It&apos;s more expensive:&lt;/strong&gt; you will have to allocate way more resources to draw a JFrame that other kind of window container, such as Dialog or JInternalFrame.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Not user friendly:&lt;/strong&gt; It is not easy to navigate into a bunch of JFrame stuck together, it will look like your application is a set of applications inconsistent and poorly design.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;It&apos;s easy to use JInternalFrame&lt;/strong&gt; This is kind of retorical, now it&apos;s way easier and other people smarter ( or with more spare time) than us have already think through the Desktop and JInternalFrame pattern, so I would recommend to use it.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Bad practice definitely. One reason is that it is not very &apos;user-friendly&apos; for the fact that every &lt;code&gt;JFrame&lt;/code&gt; shows a new taskbar icon. Controlling multiple &lt;code&gt;JFrame&lt;/code&gt;s will have you ripping your hair out.&lt;/p&gt;\n\n&lt;p&gt;Personally, I would use ONE &lt;code&gt;JFrame&lt;/code&gt; for your kind of application. Methods of displaying multiple things is up to you, there are many. &lt;code&gt;Canvas&lt;/code&gt;es, &lt;code&gt;JInternalFrame&lt;/code&gt;, &lt;code&gt;CardLayout&lt;/code&gt;, even &lt;code&gt;JPanel&lt;/code&gt;s possibly.&lt;/p&gt;\n\n&lt;p&gt;Multiple JFrame objects = Pain, trouble, and problems.&lt;/p&gt;\n    ","\n&lt;p&gt;I think using multiple &lt;code&gt;Jframe&lt;/code&gt;s is not a good idea.&lt;/p&gt;\n\n&lt;p&gt;Instead we can use &lt;code&gt;JPanel&lt;/code&gt;s more than one or more &lt;code&gt;JPanel&lt;/code&gt; in the same &lt;code&gt;JFrame&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also we can switch between this &lt;code&gt;JPanel&lt;/code&gt;s. So it gives us freedom to display more than on thing in the &lt;code&gt;JFrame&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For each &lt;code&gt;JPanel&lt;/code&gt; we can design different things and all this &lt;code&gt;JPanel&lt;/code&gt; can be displayed on the single &lt;code&gt;JFrame&lt;/code&gt;one at a time.&lt;/p&gt;\n\n&lt;p&gt;To switch between this &lt;code&gt;JPanel&lt;/code&gt;s use &lt;code&gt;JMenuBar&lt;/code&gt; with &lt;code&gt;JMenuItems&lt;/code&gt; for each &lt;code&gt;JPanel&lt;/code&gt;or &apos;JButton&lt;code&gt;for each&lt;/code&gt;JPanel`.&lt;/p&gt;\n\n&lt;p&gt;More than one &lt;code&gt;JFrame&lt;/code&gt; is not a good practice, but there is nothing wrong if we want more than one &lt;code&gt;JFrame&lt;/code&gt;.  &lt;/p&gt;\n\n&lt;p&gt;But its better to change one &lt;code&gt;JFrame&lt;/code&gt; for our different needs rather than having multiple &lt;code&gt;JFrame&lt;/code&gt;s.&lt;/p&gt;\n    ","\n&lt;p&gt;If the frames are going to be the same size, why not create the frame and pass the frame then as a reference to it instead. &lt;/p&gt;\n\n&lt;p&gt;When you have passed the frame you can then decide how to populate it. It would be like having a method for calculating the average of a set of figures. Would you create the method over and over again? &lt;/p&gt;\n    ","\n&lt;p&gt;It is not a good practice but even though you wish to use it you can use the singleton pattern as its good. I have used the singleton patterns in most of my project its good.&lt;/p&gt;\n    "],"70":["\n&lt;h2&gt;What is a raw type?&lt;/h2&gt;\n&lt;p&gt;The Java Language Specification defines a &lt;em&gt;raw type&lt;/em&gt; as follows:&lt;/p&gt;\n&lt;h3&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.8&quot; rel=&quot;noreferrer&quot;&gt;JLS 4.8 Raw Types&lt;/a&gt;&lt;/h3&gt;\n&lt;blockquote&gt;\n&lt;p&gt;A raw type is defined to be one of:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The reference type that is formed by taking the name of a generic type declaration without an accompanying type argument list.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;An array type whose element type is a raw type.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A non-&lt;code&gt;static&lt;/code&gt; member type of a raw type &lt;code&gt;R&lt;/code&gt; that is not inherited from a superclass or superinterface of &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Here&apos;s an example to illustrate:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyType&lt;/span&gt;&amp;lt;E&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Inner&lt;/span&gt; { }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; { }\n    \n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        MyType mt;          &lt;span class=&quot;hljs-comment&quot;&gt;// warning: MyType is a raw type&lt;/span&gt;\n        MyType.Inner inn;   &lt;span class=&quot;hljs-comment&quot;&gt;// warning: MyType.Inner is a raw type&lt;/span&gt;\n\n        MyType.Nested nest; &lt;span class=&quot;hljs-comment&quot;&gt;// no warning: not parameterized type&lt;/span&gt;\n        MyType&amp;lt;Object&amp;gt; mt1; &lt;span class=&quot;hljs-comment&quot;&gt;// no warning: type parameter given&lt;/span&gt;\n        MyType&amp;lt;?&amp;gt; mt2;      &lt;span class=&quot;hljs-comment&quot;&gt;// no warning: type parameter given (wildcard OK!)&lt;/span&gt;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Here, &lt;code&gt;MyType&amp;lt;E&amp;gt;&lt;/code&gt; is a &lt;em&gt;parameterized type&lt;/em&gt; (&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5&quot; rel=&quot;noreferrer&quot;&gt;JLS 4.5&lt;/a&gt;). It is common to colloquially refer to this type as simply &lt;code&gt;MyType&lt;/code&gt; for short, but technically the name is &lt;code&gt;MyType&amp;lt;E&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;mt&lt;/code&gt; has a raw type (and generates a compilation warning) by the first bullet point in the above definition; &lt;code&gt;inn&lt;/code&gt; also has a raw type by the third bullet point.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;MyType.Nested&lt;/code&gt; is not a parameterized type, even though it&apos;s a member type of a parameterized type &lt;code&gt;MyType&amp;lt;E&amp;gt;&lt;/code&gt;, because it&apos;s &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;mt1&lt;/code&gt;, and &lt;code&gt;mt2&lt;/code&gt; are both declared with actual type parameters, so they&apos;re not raw types.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;What&apos;s so special about raw types?&lt;/h2&gt;\n&lt;p&gt;Essentially, raw types behaves just like they were before generics were introduced. That is, the following is entirely legal at compile-time.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// warning: raw type!&lt;/span&gt;\nnames.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);\nnames.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;);\nnames.add(Boolean.FALSE); &lt;span class=&quot;hljs-comment&quot;&gt;// not a compilation error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The above code runs just fine, but suppose you also have the following:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Object o : names) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (String) o;\n    System.out.println(name);\n} &lt;span class=&quot;hljs-comment&quot;&gt;// throws ClassCastException!&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;//    java.lang.Boolean cannot be cast to java.lang.String&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now we run into trouble at run-time, because &lt;code&gt;names&lt;/code&gt; contains something that isn&apos;t an &lt;code&gt;instanceof String&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Presumably, if you want &lt;code&gt;names&lt;/code&gt; to contain only &lt;code&gt;String&lt;/code&gt;, you &lt;em&gt;could&lt;/em&gt; perhaps still use a raw type and &lt;em&gt;manually check every&lt;/em&gt; &lt;code&gt;add&lt;/code&gt; yourself, and then &lt;em&gt;manually cast&lt;/em&gt; to &lt;code&gt;String&lt;/code&gt; every item from &lt;code&gt;names&lt;/code&gt;. &lt;strong&gt;Even better&lt;/strong&gt;, though is NOT to use a raw type and &lt;em&gt;let the compiler do all the work for you&lt;/em&gt;, harnessing the power of Java generics.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; names = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nnames.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);\nnames.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;);\nnames.add(Boolean.FALSE); &lt;span class=&quot;hljs-comment&quot;&gt;// compilation error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Of course, if you &lt;em&gt;DO&lt;/em&gt; want &lt;code&gt;names&lt;/code&gt; to allow a &lt;code&gt;Boolean&lt;/code&gt;, then you can declare it as &lt;code&gt;List&amp;lt;Object&amp;gt; names&lt;/code&gt;, and the above code would compile.&lt;/p&gt;\n&lt;h3&gt;See also&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/&quot; rel=&quot;noreferrer&quot;&gt;Java Tutorials/Generics&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;How&apos;s a raw type different from using &lt;code&gt;&amp;lt;Object&amp;gt;&lt;/code&gt; as type parameters?&lt;/h2&gt;\n&lt;p&gt;The following is a quote from &lt;em&gt;Effective Java 2nd Edition, Item 23: Don&apos;t use raw types in new code&lt;/em&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Just what is the difference between the raw type &lt;code&gt;List&lt;/code&gt; and the parameterized type &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;? Loosely speaking, the former has opted out generic type checking, while the latter explicitly told the compiler that it is capable of holding objects of any type. While you can pass a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; to a parameter of type &lt;code&gt;List&lt;/code&gt;, you can&apos;t pass it to a parameter of type &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;. There are subtyping rules for generics, and &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; is a subtype of the raw type &lt;code&gt;List&lt;/code&gt;, but not of the parameterized type &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;. As a consequence, &lt;strong&gt;you lose type safety if you use raw type like &lt;code&gt;List&lt;/code&gt;, but not if you use a parameterized type like &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;To illustrate the point, consider the following method which takes a &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt; and appends a &lt;code&gt;new Object()&lt;/code&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendNewObject&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;Object&amp;gt; list)&lt;/span&gt; {\n   list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Generics in Java are invariant. A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; is not a &lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;, so the following would generate a compiler warning:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; names = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nappendNewObject(names); &lt;span class=&quot;hljs-comment&quot;&gt;// compilation error!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you had declared &lt;code&gt;appendNewObject&lt;/code&gt; to take a raw type &lt;code&gt;List&lt;/code&gt; as parameter, then this would compile, and you&apos;d therefore lose the type safety that you get from generics.&lt;/p&gt;\n&lt;h3&gt;See also&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2770264/what-is-the-difference-between-e-extends-number-and-number/&quot;&gt;What is the difference between &lt;code&gt;&amp;lt;E extends Number&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Number&amp;gt;&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2660827/java-generics-covariance&quot;&gt;java generics (not) covariance&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;How&apos;s a raw type different from using &lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt; as a type parameter?&lt;/h2&gt;\n&lt;p&gt;&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;, &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;, etc are all &lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;, so it may be tempting to just say that they&apos;re just &lt;code&gt;List&lt;/code&gt; instead. However, there is a major difference: since a &lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt; defines only &lt;code&gt;add(E)&lt;/code&gt;, you can&apos;t add just any arbitrary object to a &lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;. On the other hand, since the raw type &lt;code&gt;List&lt;/code&gt; does not have type safety, you can &lt;code&gt;add&lt;/code&gt; just about anything to a &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Consider the following variation of the previous snippet:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;appendNewObject&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(List&amp;lt;?&amp;gt; list)&lt;/span&gt; {\n    list.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// compilation error!&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;\n\nList&amp;lt;String&amp;gt; names = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nappendNewObject(names); &lt;span class=&quot;hljs-comment&quot;&gt;// this part is fine!&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The compiler did a wonderful job of protecting you from potentially violating the type invariance of the &lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;! If you had declared the parameter as the raw type &lt;code&gt;List list&lt;/code&gt;, then the code would compile, and you&apos;d violate the type invariant of &lt;code&gt;List&amp;lt;String&amp;gt; names&lt;/code&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;A raw type is the erasure of that type&lt;/h2&gt;\n&lt;p&gt;Back to JLS 4.8:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;It is possible to use as a type &lt;strong&gt;the erasure&lt;/strong&gt; of a parameterized type or the erasure of an array type whose element type is a parameterized type. &lt;strong&gt;Such a type is called a &lt;em&gt;raw type&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;[...]&lt;/em&gt;&lt;/p&gt;\n&lt;p&gt;The superclasses (respectively, superinterfaces) of a raw type are the erasures of the superclasses (superinterfaces) of any of the parameterizations of the generic type.&lt;/p&gt;\n&lt;p&gt;The type of a constructor, instance method, or non-&lt;code&gt;static&lt;/code&gt; field of a raw type &lt;code&gt;C&lt;/code&gt; that is not inherited from its superclasses or superinterfaces is the raw type that corresponds to the erasure of its type in the generic declaration corresponding to &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In simpler terms, when a raw type is used, the constructors, instance methods and non-&lt;code&gt;static&lt;/code&gt; fields are &lt;em&gt;also erased&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Take the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyType&lt;/span&gt;&amp;lt;E&amp;gt; {\n    List&amp;lt;String&amp;gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getNames&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;MyType&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rawType&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyType&lt;/span&gt;();\n        &lt;span class=&quot;hljs-comment&quot;&gt;// unchecked warning!&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// required: List&amp;lt;String&amp;gt; found: List&lt;/span&gt;\n        List&amp;lt;String&amp;gt; names = rawType.getNames();\n        &lt;span class=&quot;hljs-comment&quot;&gt;// compilation error!&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// incompatible types: Object cannot be converted to String&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str : rawType.getNames())\n            System.out.print(str);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When we use the raw &lt;code&gt;MyType&lt;/code&gt;, &lt;code&gt;getNames&lt;/code&gt; becomes erased as well, so that it returns a raw &lt;code&gt;List&lt;/code&gt;!&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.6&quot; rel=&quot;noreferrer&quot;&gt;JLS 4.6&lt;/a&gt; continues to explain the following:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;Type erasure also maps the signature of a constructor or method to a signature that has no parameterized types or type variables.&lt;/strong&gt; The erasure of a constructor or method signature &lt;code&gt;s&lt;/code&gt; is a signature consisting of the same name as &lt;code&gt;s&lt;/code&gt; and the erasures of all the formal parameter types given in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;The return type of a method and the type parameters of a generic method or constructor also undergo erasure if the method or constructor&apos;s signature is erased.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The erasure of the signature of a generic method has no type parameters.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;The following bug report contains some thoughts from Maurizio Cimadamore, a compiler dev, and Alex Buckley, one of the authors of the JLS, on why this sort of behavior ought to occur: &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-6400189&quot; rel=&quot;noreferrer&quot;&gt;https://bugs.openjdk.java.net/browse/JDK-6400189&lt;/a&gt;. (In short, it makes the specification simpler.)&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;If it&apos;s unsafe, why is it allowed to use a raw type?&lt;/h2&gt;\n&lt;p&gt;Here&apos;s another quote from JLS 4.8:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;The use of raw types is allowed only as a concession to compatibility of legacy code. &lt;em&gt;The use of raw types in code written after the introduction of genericity into the Java programming language is strongly discouraged. It is possible that future versions of the Java programming language will disallow the use of raw types.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;&lt;em&gt;Effective Java 2nd Edition&lt;/em&gt; also has this to add:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Given that you shouldn&apos;t use raw types, why did the language designers allow them? To provide compatibility.&lt;/p&gt;\n&lt;p&gt;The Java platform was about to enter its second decade when generics were introduced, and there was an enormous amount of Java code in existence that did not use generics. It was deemed critical that all this code remains legal and interoperable with new code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as &lt;em&gt;migration compatibility&lt;/em&gt;, drove the decision to support raw types.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;In summary, raw types should NEVER be used in new code. &lt;strong&gt;You should always use parameterized types&lt;/strong&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Are there no exceptions?&lt;/h2&gt;\n&lt;p&gt;Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Class literals, e.g. &lt;code&gt;List.class&lt;/code&gt;, not &lt;code&gt;List&amp;lt;String&amp;gt;.class&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt; operand, e.g. &lt;code&gt;o instanceof Set&lt;/code&gt;, not &lt;code&gt;o instanceof Set&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;See also&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2745193/why-is-collectionstring-class-illegal/&quot;&gt;Why is &lt;code&gt;Collection&amp;lt;String&amp;gt;.class&lt;/code&gt; Illegal?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;What are raw types in Java, and why do I often hear that they shouldn&apos;t be used in new code?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Raw-types are ancient history of the Java language. In the beginning there were &lt;code&gt;Collections&lt;/code&gt; and they held &lt;code&gt;Objects&lt;/code&gt; nothing more and nothing less. Every operation on &lt;code&gt;Collections&lt;/code&gt; required casts from &lt;code&gt;Object&lt;/code&gt; to the desired type.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aList&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;;\naList.add(s);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (String)aList.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this worked most of the time, errors did happen&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aNumberList&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//Number one&lt;/span&gt;\naNumberList.add(one);\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;iOne&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Integer)aNumberList.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//Insert ClassCastException here&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The old typeless collections could not enforce type-safety so the programmer had to remember what he stored within a collection.&lt;br&gt;\nGenerics where invented to get around this limitation, the developer would declare the stored type once and the compiler would do it instead.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; aNumberList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\naNumberList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;iOne&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aNumberList.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//Compile time error&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sOne&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; aNumberList.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//works fine&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For Comparison:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Old style collections now known as raw types&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;aList&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//Could contain anything&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// New style collections with Generics&lt;/span&gt;\nList&amp;lt;String&amp;gt; aList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//Contains only Strings&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;More complex the Compareable interface:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//raw, not type save can compare with Other classes&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCompareAble&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CompareAble&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object other)&lt;/span&gt;\n   {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id - ((MyCompareAble)other).id;}\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;//Generic&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCompareAble&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CompareAble&lt;/span&gt;&amp;lt;MyCompareAble&amp;gt;\n{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; id;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(MyCompareAble other)&lt;/span&gt;\n   {&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;this&lt;/span&gt;.id - other.id;}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that it is impossible to implement the &lt;code&gt;CompareAble&lt;/code&gt; interface with &lt;code&gt;compareTo(MyCompareAble)&lt;/code&gt; with raw types.\nWhy you should not use them:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Any &lt;code&gt;Object&lt;/code&gt; stored in a &lt;code&gt;Collection&lt;/code&gt; has to be cast before it can be used&lt;/li&gt;\n&lt;li&gt;Using generics enables compile time checks&lt;/li&gt;\n&lt;li&gt;Using raw types is the same as storing each value as &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;What the compiler does:\nGenerics are backward compatible, they use the same java classes as the raw types do. The magic happens mostly at compile time.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someStrings = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nsomeStrings.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someStrings.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Will be compiled as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;someStrings&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;();\nsomeStrings.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;one&quot;&lt;/span&gt;); \n&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (String)someStrings.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the same code you would write if you used the raw types directly. Thought I&apos;m not sure what happens with the &lt;code&gt;CompareAble&lt;/code&gt; interface, I guess that it creates two &lt;code&gt;compareTo&lt;/code&gt; functions, one taking a &lt;code&gt;MyCompareAble&lt;/code&gt; and the other taking an &lt;code&gt;Object&lt;/code&gt; and passing it to the first after casting it.&lt;/p&gt;\n\n&lt;p&gt;What are the alternatives to raw types: Use &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/extra/generics/index.html&quot; rel=&quot;noreferrer&quot;&gt;generics&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;&amp;lt;T&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T t)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To create a parameterized type of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, you supply an actual type argument for the formal type parameter &lt;code&gt;T&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Box&amp;lt;Integer&amp;gt; intBox = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If the actual type argument is omitted, you create a raw type of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rawBox&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Therefore, &lt;code&gt;Box&lt;/code&gt; is the raw type of the generic type &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;. However, a non-generic class or interface type is not a raw type.&lt;/p&gt;\n&lt;p&gt;Raw types show up in legacy code because lots of API classes (such as the Collections classes) were not generic prior to JDK 5.0. When using raw types, you essentially get pre-generics behavior  a &lt;code&gt;Box&lt;/code&gt; gives you &lt;code&gt;Object&lt;/code&gt;s. For backward compatibility, assigning a parameterized type to its raw type is allowed:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Box&amp;lt;String&amp;gt; stringBox = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rawBox&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stringBox;               &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;But if you assign a raw type to a parameterized type, you get a warning:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rawBox&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;();           &lt;span class=&quot;hljs-comment&quot;&gt;// rawBox is a raw type of Box&amp;lt;T&amp;gt;&lt;/span&gt;\nBox&amp;lt;Integer&amp;gt; intBox = rawBox;     &lt;span class=&quot;hljs-comment&quot;&gt;// warning: unchecked conversion&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You also get a warning if you use a raw type to invoke generic methods defined in the corresponding generic type:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Box&amp;lt;String&amp;gt; stringBox = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;span class=&quot;hljs-type&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rawBox&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stringBox;\nrawBox.set(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// warning: unchecked invocation to set(T)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, you should avoid using raw types.&lt;/p&gt;\n&lt;p&gt;The Type Erasure section has more information on how the Java compiler uses raw types.&lt;/p&gt;\n&lt;h3&gt;Unchecked Error Messages&lt;/h3&gt;\n&lt;p&gt;As mentioned previously, when mixing legacy code with generic code, you may encounter warning messages similar to the following:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Note: Example.java uses unchecked or unsafe operations.&lt;/p&gt;\n&lt;p&gt;Note: Recompile with -Xlint:unchecked for details.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;This can happen when using an older API that operates on raw types, as shown in the following example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;WarningDemo&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt;{\n        Box&amp;lt;Integer&amp;gt; bi;\n        bi = createBox();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Box &lt;span class=&quot;hljs-title function_&quot;&gt;createBox&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The term &quot;unchecked&quot; means that the compiler does not have enough type information to perform all type checks necessary to ensure type safety. The &quot;unchecked&quot; warning is disabled, by default, though the compiler gives a hint. To see all &quot;unchecked&quot; warnings, recompile with -Xlint:unchecked.&lt;/p&gt;\n&lt;p&gt;Recompiling the previous example with -Xlint:unchecked reveals the following additional information:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;WarningDemo.java:&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;: warning: [unchecked] unchecked conversion\nfound   : Box\nrequired: Box&amp;lt;java.lang.Integer&amp;gt;\n        bi = createBox();\n                      ^\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; warning\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To completely disable unchecked warnings, use the -Xlint:-unchecked flag. The &lt;code&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/code&gt; annotation suppresses unchecked warnings. If you are unfamiliar with the &lt;code&gt;@SuppressWarnings&lt;/code&gt; syntax, see Annotations.&lt;/p&gt;\n&lt;p&gt;Original source: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html&quot; rel=&quot;noreferrer&quot;&gt;Java Tutorials&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A &quot;raw&quot; type in Java is a class which is non-generic and deals with &quot;raw&quot; Objects, rather than type-safe generic type parameters.&lt;/p&gt;\n\n&lt;p&gt;For example, before Java generics was available, you would use a collection class like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;LinkedList&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;();\nlist.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyObject&lt;/span&gt;());\n&lt;span class=&quot;hljs-type&quot;&gt;MyObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (MyObject)list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you add your object to the list, it doesn&apos;t care what type of object it is, and when you get it from the list, you have to explicitly cast it to the type you are expecting.&lt;/p&gt;\n\n&lt;p&gt;Using generics, you remove the &quot;unknown&quot; factor, because you must explicitly specify which type of objects can go in the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;LinkedList&amp;lt;MyObject&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinkedList&lt;/span&gt;&amp;lt;MyObject&amp;gt;();\nlist.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyObject&lt;/span&gt;());\n&lt;span class=&quot;hljs-type&quot;&gt;MyObject&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that with generics you don&apos;t have to cast the object coming from the get call, the collection is pre-defined to only work with MyObject.  This very fact is the main driving factor for generics.  It changes a source of runtime errors into something that can be checked at compile time.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should specify the type-parameter. &lt;/p&gt;\n\n&lt;p&gt;The warning advises that types that are defined to support &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/language/generics.html&quot; rel=&quot;noreferrer&quot;&gt;generics&lt;/a&gt; should be parameterized, rather than using their raw form.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;List&lt;/code&gt; is defined to support generics: &lt;code&gt;public class List&amp;lt;E&amp;gt;&lt;/code&gt;. This allows many type-safe operations, that are checked compile-time.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;What is a raw type and why do I often hear that they shouldn&apos;t be used in new code?&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;A &quot;raw type&quot; is the use of a generic class without specifying a type argument(s) for its parameterized type(s), e.g. using &lt;code&gt;List&lt;/code&gt; instead of &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;. When generics were introduced into Java, several classes were updated to use generics.  Using these class as a &quot;raw type&quot; (without specifying a type argument) allowed legacy code to still compile.&lt;/p&gt;\n\n&lt;p&gt;&quot;Raw types&quot; are used for backwards compatibility. Their use in new code is not recommended because using the generic class with a type argument allows for stronger typing, which in turn may improve code understandability and lead to catching potential problems earlier.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;What is the alternative if we can&apos;t use raw types, and how is it better?&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The preferred alternative is to use generic classes as intended - with a suitable type argument (e.g. &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;). This allows the programmer to specify types more specifically, conveys more meaning to future maintainers about the intended use of a variable or data structure, and it allows compiler to enforce better type-safety.  These advantages together may improve code quality and help prevent the introduction of some coding errors.&lt;/p&gt;\n\n&lt;p&gt;For example, for a method where the programmer wants to ensure a List variable called &apos;names&apos; contains only Strings:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; names = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nnames.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;John&quot;&lt;/span&gt;);          &lt;span class=&quot;hljs-comment&quot;&gt;// OK&lt;/span&gt;\nnames.add(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;));  &lt;span class=&quot;hljs-comment&quot;&gt;// compile error&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here I am Considering multiple cases  through which you can clearify  the concept&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;();\n&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ArrayList&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Case 1&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;ArrayList&amp;lt;String&amp;gt; arr&lt;/code&gt; it is a &lt;code&gt;ArrayList&lt;/code&gt; reference variable with type &lt;code&gt;String&lt;/code&gt; which reference to a &lt;code&gt;ArralyList&lt;/code&gt; Object of Type &lt;code&gt;String&lt;/code&gt;. It means it can hold only String type Object.&lt;/p&gt;\n\n&lt;p&gt;It is a Strict to &lt;code&gt;String&lt;/code&gt; not  a Raw Type so, It will never raise an warning .&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    arr.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;// alone statement will compile successfully and no warning.&lt;/span&gt;\n\n    arr.add(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//prone to compile time error.&lt;/span&gt;\n     &lt;span class=&quot;hljs-comment&quot;&gt;//error: no suitable method found for add(int)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Case 2&lt;/h2&gt;\n\n&lt;p&gt;In this case &lt;code&gt;ArrayList&amp;lt;String&amp;gt; arr&lt;/code&gt; is a strict type but your Object &lt;code&gt;new ArrayList();&lt;/code&gt; is a raw type. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    arr.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//alone this compile but raise the warning.&lt;/span&gt;\n    arr.add(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//again prone to compile time error.&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//error: no suitable method found for add(int)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;here &lt;code&gt;arr&lt;/code&gt; is a Strict type. So, It will raise compile time error when adding a &lt;code&gt;integer&lt;/code&gt;.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; :- A &lt;code&gt;Raw&lt;/code&gt; Type Object is referenced to a &lt;code&gt;Strict&lt;/code&gt; type Referenced Variable of &lt;code&gt;ArrayList&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Case 3&lt;/h2&gt;\n\n&lt;p&gt;In this case &lt;code&gt;ArrayList arr&lt;/code&gt; is a raw type but your Object &lt;code&gt;new ArrayList&amp;lt;String&amp;gt;();&lt;/code&gt; is a Strict type. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;    arr.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);  \n    arr.add(&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//compiles fine but raise the warning.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will add any type of Object into it because &lt;code&gt;arr&lt;/code&gt; is a Raw Type.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; :- A &lt;code&gt;Strict&lt;/code&gt; Type Object is referenced to a &lt;code&gt;raw&lt;/code&gt; type referenced Variable.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The compiler wants you to write this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;because otherwise, you could add any type you like into &lt;code&gt;list&lt;/code&gt;, making the instantiation as &lt;code&gt;new ArrayList&amp;lt;String&amp;gt;()&lt;/code&gt; pointless. Java generics are a compile-time feature only, so an object created with &lt;code&gt;new ArrayList&amp;lt;String&amp;gt;()&lt;/code&gt; will happily accept &lt;code&gt;Integer&lt;/code&gt; or &lt;code&gt;JFrame&lt;/code&gt; elements if assigned to a reference of the &quot;raw type&quot; &lt;code&gt;List&lt;/code&gt; - the object itself knows nothing about what types it&apos;s supposed to contain, only the compiler does.&lt;/p&gt;\n    ","\n&lt;p&gt;Here&apos;s another case where raw types will bite you:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StrangeClass&lt;/span&gt;&amp;lt;T&amp;gt; {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@SuppressWarnings(&quot;unchecked&quot;)&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &amp;lt;X&amp;gt; X &lt;span class=&quot;hljs-title function_&quot;&gt;getSomethingElse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (X)&lt;span class=&quot;hljs-string&quot;&gt;&quot;Testing something else!&quot;&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; StrangeClass&amp;lt;String&amp;gt; withGeneric    = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StrangeClass&lt;/span&gt;&amp;lt;&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;StrangeClass&lt;/span&gt;         &lt;span class=&quot;hljs-variable&quot;&gt;withoutGeneric&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;StrangeClass&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; String               value1,\n                               value2;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Compiles&lt;/span&gt;\n    value1 = withGeneric.getSomethingElse();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Produces compile error:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// incompatible types: java.lang.Object cannot be converted to java.lang.String&lt;/span&gt;\n    value2 = withoutGeneric.getSomethingElse();\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This is counter-intuitive because you&apos;d expect the raw type to only affect methods bound to the class type parameter, but it actually &lt;em&gt;also&lt;/em&gt; affects generic methods with their own type parameters.&lt;/p&gt;\n&lt;p&gt;As was mentioned in the accepted answer, you lose all support for generics within the code of the raw type. Every type parameter is converted to its erasure (which in the above example is just &lt;code&gt;Object&lt;/code&gt;).&lt;/p&gt;\n    ","\n&lt;p&gt;A &lt;em&gt;raw&lt;/em&gt;-type is the a lack of a &lt;em&gt;type parameter&lt;/em&gt; when using a generic type.&lt;/p&gt;\n\n&lt;p&gt;Raw-type should not be used because it could cause runtime errors, like inserting a &lt;code&gt;double&lt;/code&gt; into what was supposed to be a &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;int&lt;/code&gt;s.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;();\nset.add(&lt;span class=&quot;hljs-number&quot;&gt;3.45&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//ok&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When retrieving the stuff from the &lt;code&gt;Set&lt;/code&gt;, you don&apos;t know what is coming out. Let&apos;s assume that you expect it to be all &lt;code&gt;int&lt;/code&gt;s, you are casting it to &lt;code&gt;Integer&lt;/code&gt;; exception at runtime when the &lt;code&gt;double&lt;/code&gt; 3.45 comes along.&lt;/p&gt;\n\n&lt;p&gt;With a &lt;em&gt;type parameter&lt;/em&gt; added to your &lt;code&gt;Set&lt;/code&gt;, you will get a compile error at once. This preemptive error lets you fix the problem before something blows up during runtime (thus saving on time and effort).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Set&amp;lt;Integer&amp;gt; set = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;Integer&amp;gt;();\nset.add(&lt;span class=&quot;hljs-number&quot;&gt;3.45&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//NOT ok.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Avoid raw types.&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Raw types refer to using a generic type without specifying a type parameter.&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;p&gt;A &lt;code&gt;list&lt;/code&gt; is a raw type, while &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; is a parameterized type.&lt;/p&gt;\n&lt;p&gt;When generics were introduced in JDK 1.5, raw types were retained only to maintain backwards compatibility with older versions of Java.&lt;/p&gt;\n&lt;p&gt;Although using raw types is still possible, they should be avoided:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;They usually require casts.&lt;/li&gt;\n&lt;li&gt;They aren&apos;t type safe, and some important kinds of errors will only appear at runtime.&lt;/li&gt;\n&lt;li&gt;They are less expressive, and don&apos;t self-document in the same way as parameterized types..&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;AvoidRawTypes&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;withRawType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Raw List doesn&apos;t self-document, &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;//doesn&apos;t state explicitly what it can contain&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;stars&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Arcturus&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Vega&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Altair&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-type&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stars.iterator();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iter.hasNext()) {\n            &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (String) iter.next(); &lt;span class=&quot;hljs-comment&quot;&gt;//cast needed&lt;/span&gt;\n            log(star);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;withParameterizedType&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        List &amp;lt; String &amp;gt; stars = Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Spica&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Regulus&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Antares&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String star: stars) {\n            log(star);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object message)&lt;/span&gt; {\n        System.out.println(Objects.toString(message));\n    }\n}\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For reference: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;What is saying is that your &lt;code&gt;list&lt;/code&gt; is a &lt;code&gt;List&lt;/code&gt; of unespecified objects. That is that Java does not know what kind of objects are inside the list. Then when you want to iterate the list you have to cast every element, to be able to access the properties of that element (in this case, String).&lt;/p&gt;\n\n&lt;p&gt;In general is a better idea to parametrize the collections, so you don&apos;t have conversion problems, you will only be able to add elements of the parametrized type and your editor will offer you the appropiate methods to select.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;tutorial page&lt;/a&gt;.  &lt;/p&gt;\n\n&lt;p&gt;A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;&amp;lt;T&amp;gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(T t)&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* ... */&lt;/span&gt; }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To create a parameterized type of Box, you supply an actual type argument for the formal type parameter T:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Box&amp;lt;Integer&amp;gt; intBox = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;&amp;lt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If the actual type argument is omitted, you create a raw type of Box:  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;rawBox&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Box&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I found this page after doing some sample exercises and having the exact same puzzlement.&lt;/p&gt;\n\n&lt;p&gt;============== I went from this code as provide by the sample ===============&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n\n    &lt;span class=&quot;hljs-type&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;wordMap&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; args.length; i++) {\n            countWord(wordMap, args[i]);\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        getWordFrequency(System.in, wordMap);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; wordMap.entrySet().iterator(); i.hasNext();) {\n        Map.&lt;span class=&quot;hljs-type&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Map.Entry) i.next();\n        System.out.println(entry.getKey() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; :\\t&quot;&lt;/span&gt; + entry.getValue());\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;====================== To This code ========================&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// replace with TreeMap to get them sorted by name&lt;/span&gt;\n    Map&amp;lt;String, Integer&amp;gt; wordMap = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;String, Integer&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; args.length; i++) {\n            countWord(wordMap, args[i]);\n        }\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        getWordFrequency(System.in, wordMap);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;Entry&amp;lt;String, Integer&amp;gt;&amp;gt; i = wordMap.entrySet().iterator(); i.hasNext();) {\n        Entry&amp;lt;String, Integer&amp;gt; entry =   i.next();\n        System.out.println(entry.getKey() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; :\\t&quot;&lt;/span&gt; + entry.getValue());\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;===============================================================================&lt;/p&gt;\n\n&lt;p&gt;It may be safer but took 4  hours to demuddle the philosophy...&lt;/p&gt;\n    ","\n&lt;p&gt;Raw types are fine when they express what you want to express.&lt;/p&gt;\n\n&lt;p&gt;For example, a deserialisation function might return a &lt;code&gt;List&lt;/code&gt;, but it doesn&apos;t know the list&apos;s element type. So &lt;code&gt;List&lt;/code&gt; is the appropriate return type here.&lt;/p&gt;\n    "]},"page":"109","randomQuestions":[{"title":"Determine Whether Two Date Ranges Overlap","slug":"determine-whether-two-date-ranges-overlap-1657387924335"},{"title":"How do I make a redirect in PHP?","slug":"how-do-i-make-a-redirect-in-php-1657387381903"},{"title":"What is the difference between const int*, const int * const, and int const *?","slug":"what-is-the-difference-between-const-int*-const-int-*-const-and-int-const-*-1657388184604"},{"title":"How can I group an array of objects by key?","slug":"how-can-i-group-an-array-of-objects-by-key-1657388065372"},{"title":"What is a clearfix?","slug":"what-is-a-clearfix-1657387337825"},{"title":"Why is the gets function so dangerous that it should not be used?","slug":"why-is-the-gets-function-so-dangerous-that-it-should-not-be-used-1657384544362"},{"title":"How to store objects in HTML5 localStorage","slug":"how-to-store-objects-in-html5-localstorage-1657387568907"},{"title":"XMLHttpRequest cannot load XXX No 'Access-Control-Allow-Origin' header","slug":"xmlhttprequest-cannot-load-xxx-no-'access-control-allow-origin'-header-1657384758362"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"Difference between sh and Bash","slug":"difference-between-sh-and-bash-1657388197713"},{"title":"How do I copy to the clipboard in JavaScript?","slug":"how-do-i-copy-to-the-clipboard-in-javascript-1657385501223"},{"title":"Why does Spring MVC respond with a 404 and report \"No mapping found for HTTP request with URI [...] in DispatcherServlet\"?","slug":"why-does-spring-mvc-respond-with-a-404-and-report-\"no-mapping-found-for-http-request-with-uri-...-in-dispatcherservlet\"-1657387995250"},{"title":"What is the scope of variables in JavaScript?","slug":"what-is-the-scope-of-variables-in-javascript-1657384464291"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195"},{"title":"WebDriverWait not working as expected","slug":"webdriverwait-not-working-as-expected-1657387373148"},{"title":"Does Python have a ternary conditional operator?","slug":"does-python-have-a-ternary-conditional-operator-1657387555448"},{"title":"Get selected value in dropdown list using JavaScript","slug":"get-selected-value-in-dropdown-list-using-javascript-1657387631638"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"Difference between single and double quotes in Bash","slug":"difference-between-single-and-double-quotes-in-bash-1657385460827"}]},"__N_SSG":true}