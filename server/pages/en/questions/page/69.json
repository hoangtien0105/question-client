{"pageProps":{"data":{"count":610,"rows":[{"id":270,"title":"Returning data from async call in Swift function","slug":"returning-data-from-async-call-in-swift-function-1657387469218","postType":"QUESTION","createdAt":"2022-07-09T17:24:29.000Z","updatedAt":"2022-07-09T17:24:29.000Z","tags":[]},{"id":269,"title":"How do I properly compare strings in C?","slug":"how-do-i-properly-compare-strings-in-c-1657387467202","postType":"QUESTION","createdAt":"2022-07-09T17:24:27.000Z","updatedAt":"2022-07-09T17:24:27.000Z","tags":[{"id":1694,"name":"strcmp","slug":"strcmp","createdAt":"2022-07-09T17:24:27.000Z","updatedAt":"2022-07-09T17:24:27.000Z","Questions_Tags":{"questionId":269,"tagId":1694}}]},{"id":268,"title":"What special characters must be escaped in regular expressions?","slug":"what-special-characters-must-be-escaped-in-regular-expressions-1657387465381","postType":"QUESTION","createdAt":"2022-07-09T17:24:25.000Z","updatedAt":"2022-07-09T17:24:25.000Z","tags":[]},{"id":267,"title":"Post an HTML Table to ADO.NET DataTable","slug":"post-an-html-table-to-ado.net-datatable-1657387462723","postType":"QUESTION","createdAt":"2022-07-09T17:24:22.000Z","updatedAt":"2022-07-09T17:24:22.000Z","tags":[{"id":1689,"name":"razor","slug":"razor","createdAt":"2022-07-09T17:24:22.000Z","updatedAt":"2022-07-09T17:24:22.000Z","Questions_Tags":{"questionId":267,"tagId":1689}},{"id":1690,"name":"asp.net-mvc-5","slug":"asp.net-mvc-5","createdAt":"2022-07-09T17:24:22.000Z","updatedAt":"2022-07-09T17:24:22.000Z","Questions_Tags":{"questionId":267,"tagId":1690}}]},{"id":266,"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003","postType":"QUESTION","createdAt":"2022-07-09T17:24:21.000Z","updatedAt":"2022-07-09T17:24:21.000Z","tags":[{"id":1685,"name":"numpy","slug":"numpy","createdAt":"2022-07-09T17:24:21.000Z","updatedAt":"2022-07-09T17:24:21.000Z","Questions_Tags":{"questionId":266,"tagId":1685}}]}]},"answers":{"266":["\n&lt;p&gt;&lt;strong&gt;If you only have two choices to select from:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   Z    A  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Z    B  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   X    B    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Y    C    red\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;If you have more than two conditions then use &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;np.select&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. For example, if you want &lt;code&gt;color&lt;/code&gt; to be &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt; when &lt;code&gt;(df[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (df[&apos;Type&apos;] == &apos;A&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;blue&lt;/code&gt; when &lt;code&gt;(df[&apos;Set&apos;] == &apos;Z&apos;) &amp;amp; (df[&apos;Type&apos;] == &apos;B&apos;)&lt;/code&gt; &lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;purple&lt;/code&gt; when &lt;code&gt;(df[&apos;Type&apos;] == &apos;B&apos;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;otherwise &lt;code&gt;black&lt;/code&gt;,&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;then use&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\nconditions = [\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;),\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;),\n    (df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;)]\nchoices = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;purple&apos;&lt;/span&gt;]\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.select(conditions, choices, default=&lt;span class=&quot;hljs-string&quot;&gt;&apos;black&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which yields&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;   color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   Z    A  yellow\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   Z    B    blue\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   X    B  purple\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   Y    C   black\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;List comprehension is another way to create another column conditionally. If you are working with object dtypes in columns, like in your example, list comprehensions typically outperform most other methods.&lt;/p&gt;\n\n&lt;p&gt;Example list comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;%timeit tests:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)})\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;239&lt;/span&gt; µs per loop\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;523&lt;/span&gt; µs per loop\n&lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt; loops, best of &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;263&lt;/span&gt; µs per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another way in which this could be achieved is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The following is slower than the approaches timed &lt;a href=&quot;https://stackoverflow.com/a/31173785/1878788&quot;&gt;here&lt;/a&gt;, but we can compute the extra column based on the contents of more than one column, and more than two values can be computed for the extra column.&lt;/p&gt;\n\n&lt;p&gt;Simple example using just the &quot;Set&quot; column:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_color&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\ndf = df.assign(color=df.apply(set_color, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example with more colours and more columns taken into account:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;set_color&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Set&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; row[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Type&quot;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\ndf = df.assign(color=df.apply(set_color, axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C   blue\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Edit (21/06/2019): Using plydata&lt;/h3&gt;\n\n&lt;p&gt;It is also possible to use &lt;a href=&quot;https://github.com/has2k1/plydata&quot; rel=&quot;noreferrer&quot;&gt;plydata&lt;/a&gt; to do this kind of things (this seems even slower than using &lt;code&gt;assign&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, though).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; plydata &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; define, if_else\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple &lt;code&gt;if_else&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = define(df, color=if_else(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set==&quot;Z&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;red&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;green&quot;&apos;&lt;/span&gt;))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B  green\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Nested &lt;code&gt;if_else&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = define(df, color=if_else(\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set==&quot;Z&quot;&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;red&quot;&apos;&lt;/span&gt;,\n    if_else(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type==&quot;C&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;green&quot;&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot;blue&quot;&apos;&lt;/span&gt;)))\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)                            \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;  Set Type  color\n0   Z    A    red\n1   Z    B    red\n2   X    B   blue\n3   Y    C  green\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s yet another way to skin this cat, using a dictionary to map new values onto the keys in the list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;map_values&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;row, values_dict&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; values_dict[row]\n\nvalues_dict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}\n\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&apos;VALUE&apos;&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]})\n\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;].apply(map_values, args = (values_dict,))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What&apos;s it look like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df\nOut[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: \n  INDICATOR  VALUE  NEW_VALUE\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;         A     &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;         B      &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;         C      &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;         D      &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;          &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This approach can be very powerful when you have many &lt;code&gt;ifelse&lt;/code&gt;-type statements to make (i.e. many unique values to replace).&lt;/p&gt;\n\n&lt;p&gt;And of course you could always do this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(values_dict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But that approach is more than three times as slow as the &lt;code&gt;apply&lt;/code&gt; approach from above, on my machine.&lt;/p&gt;\n\n&lt;p&gt;And you could also do this, using &lt;code&gt;dict.get&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;NEW_VALUE&apos;&lt;/span&gt;] = [values_dict.get(v, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;INDICATOR&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can simply use the powerful &lt;code&gt;.loc&lt;/code&gt; method and use one condition or several depending on your need (tested with pandas=1.0.5).&lt;/p&gt;\n&lt;p&gt;Code Summary:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;A B B C&apos;&lt;/span&gt;.split(), &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z Z X Y&apos;&lt;/span&gt;.split()))\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\ndf.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#practice!&lt;/span&gt;\ndf.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;)&amp;amp;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;)|(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Explanation:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df=pd.DataFrame(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;A B B C&apos;&lt;/span&gt;.split(), &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z Z X Y&apos;&lt;/span&gt;.split()))\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# df so far: &lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  \n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z \n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z \n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X \n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;add a &apos;color&apos; column and set all values to &quot;red&quot;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Apply your single condition:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# df: &lt;/span&gt;\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  Color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or multiple conditions if you want:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.loc[(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;)&amp;amp;(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;)|(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;Color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;purple&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can read on Pandas logical operators and conditional selection here:\n&lt;a href=&quot;https://stackoverflow.com/questions/21415661/logical-operators-for-boolean-indexing-in-pandas&quot;&gt;Logical operators for boolean indexing in Pandas&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can use pandas methods &lt;a href=&quot;http://pandas.pydata.org/docs/reference/api/pandas.Series.where.html#pandas.Series.where&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html#pandas.Series.mask&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;mask&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;].where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, other=&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace values where the condition is False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;].mask(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, other=&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# Replace values where the condition is True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, you can use the method &lt;code&gt;transform&lt;/code&gt; with a lambda function:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].transform(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Performance comparison from @chai:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; pd\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; np\ndf = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;})\n \n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color1&apos;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color1&apos;&lt;/span&gt;].where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color2&apos;&lt;/span&gt;] = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]]\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color3&apos;&lt;/span&gt;] = np.where(df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n%timeit df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color4&apos;&lt;/span&gt;] = df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;397&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;span class=&quot;hljs-number&quot;&gt;976&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;241&lt;/span&gt; ms per loop\n&lt;span class=&quot;hljs-number&quot;&gt;673&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;139&lt;/span&gt; ms per loop\n&lt;span class=&quot;hljs-number&quot;&gt;796&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;182&lt;/span&gt; ms per loop\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One liner with &lt;code&gt;.apply()&lt;/code&gt; method is following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; set_: &lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; set_==&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that, &lt;code&gt;df&lt;/code&gt; data frame looks like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(df)\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;if you have only &lt;strong&gt;2 choices&lt;/strong&gt;, use &lt;code&gt;np.where()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)})\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] = np.where(df.A&amp;gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;yes&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;no&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you have over &lt;strong&gt;2 choices&lt;/strong&gt;, maybe &lt;code&gt;apply()&lt;/code&gt; could work\ninput&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and arr is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A   B   C   D\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   a   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   b   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   c   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;if you want the column E tobe &lt;code&gt;if arr.A ==&apos;a&apos; then arr.B elif arr.A==&apos;b&apos; then arr.C elif arr.A == &apos;c&apos; then arr.D else something_else&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;E&apos;&lt;/span&gt;] = arr.apply(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;(x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;b&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;(x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;D&apos;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;]==&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1234&lt;/span&gt;)), axis=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;and finally the arr is&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    A   B   C   D   E\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   a   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   b   &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   c   &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;If you&apos;re working with massive data, a memoized approach would be best:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# First create a dictionary of manually stored values&lt;/span&gt;\ncolor_dict = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;red&apos;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Second, build a dictionary of &quot;other&quot; values&lt;/span&gt;\ncolor_dict_other = {x:&lt;span class=&quot;hljs-string&quot;&gt;&apos;green&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].unique() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; color_dict.keys()}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Next, merge the two&lt;/span&gt;\ncolor_dict.update(color_dict_other)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Finally, map it to your column&lt;/span&gt;\ndf[&lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;] = df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;].&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(color_dict)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;This approach will be fastest when you have many repeated values.&lt;/em&gt; My general rule of thumb is to memoize when: &lt;code&gt;data_size&lt;/code&gt; &amp;gt; &lt;code&gt;10**4&lt;/code&gt; &amp;amp; &lt;code&gt;n_distinct&lt;/code&gt; &amp;lt; &lt;code&gt;data_size/4&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;E.x. Memoize in a case 10,000 rows with 2,500 or fewer distinct values.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://pyjanitor-devs.github.io/pyjanitor/reference/janitor.functions/janitor.case_when.html#janitor.case_when&quot; rel=&quot;nofollow noreferrer&quot;&gt;case_when&lt;/a&gt; function from &lt;a href=&quot;https://pyjanitor-devs.github.io/pyjanitor/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyjanitor&lt;/a&gt; is a wrapper around &lt;code&gt;pd.Series.mask&lt;/code&gt; and offers a chainable/convenient form for multiple conditions:&lt;/p&gt;\n&lt;p&gt;For a single condition:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.case_when(\n    df.col1 == &lt;span class=&quot;hljs-string&quot;&gt;&quot;Z&quot;&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;# condition&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;green&quot;&lt;/span&gt;,         &lt;span class=&quot;hljs-comment&quot;&gt;# value if True&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;,           &lt;span class=&quot;hljs-comment&quot;&gt;# value if False&lt;/span&gt;\n    column_name = &lt;span class=&quot;hljs-string&quot;&gt;&quot;color&quot;&lt;/span&gt;\n    )\n\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;  color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z  green\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X    red\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y    red\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For multiple conditions:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;df.case_when(\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;yellow&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;) &amp;amp; df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;blue&apos;&lt;/span&gt;,   &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    df.&lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;.eq(&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;purple&apos;&lt;/span&gt;,                  &lt;span class=&quot;hljs-comment&quot;&gt;# condition, result&lt;/span&gt;\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;black&apos;&lt;/span&gt;,              &lt;span class=&quot;hljs-comment&quot;&gt;# default if none of the conditions evaluate to True&lt;/span&gt;\n    column_name = &lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;  \n)\n  &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;  &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt;   color\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    A   Z  yellow\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    B   Z    blue\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    B   X  purple\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;    C   Y   black\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;More examples can be found &lt;a href=&quot;https://github.com/pyjanitor-devs/pyjanitor/blob/dev/examples/notebooks/case_when.ipynb&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;A Less verbose approach using &lt;code&gt;np.select&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;a = np.array([[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;],[&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;]])\ndf = pd.DataFrame(a,columns=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;])\n\nconditions = [\n    df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;\n]\n\noutputs = [\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;\n    ]\n             &lt;span class=&quot;hljs-comment&quot;&gt;# conditions Z is Green, Red Otherwise.&lt;/span&gt;\nres = np.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\nres \narray([&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;U5&apos;&lt;/span&gt;)\ndf.insert(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;new_column&apos;&lt;/span&gt;,res)    \n\ndf\n    &lt;span class=&quot;hljs-type&quot;&gt;Type&lt;/span&gt;    &lt;span class=&quot;hljs-type&quot;&gt;Set&lt;/span&gt; new_column\n&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   A   Z   Green\n&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   B   Z   Green\n&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   B   X   Red\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;   C   Y   Red\n\ndf.to_numpy()    \n    \narray([[&lt;span class=&quot;hljs-string&quot;&gt;&apos;A&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;B&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;X&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;],\n       [&lt;span class=&quot;hljs-string&quot;&gt;&apos;C&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;]], dtype=&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt;)\n\n%%timeit conditions = [df[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;] \noutputs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;] \nnp.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;134&lt;/span&gt; µs ± &lt;span class=&quot;hljs-number&quot;&gt;9.71&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt; loops each)\n\ndf2 = pd.DataFrame({&lt;span class=&quot;hljs-string&quot;&gt;&apos;Type&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ABBC&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;:&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;ZZXY&apos;&lt;/span&gt;)*&lt;span class=&quot;hljs-number&quot;&gt;1000000&lt;/span&gt;})\n%%timeit conditions = [df2[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Set&apos;&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&apos;Z&apos;&lt;/span&gt;] \noutputs = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Green&apos;&lt;/span&gt;] \nnp.select(conditions, outputs, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Red&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-number&quot;&gt;188&lt;/span&gt; ms ± &lt;span class=&quot;hljs-number&quot;&gt;26.5&lt;/span&gt; ms per loop (mean ± std. dev. of &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; loop each)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"267":["\n&lt;p&gt;In order to bind to a model on post back, the &lt;code&gt;name&lt;/code&gt; attributes of the form controls must match the model properties. Your use of a &lt;code&gt;foreach&lt;/code&gt; loop does not generate the correct name attributes. If you inspect the html you will see multiple instances of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&amp;lt;input type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;item.LeaveType&quot;&lt;/span&gt; .../&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but in order to bind to your model the controls would need to be &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&amp;lt;input type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;LeaveDetailsList[0].LeaveType&quot;&lt;/span&gt; .../&amp;gt;\n&amp;lt;input type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;LeaveDetailsList[1].LeaveType&quot;&lt;/span&gt; .../&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc. The easiest way to think about this is to consider how you would access the value of a &lt;code&gt;LeaveType&lt;/code&gt; property in &lt;code&gt;C#&lt;/code&gt; code&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; model = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LeaveBalanceViewModel();\n&lt;span class=&quot;hljs-comment&quot;&gt;// add some LeaveBalanceDetails instances to the LeaveDetailsList property, then access a value&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; leaveType = model.LeaveDetailsList[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].LeaveType;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Since your POST method will have a parameter name (say &lt;code&gt;model&lt;/code&gt;), just drop the prefix (&lt;code&gt;model&lt;/code&gt;) and that&apos;s how the name attribute of the control must be. In order to do that you must use either a &lt;code&gt;for&lt;/code&gt; loop (the collection must implement &lt;code&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt;)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; Model.LeaveDetailsList.Count; i++)\n{\n    @Html.TextBoxFor(m =&amp;gt; m.LeaveDetailsList[i].LeaveType)\n    ....\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or use a custom &lt;code&gt;EditorTemplate&lt;/code&gt; (the collection need only implement &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;In &lt;code&gt;/Views/Shared/EditorTemplates/LeaveBalanceDetails.cshtml&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;@model yourAssembly.LeaveBalanceDetails\n&amp;lt;tr&amp;gt;\n    &amp;lt;td&amp;gt;@Html.TextBoxFor(m =&amp;gt; m.LeaveType)&amp;lt;/td&amp;gt;\n    ....\n&amp;lt;/tr&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then in the main view (not in a loop)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&amp;lt;table&amp;gt;\n    .... &lt;span class=&quot;hljs-comment&quot;&gt;// add headings (preferably in a thead element&lt;/span&gt;\n    &amp;lt;tbody&amp;gt;\n        @Html.EditorFor(m =&amp;gt; m.LeaveDetailsList)\n    &amp;lt;/tbody&amp;gt;\n&amp;lt;/table&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and finally, in the controller&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; ActionResult &lt;span class=&quot;hljs-title&quot;&gt;Edit&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;LeaveBalanceViewModel model&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// iterate over model.LeaveDetailsList and save the items&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;With respect to your requirement, try this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;change&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;.DDLChoices&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; comma_ChoiceIds = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; comma_ChoicesText = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;;\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;input[class=&quot;DDLChoices&quot;]&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;e&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;checked&lt;/span&gt;) {\n            comma_ChoiceIds = comma_ChoiceIds + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;;\n            comma_ChoicesText = comma_ChoicesText + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;parent&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;label&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;parent&lt;/span&gt;() + &lt;span class=&quot;hljs-string&quot;&gt;&apos;,&apos;&lt;/span&gt;;\n        }\n    });\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ChoiceIds&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(comma_ChoiceIds);\n    $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ChoiceText&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;(comma_ChoicesText);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;@using (Html.BeginForm(&quot;Actionname&quot;, &quot;Controllername&quot;, FormMethod.Post, new { id = &quot;frmChoices&quot; }))\n{\n\n    @Html.HiddenFor(m =&amp;gt; m.ChoiceText, new { @id = &quot;ChoiceText&quot; })\n    @Html.HiddenFor(m =&amp;gt; m.ChoiceIds, new { @id = &quot;ChoiceIds&quot; })\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;Selected&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                @foreach (var item in @Model.Choices)\n                {\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;@item.ChoicesText&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;DDLChoices&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;@item.ChoiceIds&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;\n                }\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Submit&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;return ChoicesPoster.passChoices()&quot;&lt;/span&gt;\n    &amp;lt;/&lt;span class=&quot;hljs-attr&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"268":["\n&lt;p&gt;Which characters you must and which you mustn&apos;t escape indeed depends on the regex flavor you&apos;re working with.&lt;/p&gt;\n\n&lt;p&gt;For PCRE, and most other so-called Perl-compatible flavors, escape these outside character classes:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;.^&lt;span class=&quot;hljs-variable&quot;&gt;$*&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;?(&lt;/span&gt;)[{\\|&lt;span class=&quot;hljs-params&quot;&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and these inside character classes:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-undefined&quot;&gt;^-]\\\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For POSIX extended regexes (ERE), escape these outside character classes (same as PCRE):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-ruby&quot;&gt;.^&lt;span class=&quot;hljs-variable&quot;&gt;$*&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;?(&lt;/span&gt;)[{\\|&lt;span class=&quot;hljs-params&quot;&gt;\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Escaping any other characters is an error with POSIX ERE.&lt;/p&gt;\n\n&lt;p&gt;Inside character classes, the backslash is a literal character in POSIX regular expressions.  You cannot use it to escape anything.  You have to use &quot;clever placement&quot; if you want to include character class metacharacters as literals.  Put the ^ anywhere except at the start, the ] at the start, and the - at the start or the end of the character class to match these literally, e.g.:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-attr&quot;&gt;[]&lt;/span&gt;^-]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In POSIX basic regular expressions (BRE), these are metacharacters that you need to escape to suppress their meaning:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt;.^&lt;span class=&quot;hljs-variable&quot;&gt;$*&lt;/span&gt;[\\\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Escaping parentheses and curly brackets in BREs gives them the special meaning their unescaped versions have in EREs.  Some implementations (e.g. GNU) also give special meaning to other characters when escaped, such as \\? and +.  Escaping a character other than .^$*(){} is normally an error with BREs.&lt;/p&gt;\n\n&lt;p&gt;Inside character classes, BREs follow the same rule as EREs.&lt;/p&gt;\n\n&lt;p&gt;If all this makes your head spin, grab a copy of &lt;a href=&quot;http://www.regexbuddy.com&quot; rel=&quot;noreferrer&quot;&gt;RegexBuddy&lt;/a&gt;.  On the Create tab, click Insert Token, and then Literal.  RegexBuddy will add escapes as needed.&lt;/p&gt;\n    ","\n&lt;h2&gt;Modern RegEx Flavors (PCRE)&lt;/h2&gt;\n&lt;p&gt;&lt;sup&gt;Includes C, C++, Delphi, EditPad, Java, JavaScript, Perl, PHP (preg), PostgreSQL, PowerGREP, PowerShell, Python, REALbasic, Real Studio, Ruby, TCL, VB.Net, VBScript, wxWidgets, XML Schema, Xojo, XRegExp.&lt;br&gt;PCRE compatibility may vary&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Anywhere: &lt;code&gt;. ^ $ * + - ? ( ) [ ] { } \\ |&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Legacy RegEx Flavors (BRE/ERE)&lt;/h2&gt;\n&lt;p&gt;&lt;sup&gt;Includes awk, ed, egrep, emacs, GNUlib, grep, PHP (ereg), MySQL, Oracle, R, sed.&lt;br&gt;PCRE support may be enabled in later versions or by using extensions&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ERE/awk/egrep/emacs&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Outside a character class: &lt;code&gt;. ^ $ * + ? ( ) [ { } \\ |&lt;/code&gt;&lt;br&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inside a character class: &lt;code&gt;^ - [ ]&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;BRE/ed/grep/sed&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;\n&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Outside a character class: &lt;code&gt;. ^ $ * [ \\&lt;/code&gt;&lt;br&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inside a character class: &lt;code&gt;^ - [ ]&lt;/code&gt;&lt;br&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For literals, don&apos;t escape: &lt;code&gt;+ ? ( ) { } |&lt;/code&gt;&lt;br&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;For standard regex behavior, escape: &lt;code&gt;\\+ \\? \\( \\) \\{ \\} \\|&lt;/code&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h2&gt;Notes&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;If unsure about a specific character, it can be escaped like &lt;code&gt;\\xFF&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Alphanumeric characters cannot be escaped with a backslash&lt;/li&gt;\n&lt;li&gt;Arbitrary symbols can be escaped with a backslash in PCRE, but not BRE/ERE (they must only be escaped when required). For PCRE &lt;code&gt;] -&lt;/code&gt; only need escaping within a character class, but I kept them in a single list for simplicity&lt;/li&gt;\n&lt;li&gt;Quoted expression strings must also have the surrounding quote characters escaped, and often with backslashes doubled-up (like &lt;code&gt;&quot;(\\&quot;)(/)(\\\\.)&quot;&lt;/code&gt; versus &lt;code&gt;/(&quot;)(\\/)(\\.)/&lt;/code&gt; in JavaScript)&lt;/li&gt;\n&lt;li&gt;Aside from escapes, different regex implementations may support different modifiers, character classes, anchors, quantifiers, and other features. For more details, check out &lt;a href=&quot;http://www.regular-expressions.info&quot; rel=&quot;noreferrer&quot;&gt;regular-expressions.info&lt;/a&gt;, or use &lt;a href=&quot;https://regex101.com/&quot; rel=&quot;noreferrer&quot;&gt;regex101.com&lt;/a&gt; to test your expressions live&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Unfortunately there really isn&apos;t a set set of escape codes since it varies based on the language you are using.&lt;/p&gt;\n\n&lt;p&gt;However, keeping a page like the &lt;a href=&quot;http://www.regular-expressions.info/tools.html&quot; rel=&quot;noreferrer&quot;&gt;Regular Expression Tools Page&lt;/a&gt; or this &lt;a href=&quot;http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/&quot; rel=&quot;noreferrer&quot;&gt;Regular Expression Cheatsheet&lt;/a&gt; can go a long way to help you quickly filter things out.&lt;/p&gt;\n    ","\n&lt;p&gt;POSIX recognizes multiple variations on regular expressions - basic regular expressions (BRE) and extended regular expressions (ERE).  And even then, there are quirks because of the historical implementations of the utilities standardized by POSIX.&lt;/p&gt;\n\n&lt;p&gt;There isn&apos;t a simple rule for when to use which notation, or even which notation a given command uses.&lt;/p&gt;\n\n&lt;p&gt;Check out Jeff Friedl&apos;s &lt;a href=&quot;http://regex.info/&quot; rel=&quot;noreferrer&quot;&gt;Mastering Regular Expressions&lt;/a&gt; book.&lt;/p&gt;\n    ","\n&lt;p&gt;Unfortunately, the meaning of things like ( and \\( are swapped between Emacs style regular expressions and most other styles.  So if you try to escape these you may be doing the opposite of what you want.&lt;/p&gt;\n\n&lt;p&gt;So you really have to know what style you are trying to quote.&lt;/p&gt;\n    ","\n&lt;p&gt;Really, there isn&apos;t.  there are about a half-zillion different regex syntaxes; they seem to come down to Perl, EMACS/GNU, and AT&amp;amp;T in general, but I&apos;m always getting surprised too.&lt;/p&gt;\n    ","\n&lt;p&gt;Sometimes simple escaping is not possible with the characters you&apos;ve listed. For example, using a backslash to escape a bracket isn&apos;t going to work in the left hand side of a substitution string in sed, namely&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;sed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/foo\\(bar/something_else/&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I tend to just use a simple character class definition instead, so the above expression becomes&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;sed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/foo[(]bar/something_else/&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which I find works for most regexp implementations.&lt;/p&gt;\n\n&lt;p&gt;BTW Character classes are pretty vanilla regexp components so they tend to work in most situations where you need escaped characters in regexps.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; After the comment below, just thought I&apos;d mention the fact that you also have to consider the difference between finite state automata and non-finite state automata when looking at the behaviour of regexp evaluation.&lt;/p&gt;\n\n&lt;p&gt;You might like to look at &quot;the shiny ball book&quot; aka Effective Perl (&lt;a href=&quot;https://rads.stackoverflow.com/amzn/click/com/0201419750&quot; rel=&quot;nofollow noreferrer&quot;&gt;sanitised Amazon link&lt;/a&gt;), specifically the chapter on regular expressions, to get a feel for then difference in regexp engine evaluation types.&lt;/p&gt;\n\n&lt;p&gt;Not all the world&apos;s a PCRE!&lt;/p&gt;\n\n&lt;p&gt;Anyway, regexp&apos;s are so clunky compared to &lt;a href=&quot;http://en.wikipedia.org/wiki/SNOBOL&quot; rel=&quot;nofollow noreferrer&quot;&gt;SNOBOL&lt;/a&gt;!  Now &lt;strong&gt;that&lt;/strong&gt; was an interesting programming course! Along with the one on &lt;a href=&quot;http://en.wikipedia.org/wiki/Simula_67&quot; rel=&quot;nofollow noreferrer&quot;&gt;Simula&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Ah the joys of studying at UNSW in the late &apos;70&apos;s! (-:&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://perldoc.perl.org/perlre.html#Quoting-metacharacters&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/functions/quotemeta.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://perldoc.perl.org/functions/quotemeta.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In the official documentation, such characters are called metacharacters. Example of quoting:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt; $regex = &lt;span class=&quot;hljs-keyword&quot;&gt;quotemeta&lt;/span&gt;($string)\ns/$regex/something/\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For PHP, &quot;it is always safe to precede a non-alphanumeric with &quot;\\&quot; to specify that it stands for itself.&quot; - &lt;a href=&quot;http://php.net/manual/en/regexp.reference.escape.php&quot; rel=&quot;nofollow&quot;&gt;http://php.net/manual/en/regexp.reference.escape.php&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Except if it&apos;s a &quot; or &apos;.  :/&lt;/p&gt;\n\n&lt;p&gt;To escape regex pattern variables (or partial variables) in PHP use preg_quote()&lt;/p&gt;\n    ","\n&lt;p&gt;To know when and what to escape without attempts is necessary to understand precisely the chain of contexts the string pass through. You will specify the string from the farthest side to its final destination which is the memory handled by the regexp parsing code.&lt;/p&gt;\n\n&lt;p&gt;Be aware how the string in memory is processed: if can be a plain string inside the code, or a string entered to the command line, but a could be either an interactive command line or a command line stated inside a shell script file, or inside a variable in memory mentioned by the code, or an (string)argument through further evaluation, or a string containing code generated dynamically with any sort of encapsulation...&lt;/p&gt;\n\n&lt;p&gt;Each of this context assigned some characters with special functionality.&lt;/p&gt;\n\n&lt;p&gt;When you want to pass the character literally without using its special function (local to the context), than that&apos;s the case you have to escape it, for the next context... which might need some other escape characters which might additionally need to be escaped in the preceding context(s).\nFurthermore there can be things like character encoding (the most insidious is utf-8 because it look like ASCII for common characters, but might be optionally interpreted even by the terminal depending on its settings so it might behave differently, then the encoding attribute of HTML/XML, it&apos;s necessary to understand the process precisely right.&lt;/p&gt;\n\n&lt;p&gt;E.g. A regexp in the command line starting with &lt;code&gt;perl -npe&lt;/code&gt;, needs to be transferred to a set of &lt;em&gt;exec&lt;/em&gt; system calls connecting as pipe the file handles, each of this exec system calls just has a list of arguments that were separated by (non escaped)spaces, and possibly pipes(|) and redirection (&amp;gt; N&amp;gt; N&amp;gt;&amp;amp;M), parenthesis, interactive expansion of &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;$(())&lt;/code&gt; ... (all this are special characters used by the *sh which might appear to interfere with the character of the regular expression in the next context, but they are evaluated in order: before the command line. The command line is read by a program as bash/sh/csh/tcsh/zsh, essentially inside double quote or single quote the escape is simpler but it is not necessary to quote a string in the command line because mostly the space has to be prefixed with backslash and the quote are not necessary leaving available the expand functionality for characters * and ?, but this parse as different context as within quote. Then when the command line is evaluated the regexp obtained in memory (not as written in the command line) receives the same treatment as it would be in a source file.\nFor regexp there is character-set context within square brackets [ ], perl regular expression can be quoted by a large set of non alfa-numeric characters (E.g. m// or m:/better/for/path: ...).&lt;/p&gt;\n\n&lt;p&gt;You have more details about characters in other answer, which are very specific to the final regexp context. As I noted you mention that you find the regexp escape with attempts, that&apos;s probably because different context has different set of character that confused your memory of attempts (often backslash is the character used in those different context to escape a literal character instead of its function).&lt;/p&gt;\n    ","\n&lt;p&gt;For Ionic (Typescript) you have to double slash in order to scape the characters.\nFor example (this is to match some special characters):&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;^(?=.*[&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;]&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;[!¡&lt;span class=&quot;hljs-subst&quot;&gt;\\&apos;&lt;/span&gt;=ªº&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;-&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;_ç@#$%^&amp;amp;*(),;&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;.?&lt;span class=&quot;hljs-subst&quot;&gt;\\&quot;&lt;/span&gt;:{}|&amp;lt;&amp;gt;\\+&lt;span class=&quot;hljs-subst&quot;&gt;\\\\&lt;/span&gt;/])&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pay attention to this &lt;code&gt;] [ - _ . /&lt;/code&gt; characters. They have to be double slashed. If you don&apos;t do that, you are going to have a type error in your code.&lt;/p&gt;\n    ","\n&lt;p&gt;for &lt;code&gt;awk&lt;/code&gt;, if you&apos;re paranoid and wanna escape everything just in case, then this should do the trick :&lt;/p&gt;\n&lt;p&gt;from the &lt;code&gt;ASCII&lt;/code&gt; terminal safe list :&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-makefile&quot;&gt; !&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&lt;span class=&quot;hljs-variable&quot;&gt;$%&lt;/span&gt;&amp;amp;&apos;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\n                           [\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;apply this :&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;gsub&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/[!-/{-~:-@[-\\140]/&lt;/span&gt;,   &lt;span class=&quot;hljs-string&quot;&gt;&quot;[&amp;amp;]&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-title function_&quot;&gt;gsub&lt;/span&gt;(&lt;span class=&quot;hljs-regexp&quot;&gt;/\\^|\\\\/&lt;/span&gt;,            &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\\\\\\\&amp;amp;&quot;&lt;/span&gt; ) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;to make :&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-markdown&quot;&gt; [&lt;span class=&quot;hljs-string&quot;&gt;!&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;&quot;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;#&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;$&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;%&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&apos;&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;(&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;)&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;*&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;+&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;,&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;-&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;.&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;/&lt;/span&gt;]\n0123456789[&lt;span class=&quot;hljs-string&quot;&gt;:&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;;&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;=&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;&amp;gt;&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;?&lt;/span&gt;]\n\n[&lt;span class=&quot;hljs-string&quot;&gt;@&lt;/span&gt;]ABCDEFGHIJKLMNOPQRSTUVWXYZ[&lt;span class=&quot;hljs-string&quot;&gt;[&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;\\\\&lt;/span&gt;][]][&lt;span class=&quot;hljs-string&quot;&gt;\\^&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;_&lt;/span&gt;]\n[&lt;span class=&quot;hljs-string&quot;&gt;`&lt;/span&gt;]abcdefghijklmnopqrstuvwxyz[&lt;span class=&quot;hljs-string&quot;&gt;{&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;|&lt;/span&gt;][&lt;span class=&quot;hljs-string&quot;&gt;}&lt;/span&gt;][&lt;span class=&quot;hljs-symbol&quot;&gt;~&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"269":["\n&lt;p&gt;You can&apos;t (usefully) compare strings using &lt;code&gt;!=&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt;, you need to use &lt;code&gt;strcmp&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason for this is because &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; will only compare the base addresses of those strings. Not the contents of the strings themselves.&lt;/p&gt;\n    ","\n&lt;p&gt;Ok a few things: &lt;a href=&quot;https://stackoverflow.com/q/1694036/15168&quot;&gt;&lt;code&gt;gets&lt;/code&gt; is unsafe&lt;/a&gt; and should be replaced with &lt;code&gt;fgets(input, sizeof(input), stdin)&lt;/code&gt; so that you don&apos;t get a buffer overflow.&lt;/p&gt;\n\n&lt;p&gt;Next, to compare strings, you must use &lt;code&gt;strcmp&lt;/code&gt;, where a return value of 0 indicates that the two strings match. Using the equality operators (ie. &lt;code&gt;!=&lt;/code&gt;) compares the address of the two strings, as opposed to the individual &lt;code&gt;char&lt;/code&gt;s inside them.&lt;/p&gt;\n\n&lt;p&gt;And also note that, while in this example it won&apos;t cause a problem, &lt;code&gt;fgets&lt;/code&gt; stores the newline character, &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; in the buffers also; &lt;code&gt;gets()&lt;/code&gt; does not. If you compared the user input from &lt;code&gt;fgets()&lt;/code&gt; to a string literal such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt; it would never match (unless the buffer was too small so that the &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; wouldn&apos;t fit in it).&lt;/p&gt;\n    ","\n&lt;p&gt;Use &lt;a href=&quot;http://www.tutorialspoint.com/c_standard_library/c_function_strcmp.htm&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;strcmp&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is in &lt;code&gt;string.h&lt;/code&gt; library, and is very popular. &lt;code&gt;strcmp&lt;/code&gt; return 0 if the strings are equal. See &lt;a href=&quot;https://stackoverflow.com/questions/34824838/what-does-strcmp-exactly-returns-in-c/34825545#34825545&quot;&gt;this&lt;/a&gt; for an better explanation of what &lt;code&gt;strcmp&lt;/code&gt; returns.&lt;/p&gt;\n\n&lt;p&gt;Basically, you have to do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check,input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can check &lt;a href=&quot;http://www.programiz.com/c-programming/library-function/string.h/strcmp&quot; rel=&quot;noreferrer&quot;&gt;this&lt;/a&gt;, a tutorial on &lt;code&gt;strcmp&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You can&apos;t compare arrays directly like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;array1==array2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should compare them char-by-char; for this you can use a function and return a boolean (True:1, False:0) value. Then you can use it in the test condition of the while loop.&lt;/p&gt;\n\n&lt;p&gt;Try this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[],&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[])&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello!\\nPlease enter a word or character:\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,input);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;I will now repeat this until you type it back to me.\\n&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,check);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!checker(input,check))\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;, input);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,check);\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[],&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[])&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i,result=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; input[i]!=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt; || check[i]!=&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;; i++) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(input[i] != check[i]) {\n            result=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Whenever you are trying to compare the strings, compare them with respect to each character. For this you can use built in string function called strcmp(input1,input2); and you should use the header file called &lt;code&gt;#include&amp;lt;string.h&amp;gt;&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;Try this code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt; &lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;  &lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; \n{ \n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s[]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;STACKOVERFLOW&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the string to be checked\\n&quot;&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//enter the input string&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,s1);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(s,s1)==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;//compare both the strings  &lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Both the Strings match\\n&quot;&lt;/span&gt;); \n    } \n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Entered String does not match\\n&quot;&lt;/span&gt;);  \n    } \n    system(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pause&quot;&lt;/span&gt;);  \n} \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Welcome to the concept of the &lt;em&gt;pointer.&lt;/em&gt; Generations of beginning programmers have found the concept elusive, but if you wish to grow into a competent programmer, you must eventually master this concept  and moreover, you are already asking the right question. That&apos;s good.&lt;/p&gt;\n\n&lt;p&gt;Is it clear to you what an address is? See this diagram:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;----------     ----------\n| &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; |     | &lt;span class=&quot;hljs-number&quot;&gt;0x4004&lt;/span&gt; |\n|    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |     |    &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;   |\n----------     ----------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the diagram, the integer 1 is stored in memory at &lt;em&gt;address&lt;/em&gt; 0x4000. Why at an address? Because memory is large and can store many integers, just as a city is large and can house many families. Each integer is stored at a memory location, as each family resides in a house. Each memory location is identified by an &lt;em&gt;address&lt;/em&gt;, as each house is identified by an address.&lt;/p&gt;\n\n&lt;p&gt;The two boxes in the diagram represent two distinct memory locations. You can think of them as if they were houses. The integer 1 resides in the memory location at address 0x4000 (think, &quot;4000 Elm St.&quot;). The integer 7 resides in the memory location at address 0x4004 (think, &quot;4004 Elm St.&quot;).&lt;/p&gt;\n\n&lt;p&gt;You thought that your program was comparing the 1 to the 7, but it wasn&apos;t. It was comparing the 0x4000 to the 0x4004. So what happens when you have this situation?&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;----------     ----------\n| &lt;span class=&quot;hljs-number&quot;&gt;0x4000&lt;/span&gt; |     | &lt;span class=&quot;hljs-number&quot;&gt;0x4004&lt;/span&gt; |\n|    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |     |    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   |\n----------     ----------\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The two integers are the same but the addresses differ. Your program compares the addresses.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;p&gt;How do I properly compare strings?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(input, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// input assigned somehow&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;strcpy&lt;/span&gt;(check, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// check assigned somehow&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// insufficient&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (check != input)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// good&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;// or &lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Let us dig deeper to see &lt;strong&gt;why &lt;code&gt;check != input&lt;/code&gt; is not sufficient&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;In C, &lt;em&gt;string&lt;/em&gt; is a standard library specification.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A &lt;em&gt;string&lt;/em&gt; is a contiguous sequence of characters terminated by and including the first null character.&lt;br&gt;\n  C11 §7.1.1 1&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;input&lt;/code&gt; above is not a &lt;em&gt;string&lt;/em&gt;.  &lt;code&gt;input&lt;/code&gt; is &lt;a href=&quot;https://cdecl.org/?q=char+input%5B40%5D&quot; rel=&quot;nofollow noreferrer&quot;&gt;array 40 of char&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The contents of &lt;code&gt;input&lt;/code&gt; can become a &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;In most cases, when an array is used in an expression, it is converted to the address of its 1st element.  &lt;/p&gt;\n\n&lt;p&gt;The below converts &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;input&lt;/code&gt; to their respective addresses of the first element, then those addresses are compared.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;check != input   &lt;span class=&quot;hljs-comment&quot;&gt;// Compare addresses, not the contents of what addresses reference&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To compare &lt;em&gt;strings&lt;/em&gt;, we need to use those addresses and then look at the data they point to.&lt;br&gt;\n&lt;strong&gt;&lt;code&gt;strcmp()&lt;/code&gt; does the job&lt;/strong&gt;.  §7.23.4.2&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;code&gt;int strcmp(const char *s1, const char *s2);&lt;/code&gt;&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;strcmp&lt;/code&gt; function compares the string pointed to by &lt;code&gt;s1&lt;/code&gt; to the string pointed to by &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;\n  \n  &lt;p&gt;The &lt;code&gt;strcmp&lt;/code&gt; function returns an integer greater than, equal to, or less than zero,\n  accordingly as the string pointed to by &lt;code&gt;s1&lt;/code&gt; is greater than, equal to, or less than the string pointed to by &lt;code&gt;s2&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not only can code find if the strings are of the same data, but which one is greater/less when they differ.  &lt;/p&gt;\n\n&lt;p&gt;The below is true when the string differ.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;For insight, see &lt;a href=&quot;https://stackoverflow.com/a/54136499/2410359&quot;&gt;Creating my own &lt;code&gt;strcmp()&lt;/code&gt; function&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You need to use &lt;code&gt;strcmp()&lt;/code&gt; and you need to &lt;code&gt;#include &amp;lt;string.h&amp;gt;&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; operators only compare the base addresses of those strings. Not the contents of the strings&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example code:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; input[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;];\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; check[&lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;end\\n&quot;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//dont forget to check for \\n&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( &lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input) ) &lt;span class=&quot;hljs-comment&quot;&gt;//strcmp returns 0 if equal&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Please enter a name: \\n&quot;&lt;/span&gt;);\n        fgets(input, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(input), &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;My name is: %s\\n&quot;&lt;/span&gt;, input);\n    }\n\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note1: &lt;code&gt;gets()&lt;/code&gt; is unsafe. Use &lt;code&gt;fgets()&lt;/code&gt; instead&lt;/p&gt;\n&lt;p&gt;Note2: When using &lt;code&gt;fgets()&lt;/code&gt; you need to check for &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; new line charecter too&lt;/p&gt;\n    ","\n&lt;p&gt;You can:&lt;/p&gt;\n&lt;p&gt;Use &lt;code&gt;strcmp()&lt;/code&gt; from &lt;code&gt;string.h&lt;/code&gt;, which is the easier version&lt;/p&gt;\n&lt;p&gt;Or if you want to roll your own, you can use something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s1, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *s2)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(s1[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt; &amp;amp;&amp;amp; s2[i] != &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\0&apos;&lt;/span&gt;)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(s1[i] != s2[i])\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        }\n        i++;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;d use &lt;code&gt;strcmp()&lt;/code&gt; in a way like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(check, input))\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// code here&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; s1[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;],s2[&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;];\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter the character of strings: &quot;&lt;/span&gt;);\n        gets(s1);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nEnter different character of string to repeat: \\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;strcmp&lt;/span&gt;(s1,s2))\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s\\n&quot;&lt;/span&gt;,s1);\n            gets(s2);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is very simple solution in which you will get your output as you want.&lt;/p&gt;\n    "],"270":["\n&lt;p&gt;You can pass callback, and call callback inside async call&lt;/p&gt;\n\n&lt;p&gt;something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;completionHandler&lt;/span&gt;: (&lt;span class=&quot;hljs-title class_&quot;&gt;genres&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt;) -&amp;gt; ()) {\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTaskWithURL(url) {\n        data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n        &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n        resultsArray &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; results\n        completionHandler(genres: resultsArray)\n    }\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    task.resume()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then call this method:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-type&quot;&gt;Bookshop&lt;/span&gt;.getGenres {\n        genres &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n        println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;View Controller: &lt;span class=&quot;hljs-subst&quot;&gt;\\(genres)&lt;/span&gt;&quot;&lt;/span&gt;)     \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Introduced in Swift 5.5 (iOS 15, macOS 12), we would now use the &lt;code&gt;async&lt;/code&gt;-&lt;code&gt;await&lt;/code&gt; pattern:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchGenres&lt;/span&gt;() &lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;hljs-type&quot;&gt;Genre&lt;/span&gt;] {\n    &lt;span class=&quot;hljs-operator&quot;&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; (data, &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt;) &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(for: request)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONDecoder&lt;/span&gt;().decode([&lt;span class=&quot;hljs-type&quot;&gt;Genre&lt;/span&gt;].&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, from: data)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And we would call it like:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; fetchGenres()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;async&lt;/code&gt;-&lt;code&gt;await&lt;/code&gt; syntax is far more concise and natural than the traditional completion handler pattern outlined in my original answer, below.&lt;/p&gt;\n&lt;p&gt;For more information, see &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2021/10132/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Meet async/await in Swift&lt;/a&gt;.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;The historic pattern is to use completion handlers closure.&lt;/p&gt;\n&lt;p&gt;For example, we would often use &lt;code&gt;Result&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;fetchGenres&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-type&quot;&gt;Genre&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: request) { data, &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt;, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; \n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {\n            &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n                completion(.failure(error))\n            }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// parse response here&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n            completion(.success(results))\n        }\n    }.resume()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And youd call it like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;fetchGenres { results &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; results {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .failure(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error.localizedDescription)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .success(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres):\n        &lt;span class=&quot;hljs-comment&quot;&gt;// use `genres` here, e.g. update model and UI            &lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// but dont try to use `genres` here, as the above runs asynchronously&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note, above Im dispatching the completion handler back to the main queue to simplify model and UI updates. Some developers take exception to this practice and either use whatever queue &lt;code&gt;URLSession&lt;/code&gt; used or use their own queue (requiring the caller to manually synchronize the results themselves).&lt;/p&gt;\n&lt;p&gt;But thats not material here. The key issue is the use of completion handler to specify the block of code to be run when the asynchronous request is done.&lt;/p&gt;\n&lt;hr&gt;\n&lt;p&gt;Note, above I retired the use of &lt;code&gt;NSArray&lt;/code&gt; (we dont use &lt;a href=&quot;https://developer.apple.com/documentation/foundation/object_runtime/classes_bridged_to_swift_standard_library_value_types&quot; rel=&quot;nofollow noreferrer&quot;&gt;those bridged Objective-C types&lt;/a&gt; any more). I assume that we had a &lt;code&gt;Genre&lt;/code&gt; type and we presumably used &lt;code&gt;JSONDecoder&lt;/code&gt;, rather than &lt;code&gt;JSONSerialization&lt;/code&gt;, to decode it. But this question didnt have enough information about the underlying JSON to get into the details here, so I omitted that to avoid clouding the core issue, the use of closures as completion handlers.&lt;/p&gt;\n    ","\n&lt;p&gt;Swiftz already offers Future, which is the basic building block of a Promise. A Future is a Promise that cannot fail (all terms here are based on the Scala interpretation, &lt;a href=&quot;https://stackoverflow.com/questions/22724883/js-deferred-promise-future-compared-to-functional-languages-like-scala?rq=1&quot;&gt;where a Promise is a Monad&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/maxpow4h/swiftz/blob/master/swiftz/Future.swift&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/maxpow4h/swiftz/blob/master/swiftz/Future.swift&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hopefully will expand to a full Scala-style Promise eventually (I may write it myself at some point; I&apos;m sure other PRs would be welcome; it&apos;s not that difficult with Future already in place).&lt;/p&gt;\n\n&lt;p&gt;In your particular case, I would probably create a &lt;code&gt;Result&amp;lt;[Book]&amp;gt;&lt;/code&gt; (based on &lt;a href=&quot;http://nomothetis.svbtle.com/error-handling-in-swift-part-ii&quot; rel=&quot;noreferrer&quot;&gt;Alexandros Salazar&apos;s version of &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;). Then your method signature would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;fetchGenres&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Future&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Result&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-title class_&quot;&gt;Book&lt;/span&gt;]&amp;gt;&amp;gt; {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notes&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I do not recommend prefixing functions with &lt;code&gt;get&lt;/code&gt; in Swift. It will break certain kinds of interoperability with ObjC.&lt;/li&gt;\n&lt;li&gt;I recommend parsing all the way down to a &lt;code&gt;Book&lt;/code&gt; object before returning your results as a &lt;code&gt;Future&lt;/code&gt;. There are several ways this system can fail, and it&apos;s much more convenient if you check for all of those things before wrapping them up into a &lt;code&gt;Future&lt;/code&gt;. Getting to &lt;code&gt;[Book]&lt;/code&gt; is much better for the rest of your Swift code than handing around an &lt;code&gt;NSArray&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Swift 4.0&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For async Request-Response you can use completion handler. See below I have modified the solution with completion handle paradigm. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getGenres&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;) -&amp;gt; ()) {\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://creative.coventry.ac.uk/~bookshop/v1.1/index.php/genre/list&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(urlPath)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlPath) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: url) { (data, response, error) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data, options: &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;ReadingOptions&lt;/span&gt;.mutableContainers) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSDictionary&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsonResult[&lt;span class=&quot;hljs-string&quot;&gt;&quot;genres&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(results)\n                    completion(results)\n                }\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n                &lt;span class=&quot;hljs-comment&quot;&gt;//Catch Error here...&lt;/span&gt;\n            }\n        }\n        task.resume()\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can call this function as below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;getGenres { (array) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Do operation with array&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Swift 3 version of @Alexey Globchastyy&apos;s answer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;completionHandler&lt;/span&gt;: @&lt;span class=&quot;hljs-title class_&quot;&gt;escaping&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;genres&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt;) -&amp;gt; ()) {\n&lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with:url) {\n    data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n    &lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\n    resultsArray &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; results\n    completionHandler(genres: resultsArray)\n}\n&lt;span class=&quot;hljs-operator&quot;&gt;...&lt;/span&gt;\ntask.resume()\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Swift 5.5, async/wait-based solution&lt;/p&gt;\n&lt;p&gt;The original test URL provided by the original poster is no longer functional, so I had to change things a bit.  This solution is based on a jokes API I found.  That API returns a single joke, but I return it as an array of String (&lt;code&gt;[String]&lt;/code&gt;), to keep it as consistent as possible with the original post.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bookshop&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;() &lt;span class=&quot;hljs-title class_&quot;&gt;async&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;] {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello inside getGenres&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;https://geek-jokes.sameerkumar.website/api?format=json&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(urlPath)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlPath)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Continuation&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;CheckedContinuation&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;], &lt;span class=&quot;hljs-type&quot;&gt;Never&lt;/span&gt;&amp;gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; withCheckedContinuation { (continuation: &lt;span class=&quot;hljs-type&quot;&gt;Continuation&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with: url) { data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Task completed&quot;&lt;/span&gt;)\n                \n                &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; result: [&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; []\n                &lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; {\n                    continuation.resume(returning: result)\n                }\n                \n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error.localizedDescription)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { \n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                }\n                \n                &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data, options: [.mutableContainers])\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jsonResult is &lt;span class=&quot;hljs-subst&quot;&gt;\\(jsonResult)&lt;/span&gt;&quot;&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; joke &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (jsonResult &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; [String: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;])&lt;span class=&quot;hljs-operator&quot;&gt;?&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;joke&quot;&lt;/span&gt;] {\n                        result &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [joke]\n                    }\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;JSON Error &lt;span class=&quot;hljs-subst&quot;&gt;\\(error.localizedDescription)&lt;/span&gt;&quot;&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;data was &lt;span class=&quot;hljs-subst&quot;&gt;\\(String(describing: String(data: data, encoding: .utf8)))&lt;/span&gt;&quot;&lt;/span&gt;)\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                }\n            }\n            task.resume()\n        }\n        \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; genres\n    }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;async&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bookshop&lt;/span&gt;.getGenres()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Final is &lt;span class=&quot;hljs-subst&quot;&gt;\\(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt;)&lt;/span&gt;&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The &lt;code&gt;withCheckedContinuation&lt;/code&gt; is how you made the Swift &lt;code&gt;async&lt;/code&gt; function actually run in a separate task/thread.&lt;/p&gt;\n    ","\n&lt;p&gt;I hope you&apos;re not still stuck on this, but the short answer is that you can&apos;t do this in Swift.&lt;/p&gt;\n\n&lt;p&gt;An alternative approach would be to return a callback that will provide the data you need as soon as it is ready.&lt;/p&gt;\n    ","\n&lt;p&gt;There are 3 ways of creating call back functions namely:\n1. Completion handler\n2. Notification\n3. Delegates&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Completion Handler&lt;/strong&gt;\nInside set of block is executed and returned when source is available, Handler will wait until response comes so that UI can be updated after.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Notification&lt;/strong&gt;\nBunch of information is triggered over all the app, Listner can retrieve n make use of that info. Async way of getting info through out the project.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Delegates&lt;/strong&gt;\nSet of methods will get triggered when delegate is been called, Source must be provided via methods itself&lt;/p&gt;\n    ","\n&lt;p&gt;Swift 5.5:&lt;/p&gt;\n&lt;p&gt;TL;DR: Swift 5.5 is not yet released(at the time of writing). To use swift 5.5, download swift toolchain development snapshot from &lt;a href=&quot;https://swift.org/download/#snapshots&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt; and add compiler flag &lt;code&gt;-Xfrontend -enable-experimental-concurrency&lt;/code&gt;. Read more &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md&quot; rel=&quot;nofollow noreferrer&quot;&gt;here&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;This can be achieved easily with &lt;code&gt;async/await&lt;/code&gt; feature.&lt;/p&gt;\n&lt;p&gt;To do so, you should mark your function as &lt;code&gt;async&lt;/code&gt; then do the operation inside &lt;code&gt;withUnsafeThrowingContinuation&lt;/code&gt; block like following.&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Bookshop&lt;/span&gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;getGenres&lt;/span&gt;() &lt;span class=&quot;hljs-title class_&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NSArray&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello inside getGenres&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; urlPath &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://creative.coventry.ac.uk/~bookshop/v1.1/index.php/genre/list&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(urlPath)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlPath)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; withUnsafeThrowingContinuation { continuation &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with: url, completionHandler: {data, response, error -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Task completed&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(error &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n          &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(error&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;.localizedDescription)\n          continuation.resume(throwing: error&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n          &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n          &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; jsonResult &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONSerialization&lt;/span&gt;.jsonObject(with: data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, options: .mutableContainers) &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; [String: &lt;span class=&quot;hljs-keyword&quot;&gt;Any&lt;/span&gt;]\n          &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results: &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; jsonResult&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;genres&quot;&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSArray&lt;/span&gt;\n          continuation.resume(returning: results)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n          continuation.resume(throwing: error)\n        }\n      })\n      task.resume()\n    }\n  }\n}\n\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And you can call this function like&lt;/p&gt;\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@asyncHandler&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;check&lt;/span&gt;() {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; genres &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Bookshop&lt;/span&gt;.getGenres()\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Result: &lt;span class=&quot;hljs-subst&quot;&gt;\\(genres)&lt;/span&gt;&quot;&lt;/span&gt;)\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Error: &lt;span class=&quot;hljs-subst&quot;&gt;\\(error)&lt;/span&gt;&quot;&lt;/span&gt;)\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Keep in mind that, when calling &lt;code&gt;Bookshop.getGenres&lt;/code&gt; method, the caller method should be either &lt;code&gt;async&lt;/code&gt; or marked as &lt;code&gt;@asyncHandler&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.urlSession.dataTask(with: request, completionHandler: { (data, response, error) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.endNetworkActivity()\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; responseError: &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error\n            &lt;span class=&quot;hljs-comment&quot;&gt;// handle http response status&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; httpResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt; {\n\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; httpResponse.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;299&lt;/span&gt; , httpResponse.statusCode &lt;span class=&quot;hljs-operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;422&lt;/span&gt;  {\n                    responseError &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;.errorForHTTPStatus(httpResponse.statusCode)\n                }\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; apiResponse: &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; responseError {\n                apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, responseError&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.logError(apiResponse.error&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, request: request)\n\n                &lt;span class=&quot;hljs-comment&quot;&gt;// Handle if access token is invalid&lt;/span&gt;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nsError: &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; responseError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;? , nsError.code &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;401&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n                        apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.message()\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Unautorized access&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// User logout&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                    }\n                }\n                &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nsError: &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; responseError &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NSError&lt;/span&gt;? , nsError.code &lt;span class=&quot;hljs-operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;503&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async {\n                        apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.message()\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Down time&lt;/span&gt;\n                        &lt;span class=&quot;hljs-comment&quot;&gt;// Server is currently down due to some maintenance&lt;/span&gt;\n                        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;\n                    }\n                }\n\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;(request, response &lt;span class=&quot;hljs-keyword&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;HTTPURLResponse&lt;/span&gt;, data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.logResponse(data&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;, forRequest: request)\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.removeRequestedURL(request.url&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;)\n\n            &lt;span class=&quot;hljs-type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async(execute: { () -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n                completionHandler(apiResponse)\n            })\n        }).resume()\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h2&gt;There are mainly 3 ways of achieving callback in swift&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Closures/Completion handler&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Delegates&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Notifications&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Observers can also be used to get notified once the async task has been completed.&lt;/p&gt;\n    ","\n&lt;p&gt;There are some very generic requirements that would like every good API Manager to satisfy:\nwill implement a &lt;strong&gt;protocol-oriented API Client.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;APIClient Initial Interface&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIClient&lt;/span&gt; {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIRequest&lt;/span&gt;,\n              &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;APIResponse&lt;/span&gt;?, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;?) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;) \n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIRequest&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Encodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resourceName: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; }\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIResponse&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now Please check complete api structure &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// ******* This is API Call Class  *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ResultCallback&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Value&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;Result&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Value&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;Error&lt;/span&gt;&amp;gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// Implementation of a generic-based  API client&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIClient&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; baseEndpointUrl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: &lt;span class=&quot;hljs-string&quot;&gt;&quot;irl&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; session &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;(configuration: .default)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;() {\n\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Sends a request to servers, calling the completion method when finished&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;send&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIRequest&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;completion&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;ResultCallback&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;DataContainer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;&amp;gt;&amp;gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; endpoint &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.endpoint(for: request)\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; session.dataTask(with: &lt;span class=&quot;hljs-type&quot;&gt;URLRequest&lt;/span&gt;(url: endpoint)) { data, response, error &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// Decode the top level response, and look up the decoded response to see&lt;/span&gt;\n                    &lt;span class=&quot;hljs-comment&quot;&gt;// if it&apos;s a success or a failure&lt;/span&gt;\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiResponse &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONDecoder&lt;/span&gt;().decode(&lt;span class=&quot;hljs-type&quot;&gt;APIResponse&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;.&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;&amp;gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, from: data)\n\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; dataContainer &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.data {\n                        completion(.success(dataContainer))\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; apiResponse.message {\n                        completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;APIError&lt;/span&gt;.server(message: message)))\n                    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n                        completion(.failure(&lt;span class=&quot;hljs-type&quot;&gt;APIError&lt;/span&gt;.decoding))\n                    }\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n                    completion(.failure(error))\n                }\n            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; error {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Encodes a URL based on the given request&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Everything needed for a public request to api servers is encoded directly in this URL&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;endpoint&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;APIRequest&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-params&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;request&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; baseUrl &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: request.resourceName, relativeTo: baseEndpointUrl) &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Bad resourceName: &lt;span class=&quot;hljs-subst&quot;&gt;\\(request.resourceName)&lt;/span&gt;&quot;&lt;/span&gt;)\n        }\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; components &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLComponents&lt;/span&gt;(url: baseUrl, resolvingAgainstBaseURL: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Common query items needed for all api requests&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; timestamp &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;\\(Date().timeIntervalSince1970)&lt;/span&gt;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; hash &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;\\(timestamp)&lt;/span&gt;&quot;&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; commonQueryItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [\n            &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;ts&quot;&lt;/span&gt;, value: timestamp),\n            &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;hash&quot;&lt;/span&gt;, value: hash),\n            &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-string&quot;&gt;&quot;apikey&quot;&lt;/span&gt;, value: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)\n        ]\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Custom query items needed for this specific request&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; customQueryItems: [&lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;]\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n            customQueryItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItemEncoder&lt;/span&gt;.encode(request)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Wrong parameters: &lt;span class=&quot;hljs-subst&quot;&gt;\\(error)&lt;/span&gt;&quot;&lt;/span&gt;)\n        }\n\n        components.queryItems &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; commonQueryItems &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; customQueryItems\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Construct the final URL with all the previous data&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; components.url&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ******  API Request Encodable Protocol *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIRequest&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Encodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Response (will be wrapped with a DataContainer)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Decodable&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Endpoint for this request (the last part of the URL)&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resourceName: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt; }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ****** This Results type  Data Container Struct ******&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataContainer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Results&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt;&amp;gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; offset: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; limit: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; total: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; count: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; results: &lt;span class=&quot;hljs-type&quot;&gt;Results&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***** API Errro Enum ****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIError&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Error&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; encoding\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; decoding\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; server(message: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ****** API Response Struct ******&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;APIResponse&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Response&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt;&amp;gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Whether it was ok or not&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; status: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Message that usually gives more information about some error&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; message: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-comment&quot;&gt;/// Requested data&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data: &lt;span class=&quot;hljs-type&quot;&gt;DataContainer&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt;&amp;gt;?\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***** URL Query Encoder OR JSON Encoder *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;URLQueryItemEncoder&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;encode&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Encodable&lt;/span&gt;&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;encodable&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;] {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; parametersData &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONEncoder&lt;/span&gt;().encode(encodable)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; parameters &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;JSONDecoder&lt;/span&gt;().decode([String: &lt;span class=&quot;hljs-type&quot;&gt;HTTPParam&lt;/span&gt;].&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;, from: parametersData)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; parameters.map { &lt;span class=&quot;hljs-type&quot;&gt;URLQueryItem&lt;/span&gt;(name: &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt;, value: &lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;.description) }\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ****** HTTP Pamater Conversion Enum *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HTTPParam&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;CustomStringConvertible&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; string(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; bool(&lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; int(&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; double(&lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;)\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;decoder&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Decoder&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; container &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; decoder.singleValueContainer()\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .string(string)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bool &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;Bool&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .bool(bool)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; int &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .int(int)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; double &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;try?&lt;/span&gt; container.decode(&lt;span class=&quot;hljs-type&quot;&gt;Double&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; .double(double)\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;APIError&lt;/span&gt;.decoding\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; description: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .string(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; string):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; string\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .bool(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; bool):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(describing: bool)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .int(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; int):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(describing: int)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; .double(&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; double):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(describing: double)\n        }\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/// **** This is your API Request Endpoint  Method in Struct *****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GetCharacters&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;APIRequest&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;MyCharacter&lt;/span&gt;]\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; resourceName: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;characters&quot;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Parameters&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; nameStartsWith: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; limit: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; offset: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;?\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Note that nil parameters will not be used&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,\n                &lt;span class=&quot;hljs-params&quot;&gt;nameStartsWith&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,\n                &lt;span class=&quot;hljs-params&quot;&gt;limit&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;,\n                &lt;span class=&quot;hljs-params&quot;&gt;offset&lt;/span&gt;: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;? &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; name\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.nameStartsWith &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; nameStartsWith\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.limit &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; limit\n        &lt;span class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.offset &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; offset\n    }\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// *** This is Model for Above Api endpoint method ****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyCharacter&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Decodable&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; id: &lt;span class=&quot;hljs-type&quot;&gt;Int&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; name: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; description: &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;?\n}\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ***** These below line you used to call any api call in your controller or view model ****&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;viewDidLoad&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; apiClient &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;APIClient&lt;/span&gt;()\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// A simple request with no parameters&lt;/span&gt;\n    apiClient.send(&lt;span class=&quot;hljs-type&quot;&gt;GetCharacters&lt;/span&gt;()) { response &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n\n        response.map { dataContainer &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dataContainer.results)\n        }\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This is a small use case that might be helpful:- &lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testUrlSession&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;urlStr&lt;/span&gt;:&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;hljs-params&quot;&gt;completionHandler&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;@escaping&lt;/span&gt; ((&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URL&lt;/span&gt;(string: urlStr)&lt;span class=&quot;hljs-operator&quot;&gt;!&lt;/span&gt;\n\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; task &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;URLSession&lt;/span&gt;.shared.dataTask(with: url){(data, response, error) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; data &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; }\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; strContent &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;(data: data, encoding: .utf8) {\n            completionHandler(strContent)\n            }\n        }\n\n\n        task.resume()\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While calling the function:-&lt;/p&gt;\n\n&lt;pre class=&quot;lang-swift s-code-block&quot;&gt;&lt;code class=&quot;hljs language-swift&quot;&gt;testUrlSession(urlStr: &lt;span class=&quot;hljs-string&quot;&gt;&quot;YOUR-URL&quot;&lt;/span&gt;) { (value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Your string value ::- &lt;span class=&quot;hljs-subst&quot;&gt;\\(value)&lt;/span&gt;&quot;&lt;/span&gt;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"69","randomQuestions":[{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"Retrieve only the queried element in an object array in MongoDB collection","slug":"retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection-1657384890457"},{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"When to use virtual destructors?","slug":"when-to-use-virtual-destructors-1657388152135"},{"title":"Sorting object property by values","slug":"sorting-object-property-by-values-1657388367300"},{"title":"Make a div fill the height of the remaining screen space","slug":"make-a-div-fill-the-height-of-the-remaining-screen-space-1657387482387"},{"title":"Removing duplicates in lists","slug":"removing-duplicates-in-lists-1657388207448"},{"title":"What is the difference between #include <filename> and #include \"filename\"?","slug":"what-is-the-difference-between-include-lessfilenamegreater-and-include-\"filename\"-1657388489547"},{"title":"What do lambda function closures capture? [duplicate]","slug":"what-do-lambda-function-closures-capture-duplicate-1657388161827"},{"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710"},{"title":"Relative imports for the billionth time","slug":"relative-imports-for-the-billionth-time-1657387756383"},{"title":"Where should I put <script> tags in HTML markup?","slug":"where-should-i-put-lessscriptgreater-tags-in-html-markup-1657388350798"},{"title":"Sort array of objects by string property value","slug":"sort-array-of-objects-by-string-property-value-1657384860090"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"Dynamically select data frame columns using $ and a character value","slug":"dynamically-select-data-frame-columns-using-dollar-and-a-character-value-1657387836662"},{"title":"Are dictionaries ordered in Python 3.6+?","slug":"are-dictionaries-ordered-in-python-3.6+-1657387834234"},{"title":"How to print without a newline or space","slug":"how-to-print-without-a-newline-or-space-1657387814213"},{"title":"How do I match any character across multiple lines in a regular expression?","slug":"how-do-i-match-any-character-across-multiple-lines-in-a-regular-expression-1657387839720"},{"title":"How to read a file line-by-line into a list?","slug":"how-to-read-a-file-line-by-line-into-a-list-1657387865894"},{"title":"How to get the difference between two arrays in JavaScript?","slug":"how-to-get-the-difference-between-two-arrays-in-javascript-1657388463384"}]},"__N_SSG":true}