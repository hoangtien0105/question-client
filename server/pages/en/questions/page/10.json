{"pageProps":{"data":{"count":610,"rows":[{"id":565,"title":"getContactsFromFirebase() method return an empty list","slug":"getcontactsfromfirebase()-method-return-an-empty-list-1657388433928","postType":"QUESTION","createdAt":"2022-07-09T17:40:33.000Z","updatedAt":"2022-07-09T17:40:33.000Z","tags":[]},{"id":564,"title":"What are good ways to prevent SQL injection? [duplicate]","slug":"what-are-good-ways-to-prevent-sql-injection-duplicate-1657388431570","postType":"QUESTION","createdAt":"2022-07-09T17:40:31.000Z","updatedAt":"2022-07-09T17:40:31.000Z","tags":[]},{"id":563,"title":"Is it possible to escape regex metacharacters reliably with sed","slug":"is-it-possible-to-escape-regex-metacharacters-reliably-with-sed-1657388428795","postType":"QUESTION","createdAt":"2022-07-09T17:40:28.000Z","updatedAt":"2022-07-09T17:40:28.000Z","tags":[{"id":2721,"name":"sed","slug":"sed","createdAt":"2022-07-09T17:40:28.000Z","updatedAt":"2022-07-09T17:40:28.000Z","Questions_Tags":{"questionId":563,"tagId":2721}}]},{"id":562,"title":"Add a property to a JavaScript object using a variable as the name?","slug":"add-a-property-to-a-javascript-object-using-a-variable-as-the-name-1657388425650","postType":"QUESTION","createdAt":"2022-07-09T17:40:25.000Z","updatedAt":"2022-07-09T17:40:25.000Z","tags":[]},{"id":561,"title":"How does the Java 'for each' loop work?","slug":"how-does-the-java-'for-each'-loop-work-1657388423749","postType":"QUESTION","createdAt":"2022-07-09T17:40:23.000Z","updatedAt":"2022-07-09T17:40:23.000Z","tags":[{"id":2714,"name":"foreach","slug":"foreach","createdAt":"2022-07-09T17:40:23.000Z","updatedAt":"2022-07-09T17:40:23.000Z","Questions_Tags":{"questionId":561,"tagId":2714}},{"id":2715,"name":"syntactic-sugar","slug":"syntactic-sugar","createdAt":"2022-07-09T17:40:23.000Z","updatedAt":"2022-07-09T17:40:23.000Z","Questions_Tags":{"questionId":561,"tagId":2715}}]}]},"answers":{"561":["\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; i = someIterable.iterator(); i.hasNext();) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.next();\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that if you need to use &lt;code&gt;i.remove();&lt;/code&gt; in your loop, or access the actual iterator in some way, you cannot use the &lt;code&gt;for ( : )&lt;/code&gt; idiom, since the actual iterator is merely inferred.&lt;/p&gt;\n\n&lt;p&gt;As was noted by Denis Bueno, this code works for any object that implements the &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt; interface&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also, if the right-hand side of the &lt;code&gt;for (:)&lt;/code&gt; idiom is an &lt;code&gt;array&lt;/code&gt; rather than an &lt;code&gt;Iterable&lt;/code&gt; object, the internal code uses an int index counter and checks against &lt;code&gt;array.length&lt;/code&gt; instead. See the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2&quot; rel=&quot;noreferrer&quot;&gt;Java Language Specification&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The construct &lt;em&gt;for each&lt;/em&gt; is also valid for arrays. e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] fruits = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;Orange&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pear&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Strawberry&quot;&lt;/span&gt; };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String fruit : fruits) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// fruit is an element of the `fruits` array.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is essentially equivalent of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fruits.length; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; fruits[i];\n    &lt;span class=&quot;hljs-comment&quot;&gt;// fruit is an element of the `fruits` array.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, overall summary: &lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/85206#85206&quot;&gt;[nsayer]&lt;/a&gt; The following is the longer form of what is happening:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; i = someList.iterator(); i.hasNext(); ) {\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.next();\n  System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;Note that if you need to use\n  i.remove(); in your loop, or access\n  the actual iterator in some way, you\n  cannot use the for( : ) idiom, since\n  the actual Iterator is merely\n  inferred.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/85242#85242&quot;&gt;[Denis Bueno]&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;It&apos;s implied by nsayer&apos;s answer, but\n  it&apos;s worth noting that the OP&apos;s for(..)\n  syntax will work when &quot;someList&quot; is\n  anything that implements\n  java.lang.Iterable -- it doesn&apos;t have\n  to be a list, or some collection from\n  java.util. Even your own types,\n  therefore, can be used with this\n  syntax.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/language/foreach.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;for-each loop&lt;/a&gt;, added in &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/language/index.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java 5&lt;/a&gt; (also called the &quot;enhanced for loop&quot;), is equivalent to using a &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;code&gt;java.util.Iterator&lt;/code&gt;&lt;/a&gt;--it&apos;s syntactic sugar for the same thing. Therefore, when reading each element, one by one and in order, a for-each should always be chosen over an iterator, as it is more convenient and concise.&lt;/p&gt;\n&lt;h3&gt;For-each&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : intList) {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;An element in the list: &quot;&lt;/span&gt; + i);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Iterator&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;Integer&amp;gt; intItr = intList.iterator();\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (intItr.hasNext()) {\n   System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;An element in the list: &quot;&lt;/span&gt; + intItr.next());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;There are situations where you must use an &lt;code&gt;Iterator&lt;/code&gt; directly. For example, attempting to delete an element while using a for-each can (will?) result in a &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;\n&lt;h2&gt;For-each vs. for-loop: Basic differences&lt;/h2&gt;\n&lt;p&gt;The only practical difference between for-loop and for-each is that, in the case of indexable objects, you do not have access to the index. An example when the basic for-loop is required:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Do something special&lt;/span&gt;\n   }  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// Do other stuff&lt;/span&gt;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Although you could manually create a separate index int-variable with for-each,&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : intArray) {\n   idx++;\n   ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;...it is not recommended, since &lt;a href=&quot;http://www.java-made-easy.com/variable-scope.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;variable-scope&lt;/a&gt; is not ideal, and the basic &lt;code&gt;for&lt;/code&gt; loop is simply the standard and expected format for this use case.&lt;/p&gt;\n&lt;h2&gt;For-each vs. for-loop: Performance&lt;/h2&gt;\n&lt;p&gt;When accessing collections, a for-each is &lt;a href=&quot;https://stackoverflow.com/questions/1879255/traditional-for-loop-vs-iterator-in-java&quot;&gt;significantly faster&lt;/a&gt; than the basic &lt;code&gt;for&lt;/code&gt; loop&apos;s array access. When accessing arrays, however--at least with primitive and wrapper-arrays--access via indexes is dramatically faster.&lt;/p&gt;\n&lt;h3&gt;Timing the difference between iterator and index access for primitive int-arrays&lt;/h3&gt;\n&lt;p&gt;Indexes are 23-&lt;em&gt;40&lt;/em&gt; percent faster than iterators when accessing &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;Integer&lt;/code&gt; arrays. Here is the output from the testing class at the bottom of this post, which sums the numbers in a 100-element primitive-int array (A is iterator, B is index):&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 358,597,622 nanoseconds\nTest B: 269,167,681 nanoseconds\nB faster by 89,429,941 nanoseconds (24.438799231635727% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 377,461,823 nanoseconds\nTest B: 278,694,271 nanoseconds\nB faster by 98,767,552 nanoseconds (25.666236154695838% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 288,953,495 nanoseconds\nTest B: 207,050,523 nanoseconds\nB faster by 81,902,972 nanoseconds (27.844689860906513% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 375,373,765 nanoseconds\nTest B: 283,813,875 nanoseconds\nB faster by 91,559,890 nanoseconds (23.891659337194227% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 375,790,818 nanoseconds\nTest B: 220,770,915 nanoseconds\nB faster by 155,019,903 nanoseconds (40.75164734599769% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntArray 1000000\nTest A: 326,373,762 nanoseconds\nTest B: 202,555,566 nanoseconds\nB faster by 123,818,196 nanoseconds (37.437545972215744% faster)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I also ran this for an &lt;code&gt;Integer&lt;/code&gt; array, and indexes are still the clear winner, but only between 18 and 25 percent faster.&lt;/p&gt;\n&lt;h3&gt;For collections, iterators are faster than indexes&lt;/h3&gt;\n&lt;p&gt;For a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Integers&lt;/code&gt;, however, iterators are the clear winner. Just change the int-array in the test-class to:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;Integer&amp;gt; intList = Arrays.asList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;62&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;73&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;82&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;85&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And make the necessary changes to the test-function (&lt;code&gt;int[]&lt;/code&gt; to &lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt; to &lt;code&gt;size()&lt;/code&gt;, etc.):&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 3,429,929,976 nanoseconds\nTest B: 5,262,782,488 nanoseconds\nA faster by 1,832,852,512 nanoseconds (34.326681820485675% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 2,907,391,427 nanoseconds\nTest B: 3,957,718,459 nanoseconds\nA faster by 1,050,327,032 nanoseconds (26.038700083921256% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 2,566,004,688 nanoseconds\nTest B: 4,221,746,521 nanoseconds\nA faster by 1,655,741,833 nanoseconds (38.71935684115413% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 2,770,945,276 nanoseconds\nTest B: 3,829,077,158 nanoseconds\nA faster by 1,058,131,882 nanoseconds (27.134122749113843% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntegerList 1000000\nTest A: 3,467,474,055 nanoseconds\nTest B: 5,183,149,104 nanoseconds\nA faster by 1,715,675,049 nanoseconds (32.60101667104192% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntList 1000000\nTest A: 3,439,983,933 nanoseconds\nTest B: 3,509,530,312 nanoseconds\nA faster by 69,546,379 nanoseconds (1.4816434912159906% faster)\n\n[C:\\java_code\\]java TimeIteratorVsIndexIntList 1000000\nTest A: 3,451,101,466 nanoseconds\nTest B: 5,057,979,210 nanoseconds\nA faster by 1,606,877,744 nanoseconds (31.269164666060377% faster)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In one test they&apos;re almost equivalent, but with collections, iterator wins.&lt;/p&gt;\n&lt;p&gt;*This post is based on two answers I wrote on Stack Overflow:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22110482/uses-and-syntax-for-for-each-loop-in-java/22110517#22110517&quot;&gt;Uses and syntax for for-each loop in Java&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22540025/should-i-use-an-iterator-or-a-forloop-to-iterate/22540191#22540191&quot;&gt;Should I use an Iterator or a forloop to iterate?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Some more information: &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2113216/which-is-more-efficient-a-for-each-loop-or-an-iterator&quot;&gt;Which is more efficient, a for-each loop, or an iterator?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n&lt;h3&gt;The full testing class&lt;/h3&gt;\n&lt;p&gt;I created this compare-the-time-it-takes-to-do-any-two-things class after reading &lt;a href=&quot;https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&quot;&gt;this question&lt;/a&gt; on Stack Overflow:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt;  java.text.NumberFormat;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt;  java.util.Locale;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n   &amp;amp;lt;P&amp;amp;gt;{&lt;span class=&quot;hljs-doctag&quot;&gt;@code&lt;/span&gt; java TimeIteratorVsIndexIntArray 1000000}&amp;amp;lt;/P&amp;amp;gt;\n\n   &lt;span class=&quot;hljs-doctag&quot;&gt;@see&lt;/span&gt;  &amp;amp;lt;CODE&amp;amp;gt;&amp;amp;lt;A HREF=&amp;amp;quot;https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&amp;amp;quot;&amp;amp;gt;https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java&amp;amp;lt;/A&amp;amp;gt;&amp;amp;lt;/CODE&amp;amp;gt;\n **/&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;TimeIteratorVsIndexIntArray&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;NumberFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;nf&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; NumberFormat.getNumberInstance(Locale.US);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] tryCount_inParamIdx0)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; testCount;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Get try-count from a command-line parameter&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {\n           testCount = Integer.parseInt(tryCount_inParamIdx0[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;(ArrayIndexOutOfBoundsException | NumberFormatException x) {\n           &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Missing or invalid command line parameter: The number of testCount for each test. &quot;&lt;/span&gt; + x);\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Test proper...START&lt;/span&gt;\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[] {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;29&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;35&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;37&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;39&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;41&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;45&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;46&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;47&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;48&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;49&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;52&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;54&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;57&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;58&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;61&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;62&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;63&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;66&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;69&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;70&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;71&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;73&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;74&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;76&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;77&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;78&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;79&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;81&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;82&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;83&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;85&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;87&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;91&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;92&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;94&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;95&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;98&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;};\n\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lStart&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; System.nanoTime();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; testCount; i++) {\n           testIterator(intArray);\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lADuration&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; outputGetNanoDuration(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, lStart);\n\n        lStart = System.nanoTime();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; testCount; i++) {\n           testFor(intArray);\n        }\n\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lBDuration&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; outputGetNanoDuration(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;, lStart);\n\n        outputGetABTestNanoDifference(lADuration, lBDuration, &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testIterator&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] int_array)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; int_array.length; i++) {\n          total += int_array[i];\n       }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;testFor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] int_array)&lt;/span&gt; {\n       &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n       &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i : int_array) {\n          total += i;\n       }\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Test proper...END&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;//Timer testing utilities...START&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outputGetNanoDuration&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String s_testName, &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l_nanoStart)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lDuration&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; System.nanoTime() - l_nanoStart;\n        System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Test &quot;&lt;/span&gt; + s_testName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;: &quot;&lt;/span&gt; + nf.format(lDuration) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; nanoseconds&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  lDuration;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;outputGetABTestNanoDifference&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l_aDuration, &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; l_bDuration, String s_aTestName, String s_bTestName)&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;lDiff&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dPct&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;;\n        &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;sFaster&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(l_aDuration &amp;gt; l_bDuration) {\n            lDiff = l_aDuration - l_bDuration;\n            dPct = &lt;span class=&quot;hljs-number&quot;&gt;100.00&lt;/span&gt; - (l_bDuration * &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt; / l_aDuration + &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n            sFaster = &lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;;\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            lDiff = l_bDuration - l_aDuration;\n            dPct = &lt;span class=&quot;hljs-number&quot;&gt;100.00&lt;/span&gt; - (l_aDuration * &lt;span class=&quot;hljs-number&quot;&gt;100.0&lt;/span&gt; / l_bDuration + &lt;span class=&quot;hljs-number&quot;&gt;0.5&lt;/span&gt;);\n            sFaster = &lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;;\n        }\n        System.out.println(sFaster + &lt;span class=&quot;hljs-string&quot;&gt;&quot; faster by &quot;&lt;/span&gt; + nf.format(lDiff) + &lt;span class=&quot;hljs-string&quot;&gt;&quot; nanoseconds (&quot;&lt;/span&gt; + dPct + &lt;span class=&quot;hljs-string&quot;&gt;&quot;% faster)&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  lDiff;\n   }\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//Timer testing utilities...END&lt;/span&gt;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is an answer which does not assume knowledge of Java Iterators. It is less precise, but it is useful for education.&lt;/p&gt;\n\n&lt;p&gt;While programming we often write code that looks like the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;[] grades = ....\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; grades.length; i++) {   &lt;span class=&quot;hljs-comment&quot;&gt;// for i goes from 0 to grades.length&lt;/span&gt;\n    System.out.print(grades[i]);           &lt;span class=&quot;hljs-comment&quot;&gt;// Print grades[i]&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The foreach syntax allows this common pattern to be written in a more natural and less syntactically noisy way.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; grade : grades) {   &lt;span class=&quot;hljs-comment&quot;&gt;// foreach grade in grades&lt;/span&gt;\n    System.out.print(grade); &lt;span class=&quot;hljs-comment&quot;&gt;// print that grade&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Additionally this syntax is valid for objects such as Lists or Sets which do not support array indexing, but which do implement the Java Iterable interface.&lt;/p&gt;\n    ","\n&lt;p&gt;The for-each loop in Java uses the underlying iterator mechanism. So it&apos;s identical to the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = someList.iterator();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n  &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n  System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As defined in &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2&quot; rel=&quot;nofollow noreferrer&quot;&gt;JLS&lt;/a&gt;, a &lt;em&gt;for-each&lt;/em&gt; loop can have two forms:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If the type of expression is a subtype of &lt;code&gt;Iterable&lt;/code&gt; then translation is as:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;);\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ball&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String item : someList) {\n    System.out.println(item);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Is translated to:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; stringIterator = someList.iterator(); stringIterator.hasNext(); ) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; stringIterator.next();\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the expression necessarily has an array type &lt;code&gt;T[]&lt;/code&gt; then:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] someArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\nsomeArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Apple&quot;&lt;/span&gt;;\nsomeArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Ball&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String item2 : someArray) {\n    System.out.println(item2);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Is translated to:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; someArray.length; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item2&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; someArray[i];\n    System.out.println(item2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Java 8 has introduced streams which perform generally better with a decent size dataset. We can use them as:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.stream().forEach(System.out::println);\nArrays.stream(someArray).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It&apos;s implied by &lt;a href=&quot;https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work/85206#85206&quot;&gt;nsayer&apos;s answer&lt;/a&gt;, but it&apos;s worth noting that the OP&apos;s for(..) syntax will work when &quot;someList&quot; is &lt;em&gt;anything&lt;/em&gt; that implements java.lang.Iterable -- it doesn&apos;t have to be a list, or some collection from java.util. Even your own types, therefore, can be used with this syntax.&lt;/p&gt;\n    ","\n&lt;p&gt;A foreach loop syntax is:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (type obj:array) {...}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] s = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Java&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Coffe&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Is&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Cool&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str:s &lt;span class=&quot;hljs-comment&quot;&gt;/*s is the array*/&lt;/span&gt;) {\n    System.out.println(str);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Java\nCoffe\nIs\nCool\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;WARNING: You can access array elements with the foreach loop, but you can NOT initialize them. Use the original &lt;code&gt;for&lt;/code&gt; loop for that.&lt;/p&gt;\n&lt;p&gt;WARNING: You must match the type of the array with the other object.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;double&lt;/span&gt; b:s) &lt;span class=&quot;hljs-comment&quot;&gt;// Invalid-double is not String&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you want to edit elements, use the original &lt;code&gt;for&lt;/code&gt; loop like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; s.length-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/*-1 because of the 0 index */&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//1 because once again I say the 0 index&lt;/span&gt;\n        s[i]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2 is cool&quot;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n        s[i] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now if we dump s to the console, we get:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;hello\n2 is cool\nhello\nhello\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Java &quot;for-each&quot; loop construct will allow iteration over two types of objects:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;T[]&lt;/code&gt; &lt;em&gt;(arrays of any type)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;java.lang.Iterable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; interface has only one method: &lt;code&gt;Iterator&amp;lt;T&amp;gt; iterator()&lt;/code&gt;.  This works on objects of type &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; because the &lt;code&gt;Collection&amp;lt;T&amp;gt;&lt;/code&gt; interface extends &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;In Java 8 features you can use this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; messages = Arrays.asList(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Second&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Third&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forTest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n    messages.forEach(System.out::println);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output&lt;/h3&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;First\nSecond\nThird\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The concept of a foreach loop as mentioned in Wikipedia is highlighted below:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Unlike other for loop constructs, however, foreach loops usually\n  maintain &lt;strong&gt;no explicit counter&lt;/strong&gt;: they essentially say &quot;do this to\n  everything in this set&quot;, rather than &quot;do this x times&quot;. This avoids\n  potential &lt;strong&gt;off-by-one errors&lt;/strong&gt; and makes code simpler to read.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So the concept of a foreach loop describes that the loop does not use any explicit counter which means that there is no need of using indexes to traverse in the list thus it saves user from off-by-one error. To describe the general concept of this off-by-one error, let us take an example of a loop to traverse in a list using indexes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// In this loop it is assumed that the list starts with index 0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;list.length; i++){\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But suppose if the list starts with index 1 then this loop is going to throw an exception as it will found no element at index 0 and this error is called an off-by-one error. So to avoid this off-by-one error the concept of a foreach loop is used. There may be other advantages too, but this is what I think is the main concept and advantage of using a foreach loop.&lt;/p&gt;\n    ","\n&lt;p&gt;In Java 8, they introduced forEach. Using it List, Maps can be looped.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Loop a List using for each&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\nsomeList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;);\n\nsomeList.forEach(listItem -&amp;gt; System.out.println(listItem))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.forEach(listItem-&amp;gt; {\n     System.out.println(listItem); \n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Loop a Map using for each&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Map&amp;lt;String, String&amp;gt; mapList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();\n    mapList.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value1&quot;&lt;/span&gt;);\n    mapList.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value2&quot;&lt;/span&gt;);\n    mapList.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Value3&quot;&lt;/span&gt;);\n\nmapList.forEach((key,value)-&amp;gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key: &quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Value : &quot;&lt;/span&gt; + value));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;mapList.forEach((key,value)-&amp;gt;{\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Key : &quot;&lt;/span&gt; + key + &lt;span class=&quot;hljs-string&quot;&gt;&quot; Value : &quot;&lt;/span&gt; + value);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s an equivalent expression.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;String&amp;gt; sit = someList.iterator(); sit.hasNext(); ) {\n    System.out.println(sit.next());\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using older Java versions, including &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java&amp;nbsp;7&lt;/a&gt;, you can use a &lt;code&gt;foreach&lt;/code&gt; loop as follows.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; items = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;B&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;);\nitems.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String item : items) {\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The following is the very latest way of using a &lt;em&gt;for each&lt;/em&gt; loop in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java&amp;nbsp;8&lt;/a&gt; (loop a List with &lt;code&gt;forEach&lt;/code&gt; + lambda expression or method reference).&lt;/p&gt;\n&lt;h3&gt;Lambda&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Output: A,B,C,D,E&lt;/span&gt;\nitems.forEach(item-&amp;gt;System.out.println(item));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Method reference&lt;/h3&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Output: A,B,C,D,E&lt;/span&gt;\nitems.forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For more information, refer to &lt;em&gt;&quot;&lt;a href=&quot;https://www.mkyong.com/java8/java-8-foreach-examples/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java 8 forEach examples&lt;/a&gt;&quot;&lt;/em&gt;.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; itr = someList.iterator(); itr.hasNext(); ) {\n   &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; itr.next();\n   System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Also note that using the &quot;foreach&quot; method in the original question does have some limitations, such as not being able to remove items from the list during the iteration.&lt;/p&gt;\n\n&lt;p&gt;The new for-loop is easier to read and removes the need for a separate iterator, but is only really usable in read-only iteration passes.&lt;/p&gt;\n    ","\n&lt;p&gt;An alternative to forEach in order to avoid your &quot;for each&quot;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Variant 1 (plain):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.stream().forEach(listItem -&amp;gt; {\n    System.out.println(listItem);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Variant 2 (parallel execution (faster)):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.parallelStream().forEach(listItem -&amp;gt; {\n    System.out.println(listItem);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It adds beauty to your code by removing all the basic looping clutter. It gives a clean look to your code, justified below.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Normal &lt;code&gt;for&lt;/code&gt; loop:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cancelAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;TimerTask&amp;gt; list)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;TimerTask&amp;gt; i = list.iterator(); i.hasNext();)\n         i.next().cancel();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using for-each:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;cancelAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Collection&amp;lt;TimerTask&amp;gt; list)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TimerTask t : list)\n        t.cancel();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;for-each&lt;/strong&gt; is a construct over a collection that implements &lt;strong&gt;Iterator&lt;/strong&gt;. Remember that, your collection should implement &lt;strong&gt;Iterator&lt;/strong&gt;; otherwise you can&apos;t use it with for-each.&lt;/p&gt;\n\n&lt;p&gt;The following line is read as &quot;&lt;em&gt;for each TimerTask t in list.&lt;/em&gt;&quot;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TimerTask t : list)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is less chance for errors in case of for-each. You don&apos;t have to worry about initializing the iterator or initializing the loop counter and terminating it (where there is scope for errors).&lt;/p&gt;\n    ","\n&lt;p&gt;Prior to Java 8, you need to use the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Iterator&amp;lt;String&amp;gt; iterator = someList.iterator();\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (iterator.hasNext()) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; iterator.next();\n    System.out.println(item);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, with the introduction of Streams in Java 8 you can do same thing in much less syntax. For example, for your &lt;code&gt;someList&lt;/code&gt; you can do:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;someList.stream().forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can find more about streams &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It would look something like this. Very crufty. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; i = someList.iterator(); i.hasNext(); )\n        System.out.println(i.next());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is a good writeup on &lt;em&gt;for each&lt;/em&gt; in the &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sun documentation&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;The &lt;a href=&quot;https://funnelgarden.com/java-for-loop/#Enhanced_For_Loop&quot; rel=&quot;noreferrer&quot;&gt;Java for each loop&lt;/a&gt; (aka enhanced for loop) is a simplified version of a for loop. The advantage is that there is less code to write and less variables to manage. The downside is that you have no control over the step value and no access to the loop index inside the loop body.&lt;/p&gt;\n\n&lt;p&gt;They are best used when the step value is a simple increment of 1 and when you only need access to the current loop element. For example, if you need to loop over every element in an array or Collection without peeking ahead or behind the current element.&lt;/p&gt;\n\n&lt;p&gt;There is no loop initialization, no boolean condition and the step value is implicit and is a simple increment. This is why they are considered so much simpler than regular for loops.&lt;/p&gt;\n\n&lt;p&gt;Enhanced for loops follow this order of execution:&lt;/p&gt;\n\n&lt;p&gt;1) loop body&lt;/p&gt;\n\n&lt;p&gt;2) repeat from step 1 until entire array or collection has been traversed&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  Integer Array&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [] intArray = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; currentValue : intArray) {\n  System.out.println(currentValue);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The currentValue variable holds the current value being looped over in the intArray array. Notice theres no explicit step value  its always an increment by 1.&lt;/p&gt;\n\n&lt;p&gt;The colon can be thought of to mean in. So the enhanced for loop declaration states: loop over intArray and store the current array int value &lt;strong&gt;in&lt;/strong&gt; the currentValue variable.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  String Array&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;We can use the for-each loop to iterate over an array of strings. The loop declaration states: loop over myStrings String array and store the current String value &lt;strong&gt;in&lt;/strong&gt; the currentString variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String [] myStrings  = {\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;beta&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String currentString : myStrings) {\n  System.out.println(currentString);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;alpha\nbeta\ngamma\ndelta\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  List&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The enhanced for loop can also be used to iterate over a java.util.List as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; myList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;);\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;beta&quot;&lt;/span&gt;);\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;);\nmyList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String currentItem : myList) {\n  System.out.println(currentItem);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The loop declaration states: loop over myList List of Strings and store the current List value &lt;strong&gt;in&lt;/strong&gt; the currentItem variable.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;alpha\nbeta\ngamma\ndelta\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Example  Set&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The enhanced for loop can also be used to iterate over a java.util.Set as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;Set&amp;lt;String&amp;gt; mySet = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HashSet&lt;/span&gt;&amp;lt;String&amp;gt;();\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;beta&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;gamma&quot;&lt;/span&gt;);\nmySet.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;delta&quot;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String currentItem : mySet) {\n  System.out.println(currentItem);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The loop declaration states: loop over mySet Set of Strings and store the current Set value &lt;strong&gt;in&lt;/strong&gt; the currentItem variable. Notice that since this is a Set, duplicate String values are not stored.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;alpha\ndelta\nbeta\ngamma\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source: &lt;a href=&quot;https://funnelgarden.com/java-for-loop/&quot; rel=&quot;noreferrer&quot;&gt;Loops in Java  Ultimate Guide&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As so many good answers said, an object must implement the &lt;code&gt;Iterable interface&lt;/code&gt; if it wants to use a &lt;code&gt;for-each&lt;/code&gt; loop.&lt;/p&gt;\n&lt;p&gt;I&apos;ll post a simple example and try to explain in a different way how a &lt;code&gt;for-each&lt;/code&gt; loop works.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;for-each&lt;/code&gt; loop example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ForEachTest&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n        List&amp;lt;String&amp;gt; list = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n        list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;111&quot;&lt;/span&gt;);\n        list.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;222&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String str : list) {\n            System.out.println(str);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then, if we use &lt;code&gt;javap&lt;/code&gt; to decompile this class, we will get this bytecode sample:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;public static void main(java.lang.String[]);\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=4, args_size=1\n         0: new           #16                 // class java/util/ArrayList\n         3: dup\n         4: invokespecial #18                 // Method java/util/ArrayList.&quot;&amp;lt;init&amp;gt;&quot;:()V\n         7: astore_1\n         8: aload_1\n         9: ldc           #19                 // String 111\n        11: invokeinterface #21,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        16: pop\n        17: aload_1\n        18: ldc           #27                 // String 222\n        20: invokeinterface #21,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        25: pop\n        26: aload_1\n        27: invokeinterface #29,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;As we can see from the last line of the sample, the compiler will automatically convert the use of &lt;code&gt;for-each&lt;/code&gt; keyword to the use of an &lt;code&gt;Iterator&lt;/code&gt; at compile time. That may explain why object, which doesn&apos;t implement the &lt;code&gt;Iterable interface&lt;/code&gt;, will throw an &lt;code&gt;Exception&lt;/code&gt; when it tries to use the &lt;code&gt;for-each&lt;/code&gt; loop.&lt;/p&gt;\n    ","\n&lt;p&gt;As many of other answers correctly state, the &lt;em&gt;for each&lt;/em&gt; loop is just syntactic sugar over the same old &lt;em&gt;for&lt;/em&gt; loop and the compiler translates it to the same old &lt;em&gt;for&lt;/em&gt; loop.&lt;/p&gt;\n&lt;p&gt;javac (&lt;a href=&quot;https://en.wikipedia.org/wiki/OpenJDK&quot; rel=&quot;nofollow noreferrer&quot;&gt;OpenJDK&lt;/a&gt;) has a switch, &lt;code&gt;-XD-printflat&lt;/code&gt;, which generates a Java file with all the syntactic sugar removed. The complete command looks like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;javac -XD-printflat -d src/ MyFile.java\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//-d is used to specify the directory for output java file&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;So lets remove the syntactical sugar&lt;/h3&gt;\n&lt;p&gt;To answer this question, I created a file and wrote two versions of &lt;em&gt;for each&lt;/em&gt;, one with &lt;em&gt;array&lt;/em&gt; and another with a &lt;em&gt;list&lt;/em&gt;. My Java file looked like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Temp&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i: arr){\n            System.out.print(i);\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;{\n        List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(Integer i: list){\n            System.out.print(i);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When I &lt;code&gt;compiled&lt;/code&gt; this file with above switch, I got the following output.&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Temp&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Temp&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-built_in&quot;&gt;super&lt;/span&gt;();\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachArray&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-comment&quot;&gt;/*synthetic*/&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] arr$ = arr, len$ = arr$.length, i$ = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i$ &amp;lt; len$; ++i$) {\n            &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; arr$[i$];\n            {\n                System.out.print(i);\n            }\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;forEachList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n        &lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Integer&lt;/span&gt;[]{Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;), Integer.valueOf(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)});\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-comment&quot;&gt;/*synthetic*/&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i$&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; list.iterator(); i$.hasNext(); ) {\n            &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; (Integer)i$.next();\n            {\n                System.out.print(i);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can see that along with the other syntactic sugar (Autoboxing), &lt;em&gt;for each&lt;/em&gt; loops got changed to simple loops.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Boolean &lt;span class=&quot;hljs-title function_&quot;&gt;Add_Tag&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; totalsize)&lt;/span&gt;\n{\n    List&amp;lt;String&amp;gt; fullst = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k&amp;lt;totalsize; k++)\n    {\n        fullst.addAll();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The Java for-each idiom can only be applied to arrays or objects of type &lt;strong&gt;*Iterable&lt;/strong&gt;. This idiom is &lt;strong&gt;&lt;em&gt;implicit&lt;/em&gt;&lt;/strong&gt; as it truly backed by an Iterator. The Iterator is programmed by the programmer and often uses an integer index or a node (depending on the data structure) to keep track of its position. On paper it is slower than a regular for-loop, a least for &quot;linear&quot; structures like arrays and Lists but it provides greater abstraction. &lt;/p&gt;\n    ","\n&lt;p&gt;This looks crazy but hey it works&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;//has content&lt;/span&gt;\nsomeList.forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works. &lt;strong&gt;&lt;em&gt;Magic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I think this will work:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Iterator&amp;lt;String&amp;gt; i = someList.iterator(); i.hasNext(); ) {\n   &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; i.next();\n   System.out.println(x);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The code would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ForLoopDemo&lt;/span&gt; {\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; {\n\n    List&amp;lt;String&amp;gt; someList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();\n\n    someList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;monkey&quot;&lt;/span&gt;);\n    someList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;donkey&quot;&lt;/span&gt;);\n    someList.add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;skeleton key&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Iteration using For Each loop&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Iteration using a For Each loop:&quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String item : someList) {\n      System.out.println(item);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Iteration using a normal For loop&lt;/span&gt;\n    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\nIteration using normal For loop: &quot;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; someList.size(); index++) {\n      System.out.println(someList.get(index));\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using &lt;em&gt;forEach&lt;/em&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] numbers = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n\nArrays.stream(numbers).forEach(System.out::println);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Response:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;1\n2\n3\n4\n5\n\nThe process finished with exit code 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PS: You need a Array (&lt;code&gt;int[] numbers&lt;/code&gt;), and &lt;code&gt;import java.util.Arrays;&lt;/code&gt;&lt;/p&gt;\n    "],"562":["\n&lt;p&gt;You can use this equivalent syntax:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj[name] = value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {};\nobj[&lt;span class=&quot;hljs-string&quot;&gt;&quot;the_key&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;the_value&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or with ES6 features:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&quot;the_key&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {\n  [key]: &lt;span class=&quot;hljs-string&quot;&gt;&quot;the_value&quot;&lt;/span&gt;,\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in both examples, &lt;code&gt;console.log(obj)&lt;/code&gt; will return: &lt;code&gt;{ the_key: &apos;the_value&apos; }&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;With &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015&lt;/a&gt; you can do it directly in object declaration using bracket notation:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  [key]: value\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;key&lt;/code&gt; can be any sort of expression (e.g. a variable) returning a value:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = {\n  [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;]: &lt;span class=&quot;hljs-string&quot;&gt;&apos;World&apos;&lt;/span&gt;,\n  [x + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;,\n  [someObject.&lt;span class=&quot;hljs-title function_&quot;&gt;getId&lt;/span&gt;()]: someVar\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can even make List of objects like this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; feeTypeList = [];\n$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#feeTypeTable &amp;gt; tbody &amp;gt; tr&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;i, el&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; feeType = {};\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $ID = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;input[id^=txtFeeType]&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;);\n\n    feeType[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feeTypeID&quot;&lt;/span&gt;] = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ddlTerm&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n    feeType[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feeTypeName&quot;&lt;/span&gt;] = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ddlProgram&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n    feeType[&lt;span class=&quot;hljs-string&quot;&gt;&quot;feeTypeDescription&quot;&lt;/span&gt;] = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#ddlBatch&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;val&lt;/span&gt;();\n\n    feeTypeList.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(feeType);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There are two different notations to access object properties&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Dot&lt;/strong&gt; notation: &lt;em&gt;myObj.prop1&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Bracket&lt;/strong&gt; notation: &lt;em&gt;myObj[&quot;prop1&quot;]&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Dot notation is fast and easy but you &lt;em&gt;must&lt;/em&gt; use the actual property name explicitly.  No substitution, variables, etc.   &lt;/p&gt;\n\n&lt;p&gt;Bracket notation is open ended.  It uses a string but you can produce the string using any legal js code.  You may specify the string as literal (though in this case dot notation would read easier) or use a variable or calculate in some way.&lt;/p&gt;\n\n&lt;p&gt;So, these all set the &lt;em&gt;myObj&lt;/em&gt; property named &lt;em&gt;prop1&lt;/em&gt; to the value &lt;em&gt;Hello&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// quick easy-on-the-eye dot notation&lt;/span&gt;\nmyObj.&lt;span class=&quot;hljs-property&quot;&gt;prop1&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// brackets+literal&lt;/span&gt;\nmyObj[&lt;span class=&quot;hljs-string&quot;&gt;&quot;prop1&quot;&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// using a variable&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;prop1&quot;&lt;/span&gt;; \nmyObj[x] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;                     \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// calculate the accessor string in some weird way&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; numList = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\nmyObj[ &lt;span class=&quot;hljs-string&quot;&gt;&quot;prop&quot;&lt;/span&gt; + numList[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] ] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;     \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pitfalls:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;myObj.[xxxx] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// wrong: mixed notations, syntax fail&lt;/span&gt;\nmyObj[prop1] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// wrong: this expects a variable called prop1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;tl;dnr&lt;/strong&gt;: If you want to compute or reference the key you &lt;em&gt;must&lt;/em&gt; use &lt;em&gt;bracket notation&lt;/em&gt;. If you are using the key explicitly, then use &lt;em&gt;dot notation&lt;/em&gt; for simple clear code.&lt;/p&gt;\n\n&lt;p&gt;Note: there are some other good and correct answers but I personally found them a bit brief coming from a low familiarity with JS on-the-fly quirkiness.  This might be useful to some people.   &lt;/p&gt;\n    ","\n&lt;p&gt;With lodash, you can create new object like this &lt;a href=&quot;https://lodash.com/docs/#set&quot; rel=&quot;nofollow noreferrer&quot;&gt;_.set&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;obj = _.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;({}, key, val);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can set to existing object like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; existingObj = { &lt;span class=&quot;hljs-attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; };\n_.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;(existingObj, &lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// existingObj will be: { a: 5 }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should take care if you want to use dot (&quot;.&quot;) in your path, because lodash can set hierarchy, for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;_.&lt;span class=&quot;hljs-title function_&quot;&gt;set&lt;/span&gt;({}, &lt;span class=&quot;hljs-string&quot;&gt;&quot;a.b.c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// { &quot;a&quot;: { &quot;b&quot;: { &quot;c&quot;: &quot;d&quot; } } }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;First we need to define key as variable and then we need to assign as key as object., for example\n&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; data = {&lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;dynamic_key&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;dynamic_value&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; key = data.&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = { [key]: data.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;}\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj)&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Related to the subject, not specifically for jquery though. I used this in ec6 react projects, maybe helps someone:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;setState&lt;/span&gt;({ [&lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${name}&lt;/span&gt;`&lt;/span&gt;]: value}, &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;State updated: &quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;state&lt;/span&gt;[name]));\n    });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;PS: Please mind the quote character.&lt;/p&gt;\n    ","\n&lt;p&gt;With the advent of ES2015  &lt;a href=&quot;http://devdocs.io/javascript/global_objects/object/assign&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object.assign&lt;/a&gt; and &lt;a href=&quot;http://devdocs.io/javascript/operators/object_initializer&quot; rel=&quot;nofollow noreferrer&quot;&gt;computed property names&lt;/a&gt; the OP&apos;s code boils down to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;assign&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;({}, $(itemsFromDom).&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;i, el&lt;/span&gt;) =&amp;gt;&lt;/span&gt; ({[el.&lt;span class=&quot;hljs-property&quot;&gt;id&lt;/span&gt;]: el.&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;})));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;ajavascript have two type of annotation for fetching javascript Object properties:&lt;/p&gt;\n\n&lt;p&gt;Obj = {};&lt;/p&gt;\n\n&lt;p&gt;1)  (.) annotation eg. Obj.id\nthis will only work if the object already have a property with name &apos;id&apos;&lt;/p&gt;\n\n&lt;p&gt;2) ([]) annotation  eg . Obj[id] here if the object does not have any property with name &apos;id&apos;,it will create a new property with name &apos;id&apos;.&lt;/p&gt;\n\n&lt;p&gt;so for below example:&lt;/p&gt;\n\n&lt;p&gt;A new property will be created always when you write Obj[name].\nAnd if the property already exist with the same name it will override it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {}\n    &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(itemsFromDom).&lt;span class=&quot;hljs-title function_&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;hljs-title function_&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; name = element.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;id&apos;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; value = element.&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;value&apos;&lt;/span&gt;)\n      &lt;span class=&quot;hljs-comment&quot;&gt;// This will work&lt;/span&gt;\n      obj[name]= value;\n    })\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to add fields to an object dynamically, simplest way to do it is as follows:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; params = [\n  { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;k1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;k2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; },\n  { &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;k3&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n];\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; data = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; params.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; i++) {\n  data[params[i].&lt;span class=&quot;hljs-property&quot;&gt;key&lt;/span&gt;] = params[i].&lt;span class=&quot;hljs-property&quot;&gt;value&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(data); &lt;span class=&quot;hljs-comment&quot;&gt;// -&amp;gt; { k1: 1, k2: 2, k3: 3 }&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The 3 ways to access the object value\nWe can output the object value by passing in the appropriate key. Because I used emoji as the key in my example, it&apos;s a bit tricky. So let&apos;s look at a easier example.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; me = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;samantha&apos;&lt;/span&gt;,\n};\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Dot notation&lt;/span&gt;\nme.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// samantha&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. Bracket notation (string key)&lt;/span&gt;\nme[&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// samantha&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3. Bracket notation (variable key)&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;;\nme[key]; &lt;span class=&quot;hljs-comment&quot;&gt;// samantha&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;a href=&quot;https://www.samanthaming.com/tidbits/37-dynamic-property-name-with-es6/&quot; rel=&quot;nofollow noreferrer&quot;&gt;know more&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you have object, you can make array of keys, than map through, and create new object from previous object keys, and values.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(myObject)\n.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt; =&amp;gt;&lt;/span&gt;{\n &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {};\n obj[el]=myObject[el].&lt;span class=&quot;hljs-property&quot;&gt;code&lt;/span&gt;;\n &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(obj);\n});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;objectname.newProperty = value;&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; data = [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;BMW&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;25641&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;45876&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Benz&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;65784&apos;&lt;/span&gt;\n  },\n  {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Toyota&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;254&apos;&lt;/span&gt;\n  }\n]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;carsList&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Ford&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;47563&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Toyota&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;254&apos;&lt;/span&gt;\n  }],\n  &lt;span class=&quot;hljs-attr&quot;&gt;pastriesList&lt;/span&gt;: [],\n  &lt;span class=&quot;hljs-attr&quot;&gt;fruitsList&lt;/span&gt;: [{\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;45876&apos;&lt;/span&gt;\n  }, {\n    &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Pineapple&apos;&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;84523&apos;&lt;/span&gt;\n  }]\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; keys = &lt;span class=&quot;hljs-title class_&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;keys&lt;/span&gt;(obj);\n\nresult = {};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(key &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; keys){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; a =  [...data,...obj[key]];\n    result[key] = a;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"563":["\n&lt;p&gt;Note:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If you&apos;re looking for &lt;strong&gt;prepackaged functionality&lt;/strong&gt; based on the techniques discussed in this answer:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&lt;code&gt;bash&lt;/code&gt; functions&lt;/strong&gt; that enable &lt;strong&gt;robust escaping&lt;/strong&gt; even in &lt;strong&gt;&lt;em&gt;multi-line&lt;/em&gt; substitutions&lt;/strong&gt; can be found at the &lt;strong&gt;bottom of this post&lt;/strong&gt; (plus a &lt;code&gt;perl&lt;/code&gt; solution that uses &lt;code&gt;perl&lt;/code&gt;&apos;s built-in support for such escaping).&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/29626460/1745001&quot;&gt;@EdMorton&apos;s answer&lt;/a&gt; contains a &lt;strong&gt;tool&lt;/strong&gt; (&lt;code&gt;bash&lt;/code&gt; script) that robustly performs &lt;strong&gt;&lt;em&gt;single-line&lt;/em&gt; substitutions&lt;/strong&gt;.\n&lt;ul&gt;\n&lt;li&gt;Ed&apos;s answer now has &lt;strong&gt;an &lt;em&gt;improved&lt;/em&gt; version of the &lt;code&gt;sed&lt;/code&gt; command used below&lt;/strong&gt;, which is needed if you want &lt;strong&gt;to escape string literals for potential use with &lt;em&gt;other&lt;/em&gt; regex-processing tools, such as &lt;code&gt;awk&lt;/code&gt; and &lt;code&gt;perl&lt;/code&gt;.&lt;/strong&gt; In short: &lt;strong&gt;for cross-tool use, &lt;code&gt;\\&lt;/code&gt; must be escaped as &lt;code&gt;\\\\&lt;/code&gt; rather than as &lt;code&gt;[\\]&lt;/code&gt;&lt;/strong&gt;, which means: instead of the&lt;br&gt;\n&lt;code&gt;sed &apos;s/[^^]/[&amp;amp;]/g; s/\\^/\\\\^/g&apos;&lt;/code&gt; command used below, you must use&lt;br&gt;\n&lt;code&gt;sed &apos;s/[^^\\\\]/[&amp;amp;]/g; s/\\^/\\\\^/g; s/\\\\/\\\\\\\\/g&apos;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;All snippets assume &lt;code&gt;bash&lt;/code&gt; as the shell (POSIX-compliant reformulations are possible):&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h2&gt;SINGLE-line Solutions&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h3&gt;Escaping a string literal for use as a &lt;em&gt;regex&lt;/em&gt; in &lt;code&gt;sed&lt;/code&gt;:&lt;/h3&gt;\n&lt;p&gt;&lt;sup&gt;To give credit where credit is due: I found the regex used below in &lt;a href=&quot;https://stackoverflow.com/a/28783790/45375&quot;&gt;this answer&lt;/a&gt;.&lt;/sup&gt;&lt;/p&gt;\n&lt;p&gt;Assuming that the search string is a &lt;em&gt;single&lt;/em&gt;-line string:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;search=&lt;span class=&quot;hljs-string&quot;&gt;&apos;abc\\n\\t[a-z]\\+\\([^ ]\\)\\{2,3\\}\\3&apos;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# sample input containing metachars.&lt;/span&gt;\n\nsearchEscaped=$(sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^]/[&amp;amp;]/g; s/\\^/\\\\^/g&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$search&lt;/span&gt;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# escape it.&lt;/span&gt;\n\nsed -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/&lt;span class=&quot;hljs-variable&quot;&gt;$searchEscaped&lt;/span&gt;/foo/p&quot;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$search&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# if ok, echoes &apos;foo&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Every character except &lt;code&gt;^&lt;/code&gt; is placed in its own character set &lt;code&gt;[...]&lt;/code&gt; expression to treat it as a literal.\n&lt;ul&gt;\n&lt;li&gt;Note that &lt;code&gt;^&lt;/code&gt; is the one char. you &lt;em&gt;cannot&lt;/em&gt; represent as &lt;code&gt;[^]&lt;/code&gt;, because it has special meaning in that location (negation).&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;Then, &lt;code&gt;^&lt;/code&gt; chars. are escaped as &lt;code&gt;\\^&lt;/code&gt;.\n&lt;ul&gt;\n&lt;li&gt;Note that you cannot just escape every char by putting a &lt;code&gt;\\&lt;/code&gt; in front of it because that can turn a literal char into a metachar, e.g. &lt;code&gt;\\&amp;lt;&lt;/code&gt; and &lt;code&gt;\\b&lt;/code&gt; are word boundaries in some tools, &lt;code&gt;\\n&lt;/code&gt; is a newline, &lt;code&gt;\\{&lt;/code&gt; is the start of a RE interval like &lt;code&gt;\\{1,3\\}&lt;/code&gt;, etc.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;The approach is robust, but not efficient.&lt;/p&gt;\n&lt;p&gt;The &lt;strong&gt;robustness comes from &lt;em&gt;not&lt;/em&gt; trying to anticipate all special regex characters&lt;/strong&gt; - which will vary across regex dialects - but to &lt;strong&gt;focus on only 2 features &lt;em&gt;shared by all regex dialects&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;the ability to specify literal characters inside a character set.&lt;/li&gt;\n&lt;li&gt;the ability to escape a literal  &lt;code&gt;^&lt;/code&gt; as &lt;code&gt;\\^&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h3&gt;Escaping a string literal for use as the &lt;em&gt;replacement string&lt;/em&gt; in &lt;code&gt;sed&lt;/code&gt;&apos;s &lt;code&gt;s///&lt;/code&gt; command:&lt;/h3&gt;\n&lt;p&gt;The replacement string in a &lt;code&gt;sed&lt;/code&gt; &lt;code&gt;s///&lt;/code&gt; command is not a regex, but it recognizes &lt;em&gt;placeholders&lt;/em&gt; that refer to either the entire string matched by the regex (&lt;code&gt;&amp;amp;&lt;/code&gt;) or specific capture-group results by index (&lt;code&gt;\\1&lt;/code&gt;, &lt;code&gt;\\2&lt;/code&gt;, ...), so these must be escaped, along with the (customary) regex delimiter, &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Assuming that the replacement string is a &lt;em&gt;single&lt;/em&gt;-line string:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;replace=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Laurel &amp;amp; Hardy; PS\\2&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# sample input containing metachars.&lt;/span&gt;\n\nreplaceEscaped=$(sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[&amp;amp;/\\]/\\\\&amp;amp;/g&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$replace&lt;/span&gt;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# escape it&lt;/span&gt;\n\nsed -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/\\(.*\\) \\(.*\\)/&lt;span class=&quot;hljs-variable&quot;&gt;$replaceEscaped&lt;/span&gt;/p&quot;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# if ok, outputs $replace as is&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h2&gt;MULTI-line Solutions&lt;/h2&gt;\n&lt;hr&gt;\n&lt;h3&gt;Escaping a MULTI-LINE string literal for use as a &lt;em&gt;regex&lt;/em&gt; in &lt;code&gt;sed&lt;/code&gt;:&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This only makes sense if &lt;em&gt;multiple input lines&lt;/em&gt; (possibly ALL) have been read before attempting to match.&lt;br&gt;\nSince tools such as &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; operate on a &lt;em&gt;single&lt;/em&gt; line at a time by default, extra steps are needed to make them read more than one line at a time.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Define sample multi-line literal.&lt;/span&gt;\nsearch=&lt;span class=&quot;hljs-string&quot;&gt;&apos;/abc\\n\\t[a-z]\\+\\([^ ]\\)\\{2,3\\}\\3\n/def\\n\\t[A-Z]\\+\\([^ ]\\)\\{3,4\\}\\4&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Escape it.&lt;/span&gt;\nsearchEscaped=$(sed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^]/[&amp;amp;]/g; s/\\^/\\\\^/g; $!a\\&apos;&lt;/span&gt;$&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\n&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$search&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;tr&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;)           &lt;span class=&quot;hljs-comment&quot;&gt;#&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Use in a Sed command that reads ALL input lines up front.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# If ok, echoes &apos;foo&apos;&lt;/span&gt;\nsed -n -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;:a&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;$!{N;ba&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/&lt;span class=&quot;hljs-variable&quot;&gt;$searchEscaped&lt;/span&gt;/foo/p&quot;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$search&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;The newlines in multi-line input strings must be translated to &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; &lt;em&gt;strings&lt;/em&gt;, which is how newlines are encoded in a regex.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$!a\\&apos;$&apos;\\n&apos;&apos;\\\\n&apos;&lt;/code&gt; appends &lt;em&gt;string&lt;/em&gt; &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; to every output line but the last (the last newline is ignored, because it was added by &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;tr -d &apos;\\n&lt;/code&gt; then removes all &lt;em&gt;actual&lt;/em&gt; newlines from the string (&lt;code&gt;sed&lt;/code&gt; adds one whenever it prints its pattern space), effectively replacing all newlines in the input with &lt;code&gt;&apos;\\n&apos;&lt;/code&gt; strings.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;-e &apos;:a&apos; -e &apos;$!{N;ba&apos; -e &apos;}&apos;&lt;/code&gt; is the POSIX-compliant form of a &lt;code&gt;sed&lt;/code&gt; idiom that reads &lt;em&gt;all&lt;/em&gt; input lines a loop, therefore leaving subsequent commands to operate on all input lines at once.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;If you&apos;re using &lt;em&gt;GNU&lt;/em&gt; &lt;code&gt;sed&lt;/code&gt; (only), you can use its &lt;code&gt;-z&lt;/code&gt; option to simplify reading all input lines at once:&lt;br&gt;\n&lt;code&gt;sed -z &quot;s/$searchEscaped/foo/&quot; &amp;lt;&amp;lt;&amp;lt;&quot;$search&quot;&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;h3&gt;Escaping a MULTI-LINE string literal for use as the &lt;em&gt;replacement string&lt;/em&gt; in &lt;code&gt;sed&lt;/code&gt;&apos;s &lt;code&gt;s///&lt;/code&gt; command:&lt;/h3&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Define sample multi-line literal.&lt;/span&gt;\nreplace=&lt;span class=&quot;hljs-string&quot;&gt;&apos;Laurel &amp;amp; Hardy; PS\\2\nMasters\\1 &amp;amp; Johnson\\2&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Escape it for use as a Sed replacement string.&lt;/span&gt;\nIFS= &lt;span class=&quot;hljs-built_in&quot;&gt;read&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; -r &amp;lt; &amp;lt;(sed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;:a&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;$!{N;ba&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[&amp;amp;/\\]/\\\\&amp;amp;/g; s/\\n/\\\\&amp;amp;/g&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$replace&lt;/span&gt;&quot;&lt;/span&gt;)\nreplaceEscaped=&lt;span class=&quot;hljs-variable&quot;&gt;${REPLY%$&apos;\\n&apos;}&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# If ok, outputs $replace as is.&lt;/span&gt;\nsed -n &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/\\(.*\\) \\(.*\\)/&lt;span class=&quot;hljs-variable&quot;&gt;$replaceEscaped&lt;/span&gt;/p&quot;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;foo bar&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;Newlines in the input string must be retained as actual newlines, but &lt;code&gt;\\&lt;/code&gt;-escaped.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;-e &apos;:a&apos; -e &apos;$!{N;ba&apos; -e &apos;}&apos;&lt;/code&gt; is the POSIX-compliant form of a &lt;code&gt;sed&lt;/code&gt; idiom that reads &lt;em&gt;all&lt;/em&gt; input lines a loop.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;&apos;s/[&amp;amp;/\\]/\\\\&amp;amp;/g&lt;/code&gt; escapes all &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; instances, as in the single-line solution.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;s/\\n/\\\\&amp;amp;/g&apos;&lt;/code&gt; then &lt;code&gt;\\&lt;/code&gt;-prefixes all actual newlines.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;IFS= read -d &apos;&apos; -r&lt;/code&gt; is used to read the &lt;code&gt;sed&lt;/code&gt; command&apos;s output &lt;em&gt;as is&lt;/em&gt; (to avoid the automatic removal of trailing newlines that a command substitution (&lt;code&gt;$(...)&lt;/code&gt;) would perform).&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;${REPLY%$&apos;\\n&apos;}&lt;/code&gt; then removes a &lt;em&gt;single&lt;/em&gt; trailing newline, which the &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; has implicitly appended to the input.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;em&gt;&lt;code&gt;bash&lt;/code&gt; functions&lt;/em&gt; based on the above (for &lt;code&gt;sed&lt;/code&gt;):&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;quoteRe()&lt;/code&gt; quotes (escapes) for use in a &lt;em&gt;regex&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;quoteSubst()&lt;/code&gt; quotes for use in the &lt;em&gt;substitution string&lt;/em&gt; of a &lt;code&gt;s///&lt;/code&gt; call.&lt;/li&gt;\n&lt;li&gt;both handle &lt;em&gt;multi-line&lt;/em&gt; input correctly\n&lt;ul&gt;\n&lt;li&gt;Note that because &lt;code&gt;sed&lt;/code&gt; reads a &lt;em&gt;single&lt;/em&gt; line at at time by default, use of &lt;code&gt;quoteRe()&lt;/code&gt; with multi-line strings only makes sense in &lt;code&gt;sed&lt;/code&gt; commands that explicitly read multiple (or all) lines at once.&lt;/li&gt;\n&lt;li&gt;Also, using command substitutions (&lt;code&gt;$(...)&lt;/code&gt;) to call the functions won&apos;t work for strings that have &lt;em&gt;trailing&lt;/em&gt; newlines; in that event, use something like &lt;code&gt;IFS= read -d &apos;&apos; -r escapedValue &amp;lt;(quoteSubst &quot;$value&quot;)&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre class=&quot;lang-sh s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# SYNOPSIS&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#   quoteRe &amp;lt;text&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;quoteRe&lt;/span&gt;&lt;/span&gt;() { sed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^]/[&amp;amp;]/g; s/\\^/\\\\^/g; $!a\\&apos;&lt;/span&gt;$&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\\\n&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;hljs-built_in&quot;&gt;tr&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-perl&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# SYNOPSIS&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;#  quoteSubst &amp;lt;text&amp;gt;&lt;/span&gt;\nquoteSubst() {\n  IFS= &lt;span class=&quot;hljs-keyword&quot;&gt;read&lt;/span&gt; -d &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; -r &amp;lt; &amp;lt;(sed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;:a&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;$!{N;ba&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[&amp;amp;/\\]/\\\\&amp;amp;/g; s/\\n/\\\\&amp;amp;/g&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;$1&quot;&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;printf&lt;/span&gt; %s &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${REPLY%$&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;}&lt;/span&gt;&quot;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;from=$&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cost\\(*):\\n$3.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# sample input containing metachars. &lt;/span&gt;\nto=&lt;span class=&quot;hljs-string&quot;&gt;&apos;You &amp;amp; I&apos;&lt;/span&gt;$&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;eating A\\1 sauce.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# sample replacement string with metachars.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Should print the unmodified value of $to&lt;/span&gt;\nsed -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;:a&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;$!{N;ba&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&apos;}&apos;&lt;/span&gt; -e &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/&lt;span class=&quot;hljs-subst&quot;&gt;$(quoteRe &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$from&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;/&lt;span class=&quot;hljs-subst&quot;&gt;$(quoteSubst &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$to&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;/&quot;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$from&lt;/span&gt;&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note the use of &lt;code&gt;-e &apos;:a&apos; -e &apos;$!{N;ba&apos; -e &apos;}&apos;&lt;/code&gt; to read all input at once, so that the multi-line substitution works.&lt;/p&gt;\n&lt;hr&gt;\n&lt;hr&gt;\n&lt;h2&gt;&lt;code&gt;perl&lt;/code&gt; solution:&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;Perl has built-in support&lt;/strong&gt; for escaping arbitrary strings for literal use in a regex: the &lt;strong&gt;&lt;a href=&quot;http://perldoc.perl.org/functions/quotemeta.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;quotemeta()&lt;/code&gt; function&lt;/a&gt; or its equivalent &lt;code&gt;\\Q...\\E&lt;/code&gt; quoting&lt;/strong&gt;.&lt;br&gt;\nThe approach is the same for both single- and multi-line strings; for example:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;=$&lt;span class=&quot;hljs-string&quot;&gt;&apos;Cost\\(*):\\n$3.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# sample input containing metachars.&lt;/span&gt;\nto=&lt;span class=&quot;hljs-string&quot;&gt;&apos;You owe me $1/$&amp;amp; for&apos;&lt;/span&gt;$&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;eating A\\1 sauce.&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# sample replacement string w/ metachars.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Should print the unmodified value of $to.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# Note that the replacement value needs NO escaping.&lt;/span&gt;\nperl -s -&lt;span class=&quot;hljs-number&quot;&gt;0777&lt;/span&gt; -pe &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/\\Q$from\\E/$to/&apos;&lt;/span&gt; -- -&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$from&lt;/span&gt;&quot;&lt;/span&gt; -to=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$to&lt;/span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;$from&lt;/span&gt;&quot;&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Note the use of &lt;code&gt;-0777&lt;/code&gt; to read all input at once, so that the multi-line substitution works.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The &lt;code&gt;-s&lt;/code&gt; option allows placing &lt;code&gt;-&amp;lt;var&amp;gt;=&amp;lt;val&amp;gt;&lt;/code&gt;-style Perl variable definitions following &lt;code&gt;--&lt;/code&gt; after the script, before any filename operands.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Building upon &lt;a href=&quot;https://stackoverflow.com/a/29613573/1745001&quot;&gt;@mklement0&apos;s answer&lt;/a&gt; in this thread, the following tool will replace any single-line string (as opposed to regexp) with any other single-line string using &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; sedstr\n&lt;span class=&quot;hljs-comment&quot;&gt;#!/bin/bash&lt;/span&gt;\nold=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;\nnew=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;\nfile=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;${3:--}&lt;/span&gt;&quot;&lt;/span&gt;\nescOld=$(sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^\\\\]/[&amp;amp;]/g; s/\\^/\\\\^/g; s/\\\\/\\\\\\\\/g&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$old&lt;/span&gt;&quot;&lt;/span&gt;)\nescNew=$(sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[&amp;amp;/\\]/\\\\&amp;amp;/g&apos;&lt;/span&gt; &amp;lt;&amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$new&lt;/span&gt;&quot;&lt;/span&gt;)\nsed &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/&lt;span class=&quot;hljs-variable&quot;&gt;$escOld&lt;/span&gt;/&lt;span class=&quot;hljs-variable&quot;&gt;$escNew&lt;/span&gt;/g&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To illustrate the need for this tool, consider trying to replace &lt;code&gt;a.*/b{2,}\\nc&lt;/code&gt; with &lt;code&gt;d&amp;amp;e\\1f&lt;/code&gt; by calling &lt;code&gt;sed&lt;/code&gt; directly:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;cat&lt;/span&gt; file\na.*/b{2,}\\nc\naxx/bb\\nc\n\n$ sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/a.*/b{2,}\\nc/d&amp;amp;e\\1f/&apos;&lt;/span&gt; file  \nsed: -e expression &lt;span class=&quot;hljs-comment&quot;&gt;#1, char 16: unknown option to `s&apos;&lt;/span&gt;\n$ sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/a.*\\/b{2,}\\nc/d&amp;amp;e\\1f/&apos;&lt;/span&gt; file\nsed: -e expression &lt;span class=&quot;hljs-comment&quot;&gt;#1, char 23: invalid reference \\1 on `s&apos; command&apos;s RHS&lt;/span&gt;\n$ sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/a.*\\/b{2,}\\nc/d&amp;amp;e\\\\1f/&apos;&lt;/span&gt; file\na.*/b{2,}\\nc\naxx/bb\\nc\n&lt;span class=&quot;hljs-comment&quot;&gt;# .... and so on, peeling the onion ad nauseum until:&lt;/span&gt;\n$ sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/a\\.\\*\\/b{2,}\\\\nc/d\\&amp;amp;e\\\\1f/&apos;&lt;/span&gt; file\nd&amp;amp;e\\1f\naxx/bb\\nc\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or use the above tool:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ sedstr &lt;span class=&quot;hljs-string&quot;&gt;&apos;a.*/b{2,}\\nc&apos;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&amp;amp;e\\1f&apos;&lt;/span&gt; file  \nd&amp;amp;e\\1f\naxx/bb\\nc\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The reason this is useful is that it can be easily augmented to use word-delimiters to replace words if necessary, e.g. in GNU &lt;code&gt;sed&lt;/code&gt; syntax:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;sed &lt;span class=&quot;hljs-string&quot;&gt;&quot;s/\\&amp;lt;&lt;span class=&quot;hljs-variable&quot;&gt;$escOld&lt;/span&gt;\\&amp;gt;/&lt;span class=&quot;hljs-variable&quot;&gt;$escNew&lt;/span&gt;/g&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;$file&lt;/span&gt;&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;whereas the tools that actually operate on strings (e.g. &lt;code&gt;awk&lt;/code&gt;&apos;s &lt;code&gt;index()&lt;/code&gt;) cannot use word-delimiters.&lt;/p&gt;\n&lt;p&gt;NOTE: the reason to not wrap &lt;code&gt;\\&lt;/code&gt; in a bracket expression is that if you were using a tool that accepts &lt;code&gt;[\\]]&lt;/code&gt; as a literal &lt;code&gt;]&lt;/code&gt; inside a bracket expression (e.g. perl and most awk implementations) to do the actual final substitution (i.e. instead of &lt;code&gt;sed &quot;s/$escOld/$escNew/g&quot;&lt;/code&gt;) then you couldn&apos;t use the approach of:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^]/[&amp;amp;]/g; s/\\^/\\\\^/g&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;to escape &lt;code&gt;\\&lt;/code&gt; by enclosing it in &lt;code&gt;[]&lt;/code&gt; because then &lt;code&gt;\\x&lt;/code&gt; would become &lt;code&gt;[\\][x]&lt;/code&gt; which means &lt;code&gt;\\ or ] or [ or x&lt;/code&gt;. Instead you&apos;d need:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;sed &lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^\\\\]/[&amp;amp;]/g; s/\\^/\\\\^/g; s/\\\\/\\\\\\\\/g&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;So while &lt;code&gt;[\\]&lt;/code&gt; is probably OK for all current sed implementations, we know that &lt;code&gt;\\\\&lt;/code&gt; will work for all sed, awk, perl, etc. implementations and so use that form of escaping.&lt;/p&gt;\n    ","\n&lt;p&gt;It should be noted that the regular expression used in some answers above among &lt;a href=&quot;https://stackoverflow.com/a/29626460/6646161&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/a/29613573/6646161&quot;&gt;that one&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;s/[^^\\\\]/[&amp;amp;]/g; s/\\^/\\\\^/g; s/\\\\/\\\\\\\\/g&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;seems to be wrong:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Doing first &lt;code&gt;s/\\^/\\\\^/g&lt;/code&gt; followed by &lt;code&gt;s/\\\\/\\\\\\\\/g&lt;/code&gt; is an error, as any &lt;code&gt;^&lt;/code&gt; escaped first to &lt;code&gt;\\^&lt;/code&gt; will then have its &lt;code&gt;\\&lt;/code&gt; escaped again.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;A better way seems to be: &lt;code&gt;&apos;s/[^\\^]/[&amp;amp;]/g; s/[\\^]/\\\\&amp;amp;/g;&apos;&lt;/code&gt;.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[^^\\\\]&lt;/code&gt; with sed (BRE/ERE) should be just &lt;code&gt;[^\\^]&lt;/code&gt; (or &lt;code&gt;[^^\\]&lt;/code&gt;). &lt;code&gt;\\&lt;/code&gt; has no special meaning inside a bracket expression and needs not to be quoted.&lt;/li&gt;\n&lt;/ul&gt;\n    "],"564":["\n&lt;p&gt;By using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.aspx&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;SqlCommand&lt;/code&gt;&lt;/a&gt; and its &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.parameters.aspx&quot; rel=&quot;noreferrer&quot;&gt;child collection of parameters&lt;/a&gt; all the pain of checking for sql injection is taken away from you and will be handled by these classes.&lt;/p&gt;\n\n&lt;p&gt;Here is an example, taken from one of the articles above:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UpdateDemographics&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Int32 customerID,\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; demoXml, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; connectionString&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Update the demographics for a store, which is stored  &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// in an xml column.  &lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; commandText = &lt;span class=&quot;hljs-string&quot;&gt;&quot;UPDATE Sales.Store SET Demographics = @demographics &quot;&lt;/span&gt;\n        + &lt;span class=&quot;hljs-string&quot;&gt;&quot;WHERE CustomerID = @ID;&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (SqlConnection connection = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlConnection(connectionString))\n    {\n        SqlCommand command = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SqlCommand(commandText, connection);\n        command.Parameters.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;@ID&quot;&lt;/span&gt;, SqlDbType.Int);\n        command.Parameters[&lt;span class=&quot;hljs-string&quot;&gt;&quot;@ID&quot;&lt;/span&gt;].Value = customerID;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Use AddWithValue to assign Demographics. &lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// SQL Server will implicitly convert strings into XML.&lt;/span&gt;\n        command.Parameters.AddWithValue(&lt;span class=&quot;hljs-string&quot;&gt;&quot;@demographics&quot;&lt;/span&gt;, demoXml);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n        {\n            connection.Open();\n            Int32 rowsAffected = command.ExecuteNonQuery();\n            Console.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;RowsAffected: {0}&quot;&lt;/span&gt;, rowsAffected);\n        }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My answer is quite easy:&lt;/p&gt;\n\n&lt;p&gt;Use Entity Framework for communication between C# and your SQL database. That will make parameterized SQL strings that isn&apos;t vulnerable to SQL injection.&lt;/p&gt;\n\n&lt;p&gt;As a bonus, it&apos;s very easy to work with as well.&lt;/p&gt;\n    ","\n&lt;p&gt;SQL injection can be a tricky problem but there are ways around it.  Your risk is reduced your risk simply by using an ORM like Linq2Entities, Linq2SQL, NHibrenate.  However you can have SQL injection problems even with them.&lt;/p&gt;\n\n&lt;p&gt;The main thing with SQL injection is user controlled input (as is with XSS).  In the most simple example if you have a login form (I hope you never have one that just does this) that takes a username and password.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; + username + &quot;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;AND&lt;/span&gt; password &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; + password + &quot;&apos;&lt;/span&gt;&quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If a user were to input the following for the username &lt;strong&gt;Admin&apos; --&lt;/strong&gt; the SQL Statement would look like this when executing against the database.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; Users &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; Username &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Admin&apos;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;--&apos; AND password = &apos;&apos;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In this simple case using a paramaterized query (which is what an ORM does) would remove your risk.  You also have a the issue of a lesser known SQL injection attack vector and that&apos;s with stored procedures.  In this case even if you use a paramaterized query or an ORM you would still have a SQL injection problem.  Stored procedures can contain execute commands, and those commands themselves may be suceptable to SQL injection attacks.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PROCEDURE&lt;/span&gt; SP_GetLogin &lt;span class=&quot;hljs-variable&quot;&gt;@username&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;), &lt;span class=&quot;hljs-variable&quot;&gt;@password&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;AS&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; nvarchar(&lt;span class=&quot;hljs-number&quot;&gt;4000&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos; SELECT * FROM users&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;\n              &lt;span class=&quot;hljs-string&quot;&gt;&apos; FROM Product Where username = &apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@username&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; AND password = &apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;@password&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;&apos;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; sp_executesql &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So this example would have the same SQL injection problem as the previous one even if you use paramaterized queries or an ORM. And although the example seems silly you&apos;d be surprised as to how often something like this is written.&lt;/p&gt;\n\n&lt;p&gt;My recommendations would be to use an ORM to immediately reduce your chances of having a SQL injection problem, and then learn to spot code and stored procedures which can have the problem and work to fix them. I don&apos;t recommend using ADO.NET (SqlClient, SqlCommand etc...) directly unless you have to, not because it&apos;s somehow not safe to use it with parameters but because it&apos;s that much easier to get lazy and just start writing a SQL query using strings and just ignoring the parameters.  ORMS do a great job of forcing you to use parameters because it&apos;s just what they do.  &lt;/p&gt;\n\n&lt;p&gt;Next Visit the OWASP site on SQL injection &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection&quot; rel=&quot;noreferrer&quot;&gt;https://www.owasp.org/index.php/SQL_Injection&lt;/a&gt; and  use the SQL injection cheat sheet to make sure you can spot and take out any issues that will arise in your code.  &lt;a href=&quot;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&quot; rel=&quot;noreferrer&quot;&gt;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&lt;/a&gt;  finally I would say put in place a good code review between you and other developers at your company where you can review each others code for things like SQL injection and XSS. A lot of times programmers miss this stuff because they&apos;re trying to rush out some feature and don&apos;t spend too much time on reviewing their code.  &lt;/p&gt;\n    ","\n&lt;p&gt;SQL injection should not be prevented by trying to validate your input; instead, that input should be properly escaped before being passed to the database.&lt;/p&gt;\n\n&lt;p&gt;How to escape input totally depends on what technology you are using to interface with the database. In most cases and unless you are writing bare SQL (which you should avoid as hard as you can) it will be taken care of automatically by the framework so you get bulletproof protection for free.&lt;/p&gt;\n\n&lt;p&gt;You should explore this question further after you have decided exactly what your interfacing technology will be.&lt;/p&gt;\n    "],"565":["\n&lt;p&gt;Data is loaded from Firebase asynchronously. Since it may take some time to get the data from the server, the main Android code continues and Firebase calls your &lt;code&gt;onDataChange&lt;/code&gt; when the data is available.&lt;/p&gt;\n&lt;p&gt;This means that by the time you &lt;code&gt;return mContactsFromFirebase&lt;/code&gt; it is still empty. The easiest way to see this is by placing a few log statements:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Before attaching listener&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title class_&quot;&gt;FirebaseDatabase&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;getReference&lt;/span&gt;().&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Users&quot;&lt;/span&gt;)\n    .&lt;span class=&quot;hljs-title function_&quot;&gt;addListenerForSingleValueEvent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueEventListener&lt;/span&gt;() {\n      &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onDataChange&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DataSnapshot dataSnapshot&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;In onDataChange&quot;&lt;/span&gt;);\n      }\n      &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n      &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCancelled&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DatabaseError databaseError&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; databaseError.&lt;span class=&quot;hljs-title function_&quot;&gt;toException&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// don&apos;t ignore errors&lt;/span&gt;\n      }\n    });\n&lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;After attaching listener&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you run this code, it will print:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Before attaching listener&lt;/p&gt;\n&lt;p&gt;After attaching listener&lt;/p&gt;\n&lt;p&gt;In onDataChange&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;That is probably not the order that you expected the output in. As you can see the line &lt;em&gt;after&lt;/em&gt; the callback gets called before &lt;code&gt;onDataChange&lt;/code&gt;. That explains why the list you return is empty, or (more correctly) it is empty when you return it and only gets filled later.&lt;/p&gt;\n&lt;p&gt;There are a few ways of dealing with this asynchronous loading.&lt;/p&gt;\n&lt;p&gt;The simplest to explain is to put all code that returns the list &lt;em&gt;into&lt;/em&gt; the &lt;code&gt;onDataChange&lt;/code&gt; method. That means that this code is only execute after the data has been loaded. In its simplest form:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onDataChange&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DataSnapshot dataSnapshot&lt;/span&gt;)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (DataSnapshot snapshot : dataSnapshot.getChildren()) {\n        Users user = snapshot.getValue(Users.&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;);\n        assert user != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        String contact_found = user.getPhone_number();\n        mContactsFromFirebase.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(contact_found);\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loaded &quot;&lt;/span&gt;+mContactsFromFirebase.size()+&lt;span class=&quot;hljs-string&quot;&gt;&quot; contacts&quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;p&gt;But there are more approaches including using a custom callback (similar to Firebase&apos;s own &lt;code&gt;ValueEventListener&lt;/code&gt;):&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserListCallback&lt;/span&gt; {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;Users&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserListCallback&lt;/span&gt; &lt;/span&gt;{\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onCallback&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(value:&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Users&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now you can pass in an implementation of this interface to your &lt;code&gt;getContactsFromFirebase&lt;/code&gt; method:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getContactsFromFirebase&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;final UserListCallback myCallback&lt;/span&gt;) {\n  databaseReference.&lt;span class=&quot;hljs-title function_&quot;&gt;child&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;users/%s/name&quot;&lt;/span&gt;, uid)).&lt;span class=&quot;hljs-title function_&quot;&gt;addListenerForSingleValueEvent&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ValueEventListener&lt;/span&gt;() {\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onDataChange&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DataSnapshot dataSnapshot&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-title class_&quot;&gt;DataSnapshot&lt;/span&gt; snapshot : dataSnapshot.&lt;span class=&quot;hljs-title function_&quot;&gt;getChildren&lt;/span&gt;()) {\n        &lt;span class=&quot;hljs-title class_&quot;&gt;Users&lt;/span&gt; user = snapshot.&lt;span class=&quot;hljs-title function_&quot;&gt;getValue&lt;/span&gt;(&lt;span class=&quot;hljs-title class_&quot;&gt;Users&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;class&lt;/span&gt;);\n        assert user != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt; contact_found = user.&lt;span class=&quot;hljs-title function_&quot;&gt;getPhone_number&lt;/span&gt;();\n        mContactsFromFirebase.&lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;(contact_found);\n        &lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loaded &quot;&lt;/span&gt;+mContactsFromFirebase.&lt;span class=&quot;hljs-title function_&quot;&gt;size&lt;/span&gt;()+&lt;span class=&quot;hljs-string&quot;&gt;&quot; contacts&quot;&lt;/span&gt;);\n      }\n      myCallback.&lt;span class=&quot;hljs-title function_&quot;&gt;onCallback&lt;/span&gt;(mContactsFromFirebase);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCancelled&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;DatabaseError databaseError&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; databaseError.&lt;span class=&quot;hljs-title function_&quot;&gt;toException&lt;/span&gt;();\n    }\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getContactsFromFirebase&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(myCallback:&lt;span class=&quot;hljs-type&quot;&gt;UserListCallback&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n  databaseReference.child(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;users/%s/name&quot;&lt;/span&gt;, uid)).addListenerForSingleValueEvent(&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;:ValueEventListener() {\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onDataChange&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(dataSnapshot:&lt;span class=&quot;hljs-type&quot;&gt;DataSnapshot&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (snapshot &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dataSnapshot.getChildren())\n      {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; user = snapshot.getValue(Users::&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.java)\n        assert(user != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; contact_found = user.getPhone_number()\n        mContactsFromFirebase.add(contact_found)\n        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loaded &quot;&lt;/span&gt; + mContactsFromFirebase.size() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; contacts&quot;&lt;/span&gt;)\n      }\n      myCallback.onCallback(mContactsFromFirebase)\n    }\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onCancelled&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(databaseError:&lt;span class=&quot;hljs-type&quot;&gt;DatabaseError&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; databaseError.toException()\n    }\n  })\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;And then call it like this:&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-typescript&quot;&gt;&lt;span class=&quot;hljs-title function_&quot;&gt;getContactsFromFirebase&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UserListCallback&lt;/span&gt;() {\n  &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onCallback&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;Users&amp;gt; users&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title class_&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loaded &quot;&lt;/span&gt;+users.&lt;span class=&quot;hljs-title function_&quot;&gt;size&lt;/span&gt;()+&lt;span class=&quot;hljs-string&quot;&gt;&quot; contacts&quot;&lt;/span&gt;)\n  }\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-kotlin&quot;&gt;getContactsFromFirebase(&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt;:UserListCallback() {\n  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;onCallback&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(users:&lt;span class=&quot;hljs-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Users&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt; {\n    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Loaded &quot;&lt;/span&gt; + users.size() + &lt;span class=&quot;hljs-string&quot;&gt;&quot; contacts&quot;&lt;/span&gt;)\n  }\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s not as simple as when data is loaded synchronously, but this has the advantage that it runs without blocking your main thread.&lt;/p&gt;\n&lt;p&gt;This topic has been discussed &lt;em&gt;a lot&lt;/em&gt; before, so I recommend you check out some of these questions too:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;this &lt;a href=&quot;https://medium.com/google-developers/why-are-firebase-apis-asynchronous-callbacks-promises-tasks-e037a6654a93&quot; rel=&quot;noreferrer&quot;&gt;blog post from Doug&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/33203379/setting-singleton-property-value-in-firebase-listener&quot;&gt;Setting Singleton property value in Firebase Listener&lt;/a&gt; (where I explained how in some cases you &lt;em&gt;can&lt;/em&gt; get synchronous data loading, but usually can&apos;t)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29345638/return-an-object-android/29373963#29373963&quot;&gt;return an object Android&lt;/a&gt; (the first time I used the log statements to explain what&apos;s going on)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31700830/is-it-possible-to-synchronously-load-data-from-firebase&quot;&gt;Is it possible to synchronously load data from Firebase?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/38188683&quot;&gt;https://stackoverflow.com/a/38188683&lt;/a&gt; (where Doug shows a cool-but-complex way of using the &lt;code&gt;Task&lt;/code&gt; API with Firebase Database)&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/47847694/how-to-return-datasnapshot-value-as-a-result-of-a-method&quot;&gt;How to return DataSnapshot value as a result of a method?&lt;/a&gt; (from where I borrowed some of the callback syntax)&lt;/li&gt;\n&lt;/ul&gt;\n    "]},"page":"10","randomQuestions":[{"title":"What are the rules about using an underscore in a C++ identifier?","slug":"what-are-the-rules-about-using-an-underscore-in-a-c++-identifier-1657384557197"},{"title":"How does the Java 'for each' loop work?","slug":"how-does-the-java-'for-each'-loop-work-1657388423749"},{"title":"Query based on multiple where clauses in Firebase","slug":"query-based-on-multiple-where-clauses-in-firebase-1657387494547"},{"title":"Importing files from different folder","slug":"importing-files-from-different-folder-1657388203798"},{"title":"How do I convert an existing callback API to promises?","slug":"how-do-i-convert-an-existing-callback-api-to-promises-1657384694006"},{"title":"How to evaluate a math expression given in string form?","slug":"how-to-evaluate-a-math-expression-given-in-string-form-1657387797852"},{"title":"How to filter Pandas dataframe using 'in' and 'not in' like in SQL","slug":"how-to-filter-pandas-dataframe-using-'in'-and-'not-in'-like-in-sql-1657387371355"},{"title":"UnboundLocalError on local variable when reassigned after first use","slug":"unboundlocalerror-on-local-variable-when-reassigned-after-first-use-1657387685248"},{"title":"Test for existence of nested JavaScript object key","slug":"test-for-existence-of-nested-javascript-object-key-1657387935411"},{"title":"RegEx match open tags except XHTML self-contained tags","slug":"regex-match-open-tags-except-xhtml-self-contained-tags-1657384228245"},{"title":"How do I clone a list so that it doesn't change unexpectedly after assignment?","slug":"how-do-i-clone-a-list-so-that-it-doesn't-change-unexpectedly-after-assignment-1657384423195"},{"title":"How can I make Bootstrap columns all the same height?","slug":"how-can-i-make-bootstrap-columns-all-the-same-height-1657388551403"},{"title":"The Definitive C++ Book Guide and List","slug":"the-definitive-c++-book-guide-and-list-1657384247395"},{"title":"\"is\" operator behaves unexpectedly with integers","slug":"\"is\"-operator-behaves-unexpectedly-with-integers-1657387563823"},{"title":"Why is 24.0000 not equal to 24.0000 in MATLAB?","slug":"why-is-24.0000-not-equal-to-24.0000-in-matlab-1657388376753"},{"title":"How do I set, clear, and toggle a single bit?","slug":"how-do-i-set-clear-and-toggle-a-single-bit-1657388227052"},{"title":"Can I mix MySQL APIs in PHP?","slug":"can-i-mix-mysql-apis-in-php-1657384597444"},{"title":"Secure hash and salt for PHP passwords","slug":"secure-hash-and-salt-for-php-passwords-1657387363258"},{"title":"Creating multiline strings in JavaScript","slug":"creating-multiline-strings-in-javascript-1657388025414"},{"title":"How to find the 'sizeof' (a pointer pointing to an array)?","slug":"how-to-find-the-'sizeof'-(a-pointer-pointing-to-an-array)-1657387354284"}]},"__N_SSG":true}