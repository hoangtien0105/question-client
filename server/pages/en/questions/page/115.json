{"pageProps":{"data":{"count":610,"rows":[{"id":40,"title":"What causes a java.lang.ArrayIndexOutOfBoundsException and how do I prevent it?","slug":"what-causes-a-java.lang.arrayindexoutofboundsexception-and-how-do-i-prevent-it-1657384370848","postType":"QUESTION","createdAt":"2022-07-09T16:32:50.000Z","updatedAt":"2022-07-09T16:32:50.000Z","tags":[{"id":145,"name":"exception","slug":"exception","createdAt":"2022-07-09T16:32:50.000Z","updatedAt":"2022-07-09T16:32:50.000Z","Questions_Tags":{"questionId":40,"tagId":145}},{"id":146,"name":"arrayindexoutofboundsexception","slug":"arrayindexoutofboundsexception","createdAt":"2022-07-09T16:32:50.000Z","updatedAt":"2022-07-09T16:32:50.000Z","Questions_Tags":{"questionId":40,"tagId":146}}]},{"id":39,"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349","postType":"QUESTION","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","tags":[{"id":139,"name":"while-loop","slug":"while-loop","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","Questions_Tags":{"questionId":39,"tagId":139}},{"id":140,"name":"eof","slug":"eof","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","Questions_Tags":{"questionId":39,"tagId":140}},{"id":141,"name":"file","slug":"file","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","Questions_Tags":{"questionId":39,"tagId":141}},{"id":142,"name":"feof","slug":"feof","createdAt":"2022-07-09T16:32:47.000Z","updatedAt":"2022-07-09T16:32:47.000Z","Questions_Tags":{"questionId":39,"tagId":142}}]},{"id":38,"title":"SQL injection that gets around mysql_real_escape_string()","slug":"sql-injection-that-gets-around-mysql_real_escape_string()-1657384364747","postType":"QUESTION","createdAt":"2022-07-09T16:32:44.000Z","updatedAt":"2022-07-09T16:32:44.000Z","tags":[]},{"id":37,"title":"How to deal with mysqli problems? mysqli_fetch_array(): Argument #1 must be of type mysqli_result","slug":"how-to-deal-with-mysqli-problems-mysqli_fetch_array():-argument-1-must-be-of-type-mysqli_result-1657384360922","postType":"QUESTION","createdAt":"2022-07-09T16:32:40.000Z","updatedAt":"2022-07-09T16:32:40.000Z","tags":[{"id":131,"name":"mysqli","slug":"mysqli","createdAt":"2022-07-09T16:32:40.000Z","updatedAt":"2022-07-09T16:32:40.000Z","Questions_Tags":{"questionId":37,"tagId":131}},{"id":132,"name":"error-reporting","slug":"error-reporting","createdAt":"2022-07-09T16:32:40.000Z","updatedAt":"2022-07-09T16:32:40.000Z","Questions_Tags":{"questionId":37,"tagId":132}}]},{"id":36,"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504","postType":"QUESTION","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","tags":[{"id":126,"name":"if-statement","slug":"if-statement","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":126}},{"id":127,"name":"comparison","slug":"comparison","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":127}},{"id":128,"name":"match","slug":"match","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":128}},{"id":129,"name":"boolean-logic","slug":"boolean-logic","createdAt":"2022-07-09T16:32:38.000Z","updatedAt":"2022-07-09T16:32:38.000Z","Questions_Tags":{"questionId":36,"tagId":129}}]}]},"answers":{"36":["\n&lt;p&gt;You misunderstand how boolean expressions work; they don&apos;t work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are otherwise evaluated on their own (&lt;code&gt;False&lt;/code&gt; if &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt; otherwise).&lt;/p&gt;\n&lt;p&gt;You can shorten that using a containment test against &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences&quot; rel=&quot;noreferrer&quot;&gt;a tuple&lt;/a&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z):\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or better still:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;using &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#sets&quot; rel=&quot;noreferrer&quot;&gt;a &lt;code&gt;set&lt;/code&gt;&lt;/a&gt; to take advantage of the constant-cost membership test (i.e. &lt;code&gt;in&lt;/code&gt; takes a fixed amount of time whatever the left-hand operand is).&lt;/p&gt;\n&lt;h3&gt;Explanation&lt;/h3&gt;\n&lt;p&gt;When you use &lt;code&gt;or&lt;/code&gt;, python sees each side of the operator as &lt;em&gt;separate&lt;/em&gt; expressions. The expression &lt;code&gt;x or y == 1&lt;/code&gt; is treated as first a boolean test for &lt;code&gt;x&lt;/code&gt;, then if that is False, the expression &lt;code&gt;y == 1&lt;/code&gt; is tested.&lt;/p&gt;\n&lt;p&gt;This is due to &lt;a href=&quot;http://docs.python.org/3/reference/expressions.html#operator-precedence&quot; rel=&quot;noreferrer&quot;&gt;operator precedence&lt;/a&gt;. The &lt;code&gt;or&lt;/code&gt; operator has a lower precedence than the &lt;code&gt;==&lt;/code&gt; test, so the latter is evaluated &lt;em&gt;first&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;However, even if this were &lt;em&gt;not&lt;/em&gt; the case, and the expression &lt;code&gt;x or y or z == 1&lt;/code&gt; was actually interpreted as &lt;code&gt;(x or y or z) == 1&lt;/code&gt; instead, this would still not do what you expect it to do.&lt;/p&gt;\n&lt;p&gt;&lt;code&gt;x or y or z&lt;/code&gt; would evaluate to the first argument that is &apos;truthy&apos;, e.g. not &lt;code&gt;False&lt;/code&gt;, numeric 0 or empty (see &lt;a href=&quot;http://docs.python.org/3/reference/expressions.html#boolean-operations&quot; rel=&quot;noreferrer&quot;&gt;boolean expressions&lt;/a&gt; for details on what Python considers false in a boolean context).&lt;/p&gt;\n&lt;p&gt;So for the values &lt;code&gt;x = 2; y = 1; z = 0&lt;/code&gt;, &lt;code&gt;x or y or z&lt;/code&gt; would resolve to &lt;code&gt;2&lt;/code&gt;, because that is the first true-like value in the arguments. Then &lt;code&gt;2 == 1&lt;/code&gt; would be &lt;code&gt;False&lt;/code&gt;, even though &lt;code&gt;y == 1&lt;/code&gt; would be &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;The same would apply to the inverse; testing multiple values against a single variable; &lt;code&gt;x == 1 or 2 or 3&lt;/code&gt; would fail for the same reasons. Use &lt;code&gt;x == 1 or x == 2 or x == 3&lt;/code&gt; or &lt;code&gt;x in {1, 2, 3}&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Your problem is more easily addressed with a dictionary structure like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nd = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}\nmylist = [d[k] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [x, y, z]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As stated by Martijn Pieters, the correct, and fastest, format is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using his advice you would now have separate if-statements so that Python will read each statement whether the former were &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Such as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will work, but &lt;em&gt;if&lt;/em&gt; you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a for-loop:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;num_to_letters = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; num_to_letters:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}:\n        mylist.append(num_to_letters[number])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The direct way to write &lt;code&gt;x or y or z == 0&lt;/code&gt; is&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;((&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; value: value == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;), (x,y,z))):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;# write your logic.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I dont think, you like it. :)\nAnd this way is ugly.&lt;/p&gt;\n\n&lt;p&gt;The other way (a better) is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;BTW lots of &lt;code&gt;if&lt;/code&gt;s could be written as something like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_cases = {\n    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: Mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: Mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-comment&quot;&gt;# ..&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_cases:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n        my_cases[key]()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you ARE very very lazy, you can put the values inside an array. Such as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = []\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(x)\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(y)\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(z)\nnums = [add numbers here]\nletters = [add corresponding letters here]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(nums)):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; obj &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; obj == num[index]:\n            MyList.append(letters[index])\n            &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can also put the numbers and letters in a dictionary and do it, but this is probably a LOT more complicated than simply if statements. That&apos;s what you get for trying to be extra lazy :)&lt;/p&gt;\n\n&lt;p&gt;One more thing, your &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will compile, but not in the way you want it to. When you simply put a variable in an if statement (example)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the program will check if the variable is not null. Another way to write the above statement (which makes more sense) is &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt;(b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Bool is an inbuilt function in python which basically does the command of verifying a boolean statement (If you don&apos;t know what that is, it is what you are trying to make in your if statement right now :))&lt;/p&gt;\n\n&lt;p&gt;Another lazy way I found is :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;([x==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, y==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, z==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To check if a value is contained within a set of variables you can use the inbuilt modules           &lt;code&gt;itertools&lt;/code&gt; and &lt;code&gt;operator&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example:&lt;/p&gt;\n\n&lt;p&gt;Imports:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; repeat\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; contains\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Declare variables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Create mapping of values (in the order you want to check):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;check_values = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use &lt;code&gt;itertools&lt;/code&gt; to allow repetition of the variables:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;check_vars = repeat((x, y, z))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finally, use the &lt;code&gt;map&lt;/code&gt; function to create an iterator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;checker = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(contains, check_vars, check_values)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, when checking for the values (in the original order), use &lt;code&gt;next()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(checker)  &lt;span class=&quot;hljs-comment&quot;&gt;# Checks for 0&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do something&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(checker)  &lt;span class=&quot;hljs-comment&quot;&gt;# Checks for 1&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Do something&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;etc...&lt;/p&gt;\n\n&lt;p&gt;This has an advantage over the &lt;code&gt;lambda x: x in (variables)&lt;/code&gt; because &lt;code&gt;operator&lt;/code&gt; is an inbuilt module and is faster and more efficient than using &lt;code&gt;lambda&lt;/code&gt; which has to create a custom in-place function.&lt;/p&gt;\n\n&lt;p&gt;Another option for checking if there is a non-zero (or False) value in a list:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; (x &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Equivalent:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;all&lt;/span&gt;((x, y, z))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Set is the good approach here, because it orders the variables, what seems to be your goal here. &lt;code&gt;{z,y,x}&lt;/code&gt; is &lt;code&gt;{0,1,3}&lt;/code&gt; whatever the order of the parameters.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;cdef&quot;&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {z,x,y}]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way, the whole solution is O(n).&lt;/p&gt;\n    ","\n&lt;p&gt;I think this will handle it better:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;my_dict = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;validate&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, z&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ele &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [x, y, z]:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ele &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_dict.keys():\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; my_dict[ele]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; validate(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\nc\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; validate(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; validate(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\ne\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you want to use if, else statements following is another solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;myList = []\naList = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; l &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; aList:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; l==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(myList)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;All of the excellent answers provided here concentrate on the specific requirement of the original poster and concentrate on the &lt;code&gt;if 1 in {x,y,z}&lt;/code&gt; solution put forward by Martijn Pieters.&lt;br&gt;\nWhat they ignore is the broader implication of the question:&lt;br&gt;\n&lt;strong&gt;How do I test one variable against multiple values?&lt;/strong&gt;&lt;br&gt;\nThe solution provided will not work for partial hits if using strings for example:&lt;br&gt;\nTest if the string &quot;Wild&quot; is in multiple values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild things&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = &lt;span class=&quot;hljs-string&quot;&gt;&quot;throttle it back&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;in the beginning&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {x, y, z}: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild things&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;y = &lt;span class=&quot;hljs-string&quot;&gt;&quot;throttle it back&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;z = &lt;span class=&quot;hljs-string&quot;&gt;&quot;in the beginning&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [x, y, z]: &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;for this scenario it&apos;s easiest to convert to a string&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[x, y, z]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Wild things&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;throttle it back&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;in the beginning&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;{x, y, z}\n{&lt;span class=&quot;hljs-string&quot;&gt;&apos;in the beginning&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;throttle it back&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Wild things&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;([x, y, z]): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Wild&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;({x, y, z}): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It should be noted however, as mentioned by &lt;code&gt;@codeforester&lt;/code&gt;, that word boundries are lost with this method, as in:    &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;x=[&lt;span class=&quot;hljs-string&quot;&gt;&apos;Wild things&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;throttle it back&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;in the beginning&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;rot&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(x): &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the 3 letters &lt;code&gt;rot&lt;/code&gt; do exist in combination in the list but not as an individual word. Testing for &quot; rot &quot; would fail but if one of the list items were &quot;rot in hell&quot;, that would fail as well.&lt;br&gt;\nThe upshot being, be careful with your search criteria if using this method and be aware that it does have this limitation.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}\nx, y, z = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; [v &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (k,v) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x==k &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==k &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==k]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This code may be helpful&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L ={x, y, z}\nT= ((&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;),(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;),)\nList2=[]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; T :\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; t[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; L :\n    List2.append(t[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can try the method shown below. In this method, you will have the freedom to specify/input the number of variables that you wish to enter.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mydict = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;}\nmylist= []\n\nnum_var = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;How many variables? &quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;#Enter 3 when asked for input.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(num_var): \n    &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; Enter 0 as first input, 1 as second input and 3 as third input.&apos;&apos;&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;var&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;).zfill(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)] = &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;(raw_input(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Enter an integer between 0 and 3 &quot;&lt;/span&gt;))\n    mylist += mydict[&lt;span class=&quot;hljs-built_in&quot;&gt;globals&lt;/span&gt;()[&lt;span class=&quot;hljs-string&quot;&gt;&apos;var&apos;&lt;/span&gt;+&lt;span class=&quot;hljs-built_in&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;i&apos;&lt;/span&gt;).zfill(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; mylist\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;One line solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [{&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;cdef&apos;&lt;/span&gt;[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Maybe you need direct formula for output bits set.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; equivalent to x*y*z = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\nx=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; equivalent to (x-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(y-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)*(z-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n\nx=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; equivalent to (x-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)*(y-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)*(z-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&apos;s map to bits: &lt;code&gt;&apos;c&apos;:1 &apos;d&apos;:0xb10 &apos;e&apos;:0xb100 &apos;f&apos;:0xb1000&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Relation of isc (is &apos;c&apos;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; xyz=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; then isc=&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; isc=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Use math if formula &lt;a href=&quot;https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&amp;amp;t=315&quot; rel=&quot;noreferrer&quot;&gt;https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&amp;amp;t=315&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;[c]: &lt;code&gt;(xyz=0 and isc=1) or (((xyz=0 and isc=1) or (isc=0)) and (isc=0))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;[d]: &lt;code&gt;((x-1)(y-1)(z-1)=0 and isc=2) or (((xyz=0 and isd=2) or (isc=0)) and (isc=0))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;...&lt;/p&gt;\n\n&lt;p&gt;Connect these formulas by following logic:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;logic &lt;code&gt;and&lt;/code&gt; is the sum of squares of equations&lt;/li&gt;\n&lt;li&gt;logic &lt;code&gt;or&lt;/code&gt; is the product of equations&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;and you&apos;ll have a total equation\nexpress sum and you have total formula of sum&lt;/p&gt;\n\n&lt;p&gt;then sum&amp;amp;1 is c, sum&amp;amp;2 is d, sum&amp;amp;4 is e, sum&amp;amp;5 is f&lt;/p&gt;\n\n&lt;p&gt;After this you may form predefined array where index of string elements would correspond to ready string.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;array[sum]&lt;/code&gt; gives you the string.&lt;/p&gt;\n    ","\n&lt;p&gt;The most pythonic way of representing your pseudo-code in Python would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nmylist = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(v == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z)):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It can be done easily as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [var1,var2,var3]:\n     li.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;targetValue&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To test multiple variables with one single value: &lt;code&gt;if 1 in {a,b,c}:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;To test multiple values with one variable: &lt;code&gt;if a in {1, 2, 3}:&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Looks like you&apos;re building some kind of Caesar cipher.&lt;/p&gt;\n\n&lt;p&gt;A much more generalized approach is this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;input_values = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)\norigo = &lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n[&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(val + origo) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; inputs]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;outputs&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not sure if it&apos;s a desired side effect of your code, but the order of your output will always be sorted.&lt;/p&gt;\n\n&lt;p&gt;If this is what you want, the final line can be changed to:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;([&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(val + origo) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; inputs])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can use dictionary :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;=[]\n&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt; = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[x])\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; y &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[y])\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; z &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.append(&lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;[z])\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Without dict, try this solution:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x, y, z = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;    \noffset = &lt;span class=&quot;hljs-built_in&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n[&lt;span class=&quot;hljs-built_in&quot;&gt;chr&lt;/span&gt;(i + offset) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and gives:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will help you.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_fun&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;val&lt;/span&gt;):\n    x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n    y = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    z = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n    myList = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; val == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n        myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;C&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; val == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n        myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;D&quot;&lt;/span&gt;)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; val &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; val == &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n        myList.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;E&quot;&lt;/span&gt;)\n\ntest_fun(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can unite this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;in one variable.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]: xyz = (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,) \nIn [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]: mylist = []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Change our conditions as:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz: \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;) \n    ...: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz: \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;) \n    ...: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz: \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;) \n    ...: &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; xyz:  \n    ...:     mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;In [&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: mylist                                                                                \nOut[&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;]: [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;you can develop it through two ways&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareVariables&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y,z&lt;/span&gt;):\n        mylist = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  x==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z==&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:\n            mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrong input value!&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;first:&apos;&lt;/span&gt;,mylist)\n\n        compareVariables(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;compareVariables&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x,y,z&lt;/span&gt;):\n        mylist = []\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z):\n             mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n             &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;wrong input value!&quot;&lt;/span&gt;)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;second:&apos;&lt;/span&gt;,mylist)\n\n        compareVariables(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The &lt;code&gt;or&lt;/code&gt; does not work like that, as &lt;a href=&quot;https://stackoverflow.com/a/20002504/918959&quot;&gt;explained by this answer&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;While the generic answer would be use&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z):\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;this is not the best one for the &lt;em&gt;specific&lt;/em&gt; problem. In your case you&apos;re doing &lt;em&gt;repeated tests&lt;/em&gt;, therefore it is worthwhile to compose a &lt;em&gt;set&lt;/em&gt; of these variables:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;values = {x, y, z}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values:\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;We can simplify this using a dictionary - this will result in the same values:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mappings = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, ...}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mappings:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; values:\n        mylist.append(mappings[k])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Or if the ordering of the &lt;code&gt;mylist&lt;/code&gt; is arbitrary, you can loop over the &lt;em&gt;values&lt;/em&gt; instead and match them to the mappings:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mappings = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;, ...}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x, y, z):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; mappings:\n        mylist.append(mappings[v])\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;h3&gt;Problem&lt;/h3&gt;\n\n&lt;p&gt;While the pattern for testing multiple values&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is very readable and is working in many situation, there is one pitfall:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;}\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But we want to have&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Solution&lt;/h3&gt;\n\n&lt;p&gt;One generalization of the previous expression is based on the answer from &lt;a href=&quot;https://stackoverflow.com/a/30430962/5599281&quot;&gt;ytpillai&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;])\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which can be written as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;))\n&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While this expression returns the right result it is not as readable as the first expression :-(&lt;/p&gt;\n    ","\n&lt;p&gt;Here is one more way to do it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ny = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nmylist = []\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;(i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt;[x,y,z]):\n    mylist.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It is a mix of &lt;strong&gt;list comprehension&lt;/strong&gt; and &lt;strong&gt;any&lt;/strong&gt; keyword.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;usage without if example:&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x,y,z = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\nvalues = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;f&quot;&lt;/span&gt;} &lt;span class=&quot;hljs-comment&quot;&gt;# =&amp;gt; as if usage&lt;/span&gt;\nmy_list = [values[i] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (x,y,z)]\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(my_list)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;FIRST, A CORRECTION TO THE &lt;code&gt;OR&lt;/code&gt; CONDITIONAL:&lt;/p&gt;\n&lt;p&gt;You need to say:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The reason is that &quot;or&quot; splits up the condition into separate logical parts. The way your original statement was written, those parts were:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x\ny\nz == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;   // &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; depending on the &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; statement\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The last part was fine --- checking to see if z == 0, for instance --- but the first two parts just said essentially &lt;code&gt;if x&lt;/code&gt; and &lt;code&gt;if y&lt;/code&gt;. Since integers always evaluate to &lt;code&gt;True&lt;/code&gt; unless they&apos;re 0, that means the first part of your condition was always &lt;code&gt;True&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; didn&apos;t equal 0 (which in the case of y was always, since you had &lt;code&gt;y = 1&lt;/code&gt;, causing your whole condition (because of how &lt;code&gt;OR&lt;/code&gt; works) to always be &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;To avoid that, you need to make sure all parts of your condition (each side of the &lt;code&gt;OR&lt;/code&gt;) make sense on their own (you can do that by pretending that the other side(s) of the &lt;code&gt;OR&lt;/code&gt; statement doesn&apos;t exist). That&apos;s how you can confirm whether or not your &lt;code&gt;OR&lt;/code&gt; condition is correctly defined.&lt;/p&gt;\n&lt;p&gt;You would write the statements individually like so:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;which means the correct mergin with the &lt;code&gt;OR&lt;/code&gt; keyword would be:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;SECOND, HOW TO SOLVE THE PROBLEM:&lt;/p&gt;\n&lt;p&gt;You&apos;re basically wanting to check to see if any of the variables match a given integer and if so, assign it a letter that matches it in a one-to-one mapping. You want to do that for a certain list of integers so that the output is a list of letters. You&apos;d do that like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, z&lt;/span&gt;):\n\n    result = []\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; integer, letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;]):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == integer:\n            result.append(letter)\n            \n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result\n        \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Similarly, you could use LIST COMPREHENSION to achieve the same result faster:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;x, y, z&lt;/span&gt;):\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [ \n                letter \n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; integer, letter &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;zip&lt;/span&gt;([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;])\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; y == integer &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; z == integer\n           ]\n    \n    \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#selection&lt;/span&gt;\n: a=np.array([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])                                                                                                                                                 \n\n&lt;span class=&quot;hljs-comment&quot;&gt;#list of options[sel,sel]&lt;/span&gt;\n: np.diag([&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;e&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;])[a,a]                                                                                                                                     \n\n array([&lt;span class=&quot;hljs-string&quot;&gt;&apos;c&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;d&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;], dtype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;U1&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n    "],"37":["\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n&lt;ol&gt;\n&lt;li&gt;Always have &lt;code&gt;mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);&lt;/code&gt; in your mysqli connection code &lt;em&gt;and always check the PHP errors&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Always replace every PHP variable in the SQL query with a question mark, and execute the query using &lt;a href=&quot;https://phpdelusions.net/mysqli_examples/prepared_select&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;prepared statement&lt;/strong&gt;&lt;/a&gt;. It will help to avoid syntax errors of all sorts.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;Explanation&lt;/h3&gt;\n&lt;p&gt;Sometimes your MySQLi code produces an error like &lt;code&gt;mysqli_fetch_assoc() expects parameter 1 to be mysqli_result, boolean given...&lt;/code&gt;, &lt;code&gt;Call to a member function bind_param()...&lt;/code&gt; or similar. Or even without any error, but the query doesn&apos;t work all the same. It means that your query failed to execute.&lt;/p&gt;\n&lt;p&gt;Every time a query fails, MySQL has &lt;strong&gt;an error message that explains the reason&lt;/strong&gt;. In the older PHP versions such errors weren&apos;t transferred to PHP, and all you&apos;d get is a cryptic error message mentioned above. Hence it is very important to configure PHP and MySQLi to report MySQL errors to you. And once you get the error message, fixing it will be a piece of cake.&lt;/p&gt;\n&lt;h3&gt;How to get the error message in MySQLi&lt;/h3&gt;\n&lt;p&gt;First of all, always have this line before MySQLi connect in &lt;strong&gt;all&lt;/strong&gt; your environments:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysqli_report&lt;/span&gt;(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;After that, all MySQL errors will be transferred into PHP exceptions. An uncaught exception, in turn, makes a PHP fatal error. Thus, in case of a MySQL error, you&apos;ll get a conventional PHP error. That will instantly make you aware of the error cause. And the stack trace will lead you to the exact spot where the error occurred.&lt;/p&gt;\n&lt;h3&gt;How to get the error message from PHP&lt;/h3&gt;\n&lt;p&gt;Here is a gist of my article on &lt;a href=&quot;https://phpdelusions.net/articles/error_reporting&quot; rel=&quot;nofollow noreferrer&quot;&gt;PHP error reporting&lt;/a&gt;:\nReporting errors on a development and live servers must be different. On the development server it is convenient to have errors shown on-screen, but on a live server error messages must be logged instead, so you could find them in the error log later.&lt;/p&gt;\n&lt;p&gt;Therefore, you must set corresponding configuration options to the following values:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;On a development server&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;error_reporting&lt;/code&gt; should be set to &lt;code&gt;E_ALL&lt;/code&gt; value;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;log_errors&lt;/code&gt; should be set to 1 (it is convenient to have logs on a development PC too)&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;display_errors&lt;/code&gt; should be set to 1&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;On a production server&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;error_reporting&lt;/code&gt; should be set to &lt;code&gt;E_ALL&lt;/code&gt; value;&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;log_errors&lt;/code&gt; should be set to 1&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;display_errors&lt;/code&gt; should be set to 0&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;After that, when MySQL query fails, you will get a PHP error that explains the reason. On a live server, in order to get the error message, you&apos;ll have to check the error log.&lt;/p&gt;\n&lt;h3&gt;How to actually use it&lt;/h3&gt;\n&lt;p&gt;&lt;strong&gt;Just remove any code that checks for the error manually&lt;/strong&gt;, all those &lt;code&gt;or die()&lt;/code&gt;, &lt;code&gt;if ($result)&lt;/code&gt;, &lt;code&gt;try..catch&lt;/code&gt; and such. Simply write your database interaction code right away:&lt;/p&gt;\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;con-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO table(name, quantity) VALUES (?,?)&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bind_param&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;si&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$name&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$quantity&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Again, &lt;strong&gt;without any conditions around&lt;/strong&gt;. If an error occurs, it will be treated like any other error in your code. For example, on a development PC it will just appear on-screen, while on a live site it will be logged for the programmer, whereas for the user&apos;s convenience you could use an error handler (but that&apos;s a different story which is off topic for MySQLi, but you may read about it in the article linked above).&lt;/p&gt;\n&lt;h3&gt;What to do with the error message you get&lt;/h3&gt;\n&lt;p&gt;First of all you have to locate the problem query. The error message contains &lt;em&gt;the file name and the line number&lt;/em&gt; of the exact spot where the error occurred. For the simple code that&apos;s enough, but if your code is using functions or classes you may need to follow the &lt;em&gt;stack trace&lt;/em&gt; to locate the problem query.&lt;/p&gt;\n&lt;p&gt;After getting the error message, you have to read and comprehend it. It sounds too obvious if not condescending, but learners often overlook the fact that the error message is not just an alarm signal, but it actually contains a &lt;em&gt;detailed explanation of the problem&lt;/em&gt;. And all you need is to read the error message and fix the issue.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Say, if it says that a particular table doesn&apos;t exist, you have to check spelling, typos, and letter case. Also you have to make sure that your PHP script connects to a correct database&lt;/li&gt;\n&lt;li&gt;Or, if it says there is an error in the SQL syntax, then you have to examine your SQL. And the problem spot is right &lt;strong&gt;before&lt;/strong&gt; the query part cited in the error message.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;If you don&apos;t understand the error message, try to google it. And when browsing the results, stick to answers that &lt;em&gt;explain&lt;/em&gt; the error rather than bluntly give the solution. A solution may not work in your particular case, but the explanation will help you to understand the problem and make you able to fix the issue by yourself.&lt;/p&gt;\n&lt;p&gt;You have to also &lt;em&gt;trust&lt;/em&gt; the error message. If it says that number of tokens doesn&apos;t match the number of bound variables then it &lt;em&gt;is&lt;/em&gt; so. The same goes for the absent tables or columns. Given the choice, whether it&apos;s your own mistake or the error message is wrong, always stick to the former. Again it sounds condescending, but hundreds of questions on this very site prove this advise extremely useful.&lt;/p&gt;\n&lt;h3&gt;A list of things you should never ever do in regard of error reporting&lt;/h3&gt;\n&lt;ul&gt;\n&lt;li&gt;Never use an error suppression operator (&lt;code&gt;@&lt;/code&gt;)! It makes a programmer  unable read the error message and therefore unable to fix the error&lt;/li&gt;\n&lt;li&gt;Do not use &lt;code&gt;die()&lt;/code&gt; or &lt;code&gt;echo&lt;/code&gt; or any other function to print the error message on the screen unconditionally. PHP can report errors by itself and do it the right way depends on the environment - so just leave it for PHP.&lt;/li&gt;\n&lt;li&gt;Do not add a condition to test the query result manually (like &lt;code&gt;if($result)&lt;/code&gt;). With error exceptions enabled such condition will just be useless.&lt;/li&gt;\n&lt;li&gt;Do not use the &lt;code&gt;try..catch&lt;/code&gt; operator for echoing the error message. This operator should be used to perform some error handling, like a transaction rollback. But never use it just to report errors - as we learned above, PHP can already do it, the right way.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; &lt;br&gt;\nSometimes there is no error, but no results either. Then it means, &lt;em&gt;there is no data in the database to match your criteria&lt;/em&gt;. In this case you have to admit this fact, even if you can swear the data and the criteria are all right. They are not. You have to check them again.&lt;/p&gt;\n&lt;p&gt;I&apos;ve got an article that can help in this matter, &lt;em&gt;&lt;a href=&quot;https://phpdelusions.net/pdo/mcve&quot; rel=&quot;nofollow noreferrer&quot;&gt;How to debug database interactions&lt;/a&gt;&lt;/em&gt;. Although it is written for PDO, the principle is the same. Just follow those instructions step by step and either have your problem solved or have an answerable question for Stack Overflow.&lt;/p&gt;\n    "],"38":["\n&lt;p&gt;The short answer is &lt;strong&gt;yes, yes there is a way to get around &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;&lt;/strong&gt;.\n#For Very OBSCURE EDGE CASES!!!&lt;/p&gt;\n&lt;p&gt;The long answer isn&apos;t so easy. It&apos;s based off an attack &lt;a href=&quot;http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string&quot; rel=&quot;noreferrer&quot;&gt;demonstrated here&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;The Attack&lt;/h1&gt;\n&lt;p&gt;So, let&apos;s start off by showing the attack...&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;mysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES gbk&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;);\nmysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test WHERE name = &apos;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&apos; LIMIT 1&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In certain circumstances, that will return more than 1 row. Let&apos;s dissect what&apos;s going on here:&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Selecting a Character Set&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-scss&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;mysql_query&lt;/span&gt;(&apos;SET NAMES gbk&apos;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For this attack to work, we need the encoding that the server&apos;s expecting on the connection both to encode &lt;code&gt;&apos;&lt;/code&gt; as in ASCII i.e. &lt;code&gt;0x27&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; to have some character whose final byte is an ASCII &lt;code&gt;\\&lt;/code&gt; i.e. &lt;code&gt;0x5c&lt;/code&gt;.  As it turns out, there are 5 such encodings supported in MySQL 5.6 by default: &lt;code&gt;big5&lt;/code&gt;, &lt;code&gt;cp932&lt;/code&gt;, &lt;code&gt;gb2312&lt;/code&gt;, &lt;code&gt;gbk&lt;/code&gt; and &lt;code&gt;sjis&lt;/code&gt;.  We&apos;ll select &lt;code&gt;gbk&lt;/code&gt; here.&lt;/p&gt;\n&lt;p&gt;Now, it&apos;s very important to note the use of &lt;code&gt;SET NAMES&lt;/code&gt; here. This sets the character set &lt;strong&gt;ON THE SERVER&lt;/strong&gt;. If we used the call to the C API function &lt;code&gt;mysql_set_charset()&lt;/code&gt;, we&apos;d be fine (on MySQL releases since 2006). But more on why in a minute...&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Payload&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The payload we&apos;re going to use for this injection starts with the byte sequence &lt;code&gt;0xbf27&lt;/code&gt;.  In &lt;code&gt;gbk&lt;/code&gt;, that&apos;s an invalid multibyte character; in &lt;code&gt;latin1&lt;/code&gt;, it&apos;s the string &lt;code&gt;¿&apos;&lt;/code&gt;.  Note that in &lt;code&gt;latin1&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;gbk&lt;/code&gt;, &lt;code&gt;0x27&lt;/code&gt; on its own is a literal &lt;code&gt;&apos;&lt;/code&gt; character.&lt;/p&gt;\n&lt;p&gt;We have chosen this payload because, if we called &lt;code&gt;addslashes()&lt;/code&gt; on it, we&apos;d insert an ASCII &lt;code&gt;\\&lt;/code&gt; i.e. &lt;code&gt;0x5c&lt;/code&gt;, before the &lt;code&gt;&apos;&lt;/code&gt; character. So we&apos;d wind up with &lt;code&gt;0xbf5c27&lt;/code&gt;, which in &lt;code&gt;gbk&lt;/code&gt; is a two character sequence: &lt;code&gt;0xbf5c&lt;/code&gt; followed by &lt;code&gt;0x27&lt;/code&gt;. Or in other words, a &lt;em&gt;valid&lt;/em&gt; character followed by an unescaped &lt;code&gt;&apos;&lt;/code&gt;. But we&apos;re not using &lt;code&gt;addslashes()&lt;/code&gt;. So on to the next step...&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;mysql_real_escape_string()&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;The C API call to &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; differs from &lt;code&gt;addslashes()&lt;/code&gt; in that it knows the connection character set. So it can perform the escaping properly for the character set that the server is expecting. However, up to this point, the client thinks that we&apos;re still using &lt;code&gt;latin1&lt;/code&gt; for the connection, because we never told it otherwise. We did tell the &lt;em&gt;server&lt;/em&gt; we&apos;re using &lt;code&gt;gbk&lt;/code&gt;, but the &lt;em&gt;client&lt;/em&gt; still thinks it&apos;s &lt;code&gt;latin1&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Therefore the call to &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; inserts the backslash, and we have a free hanging &lt;code&gt;&apos;&lt;/code&gt; character in our &quot;escaped&quot; content! In fact, if we were to look at &lt;code&gt;$var&lt;/code&gt; in the &lt;code&gt;gbk&lt;/code&gt; character set, we&apos;d see:&lt;/p&gt;\n&lt;pre&gt;&apos; OR 1=1 /*&lt;/pre&gt;\n&lt;p&gt;Which is &lt;a href=&quot;https://www.google.com/search?q=%E7%B8%97%27%20OR&amp;amp;oq=%E7%B8%97%27%20OR&amp;amp;aqs=chrome..69i57&amp;amp;sourceid=chrome&amp;amp;es_sm=122&amp;amp;ie=UTF-8&quot; rel=&quot;noreferrer&quot;&gt;exactly what&lt;/a&gt; the attack requires.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Query&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;This part is just a formality, but here&apos;s the rendered query:&lt;/p&gt;\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/*&apos; LIMIT 1\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n&lt;p&gt;Congratulations, you just successfully attacked a program using &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;...&lt;/p&gt;\n&lt;h1&gt;The Bad&lt;/h1&gt;\n&lt;p&gt;It gets worse. &lt;code&gt;PDO&lt;/code&gt; defaults to &lt;em&gt;emulating&lt;/em&gt; prepared statements with MySQL. That means that on the client side, it basically does a sprintf through &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; (in the C library), which means the following will result in a successful injection:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES gbk&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Now, it&apos;s worth noting that you can prevent this by disabling emulated prepared statements:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_EMULATE_PREPARES&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This will &lt;em&gt;usually&lt;/em&gt; result in a true prepared statement (i.e. the data being sent over in a separate packet from the query). However, be aware that PDO will silently &lt;a href=&quot;https://github.com/php/php-src/blob/master/ext/pdo_mysql/mysql_driver.c#L210&quot; rel=&quot;noreferrer&quot;&gt;fallback&lt;/a&gt; to emulating statements that MySQL can&apos;t prepare natively: those that it can are &lt;a href=&quot;https://dev.mysql.com/doc/en/sql-prepared-statements.html#prepared-statements-permitted&quot; rel=&quot;noreferrer&quot;&gt;listed&lt;/a&gt; in the manual, but beware to select the appropriate server version).&lt;/p&gt;\n&lt;h1&gt;The Ugly&lt;/h1&gt;\n&lt;p&gt;I said at the very beginning that we could have prevented all of this if we had used &lt;code&gt;mysql_set_charset(&apos;gbk&apos;)&lt;/code&gt; instead of &lt;code&gt;SET NAMES gbk&lt;/code&gt;. And that&apos;s true provided you are using a MySQL release since 2006.&lt;/p&gt;\n&lt;p&gt;If you&apos;re using an earlier MySQL release, then a &lt;a href=&quot;http://bugs.mysql.com/bug.php?id=8378&quot; rel=&quot;noreferrer&quot;&gt;bug&lt;/a&gt; in &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; meant that invalid multibyte characters such as those in our payload were treated as single bytes for escaping purposes &lt;em&gt;even if the client had been correctly informed of the connection encoding&lt;/em&gt; and so this attack would still succeed.  The bug was fixed in MySQL &lt;a href=&quot;http://dev.mysql.com/doc/refman/4.1/en/news-4-1-20.html&quot; rel=&quot;noreferrer&quot;&gt;4.1.20&lt;/a&gt;, &lt;a href=&quot;http://dev.mysql.com/doc/relnotes/mysql/5.0/en/news-5-0-22.html&quot; rel=&quot;noreferrer&quot;&gt;5.0.22&lt;/a&gt; and &lt;a href=&quot;http://dev.mysql.com/doc/relnotes/mysql/5.1/en/news-5-1-11.html&quot; rel=&quot;noreferrer&quot;&gt;5.1.11&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;But the worst part is that &lt;code&gt;PDO&lt;/code&gt; didn&apos;t expose the C API for &lt;code&gt;mysql_set_charset()&lt;/code&gt; until 5.3.6, so in prior versions it &lt;strong&gt;cannot&lt;/strong&gt; prevent this attack for every possible command!\nIt&apos;s now exposed as a &lt;a href=&quot;http://www.php.net/manual/en/ref.pdo-mysql.connection.php&quot; rel=&quot;noreferrer&quot;&gt;DSN parameter&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;The Saving Grace&lt;/h1&gt;\n&lt;p&gt;As we said at the outset, for this attack to work the database connection must be encoded using a vulnerable character set.  &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-unicode-utf8mb4.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;utf8mb4&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not vulnerable&lt;/em&gt; and yet can support &lt;em&gt;every&lt;/em&gt; Unicode character: so you could elect to use that insteadbut it has only been available since MySQL 5.5.3.  An alternative is &lt;a href=&quot;http://dev.mysql.com/doc/en/charset-unicode-utf8.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt;, which is also &lt;em&gt;not vulnerable&lt;/em&gt; and can support the whole of the Unicode &lt;a href=&quot;http://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane&quot; rel=&quot;noreferrer&quot;&gt;Basic Multilingual Plane&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Alternatively, you can enable the &lt;a href=&quot;http://dev.mysql.com/doc/en/sql-mode.html#sqlmode_no_backslash_escapes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;&lt;/a&gt; SQL mode, which (amongst other things) alters the operation of &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;.  With this mode enabled, &lt;code&gt;0x27&lt;/code&gt; will be replaced with &lt;code&gt;0x2727&lt;/code&gt; rather than &lt;code&gt;0x5c27&lt;/code&gt; and thus the escaping process &lt;em&gt;cannot&lt;/em&gt; create valid characters in any of the vulnerable encodings where they did not exist previously (i.e. &lt;code&gt;0xbf27&lt;/code&gt; is still &lt;code&gt;0xbf27&lt;/code&gt; etc.)so the server will still reject the string as invalid.  However, see &lt;a href=&quot;https://stackoverflow.com/a/23277864/623041&quot;&gt;@eggyal&apos;s answer&lt;/a&gt; for a different vulnerability that can arise from using this SQL mode.&lt;/p&gt;\n&lt;h1&gt;Safe Examples&lt;/h1&gt;\n&lt;p&gt;The following examples are safe:&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;mysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES utf8&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;);\nmysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test WHERE name = &apos;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&apos; LIMIT 1&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because the server&apos;s expecting &lt;code&gt;utf8&lt;/code&gt;...&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;mysql_set_charset(&lt;span class=&quot;hljs-string&quot;&gt;&apos;gbk&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;);\nmysql_query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test WHERE name = &apos;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;&apos; LIMIT 1&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because we&apos;ve properly set the character set so the client and the server match.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;setAttribute&lt;/span&gt;(PDO::&lt;span class=&quot;hljs-variable constant_&quot;&gt;ATTR_EMULATE_PREPARES&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES gbk&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because we&apos;ve turned off emulated prepared statements.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;PDO&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;mysql:host=localhost;dbname=testdb;charset=gbk&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$user&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$password&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because we&apos;ve set the character set properly.&lt;/p&gt;\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;query(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET NAMES gbk&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;prepare(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$param&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xbf\\x27 OR 1=1 /*&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;bind_param(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$param&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;execute();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because MySQLi does true prepared statements all the time.&lt;/p&gt;\n&lt;h1&gt;Wrapping Up&lt;/h1&gt;\n&lt;p&gt;If you:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Use Modern Versions of MySQL (late 5.1, all 5.5, 5.6, etc) &lt;strong&gt;AND&lt;/strong&gt; &lt;code&gt;mysql_set_charset()&lt;/code&gt; / &lt;code&gt;$mysqli-&amp;gt;set_charset()&lt;/code&gt; / PDO&apos;s DSN charset parameter (in PHP  5.3.6)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Don&apos;t use a vulnerable character set for connection encoding (you only use &lt;code&gt;utf8&lt;/code&gt; / &lt;code&gt;latin1&lt;/code&gt; / &lt;code&gt;ascii&lt;/code&gt; / etc)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You&apos;re 100% safe.&lt;/p&gt;\n&lt;p&gt;Otherwise, you&apos;re vulnerable &lt;strong&gt;even though you&apos;re using &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;&lt;/strong&gt;...&lt;/p&gt;\n    ","\n&lt;p&gt;Consider the following query:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$iId&lt;/span&gt; = mysql_real_escape_string(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 OR 1=1&quot;&lt;/span&gt;);    \n&lt;span class=&quot;hljs-variable&quot;&gt;$sSql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table WHERE id = &lt;span class=&quot;hljs-variable&quot;&gt;$iId&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;mysql_real_escape_string()&lt;/code&gt; will not protect you against this.\n&lt;strong&gt;The fact that you use single quotes (&lt;code&gt;&apos; &apos;&lt;/code&gt;) around your variables inside your query is what protects you against this.&lt;/strong&gt; The following is also an option:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$iId&lt;/span&gt; = (&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 OR 1=1&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$sSql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM table WHERE id = &lt;span class=&quot;hljs-subst&quot;&gt;$iId&lt;/span&gt;&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n\n\n&lt;blockquote&gt;\n  &lt;h1&gt;TL;DR&lt;/h1&gt;\n  \n  &lt;p&gt;&lt;code&gt;mysql_real_escape_string()&lt;/code&gt; will &lt;strong&gt;provide no protection whatsoever&lt;/strong&gt; (and could furthermore munge your data) if:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;MySQL&apos;s &lt;a href=&quot;http://dev.mysql.com/doc/en/sql-mode.html#sqlmode_no_backslash_escapes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;&lt;/a&gt; SQL mode is enabled (which it &lt;em&gt;might&lt;/em&gt; be, unless you &lt;em&gt;explicitly&lt;/em&gt; select another SQL mode &lt;em&gt;every time you connect&lt;/em&gt;); and&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;your SQL string literals are quoted using double-quote &lt;code&gt;&quot;&lt;/code&gt; characters.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;p&gt;This was filed as &lt;a href=&quot;http://bugs.mysql.com/bug.php?id=72458&quot; rel=&quot;noreferrer&quot;&gt;bug #72458&lt;/a&gt; and has been fixed in MySQL v5.7.6 (see the section headed &quot;&lt;strong&gt;The Saving Grace&lt;/strong&gt;&quot;, below).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;This is another, (perhaps less?) obscure EDGE CASE!!!&lt;/h1&gt;\n\n&lt;p&gt;In homage to &lt;a href=&quot;https://stackoverflow.com/a/12118602&quot;&gt;@ircmaxell&apos;s excellent answer&lt;/a&gt; (really, this is supposed to be flattery and not plagiarism!), I will adopt his format:&lt;/p&gt;\n\n&lt;h2&gt;The Attack&lt;/h2&gt;\n\n&lt;p&gt;Starting off with a demonstration...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET SQL_MODE=&quot;NO_BACKSLASH_ESCAPES&quot;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// could already be set&lt;/span&gt;\n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; OR 1=1 -- &apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = &quot;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; LIMIT 1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This will return all records from the &lt;code&gt;test&lt;/code&gt; table.  A dissection:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Selecting an SQL Mode&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SET SQL_MODE=&quot;NO_BACKSLASH_ESCAPES&quot;&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As documented under &lt;a href=&quot;http://dev.mysql.com/doc/en/string-literals.html&quot; rel=&quot;noreferrer&quot;&gt;String Literals&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;There are several ways to include quote characters within a string:&lt;/p&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;A &lt;code&gt;&apos;&lt;/code&gt; inside a string quoted with &lt;code&gt;&apos;&lt;/code&gt; may be written as &lt;code&gt;&apos;&apos;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;A &lt;code&gt;&quot;&lt;/code&gt; inside a string quoted with &lt;code&gt;&quot;&lt;/code&gt; may be written as &lt;code&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;Precede the quote character by an escape character (&lt;code&gt;\\&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;A &lt;code&gt;&apos;&lt;/code&gt; inside a string quoted with &lt;code&gt;&quot;&lt;/code&gt; needs no special treatment and need not be doubled or escaped. In the same way, &lt;code&gt;&quot;&lt;/code&gt; inside a string quoted with &lt;code&gt;&apos;&lt;/code&gt; needs no special treatment.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If the server&apos;s SQL mode includes &lt;a href=&quot;http://dev.mysql.com/doc/en/sql-mode.html#sqlmode_no_backslash_escapes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;&lt;/a&gt;, then the third of these optionswhich is the usual approach adopted by &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;is not available: one of the first two options must be used instead.  Note that the effect of the fourth bullet is that one must necessarily know the character that will be used to quote the literal in order to avoid munging one&apos;s data.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Payload&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot; OR 1=1 -- \n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The payload initiates this injection quite literally with the &lt;code&gt;&quot;&lt;/code&gt; character.  No particular encoding.  No special characters.  No weird bytes.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;mysql_real_escape_string()&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; OR 1=1 -- &apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Fortunately, &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; does check the SQL mode and adjust its behaviour accordingly.  See &lt;a href=&quot;http://bazaar.launchpad.net/~mysql/libmysql/1.0/view/head:/libmysql/libmysql.c#L1267&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;libmysql.c&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;ulong STDCALL\n&lt;span class=&quot;hljs-title function_&quot;&gt;mysql_real_escape_string&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(MYSQL *mysql, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *to,&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *from,\n             ulong length)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (mysql-&amp;gt;server_status &amp;amp; SERVER_STATUS_NO_BACKSLASH_ESCAPES)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; escape_quotes_for_mysql(mysql-&amp;gt;charset, to, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, from, length);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; escape_string_for_mysql(mysql-&amp;gt;charset, to, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, from, length);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thus a different underlying function, &lt;code&gt;escape_quotes_for_mysql()&lt;/code&gt;, is invoked if the &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt; SQL mode is in use.  As mentioned above, such a function needs to know which character will be used to quote the literal in order to repeat it without causing the other quotation character from being repeated literally.&lt;/p&gt;\n\n&lt;p&gt;However, this function arbitrarily &lt;em&gt;assumes&lt;/em&gt; that the string will be quoted using the single-quote &lt;code&gt;&apos;&lt;/code&gt; character.  See &lt;a href=&quot;http://bazaar.launchpad.net/~mysql/libmysql/1.0/view/head:/mysys/charset.c#L836&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;charset.c&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/*\n  Escape apostrophes by doubling them up\n\n// [ deletia 839-845 ]\n\n  DESCRIPTION\n    This escapes the contents of a string by doubling up any apostrophes that\n    it contains. This is used when the NO_BACKSLASH_ESCAPES SQL_MODE is in\n    effect on the server.\n\n// [ deletia 852-858 ]\n*/&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;escape_quotes_for_mysql&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(CHARSET_INFO *charset_info,\n                               &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *to, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; to_length,\n                               &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *from, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; length)&lt;/span&gt;\n{\n&lt;span class=&quot;hljs-comment&quot;&gt;// [ deletia 865-892 ]&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (*from == &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;)\n    {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (to + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &amp;gt; to_end)\n      {\n        overflow= TRUE;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n      }\n      *to++= &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;;\n      *to++= &lt;span class=&quot;hljs-string&quot;&gt;&apos;\\&apos;&apos;&lt;/span&gt;;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, it leaves double-quote &lt;code&gt;&quot;&lt;/code&gt; characters untouched (and doubles all single-quote &lt;code&gt;&apos;&lt;/code&gt; characters) &lt;em&gt;irrespective of the actual character that is used to quote the literal&lt;/em&gt;!  In our case &lt;code&gt;$var&lt;/code&gt; remains exactly the same as the argument that was provided to &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;it&apos;s as though no escaping has taken place &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Query&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = &quot;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; LIMIT 1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Something of a formality, the rendered query is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; test &lt;span class=&quot;hljs-keyword&quot;&gt;WHERE&lt;/span&gt; name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &quot;&quot; &lt;span class=&quot;hljs-keyword&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- &quot; LIMIT 1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;As my learned friend put it: congratulations, you just successfully attacked a program using &lt;code&gt;mysql_real_escape_string()&lt;/code&gt;...&lt;/p&gt;\n\n&lt;h2&gt;The Bad&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.php.net/manual/en/function.mysql-set-charset.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_set_charset()&lt;/code&gt;&lt;/a&gt; cannot help, as this has nothing to do with character sets; nor can &lt;a href=&quot;http://www.php.net/manual/en/mysqli.real-escape-string.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysqli::real_escape_string()&lt;/code&gt;&lt;/a&gt;, since that&apos;s just a different wrapper around this same function.&lt;/p&gt;\n\n&lt;p&gt;The problem, if not already obvious, is that the call to &lt;code&gt;mysql_real_escape_string()&lt;/code&gt; &lt;strong&gt;cannot know&lt;/strong&gt; with which character the literal will be quoted, as that&apos;s left to the developer to decide at a later time.  So, in &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt; mode, there is literally &lt;em&gt;no way&lt;/em&gt; that this function can safely escape every input for use with arbitrary quoting (at least, not without doubling characters that do not require doubling and thus munging your data).&lt;/p&gt;\n\n&lt;h2&gt;The Ugly&lt;/h2&gt;\n\n&lt;p&gt;It gets worse.  &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt; may not be all that uncommon in the wild owing to the necessity of its use for compatibility with standard SQL (e.g. see section 5.3 of the &lt;a href=&quot;http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt&quot; rel=&quot;noreferrer&quot;&gt;SQL-92 specification&lt;/a&gt;, namely the &lt;code&gt;&amp;lt;quote symbol&amp;gt; ::= &amp;lt;quote&amp;gt;&amp;lt;quote&amp;gt;&lt;/code&gt; grammar production and lack of any special meaning given to backslash).  Furthermore, its use was explicitly &lt;a href=&quot;http://dev.mysql.com/doc/relnotes/mysql/5.1/en/news-5-1-11.html&quot; rel=&quot;noreferrer&quot;&gt;recommended as a workaround&lt;/a&gt; to the (long since fixed) &lt;a href=&quot;http://bugs.mysql.com/bug.php?id=8378&quot; rel=&quot;noreferrer&quot;&gt;bug&lt;/a&gt; that ircmaxell&apos;s post describes.  Who knows, some DBAs might even configure it to be on by default as means of discouraging use of incorrect escaping methods like &lt;a href=&quot;http://www.php.net/manual/en/function.addslashes.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;addslashes()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also, the &lt;a href=&quot;http://dev.mysql.com/doc/en/sql-mode.html#sql-mode-setting&quot; rel=&quot;noreferrer&quot;&gt;SQL mode of a new connection&lt;/a&gt; is set by the server according to its configuration (which a &lt;code&gt;SUPER&lt;/code&gt; user can change at any time); thus, to be certain of the server&apos;s behaviour, you must &lt;em&gt;always&lt;/em&gt; explicitly specify your desired mode after connecting.&lt;/p&gt;\n\n&lt;h2&gt;The Saving Grace&lt;/h2&gt;\n\n&lt;p&gt;So long as you always &lt;em&gt;explicitly&lt;/em&gt; set the SQL mode not to include &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;, or quote MySQL string literals using the single-quote character, this bug cannot rear its ugly head: respectively &lt;code&gt;escape_quotes_for_mysql()&lt;/code&gt; will not be used, or its assumption about which quote characters require repeating will be correct.&lt;/p&gt;\n\n&lt;p&gt;For this reason, I recommend that anyone using &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt; also enables &lt;a href=&quot;http://dev.mysql.com/doc/en/sql-mode.html#sqlmode_ansi_quotes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;ANSI_QUOTES&lt;/code&gt;&lt;/a&gt; mode, as it will force habitual use of single-quoted string literals.  Note that this does not prevent SQL injection in the event that double-quoted literals happen to be usedit merely reduces the likelihood of that happening (because normal, non-malicious queries would fail).&lt;/p&gt;\n\n&lt;p&gt;In PDO, both its equivalent function &lt;a href=&quot;http://www.php.net/manual/en/pdo.quote.php&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;PDO::quote()&lt;/code&gt;&lt;/a&gt; and its prepared statement emulator call upon &lt;a href=&quot;https://github.com/php/php-src/blob/af6c11c5f060870d052a2b765dc634d9e47d0f18/ext/pdo_mysql/mysql_driver.c#L302&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_handle_quoter()&lt;/code&gt;&lt;/a&gt;which does exactly this: it ensures that the escaped literal is quoted in single-quotes, so you can be certain that PDO is always immune from this bug.&lt;/p&gt;\n\n&lt;p&gt;As of MySQL v5.7.6, this bug has been fixed.  See &lt;a href=&quot;http://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-6.html&quot; rel=&quot;noreferrer&quot;&gt;change log&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;h3&gt;Functionality Added or Changed&lt;/h3&gt;\n  \n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Incompatible Change:&lt;/em&gt;&lt;/strong&gt; A new C API function, &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string-quote.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_real_escape_string_quote()&lt;/code&gt;&lt;/a&gt;, has been implemented as a replacement for &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_real_escape_string()&lt;/code&gt;&lt;/a&gt; because the latter function can fail to properly encode characters when the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_no_backslash_escapes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;&lt;/a&gt; SQL mode is enabled. In this case, &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_real_escape_string()&lt;/code&gt;&lt;/a&gt; cannot escape quote characters except by doubling them, and to do this properly, it must know more information about the quoting context than is available. &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string-quote.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_real_escape_string_quote()&lt;/code&gt;&lt;/a&gt; takes an extra argument for specifying the quoting context. For usage details, see &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string-quote.html&quot; rel=&quot;noreferrer&quot;&gt;mysql_real_escape_string_quote()&lt;/a&gt;.&lt;/p&gt;\n  \n  &lt;blockquote&gt;\n    &lt;h3&gt;&amp;nbsp;Note&lt;/h3&gt;\n    \n    &lt;p&gt;Applications should be modified to use &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string-quote.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_real_escape_string_quote()&lt;/code&gt;&lt;/a&gt;, instead of &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysql-real-escape-string.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;mysql_real_escape_string()&lt;/code&gt;&lt;/a&gt;, which now fails and produces an &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/error-messages-client.html#error_cr_insecure_api_err&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;CR_INSECURE_API_ERR&lt;/code&gt;&lt;/a&gt; error if &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_no_backslash_escapes&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;&lt;/a&gt; is enabled.&lt;/p&gt;\n  &lt;/blockquote&gt;\n  \n  &lt;p&gt;References: See also Bug #19211994.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;Safe Examples&lt;/h2&gt;\n\n&lt;p&gt;Taken together with the bug explained by ircmaxell, the following examples are entirely safe (assuming that one is either using MySQL later than 4.1.20, 5.0.22, 5.1.11; or that one is not using a GBK/Big5 connection encoding):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$charset&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SET SQL_MODE=&apos;&apos;&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; OR 1=1 /*&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = &quot;&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;.&lt;span class=&quot;hljs-string&quot;&gt;&apos;&quot; LIMIT 1&apos;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...because we&apos;ve explicitly selected an SQL mode that doesn&apos;t include &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_set_charset&lt;/span&gt;(&lt;span class=&quot;hljs-variable&quot;&gt;$charset&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_real_escape_string&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; OR 1=1 /*&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;mysql_query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test WHERE name = &apos;&lt;span class=&quot;hljs-subst&quot;&gt;$var&lt;/span&gt;&apos; LIMIT 1&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...because we&apos;re quoting our string literal with single-quotes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;([&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; OR 1=1 /*&quot;&lt;/span&gt;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...because PDO prepared statements are immune from this vulnerability (and ircmaxell&apos;s too, provided either that you&apos;re using PHP5.3.6 and the character set has been correctly set in the DSN; or that prepared statement emulation has been disabled).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$var&lt;/span&gt;  = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;quote&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; OR 1=1 /*&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$pdo&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT * FROM test WHERE name = &lt;span class=&quot;hljs-subst&quot;&gt;$var&lt;/span&gt; LIMIT 1&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...because PDO&apos;s &lt;code&gt;quote()&lt;/code&gt; function not only escapes the literal, but also quotes it (in single-quote &lt;code&gt;&apos;&lt;/code&gt; characters); note that to avoid ircmaxell&apos;s bug in this case, you &lt;em&gt;must&lt;/em&gt; be using PHP5.3.6 &lt;em&gt;and&lt;/em&gt; have correctly set the character set in the DSN.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-php s-code-block&quot;&gt;&lt;code class=&quot;hljs language-php&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt; = &lt;span class=&quot;hljs-variable&quot;&gt;$mysqli&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;prepare&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT * FROM test WHERE name = ? LIMIT 1&apos;&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$param&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&apos; OR 1=1 /*&quot;&lt;/span&gt;;\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;bind_param&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;s&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;$param&lt;/span&gt;);\n&lt;span class=&quot;hljs-variable&quot;&gt;$stmt&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-title function_ invoke__&quot;&gt;execute&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...because MySQLi prepared statements are safe.&lt;/p&gt;\n\n&lt;h2&gt;Wrapping Up&lt;/h2&gt;\n\n&lt;p&gt;Thus, if you:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;use native prepared statements&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;use MySQL v5.7.6 or later&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;in &lt;em&gt;addition&lt;/em&gt; to employing one of the solutions in ircmaxell&apos;s summary, use at least one of:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;PDO;&lt;/li&gt;\n&lt;li&gt;single-quoted string literals; or&lt;/li&gt;\n&lt;li&gt;an explicitly set SQL mode that does not include &lt;code&gt;NO_BACKSLASH_ESCAPES&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;...then you &lt;em&gt;should&lt;/em&gt; be completely safe (vulnerabilities outside the scope of string escaping aside).&lt;/p&gt;\n    ","\n&lt;p&gt;Well, there&apos;s nothing really that can pass through that, other than &lt;code&gt;%&lt;/code&gt; wildcard. It could be dangerous if you were using &lt;code&gt;LIKE&lt;/code&gt; statement as attacker could put just &lt;code&gt;%&lt;/code&gt; as login if you don&apos;t filter that out, and would have to just bruteforce a password of any of your users.\nPeople often suggest using prepared statements to make it 100% safe, as data can&apos;t interfere with the query itself that way.\nBut for such simple queries it probably would be more efficient to do something like &lt;code&gt;$login = preg_replace(&apos;/[^a-zA-Z0-9_]/&apos;, &apos;&apos;, $login);&lt;/code&gt;&lt;/p&gt;\n    "],"39":["\n&lt;h3&gt;TL;DR&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;while(!feof)&lt;/code&gt; is wrong because it tests for something that is irrelevant and fails to test for something that you need to know. The result is that you are erroneously executing code that assumes that it is accessing data that was read successfully, when in fact this never happened.&lt;/p&gt;\n&lt;p&gt;I&apos;d like to provide an abstract, high-level perspective. So continue reading if you&apos;re interested in what &lt;code&gt;while(!feof)&lt;/code&gt; actually does.&lt;/p&gt;\n&lt;h3&gt;Concurrency and simultaneity&lt;/h3&gt;\n&lt;p&gt;I/O operations interact with the environment. The environment is not part of your program, and not under your control. The environment truly exists &quot;concurrently&quot; with your program. As with all things concurrent, questions about the &quot;current state&quot; don&apos;t make sense: There is no concept of &quot;simultaneity&quot; across concurrent events. Many properties of state simply don&apos;t &lt;em&gt;exist&lt;/em&gt; concurrently.&lt;/p&gt;\n&lt;p&gt;Let me make this more precise: Suppose you want to ask, &quot;do you have more data&quot;. You could ask this of a concurrent container, or of your I/O system. But the answer is generally unactionable, and thus meaningless. So what if the container says &quot;yes&quot;  by the time you try reading, it may no longer have data. Similarly, if the answer is &quot;no&quot;, by the time you try reading, data may have arrived. The conclusion is that there simply &lt;em&gt;is&lt;/em&gt; no property like &quot;I have data&quot;, since you cannot act meaningfully in response to any possible answer. (The situation is slightly better with buffered input, where you might conceivably get a &quot;yes, I have data&quot; that constitutes some kind of guarantee, but you would still have to be able to deal with the opposite case. And with output the situation is certainly just as bad as I described: you never know if that disk or that network buffer is full.)&lt;/p&gt;\n&lt;p&gt;So we conclude that it is impossible, and in fact un&lt;em&gt;reasonable&lt;/em&gt;, to ask an I/O system whether it &lt;em&gt;will be&lt;/em&gt; able to perform an I/O operation. The only possible way we can interact with it (just as with a concurrent container) is to &lt;em&gt;attempt&lt;/em&gt; the operation and check whether it succeeded or failed. At that moment where you interact with the environment, then and only then can you know whether the interaction was actually possible, and at that point you must commit to performing the interaction. (This is a &quot;synchronisation point&quot;, if you will.)&lt;/p&gt;\n&lt;h3&gt;EOF&lt;/h3&gt;\n&lt;p&gt;Now we get to EOF. EOF is the &lt;em&gt;response&lt;/em&gt; you get from an &lt;em&gt;attempted&lt;/em&gt; I/O operation. It means that you were trying to read or write something, but when doing so you failed to read or write any data, and instead the end of the input or output was encountered. This is true for essentially all the I/O APIs, whether it be the C standard library, C++ iostreams, or other libraries. As long as the I/O operations succeed, you simply &lt;em&gt;cannot know&lt;/em&gt; whether further, future operations will succeed. You &lt;em&gt;must&lt;/em&gt; always first try the operation and then respond to success or failure.&lt;/p&gt;\n&lt;h3&gt;Examples&lt;/h3&gt;\n&lt;p&gt;In each of the examples, note carefully that we &lt;em&gt;first&lt;/em&gt; attempt the I/O operation and &lt;em&gt;then&lt;/em&gt; consume the result if it is valid. Note further that we &lt;em&gt;always&lt;/em&gt; must use the result of the I/O operation, though the result takes different shapes and forms in each example.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;C stdio, read from a file:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (;;) {\n      &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; n = fread(buf, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, bufsize, infile);\n      consume(buf, n);\n      &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;; }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is &lt;code&gt;n&lt;/code&gt;, the number of elements that were read (which may be as little as zero).&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C stdio, &lt;code&gt;scanf&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, b, c; &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d %d %d&quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b, &amp;amp;c) == &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;; ) {\n      consume(a, b, c);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is the return value of &lt;code&gt;scanf&lt;/code&gt;, the number of elements converted.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++, iostreams formatted extraction:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; n; ) {\n      consume(n);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is &lt;code&gt;std::cin&lt;/code&gt; itself, which can be evaluated in a boolean context and tells us whether the stream is still in the &lt;code&gt;good()&lt;/code&gt; state.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++, iostreams getline:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; line; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::getline(&lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;cin&lt;/span&gt;, line); ) {\n      consume(line);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is again &lt;code&gt;std::cin&lt;/code&gt;, just as before.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;POSIX, &lt;code&gt;write(2)&lt;/code&gt; to flush a buffer:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; * p = buf;\n  &lt;span class=&quot;hljs-type&quot;&gt;ssize_t&lt;/span&gt; n = bufsize;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;ssize_t&lt;/span&gt; k = bufsize; (k = write(fd, p, n)) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; p += k, n -= k) {}\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (n != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { &lt;span class=&quot;hljs-comment&quot;&gt;/* error, failed to write complete buffer */&lt;/span&gt; }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we use here is &lt;code&gt;k&lt;/code&gt;, the number of bytes written. The point here is that we can only know how many bytes were written &lt;em&gt;after&lt;/em&gt; the write operation.&lt;/p&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getline()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *buffer = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; bufsiz = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;ssize_t&lt;/span&gt; nbytes;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((nbytes = getline(&amp;amp;buffer, &amp;amp;bufsiz, fp)) != &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;)\n  {\n      &lt;span class=&quot;hljs-comment&quot;&gt;/* Use nbytes of data in buffer */&lt;/span&gt;\n  }\n  &lt;span class=&quot;hljs-built_in&quot;&gt;free&lt;/span&gt;(buffer);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The result we must use is &lt;code&gt;nbytes&lt;/code&gt;, the number of bytes up to and including the newline (or EOF if the file did not end with a newline).&lt;/p&gt;\n&lt;p&gt;Note that the function explicitly returns &lt;code&gt;-1&lt;/code&gt; (and not EOF!) when an error occurs or it reaches EOF.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You may notice that we very rarely spell out the actual word &quot;EOF&quot;. We usually detect the error condition in some other way that is more immediately interesting to us (e.g. failure to perform as much I/O as we had desired). In every example there is some API feature that could tell us explicitly that the EOF state has been encountered, but this is in fact not a terribly useful piece of information. It is much more of a detail than we often care about. What matters is whether the I/O succeeded, more-so than how it failed.&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A final example that actually queries the EOF state: Suppose you have a string and want to test that it represents an integer in its entirety, with no extra bits at the end except whitespace. Using C++ iostreams, it goes like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;  &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; input = &lt;span class=&quot;hljs-string&quot;&gt;&quot;   123   &quot;&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// example&lt;/span&gt;\n\n  &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;hljs-built_in&quot;&gt;istringstream&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(input)&lt;/span&gt;;\n  &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (iss &amp;gt;&amp;gt; value &amp;gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;std&lt;/span&gt;::ws &amp;amp;&amp;amp; iss.get() == EOF) {\n      consume(value);\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n      &lt;span class=&quot;hljs-comment&quot;&gt;// error, &quot;input&quot; is not parsable as an integer&lt;/span&gt;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;We use two results here. The first is &lt;code&gt;iss&lt;/code&gt;, the stream object itself, to check that the formatted extraction to &lt;code&gt;value&lt;/code&gt; succeeded. But then, after also consuming whitespace, we perform another I/O/ operation, &lt;code&gt;iss.get()&lt;/code&gt;, and expect it to fail as EOF, which is the case if the entire string has already been consumed by the formatted extraction.&lt;/p&gt;\n&lt;p&gt;In the C standard library you can achieve something similar with the &lt;code&gt;strto*l&lt;/code&gt; functions by checking that the end pointer has reached the end of the input string.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s wrong because (in the absence of a read error) it enters the loop one more time than the author expects.  If there is a read error, the loop never terminates.&lt;/p&gt;\n&lt;p&gt;Consider the following code:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* WARNING: demonstration of bad coding technique!! */&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\nFILE *&lt;span class=&quot;hljs-title function_&quot;&gt;Fopen&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *path, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *mode)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;\n{\n    FILE *in;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; count;\n\n    in = argc &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; ? Fopen(argv[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;) : &lt;span class=&quot;hljs-built_in&quot;&gt;stdin&lt;/span&gt;;\n    count = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* WARNING: this is a bug */&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;( !feof(in) ) {  &lt;span class=&quot;hljs-comment&quot;&gt;/* This is WRONG! */&lt;/span&gt;\n        fgetc(in);\n        count++;\n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Number of characters read: %u\\n&quot;&lt;/span&gt;, count);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;\n}\n\nFILE * &lt;span class=&quot;hljs-title function_&quot;&gt;Fopen&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *path, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *mode)&lt;/span&gt;\n{\n    FILE *f = fopen(path, mode);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( f == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; ) {\n        perror(path);\n        &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This program will consistently print one greater than the number of characters in the input stream (assuming no read errors).  Consider the case where the input stream is empty:&lt;/p&gt;\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;$ ./a.out &amp;lt; /dev/null\nNumber of characters read: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In this case, &lt;code&gt;feof()&lt;/code&gt; is called before any data has been read, so it returns false.  The loop is entered, &lt;code&gt;fgetc()&lt;/code&gt; is called (and returns &lt;code&gt;EOF&lt;/code&gt;), and count is incremented.  Then &lt;code&gt;feof()&lt;/code&gt; is called and returns true, causing the loop to abort.&lt;/p&gt;\n&lt;p&gt;This happens in all such cases.  &lt;code&gt;feof()&lt;/code&gt; does not return true until &lt;strong&gt;after&lt;/strong&gt; a read on the stream encounters the end of file.  The purpose of &lt;code&gt;feof()&lt;/code&gt; is NOT to check if the next read will reach the end of file.  The purpose of &lt;code&gt;feof()&lt;/code&gt; is to determine the status of a previous read function\nand distinguish between an error condition and the end of the data stream.  If &lt;code&gt;fread()&lt;/code&gt; returns 0, you must use &lt;code&gt;feof&lt;/code&gt;/&lt;code&gt;ferror&lt;/code&gt; to decide whether an error occurred or if all of the data was consumed.  Similarly if &lt;code&gt;fgetc&lt;/code&gt; returns &lt;code&gt;EOF&lt;/code&gt;.  &lt;code&gt;feof()&lt;/code&gt; is only useful &lt;strong&gt;after&lt;/strong&gt; fread has returned zero or &lt;code&gt;fgetc&lt;/code&gt; has returned &lt;code&gt;EOF&lt;/code&gt;.  Before that happens, &lt;code&gt;feof()&lt;/code&gt; will always return 0.&lt;/p&gt;\n&lt;p&gt;It is always necessary to check the return value of a read (either an &lt;code&gt;fread()&lt;/code&gt;, or an &lt;code&gt;fscanf()&lt;/code&gt;, or an &lt;code&gt;fgetc()&lt;/code&gt;) before calling &lt;code&gt;feof()&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Even worse, consider the case where a read error occurs.  In that case, &lt;code&gt;fgetc()&lt;/code&gt; returns &lt;code&gt;EOF&lt;/code&gt;, &lt;code&gt;feof()&lt;/code&gt; returns false, and the loop never terminates.  In all cases where &lt;code&gt;while(!feof(p))&lt;/code&gt; is used, there must be at least a check inside the loop for &lt;code&gt;ferror()&lt;/code&gt;, or at the very least the while condition should be replaced with &lt;code&gt;while(!feof(p) &amp;amp;&amp;amp; !ferror(p))&lt;/code&gt; or there is a very real possibility of an infinite loop, probably spewing all sorts of garbage as invalid data is being processed.&lt;/p&gt;\n&lt;p&gt;So, in summary, although I cannot state with certainty that there is never a situation in which it may be semantically correct to write &quot;&lt;code&gt;while(!feof(f))&lt;/code&gt;&quot; (although there &lt;strong&gt;must&lt;/strong&gt; be another check inside the loop with a break to avoid a infinite loop on a read error), it is the case that it is almost certainly always wrong.  And even if a case ever arose where it would be correct, it is so idiomatically wrong that it would not be the right way to write the code.  Anyone seeing that code should immediately hesitate and say, &quot;that&apos;s a bug&quot;.  And possibly slap the author (unless the author is your boss in which case discretion is advised.)&lt;/p&gt;\n    ","\n&lt;p&gt;No it&apos;s not always wrong. If your loop condition is &quot;while we haven&apos;t tried to read past end of file&quot; then you use &lt;code&gt;while (!feof(f))&lt;/code&gt;. This is however not a common loop condition - usually you want to test for something else (such as &quot;can I read more&quot;). &lt;code&gt;while (!feof(f))&lt;/code&gt; isn&apos;t wrong, it&apos;s just &lt;em&gt;used&lt;/em&gt; wrong.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;feof()&lt;/code&gt; indicates if one has tried to read past the end of file. That means it has little predictive effect: if it is true, you are sure that the next input operation will fail (you aren&apos;t sure the previous one failed BTW), but if it is false, you aren&apos;t sure the next input operation will succeed.  More over, input operations may fail for other reasons than the end of file (a format error for formatted input, a pure IO failure -- disk failure, network timeout -- for all input kinds), so even if you could be predictive about the end of file (and anybody who has tried to implement Ada one, which is predictive, will tell you it can complex if you need to skip spaces, and that it has undesirable effects on interactive devices -- sometimes forcing the input of the next line before starting the handling of the previous one), you would have to be able to handle a failure.&lt;/p&gt;\n\n&lt;p&gt;So the correct idiom in C is to loop with the IO operation success as loop condition, and then test the cause of the failure.  For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (fgets(line, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(line), file)) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;/* note that fgets don&apos;t strip the terminating \\n, checking its\n       presence allow to handle lines longer that sizeof(line), not showed here */&lt;/span&gt;\n    ...\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ferror(file)) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* IO failure */&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (feof(file)) {\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* format error (not possible with fgets, but would be with fscanf) or end of file */&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n   &lt;span class=&quot;hljs-comment&quot;&gt;/* format error (not possible with fgets, but would be with fscanf) */&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;feof()&lt;/code&gt; is not very intuitive. In my very humble opinion, the &lt;code&gt;FILE&lt;/code&gt;&apos;s end-of-file state should be set to &lt;code&gt;true&lt;/code&gt; if any read operation results in the end of file being reached. Instead, you have to manually check if the end of file has been reached after each read operation. For example, something like this will work if reading from a text file using &lt;code&gt;fgetc()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n  FILE *in = fopen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; c = fgetc(in);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (feof(in)) &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, c);\n  }\n\n  fclose(in);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It would be great if something like this would work instead:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;\n{\n  FILE *in = fopen(&lt;span class=&quot;hljs-string&quot;&gt;&quot;testfile.txt&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;r&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(!feof(in)) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%c&quot;&lt;/span&gt;, fgetc(in));\n  }\n\n  fclose(in);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "],"40":["\n&lt;p&gt;Your first port of call should be the &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html&quot; rel=&quot;noreferrer&quot;&gt;documentation&lt;/a&gt; which explains it reasonably clearly:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;boom&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; array[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;]; &lt;span class=&quot;hljs-comment&quot;&gt;// Throws the exception&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As for how to avoid it... um, don&apos;t do that. Be careful with your array indexes.&lt;/p&gt;\n\n&lt;p&gt;One problem people sometimes run into is thinking that arrays are 1-indexed, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-comment&quot;&gt;// ... populate the array here ...&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; index &amp;lt;= array.length; index++)\n{\n    System.out.println(array[index]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That will miss out the first element (index 0) and throw an exception when index is 5. The valid indexes here are 0-4 inclusive. The correct, idiomatic &lt;code&gt;for&lt;/code&gt; statement here would be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; index &amp;lt; array.length; index++)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(That&apos;s assuming you &lt;em&gt;need&lt;/em&gt; the index, of course. If you can use the enhanced for loop instead, do so.)&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || index &amp;gt;= array.length) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Don&apos;t use this index. This is out of bounds (borders, limits, whatever).&lt;/span&gt;\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Yes, you can safely use this index. The index is present in the array.&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; array[index];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;See also:&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;http://download.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html&quot; rel=&quot;noreferrer&quot;&gt;The Java Tutorials - Language Basics - Arrays&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: as per your code snippet, &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=name.length; i++) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The index is inclusive the array&apos;s length. This is out of bounds. You need to replace &lt;code&gt;&amp;lt;=&lt;/code&gt; by &lt;code&gt;&amp;lt;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; name.length; i++) {\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;From this excellent article: &lt;a href=&quot;https://programming.guide/java/arrayindexoutofboundsexception-in-for-loop.html&quot; rel=&quot;noreferrer&quot;&gt;ArrayIndexOutOfBoundsException in for loop&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;To put it briefly:&lt;/p&gt;\n\n&lt;p&gt;In the last iteration of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= name.length; i++) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;i&lt;/code&gt; will equal &lt;code&gt;name.length&lt;/code&gt; which is an illegal index, since array indices are zero-based.&lt;/p&gt;\n\n&lt;p&gt;Your code should read&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; name.length; i++) \n                  ^\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;It means that you are trying to access an index of an array which is not valid as it is not in between the bounds.&lt;/p&gt;\n\n&lt;p&gt;For example this would initialize a primitive integer array with the upper bound 4.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; intArray[] = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Programmers count from zero. So this for example would throw an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; as the upper bound is 4 and not 5.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;intArray[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;What causes &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you think of a variable as a &quot;box&quot; where you can place a value, then an array is a series of boxes placed next to eachother, where the number of boxes is a finite and explicit integer.&lt;/p&gt;\n\n&lt;p&gt;Creating an array like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] myArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;creates a row of 5 boxes, each holding an &lt;code&gt;int&lt;/code&gt;. Each of the boxes have an index, a position in the series of boxes. This index starts at 0, and ends at N-1, where N is the size of the array (the number of boxes).&lt;/p&gt;\n\n&lt;p&gt;To retrieve one of the values from this series of boxes, you can refer to it through its index, like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;myArray[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which will give you the value of the 4th box in the series (since the first box has index 0).&lt;/p&gt;\n\n&lt;p&gt;An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; is caused by trying to retrive a &quot;box&quot; that does not exist, by passing an index that is higher than the index of last &quot;box&quot;, or negative.&lt;/p&gt;\n\n&lt;p&gt;With my running example, these code snippets would produce such an exception:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;myArray[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;//tries to retrieve the 6th &quot;box&quot; when there is only 5&lt;/span&gt;\nmyArray[-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;//just makes no sense&lt;/span&gt;\nmyArray[&lt;span class=&quot;hljs-number&quot;&gt;1337&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;//waay to high&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How to avoid &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In order to prevent &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;, there are some key points to consider:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Looping&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When looping through an array, always make sure that the index you are retrieving is strictly smaller than the length of the array (the number of boxes). For instance:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; myArray.length; i++) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice the &lt;code&gt;&amp;lt;&lt;/code&gt;, never mix a &lt;code&gt;=&lt;/code&gt; in there..&lt;/p&gt;\n\n&lt;p&gt;You might want to be tempted to do something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= myArray.length; i++) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;someint&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; myArray[i - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just don&apos;t. Stick to the one above (if you need to use the index) and it will save you a lot of pain.&lt;/p&gt;\n\n&lt;p&gt;Where possible, use foreach:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value : myArray) {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This way you won&apos;t have to think about indexes at all.&lt;/p&gt;\n\n&lt;p&gt;When looping, whatever you do, NEVER change the value of the loop iterator (here: &lt;code&gt;i&lt;/code&gt;). The only place this should change value is to keep the loop going. Changing it otherwise is just risking an exception, and is in most cases not neccessary.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Retrieval/update&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;When retrieving an arbitrary element of the array, always check that it is a valid index against the length of the array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;hljs-title function_&quot;&gt;getArrayElement&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || index &amp;gt;= myArray.length) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//although I would much prefer an actual exception being thrown when this happens.&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; myArray[index];\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;To avoid an array index out-of-bounds exception, one should use the &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html&quot; rel=&quot;noreferrer&quot;&gt;enhanced-&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; statement where and when they can.&lt;/p&gt;\n\n&lt;p&gt;The primary motivation (and use case) is when you are iterating and you do not require any complicated iteration steps.  You would &lt;em&gt;not&lt;/em&gt; be able to use an enhanced-&lt;code&gt;for&lt;/code&gt; to move backwards in an array or only iterate on every other element.&lt;/p&gt;\n\n&lt;p&gt;You&apos;re guaranteed not to run out of elements to iterate over when doing this, and your [corrected] example is easily converted over.&lt;/p&gt;\n\n&lt;p&gt;The code below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt; name.length; i++) {\n    System.out.print(name[i] + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...is equivalent to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String firstName : name) {\n    System.out.println(firstName + &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In your code you have accessed the elements from index 0 to the length of the string array. &lt;code&gt;name.length&lt;/code&gt; gives the number of string objects in your array of string objects i.e. 3, but you can access only up to index 2 &lt;code&gt;name[2]&lt;/code&gt;,\nbecause the array can be accessed from index 0 to &lt;code&gt;name.length - 1&lt;/code&gt; where you get &lt;code&gt;name.length&lt;/code&gt; number of objects.&lt;/p&gt;\n&lt;p&gt;Even while using a &lt;code&gt;for&lt;/code&gt; loop you have started with index zero and you should end with &lt;code&gt;name.length - 1&lt;/code&gt;. In an array a[n] you can access form a[0] to a[n-1].&lt;/p&gt;\n&lt;p&gt;For example:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] a={&lt;span class=&quot;hljs-string&quot;&gt;&quot;str1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;str2&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;str3&quot;&lt;/span&gt; ..., &lt;span class=&quot;hljs-string&quot;&gt;&quot;strn&quot;&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;a.length(); i++)\n    System.out.println(a[i]);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In your case:&lt;/p&gt;\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt;};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=name.length; i++) {\n    System.out.print(name[i] +&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For your given array the length of the array is 3(i.e. name.length = 3). But as it stores element starting from index 0, it has max index 2.&lt;/p&gt;\n\n&lt;p&gt;So, instead of  &apos;i**&amp;lt;=&lt;strong&gt;name.length&apos; you should write &apos;i&lt;/strong&gt;&amp;lt;**name.length&apos; to avoid &apos;ArrayIndexOutOfBoundsException&apos;.&lt;/p&gt;\n    ","\n&lt;p&gt;So much for this simple question, but I just wanted to highlight a new feature in Java which will avoid all confusions around indexing in arrays even for beginners. Java-8 has abstracted the task of iterating for you.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//If you need just the items&lt;/span&gt;\nArrays.stream(array).forEach(item -&amp;gt; { println(item); });\n\n&lt;span class=&quot;hljs-comment&quot;&gt;//If you need the index as well&lt;/span&gt;\nIntStream.range(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, array.length).forEach(index -&amp;gt; { println(array[index]); })\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What&apos;s the benefit? Well, one thing is the readability like English. Second, you need not worry about the &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You are getting &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; due to &lt;code&gt;i&amp;lt;=name.length&lt;/code&gt; part. &lt;code&gt;name.length&lt;/code&gt; return the length of the string &lt;code&gt;name&lt;/code&gt;, which is 3. Hence when you try to access &lt;code&gt;name[3]&lt;/code&gt;, it&apos;s illegal and throws an exception.&lt;/p&gt;\n\n&lt;p&gt;Resolved code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; name.length; i++) { &lt;span class=&quot;hljs-comment&quot;&gt;//use &amp;lt; insteadof &amp;lt;=&lt;/span&gt;\n  System.out.print(name[i] +&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s defined in the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.7&quot; rel=&quot;nofollow noreferrer&quot;&gt;Java language specification&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The &lt;code&gt;public final&lt;/code&gt; field &lt;code&gt;length&lt;/code&gt;, which contains the number of components\n  of the array. &lt;code&gt;length&lt;/code&gt; may be positive or zero.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/pjfvS.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/pjfvS.png&quot; alt=&quot;Array index out of bounds exception&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;That&apos;s how this type of exception looks when thrown in Eclipse. The number in red signifies the index you tried to access. So the code would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;myArray[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The error is thrown when you try to access an index which doesn&apos;t exist in that array. If an array has a length of 3,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then the only valid indexes are:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;intArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\nintArray[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\nintArray[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If an array has a length of 1,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] intArray = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then the only valid index is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;intArray[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any integer equal to the length of the array, or bigger than it: is out of bounds.&lt;/p&gt;\n\n&lt;p&gt;Any integer less than 0: is out of bounds;&lt;/p&gt;\n\n&lt;p&gt;P.S.: If you look to have a better understanding of arrays and do some practical exercises, there&apos;s a video here: &lt;a href=&quot;https://www.youtube.com/watch?v=k1i42DMrcMk&quot; rel=&quot;nofollow noreferrer&quot; title=&quot;Arrays in Java&quot;&gt;tutorial on arrays in Java&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;For multidimensional arrays, it can be tricky to make sure you access the &lt;code&gt;length&lt;/code&gt; property of the right dimension. Take the following code for example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; [][][] a  = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;int&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; a.length; i++){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; j &amp;lt; a[i].length; j++){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; k &amp;lt; a[j].length; k++){\n            System.out.print(a[i][j][k]);\n        }\n        System.out.println();\n    }\n    System.out.println();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each dimension has a different length, so the subtle bug is that the middle and inner loops use the &lt;code&gt;length&lt;/code&gt; property of the same dimension (because &lt;code&gt;a[i].length&lt;/code&gt; is the same as &lt;code&gt;a[j].length&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;Instead, the inner loop should use &lt;code&gt;a[i][j].length&lt;/code&gt; (or &lt;code&gt;a[0][0].length&lt;/code&gt;, for simplicity).&lt;/p&gt;\n    ","\n&lt;p&gt;The most common case I&apos;ve seen for seemingly mysterious ArrayIndexOutOfBoundsExceptions, i.e. apparently not caused by your own array handling code, is the concurrent use of SimpleDateFormat. Particularly in a servlet or controller:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;MyController&lt;/span&gt; {\n  &lt;span class=&quot;hljs-type&quot;&gt;SimpleDateFormat&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;dateFormat&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SimpleDateFormat&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;MM/dd/yyyy&quot;&lt;/span&gt;);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ServletRequest req, ServletResponse res)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; dateFormat.parse(req.getParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;date&quot;&lt;/span&gt;));\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If two threads enter the SimplateDateFormat.parse() method together you will likely see an ArrayIndexOutOfBoundsException. Note the synchronization section of the &lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;class javadoc for SimpleDateFormat&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Make sure there is no place in your code that are accessing thread unsafe classes like SimpleDateFormat in a concurrent manner like in a servlet or controller. Check all instance variables of your servlets and controllers for likely suspects.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;For any array of length n, elements of the array will have an index from 0 to n-1.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If your program is trying to access any element (or memory) having array index greater than n-1, then Java will throw &lt;strong&gt;ArrayIndexOutOfBoundsException&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;So here are two solutions that we can use in a program&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Maintaining count:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; count &amp;lt; array.length; count++) {\n    System.out.println(array[count]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or some other looping statement like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(count &amp;lt; array.length) {\n    System.out.println(array[count]);\n    count++;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A better way go with a for each loop, in this method a programmer has no need to bother about the number of elements in the array.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String str : array) {\n    System.out.println(str);\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;ArrayIndexOutOfBoundsException whenever this exception is coming it mean you are trying to use an index of array which is out of its bounds or in lay man terms you are requesting more than than you have initialised.&lt;/p&gt;\n\n&lt;p&gt;To prevent this always make sure that you are not requesting a index which is not present in array i.e. if array length is 10 then your index must range between 0 to 9&lt;/p&gt;\n    ","\n&lt;p&gt;ArrayIndexOutOfBounds means you are trying to index a position within an array that is not allocated.&lt;/p&gt;\n\n&lt;p&gt;In this case:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = { &lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt; };\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= name.length; i++) {\n    System.out.println(name[i]);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;name.length is 3 since the array has been defined with 3 String objects.&lt;/li&gt;\n&lt;li&gt;When accessing the contents of an array, position starts from 0. Since there are 3 items, it would mean name[0]=&quot;tom&quot;, name[1]=&quot;dick&quot; and name[2]=&quot;harry&lt;/li&gt;\n&lt;li&gt;When you loop, since &lt;em&gt;i&lt;/em&gt; can be less than or equal to name.length, you are trying to access name[3] which is not available.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To get around this... &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In your for loop, you can do i &amp;lt; name.length. This would prevent looping to name[3] and would instead stop at name[2]&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for(int i = 0; i&amp;lt;name.length; i++)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use a for each loop&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;String[] name = { &quot;tom&quot;, &quot;dick&quot;, &quot;harry&quot; };\nfor(String n : name) {\n    System.out.println(n);\n}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Use list.forEach(Consumer action) (requires Java8)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;String[] name = { &quot;tom&quot;, &quot;dick&quot;, &quot;harry&quot; };\nArrays.asList(name).forEach(System.out::println);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Convert array to stream - this is a good option if you want to perform additional &apos;operations&apos; to your array e.g. filter, transform the text, convert to a map etc (requires Java8)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;String[] name = { &quot;tom&quot;, &quot;dick&quot;, &quot;harry&quot; };\n---  Arrays.asList(name).stream().forEach(System.out::println);\n---  Stream.of(name).forEach(System.out::println);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; means that you are trying to access an index of the array that does not exist or out of the bound of this array. Array indexes start from &lt;strong&gt;0&lt;/strong&gt; and end at &lt;strong&gt;length - 1&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;In your case &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=name.length; i++) {\n    System.out.print(name[i] +&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// i goes from 0 to length, Not correct&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; happens when you are trying to access \nthe name.length indexed element which does not exist (array index ends at  length -1). just replacing &amp;lt;= with &amp;lt; would solve this problem. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; name.length; i++) {\n    System.out.print(name[i] +&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// i goes from 0 to length - 1, Correct&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;According to your Code :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;=name.length; i++) {\n  System.out.print(name[i] +&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If You check\nSystem.out.print(name.length);&lt;/p&gt;\n\n&lt;p&gt;you will get 3;&lt;/p&gt;\n\n&lt;p&gt;that mean your name length is 3&lt;/p&gt;\n\n&lt;p&gt;your loop is running from 0 to 3 \nwhich should be running either &quot;0 to 2&quot; or &quot;1 to 3&quot;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] name = {&lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;dick&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;harry&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;name.length; i++) {\n  System.out.print(name[i] +&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\n&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Each item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration, &lt;strong&gt;numbering begins with 0&lt;/strong&gt;. The 9th element, for example, would therefore be accessed at index 8.&lt;/p&gt;\n\n&lt;p&gt;IndexOutOfBoundsException is thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range.&lt;/p&gt;\n\n&lt;p&gt;Any array X, can be accessed from [0 to (X.length - 1)]&lt;/p&gt;\n    ","\n&lt;p&gt;I see all the answers here explaining how to work with arrays and how to avoid the index out of bounds exceptions.  I personally avoid arrays at all costs.  I use the Collections classes, which avoids all the silliness of having to deal with array indices entirely.  The looping constructs work beautifully with collections supporting code that is both easier to write, understand and maintain.&lt;/p&gt;\n    ","\n&lt;p&gt;If you use an array&apos;s length to control iteration of a &lt;strong&gt;for&lt;/strong&gt; loop, always remember that the index of the first item in an array is &lt;strong&gt;0&lt;/strong&gt;. So the index of the last element in an array is one less than the array&apos;s length.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; name itself explains that If you trying to access the value at the index which is out of the scope of Array size then such kind of exception occur. &lt;/p&gt;\n\n&lt;p&gt;In your case, You can just remove equal sign from your for loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;name.length; i++)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The better option is to iterate an array: &lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(String i : name )\n      System.out.println(i);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This error is occurs at runs loop  overlimit times.Let&apos;s consider simple example like this,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;demo&lt;/span&gt;{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String a[])&lt;/span&gt;{\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;[] numberArray={&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;};\n\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;numberArray.length;i++){\n        System.out.print(numberArray[i+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]+&lt;span class=&quot;hljs-string&quot;&gt;&quot;  &quot;&lt;/span&gt;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At first, I have initialized an array as &apos;numberArray&apos;. then , some array elements are printed using for loop. When loop is running &apos;i&apos; time , print the (numberArray[i+1] element..(when i value is 1, numberArray[i+1] element is printed.)..Suppose that, when i=(numberArray.length-2), last element of array is printed..When &apos;i&apos; value goes to (numberArray.length-1) , no value for printing..In that point , &apos;ArrayIndexOutOfBoundsException&apos; is occur.I hope to you could get idea.thank you !&lt;/p&gt;\n    ","\n&lt;p&gt;You can use Optional in functional style to avoid &lt;code&gt;NullPointerException&lt;/code&gt; and &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; :&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;String[] array = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;hljs-string&quot;&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ccc&quot;&lt;/span&gt;};\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; Optional.ofNullable(array.length &amp;gt; i ? array[i] : &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n            .map(x -&amp;gt; x.toUpperCase()) &lt;span class=&quot;hljs-comment&quot;&gt;//some operation here&lt;/span&gt;\n            .orElse(&lt;span class=&quot;hljs-string&quot;&gt;&quot;NO_DATA&quot;&lt;/span&gt;);\n    System.out.println(result);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;AAA\nNO_DATA\nCCC\nNO_DATA\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;In most of the programming language indexes is start from 0.So you must have to write &lt;strong&gt;i&amp;lt;names.length&lt;/strong&gt; or &lt;strong&gt;i&amp;lt;=names.length-1&lt;/strong&gt; instead of &lt;strong&gt;i&amp;lt;=names.length&lt;/strong&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;You could not iterate or store more data than the length of your array. In this case you could do like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt;= name.length - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; i++) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ....&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-java s-code-block&quot;&gt;&lt;code class=&quot;hljs language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; name.length; i++) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"115","randomQuestions":[{"title":"Event binding on dynamically created elements?","slug":"event-binding-on-dynamically-created-elements-1657384268057"},{"title":"What is move semantics?","slug":"what-is-move-semantics-1657387702625"},{"title":"What are drawbacks or disadvantages of singleton pattern? [closed]","slug":"what-are-drawbacks-or-disadvantages-of-singleton-pattern-closed-1657387360749"},{"title":"What's the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN and FULL JOIN? [duplicate]","slug":"what's-the-difference-between-inner-join-left-join-right-join-and-full-join-duplicate-1657388082887"},{"title":"What is the behavior of integer division?","slug":"what-is-the-behavior-of-integer-division-1657388222571"},{"title":"What is this weird colon-member (\" : \") syntax in the constructor?","slug":"what-is-this-weird-colon-member-(\"-:-\")-syntax-in-the-constructor-1657387264047"},{"title":"How do I pass JavaScript variables to PHP?","slug":"how-do-i-pass-javascript-variables-to-php-1657388157033"},{"title":"How to use variables in SQL statement in Python?","slug":"how-to-use-variables-in-sql-statement-in-python-1657388479077"},{"title":"What is the difference between \"INNER JOIN\" and \"OUTER JOIN\"?","slug":"what-is-the-difference-between-\"inner-join\"-and-\"outer-join\"-1657387501982"},{"title":"How do I import a module given the full path?","slug":"how-do-i-import-a-module-given-the-full-path-1657388139965"},{"title":"Using global variables in a function","slug":"using-global-variables-in-a-function-1657384796002"},{"title":"How can I convert ereg expressions to preg in PHP?","slug":"how-can-i-convert-ereg-expressions-to-preg-in-php-1657387652855"},{"title":"How do I declare a 2d array in C++ using new?","slug":"how-do-i-declare-a-2d-array-in-c++-using-new-1657388441163"},{"title":"Reshaping multiple sets of measurement columns (wide format) into single columns (long format)","slug":"reshaping-multiple-sets-of-measurement-columns-(wide-format)-into-single-columns-(long-format)-1657388016983"},{"title":"Most efficient method to groupby on an array of objects","slug":"most-efficient-method-to-groupby-on-an-array-of-objects-1657387580538"},{"title":"Can PHP PDO Statements accept the table or column name as parameter?","slug":"can-php-pdo-statements-accept-the-table-or-column-name-as-parameter-1657387478588"},{"title":"JavaScript property access: dot notation vs. brackets?","slug":"javascript-property-access:-dot-notation-vs.-brackets-1657384717494"},{"title":"Why are floating point numbers inaccurate?","slug":"why-are-floating-point-numbers-inaccurate-1657387346111"},{"title":"What's the simplest way to print a Java array?","slug":"what's-the-simplest-way-to-print-a-java-array-1657384702397"},{"title":"When can I use a forward declaration?","slug":"when-can-i-use-a-forward-declaration-1657388251827"}]},"__N_SSG":true}