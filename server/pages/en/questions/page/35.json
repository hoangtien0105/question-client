{"pageProps":{"data":{"count":610,"rows":[{"id":440,"title":"How to check if element is visible after scrolling?","slug":"how-to-check-if-element-is-visible-after-scrolling-1657387987960","postType":"QUESTION","createdAt":"2022-07-09T17:33:07.000Z","updatedAt":"2022-07-09T17:33:07.000Z","tags":[{"id":2290,"name":"scroll","slug":"scroll","createdAt":"2022-07-09T17:33:08.000Z","updatedAt":"2022-07-09T17:33:08.000Z","Questions_Tags":{"questionId":440,"tagId":2290}}]},{"id":439,"title":"Why should there be spaces around '[' and ']' in Bash?","slug":"why-should-there-be-spaces-around-''-and-''-in-bash-1657387984122","postType":"QUESTION","createdAt":"2022-07-09T17:33:04.000Z","updatedAt":"2022-07-09T17:33:04.000Z","tags":[]},{"id":438,"title":"MySQL pivot row into dynamic number of columns","slug":"mysql-pivot-row-into-dynamic-number-of-columns-1657387981930","postType":"QUESTION","createdAt":"2022-07-09T17:33:01.000Z","updatedAt":"2022-07-09T17:33:01.000Z","tags":[]},{"id":437,"title":"Accessing an array out of bounds gives no error, why?","slug":"accessing-an-array-out-of-bounds-gives-no-error-why-1657387979932","postType":"QUESTION","createdAt":"2022-07-09T17:32:59.000Z","updatedAt":"2022-07-09T17:32:59.000Z","tags":[]},{"id":436,"title":"What's the meaning of \"=>\" (an arrow formed from equals & greater than) in JavaScript?","slug":"what's-the-meaning-of-\"greater\"-(an-arrow-formed-from-equals-and-greater-than)-in-javascript-1657387977118","postType":"QUESTION","createdAt":"2022-07-09T17:32:57.000Z","updatedAt":"2022-07-09T17:32:57.000Z","tags":[]}]},"answers":{"436":["\n&lt;h1&gt;What It Is&lt;/h1&gt;\n&lt;p&gt;&lt;strong&gt;This is an arrow function.&lt;/strong&gt; Arrow functions are a short syntax, introduced by ECMAscript 6, that can be used similarly to the way you would use function expressions. In other words, you can often use them in place of expressions like &lt;code&gt;function (foo) {...}&lt;/code&gt;. But they have some important differences. For example, they do not bind their own values of &lt;code&gt;this&lt;/code&gt; (see below for discussion).&lt;/p&gt;\n&lt;p&gt;Arrow functions are part of the ECMAscript 6 specification. They are not yet supported in all browsers, but they are partially or fully supported &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; rel=&quot;noreferrer&quot;&gt;in Node v. 4.0+&lt;/a&gt; and in most modern browsers in use as of 2018. (Ive included a partial list of supporting browsers below).&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;You can read more in &lt;strong&gt;the Mozilla documentation&lt;/strong&gt; on arrow functions&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;From the Mozilla documentation:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An arrow function expression (also known as fat arrow function) has a shorter syntax compared to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot; rel=&quot;noreferrer&quot;&gt;function expressions&lt;/a&gt; and lexically binds the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; value (does not bind its own &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;super&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;new.target&lt;/code&gt;&lt;/a&gt;). Arrow functions are always anonymous. These function expressions are best suited for non-method functions and they can not be used as constructors.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;A Note on How &lt;code&gt;this&lt;/code&gt; Works in Arrow Functions&lt;/h2&gt;\n&lt;p&gt;One of the most handy features of an arrow function is buried in the text above:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An arrow function... lexically binds the &lt;code&gt;this&lt;/code&gt; value (does not bind its own &lt;code&gt;this&lt;/code&gt;...)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;What this means in simpler terms is that the arrow function retains the &lt;code&gt;this&lt;/code&gt; value from its context and does not have its own &lt;code&gt;this&lt;/code&gt;. A traditional function &lt;em&gt;may&lt;/em&gt; bind its own &lt;code&gt;this&lt;/code&gt; value, depending on how it is defined and called. This can require lots of gymnastics like &lt;code&gt;self = this;&lt;/code&gt;, etc., to access or manipulate &lt;code&gt;this&lt;/code&gt; from one function inside another function. For more info on this topic, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this&quot; rel=&quot;noreferrer&quot;&gt;the explanation and examples in the Mozilla documentation&lt;/a&gt;.&lt;/p&gt;\n&lt;h1&gt;Example Code&lt;/h1&gt;\n&lt;p&gt;Example (also from the docs):&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a = [\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night &apos;til the sun&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night to get some&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night for good fun&quot;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-string&quot;&gt;&quot;We&apos;re up all night to get lucky&quot;&lt;/span&gt;\n];\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// These two assignments are equivalent:&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Old-school:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; });\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// ECMAscript 6 using arrow functions&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a3 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; );\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// both a2 and a3 will be equal to [31, 30, 31, 31]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;hr&gt;\n&lt;h1&gt;Notes on Compatibility&lt;/h1&gt;\n&lt;p&gt;You can use arrow functions in Node, but browser support is spotty.&lt;/p&gt;\n&lt;p&gt;Browser support for this functionality has improved quite a bit, but it still is not widespread enough for most browser-based usages. As of December 12, 2017, it is supported in current versions of:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Chrome (v. 45+)&lt;/li&gt;\n&lt;li&gt;Firefox (v. 22+)&lt;/li&gt;\n&lt;li&gt;Edge (v. 12+)&lt;/li&gt;\n&lt;li&gt;Opera (v. 32+)&lt;/li&gt;\n&lt;li&gt;Android Browser (v. 47+)&lt;/li&gt;\n&lt;li&gt;Opera Mobile (v. 33+)&lt;/li&gt;\n&lt;li&gt;Chrome for Android (v. 47+)&lt;/li&gt;\n&lt;li&gt;Firefox for Android (v. 44+)&lt;/li&gt;\n&lt;li&gt;Safari (v. 10+)&lt;/li&gt;\n&lt;li&gt;iOS Safari (v. 10.2+)&lt;/li&gt;\n&lt;li&gt;Samsung Internet (v. 5+)&lt;/li&gt;\n&lt;li&gt;Baidu Browser (v. 7.12+)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Not supported in:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;IE (through v. 11)&lt;/li&gt;\n&lt;li&gt;Opera Mini (through v. 8.0)&lt;/li&gt;\n&lt;li&gt;Blackberry Browser (through v. 10)&lt;/li&gt;\n&lt;li&gt;IE Mobile (through v. 11)&lt;/li&gt;\n&lt;li&gt;UC Browser for Android (through v. 11.4)&lt;/li&gt;\n&lt;li&gt;QQ (through v. 1.2)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;You can find more (and more current) information at &lt;a href=&quot;https://caniuse.com/#feat=arrow-functions&quot; rel=&quot;noreferrer&quot;&gt;CanIUse.com&lt;/a&gt; (no affiliation).&lt;/p&gt;\n    ","\n&lt;p&gt;That&apos;s known as an Arrow Function, part of the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions&quot; rel=&quot;noreferrer&quot;&gt;ECMAScript 2015 spec&lt;/a&gt;...&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ab&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt; =&amp;gt;&lt;/span&gt; f.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;hljs-comment&quot;&gt;// 1,2,3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Shorter syntax than the previous:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt; ES6:&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; foo = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;a&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;ab&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;abc&apos;&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;f&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; f.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;;\n});\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(bar); &lt;span class=&quot;hljs-comment&quot;&gt;// 1,2,3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.es6fiddle.net/hxy1g4ey/&quot; rel=&quot;noreferrer&quot;&gt;DEMO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The other awesome thing is &lt;em&gt;lexical&lt;/em&gt; &lt;code&gt;this&lt;/code&gt;... Usually, you&apos;d do something like:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startCounting&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;startCounting&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; self = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// this is the Window, not Foo {}, as you might expect&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// [object Window]&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// that&apos;s why we reassign this to self before setInterval()&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(self.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;);\n    self.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;++;\n  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;But that could be rewritten with the arrow like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;startCounting&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;startCounting&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-built_in&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// [object Object]&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// 1, 2, 3&lt;/span&gt;\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;count&lt;/span&gt;++;\n  }, &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;)\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Foo&lt;/span&gt;();&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif4&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.es6fiddle.net/hxy2anuu/&quot; rel=&quot;noreferrer&quot;&gt;DEMO&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;MDN&lt;/a&gt;&lt;/em&gt;&lt;br&gt;\n&lt;em&gt;&lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax&quot; rel=&quot;noreferrer&quot;&gt;More on Syntax&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;For more, &lt;a href=&quot;https://stackoverflow.com/questions/22939130/when-should-i-use-arrow-functions-in-ecmascript-6&quot;&gt;here&apos;s&lt;/a&gt; a pretty good answer for &lt;em&gt;when&lt;/em&gt; to use arrow functions.&lt;/p&gt;\n    ","\n&lt;h1&gt;These are Arrow Functions&lt;/h1&gt;\n&lt;p&gt;Also known as &lt;strong&gt;Fat Arrow Functions&lt;/strong&gt;. They&apos;re a clean and consise way to write function expressions, e.g. &lt;code&gt;function() {}&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Arrow Functions can remove the need of &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; when defining functions. They are one-liners, similar to Lambda Expressions in Java or Python.&lt;/p&gt;\n&lt;h2&gt;Example with no parameters&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dave&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sarah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sharon&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;nextCustomer&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) =&amp;gt; queue[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;nextCustomer&lt;/span&gt;()); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;Dave&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif5&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;If multiple statements need to be made within the same Arrow Function, you need to wrap, in this example, &lt;code&gt;queue[0]&lt;/code&gt; in curley brackets &lt;code&gt;{}&lt;/code&gt;. In this case the return statement cannot be omitted.&lt;/p&gt;\n&lt;h2&gt;Example with 1 parameter&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; queue = [&lt;span class=&quot;hljs-string&quot;&gt;&apos;Dave&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sarah&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sharon&apos;&lt;/span&gt;];\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addCustomer&lt;/span&gt; = name =&amp;gt; {\n  queue.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(name);\n};\n\n&lt;span class=&quot;hljs-title function_&quot;&gt;addCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Toby&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(queue); &lt;span class=&quot;hljs-comment&quot;&gt;// [&apos;Dave&apos;, &apos;Sarah&apos;, &apos;Sharon&apos;, &apos;Toby&apos;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif6&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;You can omit &lt;code&gt;{}&lt;/code&gt; from the above.&lt;/p&gt;\n&lt;p&gt;When there is a single parameter, the brackets &lt;code&gt;()&lt;/code&gt; around the parameter can be omitted.&lt;/p&gt;\n&lt;h2&gt;Example with multiple parameters&lt;/h2&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addNumbers&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;x, y&lt;/span&gt;) =&amp;gt; x + y\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;addNumbers&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)); &lt;span class=&quot;hljs-comment&quot;&gt;// 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif7&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;h2&gt;A useful example&lt;/h2&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; fruits = [\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Apple&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Bananna&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; },\n    { &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Pear&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;price&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; }\n];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If we wanted to get the price of every fruit in a single array, in ES5 we could do:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;fruits.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;fruit&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; fruit.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;;\n}); &lt;span class=&quot;hljs-comment&quot;&gt;// [2, 3, 1]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In ES6 with the new Arrow Functions, we can make this more concise:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;fruits.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;fruit&lt;/span&gt; =&amp;gt;&lt;/span&gt; fruit.&lt;span class=&quot;hljs-property&quot;&gt;price&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// [2, 3, 1]&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Additional information on Arrow Functions can be found &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;This would be the &quot;arrow function expression&quot; introduced in ECMAScript 6.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot; rel=&quot;noreferrer&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For historical purposes (if the wiki page changes later), it is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An arrow function expression has a shorter syntax compared to function expressions and lexically binds the this value. Arrow functions are always anonymous.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;just to add another example of what a lambda can do without using map:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\nb = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mixed&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt; a * b; \n&lt;span class=&quot;hljs-comment&quot;&gt;// OR&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;mixed&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;a,b&lt;/span&gt;) =&amp;gt; { (any logic); &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * b };\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;mixed&lt;/span&gt;(a,b)) \n&lt;span class=&quot;hljs-comment&quot;&gt;// 20&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;As others have said, it&apos;s a new syntax to create functions.&lt;/p&gt;\n\n&lt;p&gt;However, this kind of functions differ from normal ones:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;They bind the &lt;code&gt;this&lt;/code&gt; value. As explained by &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions-runtime-semantics-evaluation&quot; rel=&quot;noreferrer&quot;&gt;the spec&lt;/a&gt;,&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;An &lt;em&gt;ArrowFunction&lt;/em&gt; does not define local bindings for &lt;code&gt;arguments&lt;/code&gt;,\n  &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, or &lt;code&gt;new.target&lt;/code&gt;. Any reference to &lt;code&gt;arguments&lt;/code&gt;,\n  &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, or &lt;code&gt;new.target&lt;/code&gt; within an &lt;em&gt;ArrowFunction&lt;/em&gt; must\n  resolve to a binding in a lexically enclosing environment. Typically\n  this will be the Function Environment of an immediately enclosing\n  function.&lt;/p&gt;\n  \n  &lt;p&gt;Even though an &lt;em&gt;ArrowFunction&lt;/em&gt; may contain references to &lt;code&gt;super&lt;/code&gt;, the\n  function object created in step 4 is not made into a method by\n  performing &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-makemethod&quot; rel=&quot;noreferrer&quot;&gt;MakeMethod&lt;/a&gt;. An &lt;em&gt;ArrowFunction&lt;/em&gt; that references &lt;code&gt;super&lt;/code&gt;\n  is always contained within a non-&lt;em&gt;ArrowFunction&lt;/em&gt; and the necessary\n  state to implement &lt;code&gt;super&lt;/code&gt; is accessible via the &lt;em&gt;scope&lt;/em&gt; that is\n  captured by the function object of the &lt;em&gt;ArrowFunction&lt;/em&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;They are non-constructors.&lt;/p&gt;\n\n&lt;p&gt;That means they have no [[Construct]] internal method, and thus can&apos;t be instantiated, e.g.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt; = a =&amp;gt; a;\n&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// 123&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;(); &lt;span class=&quot;hljs-comment&quot;&gt;// TypeError: f is not a constructor&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;I&apos;ve read, this is a symbol of &lt;code&gt;Arrow Functions&lt;/code&gt; in &lt;code&gt;ES6&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a2 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt;){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;using &lt;code&gt;Arrow Function&lt;/code&gt; can be written as&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; a3 = a.&lt;span class=&quot;hljs-title function_&quot;&gt;map&lt;/span&gt;( &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;s&lt;/span&gt; =&amp;gt;&lt;/span&gt; s.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/arrow_functions&quot;&gt;MDN Docs&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Dissatisfied with the other answers. The top voted answer as of 2019/3/13 is factually wrong.&lt;/p&gt;\n&lt;p&gt;The short terse version of what &lt;code&gt;=&amp;gt;&lt;/code&gt; means is it&apos;s a shortcut writing a function &lt;strong&gt;AND&lt;/strong&gt; for binding it to the current &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; = a =&amp;gt; a * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Is effectively a shortcut for&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; foo = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) { &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;; }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can see all the things that got shortened. We didn&apos;t need &lt;code&gt;function&lt;/code&gt;, nor &lt;code&gt;return&lt;/code&gt; nor &lt;code&gt;.bind(this)&lt;/code&gt; nor even braces or parentheses&lt;/p&gt;\n&lt;p&gt;A slightly longer example of an arrow function might be&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt; = (&lt;span class=&quot;hljs-params&quot;&gt;width, height&lt;/span&gt;) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; area = width * height;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; area;\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Showing that if we want multiple arguments to the function we need parentheses and if we want write more than a single expression we need braces and an explicit &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;It&apos;s important to understand the &lt;code&gt;.bind&lt;/code&gt; part and it&apos;s a big topic. It has to do with what &lt;code&gt;this&lt;/code&gt; means in JavaScript.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;ALL&lt;/strong&gt; functions have an implicit parameter called &lt;code&gt;this&lt;/code&gt;. How &lt;code&gt;this&lt;/code&gt; is set when calling a function depends on how that function is called.&lt;/p&gt;\n&lt;p&gt;Take&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;If you call it normally&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;this&lt;/code&gt; will be the global object.&lt;/p&gt;\n&lt;p&gt;If you&apos;re in strict mode&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;`use strict`&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// or&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-string&quot;&gt;`use strict`&lt;/span&gt;;\n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n }\n&lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will be &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;You can set &lt;code&gt;this&lt;/code&gt; directly using &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(msg, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj1 = {&lt;span class=&quot;hljs-attr&quot;&gt;abc&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj2 = {&lt;span class=&quot;hljs-attr&quot;&gt;def&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;456&lt;/span&gt;}\n\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(obj1, &lt;span class=&quot;hljs-string&quot;&gt;&apos;hello&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints Hello {abc: 123}&lt;/span&gt;\nfoo.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(obj2, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;hi&apos;&lt;/span&gt;]);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints Hi {def: 456}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;You can also set &lt;code&gt;this&lt;/code&gt; implicitly using the dot operator &lt;code&gt;.&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;msg&lt;/span&gt;) { &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(msg, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); }\n&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; obj = {\n   &lt;span class=&quot;hljs-attr&quot;&gt;abc&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;,\n   &lt;span class=&quot;hljs-attr&quot;&gt;bar&lt;/span&gt;: foo,\n}\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hola&apos;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// prints Hola {abc:123, bar: f}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;A problem comes up when you want to use a function as a callback or a listener. You make class and want to assign a function as the callback that accesses an instance of the class.&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShowName&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    elem.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// won&apos;t work&lt;/span&gt;\n    }); \n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The code above will not work because when the element fires the event and calls the function the &lt;code&gt;this&lt;/code&gt; value will not be the instance of the class.&lt;/p&gt;\n&lt;p&gt;One common way to solve that problem is to use &lt;code&gt;.bind&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShowName&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    elem.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); \n    }.&lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;=========== ADDED! ===========&lt;/span&gt;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Because the arrow syntax does the same thing we can write&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ShowName&lt;/span&gt; {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt; = name;\n    elem.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;click&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n       &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;); \n    });\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; effectively &lt;em&gt;makes a new function&lt;/em&gt;. If &lt;code&gt;bind&lt;/code&gt; did not exist you could basically make your own like this&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;functionToBind, valueToUseForThis&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...args&lt;/span&gt;) {\n    functionToBind.&lt;span class=&quot;hljs-title function_&quot;&gt;call&lt;/span&gt;(valueToUseForThis, ...args);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;In older JavaScript without the spread operator it would be&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;bind&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;functionToBind, valueToUseForThis&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    functionToBind.&lt;span class=&quot;hljs-title function_&quot;&gt;apply&lt;/span&gt;(valueToUseForThis, &lt;span class=&quot;hljs-variable language_&quot;&gt;arguments&lt;/span&gt;);\n  };\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Understanding that code requires &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot; rel=&quot;nofollow noreferrer&quot;&gt;an understanding of closures&lt;/a&gt; but the short version is &lt;code&gt;bind&lt;/code&gt; makes a new function that always calls the original function with the &lt;code&gt;this&lt;/code&gt; value that was bound to it. Arrow functions do the same thing since they are a shortcut for &lt;code&gt;bind(this)&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Adding simple CRUD example with Arrowfunction&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;//Arrow Function&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; customers   = [\n   {\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Dave&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contact&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9192631770&apos;&lt;/span&gt;\n   },\n   {\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Sarah&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contact&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9192631770&apos;&lt;/span&gt;\n   },\n   {\n     &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Akhil&apos;&lt;/span&gt;,\n     &lt;span class=&quot;hljs-attr&quot;&gt;contact&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&apos;9928462656&apos;&lt;/span&gt; \n   }],\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// No Param READ&lt;/span&gt;\n getFirstCustomer = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; { \n   &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;);\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; customers[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n };\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;First Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getFirstCustomer&lt;/span&gt;())); &lt;span class=&quot;hljs-comment&quot;&gt;// &apos;Dave&apos; &lt;/span&gt;\n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//1 Param SEARCH&lt;/span&gt;\n  getNthCustomer = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;index&lt;/span&gt;=&amp;gt;&lt;/span&gt;{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( index&amp;gt;customers.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;)\n    {\n     &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;hljs-string&quot;&gt;&quot;No such thing&quot;&lt;/span&gt;;\n   }\n   &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{\n       &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; customers[index];\n     } \n  };\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Nth Customer is &quot;&lt;/span&gt; +&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getNthCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))); \n\n   &lt;span class=&quot;hljs-comment&quot;&gt;//2params ADD&lt;/span&gt;\n  addCustomer = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;name, contact&lt;/span&gt;)=&amp;gt;&lt;/span&gt; customers.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;({\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: name,\n     &lt;span class=&quot;hljs-string&quot;&gt;&apos;contact&apos;&lt;/span&gt;:contact\n    });\n  &lt;span class=&quot;hljs-title function_&quot;&gt;addCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hitesh&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;8888813275&apos;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Added Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(customers)); \n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//2 param UPDATE&lt;/span&gt;\n  updateCustomerName = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;index, newName&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{customers[index].&lt;span class=&quot;hljs-property&quot;&gt;name&lt;/span&gt;= newName};\n  &lt;span class=&quot;hljs-title function_&quot;&gt;updateCustomerName&lt;/span&gt;(customers.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;HiteshSahu&quot;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Updated Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(customers));\n\n  &lt;span class=&quot;hljs-comment&quot;&gt;//1 param DELETE&lt;/span&gt;\n  removeCustomer = &lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;customerToRemove&lt;/span&gt;) =&amp;gt;&lt;/span&gt; customers.&lt;span class=&quot;hljs-title function_&quot;&gt;pop&lt;/span&gt;(customerToRemove);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;removeCustomer&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;getFirstCustomer&lt;/span&gt;());\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Removed Customer &quot;&lt;/span&gt;+&lt;span class=&quot;hljs-title class_&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;stringify&lt;/span&gt;(customers)); \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Arrow functions which is denoted by symbol (=&amp;gt;) helps you to create anonymous functions and methods. That leads to more shorter syntax. For example, below is a simple Add function which returns addition of two numbers.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;num1 , num2 &lt;/span&gt;){\n&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; num1 + num2;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above function becomes shorter by using Arrow syntax as shown below.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/K4eFd.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/K4eFd.png&quot; alt=&quot;enter image description here&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Above code has two parts as shown in the above diagram: -&lt;/p&gt;\n\n&lt;p&gt;Input:This section specifies the input parameters to the anonymous function.&lt;/p&gt;\n\n&lt;p&gt;Logic:This section comes after the symbol =&amp;gt;. This section has the logic of the actual function.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Many developers think that arrow function makes your syntax shorter, simpler and thus makes your code readable.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;If you believe the above sentence, then let me assure you its a myth. If you think for a moment a properly written function with name is much readable than cryptic functions created in one line using an arrow symbol.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The main use of arrow function is to ensure that code runs in the\n  callers context.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;See the below code in which have a global variable &quot;context&quot; defined , this global variable is accessed inside a function &quot;SomeOtherMethod&quot; which is called from other method &quot;SomeMethod&quot;.&lt;/p&gt;\n\n&lt;p&gt;This &quot;SomeMethod&quot; has local &quot;context&quot; variable. Now because &quot;SomeOtherMethod&quot; is called from &quot;&quot;SomeMethod&quot; we expect it to display &quot;local context&quot; , but it displays &quot;global context&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;hljs-variable language_&quot;&gt;global&lt;/span&gt; context;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeOtherMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt; = local context;\n&lt;span class=&quot;hljs-title class_&quot;&gt;SomeOtherMethod&lt;/span&gt;();\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeMethod&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But if replace the call by using Arrow function it will display &quot;local context&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; context = &lt;span class=&quot;hljs-string&quot;&gt;&quot;global context&quot;&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;SomeMethod&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;local context&quot;&lt;/span&gt;;\n        &lt;span class=&quot;hljs-title class_&quot;&gt;SomeOtherMethod&lt;/span&gt; = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n            &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;context&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-title class_&quot;&gt;SomeOtherMethod&lt;/span&gt;();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SomeMethod&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I would encourage you to read this link ( &lt;a href=&quot;https://medium.com/@shivprasadkoirala/arrow-function-in-javascript-471d13ad0af2&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arrow function in JavaScript&lt;/a&gt; ) which explain all the scenarios of javascript context and in which scenarios the callers context is not respected.&lt;/p&gt;\n\n&lt;p&gt;You can also see the demonstration of &lt;a href=&quot;https://www.youtube.com/watch?v=ik3RWl_-U3o&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arrow function with javascript in this youtube video&lt;/a&gt; which demonstrates practically the term Context.&lt;/p&gt;\n    ","\n&lt;p&gt;As all of the other answers have already said, it&apos;s part of ES2015 arrow function syntax. More specifically, it&apos;s not an operator, it&apos;s a punctuator token that separates the parameters from the body: &lt;code&gt;ArrowFunction : ArrowParameters =&amp;gt; ConciseBody&lt;/code&gt;. E.g. &lt;code&gt;(params) =&amp;gt; { /* body */ }&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;As others have stated, regular (traditional) functions use &lt;code&gt;this&lt;/code&gt; from the object that called the function, &lt;em&gt;(e.g. a button that was clicked)&lt;/em&gt;. Instead, arrow functions use &lt;code&gt;this&lt;/code&gt; from the object that defines the function.&lt;/p&gt;\n\n&lt;p&gt;Consider two almost identical functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;regular = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-string&quot;&gt;&apos; Identical Part Here;\n}\n\n\narrow = () =&amp;gt; {\n  &apos;&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Identical&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Part&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Here&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The snippet below demonstrates the fundamental difference between what &lt;code&gt;this&lt;/code&gt; represents for each function.  The &lt;strong&gt;&lt;em&gt;regular function&lt;/em&gt;&lt;/strong&gt; outputs &lt;code&gt;[object HTMLButtonElement]&lt;/code&gt; whereas the &lt;strong&gt;&lt;em&gt;arrow function&lt;/em&gt;&lt;/strong&gt; outputs &lt;code&gt;[object Window]&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Regular: `this` comes from &quot;this button&quot;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Arrow: `this` comes from object that defines the function&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;res&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\n\n &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;\n  regular = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;res&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n\n  arrow = &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;res&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;innerHTML&lt;/span&gt; = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn1&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, regular);\n  &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;btn2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;click&quot;&lt;/span&gt;, arrow);\n &lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif8&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;h2&gt;&lt;code&gt;ES6&lt;/code&gt; Arrow functions:&lt;/h2&gt;\n\n&lt;p&gt;In javascript the &lt;code&gt;=&amp;gt;&lt;/code&gt; is the symbol of an arrow function expression. A arrow function expression does not have its own &lt;code&gt;this&lt;/code&gt; binding and therefore cannot be used as a constructor function. for example:&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; words = &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi from outside object&apos;&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; obj = {\n  &lt;span class=&quot;hljs-attr&quot;&gt;words&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;hi from inside object&apos;&lt;/span&gt;,\n  &lt;span class=&quot;hljs-attr&quot;&gt;talk1&lt;/span&gt;: &lt;span class=&quot;hljs-function&quot;&gt;() =&amp;gt;&lt;/span&gt; {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;words&lt;/span&gt;)},\n  &lt;span class=&quot;hljs-attr&quot;&gt;talk2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;words&lt;/span&gt;)}\n}\n\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;talk1&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// doesn&apos;t have its own this binding, this === window&lt;/span&gt;\nobj.&lt;span class=&quot;hljs-title function_&quot;&gt;talk2&lt;/span&gt;();  &lt;span class=&quot;hljs-comment&quot;&gt;// does have its own this binding, this is obj&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif9&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n\n&lt;h2&gt;Rules of using arrow functions:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If there is &lt;strong&gt;exactly&lt;/strong&gt; one argument you can omit the parentheses of the argument.&lt;/li&gt;\n&lt;li&gt;If you return an expression and do this on the same line you can omit the &lt;code&gt;{}&lt;/code&gt; and the &lt;code&gt;return&lt;/code&gt; statement&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;times2&lt;/span&gt; = val =&amp;gt; val * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;  \n&lt;span class=&quot;hljs-comment&quot;&gt;// It is on the same line and returns an expression therefore the {} are ommited and the expression returns implictly&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// there also is only one argument, therefore the parentheses around the argument are omitted&lt;/span&gt;\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-title function_&quot;&gt;times2&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif10&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;JavaScript arrow functions are roughly the equivalent of lambda functions in python or blocks in Ruby. &lt;strong&gt;These are anonymous functions&lt;/strong&gt; with their own special syntax and &lt;strong&gt;operate in the context of their enclosing scope&lt;/strong&gt;. This mean they do not have their own &quot;this&quot; but instead access the one from the immediate enclosing function.&lt;/p&gt;\n&lt;p&gt;From the &lt;a href=&quot;https://262.ecma-international.org/11.0/#sec-arrow-function-definitions-runtime-semantics-evaluation&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMA standard&lt;/a&gt;:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;An ArrowFunction does not define local bindings for &lt;strong&gt;arguments&lt;/strong&gt;,\n&lt;strong&gt;super&lt;/strong&gt;, &lt;strong&gt;this&lt;/strong&gt;, or &lt;strong&gt;new.target&lt;/strong&gt;. Any reference to arguments, super, this, or new.target within an ArrowFunction must resolve to a\nbinding in a lexically enclosing environment. Typically this will be\nthe Function Environment of an immediately enclosing function.&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;p&gt;Often you can read &quot;an arrow function expression is a compact alternative to a traditional function expression&quot;, this is not a correct. &lt;strong&gt;Arrow function are NOT a shorthand for traditional function&lt;/strong&gt;, they behave differently that traditional function.&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Traditional Function&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Create their own scope inside the function&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Arrow Function &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Do NOT create their own scope&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// (Each step along the way is a valid &quot;arrow function&quot;)&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 1. Remove the word &quot;function&quot; and place arrow between the argument and opening body bracket&lt;/span&gt;\n(a) =&amp;gt; {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 2. Remove the body braces and word &quot;return&quot; -- the return is implied.&lt;/span&gt;\n(a) =&amp;gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// 3. Remove the argument parentheses (only valid with exactly one argument)&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt; =&amp;gt;&lt;/span&gt; a + &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n    "],"437":["\n&lt;p&gt;Welcome to every C/C++ programmer&apos;s bestest friend: &lt;strong&gt;Undefined Behavior&lt;/strong&gt;. &lt;/p&gt;\n\n&lt;p&gt;There is a lot that is not specified by the language standard, for a variety of reasons. This is one of them.&lt;/p&gt;\n\n&lt;p&gt;In general, whenever you encounter undefined behavior, &lt;em&gt;anything&lt;/em&gt; might happen. The application may crash, it may freeze, it may eject your CD-ROM drive or make demons come out of your nose. It may format your harddrive or email all your porn to your grandmother.&lt;/p&gt;\n\n&lt;p&gt;It may even, if you are really unlucky, &lt;em&gt;appear&lt;/em&gt; to work correctly.&lt;/p&gt;\n\n&lt;p&gt;The language simply says what should happen if you access the elements &lt;em&gt;within&lt;/em&gt; the bounds of an array. It is left undefined what happens if you go out of bounds. It might &lt;em&gt;seem&lt;/em&gt; to work today, on your compiler, but it is not legal C or C++, and there is no guarantee that it&apos;ll still work the next time you run the program. Or that it hasn&apos;t overwritten essential data even now, and you just haven&apos;t encountered the problems, that it &lt;em&gt;is&lt;/em&gt; going to cause  yet.&lt;/p&gt;\n\n&lt;p&gt;As for &lt;em&gt;why&lt;/em&gt; there is no bounds checking, there are a couple aspects to the answer:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;An array is a leftover from C. C arrays are about as primitive as you can get. Just a sequence of elements with contiguous addresses. There is no bounds checking because it is simply exposing raw memory. Implementing a robust bounds-checking mechanism would have been almost impossible in C.&lt;/li&gt;\n&lt;li&gt;In C++, bounds-checking is possible on class types. But an array is still the plain old C-compatible one. It is not a class. Further, C++ is also built on another rule which makes bounds-checking non-ideal. The C++ guiding principle is &quot;you don&apos;t pay for what you don&apos;t use&quot;. If your code is correct, you don&apos;t need bounds-checking, and you shouldn&apos;t be forced to pay for the overhead of runtime bounds-checking.&lt;/li&gt;\n&lt;li&gt;So C++ offers the &lt;code&gt;std::vector&lt;/code&gt; class template, which allows both. &lt;code&gt;operator[]&lt;/code&gt; is designed to be efficient. The language standard does not require that it performs bounds checking (although it does not forbid it either). A vector also has the &lt;code&gt;at()&lt;/code&gt; member function which &lt;em&gt;is guaranteed&lt;/em&gt; to perform bounds-checking. So in C++, you get the best of both worlds if you use a vector. You get array-like performance without bounds-checking, &lt;em&gt;and&lt;/em&gt; you get the ability to use bounds-checked access when you want it.&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;Using g++, you can add the command line option:  &lt;code&gt;-fstack-protector-all&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;On your example it resulted in the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&amp;gt; g++ -o t -fstack-protector-all t.cc\n&amp;gt; ./t\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\n/bin/bash: line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;15450&lt;/span&gt; Segmentation fault      ./t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It doesn&apos;t really help you find or solve the problem, but at least the segfault will let you know that &lt;em&gt;something&lt;/em&gt; is wrong.&lt;/p&gt;\n    ","\n&lt;p&gt;g++ does not check for array bounds, and you may be overwriting something with 3,4 but nothing really important, if you try with higher numbers you&apos;ll get a crash.&lt;/p&gt;\n\n&lt;p&gt;You are just overwriting parts of the stack that are not used, you could continue till you reach the end of the allocated space for the stack and it&apos;d crash eventually&lt;/p&gt;\n\n&lt;p&gt;EDIT:\nYou have no way of dealing with that, maybe a static code analyzer could reveal those failures, but that&apos;s too simple, you may have similar(but more complex) failures undetected even for static analyzers&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s undefined behavior as far as I know. Run a larger program with that and it will crash somewhere along the way. Bounds checking is not a part of raw arrays (or even std::vector).&lt;/p&gt;\n&lt;p&gt;Use std::vector with &lt;code&gt;std::vector::iterator&lt;/code&gt;&apos;s instead so you don&apos;t have to worry about it.&lt;/p&gt;\n&lt;p&gt;Edit:&lt;/p&gt;\n&lt;p&gt;Just for fun, run this and see how long until you crash:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i != &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++)\n   {\n       arr[i] = i;\n   }\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//will be lucky to ever reach this&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Edit2:&lt;/p&gt;\n&lt;p&gt;Don&apos;t run that.&lt;/p&gt;\n&lt;p&gt;Edit3:&lt;/p&gt;\n&lt;p&gt;OK, here is a quick lesson on arrays and their relationships with pointers:&lt;/p&gt;\n&lt;p&gt;When you use array indexing, you are really using a pointer in disguise (called a &quot;reference&quot;), that is automatically dereferenced. This is why instead of *(array+1), array[1] automatically returns the value at that index.&lt;/p&gt;\n&lt;p&gt;When you have a pointer to an array, like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;];\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr = arr;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then the &quot;array&quot; in the second declaration is really decaying to a pointer to the first array. This is equivalent behavior to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr = &amp;amp;arr[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;When you try to access beyond what you allocated, you are really just using a pointer to other memory (which C++ won&apos;t complain about). Taking my example program above, that is equivalent to this:&lt;/p&gt;\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; arr[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *ptr = arr;\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i != &lt;span class=&quot;hljs-number&quot;&gt;100000&lt;/span&gt;; i++, ptr++)\n   {\n       *ptr++ = i;\n   }\n\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//will be lucky to ever reach this&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The compiler won&apos;t complain because in programming, you often have to communicate with other programs, especially the operating system. This is done with pointers quite a bit.&lt;/p&gt;\n    ","\n&lt;h2&gt;Hint&lt;/h2&gt;\n\n&lt;p&gt;If you want to have fast constraint size arrays with range error check, try using &lt;a href=&quot;http://www.boost.org/doc/libs/1_39_0/doc/html/array.html&quot; rel=&quot;noreferrer&quot;&gt;boost::array&lt;/a&gt;, (also &lt;a href=&quot;http://beans.seartipy.com/2006/12/10/getting-started-with-c-tr1-libraries/&quot; rel=&quot;noreferrer&quot;&gt;std::tr1::array&lt;/a&gt; from &lt;code&gt;&amp;lt;tr1/array&amp;gt;&lt;/code&gt; it will be standard container in next C++ specification). It&apos;s much faster then std::vector. It reserve memory on heap or inside class instance, just like int array[].&lt;br&gt;\nThis is simple sample code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;boost/array.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    boost::array&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,2&amp;gt; array;\n    array.&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// checking index is inside range&lt;/span&gt;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// no error check, as fast as int array[2];&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n       &lt;span class=&quot;hljs-comment&quot;&gt;// index is inside range&lt;/span&gt;\n       std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;array.at(0) = &quot;&lt;/span&gt; &amp;lt;&amp;lt; array.&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; std::endl;\n\n       &lt;span class=&quot;hljs-comment&quot;&gt;// index is outside range, throwing exception&lt;/span&gt;\n       std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;array.at(2) = &quot;&lt;/span&gt; &amp;lt;&amp;lt; array.&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;lt;&amp;lt; std::endl; \n\n       &lt;span class=&quot;hljs-comment&quot;&gt;// never comes here&lt;/span&gt;\n       std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;array.at(1) = &quot;&lt;/span&gt; &amp;lt;&amp;lt; array.&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; std::endl;  \n    }\n    &lt;span class=&quot;hljs-built_in&quot;&gt;catch&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; std::out_of_range&amp;amp; r)\n    {\n        std::cout &amp;lt;&amp;lt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Something goes wrong: &quot;&lt;/span&gt; &amp;lt;&amp;lt; r.&lt;span class=&quot;hljs-built_in&quot;&gt;what&lt;/span&gt;() &amp;lt;&amp;lt; std::endl;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This program will print:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;array.&lt;span class=&quot;hljs-built_in&quot;&gt;at&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nSomething goes wrong: array&amp;lt;&amp;gt;: index out of range\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;C or C++ will not check the bounds of an array access.&lt;/p&gt;\n\n&lt;p&gt;You are allocating the array on the stack.  Indexing the array via &lt;code&gt;array[3]&lt;/code&gt; is equivalent to *&lt;code&gt;(array + 3)&lt;/code&gt;, where array is a pointer to &amp;amp;array[0].  This will result in undefined behavior.&lt;/p&gt;\n\n&lt;p&gt;One way to catch this &lt;strong&gt;sometimes&lt;/strong&gt; in C is to use a static checker, such as &lt;strong&gt;splint&lt;/strong&gt;.  If you run:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;splint +bounds array.c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;on,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then you will get the warning:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;array.c: (in function main)\n  array.c:5:9: Likely out-of-bounds\n  store:\n      array[1]\n      Unable to resolve constraint:\n      requires 0 &amp;gt;= 1\n       needed to satisfy precondition:\n      requires maxSet(array @ array.c:5:9) &amp;gt;= 1   A memory write may\n  write to an address beyond the\n  allocated buffer.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Run this through &lt;a href=&quot;http://valgrind.org/&quot; rel=&quot;nofollow noreferrer&quot;&gt;Valgrind&lt;/a&gt; and you might see an error.&lt;/p&gt;\n\n&lt;p&gt;As Falaina pointed out, valgrind does not detect many instances of stack corruption.  I just tried the sample under valgrind, and it does indeed report zero errors.  However, Valgrind can be instrumental in finding many other types of memory problems, it&apos;s just not particularly useful in this case unless you modify your bulid to include the --stack-check option.  If you build and run the sample as &lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;g++ --stack-check -W -Wall errorRange.cpp -o errorRange\nvalgrind ./errorRange\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;valgrind &lt;strong&gt;will&lt;/strong&gt; report an error.&lt;/p&gt;\n    ","\n&lt;p&gt;You are certainly overwriting your stack, but the program is simple enough that effects of this go unnoticed.&lt;/p&gt;\n    ","\n&lt;p&gt;libstdc++, which is part of gcc, has a special &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;debug mode&lt;/a&gt; for error checking. It is enabled by  compiler flag &lt;code&gt;-D_GLIBCXX_DEBUG&lt;/code&gt;. Among other things it does bounds checking for &lt;code&gt;std::vector&lt;/code&gt; at the cost of performance. Here is &lt;a href=&quot;https://wandbox.org/permlink/XaTJtZdqier9zrI4&quot; rel=&quot;nofollow noreferrer&quot;&gt;online demo&lt;/a&gt; with recent version of gcc.&lt;/p&gt;\n\n&lt;p&gt;So actually you can do bounds checking with libstdc++ debug mode but you should do it only when testing because it costs notable performance compared to normal libstdc++ mode.&lt;/p&gt;\n    ","\n&lt;p&gt;Undefined behavior working in your favor.  Whatever memory you&apos;re clobbering apparently isn&apos;t holding anything important.  Note that C and C++ do not do bounds checking on arrays, so stuff like that isn&apos;t going to be caught at compile or run time.  &lt;/p&gt;\n    ","\n&lt;p&gt;When you write &apos;array[index]&apos; in C it translates it to machine instructions.&lt;/p&gt;\n\n&lt;p&gt;The translation is goes something like: &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&apos;get the address of array&apos;&lt;/li&gt;\n&lt;li&gt;&apos;get the size of the type of objects array is made up of&apos;&lt;/li&gt;\n&lt;li&gt;&apos;multiply the size of the type by index&apos;&lt;/li&gt;\n&lt;li&gt;&apos;add the result to the address of array&apos;&lt;/li&gt;\n&lt;li&gt;&apos;read what&apos;s at the resulting address&apos;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;The result addresses something which may, or may not, be part of the array. In exchange for the blazing speed of machine instructions you lose the safety net of the computer checking things for you. If you&apos;re meticulous and careful it&apos;s not a problem. If you&apos;re sloppy or make a mistake you get burnt. Sometimes it might generate an invalid instruction that causes an exception, sometimes not.&lt;/p&gt;\n    ","\n&lt;p&gt;When you initialize the array with &lt;code&gt;int array[2]&lt;/code&gt;, space for 2 integers is allocated; but the identifier &lt;code&gt;array&lt;/code&gt; simply points to the beginning of that space. When you then access &lt;code&gt;array[3]&lt;/code&gt; and &lt;code&gt;array[4]&lt;/code&gt;, the compiler then simply increments that address to point to where those values would be, if the array was long enough; try accessing something like &lt;code&gt;array[42]&lt;/code&gt; without initializing it first, you&apos;ll end up getting whatever value happened to already be in memory at that location.&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;More info on pointers/arrays: &lt;a href=&quot;http://home.netcom.com/~tjensen/ptr/pointers.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://home.netcom.com/~tjensen/ptr/pointers.htm&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;As I understand, local variables are allocated on stack, so going out of bounds on your own stack can only overwrite some other local variable, unless you go oob too much and exceed your stack size.\nSince you have no other variables declared in your function - it does not cause any side effects. Try declaring another variable/array right after your first one and see what will happen with it.&lt;/p&gt;\n    ","\n&lt;p&gt;A nice approach that i have seen often and I had been used actually is to inject some NULL type element (or a created one, like &lt;code&gt;uint THIS_IS_INFINITY = 82862863263;&lt;/code&gt;) at end of the array.&lt;/p&gt;\n\n&lt;p&gt;Then at the loop condition check, &lt;code&gt;TYPE *pagesWords&lt;/code&gt; is some kind of pointer array:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; pagesWordsLength = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(pagesWords) / &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(pagesWords[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;realloc&lt;/span&gt; (pagesWords, &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(pagesWords[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]) * (pagesWordsLength + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n\npagesWords[pagesWordsLength] = MY_NULL;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (uint i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1000&lt;/span&gt;; i++)\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pagesWords[i] == MY_NULL)\n  {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution won&apos;t word if array is filled with &lt;code&gt;struct&lt;/code&gt; types.&lt;/p&gt;\n    ","\n&lt;p&gt;As mentioned now in the question using std::vector::at will solve the problem and make a bound check before accessing.&lt;/p&gt;\n\n&lt;p&gt;If you need a constant size array that is located on the stack as your first code use the C++11 new container std::array; as vector there is std::array::at function. In fact the function exists in all standard containers in which it have a meaning,i.e, where operator[] is defined :( deque, map, unordered_map) with the exception of std::bitset in which it is called std::bitset::test.&lt;/p&gt;\n    ","\n&lt;p&gt;If you change your program slightly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cpp s-code-block&quot;&gt;&lt;code class=&quot;hljs language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;namespace&lt;/span&gt; std;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n&lt;/span&gt;{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; array[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;];\n    INT NOTHING;\n    CHAR FOO[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;];\n    &lt;span class=&quot;hljs-built_in&quot;&gt;STRCPY&lt;/span&gt;(FOO, &lt;span class=&quot;hljs-string&quot;&gt;&quot;BAR&quot;&lt;/span&gt;);\n    array[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n    array[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;;\n    cout &amp;lt;&amp;lt; array[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; array[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] &amp;lt;&amp;lt; endl;\n    COUT &amp;lt;&amp;lt; FOO &amp;lt;&amp;lt; ENDL;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Changes in capitals -- put those in lower case if you&apos;re going to try this.)&lt;/p&gt;\n\n&lt;p&gt;You will see that the variable &lt;strong&gt;foo&lt;/strong&gt; has been trashed.  Your code &lt;strong&gt;will&lt;/strong&gt; store values into the nonexistent array[3] and array[4], and be able to properly retrieve them, but the actual storage used will be from &lt;strong&gt;foo&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;So you can &quot;get away&quot; with exceeding the bounds of the array in your original example, but at the cost of causing damage elsewhere -- damage which may prove to be &lt;strong&gt;very&lt;/strong&gt; hard to diagnose.&lt;/p&gt;\n\n&lt;p&gt;As to why there is no automatic bounds checking -- a correctly written program does not need it.  Once that has been done, there is no reason to do run-time bounds checking and doing so would just slow down the program.  Best to get that all figured out during design and coding.&lt;/p&gt;\n\n&lt;p&gt;C++ is based on C, which was designed to be as close to assembly language as possible.&lt;/p&gt;\n    ","\n&lt;p&gt;when you declare int array[2]; you reserve 2 memory spaces of 4 bytes each(32bit program).\nif you type array[4] in your code it still corresponds to a valid call but only at run time will it throw an unhandled exception.  C++ uses manual memory management. This is actually a security flaw that was used for hacking programs&lt;/p&gt;\n\n&lt;p&gt;this can help understanding:&lt;/p&gt;\n\n&lt;p&gt;int * somepointer;   &lt;/p&gt;\n\n&lt;p&gt;somepointer[0]=somepointer[5];&lt;/p&gt;\n    ","\n&lt;p&gt;The behavior can depend on your system. Typically, you will have a margin for out of bounds, sometimes with value of 0 or garbage values. For the details you can check with memory allocation mechanism used in your OS. On top of that, if you use the programming language like c/c++, it will not check the bounds when you using some containers, like array. So, you will meet &quot;undefined event&quot; because you do not know what the OS did below the surface. But like the programming language Java, it will check the bound. If you step outside of the bound, you will get an exception.&lt;/p&gt;\n    "],"438":["\n&lt;p&gt;Unfortunately MySQL does not have a &lt;code&gt;PIVOT&lt;/code&gt; function which is basically what you are trying to do. So you will need to use an aggregate function with a &lt;code&gt;CASE&lt;/code&gt; statement:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; pt.partner_name,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; pd.product_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Product A&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) ProductA,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; pd.product_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Product B&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) ProductB,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; pd.product_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Product C&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) ProductC,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; pd.product_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Product D&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) ProductD,\n  &lt;span class=&quot;hljs-built_in&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;when&lt;/span&gt; pd.product_name &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Product E&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;END&lt;/span&gt;) ProductE\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; partners pt\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; sales s\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; pt.part_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; s.partner_id\n&lt;span class=&quot;hljs-keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;join&lt;/span&gt; products pd\n  &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; s.product_id &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; pd.prod_id\n&lt;span class=&quot;hljs-keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; pt.partner_name\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://www.db-fiddle.com/f/8SLRh8FtxC1KPbZUazt7TH/0&quot; rel=&quot;noreferrer&quot;&gt;SQL Demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since you do not know the Products you will probably want to perform this dynamically. This can be done using prepared statements. &lt;/p&gt;\n\n&lt;p&gt;With dynamic pivot tables (transform rows to columns) your code would look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-sql s-code-block&quot;&gt;&lt;code class=&quot;hljs language-sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;SELECT&lt;/span&gt;\n  GROUP_CONCAT(&lt;span class=&quot;hljs-keyword&quot;&gt;DISTINCT&lt;/span&gt;\n    CONCAT(\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos;count(case when Product_Name = &apos;&apos;&apos;&lt;/span&gt;,\n      Product_Name,\n      &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos; then 1 end) AS &apos;&lt;/span&gt;,\n      replace(Product_Name, &lt;span class=&quot;hljs-string&quot;&gt;&apos; &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;)\n    )\n  ) &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; products;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt; &lt;span class=&quot;hljs-operator&quot;&gt;=&lt;/span&gt; CONCAT(&lt;span class=&quot;hljs-string&quot;&gt;&apos;SELECT pt.partner_name, &apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos; from partners pt\nleft join sales s\n  on pt.part_id = s.partner_id\nleft join products pd\n  on s.product_id = pd.prod_id\ngroup by pt.partner_name&apos;&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;PREPARE&lt;/span&gt; stmt &lt;span class=&quot;hljs-keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;@sql&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;EXECUTE&lt;/span&gt; stmt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;DEALLOCATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;PREPARE&lt;/span&gt; stmt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See &lt;a href=&quot;https://www.db-fiddle.com/f/nDe3oQ3VdtfS5QDokieHN4/0&quot; rel=&quot;noreferrer&quot;&gt;SQL Demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s probably worth noting that &lt;code&gt;GROUP_CONCAT&lt;/code&gt; is by default limited to 1024 bytes. You can work around this by setting it higher for the duration of your procedure, ie. &lt;code&gt;SET @@group_concat_max_len = 32000;&lt;/code&gt; &lt;/p&gt;\n    "],"439":["\n&lt;p&gt;Once you grasp that &lt;strong&gt;&lt;code&gt;[&lt;/code&gt;&lt;/strong&gt; is a &lt;strong&gt;&lt;em&gt;command&lt;/em&gt;&lt;/strong&gt;, a whole lot becomes clearer!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;code&gt;[&lt;/code&gt;&lt;/strong&gt; is another way to spell &quot;&lt;code&gt;test&lt;/code&gt;&quot;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt; [\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However while they do &lt;em&gt;exactly&lt;/em&gt; the same, &lt;code&gt;test&lt;/code&gt; turns out to have a more detailed help page. Check&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;test&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...for more information.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Furthermore note that I&apos;m using, by intention, &lt;code&gt;help test&lt;/code&gt; and not &lt;code&gt;man test&lt;/code&gt;. That&apos;s because &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; are shell builtin commands nowadays. Their feature set might differ from &lt;code&gt;/bin/test&lt;/code&gt; and &lt;code&gt;/bin/[&lt;/code&gt; from coreutils which are the commands described in the &lt;code&gt;man&lt;/code&gt; pages.&lt;/p&gt;\n    ","\n&lt;p&gt;From &lt;a href=&quot;https://stackoverflow.com/questions/1035396/bash-shell-script-syntax-error&quot;&gt;another question&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;A bit of history: this is because &apos;[&apos; was historically not a shell-built-in but a separate executable that received the expresson as arguments and returned a result. If you didn&apos;t surround the &apos;[&apos; with space, the shell would be searching $PATH for a different filename (and not find it) .  &lt;a href=&quot;https://stackoverflow.com/users/19405/andrew-medico&quot;&gt;Andrew Medico&lt;/a&gt; Jun 24 &apos;09 at 1:13&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;&lt;code&gt;[&lt;/code&gt; is a command and &lt;code&gt;$CHOICE&lt;/code&gt; should be an argument, but by doing &lt;code&gt;[$CHOICE&lt;/code&gt; (without any space between &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;$CHOICE&lt;/code&gt;) you are trying to run a command named &lt;code&gt;[$CHOICE&lt;/code&gt;. The syntax for command is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;command&lt;/span&gt; arguments separated with space\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;[&lt;/code&gt; is a &lt;code&gt;test&lt;/code&gt; command. So it requires space.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s worth noting that [ is also used in glob matching, which can get you into trouble.&lt;/p&gt;\n&lt;pre class=&quot;lang-bash s-code-block&quot;&gt;&lt;code class=&quot;hljs language-bash&quot;&gt;$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; [12345]\n[12345]\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; oops &amp;gt;3\n$ &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; [12345]\n3\n&lt;/code&gt;&lt;/pre&gt;\n    "],"440":["\n&lt;p&gt;This should do the trick:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewTop = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewBottom = docViewTop + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemBottom = elemTop + $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemBottom &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Simple Utility Function&lt;/strong&gt;\nThis will allow you to call a utility function that accepts the element you&apos;re looking for and if you want the element to be fully in view or partially.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;Utils&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n\n}\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Utils&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;prototype&lt;/span&gt;&lt;/span&gt; = {\n    &lt;span class=&quot;hljs-attr&quot;&gt;constructor&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Utils&lt;/span&gt;,\n    &lt;span class=&quot;hljs-attr&quot;&gt;isElementInView&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;element, fullyInView&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pageTop = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; pageBottom = pageTop + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementTop = $(element).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementBottom = elementTop + $(element).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (fullyInView === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((pageTop &amp;lt; elementTop) &amp;amp;&amp;amp; (pageBottom &amp;gt; elementBottom));\n        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elementTop &amp;lt;= pageBottom) &amp;amp;&amp;amp; (elementBottom &amp;gt;= pageTop));\n        }\n    }\n};\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Utils&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Utils&lt;/span&gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isElementInView = &lt;span class=&quot;hljs-title class_&quot;&gt;Utils&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;isElementInView&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#flyout-left-container&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (isElementInView) {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;in view&apos;&lt;/span&gt;);\n} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n    &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;out of view&apos;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/488073/643514&quot;&gt;This answer&lt;/a&gt; in Vanilla:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rect = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = rect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemBottom = rect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Only completely visible elements return true:&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isVisible = (elemTop &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (elemBottom &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;);\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Partially visible elements return true:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//isVisible = elemTop &amp;lt; window.innerHeight &amp;amp;&amp;amp; elemBottom &amp;gt;= 0;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; isVisible;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Update: use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API&quot; rel=&quot;noreferrer&quot;&gt;IntersectionObserver&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;The best method I have found so far is the &lt;a href=&quot;https://github.com/morr/jquery.appear&quot; rel=&quot;noreferrer&quot;&gt;jQuery appear plugin&lt;/a&gt;. Works like a charm.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Mimics a custom &quot;appear&quot; event, which fires when an element scrolls into view or otherwise becomes visible to the user.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#foo&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;appear&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n  $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;text&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Hello world&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;This plugin can be used to prevent unnecessary requests for content that&apos;s hidden or outside the viewable area.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;h1&gt;Using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;IntersectionObserver&lt;/strong&gt;&lt;/a&gt; API&lt;/h1&gt;\n&lt;h3&gt;(native in modern browsers)&lt;/h3&gt;\n&lt;hr&gt;\n&lt;p&gt;It&apos;s easy &amp;amp; efficient to determine if an element is visible in the viewport, or in any scrollable container, by using an &lt;em&gt;observer&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;The need to attach a &lt;code&gt;scroll&lt;/code&gt; event and manually checking on the event callback is eliminated, which is more efficient:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// define an observer instance&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; observer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IntersectionObserver&lt;/span&gt;(onIntersection, {\n  &lt;span class=&quot;hljs-attr&quot;&gt;root&lt;/span&gt;: &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;,   &lt;span class=&quot;hljs-comment&quot;&gt;// default is the viewport&lt;/span&gt;\n  &lt;span class=&quot;hljs-attr&quot;&gt;threshold&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;.5&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// percentage of taregt&apos;s visible area. Triggers &quot;onIntersection&quot;&lt;/span&gt;\n})\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// callback is called on intersection change&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;onIntersection&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entries, opts&lt;/span&gt;){\n  entries.&lt;span class=&quot;hljs-title function_&quot;&gt;forEach&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;entry&lt;/span&gt; =&amp;gt;&lt;/span&gt;  \n    entry.&lt;span class=&quot;hljs-property&quot;&gt;target&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;classList&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;toggle&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;visible&apos;&lt;/span&gt;, entry.&lt;span class=&quot;hljs-property&quot;&gt;isIntersecting&lt;/span&gt;)\n  )\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Use the observer to observe an element&lt;/span&gt;\nobserver.&lt;span class=&quot;hljs-title function_&quot;&gt;observe&lt;/span&gt;( &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.box&apos;&lt;/span&gt;) )\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// To stop observing:&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// observer.unobserve(entry.target)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-css lang-css s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;span&lt;/span&gt;{ &lt;span class=&quot;hljs-attribute&quot;&gt;position&lt;/span&gt;:fixed; &lt;span class=&quot;hljs-attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; }\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;{ &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:red; &lt;span class=&quot;hljs-attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1000px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;transition&lt;/span&gt;:.&lt;span class=&quot;hljs-number&quot;&gt;75s&lt;/span&gt;; }\n&lt;span class=&quot;hljs-selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.visible&lt;/span&gt;{ &lt;span class=&quot;hljs-attribute&quot;&gt;background&lt;/span&gt;:green; &lt;span class=&quot;hljs-attribute&quot;&gt;border-radius&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;50%&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;\n&lt;pre class=&quot;snippet-code-html lang-html s-code-block&quot;&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Scroll both Vertically &lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;amp;&lt;/span&gt; Horizontally...&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&apos;box&apos;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif1&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;Supported by modern browsers, including mobile browsers. Not supported in IE - &lt;a href=&quot;http://caniuse.com/#search=IntersectionObserver&quot; rel=&quot;noreferrer&quot;&gt;View browsers support table&lt;/a&gt;&lt;/h3&gt;\n    ","\n&lt;p&gt;Here&apos;s my pure JavaScript solution that works if it&apos;s hidden inside a scrollable container too.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/W33YR/411/&quot; rel=&quot;noreferrer&quot;&gt;Demo here&lt;/a&gt; (try resizing the window too)&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visibleY = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rect = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;(), top = rect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;, height = rect.&lt;span class=&quot;hljs-property&quot;&gt;height&lt;/span&gt;, \n    el = el.&lt;span class=&quot;hljs-property&quot;&gt;parentNode&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Check if bottom of the element is off the page&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (rect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n  &lt;span class=&quot;hljs-comment&quot;&gt;// Check its within the document viewport&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (top &amp;gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;clientHeight&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; {\n    rect = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (top &amp;lt;= rect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Check if the element is out of view due to a container scrolling&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ((top + height) &amp;lt;= rect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;\n    el = el.&lt;span class=&quot;hljs-property&quot;&gt;parentNode&lt;/span&gt;\n  } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (el != &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;)\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;EDIT 2016-03-26: I&apos;ve updated the solution to account for scrolling past the element so it&apos;s hidden above the top of the scroll-able container.&lt;/em&gt;\n&lt;em&gt;EDIT 2018-10-08: Updated to handle when scrolled out of view above the screen.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Plain vanilla to check if element (&lt;code&gt;el&lt;/code&gt;) is visible in scrollable div (&lt;code&gt;holder&lt;/code&gt;)&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isElementVisible&lt;/span&gt; (el, holder) {\n  holder = holder || &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { top, bottom, height } = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; holderRect = holder.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;()\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; top &amp;lt;= holderRect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;\n    ? holderRect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; - top &amp;lt;= height\n    : bottom - holderRect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt;= height\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Usage with jQuery:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; el = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;tr:last&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; holder = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;table&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isVisible = &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(el, holder);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;jQuery Waypoints plugin goes very nice here.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.entry&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;waypoint&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;You have scrolled to an entry.&apos;&lt;/span&gt;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There are some examples on the &lt;a href=&quot;http://imakewebthings.github.com/jquery-waypoints&quot;&gt;site of the plugin&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;How about&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isInView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; - $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;() &amp;lt; $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;() ;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After that you can trigger whatever you want once the element is in view like this &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scroll&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;isInView&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.classOfDivToCheck&apos;&lt;/span&gt;)))\n      &lt;span class=&quot;hljs-comment&quot;&gt;//fire whatever you what &lt;/span&gt;\n      &lt;span class=&quot;hljs-title function_&quot;&gt;dothis&lt;/span&gt;();\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That works for me just fine &lt;/p&gt;\n    ","\n&lt;p&gt;Tweeked Scott Dowding&apos;s cool function for my requirement- \nthis is used for finding if the element has just scrolled into the screen i.e it&apos;s top edge .&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewTop = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewBottom = docViewTop + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemTop &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://www.webresourcesdepot.com&quot; rel=&quot;noreferrer&quot;&gt;WebResourcesDepot&lt;/a&gt; wrote &lt;a href=&quot;http://www.webresourcesdepot.com/load-content-while-scrolling-with-jquery/&quot; rel=&quot;noreferrer&quot;&gt;a script to load while scrolling&lt;/a&gt; that uses &lt;a href=&quot;http://www.jquery.com&quot; rel=&quot;noreferrer&quot;&gt;jQuery&lt;/a&gt; some time ago. You can view their &lt;a href=&quot;http://www.webresourcesdepot.com/dnspinger/&quot; rel=&quot;noreferrer&quot;&gt;Live Demo Here&lt;/a&gt;. The beef of their functionality was this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scroll&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;  ($(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;() == $(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;() - $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;()){\n    &lt;span class=&quot;hljs-title function_&quot;&gt;lastAddedLiveFunc&lt;/span&gt;();\n  }\n});\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lastAddedLiveFunc&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) { \n  $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div#lastPostsLoader&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;img src=&quot;images/bigLoader.gif&quot;&amp;gt;&apos;&lt;/span&gt;);\n  $.&lt;span class=&quot;hljs-title function_&quot;&gt;post&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;default.asp?action=getLastPosts&amp;amp;lastPostID=&quot;&lt;/span&gt;+$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.wrdLatest:last&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;attr&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;),\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;data&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data != &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) {\n          $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.wrdLatest:last&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;after&lt;/span&gt;(data);         \n        }\n      $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;div#lastPostsLoader&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;empty&lt;/span&gt;();\n    });\n};\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Most answers here don&apos;t take into account that an element can also be hidden because it is scrolled out of view of a div, not only of the whole page.&lt;/p&gt;\n\n&lt;p&gt;To cover that possibility, you basically have to check if the element is positioned inside the bounds of each of its parents.&lt;/p&gt;\n\n&lt;p&gt;This solution does exactly that:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element, percentX, percentY&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; tolerance = &lt;span class=&quot;hljs-number&quot;&gt;0.01&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;//needed because the rects returned by getBoundingClientRect provide the position up to 10 decimals&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(percentX == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n        percentX = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(percentY == &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n        percentY = &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementRect = element.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; parentRects = [];\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;parentElement&lt;/span&gt; != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;){\n        parentRects.&lt;span class=&quot;hljs-title function_&quot;&gt;push&lt;/span&gt;(element.&lt;span class=&quot;hljs-property&quot;&gt;parentElement&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;());\n        element = element.&lt;span class=&quot;hljs-property&quot;&gt;parentElement&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visibleInAllParents = parentRects.&lt;span class=&quot;hljs-title function_&quot;&gt;every&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;parentRect&lt;/span&gt;){\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visiblePixelX = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;min&lt;/span&gt;(elementRect.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt;, parentRect.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt;) - &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;(elementRect.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt;, parentRect.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visiblePixelY = &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;min&lt;/span&gt;(elementRect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt;, parentRect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt;) - &lt;span class=&quot;hljs-title class_&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;max&lt;/span&gt;(elementRect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;, parentRect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visiblePercentageX = visiblePixelX / elementRect.&lt;span class=&quot;hljs-property&quot;&gt;width&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visiblePercentageY = visiblePixelY / elementRect.&lt;span class=&quot;hljs-property&quot;&gt;height&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; visiblePercentageX + tolerance &amp;gt; percentX &amp;amp;&amp;amp; visiblePercentageY + tolerance &amp;gt; percentY;\n    });\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; visibleInAllParents;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It also lets you specify to what percentage it has to be visible in each direction.&lt;br&gt;\nIt doesn&apos;t cover the possibility that it may be hidden due to other factors, like &lt;code&gt;display: hidden&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This should work in all major browsers, since it only uses &lt;a href=&quot;http://caniuse.com/#feat=getboundingclientrect&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;getBoundingClientRect&lt;/code&gt;&lt;/a&gt;. I personally tested it in Chrome and Internet Explorer 11.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;isScrolledIntoView&lt;/strong&gt; is a very needful function, so I tried it, it works for elements not heigher than the viewport, but if the element is bigger as the viewport it does not work. To fix this easily change the condition &lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemBottom &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (docViewBottom &amp;gt;= elemTop &amp;amp;&amp;amp; docViewTop &amp;lt;= elemBottom);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See demo here: &lt;a href=&quot;http://jsfiddle.net/RRSmQ/&quot;&gt;http://jsfiddle.net/RRSmQ/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;This considers any padding, border or margin the element has as well as elements larger than the viewport itself.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;inViewport&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;$ele&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; lBound = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;(),\n        uBound = lBound + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;(),\n        top = $ele.&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;,\n        bottom = top + $ele.&lt;span class=&quot;hljs-title function_&quot;&gt;outerHeight&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (top &amp;gt; lBound &amp;amp;&amp;amp; top &amp;lt; uBound)\n        || (bottom &amp;gt; lBound &amp;amp;&amp;amp; bottom &amp;lt; uBound)\n        || (lBound &amp;gt;= top &amp;amp;&amp;amp; lBound &amp;lt;= bottom)\n        || (uBound &amp;gt;= top &amp;amp;&amp;amp; uBound &amp;lt;= bottom);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To call it use something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; $myElement = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#my-element&apos;&lt;/span&gt;),\n    canUserSeeIt = &lt;span class=&quot;hljs-title function_&quot;&gt;inViewport&lt;/span&gt;($myElement);\n\n&lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(canUserSeeIt); &lt;span class=&quot;hljs-comment&quot;&gt;// true, if element is visible; false otherwise&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is another solution:&lt;/p&gt;\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;\n$.fn.&lt;span class=&quot;hljs-property&quot;&gt;is_on_screen&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; win = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; viewport = {\n        top : win.&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;(),\n        left : win.&lt;span class=&quot;hljs-title function_&quot;&gt;scrollLeft&lt;/span&gt;()\n    };\n    viewport.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt; = viewport.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt; + win.&lt;span class=&quot;hljs-title function_&quot;&gt;width&lt;/span&gt;();\n    viewport.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; = viewport.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; + win.&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; bounds = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;();\n    bounds.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt; = bounds.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;outerWidth&lt;/span&gt;();\n    bounds.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; = bounds.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;outerHeight&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (!(viewport.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt; &amp;lt; bounds.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt; || viewport.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt; &amp;gt; bounds.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt; ||    viewport.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt; bounds.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; || viewport.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;gt; bounds.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt;));\n };\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.target&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) { &lt;span class=&quot;hljs-comment&quot;&gt;// if target element exists in DOM&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.target&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;is_on_screen&lt;/span&gt;() ) { &lt;span class=&quot;hljs-comment&quot;&gt;// if target element is visible on screen after DOM loaded&lt;/span&gt;\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.log&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div class=&quot;alert alert-success&quot;&amp;gt;target element is visible on screen&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// log info       &lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.log&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div class=&quot;alert&quot;&amp;gt;target element is not visible on screen&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// log info&lt;/span&gt;\n    }\n}\n$(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;){ &lt;span class=&quot;hljs-comment&quot;&gt;// bind window scroll event&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.target&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ) { &lt;span class=&quot;hljs-comment&quot;&gt;// if target element exists in DOM&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;( $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.target&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;is_on_screen&lt;/span&gt;() ) { &lt;span class=&quot;hljs-comment&quot;&gt;// if target element is visible on screen after DOM loaded&lt;/span&gt;\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.log&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div class=&quot;alert alert-success&quot;&amp;gt;target element is visible on screen&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// log info&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.log&apos;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;&amp;lt;div class=&quot;alert&quot;&amp;gt;target element is not visible on screen&amp;lt;/div&amp;gt;&apos;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// log info&lt;/span&gt;\n    }\n}\n});\n&amp;lt;/script&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;See it in &lt;a href=&quot;http://jsfiddle.net/webvitaly/c7nS5/light/&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSFiddle&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewTop = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;(),\n        docViewBottom = docViewTop + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;(),\n        elemTop = $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;,\n     elemBottom = elemTop + $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n   &lt;span class=&quot;hljs-comment&quot;&gt;//Is more than half of the element visible&lt;/span&gt;\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemTop + ((elemBottom - elemTop)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) &amp;gt;= docViewTop &amp;amp;&amp;amp; ((elemTop + ((elemBottom - elemTop)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)) &amp;lt;= docViewBottom));\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I needed to check visibility in elements inside scrollable DIV container&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//p = DIV container scrollable&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//e = element&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;visible_in_container&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;p, e&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; z = p.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; r = e.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Check style visiblilty and off-limits&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;opacity&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; e.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;display&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt; &amp;amp;&amp;amp;\n               e.&lt;span class=&quot;hljs-property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;visibility&lt;/span&gt; !== &lt;span class=&quot;hljs-string&quot;&gt;&apos;hidden&apos;&lt;/span&gt; &amp;amp;&amp;amp;\n               !(r.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;gt; z.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; || r.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt; z.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; ||\n                 r.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt; &amp;gt; z.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt; || r.&lt;span class=&quot;hljs-property&quot;&gt;right&lt;/span&gt; &amp;lt; z.&lt;span class=&quot;hljs-property&quot;&gt;left&lt;/span&gt;);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Building off of &lt;a href=&quot;https://stackoverflow.com/a/22480938/680394&quot;&gt;this great answer&lt;/a&gt;, you can simplify it a little further using ES2015+:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; { top, bottom } = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;()\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; top &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; bottom &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you don&apos;t care about the top going out of the window and just care that the bottom has been viewed, this can be simplified to&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isSeen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or even the one-liner&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isSeen&lt;/span&gt; = el =&amp;gt; el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;There is a &lt;a href=&quot;https://github.com/protonet/jquery.inview&quot; rel=&quot;nofollow noreferrer&quot;&gt;plugin for jQuery called &lt;strong&gt;inview&lt;/strong&gt;&lt;/a&gt; which adds a new &quot;inview&quot; event.&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;Here is some code for a jQuery plugin that doesn&apos;t use events:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;($.expr[&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;],{\n    &lt;span class=&quot;hljs-attr&quot;&gt;inView&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;a&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; st = (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollTop&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollTop&lt;/span&gt;),\n            ot = $(a).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;,\n            wh = (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; &amp;lt; $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;()) ? &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; : $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ot &amp;gt; st &amp;amp;&amp;amp; ($(a).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;() + ot) &amp;lt; (st + wh);\n    }\n});\n\n(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt; $ &lt;/span&gt;) {\n    $.fn.&lt;span class=&quot;hljs-property&quot;&gt;inView&lt;/span&gt; = &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; st = (&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollTop&lt;/span&gt; || &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollTop&lt;/span&gt;),\n        ot = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;,\n        wh = (&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; &amp;lt; $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;()) ? &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; : $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ot &amp;gt; st &amp;amp;&amp;amp; ($(&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;() + ot) &amp;lt; (st + wh);\n    };\n})( jQuery );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I found this in a comment here ( &lt;a href=&quot;http://remysharp.com/2009/01/26/element-in-view-event-plugin/&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://remysharp.com/2009/01/26/element-in-view-event-plugin/&lt;/a&gt; ) by a bloke called James&lt;/p&gt;\n    ","\n&lt;p&gt;The easiest solution I found for this is &lt;strong&gt;Intersection Observer API&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; observer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IntersectionObserver&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;entries&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(entries[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;hljs-property&quot;&gt;isIntersecting&lt;/span&gt; === &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;)\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Element has just become visible in screen&apos;&lt;/span&gt;);\n}, { &lt;span class=&quot;hljs-attr&quot;&gt;threshold&lt;/span&gt;: [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] });\n\nobserver.&lt;span class=&quot;hljs-title function_&quot;&gt;observe&lt;/span&gt;(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#main-container&quot;&lt;/span&gt;));\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I have such a method in my application, but it does not use jQuery:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* Get the TOP position of a given element. */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getPositionTop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; offset = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt;(element) {\n        offset += element[&lt;span class=&quot;hljs-string&quot;&gt;&quot;offsetTop&quot;&lt;/span&gt;];\n        element = element.&lt;span class=&quot;hljs-property&quot;&gt;offsetParent&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; offset;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/* Is a given element is visible or not? */&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isElementVisible&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;eltId&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elt = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getElementById&lt;/span&gt;(eltId);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!elt) {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Element not found.&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get the top and bottom position of the given element.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; posTop = &lt;span class=&quot;hljs-title function_&quot;&gt;getPositionTop&lt;/span&gt;(elt);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; posBottom = posTop + elt.&lt;span class=&quot;hljs-property&quot;&gt;offsetHeight&lt;/span&gt;;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Get the top and bottom position of the *visible* part of the window.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visibleTop = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollTop&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; visibleBottom = visibleTop + &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;documentElement&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;offsetHeight&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((posBottom &amp;gt;= visibleTop) &amp;amp;&amp;amp; (posTop &amp;lt;= visibleBottom));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Edit : This method works well for I.E. (at least version 6). Read the comments for compatibility with FF.&lt;/em&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;If you want to tweak this for scrolling item within another div,&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt; (elem, divID) \n\n{\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewTop = $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#&apos;&lt;/span&gt; + divID).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewBottom = docViewTop + $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#&apos;&lt;/span&gt; + divID).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemBottom = elemTop + $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemBottom &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop)); \n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can make use of jquery plugin &quot;onScreen&quot; to check if the element is in the current viewport when you scroll.\nThe plugin sets the &quot;:onScreen&quot; of the selector to true when the selector appears on the screen.\nThis is the link for the plugin which you can include in your project.\n    &quot;&lt;a href=&quot;http://benpickles.github.io/onScreen/jquery.onscreen.min.js&quot; rel=&quot;nofollow&quot;&gt;http://benpickles.github.io/onScreen/jquery.onscreen.min.js&lt;/a&gt;&quot;&lt;/p&gt;\n\n&lt;p&gt;You can try the below example which works for me.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scroll&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;($(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#div2&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;:onScreen&apos;&lt;/span&gt;)) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element appeared on Screen&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//do all your stuffs here when element is visible.&lt;/span&gt;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Element not on Screen&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-comment&quot;&gt;//do all your stuffs here when element is not visible.&lt;/span&gt;\n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;HTML Code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&amp;lt;div id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;div1&quot;&lt;/span&gt; style=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width: 400px; height: 1000px; padding-top: 20px; position: relative; top: 45px&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;br&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt; &amp;lt;br&amp;gt;\n&lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;div2&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;width: 400px; height: 200px&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;CSS:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;#div1 {\n    background-&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: red;\n}\n#div2 {\n    background-&lt;span class=&quot;hljs-attr&quot;&gt;color&lt;/span&gt;: green;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;An example based off of &lt;a href=&quot;https://stackoverflow.com/a/22480938/363155&quot;&gt;this answer&lt;/a&gt; to check if an element is 75% visible (i.e. less than 25% of it is off of the screen).&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-comment&quot;&gt;// check for 75% visible&lt;/span&gt;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; percentVisible = &lt;span class=&quot;hljs-number&quot;&gt;0.75&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemBottom = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemHeight = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;height&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; overhang = elemHeight * (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - percentVisible);\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; isVisible = (elemTop &amp;gt;= -overhang) &amp;amp;&amp;amp; (elemBottom &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; + overhang);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; isVisible;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A more efficient version of &lt;a href=&quot;https://stackoverflow.com/a/22480938/443431&quot;&gt;this answer&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt; &lt;span class=&quot;hljs-comment&quot;&gt;/**\n * Is element within visible region of a scrollable container\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@param&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;HTMLElement&lt;/span&gt;} &lt;span class=&quot;hljs-variable&quot;&gt;el&lt;/span&gt; - element to test\n * &lt;span class=&quot;hljs-doctag&quot;&gt;@returns&lt;/span&gt; {&lt;span class=&quot;hljs-type&quot;&gt;boolean&lt;/span&gt;} true if within visible region, otherwise false\n */&lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;el&lt;/span&gt;) {\n      &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; rect = el.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (rect.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (rect.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;);\n }\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Modified the accepted answer so that the element has to have it&apos;s display property set to something other than &quot;none&quot; to quality as visible.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;) {\n   &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewTop = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewBottom = docViewTop + $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemBottom = elemTop + $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemDisplayNotNone = $(elem).&lt;span class=&quot;hljs-title function_&quot;&gt;css&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;display&quot;&lt;/span&gt;) !== &lt;span class=&quot;hljs-string&quot;&gt;&quot;none&quot;&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemBottom &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop) &amp;amp;&amp;amp; elemDisplayNotNone);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here is a way to achieve the same thing using Mootools, in horizontal, vertical or both.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-title class_&quot;&gt;Element&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;implement&lt;/span&gt;({\n&lt;span class=&quot;hljs-attr&quot;&gt;inVerticalView&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;full&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;typeOf&lt;/span&gt;(full) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;null&quot;&lt;/span&gt;) {\n        full = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getStyle&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display&apos;&lt;/span&gt;) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Window Size and Scroll&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; windowScroll = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getScroll&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; windowSize = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getSize&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Element Size and Scroll&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementPosition = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPosition&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementSize = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getSize&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Calculation Variables&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewTop = windowScroll.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewBottom = docViewTop + windowSize.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemTop = elementPosition.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemBottom = elemTop + elementSize.&lt;span class=&quot;hljs-property&quot;&gt;y&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (full) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemBottom &amp;gt;= docViewTop) &amp;amp;&amp;amp; (elemTop &amp;lt;= docViewBottom)\n            &amp;amp;&amp;amp; (elemBottom &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop) );\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemBottom &amp;lt;= docViewBottom) &amp;amp;&amp;amp; (elemTop &amp;gt;= docViewTop));\n    }\n},\n&lt;span class=&quot;hljs-attr&quot;&gt;inHorizontalView&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;full&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-title function_&quot;&gt;typeOf&lt;/span&gt;(full) === &lt;span class=&quot;hljs-string&quot;&gt;&quot;null&quot;&lt;/span&gt;) {\n        full = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getStyle&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;display&apos;&lt;/span&gt;) === &lt;span class=&quot;hljs-string&quot;&gt;&apos;none&apos;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Window Size and Scroll&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; windowScroll = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getScroll&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; windowSize = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getSize&lt;/span&gt;();\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Element Size and Scroll&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementPosition = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getPosition&lt;/span&gt;();\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementSize = &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getSize&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Calculation Variables&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewLeft = windowScroll.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; docViewRight = docViewLeft + windowSize.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemLeft = elementPosition.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elemRight = elemLeft + elementSize.&lt;span class=&quot;hljs-property&quot;&gt;x&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (full) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemRight &amp;gt;= docViewLeft) &amp;amp;&amp;amp; (elemLeft &amp;lt;= docViewRight)\n            &amp;amp;&amp;amp; (elemRight &amp;lt;= docViewRight) &amp;amp;&amp;amp; (elemLeft &amp;gt;= docViewLeft) );\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((elemRight &amp;lt;= docViewRight) &amp;amp;&amp;amp; (elemLeft &amp;gt;= docViewLeft));\n    }\n},\n&lt;span class=&quot;hljs-attr&quot;&gt;inView&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;full&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;inHorizontalView&lt;/span&gt;(full) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;inVerticalView&lt;/span&gt;(full);\n}});\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This method will return true if any part of the element is visible on the page. It worked better in my case and may help someone else.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;isOnScreen&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;element&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementOffsetTop = element.&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementHeight = element.&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; screenScrollTop = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; screenHeight = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;();\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; scrollIsAboveElement = elementOffsetTop + elementHeight - screenScrollTop &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elementIsVisibleOnScreen = screenScrollTop + screenHeight - elementOffsetTop &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; scrollIsAboveElement &amp;amp;&amp;amp; elementIsVisibleOnScreen;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I prefer using jQuery expr&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;jQuery.&lt;span class=&quot;hljs-title function_&quot;&gt;extend&lt;/span&gt;(jQuery.&lt;span class=&quot;hljs-property&quot;&gt;expr&lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;:&apos;&lt;/span&gt;], {  \n    &lt;span class=&quot;hljs-attr&quot;&gt;inview&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; t = $(elem);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; offset = t.&lt;span class=&quot;hljs-title function_&quot;&gt;offset&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; win = $(&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;); \n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; winST = win.&lt;span class=&quot;hljs-title function_&quot;&gt;scrollTop&lt;/span&gt;();\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; elHeight = t.&lt;span class=&quot;hljs-title function_&quot;&gt;outerHeight&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( offset.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;gt; winST - elHeight &amp;amp;&amp;amp; offset.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;lt; winST + elHeight + win.&lt;span class=&quot;hljs-title function_&quot;&gt;height&lt;/span&gt;()) {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;    \n        }    \n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;  \n    }\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;so you can use it this way&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.my-elem:inview&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//returns only element that is in view&lt;/span&gt;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.my-elem&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-title function_&quot;&gt;is&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;:inview&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//check if element is in view&lt;/span&gt;\n$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.my-elem:inview&quot;&lt;/span&gt;).&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;//check how many elements are in view&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can easly add such code inside &lt;code&gt;scroll&lt;/code&gt; event function etc. to check it everytime user will scroll the view.&lt;/p&gt;\n    ","\n&lt;p&gt;There are over 30 answers to this question, and none of them use the amazingly simple, pure JS solution that I have been using. There is no need to load jQuery just to solve this, as many others are pushing.&lt;/p&gt;\n\n&lt;p&gt;In order to tell if the element is within the viewport, we must first determine the elements position within the body. We do not need to do this recursively as I once thought. Instead, we can use &lt;code&gt;element.getBoundingClientRect()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;pos = elem.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; - &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This value is the Y difference between the top of the object and the top of the body.&lt;/p&gt;\n\n&lt;p&gt;We then must tell if the element is within view. Most implementations ask if the full element is within the viewport, so this is what we shall cover.&lt;/p&gt;\n\n&lt;p&gt;First of all, the top position of the window is: &lt;code&gt;window.scrollY&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;We can get the bottom position of the window by adding the window&apos;s height to its top position:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; window_bottom_position = &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollY&lt;/span&gt; + &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Lets create a simple function for getting the element&apos;s top position:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;getElementWindowTop&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;elem&lt;/span&gt;){\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; elem &amp;amp;&amp;amp; &lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt; elem.&lt;span class=&quot;hljs-property&quot;&gt;getBoundingClientRect&lt;/span&gt; === &lt;span class=&quot;hljs-string&quot;&gt;&apos;function&apos;&lt;/span&gt; ? elem.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; - &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;().&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; : &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This function will return the element&apos;s top position within the window or it will return &lt;code&gt;0&lt;/code&gt; if you pass it something other than an element with the &lt;code&gt;.getBoundingClientRect()&lt;/code&gt; method. This method has been around for a long time, so you shouldn&apos;t have to worry about your browser not supporting it.&lt;/p&gt;\n\n&lt;p&gt;Now, our element&apos;s top position is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element_top_position = &lt;span class=&quot;hljs-title function_&quot;&gt;getElementWindowTop&lt;/span&gt;(element);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And or element&apos;s bottom position is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element_bottom_position = element_top_position + element.&lt;span class=&quot;hljs-property&quot;&gt;clientHeight&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we can determine if the element is within the viewport by checking if the element&apos;s bottom position is lower than the viewport&apos;s top position and by checking if the element&apos;s top position is higher than the viewport&apos;s bottom position:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(element_bottom_position &amp;gt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;scrollY&lt;/span&gt; \n&amp;amp;&amp;amp; element_top_position &amp;lt;= window_bottom_position){\n    &lt;span class=&quot;hljs-comment&quot;&gt;//element is in view&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;//element is not in view&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From there, you can perform the logic to add or remove an &lt;code&gt;in-view&lt;/code&gt; class on your element, which you can then handle later with transition effects in your CSS.&lt;/p&gt;\n\n&lt;p&gt;I am absolutely amazed that I did not find this solution anywhere else, but I do believe that this is the cleanest and most effective solution, and it doesn&apos;t require you to load jQuery!&lt;/p&gt;\n    ","\n&lt;p&gt;The Javascript code could be written as :&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;&lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#main-container&apos;&lt;/span&gt;);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; position = element.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// checking whether fully visible&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(position.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; position.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Element is fully visible in screen&apos;&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// checking for partial visibility&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(position.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; &amp;amp;&amp;amp; position.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Element is partially visible in screen&apos;&lt;/span&gt;);\n    }\n});&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif2&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;and in react js written as:&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;snippet&quot; data-lang=&quot;js&quot; data-hide=&quot;false&quot; data-console=&quot;true&quot; data-babel=&quot;false&quot;&gt;\n&lt;div class=&quot;snippet-code&quot;&gt;\n&lt;pre class=&quot;snippet-code-js lang-js s-code-block&quot;&gt;&lt;code class=&quot;hljs language-javascript&quot;&gt;    &lt;span class=&quot;hljs-title function_&quot;&gt;componentDidMount&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isScrolledIntoView&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-title function_&quot;&gt;componentWillUnmount&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;isScrolledIntoView&lt;/span&gt;);\n    }\n  \n  &lt;span class=&quot;hljs-title function_&quot;&gt;isScrolledIntoView&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;hljs-variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.element&apos;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; position = element.&lt;span class=&quot;hljs-title function_&quot;&gt;getBoundingClientRect&lt;/span&gt;();\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// checking whether fully visible&lt;/span&gt;\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; position.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;lt;= &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Element is fully visible in screen&apos;&lt;/span&gt;);\n        }\n        &lt;span class=&quot;hljs-comment&quot;&gt;// checking for partial visibility&lt;/span&gt;\n         &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (position.&lt;span class=&quot;hljs-property&quot;&gt;top&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-variable language_&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;innerHeight&lt;/span&gt; &amp;amp;&amp;amp; position.&lt;span class=&quot;hljs-property&quot;&gt;bottom&lt;/span&gt; &amp;gt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n            &lt;span class=&quot;hljs-variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Element is partially visible in screen&apos;&lt;/span&gt;);\n         }\n    }&lt;/code&gt;&lt;/pre&gt;\n&lt;div class=&quot;snippet-result&quot;&gt;&lt;div class=&quot;snippet-ctas&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn s-btn__primary&quot;&gt;&lt;span class=&quot;icon-play-white _hover&quot;&gt;&lt;/span&gt;&lt;span&gt; Run code snippet&lt;/span&gt;&lt;/button&gt;&lt;input class=&quot;copySnippet s-btn s-btn__filled&quot; type=&quot;button&quot; value=&quot;Copy snippet to answer&quot; style=&quot;display: none;&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;s-btn hideResults&quot; style=&quot;display: none;&quot;&gt;Hide results&lt;/button&gt;&lt;div class=&quot;popout-code&quot;&gt;&lt;a class=&quot;snippet-expand-link&quot;&gt;Expand snippet&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;snippet-result-code&quot; style=&quot;display: none;&quot;&gt;&lt;iframe name=&quot;sif3&quot; sandbox=&quot;allow-forms allow-modals allow-scripts&quot; class=&quot;snippet-box-edit snippet-box-result&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n    "]},"page":"35","randomQuestions":[{"title":"Why should I not #include <bits/stdc++.h>?","slug":"why-should-i-not-include-lessbitsstdc++.hgreater-1657384470484"},{"title":"How to store objects in HTML5 localStorage","slug":"how-to-store-objects-in-html5-localstorage-1657387568907"},{"title":"What is a plain English explanation of \"Big O\" notation?","slug":"what-is-a-plain-english-explanation-of-\"big-o\"-notation-1657387641953"},{"title":"What does enctype='multipart/form-data' mean?","slug":"what-does-enctype'multipartform-data'-mean-1657388229352"},{"title":"Swing GUI listeners without AWT","slug":"swing-gui-listeners-without-awt-1657387522426"},{"title":"What methods of ‘clearfix’ can I use?","slug":"what-methods-of-'clearfix'-can-i-use-1657387672727"},{"title":"How do I give text or an image a transparent background using CSS?","slug":"how-do-i-give-text-or-an-image-a-transparent-background-using-css-1657388188508"},{"title":"UTF-8 all the way through","slug":"utf-8-all-the-way-through-1657384323434"},{"title":"Flatten an irregular list of lists","slug":"flatten-an-irregular-list-of-lists-1657387315571"},{"title":"What is the difference between char s[] and char *s?","slug":"what-is-the-difference-between-char-s-and-char-*s-1657387823570"},{"title":"Are 'Arrow Functions' and 'Functions' equivalent / interchangeable?","slug":"are-'arrow-functions'-and-'functions'-equivalent-interchangeable-1657384527873"},{"title":"What does \"Fatal error: Unexpectedly found nil while unwrapping an Optional value\" mean?","slug":"what-does-\"fatal-error:-unexpectedly-found-nil-while-unwrapping-an-optional-value\"-mean-1657384593944"},{"title":"How does the Windows Command Interpreter (CMD.EXE) parse scripts?","slug":"how-does-the-windows-command-interpreter-(cmd.exe)-parse-scripts-1657387731560"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"Iterating through a Collection, avoiding ConcurrentModificationException when removing objects in a loop","slug":"iterating-through-a-collection-avoiding-concurrentmodificationexception-when-removing-objects-in-a-loop-1657387311824"},{"title":"How do you get the footer to stay at the bottom of a Web page?","slug":"how-do-you-get-the-footer-to-stay-at-the-bottom-of-a-web-page-1657387817544"},{"title":"Deserialize JSON into C# dynamic object?","slug":"deserialize-json-into-c-dynamic-object-1657388568720"},{"title":"Trouble with UTF-8 characters; what I see is not what I stored","slug":"trouble-with-utf-8-characters-what-i-see-is-not-what-i-stored-1657384817490"},{"title":"Why is using the JavaScript eval function a bad idea?","slug":"why-is-using-the-javascript-eval-function-a-bad-idea-1657387485165"},{"title":"How do you parse and process HTML/XML in PHP?","slug":"how-do-you-parse-and-process-htmlxml-in-php-1657384351267"}]},"__N_SSG":true}