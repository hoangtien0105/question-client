{"pageProps":{"data":{"count":610,"rows":[{"id":535,"title":"How do I list all files of a directory?","slug":"how-do-i-list-all-files-of-a-directory-1657388340404","postType":"QUESTION","createdAt":"2022-07-09T17:39:00.000Z","updatedAt":"2022-07-09T17:39:00.000Z","tags":[{"id":2622,"name":"directory","slug":"directory","createdAt":"2022-07-09T17:39:00.000Z","updatedAt":"2022-07-09T17:39:00.000Z","Questions_Tags":{"questionId":535,"tagId":2622}}]},{"id":534,"title":"Alternatives to gprof [closed]","slug":"alternatives-to-gprof-closed-1657388336554","postType":"QUESTION","createdAt":"2022-07-09T17:38:56.000Z","updatedAt":"2022-07-09T17:38:56.000Z","tags":[{"id":2619,"name":"profiler","slug":"profiler","createdAt":"2022-07-09T17:38:56.000Z","updatedAt":"2022-07-09T17:38:56.000Z","Questions_Tags":{"questionId":534,"tagId":2619}},{"id":2620,"name":"gprof","slug":"gprof","createdAt":"2022-07-09T17:38:56.000Z","updatedAt":"2022-07-09T17:38:56.000Z","Questions_Tags":{"questionId":534,"tagId":2620}}]},{"id":533,"title":"Iterating over dictionaries using 'for' loops","slug":"iterating-over-dictionaries-using-'for'-loops-1657388334481","postType":"QUESTION","createdAt":"2022-07-09T17:38:54.000Z","updatedAt":"2022-07-09T17:38:54.000Z","tags":[]},{"id":532,"title":"How do function pointers in C work?","slug":"how-do-function-pointers-in-c-work-1657388332074","postType":"QUESTION","createdAt":"2022-07-09T17:38:52.000Z","updatedAt":"2022-07-09T17:38:52.000Z","tags":[{"id":2614,"name":"function-pointers","slug":"function-pointers","createdAt":"2022-07-09T17:38:52.000Z","updatedAt":"2022-07-09T17:38:52.000Z","Questions_Tags":{"questionId":532,"tagId":2614}}]},{"id":531,"title":"How do I properly clean up Excel interop objects?","slug":"how-do-i-properly-clean-up-excel-interop-objects-1657388329706","postType":"QUESTION","createdAt":"2022-07-09T17:38:49.000Z","updatedAt":"2022-07-09T17:38:49.000Z","tags":[{"id":2612,"name":"interop","slug":"interop","createdAt":"2022-07-09T17:38:49.000Z","updatedAt":"2022-07-09T17:38:49.000Z","Questions_Tags":{"questionId":531,"tagId":2612}},{"id":2613,"name":"com-interop","slug":"com-interop","createdAt":"2022-07-09T17:38:49.000Z","updatedAt":"2022-07-09T17:38:49.000Z","Questions_Tags":{"questionId":531,"tagId":2613}}]}]},"answers":{"531":["\n&lt;p&gt;Excel does not quit because your application is still holding references to COM objects.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;I guess you&apos;re invoking at least one member of a COM object without assigning it to a variable.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For me it was the &lt;em&gt;excelApp.Worksheets&lt;/em&gt; object which I directly used without assigning it to a variable:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Worksheet sheet = excelApp.Worksheets.Open(...);\n...\nMarshal.ReleaseComObject(sheet);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I didn&apos;t know that internally C# created a wrapper for the &lt;strong&gt;Worksheets&lt;/strong&gt; COM object which didn&apos;t get released by my code (because I wasn&apos;t aware of it) and was the cause why Excel was not unloaded.&lt;/p&gt;\n\n&lt;p&gt;I found the solution to my problem on &lt;a href=&quot;http://www.velocityreviews.com/forums/showpost.php?s=f87f0674feda4442dcbd40019cbca65b&amp;amp;p=528575&amp;amp;postcount=2&quot; rel=&quot;noreferrer&quot;&gt;this page&lt;/a&gt;, which also has a nice rule for the usage of COM objects in C#:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Never use two dots with COM objects.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;So with this knowledge the right way of doing the above is:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Worksheets sheets = excelApp.Worksheets; &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;-- The important part&lt;/span&gt;\nWorksheet sheet = sheets.Open(...);\n...\nMarshal.ReleaseComObject(sheets);\nMarshal.ReleaseComObject(sheet);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;POST MORTEM UPDATE:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I want every reader to read this answer by Hans Passant very carefully as it explains the trap I and lots of other developers stumbled into. When I wrote this answer years ago I didn&apos;t know about the effect the debugger has to the garbage collector and drew the wrong conclusions. I keep my answer unaltered for the sake of history but please read this link and &lt;strong&gt;don&apos;t&lt;/strong&gt; go the way of &quot;the two dots&quot;: &lt;a href=&quot;https://stackoverflow.com/questions/17130382/understanding-garbage-collection-in-net/17131389#17131389&quot;&gt;Understanding garbage collection in .NET&lt;/a&gt; and &lt;a href=&quot;https://stackoverflow.com/questions/25134024/clean-up-excel-interop-objects-with-idisposable/25135685#25135685&quot;&gt;Clean up Excel Interop Objects with IDisposable&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;You can actually release your Excel Application object cleanly, but you do have to take care. &lt;/p&gt;\n\n&lt;p&gt;The advice to maintain a named reference for absolutely every COM object you access and then explicitly release it via &lt;code&gt;Marshal.FinalReleaseComObject()&lt;/code&gt; is correct in theory, but, unfortunately, very difficult to manage in practice. If one ever slips anywhere and uses &quot;two dots&quot;, or iterates cells via a &lt;code&gt;for each&lt;/code&gt; loop, or any other similar kind of command, then you&apos;ll have unreferenced COM objects and risk a hang. In this case, there would be no way to find the cause in the code; you would have to review all your code by eye and hopefully find the cause, a task that could be nearly impossible for a large project.&lt;/p&gt;\n\n&lt;p&gt;The good news is that you do not actually have to maintain a named variable reference to every COM object you use. Instead, call &lt;code&gt;GC.Collect()&lt;/code&gt; and then &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt; to release all the (usually minor) objects to which you do not hold a reference, and then explicitly release the objects to which you do hold a named variable reference. &lt;/p&gt;\n\n&lt;p&gt;You should also release your named references in reverse order of importance: range objects first, then worksheets, workbooks, and then finally your Excel Application object.&lt;/p&gt;\n\n&lt;p&gt;For example, assuming that you had a Range object variable named &lt;code&gt;xlRng&lt;/code&gt;, a Worksheet variable named &lt;code&gt;xlSheet&lt;/code&gt;, a Workbook variable named &lt;code&gt;xlBook&lt;/code&gt; and an Excel Application variable named &lt;code&gt;xlApp&lt;/code&gt;, then your cleanup code could look something like the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Cleanup&lt;/span&gt;\nGC.Collect();\nGC.WaitForPendingFinalizers();\n\nMarshal.FinalReleaseComObject(xlRng);\nMarshal.FinalReleaseComObject(xlSheet);\n\nxlBook.Close(Type.Missing, Type.Missing, Type.Missing);\nMarshal.FinalReleaseComObject(xlBook);\n\nxlApp.Quit();\nMarshal.FinalReleaseComObject(xlApp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In most code examples you&apos;ll see for cleaning up COM objects from .NET, the &lt;code&gt;GC.Collect()&lt;/code&gt; and &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt; calls are made TWICE as in:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;GC.Collect();\nGC.WaitForPendingFinalizers();\nGC.Collect();\nGC.WaitForPendingFinalizers();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This should not be required, however, unless you are using Visual Studio Tools for Office (VSTO), which uses finalizers that cause an entire graph of objects to be promoted in the finalization queue. Such objects would not be released until the &lt;em&gt;next&lt;/em&gt; garbage collection. However, if you are not using VSTO, you should be able to call &lt;code&gt;GC.Collect()&lt;/code&gt; and &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt; just once.&lt;/p&gt;\n\n&lt;p&gt;I know that explicitly calling &lt;code&gt;GC.Collect()&lt;/code&gt; is a no-no (and certainly doing it twice sounds very painful), but there is no way around it, to be honest. Through normal operations you will generate hidden objects to which you hold no reference that you, therefore, cannot release through any other means other than calling &lt;code&gt;GC.Collect()&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;This is a complex topic, but this really is all there is to it. Once you establish this template for your cleanup procedure you can code normally, without the need for wrappers, etc. :-)&lt;/p&gt;\n\n&lt;p&gt;I have a tutorial on this here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.xtremevbtalk.com/showthread.php?t=160433&quot; rel=&quot;noreferrer&quot;&gt;Automating Office Programs with VB.Net / COM Interop&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&apos;s written for VB.NET, but don&apos;t be put off by that, the principles are exactly the same as when using C#.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Preface: my answer contains two solutions, so be careful when reading and don&apos;t miss anything.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There are different ways and advice of how to make Excel instance unload, such as:  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Releasing EVERY com object explicitly\nwith Marshal.FinalReleaseComObject()\n(not forgetting about implicitly\ncreated com-objects). To release\nevery created com object, you may use\nthe rule of 2 dots mentioned here:&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/158706/how-to-properly-clean-up-excel-interop-objects-in-c/158752#158752&quot;&gt;How do I properly clean up Excel interop objects?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Calling GC.Collect() and\nGC.WaitForPendingFinalizers() to make\nCLR release unused com-objects * (Actually, it works, see my second solution for details)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Checking if com-server-application\nmaybe shows a message box waiting for\nthe user to answer (though I am not\nsure it can prevent Excel from\nclosing, but I heard about it a few\ntimes)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Sending WM_CLOSE message to the main\nExcel window&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Executing the function that works\nwith Excel in a separate AppDomain.\nSome people believe Excel instance\nwill be shut, when AppDomain is\nunloaded.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Killing all excel instances which were instantiated after our excel-interoping code started.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;BUT!&lt;/strong&gt; Sometimes all these options just don&apos;t help or can&apos;t be appropriate!&lt;/p&gt;\n\n&lt;p&gt;For example, yesterday I found out that in one of my functions (which works with excel) Excel keeps running after the function ends. I tried everything! I thoroughly checked the whole function 10 times and added Marshal.FinalReleaseComObject() for everything! I also had GC.Collect() and GC.WaitForPendingFinalizers(). I checked for hidden message boxes. I tried to send WM_CLOSE message to the main Excel window. I executed my function in a separate AppDomain and unloaded that domain. Nothing helped! The option with closing all excel instances is inappropriate, because if the user starts another Excel instance manually, during execution of my function which works also with Excel, then that instance will also be closed by my function. I bet the user will not be happy! So, honestly, this is a lame option (no offence guys). So I spent a couple of hours before I found a good (in my humble opinion) &lt;strong&gt;solution&lt;/strong&gt;: &lt;strong&gt;Kill excel process by hWnd of its main window&lt;/strong&gt; (it&apos;s the first solution).&lt;/p&gt;\n\n&lt;p&gt;Here is the simple code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user32.dll&quot;&lt;/span&gt;)&lt;/span&gt;]\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetWindowThreadProcessId&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IntPtr hWnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; lpdwProcessId&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt; Tries to find and kill process by hWnd to the main window of the process.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;hWnd&quot;&amp;gt;&lt;/span&gt;Handle to the main window of the process.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;True if process was found and killed. False if process was not found by hWnd or if it could not be killed.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TryKillProcessByMainWindowHwnd&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hWnd&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; processID;\n    GetWindowThreadProcessId((IntPtr)hWnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; processID);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(processID == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        Process.GetProcessById((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)processID).Kill();\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (ArgumentException)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Win32Exception)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (NotSupportedException)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (InvalidOperationException)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt; Finds and kills process by hWnd to the main window of the process.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;param name=&quot;hWnd&quot;&amp;gt;&lt;/span&gt;Handle to the main window of the process.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;exception cref=&quot;ArgumentException&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; Thrown when process is not found by the hWnd parameter (the process is not running). &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; The identifier of the process might be expired.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;exception cref=&quot;Win32Exception&quot;&amp;gt;&lt;/span&gt;See Process.Kill() exceptions documentation.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;exception cref=&quot;NotSupportedException&quot;&amp;gt;&lt;/span&gt;See Process.Kill() exceptions documentation.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;&lt;span class=&quot;hljs-doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;exception cref=&quot;InvalidOperationException&quot;&amp;gt;&lt;/span&gt;See Process.Kill() exceptions documentation.&lt;span class=&quot;hljs-doctag&quot;&gt;&amp;lt;/exception&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;KillProcessByMainWindowHwnd&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hWnd&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; processID;\n    GetWindowThreadProcessId((IntPtr)hWnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; processID);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (processID == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArgumentException(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Process has not been found by the given main window handle.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hWnd&quot;&lt;/span&gt;);\n    Process.GetProcessById((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)processID).Kill();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you can see I provided two methods, according to Try-Parse pattern (I think it is appropriate here): one method doesn&apos;t throw the exception if the Process could not be killed (for example the process doesn&apos;t exist anymore), and another method throws the exception if the Process was not killed. The only weak place in this code is security permissions. Theoretically, the user may not have permissions to kill the process, but in 99.99% of all cases, user has such permissions. I also tested it with a guest account - it works perfectly.&lt;/p&gt;\n\n&lt;p&gt;So, your code, working with Excel, can look like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hWnd = xl.Application.Hwnd;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// here we try to close Excel as usual, with xl.Quit(),&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// Marshal.FinalReleaseComObject(xl) and so on&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;\nTryKillProcessByMainWindowHwnd(hWnd);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Voila! Excel is terminated! :)&lt;/p&gt;\n\n&lt;p&gt;Ok, let&apos;s go back to the second solution, as I promised in the beginning of the post.\n&lt;strong&gt;The second solution is to call GC.Collect() and GC.WaitForPendingFinalizers().&lt;/strong&gt; Yes, they actually work, but you need to be careful here!&lt;br&gt;\nMany people say (and I said) that calling GC.Collect() doesn&apos;t help. But the reason it wouldn&apos;t help is if there are still references to COM objects! One of the most popular reasons for GC.Collect() not being helpful is running the project in Debug-mode. In debug-mode objects that are not really referenced anymore will not be garbage collected until the end of the method.&lt;br&gt;\nSo, if you tried GC.Collect() and GC.WaitForPendingFinalizers() and it didn&apos;t help, try to do the following:  &lt;/p&gt;\n\n&lt;p&gt;1) Try to run your project in Release mode and check if Excel closed correctly  &lt;/p&gt;\n\n&lt;p&gt;2) Wrap the method of working with Excel in a separate method.\nSo, instead of something like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenerateWorkbook&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...&lt;/span&gt;)&lt;/span&gt;\n{\n  ApplicationClass xl;\n  Workbook xlWB;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n  {\n    xl = ...\n    xlWB = xl.Workbooks.Add(...);\n    ...\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n  {\n    ...\n    Marshal.ReleaseComObject(xlWB)\n    ...\n    GC.Collect();\n    GC.WaitForPendingFinalizers();\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you write:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenerateWorkbook&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...&lt;/span&gt;)&lt;/span&gt;\n{\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n  {\n    GenerateWorkbookInternal(...);\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n  {\n    GC.Collect();\n    GC.WaitForPendingFinalizers();\n  }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenerateWorkbookInternal&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;...&lt;/span&gt;)&lt;/span&gt;\n{\n  ApplicationClass xl;\n  Workbook xlWB;\n  &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n  {\n    xl = ...\n    xlWB = xl.Workbooks.Add(...);\n    ...\n  }\n  &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n  {\n    ...\n    Marshal.ReleaseComObject(xlWB)\n    ...\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, Excel will close =)&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Added C# code, and link to Windows Jobs&lt;/p&gt;\n\n&lt;p&gt;I spent sometime trying to figure out this problem, and at the time XtremeVBTalk was the most active and responsive.  Here is a link to my original post, &lt;a href=&quot;http://www.xtremevbtalk.com/showpost.php?p=1335552&amp;amp;postcount=22&quot; rel=&quot;noreferrer&quot;&gt;Closing an Excel Interop process cleanly, even if your application crashes&lt;/a&gt;. Below is a summary of the post, and the code copied to this post. &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Closing the Interop process with &lt;code&gt;Application.Quit()&lt;/code&gt; and &lt;code&gt;Process.Kill()&lt;/code&gt; works for the most part, but fails if the applications crashes catastrophically. I.e. if the app crashes, the Excel process will still be running loose.&lt;/li&gt;\n&lt;li&gt;The solution is to let the OS handle the cleanup of your processes through &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms682409(VS.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;Windows Job Objects&lt;/a&gt; using Win32 calls.  When your main application dies, the associated processes (i.e. Excel) will get terminated as well.  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I found this to be a clean solution because the OS is doing real work of cleaning up.  All you have to do is &lt;em&gt;register&lt;/em&gt; the Excel process.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Windows Job Code&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Wraps the Win32 API Calls to register Interop processes.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enum&lt;/span&gt; JobObjectInfoType\n{\n    AssociateCompletionPortInformation = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;,\n    BasicLimitInformation = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,\n    BasicUIRestrictions = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,\n    EndOfJobTimeInformation = &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;,\n    ExtendedLimitInformation = &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;,\n    SecurityLimitInformation = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,\n    GroupInformation = &lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;\n}\n\n[&lt;span class=&quot;hljs-meta&quot;&gt;StructLayout(LayoutKind.Sequential)&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; SECURITY_ATTRIBUTES\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; nLength;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IntPtr lpSecurityDescriptor;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; bInheritHandle;\n}\n\n[&lt;span class=&quot;hljs-meta&quot;&gt;StructLayout(LayoutKind.Sequential)&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; JOBOBJECT_BASIC_LIMIT_INFORMATION\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int64 PerProcessUserTimeLimit;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int64 PerJobUserTimeLimit;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int16 LimitFlags;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt32 MinimumWorkingSetSize;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt32 MaximumWorkingSetSize;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int16 ActiveProcessLimit;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int64 Affinity;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int16 PriorityClass;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Int16 SchedulingClass;\n}\n\n[&lt;span class=&quot;hljs-meta&quot;&gt;StructLayout(LayoutKind.Sequential)&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; IO_COUNTERS\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt64 ReadOperationCount;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt64 WriteOperationCount;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt64 OtherOperationCount;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt64 ReadTransferCount;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt64 WriteTransferCount;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt64 OtherTransferCount;\n}\n\n[&lt;span class=&quot;hljs-meta&quot;&gt;StructLayout(LayoutKind.Sequential)&lt;/span&gt;]\n&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; JOBOBJECT_EXTENDED_LIMIT_INFORMATION\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; IO_COUNTERS IoInfo;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt32 ProcessMemoryLimit;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt32 JobMemoryLimit;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt32 PeakProcessMemoryUsed;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; UInt32 PeakJobMemoryUsed;\n}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Job&lt;/span&gt; : &lt;span class=&quot;hljs-title&quot;&gt;IDisposable&lt;/span&gt;\n{\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kernel32.dll&quot;&lt;/span&gt;, CharSet = CharSet.Unicode)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; IntPtr &lt;span class=&quot;hljs-title&quot;&gt;CreateJobObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; a, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; lpName&lt;/span&gt;)&lt;/span&gt;;\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kernel32.dll&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SetInformationJobObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; cbJobObjectInfoLength&lt;/span&gt;)&lt;/span&gt;;\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;kernel32.dll&quot;&lt;/span&gt;, SetLastError = true)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AssignProcessToJobObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IntPtr job, IntPtr process&lt;/span&gt;)&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; IntPtr m_handle;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; m_disposed = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Job&lt;/span&gt;()&lt;/span&gt;\n    {\n        m_handle = CreateJobObject(&lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n\n        JOBOBJECT_BASIC_LIMIT_INFORMATION info = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JOBOBJECT_BASIC_LIMIT_INFORMATION();\n        info.LimitFlags = &lt;span class=&quot;hljs-number&quot;&gt;0x2000&lt;/span&gt;;\n\n        JOBOBJECT_EXTENDED_LIMIT_INFORMATION extendedInfo = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JOBOBJECT_EXTENDED_LIMIT_INFORMATION();\n        extendedInfo.BasicLimitInformation = info;\n\n        &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; length = Marshal.SizeOf(&lt;span class=&quot;hljs-keyword&quot;&gt;typeof&lt;/span&gt;(JOBOBJECT_EXTENDED_LIMIT_INFORMATION));\n        IntPtr extendedInfoPtr = Marshal.AllocHGlobal(length);\n        Marshal.StructureToPtr(extendedInfo, extendedInfoPtr, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!SetInformationJobObject(m_handle, JobObjectInfoType.ExtendedLimitInformation, extendedInfoPtr, (&lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt;)length))\n            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to set information.  Error: {0}&quot;&lt;/span&gt;, Marshal.GetLastWin32Error()));\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;region&lt;/span&gt; IDisposable Members&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Dispose&lt;/span&gt;()&lt;/span&gt;\n    {\n        Dispose(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n        GC.SuppressFinalize(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endregion&lt;/span&gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Dispose&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; disposing&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (m_disposed)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (disposing) {}\n\n        Close();\n        m_disposed = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Close&lt;/span&gt;()&lt;/span&gt;\n    {\n        Win32.CloseHandle(m_handle);\n        m_handle = IntPtr.Zero;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AddProcess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IntPtr handle&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; AssignProcessToJobObject(m_handle, handle);\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Note about Constructor code&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In the constructor, the &lt;code&gt;info.LimitFlags = 0x2000;&lt;/code&gt; is called. &lt;code&gt;0x2000&lt;/code&gt; is the &lt;code&gt;JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE&lt;/code&gt; enum value, and this value is defined by &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms684147(v=vs.85).aspx&quot; rel=&quot;noreferrer&quot;&gt;MSDN&lt;/a&gt; as:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Causes all processes associated with the job to terminate when the\n  last handle to the job is closed.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Extra Win32 API Call to get the Process ID (PID)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    [&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user32.dll&quot;&lt;/span&gt;, SetLastError = true)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetWindowThreadProcessId&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;IntPtr hWnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; lpdwProcessId&lt;/span&gt;)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Using the code&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    Excel.Application app = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Excel.ApplicationClass();\n    Job job = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Job();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;uint&lt;/span&gt; pid = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n    Win32.GetWindowThreadProcessId(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; IntPtr(app.Hwnd), &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; pid);\n    job.AddProcess(Process.GetProcessById((&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;)pid).Handle);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This worked for a project I was working on:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;excelApp.Quit();\nMarshal.ReleaseComObject (excelWB);\nMarshal.ReleaseComObject (excelApp);\nexcelApp = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We learned that it was important to set &lt;strong&gt;every&lt;/strong&gt; reference to an Excel COM object to null when you were done with it. This included Cells, Sheets, and everything.&lt;/p&gt;\n    ","\n&lt;p&gt;First - you &lt;em&gt;never&lt;/em&gt; have to call &lt;code&gt;Marshal.ReleaseComObject(...)&lt;/code&gt; or &lt;code&gt;Marshal.FinalReleaseComObject(...)&lt;/code&gt; when doing Excel interop. It is a confusing anti-pattern, but any information about this, including from Microsoft, that indicates you have to manually release COM references from .NET is incorrect. The fact is that the .NET runtime and garbage collector correctly keep track of and clean up COM references. For your code, this means you can remove the whole `while (...) loop at the top.&lt;/p&gt;\n\n&lt;p&gt;Second, if you want to ensure that the COM references to an out-of-process COM object are cleaned up when your process ends (so that the Excel process will close), you need to ensure that the garbage collector runs. You do this correctly with calls to &lt;code&gt;GC.Collect()&lt;/code&gt; and &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt;. Calling this twice is safe, and ensures that cycles are definitely cleaned up too (though I&apos;m not sure it&apos;s needed, and would appreciate an example that shows this).&lt;/p&gt;\n\n&lt;p&gt;Third, when running under the debugger, local references will be artificially kept alive until the end of the method (so that local variable inspection works). So  &lt;code&gt;GC.Collect()&lt;/code&gt; calls are not effective for cleaning object like &lt;code&gt;rng.Cells&lt;/code&gt; from the same method. You should split the code doing the COM interop from the GC cleanup into separate methods. (This was a key discovery for me, from one part of the answer posted here by @nightcoder.)&lt;/p&gt;\n\n&lt;p&gt;The general pattern would thus be:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Sub &lt;span class=&quot;hljs-title&quot;&gt;WrapperThatCleansUp&lt;/span&gt;()\n\n    &apos; NOTE: Don&apos;t call Excel objects &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; here... \n    &apos;       Debugger would keep alive until end, preventing GC cleanup\n\n    &apos; Call a separate function that talks to Excel\n    &lt;span class=&quot;hljs-title&quot;&gt;DoTheWork&lt;/span&gt;()\n\n    &apos; Now &lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; the GC clean &lt;span class=&quot;hljs-title&quot;&gt;up&lt;/span&gt; (&lt;span class=&quot;hljs-params&quot;&gt;twice, to clean up cycles too&lt;/span&gt;)\n    GC.&lt;span class=&quot;hljs-title&quot;&gt;Collect&lt;/span&gt;()    \n    GC.&lt;span class=&quot;hljs-title&quot;&gt;WaitForPendingFinalizers&lt;/span&gt;()\n    GC.&lt;span class=&quot;hljs-title&quot;&gt;Collect&lt;/span&gt;()    \n    GC.&lt;span class=&quot;hljs-title&quot;&gt;WaitForPendingFinalizers&lt;/span&gt;()\n\nEnd Sub\n\nSub &lt;span class=&quot;hljs-title&quot;&gt;DoTheWork&lt;/span&gt;()\n    Dim app As New Microsoft.Office.Interop.Excel.Application\n    Dim book As Microsoft.Office.Interop.Excel.Workbook&lt;/span&gt; = app.Workbooks.Add()\n    Dim worksheet As Microsoft.Office.Interop.Excel.Worksheet = book.Worksheets(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Sheet1&quot;&lt;/span&gt;)\n    app.Visible = True\n    For i As Integer = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; To &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;\n        worksheet.Cells.Range(&lt;span class=&quot;hljs-string&quot;&gt;&quot;A&quot;&lt;/span&gt; &amp;amp; i).Value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;\n    Next\n    book.Save()\n    book.Close()\n    app.Quit()\n\n    &lt;span class=&quot;hljs-string&quot;&gt;&apos; NOTE: No calls the Marshal.ReleaseComObject() are ever needed\nEnd Sub\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There is a lot of false information and confusion about this issue, including many posts on MSDN and on Stack Overflow (and especially this question!).&lt;/p&gt;\n\n&lt;p&gt;What finally convinced me to have a closer look and figure out the right advice was blog post &lt;em&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2010/03/01/marshal-releasecomobject-considered-dangerous/&quot; rel=&quot;noreferrer&quot;&gt;Marshal.ReleaseComObject Considered Dangerous&lt;/a&gt;&lt;/em&gt; together with finding the issue with references kept alive under the debugger that was confusing my earlier testing.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Anything that is in the Excel namespace needs to be released. Period&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can&apos;t be doing:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Worksheet ws = excel.WorkBooks[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].WorkSheets[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You have to be doing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Workbooks books = excel.WorkBooks;\nWorkbook book = books[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\nSheets sheets = book.WorkSheets;\nWorksheet ws = sheets[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;followed by the releasing of the objects.&lt;/p&gt;\n    ","\n&lt;p&gt;I &lt;a href=&quot;http://www.deez.info/sengelha/2005/02/11/useful-idisposable-class-3-autoreleasecomobject/&quot; rel=&quot;noreferrer&quot;&gt;found&lt;/a&gt; a useful generic template that can help implement the correct disposal pattern for COM objects, that need Marshal.ReleaseComObject called when they go out of scope:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (AutoReleaseComObject&amp;lt;Application&amp;gt; excelApplicationWrapper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AutoReleaseComObject&amp;lt;Application&amp;gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Application()))\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;using&lt;/span&gt; (AutoReleaseComObject&amp;lt;Workbook&amp;gt; workbookWrapper = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; AutoReleaseComObject&amp;lt;Workbook&amp;gt;(excelApplicationWrapper.ComObject.Workbooks.Open(namedRangeBase.FullName, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, missing, missing, missing, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, missing, missing, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, missing, missing, missing, missing, missing)))\n        {\n           &lt;span class=&quot;hljs-comment&quot;&gt;// do something with your workbook....&lt;/span&gt;\n        }\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n    {\n         excelApplicationWrapper.ComObject.Quit();\n    } \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Template:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AutoReleaseComObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;T&lt;/span&gt;&amp;gt; : &lt;span class=&quot;hljs-title&quot;&gt;IDisposable&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; T m_comObject;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; m_armed = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; m_disposed = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AutoReleaseComObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;T comObject&lt;/span&gt;)&lt;/span&gt;\n    {\n        Debug.Assert(comObject != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;);\n        m_comObject = comObject;\n    }\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; DEBUG&lt;/span&gt;\n    ~AutoReleaseComObject()\n    {\n        &lt;span class=&quot;hljs-comment&quot;&gt;// We should have been disposed using Dispose().&lt;/span&gt;\n        Debug.WriteLine(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Finalize being called, should have been disposed&quot;&lt;/span&gt;);\n\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ComObject != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        {\n            Debug.WriteLine(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ComObject was not null:{0}, name:{1}.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ComObject, &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ComObjectName));\n        }\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;//Debug.Assert(false);&lt;/span&gt;\n    }\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; T ComObject\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;\n        {\n            Debug.Assert(!m_disposed);\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; m_comObject;\n        }\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; ComObjectName\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ComObject &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; Microsoft.Office.Interop.Excel.Workbook)\n            {\n                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((Microsoft.Office.Interop.Excel.Workbook)&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.ComObject).Name;\n            }\n\n            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Disarm&lt;/span&gt;()&lt;/span&gt;\n    {\n        Debug.Assert(!m_disposed);\n        m_armed = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;region&lt;/span&gt; IDisposable Members&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Dispose&lt;/span&gt;()&lt;/span&gt;\n    {\n        Dispose(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; DEBUG&lt;/span&gt;\n        GC.SuppressFinalize(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endregion&lt;/span&gt;&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Dispose&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;bool&lt;/span&gt; disposing&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!m_disposed)\n        {\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (m_armed)\n            {\n                &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; refcnt = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n                &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;\n                {\n                    refcnt = System.Runtime.InteropServices.Marshal.ReleaseComObject(m_comObject);\n                } &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (refcnt &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\n\n                m_comObject = &lt;span class=&quot;hljs-literal&quot;&gt;default&lt;/span&gt;(T);\n            }\n\n            m_disposed = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://www.deez.info/sengelha/2005/02/11/useful-idisposable-class-3-autoreleasecomobject/&quot; rel=&quot;noreferrer&quot;&gt;http://www.deez.info/sengelha/2005/02/11/useful-idisposable-class-3-autoreleasecomobject/&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;I cant believe this problem has haunted the world for 5 years.... If you have created an application, you need to shut it down first before removing the link.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;objExcel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Excel.Application();  \nobjBook = (Excel.Workbook)(objExcel.Workbooks.Add(Type.Missing)); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;when closing&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;objBook.Close(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, Type.Missing, Type.Missing); \nobjExcel.Application.Quit();\nobjExcel.Quit(); \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When you new an excel application, it opens a excel program in the background. You need to command that excel program to quit before you release the link because that excel program is not part of your direct control. Therefore, it will stay open if the link is released!&lt;/p&gt;\n\n&lt;p&gt;Good programming everyone~~&lt;/p&gt;\n    ","\n&lt;p&gt;Common developers, none of your solutions worked for me, \nso I decide to implement a new &lt;strong&gt;trick&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;First let specify &quot;What is our goal?&quot; =&amp;gt; &quot;Not to see excel object after our job in task manager&quot; &lt;/p&gt;\n\n&lt;p&gt;Ok. Let no to challenge and start destroying it, but consider not to destroy other instance os Excel which are running in parallel.&lt;/p&gt;\n\n&lt;p&gt;So , get the list of current processors and fetch PID of EXCEL processes , then once your job is done, we have a new guest in processes list with a unique PID ,find and destroy just that one.&lt;/p&gt;\n\n&lt;p&gt;&amp;lt; keep in mind any new excel process during your excel job will be detected as new and destroyed &amp;gt;\n &amp;lt; A better solution is to capture PID of new created excel object and just destroy that&amp;gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Process[] prs = Process.GetProcesses();\nList&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt; excelPID = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt;&amp;gt;();\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (Process p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; prs)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p.ProcessName == &lt;span class=&quot;hljs-string&quot;&gt;&quot;EXCEL&quot;&lt;/span&gt;)\n       excelPID.Add(p.Id);\n\n.... &lt;span class=&quot;hljs-comment&quot;&gt;// your job &lt;/span&gt;\n\nprs = Process.GetProcesses();\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (Process p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; prs)\n   &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p.ProcessName == &lt;span class=&quot;hljs-string&quot;&gt;&quot;EXCEL&quot;&lt;/span&gt; &amp;amp;&amp;amp; !excelPID.Contains(p.Id))\n       p.Kill();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This resolves my issue, hope yours too.&lt;/p&gt;\n    ","\n&lt;p&gt;This sure seems like it has been over-complicated. From my experience, there are just three key things to get Excel to close properly:&lt;/p&gt;\n\n&lt;p&gt;1: make sure there are no remaining references to the excel application you created (you should only have one anyway; set it to &lt;code&gt;null&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;2: call &lt;code&gt;GC.Collect()&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;3: Excel has to be closed, either by the user manually closing the program, or by you calling &lt;code&gt;Quit&lt;/code&gt; on the Excel object. (Note that &lt;code&gt;Quit&lt;/code&gt; will function just as if the user tried to close the program, and will present a confirmation dialog if there are unsaved changes, even if Excel is not visible. The user could press cancel, and then Excel will not have been closed.)&lt;/p&gt;\n\n&lt;p&gt;1 needs to happen before 2, but 3 can happen anytime.&lt;/p&gt;\n\n&lt;p&gt;One way to implement this is to wrap the interop Excel object with your own class, create the interop instance in the constructor, and implement IDisposable with Dispose looking something like&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!mDisposed) {\n   mExcel = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n   GC.Collect();\n   mDisposed = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That will clean up excel from your program&apos;s side of things. Once Excel is closed (manually by the user or by you calling &lt;code&gt;Quit&lt;/code&gt;) the process will go away. If the program has already been closed, then the process will disappear on the &lt;code&gt;GC.Collect()&lt;/code&gt; call.&lt;/p&gt;\n\n&lt;p&gt;(I&apos;m not sure how important it is, but you may want a &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt; call after the &lt;code&gt;GC.Collect()&lt;/code&gt; call but it is not strictly necessary to get rid of the Excel process.)&lt;/p&gt;\n\n&lt;p&gt;This has worked for me without issue for years. Keep in mind though that while this works, you actually have to close gracefully for it to work. You will still get accumulating excel.exe processes if you interrupt your program before Excel is cleaned up (usually by hitting &quot;stop&quot; while your program is being debugged).&lt;/p&gt;\n    ","\n&lt;p&gt;I&apos;ve traditionally followed the advice found in &lt;a href=&quot;https://stackoverflow.com/a/158752/741988&quot;&gt;VVS&apos;s answer&lt;/a&gt;.  However, in an effort to keep this answer up-to-date with the latest options, I think all my future projects will use the &quot;NetOffice&quot; library.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://osdn.net/projects/netoffice/&quot; rel=&quot;nofollow noreferrer&quot;&gt;NetOffice&lt;/a&gt; is a complete replacement for the Office PIAs and is completely version-agnostic. It&apos;s a collection of Managed COM wrappers that can handle the cleanup that often causes such headaches when working with Microsoft Office in .NET.&lt;/p&gt;\n\n&lt;p&gt;Some key features are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Mostly version-independent (and version-dependant features are documented)&lt;/li&gt;\n&lt;li&gt;No dependencies&lt;/li&gt;\n&lt;li&gt;No PIA&lt;/li&gt;\n&lt;li&gt;No registration&lt;/li&gt;\n&lt;li&gt;No VSTO&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I am in no way affiliated with the project; I just genuinely appreciate the stark reduction in headaches.&lt;/p&gt;\n    ","\n&lt;p&gt;To add to reasons why Excel does not close, even when you create direct refrences to each object upon read, creation, is the &apos;For&apos; loop.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;For Each objWorkBook As WorkBook &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; objWorkBooks &lt;span class=&quot;hljs-string&quot;&gt;&apos;local ref, created from ExcelApp.WorkBooks to avoid the double-dot\n   objWorkBook.Close &apos;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; whatever\n   &lt;span class=&quot;hljs-title&quot;&gt;FinalReleaseComObject&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;objWorkBook&lt;/span&gt;)\n   objWorkBook&lt;/span&gt; = Nothing\nNext \n\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;The above does not work, and this is the workaround:\n\nFor intCounter As Integer = 1 To mobjExcel_WorkBooks.Count\n   Dim objTempWorkBook As Workbook = mobjExcel_WorkBooks.Item(intCounter)\n   objTempWorkBook.Saved = True\n   objTempWorkBook.Close(False, Type.Missing, Type.Missing)\n   FinalReleaseComObject(objTempWorkBook)\n   objTempWorkBook = Nothing\nNext\n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;The accepted answer here is correct, but also take note that not only &quot;two dot&quot; references need to be avoided, but also objects that are retrieved via the index.  You also do not need to wait until you are finished with the program to clean up these objects, it&apos;s best to create functions that will clean them up as soon as you&apos;re finished with them, when possible.  Here is a function I created that assigns some properties of a Style object called &lt;code&gt;xlStyleHeader&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Excel.Style xlStyleHeader = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CreateHeaderStyle&lt;/span&gt;()&lt;/span&gt;\n{\n    Excel.Styles xlStyles = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    Excel.Font xlFont = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    Excel.Interior xlInterior = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    Excel.Borders xlBorders = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n    Excel.Border xlBorderBottom = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        xlStyles = xlWorkbook.Styles;\n        xlStyleHeader = xlStyles.Add(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Header&quot;&lt;/span&gt;, Type.Missing);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Text Format&lt;/span&gt;\n        xlStyleHeader.NumberFormat = &lt;span class=&quot;hljs-string&quot;&gt;&quot;@&quot;&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Bold&lt;/span&gt;\n        xlFont = xlStyleHeader.Font;\n        xlFont.Bold = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Light Gray Cell Color&lt;/span&gt;\n        xlInterior = xlStyleHeader.Interior;\n        xlInterior.Color = &lt;span class=&quot;hljs-number&quot;&gt;12632256&lt;/span&gt;;\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Medium Bottom border&lt;/span&gt;\n        xlBorders = xlStyleHeader.Borders;\n        xlBorderBottom = xlBorders[Excel.XlBordersIndex.xlEdgeBottom];\n        xlBorderBottom.Weight = Excel.XlBorderWeight.xlMedium;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex)\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; ex;\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n    {\n        Release(xlBorderBottom);\n        Release(xlBorders);\n        Release(xlInterior);\n        Release(xlFont);\n        Release(xlStyles);\n    }\n}\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Release&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; obj&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Errors are ignored per Microsoft&apos;s suggestion for this type of function:&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// http://support.microsoft.com/default.aspx/kb/317109&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; { } \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that I had to set &lt;code&gt;xlBorders[Excel.XlBordersIndex.xlEdgeBottom]&lt;/code&gt; to a variable in order to clean that up (Not because of the two dots, which refer to an enumeration which does not need to be released, but because the object I&apos;m referring to is actually a Border object that does need to be released).&lt;/p&gt;\n\n&lt;p&gt;This sort of thing is not really necessary in standard applications, which do a great job of cleaning up after themselves, but in ASP.NET applications, if you miss even one of these, no matter how often you call the garbage collector, Excel will still be running on your server.  &lt;/p&gt;\n\n&lt;p&gt;It requires a lot of attention to detail and many test executions while monitoring the Task Manager when writing this code, but doing so saves you the hassle of desperately searching through pages of code to find the one instance you missed.  This is especially important when working in loops, where you need to release EACH INSTANCE of an object, even though it uses the same variable name each time it loops.&lt;/p&gt;\n    ","\n&lt;p&gt;After trying&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Release COM objects in reverse order&lt;/li&gt;\n&lt;li&gt;Add &lt;code&gt;GC.Collect()&lt;/code&gt; and &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt; twice at the end&lt;/li&gt;\n&lt;li&gt;No more than two dots&lt;/li&gt;\n&lt;li&gt;Close workbook and quit application&lt;/li&gt;\n&lt;li&gt;Run in release mode&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;the final solution that works for me is to move one set of&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;GC.Collect();\nGC.WaitForPendingFinalizers();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;that we added to the end of the function to a wrapper, as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FunctionWrapper&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; sourcePath, &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; targetPath&lt;/span&gt;)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n    {\n        FunctionThatCallsExcel(sourcePath, targetPath);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n    {\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I followed this exactly... But I still ran into issues 1 out of 1000 times. Who knows why. Time to bring out the hammer...&lt;/p&gt;\n\n&lt;p&gt;Right after the Excel Application class is instantiated I get a hold of the Excel process that was just created.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;excel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Microsoft.Office.Interop.Excel.Application();\n&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; process = Process.GetProcessesByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXCEL&quot;&lt;/span&gt;).OrderByDescending(p =&amp;gt; p.StartTime).First();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then once I&apos;ve done all the above COM clean-up, I make sure that process isn&apos;t running. If it is still running, kill it!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!process.HasExited)\n   process.Kill();\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;¨°º¤ø¸ Shoot Excel proc and chew bubble gum ¸ø¤º°¨&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyExcelInteropClass&lt;/span&gt;\n{\n    Excel.Application xlApp;\n    Excel.Workbook xlBook;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dothingswithExcel&lt;/span&gt;()&lt;/span&gt; \n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;/* Do stuff manipulating cells sheets and workbooks ... */&lt;/span&gt; }\n        &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; {}\n        &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {KillExcelProcess(xlApp);}\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;KillExcelProcess&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;Excel.Application xlApp&lt;/span&gt;)&lt;/span&gt;\n    {\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xlApp != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n        {\n            &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; excelProcessId = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n            GetWindowThreadProcessId(xlApp.Hwnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; excelProcessId);\n            Process p = Process.GetProcessById(excelProcessId);\n            p.Kill();\n            xlApp = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        }\n    }\n\n    [&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user32.dll&quot;&lt;/span&gt;)&lt;/span&gt;]\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetWindowThreadProcessId&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hWnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; lpdwProcessId&lt;/span&gt;)&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You need to be aware that Excel is very sensitive to the culture you are running under as well.&lt;/p&gt;\n\n&lt;p&gt;You may find that you need to set the culture to EN-US before calling Excel functions.\nThis does not apply to all functions - but some of them.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;    CultureInfo en_US = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; System.Globalization.CultureInfo(&lt;span class=&quot;hljs-string&quot;&gt;&quot;en-US&quot;&lt;/span&gt;); \n    System.Threading.Thread.CurrentThread.CurrentCulture = en_US;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; filePathLocal = _applicationObject.ActiveWorkbook.Path;\n    System.Threading.Thread.CurrentThread.CurrentCulture = orgCulture;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This applies even if you are using VSTO.&lt;/p&gt;\n\n&lt;p&gt;For details: &lt;a href=&quot;http://support.microsoft.com/default.aspx?scid=kb;en-us;Q320369&quot; rel=&quot;noreferrer&quot;&gt;http://support.microsoft.com/default.aspx?scid=kb;en-us;Q320369&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;&quot;Never use two dots with COM objects&quot; is a great rule of thumb to avoid leakage of COM references, but Excel PIA can lead to leakage in more ways than apparent at first sight.&lt;/p&gt;\n&lt;p&gt;One of these ways is subscribing to any event exposed by any of the Excel object model&apos;s COM objects.&lt;/p&gt;\n&lt;p&gt;For example, subscribing to the Application class&apos;s WorkbookOpen event.&lt;/p&gt;\n&lt;h3&gt;Some theory on COM events&lt;/h3&gt;\n&lt;p&gt;COM classes expose a group of events through call-back interfaces. In order to subscribe to events, the client code can simply register an object implementing the call-back interface and the COM class will invoke its methods in response to specific events. Since the call-back interface is a COM interface, it is the duty of the implementing object to decrement the reference count of any COM object it receives (as a parameter) for any of the event handlers.&lt;/p&gt;\n&lt;h3&gt;How Excel PIA expose COM Events&lt;/h3&gt;\n&lt;p&gt;Excel PIA exposes COM events of Excel Application class as conventional .NET events. Whenever the client code subscribes to &lt;strong&gt;a .NET event&lt;/strong&gt; (emphasis on &apos;a&apos;), PIA creates &lt;strong&gt;an&lt;/strong&gt; instance of a class implementing the call-back interface and registers it with Excel.&lt;/p&gt;\n&lt;p&gt;Hence, a number of call-back objects get registered with Excel in response to different subscription requests from the .NET code. One call-back object per event subscription.&lt;/p&gt;\n&lt;p&gt;A call-back interface for event handling means that, PIA has to subscribe to all interface events for every .NET event subscription request. It cannot pick and choose. On receiving an event call-back, the call-back object checks if the associated .NET event handler is interested in the current event or not and then either invokes the handler or silently ignores the call-back.&lt;/p&gt;\n&lt;h3&gt;Effect on COM instance reference counts&lt;/h3&gt;\n&lt;p&gt;All these call-back objects do not decrement the reference count of any of the COM objects they receive (as parameters) for any of the call-back methods (even for the ones that are silently ignored). They rely solely on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Common_Language_Runtime&quot; rel=&quot;nofollow noreferrer&quot;&gt;CLR&lt;/a&gt; garbage collector to free up the COM objects.&lt;/p&gt;\n&lt;p&gt;Since GC run is non-deterministic, this can lead to the holding off of Excel process for a longer duration than desired and create an impression of a &apos;memory leak&apos;.&lt;/p&gt;\n&lt;h3&gt;Solution&lt;/h3&gt;\n&lt;p&gt;The only solution as of now is to avoid the PIAs event provider for the COM class and write your own event provider which deterministically releases COM objects.&lt;/p&gt;\n&lt;p&gt;For the Application class, this can be done by implementing the AppEvents interface and then registering the implementation with Excel by using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.comtypes.iconnectionpointcontainer.aspx&quot; rel=&quot;nofollow noreferrer&quot;&gt;IConnectionPointContainer interface&lt;/a&gt;. The Application class (and for that matter all COM objects exposing events using callback mechanism) implements the IConnectionPointContainer interface.&lt;/p&gt;\n    ","\n&lt;p&gt;As others have pointed out, you need to create an explicit reference for every Excel object you use, and call Marshal.ReleaseComObject on that reference, as described in &lt;a href=&quot;http://support.microsoft.com/default.aspx/kb/317109&quot; rel=&quot;nofollow noreferrer&quot;&gt;this KB article&lt;/a&gt;.  You also need to use try/finally to ensure ReleaseComObject is always called, even when an exception is thrown.  I.e. instead of:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Worksheet sheet = excelApp.Worksheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)\n... &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; something &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; sheet\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;you need to do something like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Worksheets sheets = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\nWorksheet sheet = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{ \n    sheets = excelApp.Worksheets;\n    sheet = sheets(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);\n    ...\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sheets != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) Marshal.ReleaseComObject(sheets);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (sheet != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) Marshal.ReleaseComObject(sheet);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You also need to call Application.Quit before releasing the Application object if you want Excel to close.&lt;/p&gt;\n\n&lt;p&gt;As you can see, this quickly becomes extremely unwieldy as soon as you try to do anything even moderately complex.  I have successfully developed .NET applications with a simple wrapper class that wraps a few simple manipulations of the Excel object model (open a workbook, write to a Range, save/close the workbook etc).  The wrapper class implements IDisposable, carefully implements Marshal.ReleaseComObject on every object it uses, and does not pubicly expose any Excel objects to the rest of the app.&lt;/p&gt;\n\n&lt;p&gt;But this approach doesn&apos;t scale well for more complex requirements.  &lt;/p&gt;\n\n&lt;p&gt;This is a big deficiency of .NET COM Interop.  For more complex scenarios, I would seriously consider writing an ActiveX DLL in VB6 or other unmanaged language to which you can delegate all interaction with out-proc COM objects such as Office.  You can then reference this ActiveX DLL from your .NET application, and things will be much easier as you will only need to release this one reference.&lt;/p&gt;\n    ","\n&lt;p&gt;When all the stuff above didn&apos;t work, try giving Excel some time to close its sheets:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;app.workbooks.Close();\nThread.Sleep(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// adjust, for me it works at around 300+&lt;/span&gt;\napp.Quit();\n\n...\nFinalReleaseComObject(app);\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Make sure that you release all objects related to Excel!&lt;/p&gt;\n\n&lt;p&gt;I spent a few hours by trying several ways. All are great ideas but I finally found my mistake: &lt;strong&gt;If you don&apos;t release all objects, none of the ways above can help you&lt;/strong&gt; like in my case. Make sure you release all objects including range one!&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;Excel.Range rng = (Excel.Range)worksheet.Cells[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];\nworksheet.Paste(rng, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\nreleaseObject(rng);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The options are together &lt;a href=&quot;http://birvesifir.com/2012/08/08/how-to-properly-clean-up-excel-interop-objects-in-c/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;A great article on releasing COM objects is &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/office/aa679807(v=office.12).aspx#officeinteroperabilitych2_part2_rco&quot; rel=&quot;nofollow noreferrer&quot;&gt;2.5 Releasing COM Objects&lt;/a&gt;&lt;/em&gt; (MSDN).&lt;/p&gt;\n\n&lt;p&gt;The method that I would advocate is to null your Excel.Interop references if they are non-local variables, and then call &lt;code&gt;GC.Collect()&lt;/code&gt; and &lt;code&gt;GC.WaitForPendingFinalizers()&lt;/code&gt; twice. Locally scoped Interop variables will be taken care of automatically.&lt;/p&gt;\n\n&lt;p&gt;This removes the need to keep a named reference for &lt;strong&gt;every&lt;/strong&gt; COM object.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s an example taken from the article:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Test&lt;/span&gt; {\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// These instance variables must be nulled or Excel will not quit&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Excel.Application xl;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Excel.Workbook book;\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;DoSomething&lt;/span&gt;()&lt;/span&gt;\n    {\n        xl = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Excel.Application();\n        xl.Visible = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;\n        book = xl.Workbooks.Add(Type.Missing);\n\n        &lt;span class=&quot;hljs-comment&quot;&gt;// These variables are locally scoped, so we need not worry about them.&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Notice I don&apos;t care about using two dots.&lt;/span&gt;\n        Excel.Range rng = book.Worksheets[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].UsedRange;\n    }\n\n    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;CleanUp&lt;/span&gt;()&lt;/span&gt;\n    {\n        book = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n        xl.Quit();\n        xl = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;\n\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;These words are straight from the article:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;In almost all situations, nulling the RCW reference and forcing a garbage collection will clean up properly. If you also call GC.WaitForPendingFinalizers, garbage collection will be as deterministic as you can make it. That is, you&apos;ll be pretty sure exactly when the object has been cleaned upon the return from the second call to WaitForPendingFinalizers. As an alternative, you can use Marshal.ReleaseComObject. However, note that you are very unlikely to ever need to use this method.&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;The two dots rule did not work for me. In my case I created a method to clean my resources as follows:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Clean&lt;/span&gt;()&lt;/span&gt;\n{\n    workBook.Close();\n    Marshall.ReleaseComObject(workBook);\n    excel.Quit();\n    CG.Collect();\n    CG.WaitForPendingFinalizers();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;My solution&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;[&lt;span class=&quot;hljs-meta&quot;&gt;DllImport(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user32.dll&quot;&lt;/span&gt;)&lt;/span&gt;]\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GetWindowThreadProcessId&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; hWnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; lpdwProcessId&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;GenerateExcel&lt;/span&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; excel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Microsoft.Office.Interop.Excel.Application();\n    &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; id;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Find the Excel Process Id (ath the end, you kill him&lt;/span&gt;\n    GetWindowThreadProcessId(excel.Hwnd, &lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt; id);\n    Process excelProcess = Process.GetProcessById(id);\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Your code&lt;/span&gt;\n}\n&lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt;\n{\n    excel.Quit();\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Kill him !&lt;/span&gt;\n    excelProcess.Kill();\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You should be very careful using Word/Excel interop applications. After trying all the solutions we still had a lot of &quot;WinWord&quot; process left open on server (with more than 2000 users).&lt;/p&gt;\n\n&lt;p&gt;After working on the problem for hours, I realized that if I open more than a couple of documents using &lt;code&gt;Word.ApplicationClass.Document.Open()&lt;/code&gt; on different threads simultaneously, IIS worker process (w3wp.exe) would crash leaving all WinWord processes open!&lt;/p&gt;\n\n&lt;p&gt;So I guess there is no absolute solution to this problem, but switching to other methods such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Office_Open_XML&quot; rel=&quot;nofollow noreferrer&quot;&gt;Office Open XML&lt;/a&gt; development.&lt;/p&gt;\n    ","\n&lt;p&gt;The accepted answer did not work for me. The following code in the destructor did the job.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (xlApp != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;)\n{\n    xlApp.Workbooks.Close();\n    xlApp.Quit();\n}\n\nSystem.Diagnostics.Process[] processArray = System.Diagnostics.Process.GetProcessesByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXCEL&quot;&lt;/span&gt;);\n&lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (System.Diagnostics.Process process &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; processArray)\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.MainWindowTitle.Length == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) { process.Kill(); }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I am currently working on Office automation and have stumbled across a solution for this that works every time for me. It is simple and does not involve killing any processes.&lt;/p&gt;\n\n&lt;p&gt;It seems that by merely looping through the current active processes, and in any way &apos;accessing&apos; an open Excel process, any stray hanging instance of Excel will be removed. The below code simply checks for processes where the name is &apos;Excel&apos;, then writes the MainWindowTitle property of the process to a string. This &apos;interaction&apos; with the process seems to make Windows catch up and abort the frozen instance of Excel. &lt;/p&gt;\n\n&lt;p&gt;I run the below method just before the add-in which I am developing quits, as it fires it unloading event. It removes any hanging instances of Excel every time. In all honesty I am not entirely sure why this works, but it works well for me and could be placed at the end of any Excel application without having to worry about double dots, Marshal.ReleaseComObject, nor killing processes. I would be very interested in any suggestions as to why this is effective.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SweepExcelProcesses&lt;/span&gt;()&lt;/span&gt;\n{           \n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (Process.GetProcessesByName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EXCEL&quot;&lt;/span&gt;).Length != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n            {\n                Process[] processes = Process.GetProcesses();\n                &lt;span class=&quot;hljs-keyword&quot;&gt;foreach&lt;/span&gt; (Process process &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; processes)\n                {\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (process.ProcessName.ToString() == &lt;span class=&quot;hljs-string&quot;&gt;&quot;excel&quot;&lt;/span&gt;)\n                    {                           \n                        &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; title = process.MainWindowTitle;\n                    }\n                }\n            }\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I think that some of that is just the way that the framework handles Office applications, but I could be wrong. On some days, some applications clean up the processes immediately, and other days it seems to wait until the application closes. In general, I quit paying attention to the details and just make sure that there aren&apos;t any extra processes floating around at the end of the day.&lt;/p&gt;\n\n&lt;p&gt;Also, and maybe I&apos;m over simplifying things, but I think you can just...&lt;/p&gt;\n\n&lt;pre class=&quot;lang-cs s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;objExcel = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Excel.Application();\nobjBook = (Excel.Workbook)(objExcel.Workbooks.Add(Type.Missing));\nDoSomeStuff(objBook);\nSaveTheBook(objBook);\nobjBook.Close(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, Type.Missing, Type.Missing);\nobjExcel.Quit();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Like I said earlier, I don&apos;t tend to pay attention to the details of when the Excel process appears or disappears, but that usually works for me.  I also don&apos;t like to keep Excel processes around for anything other than the minimal amount of time, but I&apos;m probably just being paranoid on that.&lt;/p&gt;\n    ","\n&lt;p&gt;As some have probably already written, it&apos;s not just important how you &lt;em&gt;close&lt;/em&gt; the Excel (object); it&apos;s also important how you &lt;em&gt;open&lt;/em&gt; it and also by the type of the project.&lt;/p&gt;\n\n&lt;p&gt;In a WPF application, basically the same code is working without or with very few problems.&lt;/p&gt;\n\n&lt;p&gt;I have a project in which the same Excel file is being processed several times for different parameter value - e.g. parsing it based on values inside a generic list. &lt;/p&gt;\n\n&lt;p&gt;I put all Excel-related functions into the base class, and parser into a subclass (different parsers use common Excel functions). I didn&apos;t want that Excel is opened and closed again for each item in a generic list, so I&apos;ve opened it only once in the base class and close it in the subclass. I had problems when moving the code into a desktop application. I&apos;ve tried many of the above mentioned solutions. &lt;code&gt;GC.Collect()&lt;/code&gt; was already implemented before, twice as suggested.&lt;/p&gt;\n\n&lt;p&gt;Then I&apos;ve decided that I will move the code for opening Excel to a subclass. Instead of opening only once, now I create a new object (base class) and open Excel for every item and close it at the end. There is some performance penalty, but based on several tests Excel processes are closing without problems (in debug mode), so also temporary files are removed. I will continue with testing and write some more if I will get some updates.&lt;/p&gt;\n\n&lt;p&gt;The bottom line is: You must also check the initialize code, especially if you have many classes, etc.&lt;/p&gt;\n    "],"532":["\n&lt;h1&gt;Function pointers in C&lt;/h1&gt;\n\n&lt;p&gt;Let&apos;s start with a basic function which we will be &lt;em&gt;pointing to&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;addInt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; m)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; n+m;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;First thing, let&apos;s define a pointer to a function which receives 2 &lt;code&gt;int&lt;/code&gt;s and returns an &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*functionPtr)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now we can safely point to our function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;functionPtr = &amp;amp;addInt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now that we have a pointer to the function, let&apos;s use it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; sum = (*functionPtr)(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// sum == 5&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Passing the pointer to another function is basically the same:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add2to3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*functionPtr)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;))&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (*functionPtr)(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We can use function pointers in return values as well (try to keep up, it gets messy):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// this is a function called functionFactory which receives parameter n&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and returns a pointer to another function which receives two ints&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// and it returns another int&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*functionFactory(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n))(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got parameter %d&quot;&lt;/span&gt;, n);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*functionPtr)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;) = &amp;amp;addInt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; functionPtr;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But it&apos;s much nicer to use a &lt;code&gt;typedef&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*myFuncDef)&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-comment&quot;&gt;// note that the typedef name is indeed myFuncDef&lt;/span&gt;\n\nmyFuncDef &lt;span class=&quot;hljs-title function_&quot;&gt;functionFactory&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got parameter %d&quot;&lt;/span&gt;, n);\n    myFuncDef functionPtr = &amp;amp;addInt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; functionPtr;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Function pointers in C can be used to perform object-oriented programming in C.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;For example, the following lines is written in C:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;String s1 = newString();\ns1-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(s1, &lt;span class=&quot;hljs-string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yes, the &lt;code&gt;-&amp;gt;&lt;/code&gt; and the lack of a &lt;code&gt;new&lt;/code&gt; operator is a dead give away, but it sure seems to imply that we&apos;re setting the text of some &lt;code&gt;String&lt;/code&gt; class to be &lt;code&gt;&quot;hello&quot;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;By using function pointers, &lt;strong&gt;it is possible to emulate methods in C&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;How is this accomplished?&lt;/p&gt;\n\n&lt;p&gt;The &lt;code&gt;String&lt;/code&gt; class is actually a &lt;code&gt;struct&lt;/code&gt; with a bunch of function pointers which act as a way to simulate methods. The following is a partial declaration of the &lt;code&gt;String&lt;/code&gt; class:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;String_Struct&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;String_Struct&lt;/span&gt;\n{&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* (*get)(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self);\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; (*&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;)(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* value);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*length)(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self);\n};\n\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self)&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* value)&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lengthString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self)&lt;/span&gt;;\n\nString &lt;span class=&quot;hljs-title function_&quot;&gt;newString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As can be seen, the methods of the &lt;code&gt;String&lt;/code&gt; class are actually function pointers to the declared function. In preparing the instance of the &lt;code&gt;String&lt;/code&gt;, the &lt;code&gt;newString&lt;/code&gt; function is called in order to set up the function pointers to their respective functions:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;String &lt;span class=&quot;hljs-title function_&quot;&gt;newString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    String self = (String)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; String_Struct));\n\n    self-&amp;gt;get = &amp;amp;getString;\n    self-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt; = &amp;amp;setString;\n    self-&amp;gt;length = &amp;amp;lengthString;\n\n    self-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(self, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, the &lt;code&gt;getString&lt;/code&gt; function that is called by invoking the &lt;code&gt;get&lt;/code&gt; method is defined as the following:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;hljs-title function_&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self_obj)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ((String)self_obj)-&amp;gt;internal-&amp;gt;value;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One thing that can be noticed is that there is no concept of an instance of an object and having methods that are actually a part of an object, so a &quot;self object&quot; must be passed in on each invocation. (And the &lt;code&gt;internal&lt;/code&gt; is just a hidden &lt;code&gt;struct&lt;/code&gt; which was omitted from the code listing earlier -- it is a way of performing information hiding, but that is not relevant to function pointers.)&lt;/p&gt;\n\n&lt;p&gt;So, rather than being able to do &lt;code&gt;s1-&amp;gt;set(&quot;hello&quot;);&lt;/code&gt;, one must pass in the object to perform the action on &lt;code&gt;s1-&amp;gt;set(s1, &quot;hello&quot;)&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;With that minor explanation having to pass in a reference to yourself out of the way, we&apos;ll move to the next part, which is &lt;strong&gt;inheritance in C&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Let&apos;s say we want to make a subclass of &lt;code&gt;String&lt;/code&gt;, say an &lt;code&gt;ImmutableString&lt;/code&gt;. In order to make the string immutable, the &lt;code&gt;set&lt;/code&gt; method will not be accessible, while maintaining access to &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt;, and force the &quot;constructor&quot; to accept a &lt;code&gt;char*&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ImmutableString_Struct&lt;/span&gt;* &lt;span class=&quot;hljs-title&quot;&gt;ImmutableString&lt;/span&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ImmutableString_Struct&lt;/span&gt;\n{&lt;/span&gt;\n    String base;\n\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* (*get)(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self);\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*length)(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self);\n};\n\nImmutableString &lt;span class=&quot;hljs-title function_&quot;&gt;newImmutableString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* value)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically, for all subclasses, the available methods are once again function pointers. This time, the declaration for the &lt;code&gt;set&lt;/code&gt; method is not present, therefore, it cannot be called in a &lt;code&gt;ImmutableString&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;As for the implementation of the &lt;code&gt;ImmutableString&lt;/code&gt;, the only relevant code is the &quot;constructor&quot; function, the &lt;code&gt;newImmutableString&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;ImmutableString &lt;span class=&quot;hljs-title function_&quot;&gt;newImmutableString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* value)&lt;/span&gt;\n{\n    ImmutableString self = (ImmutableString)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; ImmutableString_Struct));\n\n    self-&amp;gt;base = newString();\n\n    self-&amp;gt;get = self-&amp;gt;base-&amp;gt;get;\n    self-&amp;gt;length = self-&amp;gt;base-&amp;gt;length;\n\n    self-&amp;gt;base-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(self-&amp;gt;base, (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)value);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In instantiating the &lt;code&gt;ImmutableString&lt;/code&gt;, the function pointers to the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; methods actually refer to the &lt;code&gt;String.get&lt;/code&gt; and &lt;code&gt;String.length&lt;/code&gt; method, by going through the &lt;code&gt;base&lt;/code&gt; variable which is an internally stored &lt;code&gt;String&lt;/code&gt; object.&lt;/p&gt;\n\n&lt;p&gt;The use of a function pointer can achieve inheritance of a method from a superclass.&lt;/p&gt;\n\n&lt;p&gt;We can further continue to &lt;strong&gt;polymorphism in C&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;If for example we wanted to change the behavior of the &lt;code&gt;length&lt;/code&gt; method to return &lt;code&gt;0&lt;/code&gt; all the time in the &lt;code&gt;ImmutableString&lt;/code&gt; class for some reason, all that would have to be done is to:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Add a function that is going to serve as the overriding &lt;code&gt;length&lt;/code&gt; method.&lt;/li&gt;\n&lt;li&gt;Go to the &quot;constructor&quot; and set the function pointer to the overriding &lt;code&gt;length&lt;/code&gt; method.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Adding an overriding &lt;code&gt;length&lt;/code&gt; method in &lt;code&gt;ImmutableString&lt;/code&gt; may be performed by adding an &lt;code&gt;lengthOverrideMethod&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;lengthOverrideMethod&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;* self)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, the function pointer for the &lt;code&gt;length&lt;/code&gt; method in the constructor is hooked up to the &lt;code&gt;lengthOverrideMethod&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;ImmutableString &lt;span class=&quot;hljs-title function_&quot;&gt;newImmutableString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* value)&lt;/span&gt;\n{\n    ImmutableString self = (ImmutableString)&lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; ImmutableString_Struct));\n\n    self-&amp;gt;base = newString();\n\n    self-&amp;gt;get = self-&amp;gt;base-&amp;gt;get;\n    self-&amp;gt;length = &amp;amp;lengthOverrideMethod;\n\n    self-&amp;gt;base-&amp;gt;&lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;(self-&amp;gt;base, (&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*)value);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; self;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, rather than having an identical behavior for the &lt;code&gt;length&lt;/code&gt; method in &lt;code&gt;ImmutableString&lt;/code&gt; class as the &lt;code&gt;String&lt;/code&gt; class, now the &lt;code&gt;length&lt;/code&gt; method will refer to the behavior defined in the &lt;code&gt;lengthOverrideMethod&lt;/code&gt; function.&lt;/p&gt;\n\n&lt;p&gt;I must add a disclaimer that I am still learning how to write with an object-oriented programming style in C, so there probably are points that I didn&apos;t explain well, or may just be off mark in terms of how best to implement OOP in C. But my purpose was to try to illustrate one of many uses of function pointers.&lt;/p&gt;\n\n&lt;p&gt;For more information on how to perform object-oriented programming in C, please refer to the following questions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/415452/object-orientation-in-c&quot;&gt;Object-Orientation in C?&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/351733/can-you-write-object-oriented-code-in-c&quot;&gt;Can you write object oriented code in C?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;The guide to getting fired: How to abuse function pointers in GCC on x86 machines by compiling your code by hand:&lt;/p&gt;\n\n&lt;p&gt;These string literals are bytes of 32-bit x86 machine code.  &lt;code&gt;0xC3&lt;/code&gt; is &lt;a href=&quot;http://felixcloutier.com/x86/RET.html&quot; rel=&quot;noreferrer&quot;&gt;an x86 &lt;code&gt;ret&lt;/code&gt; instruction&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You wouldn&apos;t normally write these by hand, you&apos;d write in assembly language and then use an assembler like &lt;code&gt;nasm&lt;/code&gt; to assemble it into a flat binary which you hexdump into a C string literal.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Returns the current value on the EAX register&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; eax = ((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*)())(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\xc3 &amp;lt;- This returns the value of the EAX register&quot;&lt;/span&gt;))();\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Write a swap function&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, b = &lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;;\n((&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;(*)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*,&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;*))&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\x8b\\x44\\x24\\x04\\x8b\\x5c\\x24\\x08\\x8b\\x00\\x8b\\x1b\\x31\\xc3\\x31\\xd8\\x31\\xc3\\x8b\\x4c\\x24\\x04\\x89\\x01\\x8b\\x4c\\x24\\x08\\x89\\x19\\xc3 &amp;lt;- This swaps the values of a and b&quot;&lt;/span&gt;)(&amp;amp;a,&amp;amp;b);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Write a for-loop counter to 1000, calling some function each time&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*)())&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\x66\\x31\\xc0\\x8b\\x5c\\x24\\x04\\x66\\x40\\x50\\xff\\xd3\\x58\\x66\\x3d\\xe8\\x03\\x75\\xf4\\xc3&quot;&lt;/span&gt;)(&amp;amp;function); &lt;span class=&quot;hljs-comment&quot;&gt;// calls function with 1-&amp;gt;1000&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You can even write a recursive function that counts to 100&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* lol = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\x8b\\x5c\\x24\\x4\\x3d\\xe8\\x3\\x0\\x0\\x7e\\x2\\x31\\xc0\\x83\\xf8\\x64\\x7d\\x6\\x40\\x53\\xff\\xd3\\x5b\\xc3\\xc3 &amp;lt;- Recursively calls the function at address lol.&quot;&lt;/span&gt;;\ni = ((&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*)())(lol))(lol);\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Note that compilers place string literals in the &lt;code&gt;.rodata&lt;/code&gt; section (or &lt;code&gt;.rdata&lt;/code&gt; on Windows), which is linked as part of the text segment (along with code for functions).&lt;/p&gt;\n\n&lt;p&gt;The text segment has Read+Exec permission, so casting string literals to function pointers works without needing &lt;code&gt;mprotect()&lt;/code&gt; or &lt;code&gt;VirtualProtect()&lt;/code&gt; system calls like you&apos;d need for dynamically allocated memory.  (Or &lt;code&gt;gcc -z execstack&lt;/code&gt; links the program with stack + data segment + heap executable, as a quick hack.)&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;To disassemble these, you can compile this to put a label on the bytes, and use a disassembler.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// at global scope&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; swap[] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;\\x8b\\x44\\x24\\x04\\x8b\\x5c\\x24\\x08\\x8b\\x00\\x8b\\x1b\\x31\\xc3\\x31\\xd8\\x31\\xc3\\x8b\\x4c\\x24\\x04\\x89\\x01\\x8b\\x4c\\x24\\x08\\x89\\x19\\xc3 &amp;lt;- This swaps the values of a and b&quot;&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Compiling with &lt;code&gt;gcc -c -m32 foo.c&lt;/code&gt; and disassembling with &lt;code&gt;objdump -D -rwC -Mintel&lt;/code&gt;, we can get the assembly, and find out that this code violates the ABI by clobbering EBX (a call-preserved register) and is generally inefficient.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;00000000&lt;/span&gt; &amp;lt;swap&amp;gt;:\n   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;             mov    eax,DWORD PTR [esp+&lt;span class=&quot;hljs-number&quot;&gt;0x4&lt;/span&gt;]   &lt;span class=&quot;hljs-meta&quot;&gt;# load int *a arg from the stack&lt;/span&gt;\n   &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;c &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt;             mov    ebx,DWORD PTR [esp+&lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;]   &lt;span class=&quot;hljs-meta&quot;&gt;# ebx = b&lt;/span&gt;\n   &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt;                   mov    eax,DWORD PTR [eax]       &lt;span class=&quot;hljs-meta&quot;&gt;# dereference: eax = *a&lt;/span&gt;\n   a:   &lt;span class=&quot;hljs-number&quot;&gt;8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1b&lt;/span&gt;                   mov    ebx,DWORD PTR [ebx]\n   c:   &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; c3                   xor    ebx,eax                &lt;span class=&quot;hljs-meta&quot;&gt;# pointless xor-swap&lt;/span&gt;\n   e:   &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; d8                   xor    eax,ebx                &lt;span class=&quot;hljs-meta&quot;&gt;# instead of just storing with opposite registers&lt;/span&gt;\n  &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;31&lt;/span&gt; c3                   xor    ebx,eax\n  &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;c &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;04&lt;/span&gt;             mov    ecx,DWORD PTR [esp+&lt;span class=&quot;hljs-number&quot;&gt;0x4&lt;/span&gt;]  &lt;span class=&quot;hljs-meta&quot;&gt;# reload a from the stack&lt;/span&gt;\n  &lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt;                   mov    DWORD PTR [ecx],eax     &lt;span class=&quot;hljs-meta&quot;&gt;# store to *a&lt;/span&gt;\n  &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:   &lt;span class=&quot;hljs-number&quot;&gt;8b&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;c &lt;span class=&quot;hljs-number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;08&lt;/span&gt;             mov    ecx,DWORD PTR [esp+&lt;span class=&quot;hljs-number&quot;&gt;0x8&lt;/span&gt;]\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;c:   &lt;span class=&quot;hljs-number&quot;&gt;89&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt;                   mov    DWORD PTR [ecx],ebx\n  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;e:   c3                      ret    \n\n  not shown: the later bytes are ASCII text documentation\n  they&lt;span class=&quot;hljs-number&quot;&gt;&apos;&lt;/span&gt;re not executed by the CPU because the ret instruction sends execution back to the caller\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This machine code will (probably) work in 32-bit code on Windows, Linux, OS X, and so on: the default calling conventions on all those OSes pass args on the stack instead of more efficiently in registers.  But EBX is call-preserved in all the normal calling conventions, so using it as a scratch register without saving/restoring it can easily make the caller crash.&lt;/p&gt;\n    ","\n&lt;p&gt;One of my favorite uses for function pointers is as cheap and easy iterators - &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; MAX_COLORS  256&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* name;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; red;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; green;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; blue;\n} Color;\n\nColor Colors[MAX_COLORS];\n\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;eachColor&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; (*fp)(Color *c))&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; i;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i&amp;lt;MAX_COLORS; i++)\n        (*fp)(&amp;amp;Colors[i]);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;printColor&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Color* c)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (c-&amp;gt;name)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%s = %i,%i,%i\\n&quot;&lt;/span&gt;, c-&amp;gt;name, c-&amp;gt;red, c-&amp;gt;green, c-&amp;gt;blue);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    Colors[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;red&quot;&lt;/span&gt;;\n    Colors[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;].red=&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;;\n    Colors[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&lt;/span&gt;;\n    Colors[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].blue=&lt;span class=&quot;hljs-number&quot;&gt;255&lt;/span&gt;;\n    Colors[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;black&quot;&lt;/span&gt;;\n\n    eachColor(printColor);\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Function pointers become easy to declare once you have the basic declarators:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;id: &lt;code&gt;ID&lt;/code&gt;: &lt;em&gt;ID is a&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Pointer: &lt;code&gt;*D&lt;/code&gt;: &lt;em&gt;D pointer to&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Function: &lt;code&gt;D(&amp;lt;parameters&amp;gt;)&lt;/code&gt;: &lt;em&gt;D function taking &lt;code&gt;&amp;lt;&lt;/code&gt;parameters&lt;code&gt;&amp;gt;&lt;/code&gt; returning&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;While D is another declarator built using those same rules. In the end, somewhere, it ends with &lt;code&gt;ID&lt;/code&gt; (see below for an example), which is the name of the declared entity. Let&apos;s try to build a function taking a pointer to a function taking nothing and returning int, and returning a pointer to a function taking a char and returning int. With type-defs it&apos;s like this&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ReturnFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;ParameterFunction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;\nReturnFunction *&lt;span class=&quot;hljs-title function_&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ParameterFunction *p)&lt;/span&gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you see, it&apos;s pretty easy to build it up using typedefs. Without typedefs, it&apos;s not hard either with the above declarator rules, applied consistently. As you see i missed out the part the pointer points to, and the thing the function returns. That&apos;s what appears at the very left of the declaration, and is not of interest: It&apos;s added at the end if one built up the declarator already. Let&apos;s do that. Building it up consistently, first wordy - showing the structure using &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;function taking \n    [pointer to [function taking [&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;] returning [&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;]]] \nreturning\n    [pointer to [function taking [&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;] returning [&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;]]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As you see, one can describe a type completely by appending declarators one after each other. Construction can be done in two ways. One is bottom-up, starting with the very right thing (leaves) and working the way through up to the identifier. The other way is top-down, starting at the identifier, working the way down to the leaves. I&apos;ll show both ways.&lt;/p&gt;\n\n&lt;h2&gt;Bottom Up&lt;/h2&gt;\n\n&lt;p&gt;Construction starts with the thing at the right: The thing returned, which is the function taking char. To keep the declarators distinct, i&apos;m going to number them:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;D1(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Inserted the char parameter directly, since it&apos;s trivial. Adding a pointer to declarator by replacing &lt;code&gt;D1&lt;/code&gt; by &lt;code&gt;*D2&lt;/code&gt;. Note that we have to wrap parentheses around &lt;code&gt;*D2&lt;/code&gt;. That can be known by looking up the precedence of the &lt;code&gt;*-operator&lt;/code&gt; and the function-call operator &lt;code&gt;()&lt;/code&gt;. Without our parentheses, the compiler would read it as &lt;code&gt;*(D2(char p))&lt;/code&gt;. But that would not be a plain replace of D1 by &lt;code&gt;*D2&lt;/code&gt; anymore, of course. Parentheses are always allowed around declarators. So you don&apos;t make anything wrong if you add too much of them, actually.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;(*D2)(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Return type is complete! Now, let&apos;s replace &lt;code&gt;D2&lt;/code&gt; by the function declarator &lt;em&gt;function taking &lt;code&gt;&amp;lt;parameters&amp;gt;&lt;/code&gt; returning&lt;/em&gt;, which is &lt;code&gt;D3(&amp;lt;parameters&amp;gt;)&lt;/code&gt; which we are at now. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;(*D3(&amp;lt;parameters&amp;gt;))(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that no parentheses are needed, since we &lt;em&gt;want&lt;/em&gt; &lt;code&gt;D3&lt;/code&gt; to be a function-declarator and not a pointer declarator this time. Great, only thing left is the parameters for it. The parameter is done exactly the same as we&apos;ve done the return type, just with &lt;code&gt;char&lt;/code&gt; replaced by &lt;code&gt;void&lt;/code&gt;. So i&apos;ll copy it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;(*D3(   (*ID1)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)))(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve replaced &lt;code&gt;D2&lt;/code&gt; by &lt;code&gt;ID1&lt;/code&gt;, since we are finished with that parameter (it&apos;s already a pointer to a function - no need for another declarator). &lt;code&gt;ID1&lt;/code&gt; will be the name of the parameter. Now, i told above at the end one adds the type which all those declarator modify - the one appearing at the very left of every declaration. For functions, that becomes the return type. For pointers the pointed to type etc... It&apos;s interesting when written down the type, it will appear in the opposite order, at the very right :) Anyway, substituting it yields the complete declaration. Both times &lt;code&gt;int&lt;/code&gt; of course. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*ID0(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*ID1)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)))(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&apos;ve called the identifier of the function &lt;code&gt;ID0&lt;/code&gt; in that example. &lt;/p&gt;\n\n&lt;h2&gt;Top Down&lt;/h2&gt;\n\n&lt;p&gt;This starts at the identifier at the very left in the description of the type, wrapping that declarator as we walk our way through the right. Start with &lt;em&gt;function taking &lt;code&gt;&amp;lt;&lt;/code&gt;parameters&lt;code&gt;&amp;gt;&lt;/code&gt; returning&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;ID0(&amp;lt;parameters&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The next thing in the description (after &quot;returning&quot;) was &lt;em&gt;pointer to&lt;/em&gt;. Let&apos;s incorporate it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;*ID0(&amp;lt;parameters&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then the next thing was &lt;em&gt;functon taking &lt;code&gt;&amp;lt;&lt;/code&gt;parameters&lt;code&gt;&amp;gt;&lt;/code&gt; returning&lt;/em&gt;. The parameter is a simple char, so we put it in right away again, since it&apos;s really trivial.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;(*ID0(&amp;lt;parameters&amp;gt;))(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the parentheses we added, since we again want that the &lt;code&gt;*&lt;/code&gt; binds first, and &lt;em&gt;then&lt;/em&gt; the &lt;code&gt;(char)&lt;/code&gt;. Otherwise it would read &lt;em&gt;function taking &lt;code&gt;&amp;lt;&lt;/code&gt;parameters&lt;code&gt;&amp;gt;&lt;/code&gt; returning function ...&lt;/em&gt;. Noes, functions returning functions aren&apos;t even allowed. &lt;/p&gt;\n\n&lt;p&gt;Now we just need to put &lt;code&gt;&amp;lt;&lt;/code&gt;parameters&lt;code&gt;&amp;gt;&lt;/code&gt;. I will show a short version of the deriveration, since i think you already by now have the idea how to do it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;pointer to: *ID1\n... function taking &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; returning: (*ID1)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just put &lt;code&gt;int&lt;/code&gt; before the declarators like we did with bottom-up, and we are finished&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*ID0(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*ID1)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)))(&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;The nice thing&lt;/h2&gt;\n\n&lt;p&gt;Is bottom-up or top-down better? I&apos;m used to bottom-up, but some people may be more comfortable with top-down. It&apos;s a matter of taste i think. Incidentally, if you apply all the operators in that declaration, you will end up getting an int:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; v = (*ID0(some_function_pointer))(some_char);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That is a nice property of declarations in C: The declaration asserts that if those operators are used in an expression using the identifier, then it yields the type on the very left. It&apos;s like that for arrays too. &lt;/p&gt;\n\n&lt;p&gt;Hope you liked this little tutorial! Now we can link to this when people wonder about the strange declaration syntax of functions. I tried to put as little C internals as possible. Feel free to edit/fix things in it. &lt;/p&gt;\n    ","\n&lt;h2&gt;Another good use for function pointers:&lt;br&gt;Switching between versions painlessly&lt;/h2&gt;\n\n&lt;p&gt;They&apos;re very handy to use for when you want different functions at different times, or different phases of development. For instance, I&apos;m developing an application on a host computer that has a console, but the final release of the software will be put on an Avnet ZedBoard (which has ports for displays and consoles, but they are not needed/wanted for the final release). So during development, I will use &lt;code&gt;printf&lt;/code&gt; to view status and error messages, but when I&apos;m done, I don&apos;t want anything printed. Here&apos;s what I&apos;ve done:&lt;/p&gt;\n\n&lt;h1&gt;version.h&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// First, undefine all macros associated with version.h&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; DEBUG_VERSION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; RELEASE_VERSION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;undef&lt;/span&gt; INVALID_VERSION&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Define which version we want to use&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; DEBUG_VERSION       &lt;span class=&quot;hljs-comment&quot;&gt;// The current version&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// #define RELEASE_VERSION  // To be uncommented when finished debugging&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; __VERSION_H_      &lt;span class=&quot;hljs-comment&quot;&gt;/* prevent circular inclusions */&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; __VERSION_H_  &lt;span class=&quot;hljs-comment&quot;&gt;/* by using protection macros */&lt;/span&gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;board_init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;noprintf&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *c, ...)&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// mimic the printf prototype&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// Mimics the printf function prototype. This is what I&apos;ll actually &lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// use to print stuff to the screen&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; (* zprintf)(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;*, ...); \n\n&lt;span class=&quot;hljs-comment&quot;&gt;// If debug version, use printf&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEBUG_VERSION&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// If both debug and release version, error&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEBUG_VERSION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; RELEASE_VERSION&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INVALID_VERSION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// If neither debug or release version, error&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; DEBUG_VERSION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifndef&lt;/span&gt; RELEASE_VERSION&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; INVALID_VERSION&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; INVALID_VERSION&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Won&apos;t allow compilation without a valid version define&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid version definition&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In &lt;code&gt;version.c&lt;/code&gt; I will define the 2 function prototypes present in &lt;code&gt;version.h&lt;/code&gt;&lt;/p&gt;\n\n&lt;h1&gt;version.c&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;version.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*****************************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n* @name board_init\n*\n* Sets up the application based on the version type defined in version.h.\n* Includes allowing or prohibiting printing to STDOUT.\n*\n* MUST BE CALLED FIRST THING IN MAIN\n*\n* @return    None\n*\n*****************************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;board_init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Assign the print function to the correct function pointer&lt;/span&gt;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;ifdef&lt;/span&gt; DEBUG_VERSION&lt;/span&gt;\n        zprintf = &amp;amp;&lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-comment&quot;&gt;// Defined below this function&lt;/span&gt;\n        zprintf = &amp;amp;noprintf;\n    &lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;/*****************************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;/**\n* @name noprintf\n*\n* simply returns with no actions performed\n*\n* @return   None\n*\n*****************************************************************************/&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;noprintf&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;* c, ...)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;/p&gt;&lt;p&gt;Notice how the function pointer is prototyped in &lt;code&gt;version.h&lt;/code&gt; as &lt;/p&gt;&lt;p&gt;&lt;code&gt;void (* zprintf)(const char *, ...);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;When it is referenced in the application, it will start executing wherever it is pointing, which has yet to be defined.&lt;/p&gt;\n&lt;p&gt;In &lt;code&gt;version.c&lt;/code&gt;, notice in the &lt;code&gt;board_init()&lt;/code&gt;function where &lt;code&gt;zprintf&lt;/code&gt; is assigned a unique function (whose function signature matches) depending on the version that is defined in &lt;code&gt;version.h&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;zprintf = &amp;amp;printf;&lt;/code&gt; zprintf calls printf for debugging purposes&lt;/p&gt;&lt;p&gt;or&lt;/p&gt;&lt;p&gt;&lt;code&gt;zprintf = &amp;amp;noprint;&lt;/code&gt; zprintf just returns and will not run unnecessary code&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n\n&lt;p&gt;Running the code will look like this:&lt;/p&gt;\n\n&lt;h1&gt;mainProg.c&lt;/h1&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;version.h&quot;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Must run board_init(), which assigns the function&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to an actual function&lt;/span&gt;\n    board_init();\n\n    &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *ptr = &lt;span class=&quot;hljs-built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// Allocate 100 bytes of memory&lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// malloc returns NULL if unable to allocate the memory.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ptr == &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)\n    {\n        zprintf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to allocate memory\\n&quot;&lt;/span&gt;);\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// Other things to do...&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above code will use &lt;code&gt;printf&lt;/code&gt; if in debug mode, or do nothing if in release mode. This is much easier than going through the entire project and commenting out or deleting code. All that I need to do is change the version in &lt;code&gt;version.h&lt;/code&gt; and the code will do the rest!&lt;/p&gt;\n    ","\n&lt;p&gt;Function pointer is usually defined by &lt;code&gt;typedef&lt;/code&gt;, and used as param &amp;amp; return value.&lt;/p&gt;\n\n&lt;p&gt;Above answers already explained a lot, I just give a full example:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; NUM_A 1&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;define&lt;/span&gt; NUM_B 2&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// define a function pointer type&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(*two_num_operation)&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// an actual standalone function&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// use function pointer as param,&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum_via_pointer&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, two_num_operation funp)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (*funp)(a, b);\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// use function pointer as return value,&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; two_num_operation &lt;span class=&quot;hljs-title function_&quot;&gt;get_sum_fun&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;sum;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test - use function pointer as variable,&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_pointer_as_variable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-comment&quot;&gt;// create a pointer to function,&lt;/span&gt;\n    two_num_operation sum_p = &amp;amp;sum;\n    &lt;span class=&quot;hljs-comment&quot;&gt;// call function via pointer&lt;/span&gt;\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pointer as variable:\\t %d + %d = %d\\n&quot;&lt;/span&gt;, NUM_A, NUM_B, (*sum_p)(NUM_A, NUM_B));\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test - use function pointer as param,&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_pointer_as_param&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pointer as param:\\t %d + %d = %d\\n&quot;&lt;/span&gt;, NUM_A, NUM_B, sum_via_pointer(NUM_A, NUM_B, &amp;amp;sum));\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// test - use function pointer as return value,&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;test_pointer_as_return_value&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;pointer as return value:\\t %d + %d = %d\\n&quot;&lt;/span&gt;, NUM_A, NUM_B, (*get_sum_fun())(NUM_A, NUM_B));\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {\n    test_pointer_as_variable();\n    test_pointer_as_param();\n    test_pointer_as_return_value();\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Starting from scratch function has Some Memory Address From Where They start executing. In Assembly Language They Are called as (call &quot;function&apos;s memory address&quot;).Now come back to C If function has a memory address then they can be manipulated by Pointers in C.So By the rules of C &lt;/p&gt;\n\n&lt;p&gt;1.First you need to declare a pointer to function \n2.Pass the Address of the  Desired function &lt;/p&gt;\n\n&lt;p&gt;****Note-&amp;gt;the functions should be of same type**** &lt;/p&gt;\n\n&lt;p&gt;This Simple Programme will Illustrate Every Thing.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; (*print)() ;&lt;span class=&quot;hljs-comment&quot;&gt;//Declare a  Function Pointers&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayhello&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//Declare The Function Whose Address is to be passed&lt;/span&gt;\n                &lt;span class=&quot;hljs-comment&quot;&gt;//The Functions should Be of Same Type&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n print=sayhello;&lt;span class=&quot;hljs-comment&quot;&gt;//Addressof sayhello is assigned to print&lt;/span&gt;\n print();&lt;span class=&quot;hljs-comment&quot;&gt;//print Does A call To The Function &lt;/span&gt;\n &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sayhello&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n Hello World&quot;&lt;/span&gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/L4qpJ.png&quot; alt=&quot;enter image description here&quot;&gt;After That lets See How machine Understands Them.Glimpse of machine instruction of the above programme in 32 bit architecture.&lt;/p&gt;\n\n&lt;p&gt;The red mark area is showing how the address is being exchanged and storing in eax. Then their is a call instruction on eax. eax contains the desired address of the function.&lt;/p&gt;\n    ","\n&lt;p&gt;One of the big uses for function pointers in C is to call a function selected at run-time. For example, the C run-time library has two routines, &lt;a href=&quot;https://en.cppreference.com/w/c/algorithm/qsort&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.cppreference.com/w/c/algorithm/bsearch&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/a&gt;, which take a pointer to a function that is called to compare two items being sorted; this allows you to sort or search, respectively, anything, based on any criteria you wish to use. &lt;/p&gt;\n\n&lt;p&gt;A very basic example, if there is one function called &lt;code&gt;print(int x, int y)&lt;/code&gt; which in turn may require to call a function (either &lt;code&gt;add()&lt;/code&gt; or &lt;code&gt;sub()&lt;/code&gt;, which are of the same type) then what we will do, we will add one function pointer argument to the &lt;code&gt;print()&lt;/code&gt; function as shown below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n   &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-10&lt;/span&gt;);\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*func)())&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;value is: %d\\n&quot;&lt;/span&gt;, (x+y+(*func)()));\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;, y=&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;;\n    print(x,y,add);\n    print(x,y,sub);\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The output is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;value is: 410&lt;br&gt;\n  value is: 390&lt;/p&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;A function pointer is a variable that contains the address of a function. Since it is a pointer variable though with some restricted properties, you can use it pretty much like you would any other pointer variable in data structures.&lt;/p&gt;\n\n&lt;p&gt;The only exception I can think of is treating the function pointer as pointing to something other than a single value. Doing pointer arithmetic by incrementing or decrementing a function pointer or adding/subtracting an offset to a function pointer isn&apos;t really of any utility as a function pointer only points to a single thing, the entry point of a function.&lt;/p&gt;\n\n&lt;p&gt;The size of a function pointer variable, the number of bytes occupied by the variable, may vary depending on the underlying architecture, e.g. x32 or x64 or whatever.&lt;/p&gt;\n\n&lt;p&gt;The declaration for a function pointer variable needs to specify the same kind of information as a function declaration in order for the C compiler to do the kinds of checks that it normally does. If you don&apos;t specify a parameter list in the declaration/definition of the function pointer, the C compiler will not be able to check the use of parameters. There are cases when this lack of checking can be useful however just remember that a safety net has been removed.&lt;/p&gt;\n\n&lt;p&gt;Some examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr)&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// declares a function&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr);  &lt;span class=&quot;hljs-comment&quot;&gt;// declares or defines a function pointer&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc2) ();                 &lt;span class=&quot;hljs-comment&quot;&gt;// declares or defines a function pointer, no parameter list specified.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc3) (&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;);             &lt;span class=&quot;hljs-comment&quot;&gt;// declares or defines a function pointer, no arguments.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first two declararations are somewhat similar in that:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;func&lt;/code&gt; is a function that takes an &lt;code&gt;int&lt;/code&gt; and a &lt;code&gt;char *&lt;/code&gt; and returns an &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;pFunc&lt;/code&gt; is a function pointer to which is assigned the address of a function that takes an &lt;code&gt;int&lt;/code&gt; and a &lt;code&gt;char *&lt;/code&gt; and returns an &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So from the above we could have a source line in which the address of the function &lt;code&gt;func()&lt;/code&gt; is assigned to the function pointer variable &lt;code&gt;pFunc&lt;/code&gt; as in &lt;code&gt;pFunc = func;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Notice the syntax used with a function pointer declaration/definition in which parenthesis are used to overcome the natural operator precedence rules.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;pfunc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr)&lt;/span&gt;;    &lt;span class=&quot;hljs-comment&quot;&gt;// declares a function that returns int pointer&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr);  &lt;span class=&quot;hljs-comment&quot;&gt;// declares a function pointer that returns an int&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Several Different Usage Examples&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Some examples of usage of a function pointer:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc) (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr);    &lt;span class=&quot;hljs-comment&quot;&gt;// declare a simple function pointer variable&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc[&lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;])(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr); &lt;span class=&quot;hljs-comment&quot;&gt;// declare an array of 55 function pointers&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (**pFunc)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr);    &lt;span class=&quot;hljs-comment&quot;&gt;// declare a pointer to a function pointer variable&lt;/span&gt;\n&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;                             &lt;span class=&quot;hljs-comment&quot;&gt;// declare a struct that contains a function pointer&lt;/span&gt;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x22;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*pFunc)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr);\n} thing = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, func};                 &lt;span class=&quot;hljs-comment&quot;&gt;// assign values to the struct variable&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * &lt;span class=&quot;hljs-title function_&quot;&gt;xF&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*p)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr))&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// declare a function that has a function pointer as an argument&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; * (*pxF) (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*p)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pStr));  &lt;span class=&quot;hljs-comment&quot;&gt;// declare a function pointer that points to a function that has a function pointer as an argument&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can use variable length parameter lists in the definition of a function pointer.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, ...)&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*psum)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, ...);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can not specify a parameter list at all. This can be useful but it eliminates the opportunity for the C compiler to perform checks on the argument list provided. &lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;;      &lt;span class=&quot;hljs-comment&quot;&gt;// nothing specified in the argument list so could be anything or nothing&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*psum)();\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;hljs-title function_&quot;&gt;sum2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;;  &lt;span class=&quot;hljs-comment&quot;&gt;// void specified in the argument list so no parameters when calling this function&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*psum2)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;C style Casts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use C style casts with function pointers. However be aware that a C compiler may be lax about checks or provide warnings rather than errors.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *b)&lt;/span&gt;;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*psplsum) (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b);\npsplsum = sum;               &lt;span class=&quot;hljs-comment&quot;&gt;// generates a compiler warning&lt;/span&gt;\npsplsum = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)) sum;   &lt;span class=&quot;hljs-comment&quot;&gt;// no compiler warning, cast to function pointer&lt;/span&gt;\npsplsum = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)) sum;     &lt;span class=&quot;hljs-comment&quot;&gt;// compiler error of bad cast generated, parenthesis are required.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Compare Function Pointer to Equality&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can check that a function pointer is equal to a particular function address using an &lt;code&gt;if&lt;/code&gt; statement though I am not sure how useful that would be. Other comparison operators would seem to have even less utility.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *c)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] + a + b;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func3&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *x)&lt;/span&gt; {\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;func4&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *c, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*p)())&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p == func1) {\n        p(a, b);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p == func2) {\n        p(a, b, c);      &lt;span class=&quot;hljs-comment&quot;&gt;// warning C4047: &apos;==&apos;: &apos;int (__cdecl *)()&apos; differs in levels of indirection from &apos;char *(__cdecl *)(int,int,char *)&apos;&lt;/span&gt;\n    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (p == func3) {\n        p(a, b, c);\n    }\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;An Array of Function Pointers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;And if you want to have an array of function pointers each of the elements of which the argument list has differences then you can define a function pointer with the argument list unspecified (not &lt;code&gt;void&lt;/code&gt; which means no arguments but just unspecified) something like the following though you may see warnings from the C compiler. This also works for a function pointer parameter to a function:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*p[])() = {       &lt;span class=&quot;hljs-comment&quot;&gt;// an array of function pointers&lt;/span&gt;\n    func1, func2, func3\n};\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(**pp)();          &lt;span class=&quot;hljs-comment&quot;&gt;// a pointer to a function pointer&lt;/span&gt;\n\n\np[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;](a, b);\np[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;](a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);\np[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;](a, b);      &lt;span class=&quot;hljs-comment&quot;&gt;// oops, left off the last argument but it compiles anyway.&lt;/span&gt;\n\nfunc4(a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, func1);\nfunc4(a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, func2);  &lt;span class=&quot;hljs-comment&quot;&gt;// warning C4047: &apos;function&apos;: &apos;int (__cdecl *)()&apos; differs in levels of indirection from &apos;char *(__cdecl *)(int,int,char *)&apos;&lt;/span&gt;\nfunc4(a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, func3);\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;// iterate over the array elements using an array index&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(p) / &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]); i++) {\n    func4(a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, p[i]);\n}\n    &lt;span class=&quot;hljs-comment&quot;&gt;// iterate over the array elements using a pointer&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (pp = p; pp &amp;lt; p + &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(p)/&lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(p[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]); pp++) {\n    (*pp)(a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);          &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to a function pointer so must dereference it.&lt;/span&gt;\n    func4(a, b, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, *pp);     &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to a function pointer so must dereference it.&lt;/span&gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;C style &lt;code&gt;namespace&lt;/code&gt; Using Global &lt;code&gt;struct&lt;/code&gt; with Function Pointers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use the &lt;code&gt;static&lt;/code&gt; keyword to specify a function whose name is file scope and then assign this to a global variable as a way of providing something similar to the &lt;code&gt;namespace&lt;/code&gt; functionality of C++.&lt;/p&gt;\n\n&lt;p&gt;In a header file define a struct that will be our namespace along with a global variable that uses it.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;\n   &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*func1) (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b);             &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to function that returns an int&lt;/span&gt;\n   &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *(*func2) (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *c);  &lt;span class=&quot;hljs-comment&quot;&gt;// pointer to function that returns a pointer&lt;/span&gt;\n} FuncThings;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; FuncThings FuncThingsGlobal;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then in the C source file:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;header.h&quot;&lt;/span&gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// the function names used with these static functions do not need to be the&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// same as the struct member names. It&apos;s just helpful if they are when trying&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// to search for them.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// the static keyword ensures these names are file scope only and not visible&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;// outside of the file.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a + b;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;hljs-title function_&quot;&gt;func2&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b, &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *c)&lt;/span&gt;\n{\n    c[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = a % &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;; c[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = b % &lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; c;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; FuncThings FuncThingsGlobal = {func1, func2};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would then be used by specifying the complete name of global struct variable and member name to access the function. The &lt;code&gt;const&lt;/code&gt; modifier is used on the global so that it can not be changed by accident.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; abcd = FuncThingsGlobal.func1 (a, b);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Application Areas of Function Pointers&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A DLL library component could do something similar to the C style &lt;code&gt;namespace&lt;/code&gt; approach in which a particular library interface is requested from a factory method in a library interface which supports the creation of a &lt;code&gt;struct&lt;/code&gt; containing function pointers.. This library interface loads the requested DLL version, creates a struct with the necessary function pointers, and then returns the struct to the requesting caller for use.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;\n    HMODULE  hModule;\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*Func1)();\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*Func2)();\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*Func3)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b);\n} LibraryFuncStruct;\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  LoadLibraryFunc LPCTSTR  dllFileName, LibraryFuncStruct *pStruct)\n{\n    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;  retStatus = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;   &lt;span class=&quot;hljs-comment&quot;&gt;// default is an error detected&lt;/span&gt;\n\n    pStruct-&amp;gt;hModule = LoadLibrary (dllFileName);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pStruct-&amp;gt;hModule) {\n        pStruct-&amp;gt;Func1 = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*)()) GetProcAddress (pStruct-&amp;gt;hModule, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Func1&quot;&lt;/span&gt;);\n        pStruct-&amp;gt;Func2 = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*)()) GetProcAddress (pStruct-&amp;gt;hModule, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Func2&quot;&lt;/span&gt;);\n        pStruct-&amp;gt;Func3 = (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*)(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; b)) GetProcAddress(pStruct-&amp;gt;hModule, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Func3&quot;&lt;/span&gt;);\n        retStatus = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; retStatus;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;FreeLibraryFunc&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(LibraryFuncStruct *pStruct)&lt;/span&gt;\n{\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (pStruct-&amp;gt;hModule) FreeLibrary (pStruct-&amp;gt;hModule);\n    pStruct-&amp;gt;hModule = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and this could be used as in:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;LibraryFuncStruct myLib = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;};\nLoadLibraryFunc (&lt;span class=&quot;hljs-string&quot;&gt;L&quot;library.dll&quot;&lt;/span&gt;, &amp;amp;myLib);\n&lt;span class=&quot;hljs-comment&quot;&gt;//  ....&lt;/span&gt;\nmyLib.Func1();\n&lt;span class=&quot;hljs-comment&quot;&gt;//  ....&lt;/span&gt;\nFreeLibraryFunc (&amp;amp;myLib);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The same approach can be used to define an abstract hardware layer for code that uses a particular model of the underlying hardware. Function pointers are filled in with hardware specific functions by a factory to provide the hardware specific functionality that implements functions specified in the abstract hardware model. This can be used to provide an abstract hardware layer used by software which calls a factory function in order to get the specific hardware function interface then uses the function pointers provided to perform actions for the underlying hardware without needing to know implementation details about the specific target.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Function Pointers to create Delegates, Handlers, and Callbacks&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use function pointers as a way to delegate some task or functionality. The classic example in C is the comparison delegate function pointer used with the Standard C library functions &lt;code&gt;qsort()&lt;/code&gt; and &lt;code&gt;bsearch()&lt;/code&gt; to provide the collation order for sorting a list of items or performing a binary search over a sorted list of items. The comparison function delegate specifies the collation algorithm used in the sort or the binary search.&lt;/p&gt;\n\n&lt;p&gt;Another use is similar to applying an algorithm to a C++ Standard Template Library container.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-c s-code-block&quot;&gt;&lt;code class=&quot;hljs language-c&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;hljs-title function_&quot;&gt;ApplyAlgorithm&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *pArray, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sizeItem, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; nItems, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; (*p)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *))&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pList = pArray;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pListEnd = pList + nItems * sizeItem;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; ( ; pList &amp;lt; pListEnd; pList += sizeItem) {\n        p (pList);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pArray;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pIncrement&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *pI)&lt;/span&gt; {\n    (*pI)++;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;hljs-title function_&quot;&gt;ApplyFold&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *pArray, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; sizeItem, &lt;span class=&quot;hljs-type&quot;&gt;size_t&lt;/span&gt; nItems, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; * pResult, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;(*p)(&lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *, &lt;span class=&quot;hljs-type&quot;&gt;void&lt;/span&gt; *))&lt;/span&gt; {\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pList = pArray;\n    &lt;span class=&quot;hljs-type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt; *pListEnd = pList + nItems * sizeItem;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (; pList &amp;lt; pListEnd; pList += sizeItem) {\n        p(pList, pResult);\n    }\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; pArray;\n}\n\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;pSummation&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *pI, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; *pSum)&lt;/span&gt; {\n    (*pSum) += *pI;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\n}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;// source code and then lets use our function.&lt;/span&gt;\n&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; intList[&lt;span class=&quot;hljs-number&quot;&gt;30&lt;/span&gt;] = { &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; }, iSum = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\n\nApplyAlgorithm(intList, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(intList) / &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(intList[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), pIncrement);\nApplyFold(intList, &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;), &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(intList) / &lt;span class=&quot;hljs-keyword&quot;&gt;sizeof&lt;/span&gt;(intList[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]), &amp;amp;iSum, pSummation);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Another example is with GUI source code in which a handler for a particular event is registered by providing a function pointer which is actually called when the event happens. The Microsoft MFC framework with its message maps uses something similar to handle Windows messages that are delivered to a window or thread.&lt;/p&gt;\n\n&lt;p&gt;Asynchronous functions that require a callback are similar to an event handler. The user of the asynchronous function calls the asynchronous function to start some action and provides a function pointer which the asynchronous function will call once the action is complete. In this case the event is the asynchronous function completing its task.&lt;/p&gt;\n    ","\n&lt;p&gt;Since function pointers are often typed callbacks, you might want to have a look at &lt;a href=&quot;http://ccan.ozlabs.org/info/typesafe_cb.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;type safe callbacks&lt;/a&gt;. The same applies to entry points, etc of functions that are not callbacks.&lt;/p&gt;\n\n&lt;p&gt;C is quite fickle and forgiving at the same time :)&lt;/p&gt;\n    "],"533":["\n&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is just a variable name.  &lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:&lt;/p&gt;\n\n&lt;p&gt;For Python 3.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For Python 2.x:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.iteritems():\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;To test for yourself, change the word &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;poop&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In Python 3.x, &lt;code&gt;iteritems()&lt;/code&gt; was replaced with simply &lt;code&gt;items()&lt;/code&gt;, which returns a set-like view backed by the dict, like &lt;code&gt;iteritems()&lt;/code&gt; but even better. \nThis is also available in 2.7 as &lt;code&gt;viewitems()&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;The operation &lt;code&gt;items()&lt;/code&gt; will work for both 2 and 3, but in 2 it will return a list of the dictionary&apos;s &lt;code&gt;(key, value)&lt;/code&gt; pairs, which will not reflect changes to the dict that happen after the &lt;code&gt;items()&lt;/code&gt; call. If you want the 2.x behavior in 3.x, you can call &lt;code&gt;list(d.items())&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;It&apos;s not that key is a special word, but that dictionaries implement the iterator protocol.  You could do this in your class, e.g. see &lt;a href=&quot;https://stackoverflow.com/questions/19151/build-a-basic-python-iterator/24377#24377&quot;&gt;this question&lt;/a&gt; for how to build class iterators.&lt;/p&gt;\n\n&lt;p&gt;In the case of dictionaries, it&apos;s implemented at the C level.  The details are available in &lt;a href=&quot;http://www.python.org/dev/peps/pep-0234/&quot; rel=&quot;noreferrer&quot;&gt;PEP 234&lt;/a&gt;.  In particular, the section titled &quot;Dictionary Iterators&quot;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;ul&gt;\n  &lt;li&gt;&lt;p&gt;Dictionaries implement a tp_iter slot that returns an efficient\n  iterator that iterates over the keys of the dictionary. [...] This \n  means that we can write&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;: ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;which is equivalent to, but much faster than&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.keys(): ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;as long as the restriction on modifications to the dictionary\n  (either by the loop or by another thread) are not violated.&lt;/p&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;p&gt;Add methods to dictionaries that return different kinds of\n  iterators explicitly:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.iterkeys(): ...\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.itervalues(): ...\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;dict&lt;/span&gt;.iteritems(): ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;This means that &lt;code&gt;for x in dict&lt;/code&gt; is shorthand for &lt;code&gt;for x in\n   dict.iterkeys()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;In Python 3, &lt;code&gt;dict.iterkeys()&lt;/code&gt;, &lt;code&gt;dict.itervalues()&lt;/code&gt; and &lt;code&gt;dict.iteritems()&lt;/code&gt; are no longer supported. Use &lt;code&gt;dict.keys()&lt;/code&gt;, &lt;code&gt;dict.values()&lt;/code&gt; and &lt;code&gt;dict.items()&lt;/code&gt; instead.&lt;/p&gt;\n    ","\n&lt;p&gt;Iterating over a &lt;code&gt;dict&lt;/code&gt; iterates through its keys in no particular order, as you can see here:&lt;/p&gt;\n&lt;p&gt;(This is &lt;strong&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6&quot;&gt;no longer the case in Python 3.6&lt;/a&gt;&lt;/strong&gt;, but note that it&apos;s &lt;strong&gt;not guaranteed&lt;/strong&gt; behaviour yet.)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.keys()\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For your example, it is a better idea to use &lt;code&gt;dict.items()&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.items()\n[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;This gives you a list of tuples. When you loop over them like this, each tuple is unpacked into &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; automatically:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k,v &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(k, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, v)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; as variable names when looping over a &lt;code&gt;dict&lt;/code&gt; is quite common if the body of the loop is only a few lines. For more complicated loops it may be a good idea to use more descriptive names:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter, number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(letter, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, number)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It&apos;s a good idea to get into the habit of using format strings:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; letter, number &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&apos;{0} corresponds to {1}&apos;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(letter, number))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;code&gt;key&lt;/code&gt; is simply a variable.&lt;/p&gt;\n&lt;p&gt;For &lt;strong&gt;Python2.X&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; my_var &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; my_var, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[my_var]\n\nx corresponds to &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ny corresponds to &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nz corresponds to &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;... or better,&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the_key, the_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.iteritems():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; the_key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, the_value\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;For &lt;strong&gt;Python3.X&lt;/strong&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the_key, the_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(the_key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, the_value)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;When you iterate through dictionaries using the &lt;code&gt;for .. in ..&lt;/code&gt;-syntax, it always iterates over the keys (the values are accessible using &lt;code&gt;dictionary[key]&lt;/code&gt;).&lt;/p&gt;\n&lt;p&gt;To iterate over key-value pairs, use the following:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;for k,v in dict.iteritems()&lt;/code&gt; in Python 2&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;for k,v in dict.items()&lt;/code&gt; in Python 3&lt;/li&gt;\n&lt;/ul&gt;\n    ","\n&lt;p&gt;This is a very common looping idiom. &lt;code&gt;in&lt;/code&gt; is an operator. For when to use &lt;code&gt;for key in dict&lt;/code&gt; and when it must be &lt;code&gt;for key in dict.keys()&lt;/code&gt; see &lt;a href=&quot;https://web.archive.org/web/20180411011411/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html&quot; rel=&quot;noreferrer&quot;&gt;David Goodger&apos;s Idiomatic Python article (archived copy)&lt;/a&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;I have a use case where I have to iterate through the dict to get the key, value pair, also the index indicating where I am. This is how I do it:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i, (key, value) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;enumerate&lt;/span&gt;(d.items()):\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(i, key, value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that the parentheses around the key, value are important, without them, you&apos;d get an &lt;code&gt;ValueError&lt;/code&gt; &quot;not enough values to unpack&quot;.&lt;/p&gt;\n    ","\n&lt;blockquote&gt;\n  &lt;h2&gt;Iterating over dictionaries using &apos;for&apos; loops&lt;/h2&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    ...\n&lt;/code&gt;&lt;/pre&gt;\n  \n  &lt;p&gt;How does Python recognize that it needs only to read the key from the\n  dictionary? Is key a special word in Python? Or is it simply a\n  variable?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&apos;s not just &lt;code&gt;for&lt;/code&gt; loops. The important word here is &quot;iterating&quot;.&lt;/p&gt;\n\n&lt;p&gt;A dictionary is a mapping of keys to values:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any time we iterate over it, we iterate over the keys. The variable name &lt;code&gt;key&lt;/code&gt; is only intended to be descriptive - and it is quite apt for the purpose.&lt;/p&gt;\n\n&lt;p&gt;This happens in a list comprehension:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[k &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It happens when we pass the dictionary to list (or any other collection type object):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The way Python iterates is, in a context where it needs to, it calls the &lt;code&gt;__iter__&lt;/code&gt; method of the object (in this case the dictionary) which returns an iterator (in this case, a keyiterator object):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;d.__iter__()\n&amp;lt;dict_keyiterator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fb1747bee08&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We shouldn&apos;t use these special methods ourselves, instead, use the respective builtin function to call it, &lt;code&gt;iter&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;key_iterator = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;key_iterator\n&amp;lt;dict_keyiterator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x7fb172fa9188&lt;/span&gt;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Iterators have a &lt;code&gt;__next__&lt;/code&gt; method - but we call it with the builtin function, &lt;code&gt;next&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(key_iterator)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nStopIteration\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When an iterator is exhausted, it raises &lt;code&gt;StopIteration&lt;/code&gt;. This is how Python knows to exit a &lt;code&gt;for&lt;/code&gt; loop, or a list comprehension, or a generator expression, or any other iterative context. Once an iterator raises &lt;code&gt;StopIteration&lt;/code&gt; it will always raise it - if you want to iterate again, you need a new one.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(key_iterator)\n[]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;new_key_iterator = &lt;span class=&quot;hljs-built_in&quot;&gt;iter&lt;/span&gt;(d)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(new_key_iterator)\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Returning to dicts&lt;/h2&gt;\n\n&lt;p&gt;We&apos;ve seen dicts iterating in many contexts. What we&apos;ve seen is that any time we iterate over a dict, we get the keys. Back to the original example:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If we change the variable name, we still get the keys. Let&apos;s try it:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; each_key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(each_key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;=&amp;gt;&apos;&lt;/span&gt;, d[each_key])\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;\nx =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\ny =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nz =&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we want to iterate over the values, we need to use the &lt;code&gt;.values&lt;/code&gt; method of dicts, or for both together, &lt;code&gt;.items&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d.values())\n[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;]\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(d.items())\n[(&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the example given, it would be more efficient to iterate over the items like this:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; a_key, corresponding_value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(a_key, corresponding_value)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But for academic purposes, the question&apos;s example is just fine.&lt;/p&gt;\n    ","\n&lt;p&gt;For Iterating through dictionaries, The below code can be used.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;dictionary= {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#To iterate over the keys&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary.keys():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#To Iterate over the values&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary.values():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(value)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;#To Iterate both the keys and values&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; dictionary.items():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key,&lt;span class=&quot;hljs-string&quot;&gt;&apos;\\t&apos;&lt;/span&gt;, value)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;You can check the implementation of CPython&apos;s &lt;code&gt;dicttype&lt;/code&gt; on GitHub. This is the signature of method that implements the dict iterator:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;_PyDict_Next(PyObject *op, Py_ssize_t *ppos, PyObject **pkey,\n             PyObject **pvalue, Py_hash_t *phash)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/b2e5794870eb4728ddfaafc0f79a40299576434f/Objects/dictobject.c&quot; rel=&quot;noreferrer&quot;&gt;CPython dictobject.c&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;To iterate over keys, it is slower but better to use &lt;code&gt;my_dict.keys()&lt;/code&gt;. If you tried to do something like this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; my_dict:\n    my_dict[key+&lt;span class=&quot;hljs-string&quot;&gt;&quot;-1&quot;&lt;/span&gt;] = my_dict[key]-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;it would create a runtime error because you are changing the keys while the program is running. If you are absolutely set on reducing time, use the &lt;code&gt;for key in my_dict&lt;/code&gt; way, but you have been warned.&lt;/p&gt;\n    ","\n&lt;p&gt;If you are looking for a clear and visual example:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;cat  = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;name&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;Snowy&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;color&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&apos;White&apos;&lt;/span&gt; ,&lt;span class=&quot;hljs-string&quot;&gt;&apos;age&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;}\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key , value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; cat.items():\n   &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;: &apos;&lt;/span&gt;, value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Result:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;name:  Snowy\ncolor:  White\nage:  14\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;This will print the output in &lt;em&gt;sorted&lt;/em&gt; order by &lt;em&gt;values&lt;/em&gt; in ascending order.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;}\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;by_value&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;item&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; item[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sorted&lt;/span&gt;(d.items(), key=by_value):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;-&amp;gt;&apos;&lt;/span&gt;, value)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Output:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;y -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\nz -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;\nx -&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n    ","\n&lt;p&gt;Let&apos;s get straight to the point. If the word key is just a variable, as you have mentioned then the main thing to note is that when you run a &lt;strong&gt;&apos;FOR LOOP&apos;&lt;/strong&gt; over a dictionary it runs through only the &lt;em&gt;&apos;keys&apos;&lt;/em&gt; and ignores the &lt;em&gt;&apos;values&apos;&lt;/em&gt;.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (key, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[key])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;rather try this:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;} \n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (i, &lt;span class=&quot;hljs-string&quot;&gt;&apos;corresponds to&apos;&lt;/span&gt;, d[i])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;but if you use a function like:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;d = {&lt;span class=&quot;hljs-string&quot;&gt;&apos;x&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;y&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;z&apos;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;}\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(d.keys())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;in the above case &lt;strong&gt;&apos;keys&apos;&lt;/strong&gt; is just not a variable, its a function.&lt;/p&gt;\n    ","\n&lt;p&gt;A dictionary in Python is a collection of key-value pairs. Each key is connected to a value, and you can use a key to access the value associated with that key. A key&apos;s value can be a number, a string, a list, or even another dictionary. In this case, threat each &quot;key-value pair&quot; as a separate row in the table: d is your table with two columns. the key is the first column, key[value] is your second column. Your for loop is a standard way to iterate over a table.&lt;/p&gt;\n    "],"534":["\n&lt;p&gt;&lt;strong&gt;gprof&lt;/strong&gt; &lt;a href=&quot;http://docs.freebsd.org/44doc/psd/18.gprof/paper.pdf&quot; rel=&quot;noreferrer&quot;&gt;(read the paper)&lt;/a&gt; exists for historical reasons. \nIf you think it will help you find performance problems, it was never advertised as such.\nHere&apos;s what the paper says:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;The prole can be used to compare and assess the costs of\n  various implementations.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It does not say it can be used to &lt;em&gt;identify&lt;/em&gt; the various implementations to be assessed, although it does &lt;em&gt;imply&lt;/em&gt; that it could, under special circumstances:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;especially if small portions of the program are found to dominate its\n  execution time.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;What about problems that are not so localized?\nDo those not matter?\nDon&apos;t place expectations on &lt;strong&gt;gprof&lt;/strong&gt; that were never claimed for it.\nIt is &lt;em&gt;only&lt;/em&gt; a measurement tool, and only of CPU-bound operations.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/375913/what-can-i-use-to-profile-c-code-in-linux/378024#378024&quot;&gt;Try this instead.&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/questions/926266/performance-optimization-strategies-of-last-resort/927773#927773&quot;&gt;Here&apos;s an example of a 44x speedup.&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://scicomp.stackexchange.com/a/1870/1262&quot;&gt;Here&apos;s a 730x speedup.&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;http://youtu.be/xPg3sRpdW1U&quot; rel=&quot;noreferrer&quot;&gt;Here&apos;s an 8-minute video demonstration.&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://scicomp.stackexchange.com/a/2719/1262&quot;&gt;Here&apos;s an explanation of the statistics.&lt;/a&gt;&lt;br&gt;\n&lt;a href=&quot;https://stackoverflow.com/a/18217639/23771&quot;&gt;Here&apos;s an answer to critiques.&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;There&apos;s a simple observation about programs. In a given execution, every instruction is responsible for some fraction of the overall time (especially &lt;code&gt;call&lt;/code&gt; instructions), in the sense that if it were not there, the time would not be spent. During that time, the instruction is on the stack **. When that is understood, you can see that -  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;gprof&lt;/strong&gt; embodies certain myths about performance, such as:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that program counter sampling is useful.&lt;/em&gt;&lt;br&gt;\nIt is only useful if you have an unnecessary hotspot bottleneck such as a bubble sort of a big array of scalar values. As soon as you, for example, change it into a sort using string-compare, it is still a bottleneck, but program counter sampling will not see it because now the hotspot is in string-compare. On the other hand if it were to sample the &lt;strong&gt;extended&lt;/strong&gt; program counter (the call stack), the point at which the string-compare is called, the sort loop, is clearly displayed. &lt;em&gt;In fact, &lt;strong&gt;gprof&lt;/strong&gt; was an attempt to remedy the limitations of pc-only sampling.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that timing functions is more important than capturing time-consuming lines of code.&lt;/em&gt;&lt;br&gt;\nThe reason for that myth is that &lt;strong&gt;gprof&lt;/strong&gt; was not able to capture stack samples, so instead it times functions, counts their invocations, and tries to capture the call graph. However, once a costly function is identified, you still need to look inside it for the lines that are responsible for the time. If there were stack samples you would not need to look, those lines would be on the samples. (A typical function might have 100 - 1000 instructions. A function &lt;em&gt;call&lt;/em&gt; is 1 instruction, so something that locates costly calls is 2-3 orders of magnitude more precise.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that the call graph is important.&lt;/em&gt;&lt;br&gt;\nWhat you need to know about a program is not &lt;strong&gt;where&lt;/strong&gt; it spends its time, but &lt;strong&gt;why&lt;/strong&gt;. When it is spending time in a function, every line of code on the stack gives one link in the chain of reasoning of why it is there. If you can only see part of the stack, you can only see part of the reason why, so you can&apos;t tell for sure if that time is actually necessary.\nWhat does the call graph tell you? Each arc tells you that some function A was in the process of calling some function B for some fraction of the time. Even if A has only one such line of code calling B, that line only gives a small part of the reason why. If you are lucky enough, maybe that line has a poor reason. Usually, you need to see multiple simultaneous lines to find a poor reason if it is there. If A calls B in more than one place, then it tells you even less.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that recursion is a tricky confusing issue.&lt;/em&gt;&lt;br&gt;\nThat is only because &lt;strong&gt;gprof&lt;/strong&gt; and other profilers perceive a need to generate a call-graph and then attribute times to the nodes. If one has samples of the stack, the time-cost of each line of code that appears on samples is a very simple number - the fraction of samples it is on. If there is recursion, then a given line can appear more than once on a sample. \n&lt;em&gt;No matter.&lt;/em&gt; Suppose samples are taken every N ms, and the line appears on F% of them (singly or not). If that line can be made to take no time (such as by deleting it or branching around it), then those samples would &lt;em&gt;disappear&lt;/em&gt;, and the time would be reduced by F%.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that accuracy of time measurement (and therefore a large number of samples) is important.&lt;/em&gt;&lt;br&gt;\nThink about it for a second. If a line of code is on 3 samples out of five, then if you could shoot it out like a light bulb, that is roughly 60% less time that would be used. Now, you know that if you had taken a different 5 samples, you might have only seen it 2 times, or as many as 4. So that 60% measurement is more like a general range from 40% to 80%. If it were only 40%, would you say the problem is not worth fixing? So what&apos;s the point of time accuracy, when what you really want is to &lt;strong&gt;find the problems&lt;/strong&gt;?\n500 or 5000 samples would have measured the problem with greater precision, but would not have found it any more accurately.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that counting of statement or function invocations is useful.&lt;/em&gt;&lt;br&gt;\nSuppose you know a function has been called 1000 times. Can you tell from that what fraction of time it costs? You also need to know how long it takes to run, on average, multiply it by the count, and divide by the total time. The average invocation time could vary from nanoseconds to seconds, so the count alone doesn&apos;t tell much. If there are stack samples, the cost of a routine or of any statement is just the fraction of samples it is on. That fraction of time is what could in principle be saved overall if the routine or statement could be made to take no time, so that is what has the most direct relationship to performance.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that samples need not be taken when blocked&lt;/em&gt;&lt;br&gt;\nThe reasons for this myth are twofold: 1) that PC sampling is meaningless when the program is waiting, and 2) the preoccupation with accuracy of timing. However, for (1) the program may very well be waiting for something that it asked for, such as file I/O, which you &lt;em&gt;need to know&lt;/em&gt;, and which stack samples reveal. (Obviously you want to exclude samples while waiting for user input.) For (2) if the program is waiting simply because of competition with other processes, that presumably happens in a fairly random way while it&apos;s running.\nSo while the program may be taking longer, that will not have a large effect on the statistic that matters, the percentage of time that statements are on the stack.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that &quot;self time&quot; matters&lt;/em&gt;&lt;br&gt;\nSelf time only makes sense if you are measuring at the function level, not line level, and you think you need help in discerning if the function time goes into purely local computation versus in called routines. If summarizing at the line level, a line represents self time if it is at the end of the stack, otherwise it represents inclusive time. Either way, what it costs is the percentage of stack samples it is on, so that locates it for you in either case.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that samples have to be taken at high frequency&lt;/em&gt;&lt;br&gt;\nThis comes from the idea that a performance problem may be fast-acting, and that samples have to be frequent in order to hit it. But, if the problem is costing, 20%, say, out of a total running time of 10 sec (or whatever), then each sample in that total time will have a 20% chance of hitting it, no matter if the problem occurs in a single piece like this&lt;br&gt;\n&lt;code&gt;.....XXXXXXXX...........................&lt;/code&gt;&lt;br&gt;\n&lt;code&gt;.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^&lt;/code&gt; (20 samples, 4 hits)&lt;br&gt;\nor in many small pieces like this&lt;br&gt;\n&lt;code&gt;X...X...X.X..X.........X.....X....X.....&lt;/code&gt;&lt;br&gt;\n&lt;code&gt;.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^&lt;/code&gt; (20 samples, 3 hits)&lt;br&gt;\nEither way, the number of hits will average about 1 in 5, no matter how many samples are taken, or how few. (Average = 20 * 0.2 = 4. Standard deviation = +/- sqrt(20 * 0.2 * 0.8) = 1.8.)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;that you are trying to find &lt;strong&gt;the&lt;/strong&gt; bottleneck&lt;/em&gt;&lt;br&gt;\nas if there were only one. Consider the following execution timeline: &lt;code&gt;vxvWvzvWvxvWvYvWvxvWv.vWvxvWvYvW&lt;/code&gt;&lt;br&gt;\nIt consists of real useful work, represented by &lt;code&gt;.&lt;/code&gt;. There are performance problems &lt;code&gt;vWxYz&lt;/code&gt; taking 1/2, 1/4, 1/8, 1/16, 1/32 of the time, respectively. Sampling finds &lt;code&gt;v&lt;/code&gt; easily. It is removed, leaving&lt;br&gt;\n&lt;code&gt;xWzWxWYWxW.WxWYW&lt;/code&gt;&lt;br&gt;\nNow the program takes half as long to run, and now &lt;code&gt;W&lt;/code&gt; takes half the time, and is found easily. It is removed, leaving&lt;br&gt;\n&lt;code&gt;xzxYx.xY&lt;/code&gt;&lt;br&gt;\nThis process continues, each time removing the biggest, by percentage, performance problem, until nothing to remove can be found. Now the only thing executed is &lt;code&gt;.&lt;/code&gt;, which executes in 1/32 of the time used by the original program. This is the &lt;em&gt;magnification effect&lt;/em&gt;, by which removing any problem makes the remainder larger, by percent, because the denominator is reduced.&lt;br&gt;\nAnother crucial point is that &lt;em&gt;every single problem must be found&lt;/em&gt; - missing none of the 5. Any problem not found and fixed severely reduces the final speedup ratio. Just finding some, but not all, is not &quot;good enough&quot;.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;ADDED: I would just like to point out one reason why &lt;em&gt;gprof&lt;/em&gt; is popular - it is being taught,\npresumably because it&apos;s free, easy to teach, and it&apos;s been around a long time.\nA quick Google search locates some academic institutions that teach it (or appear to):&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;berkeley bu clemson\n  colorado duke earlham fsu indiana mit msu\n  ncsa.illinois ncsu nyu ou princeton psu\n  stanford ucsd umd umich utah utexas utk wustl&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;** With the exception of other ways of requesting work to be done, that don&apos;t leave a trace telling &lt;em&gt;why&lt;/em&gt;, such as by message posting.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Valgrind&quot; rel=&quot;noreferrer&quot;&gt;Valgrind&lt;/a&gt; has an instruction-count profiler with a very nice visualizer called &lt;a href=&quot;http://en.wikipedia.org/wiki/Valgrind#Tools&quot; rel=&quot;noreferrer&quot;&gt;KCacheGrind&lt;/a&gt;.  As Mike Dunlavey recommends, Valgrind counts the fraction of instructions for which a procedure is live on the stack, although I&apos;m sorry to say it appears to become confused in the presence of mutual recursion.  But the visualizer is very nice and light years ahead of &lt;code&gt;gprof&lt;/code&gt;.&lt;/p&gt;\n    ","\n&lt;p&gt;Since I did&apos;t see here anything about &lt;strong&gt;&lt;code&gt;perf&lt;/code&gt;&lt;/strong&gt; which is a relatively new tool for profiling the kernel and user applications on Linux I decided to add this information.&lt;/p&gt;\n\n&lt;p&gt;First of all - this is a tutorial about &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Tutorial&quot; rel=&quot;noreferrer&quot;&gt;Linux profiling with &lt;code&gt;perf&lt;/code&gt; &lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;You can use &lt;code&gt;perf&lt;/code&gt; if your Linux Kernel is greater than 2.6.32 or &lt;code&gt;oprofile&lt;/code&gt; if it is older. Both programs don&apos;t require from you to instrument your program (like &lt;code&gt;gprof&lt;/code&gt; requires). However in order to get call graph correctly in &lt;code&gt;perf&lt;/code&gt; you need to build you program with &lt;code&gt;-fno-omit-frame-pointer&lt;/code&gt;. For example: &lt;code&gt;g++ -fno-omit-frame-pointer -O2 main.cpp&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can see &quot;live&quot; analysis of your application with &lt;code&gt;perf top&lt;/code&gt;: &lt;br&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sudo perf top -p `pidof a.out` -K\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can record performance data of a running application and analyze them after that:&lt;/p&gt;\n\n&lt;p&gt;1) To record performance data:&lt;br&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;perf record -p `pidof a.out`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or  to record for 10 secs:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;perf record -p `pidof a.out` sleep 10\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or to record with call graph ()&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;perf record -g -p `pidof a.out` \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2) To analyze the recorded data&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;perf report --stdio\nperf report --stdio --sort=dso -g none\nperf report --stdio -g none\nperf report --stdio -g\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or you can record performace data of a application and analyze them after that just by launching the application in this way and waiting for it to exit:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;perf record ./a.out\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;This is an example of profiling a test program&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;The test program is in file main.cpp (I will put main.cpp at the bottom of the message):&lt;/p&gt;\n\n&lt;p&gt;I compile it in this way:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;g++ -m64 -fno-omit-frame-pointer -g main.cpp -L.  -ltcmalloc_minimal -o my_test\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I use &lt;code&gt;libmalloc_minimial.so&lt;/code&gt; since it is compiled with &lt;code&gt;-fno-omit-frame-pointer&lt;/code&gt; while libc malloc seems to be compiled without this option.\nThen I run my test program&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;./my_test 100000000 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I record performance data of a running process:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;perf record -g  -p `pidof my_test` -o ./my_test.perf.data sleep 30\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then I analyze load per module:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;perf report --stdio  -g none --sort comm,dso  -i ./my_test.perf.data&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;# Overhead  Command                 Shared Object\n# ........  .......  ............................\n#\n    70.06%  my_test  my_test\n    28.33%  my_test  libtcmalloc_minimal.so.0.1.0\n     1.61%  my_test  [kernel.kallsyms]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then load per function is analyzed:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;perf report --stdio  -g none  -i ./my_test.perf.data | c++filt&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;# Overhead  Command                 Shared Object                       Symbol\n# ........  .......  ............................  ...........................\n#\n    29.30%  my_test  my_test                       [.] f2(long)\n    29.14%  my_test  my_test                       [.] f1(long)\n    15.17%  my_test  libtcmalloc_minimal.so.0.1.0  [.] operator new(unsigned long)\n    13.16%  my_test  libtcmalloc_minimal.so.0.1.0  [.] operator delete(void*)\n     9.44%  my_test  my_test                       [.] process_request(long)\n     1.01%  my_test  my_test                       [.] operator delete(void*)@plt\n     0.97%  my_test  my_test                       [.] operator new(unsigned long)@plt\n     0.20%  my_test  my_test                       [.] main\n     0.19%  my_test  [kernel.kallsyms]             [k] apic_timer_interrupt\n     0.16%  my_test  [kernel.kallsyms]             [k] _spin_lock\n     0.13%  my_test  [kernel.kallsyms]             [k] native_write_msr_safe\n\n     and so on ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then call chains are analyzed:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;perf report --stdio  -g graph  -i ./my_test.perf.data | c++filt&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;# Overhead  Command                 Shared Object                       Symbol\n# ........  .......  ............................  ...........................\n#\n    29.30%  my_test  my_test                       [.] f2(long)\n            |\n            --- f2(long)\n               |\n                --29.01%-- process_request(long)\n                          main\n                          __libc_start_main\n\n    29.14%  my_test  my_test                       [.] f1(long)\n            |\n            --- f1(long)\n               |\n               |--15.05%-- process_request(long)\n               |          main\n               |          __libc_start_main\n               |\n                --13.79%-- f2(long)\n                          process_request(long)\n                          main\n                          __libc_start_main\n\n    15.17%  my_test  libtcmalloc_minimal.so.0.1.0  [.] operator new(unsigned long)\n            |\n            --- operator new(unsigned long)\n               |\n               |--11.44%-- f1(long)\n               |          |\n               |          |--5.75%-- process_request(long)\n               |          |          main\n               |          |          __libc_start_main\n               |          |\n               |           --5.69%-- f2(long)\n               |                     process_request(long)\n               |                     main\n               |                     __libc_start_main\n               |\n                --3.01%-- process_request(long)\n                          main\n                          __libc_start_main\n\n    13.16%  my_test  libtcmalloc_minimal.so.0.1.0  [.] operator delete(void*)\n            |\n            --- operator delete(void*)\n               |\n               |--9.13%-- f1(long)\n               |          |\n               |          |--4.63%-- f2(long)\n               |          |          process_request(long)\n               |          |          main\n               |          |          __libc_start_main\n               |          |\n               |           --4.51%-- process_request(long)\n               |                     main\n               |                     __libc_start_main\n               |\n               |--3.05%-- process_request(long)\n               |          main\n               |          __libc_start_main\n               |\n                --0.80%-- f2(long)\n                          process_request(long)\n                          main\n                          __libc_start_main\n\n     9.44%  my_test  my_test                       [.] process_request(long)\n            |\n            --- process_request(long)\n               |\n                --9.39%-- main\n                          __libc_start_main\n\n     1.01%  my_test  my_test                       [.] operator delete(void*)@plt\n            |\n            --- operator delete(void*)@plt\n\n     0.97%  my_test  my_test                       [.] operator new(unsigned long)@plt\n            |\n            --- operator new(unsigned long)@plt\n\n     0.20%  my_test  my_test                       [.] main\n     0.19%  my_test  [kernel.kallsyms]             [k] apic_timer_interrupt\n     0.16%  my_test  [kernel.kallsyms]             [k] _spin_lock\n     and so on ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So at this point you know where your program spends time.&lt;/p&gt;\n\n&lt;p&gt;And this is main.cpp for the test:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n#include &amp;lt;time.h&amp;gt;\n\ntime_t f1(time_t time_value)\n{\n  for (int j =0; j &amp;lt; 10; ++j) {\n    ++time_value;\n    if (j%5 == 0) {\n      double *p = new double;\n      delete p;\n    }\n  }\n  return time_value;\n}\n\ntime_t f2(time_t time_value)\n{\n  for (int j =0; j &amp;lt; 40; ++j) {\n    ++time_value;\n  }\n  time_value=f1(time_value);\n  return time_value;\n}\n\ntime_t process_request(time_t time_value)\n{\n\n  for (int j =0; j &amp;lt; 10; ++j) {\n    int *p = new int;\n    delete p;\n    for (int m =0; m &amp;lt; 10; ++m) {\n      ++time_value;\n    }\n  }\n  for (int i =0; i &amp;lt; 10; ++i) {\n    time_value=f1(time_value);\n    time_value=f2(time_value);\n  }\n  return time_value;\n}\n\nint main(int argc, char* argv2[])\n{\n  int number_loops = argc &amp;gt; 1 ? atoi(argv2[1]) : 1;\n  time_t time_value = time(0);\n  printf(&quot;number loops %d\\n&quot;, number_loops);\n  printf(&quot;time_value: %d\\n&quot;, time_value );\n\n  for (int i =0; i &amp;lt; number_loops; ++i) {\n    time_value = process_request(time_value);\n  }\n  printf(&quot;time_value: %ld\\n&quot;, time_value );\n  return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Try &lt;a href=&quot;http://oprofile.sourceforge.net/about/&quot; rel=&quot;noreferrer&quot;&gt;OProfile&lt;/a&gt;. It is a much better tool for profiling your code. I would also suggest Intel &lt;a href=&quot;http://en.wikipedia.org/wiki/VTune&quot; rel=&quot;noreferrer&quot;&gt;VTune&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The two tools above can narrow down time spent in a particular line of code, annotate your code, show assembly and how much particular instruction takes.  Beside time metric, you can also query specific counters, i.e. cache hits, etc.&lt;/p&gt;\n\n&lt;p&gt;Unlike gprof, you can profile any process/binary running on your system using either of the two.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/google-perftools/&quot;&gt;Google performance tools&lt;/a&gt; include a simple to use profiler. CPU as well as heap profiler is available.&lt;/p&gt;\n    ","\n&lt;p&gt;Take a look at &lt;a href=&quot;http://sysprof.com/&quot; rel=&quot;noreferrer&quot;&gt;Sysprof&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Your distribution may have it already.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;a href=&quot;http://lttng.org/&quot; rel=&quot;nofollow&quot;&gt;http://lttng.org/&lt;/a&gt; if you want a high performance tracer&lt;/p&gt;\n    "],"535":["\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.python.org/2/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot; title=&quot;os.listdir&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; returns everything inside a directory -- including both &lt;strong&gt;files&lt;/strong&gt; and &lt;strong&gt;directories&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/os.path.html#module-os.path&quot; rel=&quot;noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&apos;s &lt;code&gt;isfile()&lt;/code&gt; can be used to only list files:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; listdir\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; isfile, join\nonlyfiles = [f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; listdir(mypath) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isfile(join(mypath, f))]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Alternatively, &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/2/library/os.html#os.walk&quot; rel=&quot;noreferrer&quot; title=&quot;os.walk&quot;&gt;&lt;code&gt;os.walk()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;yields two lists&lt;/strong&gt; for each directory it visits -- one for &lt;strong&gt;files&lt;/strong&gt; and one for &lt;strong&gt;dirs&lt;/strong&gt;. If you only want the top directory you can break the first time it yields:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; walk\n\nf = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (dirpath, dirnames, filenames) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; walk(mypath):\n    f.extend(filenames)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or, shorter:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; walk\n\nfilenames = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(walk(mypath), (&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, []))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# [] if no file&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I prefer using the &lt;a href=&quot;https://docs.python.org/library/glob.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; module, as it does pattern matching and expansion.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/adam/*&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It does pattern matching intuitively&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-comment&quot;&gt;# All files and directories ending with .txt and that don&apos;t begin with a dot:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/adam/*.txt&quot;&lt;/span&gt;)) \n&lt;span class=&quot;hljs-comment&quot;&gt;# All files and directories ending with .txt with depth of 2 folders, ignoring names beginning with a dot:&lt;/span&gt;\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/adam/*/*.txt&quot;&lt;/span&gt;)) \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;It will return a list with the queried files and directories:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/adam/file1.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;/home/adam/file2.txt&apos;&lt;/span&gt;, .... ]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Note that &lt;code&gt;glob&lt;/code&gt; ignores files and directories that begin with a dot &lt;code&gt;.&lt;/code&gt;, as those are considered hidden files and directories, unless the pattern is something like &lt;code&gt;.*&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;Use &lt;a href=&quot;https://docs.python.org/3/library/glob.html#glob.escape&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;glob.escape&lt;/code&gt;&lt;/a&gt; to escape strings that are not meant to be patterns:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(glob.glob(glob.escape(directory_name) + &lt;span class=&quot;hljs-string&quot;&gt;&quot;/*.txt&quot;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;list in the current directory&lt;/p&gt;\n&lt;p&gt;With &lt;code&gt;listdir&lt;/code&gt; in &lt;code&gt;os&lt;/code&gt; module you get the files and the folders in the current dir&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\narr = os.listdir()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Looking in a directory&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;arr = os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;c:\\\\files&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;with &lt;code&gt;glob&lt;/code&gt; you can specify a type of file to list like this&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n\ntxtfiles = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*.txt&quot;&lt;/span&gt;):\n    txtfiles.append(file)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;or&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;mylist = [f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*.txt&quot;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;get the full path of only files in the current directory&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; listdir\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; isfile, join\n\ncwd = os.getcwd()\nonlyfiles = [os.path.join(cwd, f) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(cwd) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; \nos.path.isfile(os.path.join(cwd, f))]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(onlyfiles) \n\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;G:\\\\getfilesname\\\\getfilesname.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;G:\\\\getfilesname\\\\example.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Getting the full path name with &lt;code&gt;os.path.abspath&lt;/code&gt;&lt;/p&gt;\n&lt;p&gt;You get the full path in return&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n files_path = [os.path.abspath(x) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir()]\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(files_path)\n \n [&lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\documenti\\applications.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\documenti\\collections.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Walk: going through sub directories&lt;/p&gt;\n&lt;p&gt;os.walk returns the root, the directories list and the files list, that is why I unpacked them in r, d, f in the for loop; it, then, looks for other files and directories in the subfolders of the root and so on until there are no subfolders.&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Getting the current work directory (cwd)&lt;/span&gt;\nthisdir = os.getcwd()\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# r=root, d=directories, f = files&lt;/span&gt;\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r, d, f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(thisdir):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; file.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.docx&quot;&lt;/span&gt;):\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(os.path.join(r, file))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;To go up in the directory tree&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Method 1&lt;/span&gt;\nx = os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;..&apos;&lt;/span&gt;)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Method 2&lt;/span&gt;\nx= os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;/&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get files of a particular subdirectory with &lt;code&gt;os.listdir()&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\nx = os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./content&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;os.walk(&apos;.&apos;) - current directory&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n arr = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(arr)\n \n &amp;gt;&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;5bs_Turismo1.pdf&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;5bs_Turismo1.pptx&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;esperienza.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;next(os.walk(&apos;.&apos;)) and os.path.join(&apos;dir&apos;, &apos;file&apos;)&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n arr = []\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; d,r,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;)):\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f:\n         arr.append(os.path.join(r,file))\n\n &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; arr:\n     &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(files)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;F:\\\\_python\\\\dict_class.py\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;F:\\\\_python\\\\programmi.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;next... walk&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; [os.path.join(r,file) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r,d,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n \n &amp;gt;&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\dict_class.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\programmi.txt&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;os.walk&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;x = [os.path.join(r,file) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r,d,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; f]\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(x)\n\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\dict.py&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\progr.txt&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;F:\\\\_python\\\\readl.py&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;os.listdir() - get only txt files&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; arr_txt = [x &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.txt&quot;&lt;/span&gt;)]\n \n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;glob&lt;/code&gt; to get the full path of the files&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; path\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n\nx = [path(f).abspath() &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\*.txt&quot;&lt;/span&gt;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;os.path.isfile&lt;/code&gt; to avoid directories in the list&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os.path\nlistOfFiles = [f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(f)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Using &lt;code&gt;pathlib&lt;/code&gt; from Python 3.4&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n\nflist = []\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pathlib.Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).iterdir():\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.is_file():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(p)\n        flist.append(p)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;With &lt;code&gt;list comprehension&lt;/code&gt;:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;flist = [p &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pathlib.Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).iterdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Use glob method in pathlib.Path()&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n\npy = pathlib.Path().glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*.py&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get all and only files with os.walk: checks only in the third element returned, i.e. the list of the files&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\nx = [i[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)]\ny=[]\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; x:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; t:\n        y.append(f)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get only files with next in a directory: returns only the file in the root folder&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n x = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;F://python&apos;&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get only directories with next and walk in a directory, because in the [1] element there are the folders only&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&apos;F://python&apos;&lt;/span&gt;))[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;# for the current dir use (&apos;.&apos;)&lt;/span&gt;\n \n &amp;gt;&amp;gt;&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;python3&apos;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&apos;others&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Get all the &lt;code&gt;subdir&lt;/code&gt; names with &lt;code&gt;walk&lt;/code&gt;&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; r,d,f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(&lt;span class=&quot;hljs-string&quot;&gt;&quot;F:\\\\_python&quot;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; dirs &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; d:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(dirs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;code&gt;os.scandir()&lt;/code&gt; from Python 3.5 and greater&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\nx = [f.name &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.scandir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.is_file()]\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Another example with `scandir` (a little variation from docs.python.org)&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# This one is more efficient than `os.listdir`.&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# In this case, it shows the files only in the current directory&lt;/span&gt;\n&lt;span class=&quot;hljs-comment&quot;&gt;# where the script is executed.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; os.scandir() &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; i:\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; i:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry.is_file():\n            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry.name)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\nos.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&quot;somedirectory&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;will return a list of all files and directories in &quot;somedirectory&quot;.&lt;/p&gt;\n    ","\n&lt;p&gt;A one-line solution to get &lt;strong&gt;only list of files&lt;/strong&gt; (no subdirectories):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filenames = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(path))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or absolute pathnames:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;paths = [os.path.join(path, fn) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; fn &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(path))[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Getting Full File Paths From a Directory and All Its Subdirectories&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_filepaths&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;directory&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;\n    This function will generate the file names in a directory \n    tree by walking the tree either top-down or bottom-up. For each \n    directory in the tree rooted at directory top (including top itself), \n    it yields a 3-tuple (dirpath, dirnames, filenames).\n    &quot;&quot;&quot;&lt;/span&gt;\n    file_paths = []  &lt;span class=&quot;hljs-comment&quot;&gt;# List which will store all of the full filepaths.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-comment&quot;&gt;# Walk the tree.&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; root, directories, files &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(directory):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; files:\n            &lt;span class=&quot;hljs-comment&quot;&gt;# Join the two strings in order to form the full filepath.&lt;/span&gt;\n            filepath = os.path.join(root, filename)\n            file_paths.append(filepath)  &lt;span class=&quot;hljs-comment&quot;&gt;# Add it to the list.&lt;/span&gt;\n\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; file_paths  &lt;span class=&quot;hljs-comment&quot;&gt;# Self-explanatory.&lt;/span&gt;\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Run the above function and store its results in a variable.   &lt;/span&gt;\nfull_file_paths = get_filepaths(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/Users/johnny/Desktop/TEST&quot;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The path I provided in the above function contained 3 files two of them in the root directory, and another in a subfolder called &quot;SUBFOLDER.&quot;  You can now do things like:&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;print full_file_paths&lt;/code&gt; which will print the list:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[&apos;/Users/johnny/Desktop/TEST/file1.txt&apos;, &apos;/Users/johnny/Desktop/TEST/file2.txt&apos;, &apos;/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat&apos;]&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you&apos;d like, you can open and read the contents, or focus only on files with the extension &quot;.dat&quot; like in the code below:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; full_file_paths:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.endswith(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.dat&quot;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;/Users/johnny/Desktop/TEST/SUBFOLDER/file3.dat&lt;/code&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;Since version 3.4 there are builtin &lt;em&gt;iterators&lt;/em&gt; for this which are a lot more efficient than &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.python.org/3/library/pathlib.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt;: &lt;em&gt;New in version 3.4.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[p &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; pathlib.Path(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;).iterdir() &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;According to &lt;a href=&quot;http://www.python.org/dev/peps/pep-0428/&quot; rel=&quot;noreferrer&quot;&gt;PEP 428&lt;/a&gt;, the aim of the &lt;a href=&quot;http://docs.python.org/3/library/pathlib.html&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;pathlib&lt;/code&gt;&lt;/a&gt; library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.scandir()&lt;/code&gt;&lt;/a&gt;: &lt;em&gt;New in version 3.5.&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[entry &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.scandir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note that &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.walk&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.walk()&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.scandir()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt; from version 3.5, and its speed got increased by 2-20 times according to &lt;a href=&quot;http://www.python.org/dev/peps/pep-0471/&quot; rel=&quot;noreferrer&quot;&gt;PEP 471&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Let me also recommend reading ShadowRanger&apos;s comment below.&lt;/p&gt;\n    ","\n&lt;h2&gt;Preliminary notes&lt;/h2&gt;\n\n\n\n&lt;ul&gt;\n&lt;li&gt;Although there&apos;s a clear differentiation between &lt;em&gt;file&lt;/em&gt; and &lt;em&gt;directory&lt;/em&gt; terms in the question text, some may argue that directories are actually special files&lt;/li&gt;\n&lt;li&gt;The statement: &quot;&lt;em&gt;all files of a directory&lt;/em&gt;&quot; can be interpreted in two ways:\n\n&lt;ol&gt;\n&lt;li&gt;All &lt;strong&gt;direct&lt;/strong&gt; (or level 1) descendants &lt;strong&gt;only&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;All descendants in the whole directory tree (including the ones in sub-directories)&lt;/li&gt;\n&lt;/ol&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;When the question was asked, I imagine that &lt;em&gt;Python &lt;strong&gt;2&lt;/strong&gt;&lt;/em&gt;, was the &lt;em&gt;LTS&lt;/em&gt; version, however the code samples will be run by &lt;em&gt;Python &lt;strong&gt;3&lt;/strong&gt;(&lt;strong&gt;.5&lt;/strong&gt;)&lt;/em&gt; (I&apos;ll keep them as &lt;em&gt;Python 2&lt;/em&gt; compliant as possible; also, any code belonging to &lt;em&gt;Python&lt;/em&gt; that I&apos;m going to post, is from &lt;strong&gt;v3.5.4&lt;/strong&gt; - unless otherwise specified). That has consequences related to another keyword in the question: &quot;&lt;em&gt;add them into a &lt;strong&gt;list&lt;/strong&gt;&lt;/em&gt;&quot;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In pre &lt;em&gt;Python 2.2&lt;/em&gt; versions, sequences (iterables) were mostly represented by lists (tuples, sets, ...)&lt;/li&gt;\n&lt;li&gt;In &lt;em&gt;Python 2.2&lt;/em&gt;, the concept of &lt;strong&gt;generator&lt;/strong&gt; (&lt;a href=&quot;https://wiki.python.org/moin/Generators&quot; rel=&quot;noreferrer&quot;&gt;[Python.Wiki]: Generators&lt;/a&gt;) - courtesy of &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: The yield statement&lt;/a&gt;) - was introduced. As time passed, generator counterparts started to appear for functions that returned/worked with lists&lt;/li&gt;\n&lt;li&gt;In &lt;em&gt;Python 3&lt;/em&gt;, generator is the default behavior&lt;/li&gt;\n&lt;li&gt;Not sure if returning a list is still mandatory (or a generator would do as well), but passing a generator to the &lt;em&gt;list&lt;/em&gt; constructor, will create a list out of it (and also consume it). The example below illustrates the differences on &lt;a href=&quot;https://docs.python.org/3/library/functions.html#map&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: &lt;strong&gt;map&lt;/strong&gt;(&lt;em&gt;function, iterable, ...&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;2.7.10 (default, Mar  8 2016, 15:02:46) [MSC v.1600 64 bit (AMD64)]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])  &lt;span class=&quot;hljs-comment&quot;&gt;# Just a dummy lambda function&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(m)\n([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(m)\n&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.version\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)]&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m = &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;lambda&lt;/span&gt; x: x, [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;m, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(m)\n(&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x000001B4257342B0&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;map&apos;&lt;/span&gt;&amp;gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(m)\nTraceback (most recent call last):\n  File &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;\nTypeError: &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; of &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;map&apos;&lt;/span&gt; has no &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;()\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm0 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(m)  &lt;span class=&quot;hljs-comment&quot;&gt;# Build a list from the generator&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm0, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(lm0)\n([&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;)\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm1 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(m)  &lt;span class=&quot;hljs-comment&quot;&gt;# Build a list from the same generator&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;lm1, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;(lm1)  &lt;span class=&quot;hljs-comment&quot;&gt;# Empty list now - generator already consumed&lt;/span&gt;\n([], &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;list&apos;&lt;/span&gt;&amp;gt;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The examples will be based on a directory called &lt;em&gt;root_dir&lt;/em&gt; with the following structure (this example is for &lt;em&gt;Win&lt;/em&gt;, but I&apos;m using the same tree on &lt;em&gt;Lnx&lt;/em&gt; as well):&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;E:\\Work\\Dev\\StackOverflow\\q003207219&amp;gt;tree /f &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\nFolder PATH listing &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; volume Work\nVolume serial number &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; 00000029 &lt;span class=&quot;hljs-number&quot;&gt;3655&lt;/span&gt;:6FED\nE:\\WORK\\DEV\\STACKOVERFLOW\\Q003207219\\ROOT_DIR\n¦   file0\n¦   file1\n¦\n+---dir0\n¦   +---dir00\n¦   ¦   ¦   file000\n¦   ¦   ¦\n¦   ¦   +---dir000\n¦   ¦           file0000\n¦   ¦\n¦   +---dir01\n¦   ¦       file010\n¦   ¦       file011\n¦   ¦\n¦   +---dir02\n¦       +---dir020\n¦           +---dir0200\n+---dir1\n¦       file10\n¦       file11\n¦       file12\n¦\n+---dir2\n¦   ¦   file20\n¦   ¦\n¦   +---dir20\n¦           file200\n¦\n+---dir3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;h2&gt;Solutions&lt;/h2&gt;\n\n&lt;h3&gt;Programmatic approaches:&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: os.&lt;strong&gt;listdir&lt;/strong&gt;(&lt;em&gt;path=&apos;.&apos;&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order, and does not include the special entries &lt;code&gt;&apos;.&apos;&lt;/code&gt; and &lt;code&gt;&apos;..&apos;&lt;/code&gt; ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;# Path relative to current dir (os.getcwd())&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;os.listdir(root_dir)  &lt;span class=&quot;hljs-comment&quot;&gt;# List all the items in root_dir&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(root_dir) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(root_dir, item))]  &lt;span class=&quot;hljs-comment&quot;&gt;# Filter items and only keep files (strip out directories)&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A more elaborate example (&lt;em&gt;code_os_listdir.py&lt;/em&gt;):&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pprint &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pformat\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_dir_content&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders, recursive&lt;/span&gt;):\n    entries = os.listdir(path)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entries:\n        entry_with_path = os.path.join(path, entry)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(entry_with_path):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; include_folders:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; entry_with_path\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; recursive:\n                &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; sub_entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _get_dir_content(entry_with_path, include_folders, recursive):\n                    &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; sub_entry\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; entry_with_path\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_dir_content&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    path_len = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(path) + &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(os.path.sep)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _get_dir_content(path, include_folders, recursive):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; prepend_folder_name &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; item[path_len:]\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;_get_dir_content_old&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders, recursive&lt;/span&gt;):\n    entries = os.listdir(path)\n    ret = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entries:\n        entry_with_path = os.path.join(path, entry)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(entry_with_path):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; include_folders:\n                ret.append(entry_with_path)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; recursive:\n                ret.extend(_get_dir_content_old(entry_with_path, include_folders, recursive))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            ret.append(entry_with_path)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_dir_content_old&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;):\n    path_len = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(path) + &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(os.path.sep)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [item &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; prepend_folder_name &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; item[path_len:] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; _get_dir_content_old(path, include_folders, recursive)]\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n    ret0 = get_dir_content(root_dir, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n    lret0 = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(ret0)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(ret0, &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(lret0), pformat(lret0))\n    ret1 = get_dir_content_old(root_dir, include_folders=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;, prepend_folder_name=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(ret1), pformat(ret1))\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;There are two implementations:\n\n&lt;ul&gt;\n&lt;li&gt;One that uses generators (of course here it seems useless, since I immediately convert the result to a list)&lt;/li&gt;\n&lt;li&gt;The classic one (function names ending in &lt;strong&gt;_old&lt;/strong&gt;)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Recursion is used (to get into subdirectories)&lt;/li&gt;\n&lt;li&gt;For each implementation there are two functions:\n\n&lt;ul&gt;\n&lt;li&gt;One that starts with an &lt;em&gt;underscore&lt;/em&gt; (&lt;strong&gt;_&lt;/strong&gt;): &quot;private&quot; (should not be called directly) - that does all the work&lt;/li&gt;\n&lt;li&gt;The public one (wrapper over previous): it just strips off the initial path (if required) from the returned entries. It&apos;s an ugly implementation, but it&apos;s the only idea that I could come with at this point&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;In terms of performance, generators are generally a little bit faster (considering both &lt;em&gt;creation&lt;/em&gt; and  &lt;em&gt;iteration&lt;/em&gt; times), but I didn&apos;t test them in recursive functions, and also I am iterating inside the function over inner generators - don&apos;t know how performance friendly is that&lt;/li&gt;\n&lt;li&gt;Play with the arguments to get different results&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(py35x64_test) E:\\Work\\Dev\\StackOverflow\\q003207219&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;e:\\Work\\Dev\\VEnvs\\py35x64_test\\Scripts\\python.exe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;code_os_listdir.py&quot;&lt;/span&gt;\n&amp;lt;generator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; get_dir_content at &lt;span class=&quot;hljs-number&quot;&gt;0x000001BDDBB3DF10&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00\\\\dir000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00\\\\dir000\\\\file0000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir00\\\\file000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir01&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir01\\\\file010&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir01\\\\file011&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir02&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir02\\\\dir020&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0\\\\dir02\\\\dir020\\\\dir0200&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1\\\\file10&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1\\\\file11&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1\\\\file12&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2\\\\dir20&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2\\\\dir20\\\\file200&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2\\\\file20&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir3&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt; [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir00\\\\dir000\\\\file0000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir00\\\\file000&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir01\\\\file010&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0\\\\dir01\\\\file011&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1\\\\file10&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1\\\\file11&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1\\\\file12&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2\\\\dir20\\\\file200&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2\\\\file20&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;,\n &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;2&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: os.&lt;strong&gt;scandir&lt;/strong&gt;(&lt;em&gt;path=&apos;.&apos;&lt;/em&gt;)&lt;/a&gt; (&lt;em&gt;Python &lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;+, backport: &lt;a href=&quot;https://pypi.org/project/scandir&quot; rel=&quot;noreferrer&quot;&gt;[PyPI]: scandir&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Return an iterator of &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry&lt;/a&gt; objects corresponding to the entries in the directory given by &lt;em&gt;path&lt;/em&gt;. The entries are yielded in arbitrary order, and the special entries &lt;code&gt;&apos;.&apos;&lt;/code&gt; and &lt;code&gt;&apos;..&apos;&lt;/code&gt; are not included.&lt;/p&gt;\n  \n  &lt;p&gt;Using &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.scandir&quot; rel=&quot;noreferrer&quot;&gt;scandir()&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.listdir&quot; rel=&quot;noreferrer&quot;&gt;listdir()&lt;/a&gt; can significantly increase the performance of code that also needs file type or file attribute information, because &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry&lt;/a&gt; objects expose this information if the operating system provides it when scanning a directory. All &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry&lt;/a&gt; methods may perform a system call, but &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry.is_dir&quot; rel=&quot;noreferrer&quot;&gt;is_dir()&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry.is_file&quot; rel=&quot;noreferrer&quot;&gt;is_file()&lt;/a&gt; usually only require a system call for symbolic links; &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.DirEntry.stat&quot; rel=&quot;noreferrer&quot;&gt;os.DirEntry.stat()&lt;/a&gt; always requires a system call on Unix but only requires one for symbolic links on Windows.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = os.path.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# Explicitly prepending current directory&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scandir_iterator = os.scandir(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scandir_iterator\n&amp;lt;nt.ScandirIterator &lt;span class=&quot;hljs-built_in&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;hljs-number&quot;&gt;0x00000268CF4BC140&lt;/span&gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.path &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; scandir_iterator]\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;.\\\\root_dir\\\\file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.path &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; scandir_iterator]  &lt;span class=&quot;hljs-comment&quot;&gt;# Will yield an empty list as it was consumed by previous iteration (automatically performed by the list comprehension)&lt;/span&gt;\n[]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;scandir_iterator = os.scandir(root_dir)  &lt;span class=&quot;hljs-comment&quot;&gt;# Reinitialize the generator&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; scandir_iterator :\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(item.path):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(item.name)\n...\nfile0\nfile1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It&apos;s similar to &lt;code&gt;os.listdir&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;But it&apos;s also more flexible (and offers more functionality), more &lt;em&gt;Python&lt;/em&gt;ic (and in some cases, faster)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;3&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html#os.walk&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: os.&lt;strong&gt;walk&lt;/strong&gt;(&lt;em&gt;top, topdown=True, onerror=None, followlinks=False&lt;/em&gt;)&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory &lt;em&gt;top&lt;/em&gt; (including &lt;em&gt;top&lt;/em&gt; itself), it yields a 3-tuple (&lt;code&gt;dirpath&lt;/code&gt;, &lt;code&gt;dirnames&lt;/code&gt;, &lt;code&gt;filenames&lt;/code&gt;).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = os.path.join(os.getcwd(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# Specify the full path&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;walk_generator = os.walk(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_entry = &lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(walk_generator)  &lt;span class=&quot;hljs-comment&quot;&gt;# First entry corresponds to the root dir (passed as an argument)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_entry\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;])\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]  &lt;span class=&quot;hljs-comment&quot;&gt;# Display dirs and files (direct descendants) in a single list&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[os.path.join(root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], item) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] + root_dir_entry[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]]  &lt;span class=&quot;hljs-comment&quot;&gt;# Display all the entries in the previous list by their full path&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; walk_generator:  &lt;span class=&quot;hljs-comment&quot;&gt;# Display the rest of the elements (corresponding to every subdir)&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry)\n...\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir00&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir01&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir02&apos;&lt;/span&gt;], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir00&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir000&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file000&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir00\\\\dir000&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file0000&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir01&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file010&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file011&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir02&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir020&apos;&lt;/span&gt;], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir02\\\\dir020&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0200&apos;&lt;/span&gt;], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir0\\\\dir02\\\\dir020\\\\dir0200&apos;&lt;/span&gt;, [], [])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir1&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file10&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file11&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file12&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir2&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir20&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file20&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir2\\\\dir20&apos;&lt;/span&gt;, [], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file200&apos;&lt;/span&gt;])\n(&lt;span class=&quot;hljs-string&quot;&gt;&apos;E:\\\\Work\\\\Dev\\\\StackOverflow\\\\q003207219\\\\root_dir\\\\dir3&apos;&lt;/span&gt;, [], [])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Under the scenes, it uses &lt;code&gt;os.scandir&lt;/code&gt; (&lt;code&gt;os.listdir&lt;/code&gt; on older versions)&lt;/li&gt;\n&lt;li&gt;It does the heavy lifting by recurring in subfolders&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;4&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/glob.html#glob.glob&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: glob.&lt;strong&gt;glob&lt;/strong&gt;(&lt;em&gt;pathname, *, recursive=False&lt;/em&gt;)&lt;/a&gt; (&lt;a href=&quot;https://docs.python.org/3/library/glob.html#glob.glob&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: glob.&lt;strong&gt;iglob&lt;/strong&gt;(&lt;em&gt;pathname, *, recursive=False&lt;/em&gt;)&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Return a possibly-empty list of path names that match &lt;em&gt;pathname&lt;/em&gt;, which must be a string containing a path specification. &lt;em&gt;pathname&lt;/em&gt; can be either absolute (like &lt;code&gt;/usr/src/Python-1.5/Makefile&lt;/code&gt;) or relative (like &lt;code&gt;../../Tools/*/*.gif&lt;/code&gt;), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell).&lt;br&gt;...&lt;br&gt;&lt;strong&gt;&lt;em&gt;Changed in version 3.5&lt;/em&gt;&lt;/strong&gt;: Support for recursive globs using &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob, os\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;wildcard_pattern = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = os.path.join(&lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;, wildcard_pattern)  &lt;span class=&quot;hljs-comment&quot;&gt;# Match every file/dir name&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\*&apos;&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;glob_list = glob.glob(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;glob_list\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.replace(&lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt; + os.path.sep, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob_list]  &lt;span class=&quot;hljs-comment&quot;&gt;# Strip the dir name and the path separator from begining&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; glob.iglob(root_dir + &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;, recursive=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;):\n&lt;span class=&quot;hljs-meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entry)\n...\nroot_dir\\\nroot_dir\\dir0\nroot_dir\\dir0\\dir00\nroot_dir\\dir0\\dir00\\dir000\nroot_dir\\dir0\\dir00\\dir000\\file0000\nroot_dir\\dir0\\dir00\\file000\nroot_dir\\dir0\\dir01\nroot_dir\\dir0\\dir01\\file010\nroot_dir\\dir0\\dir01\\file011\nroot_dir\\dir0\\dir02\nroot_dir\\dir0\\dir02\\dir020\nroot_dir\\dir0\\dir02\\dir020\\dir0200\nroot_dir\\dir1\nroot_dir\\dir1\\file10\nroot_dir\\dir1\\file11\nroot_dir\\dir1\\file12\nroot_dir\\dir2\nroot_dir\\dir2\\dir20\nroot_dir\\dir2\\dir20\\file200\nroot_dir\\dir2\\file20\nroot_dir\\dir3\nroot_dir\\file0\nroot_dir\\file1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Uses &lt;code&gt;os.listdir&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;For large trees (especially if &lt;em&gt;recursive&lt;/em&gt; is on), &lt;em&gt;iglob&lt;/em&gt; is preferred&lt;/li&gt;\n&lt;li&gt;Allows advanced filtering based on name (due to the wildcard)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;5&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: class pathlib.&lt;strong&gt;Path&lt;/strong&gt;(&lt;em&gt;*pathsegments&lt;/em&gt;)&lt;/a&gt; (&lt;em&gt;Python &lt;strong&gt;3.4&lt;/strong&gt;&lt;/em&gt;+, backport: &lt;a href=&quot;https://pypi.org/project/pathlib2&quot; rel=&quot;noreferrer&quot;&gt;[PyPI]: pathlib2&lt;/a&gt;)&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; pathlib\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance = pathlib.Path(root_dir)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance\nWindowsPath(&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance.name\n&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir&apos;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_instance.is_dir()\n&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[item.name &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; root_dir_instance.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)]  &lt;span class=&quot;hljs-comment&quot;&gt;# Wildcard searching for all direct descendants&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[os.path.join(item.parent.name, item.name) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; root_dir_instance.glob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; item.is_dir()]  &lt;span class=&quot;hljs-comment&quot;&gt;# Display paths (including parent) for files only&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This is &lt;em&gt;one&lt;/em&gt; way of achieving our goal&lt;/li&gt;\n&lt;li&gt;It&apos;s the &lt;em&gt;OOP&lt;/em&gt; style of handling paths&lt;/li&gt;\n&lt;li&gt;Offers lots of functionalities&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;6&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/dircache.html#dircache.listdir&quot; rel=&quot;noreferrer&quot;&gt;[Python 2]: dircache.listdir(path)&lt;/a&gt; (&lt;em&gt;Python &lt;strong&gt;2&lt;/strong&gt;&lt;/em&gt; only)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;But, according to &lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Lib/dircache.py&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: python/cpython - (2.7) cpython/Lib/dircache.py&lt;/a&gt;, it&apos;s just a (thin) wrapper over &lt;code&gt;os.listdir&lt;/code&gt; with caching&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;listdir&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;List directory contents, using cache.&quot;&quot;&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt;:\n        cached_mtime, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = cache[path]\n        &lt;span class=&quot;hljs-keyword&quot;&gt;del&lt;/span&gt; cache[path]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;except&lt;/span&gt; KeyError:\n        cached_mtime, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, []\n    mtime = os.stat(path).st_mtime\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; mtime != cached_mtime:\n        &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = os.listdir(path)\n        &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;.sort()\n    cache[path] = mtime, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;7&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man3/opendir.3.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: OPENDIR(3)&lt;/a&gt; / &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: READDIR(3)&lt;/a&gt; / &lt;a href=&quot;http://man7.org/linux/man-pages/man3/closedir.3.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: CLOSEDIR(3)&lt;/a&gt; via &lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#module-ctypes&quot; rel=&quot;noreferrer&quot;&gt;[Python 3]: ctypes - A foreign function library for Python&lt;/a&gt; (&lt;em&gt;POSIX&lt;/em&gt; specific)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/ctypes.html#module-ctypes&quot; rel=&quot;noreferrer&quot;&gt;ctypes&lt;/a&gt; is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;em&gt;code_ctypes.py&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; sys\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; ctypes &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Structure, \\\n    c_ulonglong, c_longlong, c_ushort, c_ubyte, c_char, c_int, \\\n    CDLL, POINTER, \\\n    create_string_buffer, get_errno, set_errno, cast\n\n\nDT_DIR = &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;\nDT_REG = &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n\nchar256 = c_char * &lt;span class=&quot;hljs-number&quot;&gt;256&lt;/span&gt;\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;LinuxDirent64&lt;/span&gt;(&lt;span class=&quot;hljs-title class_ inherited__&quot;&gt;Structure&lt;/span&gt;):\n    _fields_ = [\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_ino&quot;&lt;/span&gt;, c_ulonglong),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_off&quot;&lt;/span&gt;, c_longlong),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_reclen&quot;&lt;/span&gt;, c_ushort),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_type&quot;&lt;/span&gt;, c_ubyte),\n        (&lt;span class=&quot;hljs-string&quot;&gt;&quot;d_name&quot;&lt;/span&gt;, char256),\n    ]\n\nLinuxDirent64Ptr = POINTER(LinuxDirent64)\n\nlibc_dll = this_process = CDLL(&lt;span class=&quot;hljs-literal&quot;&gt;None&lt;/span&gt;, use_errno=&lt;span class=&quot;hljs-literal&quot;&gt;True&lt;/span&gt;)\n&lt;span class=&quot;hljs-comment&quot;&gt;# ALWAYS set argtypes and restype for functions, otherwise it&apos;s UB!!!&lt;/span&gt;\nopendir = libc_dll.opendir\nreaddir = libc_dll.readdir\nclosedir = libc_dll.closedir\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_dir_content&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    ret = [path, &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;(), &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;()]\n    dir_stream = opendir(create_string_buffer(path.encode()))\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dir_stream == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;):\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;opendir returned NULL (errno: {:d})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(get_errno()))\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n    set_errno(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)\n    dirent_addr = readdir(dir_stream)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; dirent_addr:\n        dirent_ptr = cast(dirent_addr, LinuxDirent64Ptr)\n        dirent = dirent_ptr.contents\n        name = dirent.d_name.decode()\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dirent.d_type &amp;amp; DT_DIR:\n            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;..&quot;&lt;/span&gt;):\n                ret[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].append(name)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; dirent.d_type &amp;amp; DT_REG:\n            ret[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;].append(name)\n        dirent_addr = readdir(dir_stream)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; get_errno():\n        &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;readdir returned NULL (errno: {:d})&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(get_errno()))\n    closedir(dir_stream)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ret\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;():\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;{:s} on {:s}\\n&quot;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(sys.version, sys.platform))\n    root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n    entries = get_dir_content(root_dir)\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(entries)\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;hljs-string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;It loads the three functions from &lt;em&gt;libc&lt;/em&gt; (loaded in the current process) and calls them (for more details check &lt;a href=&quot;https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-using-python/44661513#44661513&quot;&gt;[SO]: How do I check whether a file exists without exceptions? (@CristiFati&apos;s answer)&lt;/a&gt; - last notes from item &lt;strong&gt;&lt;em&gt;#4.&lt;/em&gt;&lt;/strong&gt;). That would place this approach very close to the &lt;em&gt;Python&lt;/em&gt; / &lt;em&gt;C&lt;/em&gt; edge&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;LinuxDirent64&lt;/em&gt; is the &lt;em&gt;ctypes&lt;/em&gt; representation of &lt;em&gt;struct dirent64&lt;/em&gt; from &lt;a href=&quot;http://man7.org/linux/man-pages/man0/dirent.h.0p.html&quot; rel=&quot;noreferrer&quot;&gt;[man7]: dirent.h(0P)&lt;/a&gt; (so are the &lt;em&gt;DT_&lt;/em&gt; constants) from my machine: &lt;em&gt;Ubtu 16 x64&lt;/em&gt; (&lt;em&gt;4.10.0-40-generic&lt;/em&gt; and &lt;em&gt;libc6-dev:amd64&lt;/em&gt;). On other flavors/versions, the struct definition might differ, and if so, the &lt;em&gt;ctypes&lt;/em&gt; alias should be updated, otherwise it will yield &lt;strong&gt;Undefined Behavior&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;It returns data in the &lt;code&gt;os.walk&lt;/code&gt;&apos;s format. I didn&apos;t bother to make it recursive, but starting from the existing code, that would be a fairly trivial task&lt;/li&gt;\n&lt;li&gt;Everything is doable on &lt;em&gt;Win&lt;/em&gt; as well, the data (libraries, functions, structs, constants, ...) differ&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[cfati@cfati-ubtu16x64-&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:~/Work/Dev/StackOverflow/q003207219]&amp;gt; ./code_ctypes.py\n&lt;span class=&quot;hljs-number&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2&lt;/span&gt; (default, Nov &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2018&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;43&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;)\n[GCC &lt;span class=&quot;hljs-number&quot;&gt;5.4&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20160609&lt;/span&gt;] on linux\n\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir&apos;&lt;/span&gt;, [&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;], [&lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;8&quot;&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.activestate.com/activepython/3.1/pywin32/win32file__FindFilesW_meth.html&quot; rel=&quot;noreferrer&quot;&gt;[ActiveState.Docs]: win32file.FindFilesW&lt;/a&gt; (&lt;em&gt;Win&lt;/em&gt; specific)&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Retrieves a list of matching filenames, using the Windows Unicode API. An interface to the API FindFirstFileW/FindNextFileW/Find close functions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os, win32file, win32con\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir = &lt;span class=&quot;hljs-string&quot;&gt;&quot;root_dir&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;wildcard = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root_dir_wildcard = os.path.join(root_dir, wildcard)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;entry_list = win32file.FindFilesW(root_dir_wildcard)\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(entry_list)  &lt;span class=&quot;hljs-comment&quot;&gt;# Don&apos;t display the whole content as it&apos;s too long&lt;/span&gt;\n&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entry_list]  &lt;span class=&quot;hljs-comment&quot;&gt;# Only display the entry names&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;..&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;file1&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entry_list &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;amp; win32con.FILE_ATTRIBUTE_DIRECTORY &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;..&quot;&lt;/span&gt;)]  &lt;span class=&quot;hljs-comment&quot;&gt;# Filter entries and only display dir names (except self and parent)&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;dir0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir1&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir2&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;dir3&apos;&lt;/span&gt;]\n&amp;gt;&amp;gt;&amp;gt;\n&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[os.path.join(root_dir, entry[-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; entry &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; entry_list &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; entry[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] &amp;amp; (win32con.FILE_ATTRIBUTE_NORMAL | win32con.FILE_ATTRIBUTE_ARCHIVE)]  &lt;span class=&quot;hljs-comment&quot;&gt;# Only display file &quot;full&quot; names&lt;/span&gt;\n[&lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file0&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;root_dir\\\\file1&apos;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;win32file.FindFilesW&lt;/code&gt; is part of &lt;a href=&quot;https://github.com/mhammond/pywin32&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: mhammond/pywin32 - Python for Windows (pywin32) Extensions&lt;/a&gt;, which is a &lt;em&gt;Python&lt;/em&gt; wrapper over &lt;em&gt;WINAPI&lt;/em&gt;s&lt;/li&gt;\n&lt;li&gt;The documentation link is from &lt;a href=&quot;https://www.activestate.com&quot; rel=&quot;noreferrer&quot;&gt;ActiveState&lt;/a&gt;, as I didn&apos;t find any &lt;em&gt;PyWin32&lt;/em&gt; official documentation&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;ol start=&quot;9&quot;&gt;\n&lt;li&gt;Install some (other) third-party package that does the trick\n\n&lt;ul&gt;\n&lt;li&gt;Most likely, will rely on one (or more) of the above (maybe with slight customizations)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;br&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Code is meant to be portable (except places that target a specific area - which are marked) or cross:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;platform (&lt;em&gt;Nix&lt;/em&gt;, &lt;em&gt;Win&lt;/em&gt;, )&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Python&lt;/em&gt; version (2, 3, )&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Multiple path styles (absolute, relatives) were used across the above variants, to illustrate the fact that the &quot;tools&quot; used are flexible in this direction&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;os.listdir&lt;/code&gt; and &lt;code&gt;os.scandir&lt;/code&gt; use &lt;em&gt;opendir&lt;/em&gt; / &lt;em&gt;readdir&lt;/em&gt; / &lt;em&gt;closedir&lt;/em&gt; (&lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/desktop/api/fileapi/nf-fileapi-findfirstfilew&quot; rel=&quot;noreferrer&quot;&gt;[MS.Docs]: FindFirstFileW function&lt;/a&gt; / &lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/desktop/api/fileapi/nf-fileapi-findnextfilew&quot; rel=&quot;noreferrer&quot;&gt;[MS.Docs]: FindNextFileW function&lt;/a&gt; / &lt;a href=&quot;https://docs.microsoft.com/en-gb/windows/desktop/api/fileapi/nf-fileapi-findclose&quot; rel=&quot;noreferrer&quot;&gt;[MS.Docs]: FindClose function&lt;/a&gt;) (via &lt;a href=&quot;https://github.com/python/cpython/blob/master/Modules/posixmodule.c&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: python/cpython - (master) cpython/Modules/posixmodule.c&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;code&gt;win32file.FindFilesW&lt;/code&gt; uses those (&lt;em&gt;Win&lt;/em&gt; specific) functions as well (via &lt;a href=&quot;https://github.com/mhammond/pywin32/blob/master/win32/src/win32file.i&quot; rel=&quot;noreferrer&quot;&gt;[GitHub]: mhammond/pywin32 - (master) pywin32/win32/src/win32file.i&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;_get_dir_content&lt;/em&gt; (from point &lt;strong&gt;&lt;em&gt;#1.&lt;/em&gt;&lt;/strong&gt;) can be implemented using any of these approaches (some will require more work and some less)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Some advanced filtering (instead of just file &lt;em&gt;vs.&lt;/em&gt; dir) could be done: e.g. the &lt;em&gt;include_folders&lt;/em&gt; argument could be replaced by another one (e.g. &lt;em&gt;filter_func&lt;/em&gt;) which would be a function that takes a path as an argument: &lt;code&gt;filter_func=lambda x: True&lt;/code&gt; (this doesn&apos;t strip out anything) and inside &lt;em&gt;_get_dir_content&lt;/em&gt; something like: &lt;code&gt;if not filter_func(entry_with_path): continue&lt;/code&gt; (if the function fails for one entry, it will be skipped), but the more complex the code becomes, the longer it will take to execute&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nota bene!&lt;/strong&gt; Since recursion is used, I must mention that I did some tests on my laptop (&lt;em&gt;Win 10 x64&lt;/em&gt;), totally unrelated to this problem, and when the recursion level was reaching values somewhere in the &lt;em&gt;(990 .. 1000)&lt;/em&gt; range (&lt;em&gt;recursionlimit&lt;/em&gt; - 1000 (default)), I got &lt;em&gt;StackOverflow&lt;/em&gt; :). If the directory tree exceeds that limit (I am not an &lt;em&gt;FS&lt;/em&gt; expert, so I don&apos;t know if that is even possible), that could be a problem. &lt;br&gt;\nI must also mention that I didn&apos;t try to increase &lt;em&gt;recursionlimit&lt;/em&gt; because I have no experience in the area (how much can I increase it before having to also increase the stack at &lt;em&gt;OS&lt;/em&gt; level), but in theory there will always be the possibility for failure, if the dir depth is larger than the highest possible &lt;em&gt;recursionlimit&lt;/em&gt; (on that machine)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The code samples are for demonstrative purposes only. That means that I didn&apos;t take into account error handling (I don&apos;t think there&apos;s any &lt;strong&gt;&lt;em&gt;try&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;except&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;finally&lt;/em&gt;&lt;/strong&gt; block), so the code is not robust (the reason is: to keep it as simple and short as possible). For &lt;em&gt;production&lt;/em&gt;, error handling should be added as well&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3&gt;Other approaches:&lt;/h3&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Use &lt;em&gt;Python&lt;/em&gt; only as a wrapper&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Everything is done using another technology&lt;/li&gt;\n&lt;li&gt;That technology is invoked from &lt;em&gt;Python&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The most famous flavor that I know is what I call the &lt;em&gt;system administrator&lt;/em&gt; approach:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use &lt;em&gt;Python&lt;/em&gt; (or any programming language for that matter) in order to execute &lt;em&gt;shell&lt;/em&gt; commands (and parse their outputs)&lt;/li&gt;\n&lt;li&gt;Some consider this a neat hack&lt;/li&gt;\n&lt;li&gt;I consider it more like a lame workaround (&lt;em&gt;gainarie&lt;/em&gt;), as the action per se is performed from &lt;em&gt;shell&lt;/em&gt; (&lt;em&gt;cmd&lt;/em&gt; in this case), and thus doesn&apos;t have anything to do with &lt;em&gt;Python&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;Filtering (&lt;code&gt;grep&lt;/code&gt; / &lt;code&gt;findstr&lt;/code&gt;) or output formatting could be done on both sides, but I&apos;m not going to insist on it. Also, I deliberately used &lt;code&gt;os.system&lt;/code&gt; instead of &lt;code&gt;subprocess.Popen&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;(py35x64_test) E:\\Work\\Dev\\StackOverflow\\q003207219&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;e:\\Work\\Dev\\VEnvs\\py35x64_test\\Scripts\\python.exe&quot;&lt;/span&gt; -c &lt;span class=&quot;hljs-string&quot;&gt;&quot;import os;os.system(\\&quot;dir /b root_dir\\&quot;)&quot;&lt;/span&gt;\ndir0\ndir1\ndir2\ndir3\nfile0\nfile1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/blockquote&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;In general this approach is to be avoided, since if some command output format slightly differs between &lt;em&gt;OS&lt;/em&gt; versions/flavors, the parsing code should be adapted as well; not to mention differences between locales).&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n    ","\n&lt;p&gt;I really liked &lt;a href=&quot;https://stackoverflow.com/a/3215392/901641&quot;&gt;adamk&apos;s answer&lt;/a&gt;, suggesting that you use &lt;code&gt;glob()&lt;/code&gt;, from the module of the same name. This allows you to have pattern matching with &lt;code&gt;*&lt;/code&gt;s.&lt;/p&gt;\n\n&lt;p&gt;But as other people pointed out in the comments, &lt;code&gt;glob()&lt;/code&gt; can get tripped up over inconsistent slash directions. To help with that, I suggest you use the &lt;code&gt;join()&lt;/code&gt; and &lt;code&gt;expanduser()&lt;/code&gt; functions in the &lt;code&gt;os.path&lt;/code&gt; module, and perhaps the &lt;code&gt;getcwd()&lt;/code&gt; function in the &lt;code&gt;os&lt;/code&gt; module, as well.&lt;/p&gt;\n\n&lt;p&gt;As examples:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under C:\\Users\\admin that contains a folder called wlp.&lt;/span&gt;\nglob(&lt;span class=&quot;hljs-string&quot;&gt;&apos;C:\\Users\\admin\\*\\wlp&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above is terrible - the path has been hardcoded and will only ever work on Windows between the drive name and the &lt;code&gt;\\&lt;/code&gt;s being hardcoded into the path.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; join\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under Users, admin, that contains a folder called wlp.&lt;/span&gt;\nglob(join(&lt;span class=&quot;hljs-string&quot;&gt;&apos;Users&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;admin&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wlp&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The above works better, but it relies on the folder name &lt;code&gt;Users&lt;/code&gt; which is often found on Windows and not so often found on other OSs. It also relies on the user having a specific name, &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; expanduser, join\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under the user directory that contains a folder called wlp.&lt;/span&gt;\nglob(join(expanduser(&lt;span class=&quot;hljs-string&quot;&gt;&apos;~&apos;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wlp&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works perfectly across all platforms.&lt;/p&gt;\n\n&lt;p&gt;Another great example that works perfectly across platforms and does something a bit different:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; glob    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; glob\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os      &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; getcwd\n&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; join\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Return everything under the current directory that contains a folder called wlp.&lt;/span&gt;\nglob(join(getcwd(), &lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&apos;wlp&apos;&lt;/span&gt;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hope these examples help you see the power of a few of the functions you can find in the standard Python library modules.&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):\n    &lt;span class=&quot;hljs-comment&quot;&gt;# returns a list of names (with extension, without full path) of all files &lt;/span&gt;\n    &lt;span class=&quot;hljs-comment&quot;&gt;# in folder path&lt;/span&gt;\n    files = []\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(path):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(path, name)):\n            files.append(name)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; files \n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;If you are looking for a Python implementation of &lt;strong&gt;find&lt;/strong&gt;, this is a recipe I use rather frequently:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; findtools.find_files &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; (find_files, Match)\n\n&lt;span class=&quot;hljs-comment&quot;&gt;# Recursively find all *.sh files in **/usr/bin**&lt;/span&gt;\nsh_files_pattern = Match(filetype=&lt;span class=&quot;hljs-string&quot;&gt;&apos;f&apos;&lt;/span&gt;, name=&lt;span class=&quot;hljs-string&quot;&gt;&apos;*.sh&apos;&lt;/span&gt;)\nfound_files = find_files(path=&lt;span class=&quot;hljs-string&quot;&gt;&apos;/usr/bin&apos;&lt;/span&gt;, match=sh_files_pattern)\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; found_file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; found_files:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; found_file\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So I made a PyPI &lt;a href=&quot;https://pypi.python.org/pypi/findtools/&quot; rel=&quot;noreferrer&quot;&gt;package&lt;/a&gt; out of it and there is also a &lt;a href=&quot;https://github.com/ewiger/findtools&quot; rel=&quot;noreferrer&quot;&gt;GitHub repository&lt;/a&gt;. I hope that someone finds it potentially useful for this code.&lt;/p&gt;\n    ","\n&lt;p&gt;For greater results, you can use &lt;code&gt;listdir()&lt;/code&gt; method of the &lt;code&gt;os&lt;/code&gt; module along with a generator (a generator is a powerful iterator that keeps its state, remember?). The following code works fine with both versions: Python 2 and Python 3.&lt;/p&gt;\n\n&lt;p&gt;Here&apos;s a code:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;path&lt;/span&gt;):  \n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(path):\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(path, file)):\n            &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; file\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; files(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;):  \n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; (file)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The &lt;code&gt;listdir()&lt;/code&gt; method returns the list of entries for the given directory. The method &lt;code&gt;os.path.isfile()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; if the given entry is a file. And the &lt;code&gt;yield&lt;/code&gt; operator quits the func but keeps its current state, and it returns only the name of the entry detected as a file. All the above allows us to loop over the generator function.&lt;/p&gt;\n    ","\n&lt;p&gt;&lt;strong&gt;Returning a list of absolute filepaths, does not recurse into subdirectories&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;L = [os.path.join(os.getcwd(),f) &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isfile(os.path.join(os.getcwd(),f))]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;A wise teacher told me once that:&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;When there are several established ways to do something, none of them is good for all cases.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I will thus add a solution for a &lt;strong&gt;subset&lt;/strong&gt; of the problem: quite often, we only want to check whether a file matches a start string and an end string, without going into subdirectories. We would thus like a function that returns a list of filenames, like:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;filenames = dir_filter(&lt;span class=&quot;hljs-string&quot;&gt;&apos;foo/baz&apos;&lt;/span&gt;, radical=&lt;span class=&quot;hljs-string&quot;&gt;&apos;radical&apos;&lt;/span&gt;, extension=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.txt&apos;&lt;/span&gt;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you care to first declare two functions, this can be done:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;file_filter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;filename, radical=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, extension=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Check if a filename matches a radical and extension&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; filename:\n        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;\n    filename = filename.strip()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(filename.startswith(radical) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; filename.endswith(extension))\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;dir_filter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;dirname=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, radical=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, extension=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;Filter filenames in directory according to radical and extension&quot;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; dirname:\n        dirname = &lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [filename &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.listdir(dirname)\n                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; file_filter(filename, radical, extension)]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This solution could be easily generalized with regular expressions (and you might want to add a &lt;code&gt;pattern&lt;/code&gt; argument, if you do not want your patterns to always stick to the start or end of the filename).&lt;/p&gt;\n    ","\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os.path\n\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;target_dir&lt;/span&gt;):\n    item_list = os.listdir(target_dir)\n\n    file_list = &lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;()\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; item_list:\n        item_dir = os.path.join(target_dir,item)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(item_dir):\n            file_list += get_files(item_dir)\n        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n            file_list.append(item_dir)\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; file_list\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here I use a recursive structure.&lt;/p&gt;\n    ","\n&lt;p&gt;Using generators&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;get_files&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;search_path&lt;/span&gt;):\n     &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (dirpath, _, filenames) &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; os.walk(search_path):\n         &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; filenames:\n             &lt;span class=&quot;hljs-keyword&quot;&gt;yield&lt;/span&gt; os.path.join(dirpath, filename)\nlist_files = get_files(&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; list_files:\n    &lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(filename)\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Another very readable variant for Python 3.4+ is using pathlib.Path.glob:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; Path\nfolder = &lt;span class=&quot;hljs-string&quot;&gt;&apos;/foo&apos;&lt;/span&gt;\n[f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Path(folder).glob(&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; f.is_file()]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is simple to make more specific, e.g. only look for Python source files which are not symbolic links, also in all subdirectories:&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;[f &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Path(folder).glob(&lt;span class=&quot;hljs-string&quot;&gt;&apos;**/*.py&apos;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; f.is_symlink()]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;For Python 2:&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;pip install rglob\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Then do&lt;/p&gt;\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; rglob\nfile_list = rglob.rglob(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/home/base/dir/&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt;)\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; file_list\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Here&apos;s my general-purpose function for this.  It returns a list of file paths rather than filenames since I found that to be more useful.  It has a few optional arguments that make it versatile.  For instance, I often use it with arguments like &lt;code&gt;pattern=&apos;*.txt&apos;&lt;/code&gt; or &lt;code&gt;subfolders=True&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; os\n&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; fnmatch\n\n&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;list_paths&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;folder=&lt;span class=&quot;hljs-string&quot;&gt;&apos;.&apos;&lt;/span&gt;, pattern=&lt;span class=&quot;hljs-string&quot;&gt;&apos;*&apos;&lt;/span&gt;, case_sensitive=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;, subfolders=&lt;span class=&quot;hljs-literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;):\n    &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&quot;Return a list of the file paths matching the pattern in the specified \n    folder, optionally including files inside subfolders.\n    &quot;&quot;&quot;&lt;/span&gt;\n    match = fnmatch.fnmatchcase &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; case_sensitive &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; fnmatch.fnmatch\n    walked = os.walk(folder) &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; subfolders &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; [&lt;span class=&quot;hljs-built_in&quot;&gt;next&lt;/span&gt;(os.walk(folder))]\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; [os.path.join(root, f)\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; root, dirnames, filenames &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; walked\n            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; filenames &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; match(f, pattern)]\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I will provide a sample one liner where sourcepath and file type can be provided as input. The code returns a list of filenames with csv extension. Use &lt;em&gt;.&lt;/em&gt; in case all files needs to be returned. This will also recursively scans the subdirectories. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[y for x in os.walk(sourcePath) for y in glob(os.path.join(x[0], &apos;*.csv&apos;))]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Modify file extensions and source path as needed. &lt;/p&gt;\n    ","\n&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://docs.python.org/release/2.6.7/library/dircache.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;dircache&lt;/a&gt; is  &quot;Deprecated since version 2.6: The dircache module has been removed in Python 3.0.&quot;&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; dircache\n&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt; = dircache.listdir(pathname)\ni = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;\ncheck = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])\ntemp = []\ncount = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;)\n&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; count != &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:\n  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i]) != check:\n     temp.append(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])\n     check = &lt;span class=&quot;hljs-built_in&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;list&lt;/span&gt;[i])\n  &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:\n    i = i + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n    count = count - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;\n\n&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt; temp\n&lt;/code&gt;&lt;/pre&gt;\n    "]},"page":"16","randomQuestions":[{"title":"Remove duplicate values from JS array [duplicate]","slug":"remove-duplicate-values-from-js-array-duplicate-1657387801931"},{"title":"How to affect other elements when one element is hovered","slug":"how-to-affect-other-elements-when-one-element-is-hovered-1657387832363"},{"title":"What is the (function() { } )() construct in JavaScript?","slug":"what-is-the-(function()-)()-construct-in-javascript-1657385508348"},{"title":"Reshaping data.frame from wide to long format","slug":"reshaping-data.frame-from-wide-to-long-format-1657384678522"},{"title":"The difference between bracket [ ] and double bracket [[ ]] for accessing the elements of a list or dataframe","slug":"the-difference-between-bracket-and-double-bracket-for-accessing-the-elements-of-a-list-or-dataframe-1657388451711"},{"title":"Using fflush(stdin)","slug":"using-fflush(stdin)-1657387602771"},{"title":"console.log() async or sync?","slug":"console.log()-async-or-sync-1657388401087"},{"title":"What should main() return in C and C++?","slug":"what-should-main()-return-in-c-and-c++-1657384745630"},{"title":"Random number generator only generating one random number","slug":"random-number-generator-only-generating-one-random-number-1657385468315"},{"title":"How to extract and access data from JSON with PHP?","slug":"how-to-extract-and-access-data-from-json-with-php-1657384483259"},{"title":"Is storing a delimited list in a database column really that bad?","slug":"is-storing-a-delimited-list-in-a-database-column-really-that-bad-1657384474773"},{"title":"What is the best way to detect a mobile device?","slug":"what-is-the-best-way-to-detect-a-mobile-device-1657387665025"},{"title":"What is an undefined reference/unresolved external symbol error and how do I fix it?","slug":"what-is-an-undefined-referenceunresolved-external-symbol-error-and-how-do-i-fix-it-1657384255179"},{"title":"What is the meaning of single and double underscore before an object name?","slug":"what-is-the-meaning-of-single-and-double-underscore-before-an-object-name-1657387926929"},{"title":"event.preventDefault() vs. return false","slug":"event.preventdefault()-vs.-return-false-1657387458377"},{"title":"When does SQLiteOpenHelper onCreate() / onUpgrade() run?","slug":"when-does-sqliteopenhelper-oncreate()-onupgrade()-run-1657384883864"},{"title":"Grouping functions (tapply, by, aggregate) and the *apply family","slug":"grouping-functions-(tapply-by-aggregate)-and-the-*apply-family-1657387844286"},{"title":"What and where are the stack and heap?","slug":"what-and-where-are-the-stack-and-heap-1657387415361"},{"title":"What does a space mean in a CSS selector? i.e. What is the difference between .classA.classB and .classA .classB?","slug":"what-does-a-space-mean-in-a-css-selector-i.e.-what-is-the-difference-between-.classa.classb-and-.classa-.classb-1657387912095"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"}]},"__N_SSG":true}