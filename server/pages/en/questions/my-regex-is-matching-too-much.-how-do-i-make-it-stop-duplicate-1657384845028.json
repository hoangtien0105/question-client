{"pageProps":{"data":{"answer":["\n&lt;p&gt;Make &lt;code&gt;.*&lt;/code&gt; non-greedy by adding &apos;&lt;code&gt;?&lt;/code&gt;&apos; after it:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;Project name:\\s+(.*?)\\s+J[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}:\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;Using non-greedy quantifiers here is probably the best solution, also because it is more efficient than the greedy alternative: Greedy matches generally go as far as they can (here, until the end of the text!) and then trace back character after character to try and match the part coming afterwards.&lt;/p&gt;\n\n&lt;p&gt;However, consider using a negative character class instead:&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-css&quot;&gt;Project name:\\s+(\\S*)\\s+J[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;]{&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;}:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;\\S&lt;/code&gt; means everything except a whitespace and this is exactly what you want.&lt;/p&gt;\n    ","\n&lt;p&gt;Well, &lt;code&gt;&quot;.*&quot;&lt;/code&gt; is a greedy selector. You make it non-greedy by using &lt;code&gt;&quot;.*?&quot;&lt;/code&gt; When using the latter construct, the regex engine will, at every step it matches text into the &lt;code&gt;&quot;.&quot;&lt;/code&gt; attempt to match whatever make come after the &lt;code&gt;&quot;.*?&quot;&lt;/code&gt;. This means that if for instance nothing comes after the &lt;code&gt;&quot;.*?&quot;&lt;/code&gt;, then it matches nothing. &lt;/p&gt;\n\n&lt;p&gt;Here&apos;s what I used. &lt;code&gt;s&lt;/code&gt; contains your original string. This code is .NET specific, but most flavors of regex will have something similar.&lt;/p&gt;\n\n&lt;pre class=&quot;default s-code-block&quot;&gt;&lt;code class=&quot;hljs language-csharp&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; m = Regex.Match(s, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;Project name: (?&amp;lt;name&amp;gt;.*?) J\\d+&quot;&lt;/span&gt;).Groups[&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;].Value;\n&lt;/code&gt;&lt;/pre&gt;\n    ","\n&lt;p&gt;I would also recommend you experiment with regular expressions using &quot;Expresso&quot; - it&apos;s a utility a great (and free) utility for regex editing and testing.&lt;/p&gt;\n\n&lt;p&gt;One of its upsides is that its UI exposes a lot of regex functionality that people unexprienced with regex might not be familiar with, in a way that it would be easy for them to learn these new concepts.&lt;/p&gt;\n\n&lt;p&gt;For example, when building your regex using the UI, and choosing &quot;*&quot;, you have the ability to check the checkbox &quot;As few as possible&quot; and see the resulting regex, as well as test its behavior, even if you were unfamiliar with non-greedy expressions before.&lt;/p&gt;\n\n&lt;p&gt;Available for download at their site:\n&lt;a href=&quot;http://www.ultrapico.com/Expresso.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.ultrapico.com/Expresso.htm&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Express download:\n&lt;a href=&quot;http://www.ultrapico.com/ExpressoDownload.htm&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.ultrapico.com/ExpressoDownload.htm&lt;/a&gt;&lt;/p&gt;\n    ","\n&lt;p&gt;(Project name:\\s+[A-Z]:(?:\\\\w+)+.[a-zA-Z]+\\s+J[0-9]{7})(?=:)&lt;/p&gt;\n\n&lt;p&gt;This will work for you.&lt;/p&gt;\n\n&lt;p&gt;Adding (?:\\\\w+)+.[a-zA-Z]+ will be more restrictive instead of .*&lt;/p&gt;\n    "],"id":169,"title":"My regex is matching too much. How do I make it stop? [duplicate]","content":"\n                    &lt;div&gt;\n            &lt;aside class=&quot;s-notice s-notice__info post-notice js-post-notice mb16&quot; role=&quot;status&quot;&gt;\n        &lt;div class=&quot;d-flex fd-column fw-nowrap&quot;&gt;\n            &lt;div class=&quot;d-flex fw-nowrap&quot;&gt;\n                &lt;div class=&quot;flex--item wmn0 fl1 lh-lg&quot;&gt;\n                    &lt;div class=&quot;flex--item fl1 lh-lg&quot;&gt;\n                        &lt;b&gt;This question already has answers here&lt;/b&gt;:\n                        \n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n                    &lt;div class=&quot;flex--item mb0 mt4&quot;&gt;\n                        &lt;a href=&quot;/questions/2503413/regular-expression-to-stop-at-first-match&quot; dir=&quot;ltr&quot;&gt;Regular expression to stop at first match&lt;/a&gt;\n                            &lt;span class=&quot;question-originals-answer-count&quot;&gt;\n                                (9 answers)\n                            &lt;/span&gt;\n                    &lt;/div&gt;\n                &lt;div class=&quot;flex--item mb0 mt8&quot;&gt;Closed &lt;span title=&quot;2020-03-02 16:50:33Z&quot; class=&quot;relativetime&quot;&gt;2 years ago&lt;/span&gt;.&lt;/div&gt;\n        &lt;/div&gt;\n&lt;/aside&gt;\n\n    &lt;/div&gt;\n\n&lt;p&gt;I have this gigantic ugly string:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;J0000000: Transaction A0001401 started on 8/22/2008 9:49:29 AM\nJ0000010: Project name: E:\\foo.pf\nJ0000011: Job name: MBiek Direct Mail Test\nJ0000020: Document 1 - Completed successfully\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;I&apos;m trying to extract pieces from it using regex. In this case, I want to grab everything after &lt;code&gt;Project Name&lt;/code&gt; up to the part where it says &lt;code&gt;J0000011:&lt;/code&gt; (the 11 is going to be a different number every time).&lt;/p&gt;\n&lt;p&gt;Here&apos;s the regex I&apos;ve been playing with:&lt;/p&gt;\n&lt;pre class=&quot;lang-none s-code-block&quot;&gt;&lt;code&gt;Project name:\\s+(.*)\\s+J[0-9]{7}:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;The problem is that it doesn&apos;t stop until it hits the &lt;strong&gt;J0000020:&lt;/strong&gt; at the end.&lt;/p&gt;\n&lt;p&gt;How do I make the regex stop at the first occurrence of &lt;code&gt;J[0-9]{7}&lt;/code&gt;?&lt;/p&gt;\n    ","slug":"my-regex-is-matching-too-much.-how-do-i-make-it-stop-duplicate-1657384845028","postType":"QUESTION","createdAt":"2022-07-09T16:40:45.000Z","updatedAt":"2022-07-09T16:40:45.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Why is iostream::eof inside a loop condition (i.e. `while (!stream.eof())`) considered wrong?","slug":"why-is-iostream::eof-inside-a-loop-condition-(i.e.-while-(!stream.eof()))-considered-wrong-1657384355427"},{"title":"Android permission doesn't work even if I have declared it","slug":"android-permission-doesn't-work-even-if-i-have-declared-it-1657387726990"},{"title":"How do I access previous promise results in a .then() chain?","slug":"how-do-i-access-previous-promise-results-in-a-.then()-chain-1657387705386"},{"title":"Get the row(s) which have the max value in groups using groupby","slug":"get-the-row(s)-which-have-the-max-value-in-groups-using-groupby-1657388014787"},{"title":"How to test multiple variables for equality against a single value?","slug":"how-to-test-multiple-variables-for-equality-against-a-single-value-1657384358504"},{"title":"Where do I find the current C or C++ standard documents?","slug":"where-do-i-find-the-current-c-or-c++-standard-documents-1657388006897"},{"title":"Copy array by value","slug":"copy-array-by-value-1657387649531"},{"title":"Randomize a List<T>","slug":"randomize-a-listlesstgreater-1657388172793"},{"title":"How do I split a delimited string so I can access individual items?","slug":"how-do-i-split-a-delimited-string-so-i-can-access-individual-items-1657388042385"},{"title":"Loop through an array in JavaScript","slug":"loop-through-an-array-in-javascript-1657387821551"},{"title":"Align inline-block DIVs to top of container element","slug":"align-inline-block-divs-to-top-of-container-element-1657387489610"},{"title":"Relative imports for the billionth time","slug":"relative-imports-for-the-billionth-time-1657387756383"},{"title":"The Definitive C Book Guide and List","slug":"the-definitive-c-book-guide-and-list-1657384747653"},{"title":"What is the `self` parameter in class methods?","slug":"what-is-the-self-parameter-in-class-methods-1657387518448"},{"title":"srand() — why call it only once?","slug":"srand()-why-call-it-only-once-1657387794760"},{"title":"Why is “while( !feof(file) )” always wrong?","slug":"why-is-\"while(-!feof(file)-)\"-always-wrong-1657384367349"},{"title":"What are the basic rules and idioms for operator overloading?","slug":"what-are-the-basic-rules-and-idioms-for-operator-overloading-1657384449752"},{"title":"Why can't an element with a z-index value cover its child?","slug":"why-can't-an-element-with-a-z-index-value-cover-its-child-1657387707187"},{"title":"SQL select only rows with max value on a column [duplicate]","slug":"sql-select-only-rows-with-max-value-on-a-column-duplicate-1657384614292"},{"title":"Useless use of cat?","slug":"useless-use-of-cat-1657388390794"}]},"__N_SSG":true}