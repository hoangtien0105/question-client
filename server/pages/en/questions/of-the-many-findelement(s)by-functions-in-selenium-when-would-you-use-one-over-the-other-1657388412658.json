{"pageProps":{"data":{"answer":["\n&lt;p&gt;This question have been asked and answered in numerous forums in different formats. Considering them all if we prioritize the locators the list would be as follows :&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: Select element with the specified &lt;code&gt;id&lt;/code&gt; attribute.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: Select first element with the specified &lt;code&gt;name&lt;/code&gt; attribute.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;link_text&lt;/strong&gt;: Select link (anchor tag) element which contains &lt;em&gt;text&lt;/em&gt; matching the specified &lt;code&gt;LinkText&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;partial_link_text&lt;/strong&gt;: Select link (anchor tag) element which contains &lt;em&gt;text&lt;/em&gt; matching the specified &lt;code&gt;PartialLinkText&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;tag_name&lt;/strong&gt;: Locate Element using a &lt;code&gt;Tag Name&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;class_name&lt;/strong&gt;: Locate Element using a &lt;code&gt;ClassName&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;css_selector&lt;/strong&gt;: Select the element using &lt;code&gt;CssSelectors&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;xpath&lt;/strong&gt;: Locate an element using an &lt;code&gt;XPath&lt;/code&gt; expression.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;So the question now is &lt;strong&gt;Whats New&lt;/strong&gt;?&lt;/p&gt;\n&lt;p&gt;The answer is &lt;strong&gt;Selenium have evolved a lot recently&lt;/strong&gt;. &lt;strong&gt;&lt;code&gt;WebDriver&lt;/code&gt;&lt;/strong&gt; is now a &lt;a href=&quot;https://www.w3.org/TR/webdriver/&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;W3C Recommendation Candidate&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. Things within &lt;code&gt;Selenium&lt;/code&gt; are changing pretty fast. It&apos;s no more only about choosing the locator. We need to use a locator which will :&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;em&gt;Uniquely identify an element&lt;/em&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;The performance of the locator must be optimized.&lt;/em&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Keeping these two factors in mind, the best strategy would be to &lt;strong&gt;Mock the DOM&lt;/strong&gt;. The &lt;a href=&quot;https://www.w3.org/TR/webdriver/#locator-strategies&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;strong&gt;&lt;code&gt;W3C Recommendation Candidate&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; does mentions the list of the locators as per the below :&lt;/p&gt;\n&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/ZTq7X.png&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/ZTq7X.png&quot; alt=&quot;Selenium_Locators&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;So the verdict is clear and concise.&lt;/p&gt;\n    ","\n&lt;p&gt;In my experience &lt;strong&gt;CSS&lt;/strong&gt; is the preferable selector because it can be concise, is well documented and web developers are likely to have more experience and exposure to it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;tag_name&lt;/strong&gt; and &lt;strong&gt;class_name&lt;/strong&gt; can all be easily reproduced with simple CSS so I would avoid explicitly using those.&lt;/p&gt;\n\n&lt;p&gt;e.g. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt; ; &lt;em&gt;#my_id&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;; &lt;em&gt;[name=&quot;my_name&quot;]&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;tag_name&lt;/strong&gt;; &lt;em&gt;my_tag&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;class_name&lt;/strong&gt;; &lt;em&gt;.my_class&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The use of &lt;strong&gt;XPath&lt;/strong&gt; is often much maligned; labeled as slow and unstable.  However I disagree with this view point.&lt;/p&gt;\n\n&lt;p&gt;When I interview people I cringe when they say they avoid Xpath because it is slow and brittle. The speed is no longer a concern, and xpath is only as brittle as the person who wrote it.  However, I prefer the syntax of CSS Selectors so that is why I would choose over XPath for the majority of use cases.&lt;/p&gt;\n\n&lt;p&gt;There are 3 scenarios in which XPath is the better choice;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Multiple CSS Selectors may be replaced with one XPath query (e.g find element then iterate through sub elements can be performed in one xpath)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;XPath can select based on Text where as CSS Selector cannot&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;XPath allows you walk up the DOM Tree which can be really useful if you can only identify a control by its child&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I would always avoid selecting by text if possible, but if I had to, I would prefer to use XPath over the built in &lt;strong&gt;Link Text&lt;/strong&gt; and &lt;strong&gt;Partial Link Text&lt;/strong&gt; methods because the Xpath query woudl allow me to be more expressive and allow me to select more than just anchor tags.&lt;/p&gt;\n\n&lt;p&gt;Finally, once gotcha when using XPath is that &quot;class&quot; is treated as a literal string rather than an array of class names as supported in CSS selectors;&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;HTML: &amp;lt;div &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ab cd&quot;&lt;/span&gt;&amp;gt;\n\nCSS matches: div.ab\nCSS matches: div.cd\nCSS matches: div.cd.ab\nCSS matches: div.ab.cd\n\nXPath matches: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ab cd&quot;&lt;/span&gt;]\nXPath matches: //div[contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt;)]\nXPath matches: //div[contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cd&quot;&lt;/span&gt;)]\nXPath matches: //div[contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; contains(@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;cd&quot;&lt;/span&gt;)]\n\nXPath DOES NOT match: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cd&quot;&lt;/span&gt;]\nXPath DOES NOT match: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ab&quot;&lt;/span&gt;]\nXPath DOES NOT match: //div[@&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;cd ab&quot;&lt;/span&gt;]\n&lt;/code&gt;&lt;/pre&gt;\n    "],"id":558,"title":"Of the many findElement(s)/By functions in Selenium, when would you use one over the other?","content":"\n                \n&lt;p&gt;Selenium includes findElement functions, like so... &lt;/p&gt;\n\n&lt;p&gt;.find_element_by_&lt;/p&gt;\n\n&lt;pre class=&quot;lang-py s-code-block&quot;&gt;&lt;code class=&quot;hljs language-python&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;id&lt;/span&gt;\nlink_text\npartial_link_text\nname\nclass_name\ntag_name\ncss_selector\nxpath\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&apos;s apparent that some are limited by design due to how the HTML page was created, such as id, link_text, name, tag_name, as not all tags may contain an id, link_text, etc... However, the css_selector and xpath can do pretty much everything these can do, and then some, but seem to be limited on what they can interact with. For example, some buttons might not be able to get clicked with the xpath, but can get clicked by css_selector. &lt;/p&gt;\n\n&lt;p&gt;So i&apos;m wondering, when would one want to use one over the other(specifically xpath or css_selector)? &lt;/p&gt;\n\n&lt;p&gt;Are the other functions(id, link_text, etc), pretty much not useful, since (at least) I find that xpath/css_selector can do it as well? &lt;/p&gt;\n\n&lt;p&gt;Are there any benefits to using, lets say, link_text, over xpath/css_selector?  &lt;/p&gt;\n    ","slug":"of-the-many-findelement(s)by-functions-in-selenium-when-would-you-use-one-over-the-other-1657388412658","postType":"QUESTION","createdAt":"2022-07-09T17:40:12.000Z","updatedAt":"2022-07-09T17:40:12.000Z","tags":[],"relatedQuestions":[]},"randomQuestions":[{"title":"Sort (order) data frame rows by multiple columns","slug":"sort-(order)-data-frame-rows-by-multiple-columns-1657388355671"},{"title":"Percentage Height HTML 5/CSS","slug":"percentage-height-html-5css-1657387471048"},{"title":"How do you access the matched groups in a JavaScript regular expression?","slug":"how-do-you-access-the-matched-groups-in-a-javascript-regular-expression-1657388233817"},{"title":"Sort a Map<Key, Value> by values","slug":"sort-a-maplesskey-valuegreater-by-values-1657387443904"},{"title":"How can I save an activity state using the save instance state?","slug":"how-can-i-save-an-activity-state-using-the-save-instance-state-1657387429981"},{"title":"How to avoid using Select in Excel VBA","slug":"how-to-avoid-using-select-in-excel-vba-1657384286300"},{"title":"Why do regex constructors need to be double escaped?","slug":"why-do-regex-constructors-need-to-be-double-escaped-1657388004942"},{"title":"addEventListener vs onclick","slug":"addeventlistener-vs-onclick-1657388191429"},{"title":"Pandas conditional creation of a series/dataframe column","slug":"pandas-conditional-creation-of-a-seriesdataframe-column-1657387461003"},{"title":"Download a file by jQuery.Ajax","slug":"download-a-file-by-jquery.ajax-1657388220611"},{"title":"What is the difference between JSON and Object Literal Notation?","slug":"what-is-the-difference-between-json-and-object-literal-notation-1657387515710"},{"title":"What is the difference between public, protected, package-private and private in Java?","slug":"what-is-the-difference-between-public-protected-package-private-and-private-in-java-1657387376262"},{"title":"How to determine equality for two JavaScript objects?","slug":"how-to-determine-equality-for-two-javascript-objects-1657387638650"},{"title":"How do I use shell variables in an awk script?","slug":"how-do-i-use-shell-variables-in-an-awk-script-1657387754261"},{"title":"Using i and j as variables in MATLAB","slug":"using-i-and-j-as-variables-in-matlab-1657388506358"},{"title":"How does the SQL injection from the \"Bobby Tables\" XKCD comic work?","slug":"how-does-the-sql-injection-from-the-\"bobby-tables\"-xkcd-comic-work-1657384621653"},{"title":"Why does std::getline() skip input after a formatted extraction?","slug":"why-does-std::getline()-skip-input-after-a-formatted-extraction-1657384756118"},{"title":"How do JavaScript closures work?","slug":"how-do-javascript-closures-work-1657384418555"},{"title":"Aggregate / summarize multiple variables per group (e.g. sum, mean)","slug":"aggregate-summarize-multiple-variables-per-group-(e.g.-sum-mean)-1657387764061"},{"title":"How do I iterate over the words of a string?","slug":"how-do-i-iterate-over-the-words-of-a-string-1657384806129"}]},"__N_SSG":true}